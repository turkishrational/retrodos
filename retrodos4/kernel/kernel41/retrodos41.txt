     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 27/12/2023 - Retro DOS v4.1 (Previous: 08/10/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E95617                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [8808]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [EC06]                  		dw strategy
   940 0000002B [F706]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [EC06]                  		dw strategy
   946 0000003D [1807]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [EC06]                  		dw strategy
   952 0000004F [FC06]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [EC06]                  		dw strategy
   958 00000061 [3007]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [EC06]                  		dw strategy
   967 00000073 [3507]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [EC06]                  		dw strategy
   985 00000083 [1807]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [EC06]                  		dw strategy
   991 00000095 [0307]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [EC06]                  		dw strategy
   997 000000A7 [0A07]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [EC06]                  		dw strategy
  1011 000000C0 [1107]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [EC06]                  		dw strategy
  1017 000000D2 [1E07]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [EC06]                  		dw strategy
  1027 000000E4 [2407]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [EC06]                  		dw strategy
  1033 000000F6 [2A07]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275                                  ; 22/12/2023
  1276                                  %if 0
  1277                                  sm92:		db 3			; .spf
  1278                                  		db 9			; .spt
  1279                                  		db 112	; 70h		; .cdire
  1280                                  		dw 1440	; 2*9*80	; .csec
  1281                                  		db 2			; .spau
  1282                                  		db 2			; .chead
  1283                                  %endif
  1284                                  
  1285 000004DE 00                      keyrd_func:	db 0			
  1286 000004DF 01                      keysts_func:	db 1			
  1287 000004E0 00                      printdev:	db 0			; printer device index
  1288                                  
  1289                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1290 000004E1 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1291                                  
  1292 000004E9 0000                    daycnt:		dw 0			
  1293 000004EB 00                      t_switch:	db 0			; flag for updating daycnt
  1294 000004EC 00                      havecmosclock:	db 0			
  1295 000004ED 13                      base_century:	db 19			
  1296 000004EE 50                      base_year:	db 80			
  1297 000004EF 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1297 000004F8 1F1E1F             
  1298 000004FB [F314]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1299 000004FD 7000                    		dw 70h ; 17/10/2022	
  1300 000004FF [2214]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1301 00000501 7000                    		dw 70h ; 17/10/2022
  1302 00000503 00                      set_id_flag:	db 0			; flag for getbp routine
  1303 00000504 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1304 0000050D 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1305 00000516 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1305 0000051F 202000             
  1306                                  
  1307                                  ; 22/12/2023
  1308                                  saved_word:
  1309 00000522 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1310 00000524 0000                    start_sec_h:	dw 0			; starting sector number high word
  1311                                  ; 22/12/2023
  1312                                  ;saved_word:	dw 0			; tempory saving place for a word
  1313 00000526 0000                    multrk_flag:	dw 0			
  1314 00000528 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1315 00000529 0000                    vretry_cnt:	dw 0			
  1316 0000052B 0000                    soft_ecc_cnt:	dw 0			
  1317 0000052D 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1318 0000052E 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1319                                  
  1320                                  ; variables for msdioctl.asm module
  1321                                  
  1322                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1323                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1324                                  ;	n	bytes per sector
  1325                                  ;      ---	----------------
  1326                                  ;	0	      128
  1327                                  ;	1	      256
  1328                                  ;	2	      512
  1329                                  ;	3	     1024
  1330                                  
  1331                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1332                                  ;					; we support (was 40 in dos 3.2)
  1333                                  
  1334 00000530 2400                    sectorspertrack: dw 36			
  1335 00000532 00000102                tracktable:	db 0, 0, 1, 2		
  1336 00000536 00000202                		db 0, 0, 2, 2
  1337 0000053A 00000302                		db 0, 0, 3, 2
  1338 0000053E 00000402                		db 0, 0, 4, 2
  1339 00000542 00000502                		db 0, 0, 5, 2
  1340 00000546 00000602                		db 0, 0, 6, 2
  1341 0000054A 00000702                		db 0, 0, 7, 2
  1342 0000054E 00000802                		db 0, 0, 8, 2
  1343 00000552 00000902                		db 0, 0, 9, 2
  1344 00000556 00000A02                		db 0, 0, 10, 2
  1345 0000055A 00000B02                		db 0, 0, 11, 2
  1346 0000055E 00000C02                		db 0, 0, 12, 2
  1347 00000562 00000D02                		db 0, 0, 13, 2
  1348 00000566 00000E02                		db 0, 0, 14, 2
  1349 0000056A 00000F02                		db 0, 0, 15, 2
  1350 0000056E 00001002                		db 0, 0, 16, 2
  1351 00000572 00001102                		db 0, 0, 17, 2
  1352 00000576 00001202                		db 0, 0, 18, 2
  1353 0000057A 00001302                		db 0, 0, 19, 2
  1354 0000057E 00001402                		db 0, 0, 20, 2
  1355 00000582 00001502                		db 0, 0, 21, 2
  1356 00000586 00001602                		db 0, 0, 22, 2
  1357 0000058A 00001702                		db 0, 0, 23, 2
  1358 0000058E 00001802                		db 0, 0, 24, 2
  1359 00000592 00001902                		db 0, 0, 25, 2
  1360 00000596 00001A02                		db 0, 0, 26, 2
  1361 0000059A 00001B02                		db 0, 0, 27, 2
  1362 0000059E 00001C02                		db 0, 0, 28, 2
  1363 000005A2 00001D02                		db 0, 0, 29, 2
  1364 000005A6 00001E02                		db 0, 0, 30, 2
  1365 000005AA 00001F02                		db 0, 0, 31, 2
  1366 000005AE 00002002                		db 0, 0, 32, 2
  1367 000005B2 00002102                		db 0, 0, 33, 2
  1368 000005B6 00002202                		db 0, 0, 34, 2
  1369 000005BA 00002302                		db 0, 0, 35, 2
  1370 000005BE 00002402                		db 0, 0, 36, 2
  1371 000005C2 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1372                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1373                                  					; times	((4*63)	- 144) db 0
  1374                                  
  1375                                  ;-----------------------------------------------------------------------------
  1376                                  
  1377                                  ; this is a real ugly place to put this
  1378                                  ; it should really go in the bds
  1379                                  
  1380 0000062E 00                      mediatype:	db 0			
  1381 0000062F 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1382                                  					; type for format call
  1383 00000630 00                      had_format_error: db 0			; 1 if the previous format operation
  1384                                  					; failed.
  1385                                  
  1386                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1387                                  ; the one passed by "new roms" before we perform a format operation. the old
  1388                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1389                                  ; this table does not contain the previously saved dpt.
  1390                                  		
  1391 00000631 FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1392 00000635 FF                      model_byte:	db 0FFh			; model	byte set at init time
  1393 00000636 00                      secondary_model_byte: db 0
  1394                                  		
  1395 00000637 00                      int19sem:	db 0			; indicate that all int 19
  1396                                  					; initialization is complete
  1397                                  		
  1398                                  ;; we assume the following remain contiguous and their order doesn't change
  1399                                  ;i19_lst:
  1400                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1401                                  ;	public	int19old&aa
  1402                                  ;		db	aa&h	; store the number as a byte
  1403                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1404                                  ;	endm
  1405                                  
  1406                                  ; 21/10/2022
  1407                                  
  1408 00000638 02                      i19_lst:	db 2			
  1409                                  					; Int19old&aa
  1410 00000639 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1411 0000063D 08                      		db 8
  1412 0000063E FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1413 00000642 09                      		db 9
  1414 00000643 FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1415 00000647 0A                      		db 0Ah
  1416 00000648 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1417 0000064C 0B                      		db 0Bh
  1418 0000064D FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1419 00000651 0C                      		db 0Ch
  1420 00000652 FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1421 00000656 0D                      		db 0Dh
  1422 00000657 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1423 0000065B 0E                      		db 0Eh
  1424 0000065C FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1425 00000660 70                      		db 70h
  1426 00000661 FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1427 00000665 72                      		db 72h
  1428 00000666 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1429 0000066A 73                      		db 73h
  1430 0000066B FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1431 0000066F 74                      		db 74h
  1432 00000670 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1433 00000674 76                      		db 76h
  1434 00000675 FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1435 00000679 77                      		db 77h
  1436 0000067A FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1437                                  
  1438                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1439                                  
  1440                                  ;-----------------------------------------------------------------------------
  1441                                  
  1442 0000067E [5403]                  dskdrvs:	dw fdrive1	
  1443 00000680 [B803]                  		dw fdrive2
  1444 00000682 [1C04]                  		dw fdrive3
  1445 00000684 [8004]                  		dw fdrive4
  1446                                  
  1447                                  ;M011 -- made all hard drive stuff variable
  1448                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1449 00000686 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1450                                  
  1451                                  ;-----------------------------------------------------------------------------
  1452                                  
  1453                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1454                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1455                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1456                                  
  1457                                  ;variables for dynamic relocatable modules
  1458                                  ;these should be stay resident.
  1459                                  
  1460 000006B2 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1461                                  					; for p12 machine
  1462                                  
  1463                                  ; data structures for real-time date and time
  1464                                  			
  1465 000006B6 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1466                                  
  1467 000006BA 0000                    month_table:	dw 0			; january
  1468 000006BC 1F00                    		dw 31			; february
  1469 000006BE 3B00                    		dw 59
  1470 000006C0 5A00                    		dw 90
  1471 000006C2 7800                    		dw 120
  1472 000006C4 9700                    		dw 151
  1473 000006C6 B500                    		dw 181
  1474 000006C8 D400                    		dw 212
  1475 000006CA F300                    		dw 243
  1476 000006CC 1101                    		dw 273
  1477 000006CE 3001                    		dw 304
  1478 000006D0 4E01                    		dw 334			; december
  1479                                  
  1480 000006D2 0000                    daycnt2:	dw 0			
  1481 000006D4 00                      feb29:		db 0			; february 29 in a leap	year flag
  1482                                  
  1483                                  ;-----------------------------------------------------------------------------
  1484                                  ;
  1485                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1486                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1487                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1488                                  
  1489                                  ; ----------------------------------------------------------------------------
  1490                                  
  1491                                  ;************************************************************************
  1492                                  ;*									*
  1493                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1494                                  ;*	  are plugged in by seg_reinit.					*
  1495                                  ;*									*
  1496                                  ;************************************************************************
  1497                                  
  1498                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1499                                  ; BIOSCODE_SEGMENT equ 2C7h
  1500                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1501                                  
  1502                                  ; 01/10/2022 - Erdogan Tan
  1503                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1504                                  ;  addresses, they will be changed to table labels later)
  1505                                  
  1506                                  ; 09/12/2022
  1507                                  %if 0
  1508                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1509                                  					; at 2C7h:43h =	70h:25B3h
  1510                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1511                                  					; at 2C7h:396h = 70h:2906h
  1512                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1513                                  					; at 2C7h:1302h	= 70h:3872h
  1514                                  i13x:		dw 154Bh, 2C7h		; i13z
  1515                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1516                                  %endif
  1517                                  
  1518                                  ; 09/12/2022
  1519 000006D5 [4300]9902              cdev:		dw chardev_entry, IOSYSCODESEG
  1520 000006D9 [8B03]9902              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1521 000006DD [7912]9902              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1522 000006E1 [A414]9902              i13x:		dw i13z, IOSYSCODESEG
  1523                                  
  1524                                  end_BC_entries:	; 15/10/2022
  1525                                  
  1526                                  ;************************************************************************
  1527                                  ;*									*
  1528                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1529                                  ;*									*
  1530                                  ;************************************************************************
  1531                                  
  1532                                  cbreak:					
  1533 000006E5 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1534                                  					; indicate break key set
  1535                                  intret:					
  1536 000006EB CF                      		iret
  1537                                  
  1538                                  ; =============== S U B	R O U T	I N E ========================================
  1539                                  
  1540                                  
  1541                                  ;************************************************************************
  1542                                  ;*									*
  1543                                  ;*	strategy - store es:bx (device driver request packet)		*
  1544                                  ;*		     away at [ptrsav] for next driver function call	*
  1545                                  ;*									*
  1546                                  ;************************************************************************
  1547                                  
  1548                                  strategy:	; proc far		
  1549 000006EC 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1550                                  					; away at [ptrsav] for next driver function call
  1551 000006F1 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1552 000006F6 CB                      		retf
  1553                                  
  1554                                  ; ----------------------------------------------------------------------------
  1555                                  
  1556                                  ;************************************************************************
  1557                                  ;*									*
  1558                                  ;*	device driver entry points. these are the initial		*
  1559                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1560                                  ;*	  in the case of our resident drivers, they'll just		*
  1561                                  ;*	  stick a fake return address on the stack which		*
  1562                                  ;*	  points to dispatch tables and possibly some unit		*
  1563                                  ;*	  numbers, and then call through a common entry point		*
  1564                                  ;*	  which can take care of a20 switching				*
  1565                                  ;*									*
  1566                                  ;************************************************************************
  1567                                  
  1568                                  ; 01/10/2022 - Erdogan Tan
  1569                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1570                                  ;  addresses, they will be changed to table labels later)
  1571                                  
  1572                                  ; 09/12/2022
  1573                                  
  1574                                  con_entry:				
  1575 000006F7 E84000                  		call	cdev_entry
  1576                                  ; ----------------------------------------------------------------------------
  1577                                  		;dw 0E4h		; con_table
  1578 000006FA [E300]                  		dw con_table	
  1579                                  					; 2C7h:0E4h = 70h:2654h
  1580                                  ; ----------------------------------------------------------------------------
  1581                                  
  1582                                  prn0_entry:				
  1583 000006FC E83B00                  		call	cdev_entry
  1584                                  ; ----------------------------------------------------------------------------
  1585                                  		;dw 0FBh		; prn_table
  1586 000006FF [FA00]                  		dw prn_table
  1587                                  					; 2C7h:0FBh = 70h:266Bh
  1588 00000701 0000                    		db 0, 0
  1589                                  ; ----------------------------------------------------------------------------
  1590                                  
  1591                                  prn1_entry:				
  1592 00000703 E83400                  		call	cdev_entry
  1593                                  ; ----------------------------------------------------------------------------
  1594                                  		;dw 0FBh		; prn_table
  1595 00000706 [FA00]                  		dw prn_table
  1596                                  					; 2C7h:0FBh = 70h:266Bh
  1597 00000708 0001                    		db 0, 1
  1598                                  ; ----------------------------------------------------------------------------
  1599                                  
  1600                                  prn2_entry:				
  1601 0000070A E82D00                  		call	cdev_entry
  1602                                  ; ----------------------------------------------------------------------------
  1603                                  		;dw 0FBh		; prn_table
  1604 0000070D [FA00]                  		dw prn_table
  1605                                  					; 2C7h:0FBh = 70h:266Bh
  1606 0000070F 0102                    		db 1, 2
  1607                                  ; ----------------------------------------------------------------------------
  1608                                  
  1609                                  prn3_entry:				
  1610 00000711 E82600                  		call	cdev_entry
  1611                                  ; ----------------------------------------------------------------------------
  1612                                  		;dw 0FBh		; prn_table
  1613 00000714 [FA00]                  		dw prn_table
  1614                                  					; 2C7h:0FBh = 70h:266Bh
  1615 00000716 0203                    		db 2, 3
  1616                                  ; ----------------------------------------------------------------------------
  1617                                  
  1618                                  aux0_entry:				
  1619 00000718 E81F00                  		call	cdev_entry
  1620                                  ; ----------------------------------------------------------------------------
  1621                                  		;dw 130h		; aux_table
  1622 0000071B [2F01]                  		dw aux_table
  1623                                  					; 2C7h:130h = 70h:26A0h
  1624 0000071D 00                      		db 0
  1625                                  ; ----------------------------------------------------------------------------
  1626                                  
  1627                                  aux1_entry:				
  1628 0000071E E81900                  		call	cdev_entry
  1629                                  ; ----------------------------------------------------------------------------
  1630                                  		;dw 130h		; aux_table
  1631 00000721 [2F01]                  		dw aux_table
  1632                                  					; 2C7h:130h = 70h:26A0h
  1633 00000723 01                      		db 1
  1634                                  ; ----------------------------------------------------------------------------
  1635                                  
  1636                                  aux2_entry:				
  1637 00000724 E81300                  		call	cdev_entry
  1638                                  ; ----------------------------------------------------------------------------
  1639                                  		;dw 130h		; aux_table
  1640 00000727 [2F01]                  		dw aux_table
  1641                                  					; 2C7h:130h = 70h:26A0h
  1642 00000729 02                      		db 2
  1643                                  ; ----------------------------------------------------------------------------
  1644                                  
  1645                                  aux3_entry:				
  1646 0000072A E80D00                  		call	cdev_entry
  1647                                  ; ----------------------------------------------------------------------------
  1648                                  		;dw 130h		; aux_table
  1649 0000072D [2F01]                  		dw aux_table
  1650                                  					; 2C7h:130h = 70h:26A0h
  1651 0000072F 03                      		db 3
  1652                                  ; ----------------------------------------------------------------------------
  1653                                  
  1654                                  tim_entry:				
  1655 00000730 E80700                  		call	cdev_entry
  1656                                  ; ----------------------------------------------------------------------------
  1657                                  		;dw 147h		; tim_table
  1658 00000733 [4601]                  		dw tim_table
  1659                                  					; 2C7h:147h = 70h:26B7h
  1660                                  ; ----------------------------------------------------------------------------
  1661                                  
  1662                                  ; 15/10/2022
  1663                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1664                                  ; 09/12/2022
  1665                                  DSKTBL equ dsktbl
  1666                                  
  1667                                  dsk_entry:				
  1668 00000735 E80200                  		call	cdev_entry
  1669                                  ; ----------------------------------------------------------------------------
  1670                                  		;dw 4A2h		; dsktbl
  1671 00000738 [9104]                  		dw DSKTBL		; 09/12/2022
  1672                                  					; 2C7h:4A2h = 70h:2A12h
  1673                                  
  1674                                  ; =============== S U B	R O U T	I N E ========================================
  1675                                  
  1676                                  ;************************************************************************
  1677                                  ;*									*
  1678                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1679                                  ;*	This code assumes that if Segment of Device request packet is	*
  1680                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1681                                  ;*	A20 is already on.						*
  1682                                  ;*									*
  1683                                  ;************************************************************************
  1684                                  
  1685                                  cdev_entry:	; proc near		
  1686 0000073A 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1687 00000740 740D                    		jz	short ce_enter_codeseg
  1688                                  				; optimized for DOS in HMA
  1689 00000742 50                      		push	ax
  1690 00000743 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1691 00000747 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1692 0000074C 58                      		pop	ax
  1693 0000074D 7505                    		jnz	short not_from_dos
  1694                                  				; jump is coded this way to fall thru
  1695                                  				; in 99.99% of the cases
  1696                                  ce_enter_codeseg:
  1697 0000074F 2EFF2E[D506]            		jmp	far [cs:cdev]			
  1698                                  		;jmp	dword ptr cs:cdev
  1699                                  ;-----------------------------------------------------------------------------
  1700                                  
  1701                                  not_from_dos:				
  1702 00000754 E86200                  		call	EnsureA20On
  1703 00000757 EBF6                    		jmp	short ce_enter_codeseg
  1704                                  
  1705                                  ;************************************************************************
  1706                                  ;*									*
  1707                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1708                                  ;*	   character in al on the display using int 10h ttywrite	*
  1709                                  ;*									*
  1710                                  ;************************************************************************
  1711                                  
  1712                                  outchr:					
  1713 00000759 50                      		push	ax		; int 29h handler
  1714 0000075A 56                      		push	si
  1715 0000075B 57                      		push	di
  1716 0000075C 55                      		push	bp
  1717 0000075D 53                      		push	bx
  1718 0000075E B40E                    		mov	ah, 0Eh
  1719 00000760 BB0700                  		mov	bx, 7
  1720 00000763 CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1721                                  					; AL = character, BH = display page (alpha modes)
  1722                                  					; BL = foreground color	(graphics modes)
  1723 00000765 5B                      		pop	bx
  1724 00000766 5D                      		pop	bp
  1725 00000767 5F                      		pop	di
  1726 00000768 5E                      		pop	si
  1727 00000769 58                      		pop	ax
  1728 0000076A CF                      		iret
  1729                                  ;-----------------------------------------------------------------------------
  1730                                  
  1731                                  ;************************************************************************
  1732                                  ;*									*
  1733                                  ;*	block13 - our int13 hooker					*
  1734                                  ;*									*
  1735                                  ;************************************************************************
  1736                                  
  1737                                  block13:				
  1738 0000076B 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1739 00000771 7408                    		jz	short skipa20
  1740 00000773 E85400                  		call	IsA20Off	; A20 Off?
  1741 00000776 7503                    		jnz	short skipa20
  1742 00000778 E84300                  		call	EnableA20	; assure a20 enabled
  1743                                  
  1744                                  skipa20:				
  1745 0000077B 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1746 00000780 9C                      		pushf			; fake interrupt
  1747 00000781 2EFF1E[E106]            		call	far [cs:i13x]
  1748                                  		;call	dword ptr cs:i13x
  1749                                  					; call through Bios_Code entry table
  1750 00000786 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1751 0000078B CA0200                  		retf	2
  1752                                  
  1753                                  ; =============== S U B	R O U T	I N E =======================================
  1754                                  
  1755                                  ; the int13 hook calls back here to call-through to the ROM
  1756                                  ; this is necessary because some people have extended their
  1757                                  ; ROM BIOSs to use ds as a parameter/result register and
  1758                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1759                                  
  1760                                  call_orig13:	; proc far		
  1761 0000078E 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1762 00000792 9C                      		pushf			; simulate an int13
  1763 00000793 2EFF1E[B400]            		call	far [cs:Orig13]
  1764                                  		;call	cs:Orig13
  1765 00000798 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1766 0000079D 0E                      		push	cs
  1767 0000079E 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1768                                  
  1769 0000079F 9C                      		pushf
  1770                                  		; 10/12/2022
  1771                                  		; ds = cs
  1772 000007A0 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1773                                  		;cmp	byte [cs:inHMA], 0
  1774 000007A5 7408                    		jz	short corig13_popf_retf
  1775 000007A7 E82000                  		call	IsA20Off
  1776 000007AA 7503                    		jnz	short corig13_popf_retf
  1777 000007AC E80F00                  		call	EnableA20
  1778                                  corig13_popf_retf:			
  1779 000007AF 9D                      		popf
  1780 000007B0 CB                      		retf
  1781                                  
  1782                                  ;-----------------------------------------------------------------------------
  1783                                  
  1784                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1785                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1786                                  
  1787 000007B1 9000FFFF                HiMem:		dd 0FFFF0090h		
  1788 000007B5 80000000                LoMem:		dd 80h
  1789                                  
  1790                                  ; ----------------------------------------------------------------------------			
  1791                                  
  1792                                  ; =============== S U B	R O U T	I N E ========================================
  1793                                  
  1794                                  
  1795                                  ;************************************************************************
  1796                                  ;*									*
  1797                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1798                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1799                                  ;*									*
  1800                                  ;************************************************************************
  1801                                  
  1802                                  EnsureA20On:	; proc near		
  1803 000007B9 E80E00                  		call	IsA20Off
  1804                                  		;jz	short EnableA20
  1805                                  		;retn
  1806                                  		; 18/12/2022
  1807 000007BC 750B                    		jnz	short A20On_retn	
  1808                                  
  1809                                  ; =============== S U B	R O U T	I N E ========================================
  1810                                  
  1811                                  
  1812                                  EnableA20:	; proc near		
  1813 000007BE 50                      		push	ax
  1814 000007BF 53                      		push	bx
  1815 000007C0 B405                    		mov	ah, 5	 ; local enable a20
  1816                                  		;call	cs:xms
  1817 000007C2 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1818 000007C7 5B                      		pop	bx
  1819 000007C8 58                      		pop	ax
  1820                                  A20On_retn:	; 18/12/2022	
  1821 000007C9 C3                      		retn
  1822                                  
  1823                                  ; =============== S U B	R O U T	I N E ========================================
  1824                                  
  1825                                  
  1826                                  IsA20Off:	; proc near		
  1827 000007CA 1E                      		push	ds
  1828 000007CB 06                      		push	es
  1829 000007CC 51                      		push	cx
  1830 000007CD 56                      		push	si
  1831 000007CE 57                      		push	di
  1832 000007CF 2EC536[B107]            		lds	si, [cs:HiMem]
  1833 000007D4 2EC43E[B507]            		les	di, [cs:LoMem]
  1834 000007D9 B90800                  		mov	cx, 8
  1835 000007DC F3A7                    		repe cmpsw
  1836 000007DE 5F                      		pop	di
  1837 000007DF 5E                      		pop	si
  1838 000007E0 59                      		pop	cx
  1839 000007E1 07                      		pop	es
  1840 000007E2 1F                      		pop	ds
  1841 000007E3 C3                      		retn
  1842                                  
  1843                                  ; ----------------------------------------------------------------------------
  1844                                  
  1845                                  DisableA20:
  1846 000007E4 50                      		push	ax
  1847 000007E5 53                      		push	bx
  1848 000007E6 B406                    		mov	ah, 6		; local disable A20
  1849 000007E8 2EFF1E[0E00]            		call	far [cs:xms]
  1850                                  		;call	cs:xms
  1851 000007ED 5B                      		pop	bx
  1852 000007EE 58                      		pop	ax
  1853 000007EF C3                      		retn
  1854                                  
  1855                                  ; ----------------------------------------------------------------------------
  1856                                  
  1857                                  ;************************************************************************
  1858                                  ;*									*
  1859                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1860                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1861                                  ;*									*
  1862                                  ;************************************************************************
  1863                                  
  1864                                  int19:					
  1865 000007F0 0E                      		push	cs
  1866 000007F1 1F                      		pop	ds
  1867 000007F2 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1868 000007F6 B90500                  		mov	cx, 5		; NUMROMVECTORS
  1869                                  		;mov	si, offset RomVectors
  1870 000007F9 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1871                                  next_int:				
  1872 000007FC AC                      		lodsb			; get int number
  1873 000007FD 98                      		cbw			; assume < 128
  1874 000007FE D1E0                    		shl	ax, 1
  1875 00000800 D1E0                    		shl	ax, 1		; int *	4
  1876 00000802 89C7                    		mov	di, ax
  1877 00000804 AD                      		lodsw
  1878 00000805 AB                      		stosw
  1879 00000806 AD                      		lodsw
  1880 00000807 AB                      		stosw			; install the saved vector
  1881 00000808 E2F2                    		loop	next_int
  1882 0000080A 803E[3706]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1883 0000080F 7422                    		jz	short doint19
  1884 00000811 BE[3806]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1885                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1886 00000814 B90E00                  		mov	cx, 14		; num_i19
  1887                                  
  1888                                  i19_restore_loop:			
  1889 00000817 AC                      		lodsb			; get interrupt	number
  1890 00000818 98                      		cbw			; assume < 128
  1891 00000819 89C7                    		mov	di, ax
  1892 0000081B AD                      		lodsw			; get original vector offset
  1893 0000081C 89C3                    		mov	bx, ax		; save it
  1894 0000081E AD                      		lodsw
  1895 0000081F 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1896 00000822 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1897 00000824 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1898 00000827 7408                    		jz	short i19_restor_1
  1899 00000829 01FF                    		add	di, di
  1900 0000082B 01FF                    		add	di, di
  1901 0000082D 93                      		xchg	ax, bx
  1902 0000082E AB                      		stosw
  1903 0000082F 93                      		xchg	ax, bx
  1904 00000830 AB                      		stosw			; put the vector back
  1905                                  
  1906                                  i19_restor_1:				
  1907 00000831 E2E4                    		loop	i19_restore_loop
  1908                                  
  1909                                  doint19:				
  1910 00000833 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1911 00000838 7403                    		jz	short SkipVDisk
  1912 0000083A E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1913                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1914                                  					; the memory above 1MB during a	warm boot.
  1915                                  SkipVDisk:				
  1916 0000083D CD19                    		int	19h		; DISK BOOT
  1917                                  					; causes reboot	of disk	system
  1918                                  
  1919                                  ; =============== S U B	R O U T	I N E ========================================
  1920                                  
  1921                                  ;-----------------------------------------------------------------------------
  1922                                  ;
  1923                                  ; procedure : int15
  1924                                  ;
  1925                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1926                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1927                                  ;		is running high, it Erases the VDISK header
  1928                                  ;		present at 1MB boundary
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------
  1931                                  
  1932                                  ; 16/10/2022
  1933                                  ;DELKEY		equ	53h
  1934                                  ;ROMDATASEG	equ	40h
  1935                                  KBFLAG		equ	17h
  1936                                  ;CTRLSTATE	equ	04h
  1937                                  ;ALTSTATE	equ	08h
  1938                                  
  1939                                  Int15:		; proc near		
  1940                                  		;cmp	ax, 4F00h+DELKEY
  1941 0000083F 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1942 00000842 7405                    		jz	short int15_1
  1943 00000844 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1944                                  		;jmp	cs:Old15
  1945                                  ; ----------------------------------------------------------------------------
  1946                                  
  1947                                  int15_1:				
  1948 00000849 1E                      		push	ds
  1949 0000084A 50                      		push	ax
  1950 0000084B B84000                  		mov	ax, 40h		; ROMDATASEG
  1951 0000084E 8ED8                    		mov	ds, ax
  1952                                  		;mov	al, ds:17h	; [KBFLAG]
  1953                                  		; 16/10/2022
  1954 00000850 A01700                  		mov	al, [KBFLAG]
  1955 00000853 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1956 00000855 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1957 00000857 750C                    		jnz	short int15_2
  1958 00000859 0E                      		push	cs
  1959 0000085A 1F                      		pop	ds
  1960 0000085B 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1961 00000860 7403                    		jz	short int15_2
  1962 00000862 E80800                  		call	EraseVDiskHead
  1963                                  int15_2:				
  1964 00000865 58                      		pop	ax
  1965 00000866 1F                      		pop	ds
  1966 00000867 F9                      		stc
  1967 00000868 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1968                                  		;jmp	cs:Old15
  1969                                  
  1970                                  ; =============== S U B	R O U T	I N E ========================================
  1971                                  
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  ;
  1974                                  ; procedure : EraseVDiskHead
  1975                                  ;
  1976                                  ;		Erases the VDisk Header present in the 1MB boundary
  1977                                  ;
  1978                                  ;-----------------------------------------------------------------------------
  1979                                  
  1980                                  EraseVDiskHead:	; proc near		
  1981 0000086D 50                      		push	ax
  1982 0000086E 51                      		push	cx
  1983 0000086F 57                      		push	di
  1984 00000870 06                      		push	es
  1985 00000871 E845FF                  		call	EnsureA20On
  1986 00000874 B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1987 00000877 8EC0                    		mov	es, ax
  1988 00000879 BF1000                  		mov	di, 10h		; point	to VDISK header
  1989 0000087C B91000                  		mov	cx, 10h		; size of vdisk	header
  1990 0000087F 31C0                    		xor	ax, ax
  1991 00000881 F3AB                    		rep stosw		; clear	it
  1992 00000883 07                      		pop	es
  1993 00000884 5F                      		pop	di
  1994 00000885 59                      		pop	cx
  1995 00000886 58                      		pop	ax
  1996 00000887 C3                      		retn
  1997                                  
  1998                                  ; ----------------------------------------------------------------------------
  1999                                  
  2000                                  ;************************************************************************
  2001                                  ;*									*
  2002                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2003                                  ;*	  it returns through one of the three functions that follow.	*
  2004                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2005                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2006                                  ;*									*
  2007                                  ;************************************************************************
  2008                                  
  2009                                  int_2f:		
  2010 00000888 2EFF2E[DD06]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2011                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2012                                  
  2013                                  ; ----------------------------------------------------------------------------
  2014                                  
  2015                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2016                                  ; note:  is it really necessary to transiton out and then back in?
  2017                                  ;	 It's not as if this is a really speed critical function.
  2018                                  ;	 might as well do whatever's most compact.
  2019                                  
  2020                                  i2f_dskentry:				
  2021 0000088D E9A5FE                  		jmp	dsk_entry
  2022                                  
  2023                                  ; ----------------------------------------------------------------------------
  2024                                  
  2025                                  ;************************************************************************
  2026                                  ;*									*
  2027                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2028                                  ;*		is done. presently does nothing. affects no		*
  2029                                  ;*		registers!						*
  2030                                  ;*									*
  2031                                  ;************************************************************************
  2032                                  
  2033                                  ; 09/12/2022
  2034                                  ; re_init_:
  2035                                  re_init:				; called back by sysinit after
  2036 00000890 CB                      		retf			; a bunch of stuff is done.
  2037                                  					; presently does nothing
  2038                                  
  2039                                  ; ----------------------------------------------------------------------------
  2040                                  
  2041                                  ;SR; WIN386 support
  2042                                  
  2043                                  ; WIN386 instance data structure
  2044                                  ;
  2045                                  ; Here is a Win386 startup info structure which we set up and to which
  2046                                  ; we return a pointer when Win386 initializes.
  2047                                  
  2048 00000891 0300                    Win386_SI:	db 3, 0			; SI_Version
  2049                                  					; Startup Info for Win386
  2050 00000893 00000000                SI_Next:	dd 0			; pointer to next info structure
  2051 00000897 00000000                		dd 0			; a field we don't need
  2052 0000089B 00000000                		dd 0			; another field	we don't need
  2053 0000089F [A308]                  SI_Instance:	dw Instance_Table
  2054 000008A1 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2055                                  
  2056                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2057                                  ; areas. Note that the address and size of the hardware stacks must
  2058                                  ; be calculated and inserted at boot time.
  2059                                  
  2060 000008A3 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2061 000008A7 0200                    		dw 2			; ... 2	bytes
  2062 000008A9 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2063 000008AD 1400                    		dw 14h			; ... 14H bytes
  2064 000008AF [0C00]                  		dw altah		; a con	device buffer...
  2065 000008B1 7000                    		dw 70h			; Bios_Data segment
  2066 000008B3 0100                    		dw 1			; ... 1 byte
  2067                                  
  2068                                  NextStack:
  2069                                  
  2070                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2071                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2072                                  ;	That's just fine as long as these are the last items
  2073                                  ;	in the instance list since the first item is initialized
  2074                                  ;	to 0000 at load time.
  2075                                  
  2076 000008B5 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2077 000008B9 0200                    		dw 2			; ... 2 bytes
  2078 000008BB 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2079 000008BF 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2080 000008C1 00000000                		dd 0			; terminate the	instance table
  2081                                  
  2082                                  					;SR;
  2083 000008C5 00                      IsWin386:	db 0			; Flag to indicate whether
  2084                                  					; Win386 is running or not
  2085                                  ;-----------------------------------------------------------------------------
  2086                                  
  2087                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2088                                  ;when we call it including checking of A20. The code being only about 
  2089                                  ;30 bytes, we might as well put it in BIOS_DATA
  2090                                  
  2091                                  V86_Crit_SetFocus:			
  2092 000008C6 57                      		push	di
  2093 000008C7 06                      		push	es
  2094 000008C8 53                      		push	bx
  2095 000008C9 50                      		push	ax
  2096 000008CA 31FF                    		xor	di, di
  2097 000008CC 8EC7                    		mov	es, di
  2098 000008CE BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2099 000008D1 B88416                  		mov	ax, 1684h	; Get API entry	point
  2100 000008D4 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2101                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2102                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2103 000008D6 8CC0                    		mov	ax, es
  2104 000008D8 09F8                    		or	ax, di
  2105 000008DA 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2106                                  					; Set up stack frame to	simulate a call.
  2107 000008DC 0E                      		push	cs
  2108                                  		;;mov	ax,offset Skip
  2109                                  		;mov	ax,Skip
  2110                                  		;push	ax
  2111                                  		; 08/10/2023
  2112 000008DD 68[E608]                		push	Skip
  2113 000008E0 06                      		push	es
  2114 000008E1 57                      		push	di		; API far call address
  2115 000008E2 B80100                  		mov	ax, 1		; SetFocus function number
  2116 000008E5 CB                      		retf			; do the call
  2117                                  ;-----------------------------------------------------------------------------
  2118                                  
  2119                                  Skip:					
  2120 000008E6 58                      		pop	ax
  2121 000008E7 5B                      		pop	bx
  2122 000008E8 07                      		pop	es
  2123 000008E9 5F                      		pop	di
  2124 000008EA CB                      		retf
  2125                                  
  2126                                  ;End WIN386 support
  2127                                  
  2128                                  ; ----------------------------------------------------------------------------
  2129                                  
  2130                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2131                                  
  2132                                  ; 09/12/2022
  2133                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2134                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2135                                  ; (followings are in sysinit segment)
  2136                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2137                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2138                                  ;DEVICELIST	equ 273h
  2139                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2140                                  ;MEMORYSIZE	equ 292h	
  2141                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2142                                  ;DEFAULTDRIVE	equ 296h
  2143                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2144                                  ;;currentdoslocation equ 271h
  2145                                  ;CURRENTDOSLOCATION equ 271h
  2146                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2147                                  ;SYSINITSTART	equ 267h
  2148                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2149                                  ; 18/10/2022
  2150                                  ;toomanydrivesflag equ 3FFh 
  2151                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2152                                  
  2153                                  ; ----------------------------------------------------------------------------
  2154                                  
  2155 000008EB FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2156                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2157                                  					; (procedure in	SYSINIT	segment)
  2158                                  ; 17/10/2022
  2159 000008ED [1C0A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2160 000008EF 3304                    		dw SYSINITSEG	
  2161                                  
  2162                                  ;SR;
  2163                                  ; A communication block has been setup between the DOS and the BIOS. All
  2164                                  ;the data starting from SysinitPresent will be part of the data block. 
  2165                                  ;Right now, this is the only data being communicated. It can be expanded 
  2166                                  ;later to add more stuff
  2167                                  
  2168 000008F1 00                      SysinitPresent:	db 0			
  2169 000008F2 0000                    endfloppy:	db 0, 0
  2170                                  
  2171                                  ; ----------------------------------------------------------------------------			
  2172                                  
  2173                                  ; Bios_Data ends
  2174                                  	
  2175                                  ; Possibly disposable BIOS data
  2176                                  ; This data follows the	regular	BIOS data,
  2177                                  ; and is part of the same group.
  2178                                  
  2179 000008F4 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2179 000008FD 202000             
  2180                                  					; null volume id
  2181 00000900 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2181 00000909 202000             
  2182                                  					; vid scratch buffer
  2183 0000090C 80                      harddrv:	db 80h			
  2184                                  
  2185                                  end96tpi:
  2186                                  
  2187                                  ;;*********************************************************************
  2188                                  ;;memory allocation for bdss
  2189                                  ;;*********************************************************************
  2190                                  ;
  2191                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2192                                  ;
  2193                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2194                                  ;
  2195                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2196                                  
  2197 0000090D FFFF                    bdss:		dw 0FFFFh		
  2198 0000090F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000918 0210000000F8       
  2199 0000091E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000927 000000000000000003 
  2200 00000930 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 00000939 00000000000000     
  2201 00000940 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 00000949 000000000000000000 
  2202 00000952 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 0000095B 4E414D45           
  2203 0000095F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 00000968 46415431           
  2204 0000096C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 00000971 FFFF                    		dw 0FFFFh
  2206 00000973 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 0000097C 0210000000F8       
  2207 00000982 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 0000098B 000000000000000003 
  2208 00000994 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 0000099D 00000000000000     
  2209 000009A4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 000009AD 000000000000000000 
  2210 000009B6 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 000009BF 4E414D45           
  2211 000009C3 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 000009CC 46415431           
  2212 000009D0 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 000009D5 FFFF                    		dw 0FFFFh
  2214 000009D7 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 000009E0 0210000000F8       
  2215 000009E6 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 000009EF 000000000000000003 
  2216 000009F8 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A01 00000000000000     
  2217 00000A08 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A11 000000000000000000 
  2218 00000A1A 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A23 4E414D45           
  2219 00000A27 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A30 46415431           
  2220 00000A34 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000A39 FFFF                    		dw 0FFFFh
  2222 00000A3B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000A44 0210000000F8       
  2223 00000A4A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000A53 000000000000000003 
  2224 00000A5C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000A65 00000000000000     
  2225 00000A6C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000A75 000000000000000000 
  2226 00000A7E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000A87 4E414D45           
  2227 00000A8B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000A94 46415431           
  2228 00000A98 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000A9D FFFF                    		dw 0FFFFh
  2230 00000A9F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000AA8 0210000000F8       
  2231 00000AAE 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000AB7 000000000000000003 
  2232 00000AC0 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000AC9 00000000000000     
  2233 00000AD0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000AD9 000000000000000000 
  2234 00000AE2 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000AEB 4E414D45           
  2235 00000AEF 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000AF8 46415431           
  2236 00000AFC 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B01 FFFF                    		dw 0FFFFh
  2238 00000B03 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B0C 0210000000F8       
  2239 00000B12 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B1B 000000000000000003 
  2240 00000B24 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B2D 00000000000000     
  2241 00000B34 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000B3D 000000000000000000 
  2242 00000B46 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000B4F 4E414D45           
  2243 00000B53 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000B5C 46415431           
  2244 00000B60 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000B65 FFFF                    		dw 0FFFFh
  2246 00000B67 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000B70 0210000000F8       
  2247 00000B76 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000B7F 000000000000000003 
  2248 00000B88 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000B91 00000000000000     
  2249 00000B98 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000BA1 000000000000000000 
  2250 00000BAA 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000BB3 4E414D45           
  2251 00000BB7 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000BC0 46415431           
  2252 00000BC4 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000BC9 FFFF                    		dw 0FFFFh
  2254 00000BCB 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000BD4 0210000000F8       
  2255 00000BDA 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000BE3 000000000000000003 
  2256 00000BEC 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000BF5 00000000000000     
  2257 00000BFC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C05 000000000000000000 
  2258 00000C0E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C17 4E414D45           
  2259 00000C1B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C24 46415431           
  2260 00000C28 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C2D FFFF                    		dw 0FFFFh
  2262 00000C2F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000C38 0210000000F8       
  2263 00000C3E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000C47 000000000000000003 
  2264 00000C50 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000C59 00000000000000     
  2265 00000C60 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000C69 000000000000000000 
  2266 00000C72 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000C7B 4E414D45           
  2267 00000C7F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000C88 46415431           
  2268 00000C8C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000C91 FFFF                    		dw 0FFFFh
  2270 00000C93 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000C9C 0210000000F8       
  2271 00000CA2 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000CAB 000000000000000003 
  2272 00000CB4 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000CBD 00000000000000     
  2273 00000CC4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000CCD 000000000000000000 
  2274 00000CD6 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000CDF 4E414D45           
  2275 00000CE3 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000CEC 46415431           
  2276 00000CF0 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000CF5 FFFF                    		dw 0FFFFh
  2278 00000CF7 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D00 0210000000F8       
  2279 00000D06 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D0F 000000000000000003 
  2280 00000D18 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D21 00000000000000     
  2281 00000D28 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D31 000000000000000000 
  2282 00000D3A 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000D43 4E414D45           
  2283 00000D47 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000D50 46415431           
  2284 00000D54 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000D59 FFFF                    		dw 0FFFFh
  2286 00000D5B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000D64 0210000000F8       
  2287 00000D6A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000D73 000000000000000003 
  2288 00000D7C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000D85 00000000000000     
  2289 00000D8C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000D95 000000000000000000 
  2290 00000D9E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000DA7 4E414D45           
  2291 00000DAB 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000DB4 46415431           
  2292 00000DB8 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000DBD FFFF                    		dw 0FFFFh
  2294 00000DBF 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000DC8 0210000000F8       
  2295 00000DCE 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000DD7 000000000000000003 
  2296 00000DE0 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000DE9 00000000000000     
  2297 00000DF0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000DF9 000000000000000000 
  2298 00000E02 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E0B 4E414D45           
  2299 00000E0F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E18 46415431           
  2300 00000E1C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E21 FFFF                    		dw 0FFFFh
  2302 00000E23 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E2C 0210000000F8       
  2303 00000E32 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000E3B 000000000000000003 
  2304 00000E44 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000E4D 00000000000000     
  2305 00000E54 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000E5D 000000000000000000 
  2306 00000E66 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000E6F 4E414D45           
  2307 00000E73 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000E7C 46415431           
  2308 00000E80 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000E85 FFFF                    		dw 0FFFFh
  2310 00000E87 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000E90 0210000000F8       
  2311 00000E96 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000E9F 000000000000000003 
  2312 00000EA8 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000EB1 00000000000000     
  2313 00000EB8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000EC1 000000000000000000 
  2314 00000ECA 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000ED3 4E414D45           
  2315 00000ED7 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000EE0 46415431           
  2316 00000EE4 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000EE9 FFFF                    		dw 0FFFFh
  2318 00000EEB 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000EF4 0210000000F8       
  2319 00000EFA 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F03 000000000000000003 
  2320 00000F0C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F15 00000000000000     
  2321 00000F1C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F25 000000000000000000 
  2322 00000F2E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000F37 4E414D45           
  2323 00000F3B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000F44 46415431           
  2324 00000F48 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000F4D FFFF                    		dw 0FFFFh
  2326 00000F4F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000F58 0210000000F8       
  2327 00000F5E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000F67 000000000000000003 
  2328 00000F70 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000F79 00000000000000     
  2329 00000F80 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000F89 000000000000000000 
  2330 00000F92 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00000F9B 4E414D45           
  2331 00000F9F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00000FA8 46415431           
  2332 00000FAC 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 00000FB1 FFFF                    		dw 0FFFFh
  2334 00000FB3 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 00000FBC 0210000000F8       
  2335 00000FC2 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00000FCB 000000000000000003 
  2336 00000FD4 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 00000FDD 00000000000000     
  2337 00000FE4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 00000FED 000000000000000000 
  2338 00000FF6 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 00000FFF 4E414D45           
  2339 00001003 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000100C 46415431           
  2340 00001010 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001015 FFFF                    		dw 0FFFFh
  2342 00001017 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 00001020 0210000000F8       
  2343 00001026 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000102F 000000000000000003 
  2344 00001038 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 00001041 00000000000000     
  2345 00001048 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 00001051 000000000000000000 
  2346 0000105A 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 00001063 4E414D45           
  2347 00001067 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 00001070 46415431           
  2348 00001074 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 00001079 FFFF                    		dw 0FFFFh
  2350 0000107B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 00001084 0210000000F8       
  2351 0000108A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001093 000000000000000003 
  2352 0000109C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 000010A5 00000000000000     
  2353 000010AC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 000010B5 000000000000000000 
  2354 000010BE 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 000010C7 4E414D45           
  2355 000010CB 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 000010D4 46415431           
  2356 000010D8 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 000010DD FFFF                    		dw 0FFFFh
  2358 000010DF 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 000010E8 0210000000F8       
  2359 000010EE 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 000010F7 000000000000000003 
  2360 00001100 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001109 00000000000000     
  2361 00001110 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001119 000000000000000000 
  2362 00001122 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 0000112B 4E414D45           
  2363 0000112F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 00001138 46415431           
  2364 0000113C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 00001141 FFFF                    		dw 0FFFFh
  2366 00001143 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 0000114C 0210000000F8       
  2367 00001152 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 0000115B 000000000000000003 
  2368 00001164 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 0000116D 00000000000000     
  2369 00001174 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 0000117D 000000000000000000 
  2370 00001186 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 0000118F 4E414D45           
  2371 00001193 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000119C 46415431           
  2372 000011A0 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 000011A5 FFFF                    		dw 0FFFFh
  2374 000011A7 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 000011B0 0210000000F8       
  2375 000011B6 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 000011BF 000000000000000003 
  2376 000011C8 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 000011D1 00000000000000     
  2377 000011D8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 000011E1 000000000000000000 
  2378 000011EA 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 000011F3 4E414D45           
  2379 000011F7 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 00001200 46415431           
  2380 00001204 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001209 FFFF                    		dw 0FFFFh
  2382 0000120B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001214 0210000000F8       
  2383 0000121A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001223 000000000000000003 
  2384 0000122C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 00001235 00000000000000     
  2385 0000123C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 00001245 000000000000000000 
  2386 0000124E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 00001257 4E414D45           
  2387 0000125B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 00001264 46415431           
  2388 00001268 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 0000126D FFFF                    		dw 0FFFFh
  2390 0000126F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2390 00001278 0210000000F8       
  2391 0000127E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2391 00001287 000000000000000003 
  2392 00001290 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2392 00001299 00000000000000     
  2393 000012A0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2393 000012A9 000000000000000000 
  2394 000012B2 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2394 000012BB 4E414D45           
  2395 000012BF 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2395 000012C8 46415431           
  2396 000012CC 3220202000              		db 32h,	20h, 20h, 20h, 0
  2397 000012D1 00                      		db 0
  2398                                  
  2399                                  ;---------------------------------------------------------------------------
  2400                                  ; Possibly disposable data, goes at end of data group
  2401                                  ;***************************************************************************
  2402                                  
  2403                                  ; Possibly disposable data, goes at end of data group
  2404                                  
  2405                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2406                                  ;
  2407                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2408                                  ;		(dl) = drive number (80h or 81h).
  2409                                  ;		(dh) = head number.
  2410                                  ;		(ch) = cylinder number.
  2411                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2412                                  ;		(al) = number of sectors.
  2413                                  ;		(es:bx) = address of read buffer.
  2414                                  ;		for more on register contents see rom bios listing.
  2415                                  ;		stack set up for return by an iret.
  2416                                  ;
  2417                                  ;	exit:	(ah) = status of current operation.
  2418                                  ;		(cy) = 1 if failed, 0 if successful.
  2419                                  ;		for other register contents see rom bios listing.
  2420                                  ;
  2421                                  ;	uses:	
  2422                                  ;
  2423                                  ;
  2424                                  ;	warning: uses old13 vector for non-read calls.
  2425                                  ;		does direct calls to the at rom.
  2426                                  ;		does segment arithmatic.
  2427                                  ;
  2428                                  ;	effects: performs disk i/o operation.
  2429                                  
  2430                                  ; 16/10/2022
  2431                                  ; 28/05/2019
  2432                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2433                                  
  2434                                  ;* offsets into cmd_block for registers
  2435                                  
  2436                                  pre_comp equ 0	;write pre-compensation
  2437                                  sec_cnt	 equ 1	;sector count
  2438                                  sec_num	 equ 2	;sector number
  2439                                  cyl_low	 equ 3	;cylinder number, low part
  2440                                  cyl_high equ 4	;cylinder number, high part
  2441                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2442                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2443                                  cmd_reg  equ 6	;command register
  2444                                  
  2445                                  ; 01/10/2022
  2446                                  disk_status1	equ 74h
  2447                                  hf_num		equ 75h
  2448                                  control_byte	equ 76h
  2449                                  
  2450                                  ibm_disk_io:				
  2451 000012D2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2452 000012D5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2453 000012D7 80FC02                  		cmp	ah, 2
  2454 000012DA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2455 000012DC 80FC0A                  		cmp	ah, 0Ah
  2456 000012DF 7405                    		jz	short atd2	; and call 0Ah (read long).
  2457                                  atd1:
  2458 000012E1 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2459                                  		;jmp	cs:Old13	; use rom int 13h handler
  2460                                  ;-----------------------------------------------------------------------------
  2461                                  
  2462                                  atd2:					
  2463 000012E6 53                      		push	bx
  2464 000012E7 51                      		push	cx
  2465 000012E8 52                      		push	dx
  2466 000012E9 57                      		push	di
  2467 000012EA 1E                      		push	ds
  2468 000012EB 06                      		push	es
  2469 000012EC 50                      		push	ax
  2470 000012ED B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2471                                  					; establish bios segment addressing
  2472 000012F0 8ED8                    		mov	ds, ax
  2473                                  		; 16/10/2022
  2474 000012F2 C606740000              		mov	byte [disk_status1], 0
  2475                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2476                                  					; initially no error code.
  2477 000012F7 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2478 000012FA 3A167500                		cmp	dl, [hf_num]
  2479                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2480 000012FE 7207                    		jb	short atd3	; disk number in range
  2481                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2482 00001300 C606740001              		mov	byte [disk_status1], 1
  2483 00001305 EB20                    		jmp	short atd4	; disk number out of range error,
  2484                                  					; return
  2485                                  ; ----------------------------------------------------------------------------
  2486                                  
  2487                                  atd3:					
  2488 00001307 53                      		push	bx
  2489 00001308 8CC0                    		mov	ax, es
  2490 0000130A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2491 0000130D 01D8                    		add	ax, bx
  2492 0000130F 8EC0                    		mov	es, ax
  2493 00001311 5B                      		pop	bx
  2494 00001312 83E30F                  		and	bx, 0Fh
  2495 00001315 0E                      		push	cs
  2496 00001316 E8DF00                  		call	check_dma
  2497 00001319 720C                    		jb	short atd4	; abort if dma across segment boundary
  2498 0000131B 58                      		pop	ax
  2499 0000131C 50                      		push	ax
  2500 0000131D E81A00                  		call	setcmd		; set up command block for disk op
  2501 00001320 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2502 00001323 EE                      		out	dx, al		; write out command modifier
  2503 00001324 E86B00                  		call	docmd		; carry out command
  2504                                  ; ----------------------------------------------------------------------------
  2505                                  
  2506                                  atd4:	
  2507                                  
  2508                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2509                                  ;	      and save a couple bytes while were at it.
  2510                                  				
  2511 00001327 58                      		pop	ax
  2512                                  		;mov	ah, ds:74h	; [disk_status1]
  2513 00001328 8A267400                		mov	ah, [disk_status1]
  2514 0000132C 08E4                    		or	ah, ah
  2515 0000132E 7401                    		jz	short atd5
  2516 00001330 F9                      		stc
  2517                                  atd5:					
  2518 00001331 07                      		pop	es
  2519 00001332 1F                      		pop	ds
  2520 00001333 5F                      		pop	di
  2521 00001334 5A                      		pop	dx
  2522 00001335 59                      		pop	cx
  2523 00001336 5B                      		pop	bx
  2524 00001337 CA0200                  		retf	2		; far return, dropping flags
  2525                                  
  2526                                  ; =============== S U B	R O U T	I N E ========================================
  2527                                  
  2528                                  ;***	setcmd - set up cmd_block for the disk operation
  2529                                  ;
  2530                                  ;	entry:	(ds) = bios data segment.
  2531                                  ;		(es:bx) in seg:000x form.
  2532                                  ;		other registers as in int 13h call
  2533                                  ;	
  2534                                  ;	exit:	cmd_block set up for disk read call.
  2535                                  ;		control_byte set up for disk operation.
  2536                                  ;		(al) = control byte modifier
  2537                                  ;
  2538                                  ;	sets the fields of cmd_block using the register contents
  2539                                  ;	and the contents of the disk parameter block for the given drive.
  2540                                  ;
  2541                                  ;	warning: (ax) destroyed.
  2542                                  ;		does direct calls to the at rom.
  2543                                  
  2544                                  setcmd:		; proc near		
  2545                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2546                                  		; 16/10/2022
  2547 0000133A A24300                  		mov	[cmd_block+sec_cnt], al
  2548                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2549 0000133D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2550 00001342 80FC02                  		cmp	ah, 2
  2551 00001345 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2552 00001347 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2553                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2554                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2555                                  setc1:					
  2556 0000134C 88C8                    		mov	al, cl
  2557 0000134E 243F                    		and	al, 3Fh		; mask sector number
  2558                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2559                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2560 00001350 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2561 00001353 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2562 00001357 88C8                    		mov	al, cl
  2563 00001359 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2564                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2565 0000135C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2566 0000135F 89D0                    		mov	ax, dx
  2567 00001361 C0E004                  		shl	al, 4		; drive	number
  2568 00001364 80E40F                  		and	ah, 0Fh
  2569 00001367 08E0                    		or	al, ah		; head number
  2570 00001369 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2571                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2572 0000136B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2573 0000136E 06                      		push	es
  2574 0000136F 53                      		push	bx
  2575 00001370 0E                      		push	cs
  2576 00001371 E85C00                  		call	get_vec
  2577 00001374 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2578                                  			 		; write pre-comp from disk parameters
  2579 00001378 C1E802                  		shr	ax, 2
  2580                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2581 0000137B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2582                                  					; only use low part
  2583 0000137E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2584                                  					; control byte modifier
  2585 00001382 5B                      		pop	bx
  2586 00001383 07                      		pop	es
  2587                                  		;mov	ah, ds:76h	; [control_byte]
  2588 00001384 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2589 00001388 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2590 0000138B 08C4                    		or	ah, al
  2591                                  		;mov	ds:76h,	ah
  2592 0000138D 88267600                		mov	[control_byte], ah ; mov [76h],al
  2593 00001391 C3                      		retn
  2594                                  
  2595                                  ; =============== S U B	R O U T	I N E ========================================
  2596                                  
  2597                                  ;***	docmd - carry out read operation to at hard disk
  2598                                  ;
  2599                                  ;	entry:	(es:bx) = address for read in data.
  2600                                  ;		cmd_block set up for disk read.
  2601                                  ;
  2602                                  ;	exit:	buffer at (es:bx) contains data read.
  2603                                  ;		disk_status1 set to error code (0 if success).
  2604                                  ;
  2605                                  ;	
  2606                                  ;
  2607                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2608                                  ;		no check is made for dma boundary overrun.
  2609                                  ;
  2610                                  ;	effects: programs disk controller.
  2611                                  ;		performs disk input.
  2612                                  
  2613                                  docmd:		; proc near		
  2614 00001392 89DF                    		mov	di, bx
  2615 00001394 0E                      		push	cs
  2616 00001395 E84000                  		call	command
  2617 00001398 7535                    		jnz	short doc3
  2618                                  doc1:					
  2619 0000139A 0E                      		push	cs
  2620 0000139B E84200                  		call	waitt		; wait for controller to complete read
  2621 0000139E 752F                    		jnz	short doc3
  2622 000013A0 B90001                  		mov	cx, 256		; 256 words per sector
  2623 000013A3 BAF001                  		mov	dx, 1F0h	; hf_port
  2624 000013A6 FC                      		cld			; string op goes up
  2625 000013A7 FA                      		cli			; disable interrupts
  2626                                  					; (bug was forgetting this)
  2627                                  
  2628                                  ;	M062 -- some of these old machines have intermittent failures
  2629                                  ;		when the read is done at full speed. Instead of using
  2630                                  ;		a string rep instruction, we'll use a loop. There is
  2631                                  ;		a slight performance hit, but it only affects these
  2632                                  ;		very old machines with an exact date code match, and
  2633                                  ;		it makes said machines more reliable
  2634                                  ;
  2635                                  ;M062	repz	insw		;read in sector
  2636                                  
  2637                                  rsct_loop:				
  2638 000013A8 6D                      		insw
  2639 000013A9 E2FD                    		loop	rsct_loop
  2640 000013AB FB                      		sti
  2641                                  		; 16/10/2022
  2642 000013AC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2643                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2644                                  					; (ds =	40h)
  2645 000013B1 7410                    		jz	short doc2	; no ecc bytes to read.
  2646 000013B3 0E                      		push	cs
  2647 000013B4 E83100                  		call	wait_drq	; wait for controller to complete read
  2648 000013B7 7216                    		jb	short doc3
  2649 000013B9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2650 000013BC BAF001                  		mov	dx, 1F0h	; hf_port
  2651 000013BF FA                      		cli
  2652 000013C0 F36C                    		rep insb		; read in ecc
  2653 000013C2 FB                      		sti
  2654                                  doc2:					
  2655 000013C3 0E                      		push	cs
  2656 000013C4 E82900                  		call	check_status
  2657 000013C7 7506                    		jnz	short doc3	; operation failed
  2658                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2659 000013C9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2660 000013CD 75CB                    		jnz	short doc1	; loop while more sectors to read
  2661                                  doc3:					
  2662 000013CF C3                      		retn
  2663                                  
  2664                                  ; =============== S U B	R O U T	I N E ========================================
  2665                                  
  2666                                  ;***	define where the rom routines are actually located
  2667                                  ;	   in the buggy old AT BIOS that we might need to
  2668                                  ;	   install a special level of int13 handler for
  2669                                  
  2670                                  ; 16/10/2022
  2671                                  
  2672                                  romsegment 	equ 0F000h  ; segment
  2673                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2674                                  romwait		equ 2E7Fh   ; offset in romsegment
  2675                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2676                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2677                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2678                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2679                                  romfret		equ 0FF65h  ; far return in rom	
  2680                                  
  2681                                  ;***	get_vec - get pointer to hard disk parameters.
  2682                                  ;
  2683                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2684                                  ;
  2685                                  ;	exit:	(es:bx) = address of disk parameters table.
  2686                                  ;
  2687                                  ;	uses:	ax for segment computation.
  2688                                  ;
  2689                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2690                                  ;	or 70h (disk 1).
  2691                                  ;	
  2692                                  ;	warning: (ax) destroyed.
  2693                                  ;		this does a direct call to the at rom.
  2694                                  
  2695                                  get_vec:	; proc near		
  2696                                  		;push	0FF65h		; romfret ; far	return in rom
  2697                                  		;jmp	far ptr	0F000h:2F8Eh
  2698                                  		; 16/10/2022
  2699 000013D0 6865FF                  		push	romfret		; far return in rom
  2700 000013D3 EA8E2F00F0              		jmp	romsegment:romget_vec
  2701                                  
  2702                                  ; =============== S U B	R O U T	I N E ========================================
  2703                                  
  2704                                  ;***	command - send contents of cmd_block to disk controller.
  2705                                  ;
  2706                                  ;	entry:	control_byte 
  2707                                  ;		cmd_block - set up with values for hard disk controller.
  2708                                  ;
  2709                                  ;	exit:	disk_status1 = error code.
  2710                                  ;		nz if error, zr for no error.
  2711                                  ;
  2712                                  ;
  2713                                  ;	warning: (ax), (cx), (dx) destroyed.
  2714                                  ;		does a direct call to the at rom.
  2715                                  ;
  2716                                  ;	effects: programs disk controller.
  2717                                  
  2718                                  command:	; proc near		
  2719                                  		;push	0FF65h		; romfret ; far	return in rom
  2720                                  		;jmp	far ptr	0F000h:2E1Eh
  2721                                  		; 16/10/2022
  2722 000013D8 6865FF                  		push	romfret		; far return in rom
  2723 000013DB EA1E2E00F0              		jmp	romsegment:romcommand
  2724                                  
  2725                                  ; =============== S U B	R O U T	I N E ========================================
  2726                                  
  2727                                  ;***	waitt - wait for disk interrupt
  2728                                  ;
  2729                                  ;	entry:	nothing.
  2730                                  ;
  2731                                  ;	exit:	disk_status1 = error code.
  2732                                  ;		nz if error, zr if no error.
  2733                                  ;
  2734                                  ;
  2735                                  ;	warning: (ax), (bl), (cx) destroyed.
  2736                                  ;		does a direct call to the at rom.
  2737                                  ;		
  2738                                  ;	effects: calls int 15h, function 9000h.
  2739                                  
  2740                                  waitt:		; proc near		
  2741                                  		;push	0FF65h		; romfret ; far	return in rom
  2742                                  		;jmp	far ptr	0F000h:2E7Fh
  2743                                  		; 16/10/2022
  2744 000013E0 6865FF                  		push	romfret		; far return in rom
  2745 000013E3 EA7F2E00F0              		jmp	romsegment:romwait
  2746                                  
  2747                                  ; =============== S U B	R O U T	I N E ========================================
  2748                                  
  2749                                  ;***	wait_drq - wait for data request.
  2750                                  ;
  2751                                  ;	entry:	nothing.
  2752                                  ;
  2753                                  ;	exit:	disk_status1 = error code.
  2754                                  ;		cy if error, nc if no error.
  2755                                  ;
  2756                                  ;	warning: (al), (cx), (dx) destroyed.
  2757                                  ;		does a direct call to the at rom.
  2758                                  
  2759                                  wait_drq:	; proc near		
  2760                                  		;push	0FF65h		; romfret ; far	return in rom
  2761                                  		;jmp	far ptr	0F000h:2EE2h
  2762                                  		; 16/10/2022
  2763 000013E8 6865FF                  		push	romfret		; far return in rom
  2764 000013EB EAE22E00F0              		jmp	romsegment:romwait_drq
  2765                                  
  2766                                  ; =============== S U B	R O U T	I N E ========================================
  2767                                  
  2768                                  ;***	check_status - check hard disk status.
  2769                                  ;
  2770                                  ;	entry:	nothing.
  2771                                  ;
  2772                                  ;	exit:	disk_status1 = error code.
  2773                                  ;		nz if error, zr if no error.
  2774                                  ;
  2775                                  ;	warning: (ax), (cx), (dx) destroyed.
  2776                                  ;		does a direct call to the at rom.
  2777                                  
  2778                                  check_status:	; proc near		
  2779                                  		;push	0FF65h		; romfret ; far	return in rom
  2780                                  		;jmp	far ptr	0F000h:2EF8h
  2781                                  		; 16/10/2022
  2782 000013F0 6865FF                  		push	romfret		; far return in rom
  2783 000013F3 EAF82E00F0              		jmp	romsegment:romcheck_status
  2784                                  
  2785                                  ; =============== S U B	R O U T	I N E ========================================
  2786                                  
  2787                                  ;***	check_dma - check for dma overrun 64k segment.
  2788                                  ;
  2789                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2790                                  ;		cmd_block set up for operation.
  2791                                  ;
  2792                                  ;	exit:	disk_status1 - error code.
  2793                                  ;		cy if error, nc if no error.
  2794                                  ;
  2795                                  ;	warning: does a direct call to the at rom.
  2796                                  
  2797                                  check_dma:	; proc near		
  2798                                  		;push	0FF65h		; romfret ; far	return in rom
  2799                                  		;jmp	far ptr	0F000h:2F69h
  2800                                  		; 16/10/2022
  2801 000013F8 6865FF                  		push	romfret		; far return in rom
  2802 000013FB EA692F00F0              		jmp	romsegment:romcheck_dma
  2803                                  
  2804                                  ;-----------------------------------------------------------------------------
  2805                                  
  2806                                  endatrom:
  2807                                  
  2808                                  ; ----------------------------------------------------------------------------
  2809                                  
  2810                                  ;; M015 -- begin changes
  2811                                  ;;
  2812                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2813                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2814                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2815                                  ;; If our init code detects this error, it will install this
  2816                                  ;; special Int13 hook through the same mechanism that was set
  2817                                  ;; up for the IBM patch above. This code is also dynamically
  2818                                  ;; relocated by MSINIT.
  2819                                  
  2820                                  compaq_disk_io:
  2821 00001400 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2822                                  					;
  2823                                  					; the following	label defines the end of the at	rom patch.
  2824                                  					; this is used at configuration	time.
  2825                                  					;
  2826                                  					; warning!!!
  2827                                  					; this code will be dynamically	relocated by msinit
  2828 00001403 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2829                                  no_hookit:				
  2830                                  		;jmp	cs:Old13
  2831                                  		; 16/10/2022
  2832 00001405 2EFF2E[0601]            		jmp	far [cs:Old13]
  2833                                  
  2834                                  ; ----------------------------------------------------------------------------
  2835                                  
  2836                                  mebbe_hookit:				
  2837 0000140A 80FA80                  		cmp	dl, 80h
  2838 0000140D 72F6                    		jb	short no_hookit
  2839 0000140F 1E                      		push	ds
  2840 00001410 50                      		push	ax
  2841 00001411 B84000                  		mov	ax, 40h
  2842 00001414 8ED8                    		mov	ds, ax
  2843 00001416 58                      		pop	ax
  2844 00001417 9C                      		pushf
  2845                                  		;call	cs:Old13
  2846                                  		; 16/10/2022
  2847 00001418 2EFF1E[0601]            		call	far [cs:Old13]
  2848 0000141D 1F                      		pop	ds
  2849 0000141E CA0200                  		retf	2
  2850                                  
  2851                                  ; ----------------------------------------------------------------------------
  2852                                  
  2853 00001421 00                      end_compaq_i13hook: db 0			
  2854                                  
  2855                                  ; =============== S U B	R O U T	I N E ========================================
  2856                                  
  2857                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2858                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2859                                  
  2860                                  daycnt_to_day:	; proc far
  2861                                  
  2862                                  ; entry: [daycnt] = number of days since 1-1-80
  2863                                  ;
  2864                                  ; return: ch - century in bcd
  2865                                  ;	  cl - year in bcd
  2866                                  ;	  dh - month in bcd
  2867                                  ;	  dl - day in bcd
  2868                                  
  2869                                  		; 16/10/2022		
  2870 00001422 2EFF36[E904]            		push	word [cs:daycnt] ; save daycnt
  2871 00001427 2E813E[E904]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2872                                  					; # days from 1-1-1980 to 1-1-2000
  2873 0000142E 730E                    		jnb	short century20
  2874 00001430 2EC606[ED04]13          		mov	byte [cs:base_century], 19
  2875 00001436 2EC606[EE04]50          		mov	byte [cs:base_year], 80
  2876 0000143C EB13                    		jmp	short years
  2877                                  ; ----------------------------------------------------------------------------
  2878                                  		
  2879                                  century20:				
  2880 0000143E 2EC606[ED04]14          		mov	byte [cs:base_century], 20
  2881 00001444 2EC606[EE04]00          		mov	byte [cs:base_year], 0
  2882 0000144A 2E812E[E904]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2883                                  					; adjust daycnt
  2884                                  years:					
  2885 00001451 31D2                    		xor	dx, dx
  2886 00001453 2EA1[E904]              		mov	ax, [cs:daycnt]
  2887 00001457 BBB505                  		mov	bx, 1461	; (366+365*3)
  2888                                  					; # of days in a Leap year block
  2889 0000145A F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2890 0000145C 2E8916[E904]            		mov	[cs:daycnt], dx	; save daycnt left
  2891 00001461 B304                    		mov	bl, 4
  2892 00001463 F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2893 00001465 2E0006[EE04]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2894 0000146A 2EFF06[E904]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2895 0000146F 2E813E[E904]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2896 00001476 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2897 00001478 2EFE06[EE04]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2898 0000147D 2E812E[E904]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2899 00001484 B90300                  		mov	cx, 3		; And next three years are normal
  2900                                  regularyear:				
  2901 00001487 2E813E[E904]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2902 0000148E 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2903 00001490 2EFE06[EE04]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2904 00001495 2E812E[E904]6D01        		sub	word [cs:daycnt], 365	;   }
  2905 0000149C E2E9                    		loop	regularyear	; }
  2906                                  					;
  2907                                  					; should never fall through loop
  2908                                  leapyear:				
  2909 0000149E 2EC606[F004]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2910                                  					; change month table.
  2911                                  yeardone:				
  2912 000014A4 31DB                    		xor	bx, bx
  2913 000014A6 31D2                    		xor	dx, dx
  2914 000014A8 2EA1[E904]              		mov	ax, [cs:daycnt]
  2915                                  		;mov	si, offset month_tab
  2916 000014AC BE[EF04]                		mov	si, month_tab	; 19/10/2022
  2917 000014AF B90C00                  		mov	cx, 12
  2918                                  months:					
  2919 000014B2 FEC3                    		inc	bl
  2920                                  
  2921                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2922                                  		;mov	dl, [cs:si]
  2923                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2924                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2925                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2926                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2927                                  		
  2928 000014B4 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2929 000014B6 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2930                                  					; dh=0
  2931 000014B8 7605                    		jbe	short month_done
  2932 000014BA 46                      		inc	si		; next month
  2933 000014BB 29D0                    		sub	ax, dx		; adjust daycnt
  2934 000014BD E2F3                    		loop	months		;
  2935                                  					; should never fall through loop
  2936                                  month_done:				
  2937 000014BF 2EC606[F004]1C          		mov	byte [cs:month_tab+1], 28
  2938                                  					; restore month table value
  2939 000014C5 88DA                    		mov	dl, bl
  2940 000014C7 2E8A36[EE04]            		mov	dh, [cs:base_year]
  2941 000014CC 2E8A0E[ED04]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2942 000014D1 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2943                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2944                                  					; dl = bcd day,	al = month
  2945 000014D6 86D0                    		xchg	dl, al
  2946 000014D8 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2947                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2948 000014DD 86F0                    		xchg	dh, al
  2949 000014DF 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2950                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2951 000014E4 86C8                    		xchg	cl, al
  2952 000014E6 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2953                                  		;call	cs:bintobcd	; ch = bcd century
  2954 000014EB 88C5                    		mov	ch, al
  2955 000014ED 2E8F06[E904]            		pop	word [cs:daycnt] ; restore original value
  2956 000014F2 CB                      		retf
  2957                                  
  2958                                  enddaycnttoday:	
  2959                                  
  2960                                  ; =============== S U B	R O U T	I N E ========================================
  2961                                  
  2962                                  bin_to_bcd:	; proc far		; real time clock support
  2963                                  
  2964                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2965                                  ;into a bcd value in al. ah destroyed.	
  2966                                  		
  2967 000014F3 51                      		push	cx		
  2968 000014F4 D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2969 000014F6 B104                    		mov	cl, 4
  2970 000014F8 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2971 000014FA 08E0                    		or	al, ah
  2972 000014FC 59                      		pop	cx
  2973 000014FD CB                      		retf
  2974                                  
  2975                                  ; ----------------------------------------------------------------------------
  2976                                  
  2977                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2978                                  ; resume facility. the system clock needs to be reset after resume.
  2979                                  
  2980                                  ; the following routine is executed at resume time when the system
  2981                                  ; powered on after suspension. it reads the real time clock and
  2982                                  ; resets the system time and date, and then irets.
  2983                                  
  2984                                  ; warning!!! this code will be dynamically relocated by msinit.
  2985                                  
  2986                                  int6c:					
  2987 000014FE 0E                      		push	cs
  2988 000014FF 1F                      		pop	ds
  2989 00001500 8F06[B206]              		pop	word [int6c_ret_addr]	; pop off return address
  2990 00001504 8F06[B406]              		pop	word [int6c_ret_addr+2]
  2991 00001508 9D                      		popf
  2992 00001509 E81300                  		call	read_real_date	; get the date from the clock
  2993 0000150C FA                      		cli
  2994 0000150D 8936[E904]              		mov	[daycnt], si	; update dos copy of date
  2995 00001511 FB                      		sti
  2996 00001512 E8CB00                  		call	read_real_time	; get the time from the	rtc
  2997 00001515 FA                      		cli
  2998 00001516 B401                    		mov	ah, 1
  2999 00001518 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3000                                  					; CX:DX	= clock	count
  3001                                  					; Return: time of day set
  3002 0000151A FB                      		sti
  3003                                  		;jmp	int6c_ret_addr	; long jump
  3004                                  		; 16/10/2022
  3005 0000151B FF2E[B206]              		jmp	far [int6c_ret_addr] ; long jump
  3006                                  
  3007                                  ; =============== S U B	R O U T	I N E ========================================
  3008                                  
  3009                                  ;   read_real_date reads real-time clock for date and returns the number
  3010                                  ;   of days elapsed since 1-1-80 in si
  3011                                  
  3012                                  read_real_date:	; proc near		
  3013 0000151F 50                      		push	ax
  3014 00001520 51                      		push	cx
  3015 00001521 52                      		push	dx
  3016 00001522 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3017 00001524 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3018                                  					; Return: CX:DX	= clock	count
  3019                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3020                                  					; midnight
  3021                                  					; Otherwise, AL	> 0
  3022 00001526 5A                      		pop	dx
  3023 00001527 59                      		pop	cx
  3024 00001528 58                      		pop	ax
  3025 00001529 50                      		push	ax
  3026 0000152A 53                      		push	bx
  3027 0000152B 51                      		push	cx
  3028 0000152C 52                      		push	dx
  3029 0000152D 2EC706[D206]0100        		mov	word [cs:daycnt2], 1
  3030                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3031 00001534 B404                    		mov	ah, 4
  3032 00001536 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3033                                  					; Return: DL = day in BCD
  3034                                  					; DH = month in	BCD
  3035                                  					; CL = year in BCD
  3036                                  					; CH = century (19h or 20h)
  3037 00001538 7303                    		jnb	short read_ok
  3038 0000153A E99300                  		jmp	r_d_ret
  3039                                  ;-----------------------------------------------------------------------------
  3040                                  
  3041                                  read_ok:				
  3042 0000153D 882E[B606]              		mov	[bin_date_time], ch
  3043 00001541 880E[B706]              		mov	[bin_date_time+1], cl
  3044 00001545 8836[B806]              		mov	[bin_date_time+2], dh
  3045 00001549 8816[B906]              		mov	[bin_date_time+3], dl
  3046 0000154D 2EC706[D206]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3047 00001554 E84201                  		call	bcd_verify	; verify bcd values in range
  3048 00001557 7277                    		jb	short r_d_ret	;  some	value out of range
  3049 00001559 2EC706[D206]0300        		mov	word [cs:daycnt2], 3
  3050 00001560 E8E600                  		call	date_verify
  3051 00001563 726B                    		jb	short r_d_ret
  3052 00001565 2EC706[D206]0000        		mov	word [cs:daycnt2], 0
  3053 0000156C E8AA00                  		call	in_bin
  3054 0000156F A0[B706]                		mov	al, [bin_date_time+1]
  3055 00001572 98                      		cbw
  3056 00001573 803E[B606]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3057 00001578 7503                    		jnz	short century_19 ; no
  3058 0000157A 83C064                  		add	ax, 100		; add in a century
  3059                                  
  3060                                  century_19:				
  3061 0000157D 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3062 00001580 B104                    		mov	cl, 4		; leap year every 4
  3063 00001582 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3064 00001584 88E3                    		mov	bl, ah		; save odd years
  3065 00001586 98                      		cbw			; zero ah
  3066 00001587 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3067                                  					; # of days in leap year blocks
  3068 0000158A F7E1                    		mul	cx
  3069 0000158C 2EA3[D206]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3070 00001590 88D8                    		mov	al, bl		; get odd years	count
  3071 00001592 98                      		cbw
  3072 00001593 09C0                    		or	ax, ax
  3073 00001595 740C                    		jz	short leap_year
  3074 00001597 B96D01                  		mov	cx, 365		; days in year
  3075 0000159A F7E1                    		mul	cx
  3076 0000159C 2E0106[D206]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3077 000015A1 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3078                                  					; possibly account for a leap day
  3079                                  ;-----------------------------------------------------------------------------
  3080                                  
  3081                                  leap_year:				
  3082 000015A3 803E[B806]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3083 000015A8 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3084                                  leap_adjustment:			
  3085 000015AA 2EFF06[D206]            		inc	word [cs:daycnt2] ; account for leap day
  3086                                  no_leap_adjustment:			
  3087 000015AF 8A0E[B906]              		mov	cl, [bin_date_time+3] ; get days of month
  3088 000015B3 30ED                    		xor	ch, ch
  3089 000015B5 49                      		dec	cx		; because of offset from day 1,	not day	0
  3090 000015B6 2E010E[D206]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3091 000015BB 8A0E[B806]              		mov	cl, [bin_date_time+2] ; get month
  3092 000015BF 30ED                    		xor	ch, ch
  3093 000015C1 49                      		dec	cx		; january starts at offset 0
  3094 000015C2 D1E1                    		shl	cx, 1		; word offset
  3095 000015C4 BE[BA06]                		mov	si, month_table
  3096 000015C7 01CE                    		add	si, cx
  3097                                  		; 16/10/2022
  3098                                  		; ds must be same with cs here, if so..
  3099                                  		; what for cs: prefixes are used !?)
  3100                                  		; mov	ax, [cs:si]
  3101                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3102 000015C9 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3103                                  					; get #	days in	previous months
  3104 000015CB 2E0106[D206]            		add	[cs:daycnt2], ax
  3105                                  r_d_ret:				
  3106 000015D0 2E8B36[D206]            		mov	si, [cs:daycnt2]
  3107 000015D5 5A                      		pop	dx
  3108 000015D6 59                      		pop	cx
  3109 000015D7 5B                      		pop	bx
  3110 000015D8 58                      		pop	ax
  3111 000015D9 C3                      		retn
  3112                                  
  3113                                  ;-----------------------------------------------------------------------------
  3114                                  
  3115                                  r_t_retj:				
  3116 000015DA 31C9                    		xor	cx, cx
  3117 000015DC 31D2                    		xor	dx, dx
  3118 000015DE EB38                    		jmp	short r_t_ret
  3119                                  
  3120                                  ; =============== S U B	R O U T	I N E ========================================
  3121                                  
  3122                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3123                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3124                                  
  3125                                  read_real_time:	; proc near		
  3126 000015E0 B402                    		mov	ah, 2
  3127 000015E2 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3128                                  					; Return: CH = hours in	BCD
  3129                                  					; CL = minutes in BCD
  3130                                  					; DH = seconds in BCD
  3131 000015E4 72F4                    		jb	short r_t_retj
  3132 000015E6 882E[B606]              		mov	[bin_date_time], ch ; hours
  3133 000015EA 880E[B706]              		mov	[bin_date_time+1], cl ; minutes
  3134 000015EE 8836[B806]              		mov	[bin_date_time+2], dh ; seconds
  3135 000015F2 C606[B906]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3136 000015F7 E89F00                  		call	bcd_verify
  3137 000015FA 72DE                    		jb	short r_t_retj
  3138 000015FC E88500                  		call	time_verify
  3139 000015FF 72D9                    		jb	short r_t_retj
  3140 00001601 E81500                  		call	in_bin		; from bcd to bin
  3141 00001604 8A2E[B606]              		mov	ch, [bin_date_time]
  3142 00001608 8A0E[B706]              		mov	cl, [bin_date_time+1]
  3143 0000160C 8A36[B806]              		mov	dh, [bin_date_time+2]
  3144 00001610 8A16[B906]              		mov	dl, [bin_date_time+3]
  3145                                  		; 16/10/2022
  3146                                  		; 17/09/2022
  3147                                  		; 31/05/2019
  3148 00001614 FF1E[D906]              		call	far [ttticks] 
  3149                                  		;call	dword ptr ttticks ; note: indirect far call
  3150                                  					; cx:dx	= number of ticks
  3151                                  					; (at 18.2 ticks per sec.)
  3152                                  r_t_ret:				
  3153 00001618 C3                      		retn
  3154                                  
  3155                                  ; =============== S U B	R O U T	I N E =======================================
  3156                                  
  3157                                  ;   in_bin converts bin_date_time values from bcd to bin
  3158                                  
  3159                                  in_bin:		; proc near		
  3160 00001619 A0[B606]                		mov	al, [bin_date_time] ; century or hours
  3161 0000161C E81F00                  		call	bcd_to_bin
  3162 0000161F A2[B606]                		mov	[bin_date_time], al
  3163 00001622 A0[B706]                		mov	al, [bin_date_time+1] ; years or minutes
  3164 00001625 E81600                  		call	bcd_to_bin
  3165 00001628 A2[B706]                		mov	[bin_date_time+1], al
  3166 0000162B A0[B806]                		mov	al, [bin_date_time+2] ; months or seconds
  3167 0000162E E80D00                  		call	bcd_to_bin
  3168 00001631 A2[B806]                		mov	[bin_date_time+2], al
  3169 00001634 A0[B906]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3170 00001637 E80400                  		call	bcd_to_bin
  3171 0000163A A2[B906]                		mov	[bin_date_time+3], al
  3172 0000163D C3                      		retn
  3173                                  
  3174                                  ; =============== S U B	R O U T	I N E =======================================
  3175                                  
  3176                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3177                                  ;   a binary representation in al
  3178                                  ;   ah is destroyed
  3179                                  
  3180                                  bcd_to_bin:	; proc near		
  3181 0000163E 88C4                    		mov	ah, al
  3182 00001640 240F                    		and	al, 0Fh
  3183 00001642 B104                    		mov	cl, 4
  3184 00001644 D2EC                    		shr	ah, cl
  3185 00001646 D50A                    		aad
  3186 00001648 C3                      		retn
  3187                                  
  3188                                  ; =============== S U B	R O U T	I N E ========================================
  3189                                  
  3190                                  ;   date_verify loosely checks bcd date values to be in range
  3191                                  ;   in bin_date_time
  3192                                  
  3193                                  date_verify:	; proc near		
  3194 00001649 803E[B606]20            		cmp	byte [bin_date_time], 20h ; century check
  3195 0000164E 7732                    		ja	short date_error
  3196 00001650 740E                    		jz	short century_20 ; jmp in 21th century
  3197 00001652 803E[B606]19            		cmp	byte [bin_date_time], 19h ; century check
  3198                                  		;jb	short date_error
  3199                                  		; 12/12/2022
  3200 00001657 722A                    		jb	short date_err2
  3201 00001659 803E[B706]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3202                                  		;jb	short date_error
  3203                                  		; 12/12/2022
  3204 0000165E 7223                    		jb	short date_err2
  3205                                  century_20:				
  3206 00001660 803E[B706]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3207 00001665 771B                    		ja	short date_error
  3208 00001667 803E[B806]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3209 0000166C 7714                    		ja	short date_error
  3210 0000166E 803E[B806]00            		cmp	byte [bin_date_time+2], 0
  3211                                  		;jbe	short date_error
  3212 00001673 760D                    		jna	short date_error
  3213 00001675 803E[B906]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3214 0000167A 7706                    		ja	short date_error
  3215                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3216                                  		;;jbe	short date_error
  3217                                  		;jna	short date_error
  3218                                  		; 12/12/2022
  3219                                  		; cf=0
  3220                                  		;clc
  3221                                  		; 12/12/2022
  3222 0000167C 803E[B906]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3223 00001681 C3                      		retn
  3224                                  ;-----------------------------------------------------------------------------
  3225                                  
  3226                                  date_error:				
  3227 00001682 F9                      		stc
  3228                                  date_err2:
  3229 00001683 C3                      		retn
  3230                                  
  3231                                  ; =============== S U B	R O U T	I N E ========================================
  3232                                  
  3233                                  ; time_verify very loosely checks bcd date values to be in range
  3234                                  ; in bin_date_time
  3235                                  
  3236                                  time_verify:	; proc near		
  3237 00001684 803E[B606]24            		cmp	byte [bin_date_time], 24h ; hour check
  3238 00001689 770C                    		ja	short time_error
  3239 0000168B 803E[B706]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3240 00001690 7705                    		ja	short time_error
  3241                                  		; 12/12/2022h
  3242                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3243                                  		;ja	short time_error
  3244                                  		;clc
  3245                                  		;retn
  3246                                  		; 12/12/2022
  3247 00001692 803E[B806]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3248                                  time_error:
  3249                                  bv_error:	
  3250 00001697 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3251 00001698 C3                      		retn
  3252                                  
  3253                                  ; ----------------------------------------------------------------------------
  3254                                  
  3255                                  ;time_error:				
  3256                                  		;stc
  3257                                  		;retn
  3258                                  
  3259                                  ; =============== S U B	R O U T	I N E ========================================
  3260                                  
  3261                                  ;   bcd_verify checks values in bin_date_time to be valid
  3262                                  ;   bcd numerals.  carry set if any nibble out of range
  3263                                  
  3264                                  bcd_verify:	; proc near		
  3265 00001699 B90400                  		mov	cx, 4		; 4 bytes to check
  3266 0000169C BB[B606]                		mov	bx, bin_date_time
  3267                                  bv_loop:				
  3268 0000169F 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3269 000016A1 88C4                    		mov	ah, al
  3270 000016A3 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3271                                  					; is 1's place in range?
  3272 000016A6 3C0A                    		cmp	al, 10
  3273 000016A8 77ED                    		ja	short bv_error	; jmp out of range
  3274 000016AA D0EC                    		shr	ah, 1
  3275 000016AC D0EC                    		shr	ah, 1
  3276 000016AE D0EC                    		shr	ah, 1
  3277 000016B0 D0EC                    		shr	ah, 1
  3278 000016B2 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3279 000016B5 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3280 000016B8 77DD                    		ja	short bv_error	; jmp out of range
  3281 000016BA 43                      		inc	bx		; next byte
  3282 000016BB 49                      		dec	cx
  3283 000016BC 75E1                    		jnz	short bv_loop
  3284 000016BE F8                      		clc			; set success flag
  3285 000016BF C3                      		retn
  3286                                  ; ----------------------------------------------------------------------------
  3287                                  
  3288                                  		; 12/12/2022
  3289                                  ;bv_error:				
  3290                                  		;stc			; set error flag
  3291                                  		;retn
  3292                                  
  3293                                  ; ----------------------------------------------------------------------------
  3294                                  
  3295                                  endk09:
  3296                                  
  3297                                  ; ----------------------------------------------------------------------------
  3298                                  
  3299                                  ;------------------------------------------------------------------------
  3300                                  ;									:
  3301                                  ;	System initialization						:
  3302                                  ;									:
  3303                                  ;	The entry conditions are established by the bootstrap		:
  3304                                  ;	loader and are considered unknown. The following jobs		:
  3305                                  ;	will be performed by this module:				:
  3306                                  ;									:
  3307                                  ;	1.	All device initialization is performed			:
  3308                                  ;	2.	A local stack is set up and DS:SI are set		:
  3309                                  ;		to point to an initialization table. Then		:
  3310                                  ;		an inter-segment call is made to the first		:
  3311                                  ;		byte of the dos 					:
  3312                                  ;	3.	Once the dos returns from this call the ds		:
  3313                                  ;		register has been set up to point to the start		:
  3314                                  ;		of free memory. The initialization will then		:
  3315                                  ;		load the command program into this area 		:
  3316                                  ;		beginning at 100 hex and transfer control to		:
  3317                                  ;		this program.						:
  3318                                  ;									:
  3319                                  ;------------------------------------------------------------------------
  3320                                  
  3321                                  ; 01/10/2022
  3322                                  ; 08/01/2018 - Retro DOS v4.0
  3323                                  
  3324                                  ; drvfat must be the first location of freeable space!
  3325                                  
  3326                                  
  3327                                  align 2
  3328                                  		;db 90h
  3329                                  
  3330                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3331                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3332                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3333                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3334                                  	
  3335 000016C0 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3336                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3337                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3338                                  ;doscnt:	dw 0			; how many sectors to read
  3339 000016C2 00                      fbigfat:	db 0			; flags	for drive
  3340                                  ;fatloc:	dw 0			; seg addr of fat sector
  3341 000016C3 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3342 000016C5 80                      rom_drv_num:	db 80h			; rom drive number
  3343                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3344                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3345                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3346                                  
  3347                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3348                                  ; call to determine drive parameters.
  3349                                  
  3350 000016C6 02                      num_heads:	db 2			; number of heads returned by rom
  3351 000016C7 09                      sec_trk:	db 9			; sec/trk returned by rom
  3352 000016C8 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3353 000016C9 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3354                                  
  3355                                  ; ----------------------------------------------------------------------------
  3356                                  
  3357 000016CA 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3358 000016D2 0008010270000000        		dw 2048, 513, 112, 0
  3359 000016DA 0020020400010000        		dw 8192, 1026, 256, 0
  3360 000016E2 A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3361 000016EA FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3362                                  					; the assumption of total fat size <= 128 kb,
  3363                                  					; and the maximum size of fat entry = 16 bit.
  3364                                  
  3365 000016F2 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3365 000016FB 00                 
  3366                                  					; for compatibility.
  3367 000016FC 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3367 00001705 00                 
  3368                                  					; fbig = 40h
  3369 00001706 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3369 0000170F 00                 
  3370 00001710 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3370 00001719 00                 
  3371 0000171A 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3371 00001723 00                 
  3372 00001724 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3372 0000172D 00                 
  3373 0000172E 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3373 00001737 00                 
  3374                                  					
  3375                                  ; ----------------------------------------------------------------------------
  3376                                  
  3377                                  ;******************************************************
  3378                                  ;variables for mini disk initialization
  3379                                  ;******************************************************
  3380                                  
  3381                                  ; 01/10/2022
  3382                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3383                                  
  3384 00001738 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3385 00001739 00                      hnum:		db 0			; real number of hardfiles
  3386 0000173A [7E06]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3387 0000173C [0D09]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3388                                  					; of bds table. needed to figure out
  3389                                  					; the dosdatasg address.
  3390 0000173E 0000                    mini_hdlim:	dw 0			
  3391 00001740 0000                    mini_seclim:	dw 0
  3392                                  
  3393                                  ;end of mini disk init variables **********************
  3394                                  
  3395                                  ; ----------------------------------------------------------------------------
  3396                                  			
  3397 00001742 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3398                                  
  3399                                  ; 13/12/2022
  3400                                  %if 0
  3401                                  
  3402                                  ;align 2
  3403                                  		db  90h	
  3404                                  
  3405                                  ; the following are the recommended bpbs for the media that we know of so far.
  3406                                  
  3407                                  ;struc bpbx
  3408                                  ;   resw 1 ; 512
  3409                                  ;   resb 1
  3410                                  ;   resw 1 ; 1
  3411                                  ;   resb 1 ; 2
  3412                                  ;   resw 1
  3413                                  ;   resw 1
  3414                                  ;   resb 1
  3415                                  ;   resw 1
  3416                                  ;   resw 1
  3417                                  ;   resw 1 ; 2
  3418                                  ;   resw 1
  3419                                  ;   resw 1 ; hidden sector high
  3420                                  ;   resd 1 ; extended total sectors
  3421                                  ;.size:
  3422                                  ;endstruc
  3423                                  
  3424                                  ; 08/01/2019 - Retro DOS v4.0
  3425                                  
  3426                                  ; 20/04/2019
  3427                                  
  3428                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3429                                  
  3430                                  ; 09/12/2022
  3431                                  BPB48T:
  3432                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3433                                  		; 48 tpi diskettes	;
  3434                                  		dw	512		; physical sector size in bytes
  3435                                  		db	2		; sectors/allocation unit
  3436                                  		dw	1		; reserved sectors for dos
  3437                                  		db	2		; number of allocation tables
  3438                                  		dw	112		; number of directory entries
  3439                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3440                                  		db	0FDh		; media descriptor
  3441                                  		dw	2		; number of fat sectors
  3442                                  		dw	9		; sectors per track
  3443                                  		dw	2		; heads
  3444                                  		dw	0		; hidden sector count (low word)
  3445                                  		dw	0		; hidden sector (high)
  3446                                  		dw	0		; number of sectors (low)
  3447                                  		dw	0		; number of sectors (high)					
  3448                                  
  3449                                  		db 90h
  3450                                  ;align 2
  3451                                  BPB96T:
  3452                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3453                                  		; 96 tpi diskettes	;
  3454                                  		dw	512		; physical sector size in bytes
  3455                                  		db	1		; sectors/allocation unit
  3456                                  		dw	1		; reserved sectors for dos
  3457                                  		db	2		; number of allocation tables
  3458                                  		dw	224		; number of directory entries
  3459                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3460                                  		db	0F9h		; media descriptor
  3461                                  		dw	7		; number of fat sectors
  3462                                  		dw	15		; sectors per track
  3463                                  		dw	2		; heads
  3464                                  		dw	0		; hidden sector count (low word)
  3465                                  		dw	0		; hidden sector (high)
  3466                                  		dw	0		; number of sectors (low)
  3467                                  		dw	0		; number of sectors (high)
  3468                                  
  3469                                  		db 90h
  3470                                  ;align 2
  3471                                  BPB35:
  3472                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3473                                  		; 3.5" diskettes - 720 KB ;		
  3474                                  		dw	512		; physical sector size in bytes
  3475                                  		db	2		; sectors/allocation unit
  3476                                  		dw	1		; reserved sectors for dos
  3477                                  		db	2		; number of allocation tables
  3478                                  		dw	112		; number of directory entries
  3479                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3480                                  		db	0F9h		; media descriptor
  3481                                  		dw	3		; number of fat sectors
  3482                                  		dw	9		; sectors per track
  3483                                  		dw	2		; heads
  3484                                  		dw	0		; hidden sector count (low word)
  3485                                  		dw	0		; hidden sector (high)
  3486                                  		dw	0		; number of sectors (low)
  3487                                  		dw	0		; number of sectors (high)
  3488                                  
  3489                                  		db 90h
  3490                                  ;align 2
  3491                                  
  3492                                  ;align 2
  3493                                  ;BPB144:
  3494                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3495                                  ;
  3496                                  ;		dw	512		; physical sector size in bytes
  3497                                  ;		db	1		; sectors/allocation unit
  3498                                  ;		dw	1		; reserved sectors for dos
  3499                                  ;		db	2		; number of allocation tables
  3500                                  ;		dw	224		; number of directory entries
  3501                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3502                                  ;		db	0F0h		; media descriptor
  3503                                  ;		dw	9		; number of fat sectors
  3504                                  ;		dw	18		; sectors per track
  3505                                  ;		dw	2		; heads
  3506                                  ;		dw	0		; hidden sector count (low word)
  3507                                  ;		dw	0		; hidden sector (high)
  3508                                  ;		dw	0		; number of sectors (low)
  3509                                  ;		dw	0		; number of sectors (high)
  3510                                  ;
  3511                                  ;		db 90h
  3512                                  ;align 2
  3513                                  
  3514                                  BPB288:
  3515                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3516                                  		; 3.5" diskettes - 2.88 MB ;	 
  3517                                  		dw	512		; physical sector size in bytes
  3518                                  		db	2		; sectors/allocation unit
  3519                                  		dw	1		; reserved sectors for dos
  3520                                  		db	2		; number of allocation tables
  3521                                  		dw	240		; number of directory entries
  3522                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3523                                  		db	0F0h		; media descriptor
  3524                                  		dw	3		; number of fat sectors
  3525                                  		dw	9		; sectors per track
  3526                                  		dw	2		; heads
  3527                                  		dw	0		; hidden sector count (low word)
  3528                                  		dw	0		; hidden sector (high)
  3529                                  		dw	0		; number of sectors (low)
  3530                                  		dw	0		; number of sectors (high)
  3531                                  
  3532                                  		db 90h			;
  3533                                  ;align 2
  3534                                  
  3535                                  %endif
  3536                                  
  3537                                  ; ----------------------------------------------------------------------------
  3538                                  					; align	2
  3539                                  ; 09/12/2022
  3540                                  %if 0
  3541                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3542                                  		dw bpb96t		; 96tpi	drives
  3543                                  		dw bpb35		; 3.5" drives
  3544                                  		dw bpb35		; unused 8" diskette
  3545                                  		dw bpb35		; unused 8" diskette
  3546                                  		dw bpb35		; used for hard	disk
  3547                                  		dw bpb35		; used for tape	drive
  3548                                  		dw bpb35		; FFOTHER
  3549                                  		dw bpb35		; ERIMO
  3550                                  		dw bpb288		; 2.88MB drive
  3551                                  		;
  3552                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3553                                  %endif
  3554                                  
  3555                                  ; 13/12/2022
  3556                                  %if 0
  3557                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3558                                  		dw BPB96T		; 96tpi	drives
  3559                                  		dw BPB35		; 3.5" drives
  3560                                  		dw BPB35		; unused 8" diskette
  3561                                  		dw BPB35		; unused 8" diskette
  3562                                  		dw BPB35		; used for hard	disk
  3563                                  		dw BPB35		; used for tape	drive
  3564                                  		dw BPB35		; FFOTHER
  3565                                  		dw BPB35		; ERIMO
  3566                                  		dw BPB288		; 2.88MB drive
  3567                                  		;
  3568                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3569                                  
  3570                                  %endif
  3571                                  
  3572                                  ; ----------------------------------------------------------------------------
  3573                                  
  3574                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3575                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3576                                  ;	  will not yet be moved to its final resting place, so we know
  3577                                  ;	  it'll be low.
  3578                                  ;
  3579                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3580                                  ;	  the function you want to call in Bios_Code. This routine will
  3581                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3582                                  ;	  will get executed when the utility function finishes. It will
  3583                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3584                                  ;	  and a retf
  3585                                  
  3586                                  ; 16/10/2022
  3587                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3588                                  ; 09/12/2022
  3589                                  BC_RETF equ bc_retf
  3590                                  
  3591                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3592                                  					; 2C7h:0C8h = 70h:2638h
  3593 0000174B [C800]                  		dw BC_RETF
  3594                                  
  3595                                  ; ----------------------------------------------------------------------------
  3596                                  
  3597                                  call_bios_code:	; proc far			
  3598 0000174D 2EFF36[4B17]            		push	word [cs:addr_of_bcretf] 
  3599                                  					; set up near return to far return
  3600 00001752 2EFF36[D706]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3601 00001757 55                      		push	bp		; save offset of utility function
  3602 00001758 CB                      		retf			; far jump to (DOS)BIOS code
  3603                                  
  3604                                  ; ----------------------------------------------------------------------------
  3605                                  		
  3606                                  		; 20/12/2022
  3607                                  ;flp_drvs	db 0			
  3608                                  
  3609                                  ; ----------------------------------------------------------------------------
  3610                                  
  3611                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3612                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3613                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3614                                  
  3615                                  ;-----------------------------------------------------------------------------
  3616                                  ; entry point from boot sector
  3617                                  ;-----------------------------------------------------------------------------
  3618                                  
  3619                                  init:		; 27/12/2018
  3620                                  		; MSDOS 6.0 (MSINIT.ASM)
  3621                                  		;=============================================================
  3622                                  		;
  3623                                  		; entry from boot sector. the register contents are:
  3624                                  		;
  3625                                  		;   dl = int 13 drive number we booted from
  3626                                  		;   ch = media byte
  3627                                  		;   bx = first data sector on disk.
  3628                                  		;   ax = first data sector (high)
  3629                                  		;   di = sectors/fat for the boot media.
  3630                                  
  3631                                  		; 07/04/2018
  3632                                  		;=============================================================
  3633                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3634                                                  ; DL = [bsDriveNumber]
  3635                                  		; DH = [bsMedia]
  3636                                  		; AX = [bsSectors] ; Total sectors
  3637                                  		; DS = 0, SS = 0
  3638                                  		; BP = 7C00h
  3639                                  
  3640                                  		; 29/09/2023
  3641                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  3642                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  3643                                  	
  3644                                  ; 20/12/2022
  3645                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3646                                  %if 0	
  3647                                  		cli
  3648                                  
  3649                                  		push	ax
  3650                                  		xor	ax, ax
  3651                                  		mov	ds, ax
  3652                                  		pop	ax
  3653                                  %endif
  3654                                  
  3655                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3656                                  
  3657                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3658                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3659                                  
  3660                                  ;-----------------------------------------------------------------------------
  3661                                  ; initialization - stage 1
  3662                                  ;-----------------------------------------------------------------------------
  3663                                  ; 02/06/2018 - Retro DOS v3.0
  3664                                  		
  3665                                  		; 21/12/2022
  3666                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3667                                  		;mov	bx, 60h
  3668                                  		;mov	es, bx
  3669                                  		;mov	si, bp
  3670                                  		;sub	di, di
  3671                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3672                                  		;;mov	cl, 35
  3673                                  		;rep	movsw
  3674                                  
  3675 00001759 0E                      		push	cs
  3676 0000175A 1F                      		pop	ds
  3677                                  
  3678                                  		; 20/03/2019 - Retro DOS v4.0
  3679                                  		;cli		; turn interrupts off while manupulating stack
  3680                                  		;mov	ss, cx	; set stack segment register
  3681 0000175B BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3682                                  		;sti		; turn interrupts on
  3683                                  
  3684                                  		; 27/03/2018
  3685                                  		;mov	cx, KERNEL_SIZE	; words !
  3686                                  
  3687                                  		; 20/03/2019
  3688 0000175E B90080                  		mov	cx, 32768 ; 65536 bytes
  3689                                  
  3690                                  		; 21/12/2022
  3691                                  		; 07/04/2018
  3692 00001761 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3693                                  		;mov	bl, KERNEL_SEGMENT
  3694 00001764 8EC3                    		mov	es, bx
  3695 00001766 31FF                    		xor	di, di
  3696 00001768 89FE                    		mov	si, di
  3697                                  		
  3698                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3699                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3700 0000176A F3A5                    		rep	movsw
  3701                                  
  3702                                  		; 20/03/2019 - Retro DOS v4.0
  3703 0000176C 53                      		push	bx
  3704 0000176D 68[7117]                		push	init0
  3705 00001770 CB                      		retf
  3706                                  init0:	
  3707                                  		; 20/12/2022
  3708                                  		; (combined kernel file > 64KB)
  3709                                  
  3710                                  		; 20/03/2019
  3711 00001771 B520                    		mov	ch, 20h
  3712 00001773 8ED9                    		mov	ds, cx ; 2000h
  3713                                  		;mov	cx, 1070h
  3714 00001775 B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3715 00001778 8EC1                    		mov	es, cx
  3716                                  		
  3717                                  		; 21/12/2022
  3718                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3719                                  		; 28/09/2023
  3720                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  3721                                  
  3722                                  		;mov	cx, KERNEL_SIZE - 32768
  3723                                  		; 28/09/2023 (BugFix)
  3724 0000177A B93D01                  		mov	cx, NXWORDCOUNT
  3725                                  		;shr	cx, 1 ; 28/09/2023
  3726                                  		;xor	si, si
  3727                                  		;xor	di, di
  3728 0000177D F3A5                    		rep	movsw
  3729                                  
  3730                                  		; 28/09/2023
  3731                                  		;; 17/06/2018 
  3732                                  		;mov	ds, bx
  3733                                  		;; 21/03/2019
  3734                                  		;mov	es, bx
  3735                                  ;init0:
  3736                                  ;		;push	es
  3737                                  ;		push	bx ; 20/03/2019
  3738                                  ;		push	init1 ; 07/04/2018
  3739                                  ;		retf	; jump to 0070h:init1
  3740                                  ;init:
  3741                                  init1:
  3742                                  		; 20/12/2022
  3743                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3744                                  		; for full MSDOS compatibility.
  3745                                  
  3746 0000177F 8EC1                    		mov	es, cx ; 0
  3747 00001781 8ED9                    		mov	ds, cx ; 0
  3748                                  
  3749 00001783 B82205                  		mov	ax, SEC9
  3750                                  
  3751                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3752 00001786 B378                    		mov	bl, 1Eh*4
  3753                                  				; INT 1Eh points to diskette parms table
  3754                                  
  3755                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3756                                   		; (do not move the DPT if is not original ROMBIOS table)
  3757                                  
  3758                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3759                                  		;;jnz	short mov_dpt
  3760                                  
  3761                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3762                                  		;je	short dont_mov_dpt
  3763                                  
  3764                                  		;mov	si, [bx] ; [1Eh*4]		
  3765                                  ;mov_dpt:
  3766                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3767 00001788 C537                    		lds	si, [bx]
  3768 0000178A 89C7                    		mov	di, ax  ; SEC9
  3769 0000178C B10B                    		mov	cl, 11
  3770                                  		;cld
  3771 0000178E F3A4                    		rep	movsb
  3772                                  
  3773                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3774 00001790 8ED9                    		mov	ds, cx ; 0
  3775 00001792 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3776 00001794 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3777                                  ;dont_mov_dpt:
  3778                                  
  3779                                  ; 20/12/2022 - Retro DOS v4.0
  3780                                  %if 0
  3781                                  		; 27/12/2018 - Retro DOS v4.0
  3782                                  		; 'Starting MS-DOS...' message
  3783                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3784                                  		; (0070h:96A3h)
  3785                                  
  3786                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3787                                  		mov     ah, 0Eh
  3788                                  		;bh = 0
  3789                                          	mov     bl, 7		; "normal" attribute and page
  3790                                  startmsg_nxt_chr:  
  3791                                  		lodsb
  3792                                  		or	al, al
  3793                                          	jz	short startmsg_ok
  3794                                         
  3795                                  		int	10h		; video write
  3796                                          	jmp	short startmsg_nxt_chr
  3797                                  
  3798                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3799                                  
  3800                                  startmsg_ok:
  3801                                  
  3802                                  %endif
  3803                                  
  3804                                  ;-----------------------------------------------------------------------------
  3805                                  ; initialization - stage 2
  3806                                  ;-----------------------------------------------------------------------------
  3807                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3808                                  
  3809                                  
  3810                                  ; 19/03/2018
  3811                                  ; Retro DOS v2.0 (24/02/2018)
  3812                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3813                                  
  3814                                  ;------------------------------------------------------------------------
  3815                                  ;									:
  3816                                  ;	System initialization						:
  3817                                  ;									:
  3818                                  ;	The entry conditions are established by the bootstrap		:
  3819                                  ;	loader and are considered unknown. The following jobs		:
  3820                                  ;	will be performed by this module:				:
  3821                                  ;									:
  3822                                  ;	1.	All device initialization is performed			:
  3823                                  ;	2.	A local stack is set up and DS:SI are set		:
  3824                                  ;		to point to an initialization table. Then		:
  3825                                  ;		an inter-segment call is made to the first		:
  3826                                  ;		byte of the dos 					:
  3827                                  ;	3.	Once the dos returns from this call the ds		:
  3828                                  ;		register has been set up to point to the start		:
  3829                                  ;		of free memory. The initialization will then		:
  3830                                  ;		load the command program into this area 		:
  3831                                  ;		beginning at 100 hex and transfer control to		:
  3832                                  ;		this program.						:
  3833                                  ;									:
  3834                                  ;------------------------------------------------------------------------
  3835                                  		
  3836                                  		; 20/12/2022
  3837                                  		; ----------------------
  3838                                  		; Registers
  3839                                  		; ----------------------
  3840                                  		; DL = [bsDriveNumber]
  3841                                  		; DH = [bsMedia]
  3842                                  		; DS = 0, ES = 0, SS = 0
  3843                                  		; BP = 7C00h
  3844                                  		; SP = 700h
  3845                                  		; ----------------------
  3846                                  		; CX = 0				
  3847                                  
  3848                                  ; 02/10/2022 - 20/12/2022
  3849                                  ; ------------------------------------------------------------------------------
  3850                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3851                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3852                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3853                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3854                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3855                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3856                                  ; ------------------------------------------------------------------------------
  3857                                  
  3858                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3859                                  ;
  3860                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3861                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3862                                  ;;	data sector of the bios.
  3863                                  ;
  3864                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3865                                  ;		mov	[cs:bios_l], bx
  3866                                  
  3867                                  ; with the following information from msload, we don't need the
  3868                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3869                                  ;     limitation of msbio.com file.
  3870                                  
  3871                                  		; 14/12/2023
  3872                                  		; 21/12/2022
  3873                                  		;cli
  3874                                  
  3875 00001797 0E                      		push	cs		; Save a peck of interrupt vectors...
  3876 00001798 07                      		pop	es
  3877                                  		;push	cx
  3878                                  		;push	di
  3879                                  		; 20/12/2022
  3880 00001799 B105                    		mov	cl, 5
  3881                                  		;mov	cx, 5		; NUMROMVECTORS
  3882                                  					; no. of rom vectors to	be saved
  3883                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3884 0000179B BE[0001]                		mov	si, RomVectors
  3885                                  
  3886                                  		; 14/12/2023
  3887 0000179E FA                      		cli
  3888                                  next_int_:		
  3889 0000179F 2E                      		cs	; 16/10/2022
  3890 000017A0 AC                      		lodsb		
  3891                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3892 000017A1 98                      		cbw			; ax = interrupt number
  3893 000017A2 D1E0                    		shl	ax, 1
  3894 000017A4 D1E0                    		shl	ax, 1		; int no * 4
  3895 000017A6 89C7                    		mov	di, ax		; interrupt vector address
  3896 000017A8 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3897                                  					; saving address in di
  3898                                  		;lodsw			; movsw
  3899                                  		;stosw
  3900                                  		;lodsw			; movsw
  3901                                  		;stosw			; save the vector
  3902                                  		; 20/12/2022
  3903 000017AA A5                      		movsw
  3904 000017AB A5                      		movsw		
  3905                                  
  3906 000017AC 87F7                    		xchg	si, di
  3907 000017AE E2EF                    		loop	next_int_
  3908                                  		
  3909                                  		;pop	di
  3910                                  		;pop	cx
  3911                                  
  3912                                  ; we need to save int13 in two places in case we are running on an at.
  3913                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3914                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3915                                  ; rom int13 routine, we must have that rom address also stored away.
  3916                                  
  3917                                  		; 20/12/2022
  3918                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3919                                  		;mov	[cs:Orig13], ax
  3920                                  		;mov	ax, [cs:Old13+2]
  3921                                  		;mov	[cs:Orig13+2], ax
  3922                                  
  3923                                  		; 14/12/2023
  3924                                  		;cli
  3925                                  
  3926                                  		; 16/10/2022
  3927 000017B0 C7064C00[6B07]          		mov	word [13h*4], block13
  3928                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3929                                  					; set up int 13	for new	action
  3930 000017B6 8C0E4E00                		mov	[13h*4+2], cs
  3931                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3932 000017BA C7065400[3F08]          		mov	word [15h*4], Int15
  3933                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3934                                  					; set up int 15	for new	action
  3935 000017C0 8C0E5600                		mov	[15h*4+2], cs
  3936                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3937 000017C4 C7066400[F007]          		mov	word [19h*4], int19
  3938                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3939                                  					; set up int 19	for new	action
  3940 000017CA 8C0E6600                		mov	[19h*4+2], cs
  3941                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3942                                  
  3943                                  		; 20/12/2022
  3944 000017CE 0E                      		push	cs
  3945 000017CF 1F                      		pop	ds
  3946                                  		
  3947 000017D0 A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3948 000017D3 A3[B400]                		mov	[Orig13], ax
  3949 000017D6 A1[0801]                		mov	ax, [Old13+2]
  3950 000017D9 A3[B600]                		mov	[Orig13+2], ax
  3951                                  					; ;
  3952 000017DC FB                      		sti
  3953 000017DD CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3954                                  					; Return: AX = equipment flag bits
  3955                                  
  3956                                  ; we have to support a system that does not have any diskette
  3957                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3958                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3959                                  ; otherwise, the system has only hardfiles.
  3960                                  ;
  3961                                  ; important thing is that still, for compatibility reason, the drive letter
  3962                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3963                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3964                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3965                                  ; drives will get "invalid drive letter ..." message. we are going to
  3966                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3967                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3968                                  
  3969                                  ; check the register returned by the equipment determination interrupt
  3970                                  ; we have to handle the case of no diskettes in the system by faking
  3971                                  ; two dummy drives.
  3972                                  ;
  3973                                  ; if the register indicates that we do have floppy drives we don't need
  3974                                  ; to do anything special.
  3975                                  ;
  3976                                  ; if the register indicates that we don't have any floppy drives then
  3977                                  ; what we need to do is set the fakefloppydrv variable, change the
  3978                                  ; register to say that we do have floppy drives and then go to execute
  3979                                  ; the code which starts at notsingle. this is because we can skip the
  3980                                  ; code given below which tries to find if there are one or two drives
  3981                                  ; since we already know about this.
  3982                                  
  3983                                  		; 06/05/2019 - Retro DOS v4.0
  3984 000017DF 88C1                    		mov	cl, al
  3985                                  
  3986                                  		; 12/12/2022
  3987 000017E1 A801                    		test	al, 1
  3988                                  		;test	ax, 1		; floppy drives	present	?
  3989 000017E3 751E                    		jnz	short normalfloppydrv ;	yes.
  3990                                  
  3991                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3992                                  ; whether it is an old ROM BIOS or a new one
  3993                                  ;
  3994                                  ; WARNING !!!
  3995                                  ;
  3996                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3997                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3998                                  
  3999                                  		; 20/12/2022
  4000                                  		;push	ax
  4001                                  		;push	bx
  4002                                  		;push	cx
  4003 000017E5 52                      		push	dx
  4004                                  		;push	di
  4005 000017E6 06                      		push	es
  4006 000017E7 B408                    		mov	ah, 8
  4007 000017E9 B200                    		mov	dl, 0
  4008 000017EB CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4009                                  					; DL = drive number
  4010                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4011                                  					; DL = number of consecutive drives
  4012                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4013 000017ED 7202                    		jc	short _gdskp_error
  4014                                  		;;mov	[cs:flp_drvs], dl
  4015                                  		; 20/12/2022
  4016                                  		; ds = cs
  4017                                  		;mov	[flp_drvs], dl
  4018 000017EF 88D1                    		mov	cl, dl
  4019                                  _gdskp_error:	
  4020                                  		; 20/12/2022			
  4021 000017F1 07                      		pop	es
  4022                                  		;pop	di
  4023 000017F2 5A                      		pop	dx
  4024                                  		;pop	cx
  4025                                  		;pop	bx
  4026                                  		;pop	ax
  4027                                  		
  4028 000017F3 720E                    		jc	short normalfloppydrv
  4029                                  					; if error it is an old ROM BIOS
  4030                                  					; so, lets assume that ROM BIOS lied
  4031                                  		; 20/12/2022
  4032                                  		; ds = cs
  4033                                  		;cmp	byte [flp_drvs], 0
  4034                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4035                                  		;jz	short _set_fake_flpdrv
  4036                                  		;;mov	al, [cs:flp_drvs]
  4037                                  		;mov	al, [flp_drvs]
  4038                                  		;;dec	al		; make it zero based
  4039                                  		;; 18/12/2022
  4040                                  		;dec	ax
  4041                                  		;jmp	short got_num_flp_drvs
  4042                                  		
  4043                                  		; 20/12/2022
  4044 000017F5 08C9                    		or	cl, cl ; [flp_drvs]
  4045 000017F7 7403                    		jz	short _set_fake_flpdrv		
  4046 000017F9 49                      		dec	cx	
  4047 000017FA EB0B                    		jmp	short got_num_flp_drvs
  4048                                  ; ----------------------------------------------------------------------------
  4049                                  
  4050                                  _set_fake_flpdrv:
  4051                                  		; 20/12/2022
  4052                                  		; ds = cs
  4053                                  		;inc	cl	; cl = 1
  4054                                  		; 14/12/2023
  4055 000017FC 41                      		inc	cx	; cl = 1
  4056 000017FD 880E[C916]              		mov	[fakefloppydrv], cl ; 1
  4057                                  		;mov	byte [fakefloppydrv], 1
  4058                                  		;;mov	byte [cs:fakefloppydrv], 1
  4059                                  					; we don't have any floppy drives.
  4060                                  		; 20/12/2022
  4061                                  		;mov	ax, 1
  4062 00001801 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4063                                  ; ----------------------------------------------------------------------------
  4064                                  
  4065                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4066                                  		; 20/12/2022
  4067                                  		;rol	al, 1		; there	exist floppy drives.
  4068                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4069 00001803 D0C1                    		rol	cl, 1
  4070 00001805 D0C1                    		rol	cl, 1
  4071                                  got_num_flp_drvs:			
  4072                                  		;;and	ax, 3		; only look at bits 0 &	1
  4073                                  		; 18/12/2022
  4074                                  		;and	al, 3
  4075                                  		; 20/12/2022
  4076 00001807 80E103                  		and	cl, 3
  4077 0000180A 7505                    		jnz	short notsingle	; zero means single drive system
  4078                                  		; 20/12/2022
  4079 0000180C 41                      		inc	cx
  4080                                  		;inc	ax		; pretend it's a two drive system
  4081                                  settwodrive:				; set this to two fakedrives
  4082                                  		; 20/12/2022
  4083                                  		; ds = cs
  4084 0000180D FE06[7800]              		inc	byte [single]
  4085                                  		;inc	byte [cs:single] ; remember this
  4086                                  notsingle:	
  4087                                  		; 20/12/2022
  4088                                  		;inc	ax		; ax has number	of drives, 2-4
  4089                                  		;			; is also 0 indexed boot drive if we
  4090                                  		;			; booted off hard file
  4091                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4092                                  
  4093                                  		; 20/12/2022
  4094                                  		;inc	cl	; cl >= 2
  4095                                  		; 14/12/2023
  4096 00001811 41                      		inc	cx	; cl >= 2
  4097                                  
  4098                                  ; 16/10/2022
  4099                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4100                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4101                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4102                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4103                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4104                                  SEC9	EQU	522h	; address of disk parameters
  4105                                  CHROUT	EQU	29h
  4106                                  LSTDRV	EQU     504h
  4107                                  
  4108                                  ; determine whether we booted from floppy or hard disk...
  4109                                  
  4110                                  		; 20/12/2022
  4111 00001812 88C8                    		mov	al, cl	; 26/05/2019
  4112                                  
  4113 00001814 F6C280                  		test	dl, 80h		; boot from floppy ?
  4114 00001817 7502                    		jnz	short gothrd	; no.
  4115 00001819 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4116                                  gothrd:					
  4117                                  
  4118                                  ; MSDOS 6.0
  4119                                  ;   ax = 0-based drive we booted from
  4120                                  ;   bios_l, bios_h set.
  4121                                  ;   cl = number of floppies including fake one
  4122                                  ;   ch = media byte
  4123                                  
  4124                                  ; Retro DOS 4.0 - 27/12/2018 
  4125                                  ;  (from Retro DOS v2.0 boot sector)
  4126                                  ;   dl = int 13 drive number we booted from
  4127                                  ;   dh = media byte
  4128                                  
  4129                                  		; 20/12/2022
  4130 0000181B 88F5                    		mov	ch, dh		; 01/07/2018
  4131                                  
  4132                                  		; cl = number of floppies
  4133                                  		; ch = media byte
  4134                                  
  4135                                  		; set up local stack
  4136                                  
  4137                                  		; 20/12/2022
  4138                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4139                                  					; bios_l, bios_h set.
  4140                                  					; cl = number of floppies including fake one
  4141                                  					; ch = media byte
  4142                                  		; 20/12/2022
  4143                                  		; es = ds = cs
  4144                                  		; ss = 0
  4145                                  		; sp = 700h
  4146                                  
  4147                                  		; 20/12/2022
  4148                                  		;cli
  4149                                  		;mov	ss, dx		; set stack segment and stack pointer
  4150                                  		;mov	sp, 700h
  4151                                  		;sti
  4152                                  
  4153 0000181D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4154                                  		
  4155 0000181E 88EC                    		mov	ah, ch		; FAT ID to AH
  4156 00001820 50                      		push	ax ; (**)	; save boot drive number and media byte
  4157                                  		
  4158                                  ; let model_byte, secondary_model_byte be set here!!!
  4159                                  
  4160 00001821 B4C0                    		mov	ah, 0C0h
  4161 00001823 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4162 00001825 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4163 00001827 80FC00                  		cmp	ah, 0
  4164 0000182A 7510                    		jnz	short no_rom_system_conf
  4165                                  
  4166                                  ;		; 20/12/2022
  4167                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4168                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4169                                  ;
  4170                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4171                                  ;
  4172                                  ;		on return:
  4173                                  ;		CF = 0 if successful
  4174                                  ;		   = 1 if error
  4175                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4176                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4177                                  ;
  4178                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4179                                  ;
  4180                                  ;		Offset Size	     Description
  4181                                  ;
  4182                                  ;		  00   word   length of descriptor (8 minimum)
  4183                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4184                                  ;		  03   byte   secondary model byte
  4185                                  ;		  04   byte   BIOS revision level (zero based)
  4186                                  ;		  05   byte   feature information, see below
  4187                                  ;		  06   dword  reserved
  4188                                  
  4189                                  		; 20/12/2022
  4190                                  		; ds = cs
  4191 0000182C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4192 00001830 A2[3506]                		mov	[model_byte], al
  4193                                  		;mov	[cs:model_byte], al
  4194                                  					; get/save model byte
  4195 00001833 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4196 00001837 A2[3606]                		mov	[secondary_model_byte], al
  4197                                  		;mov	[cs:secondary_model_byte], al
  4198                                  					; get/save secondary model byte
  4199 0000183A EB0C                    		jmp	short turn_timer_on
  4200                                  ;-----------------------------------------------------------------------------
  4201                                  
  4202                                  no_rom_system_conf:			
  4203 0000183C BEFFFF                  		mov	si, 0FFFFh
  4204 0000183F 8EC6                    		mov	es, si
  4205                                  		; 20/12/2022
  4206 00001841 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4207 00001845 A2[3506]                		mov	[model_byte], al
  4208                                  		;mov	[cs:model_byte], al ; save model byte
  4209                                  turn_timer_on:				
  4210 00001848 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4211 0000184A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4212                                  					; AKPORT
  4213                                  
  4214                                  ; some olivetti m24 machines have an 8530 serial communications
  4215                                  ; chip installed at io address 50h and 52h. if we're running
  4216                                  ; on one of those, we must inhibit the normal aux port initialization
  4217                                  
  4218                                  		; 20/12/2022
  4219                                  		; ds = cs
  4220 0000184C 803E[3506]00            		cmp	byte [model_byte], 0
  4221                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4222 00001851 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4223                                  					; (except olivetti m24)
  4224 00001853 E466                    		in	al, 66h		; is 8530 installed?
  4225 00001855 A820                    		test	al, 20h
  4226 00001857 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4227 00001859 B00F                    		mov	al, 0Fh		; double check
  4228 0000185B E650                    		out	50h, al
  4229 0000185D E450                    		in	al, 50h
  4230 0000185F A801                    		test	al, 1		; this test was	copied from olivetti
  4231 00001861 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4232                                  
  4233                                  not_olivetti_m24:
  4234 00001863 B003                    		mov	al, 3		; init com4
  4235 00001865 E84008                  		call	aux_init
  4236 00001868 B002                    		mov	al, 2		; init com3
  4237 0000186A E83B08                  		call	aux_init
  4238 0000186D B001                    		mov	al, 1		; init com2
  4239 0000186F E83608                  		call	aux_init
  4240 00001872 30C0                    		xor	al, al		; init com1
  4241 00001874 E83108                  		call	aux_init
  4242                                  
  4243                                  skip_aux_port_init:			
  4244 00001877 B002                    		mov	al, 2		; init lpt3
  4245 00001879 E82408                  		call	print_init
  4246 0000187C B001                    		mov	al, 1		; init lpt2
  4247 0000187E E81F08                  		call	print_init
  4248 00001881 30C0                    		xor	al, al		; init lpt1
  4249 00001883 E81A08                  		call	print_init
  4250                                  
  4251 00001886 31D2                    		xor	dx, dx	; 0
  4252 00001888 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4253 0000188A 8EC2                    		mov	es, dx
  4254 0000188C 31C0                    		xor	ax, ax
  4255                                  		; 16/10/2022
  4256 0000188E BF3405                  		mov	di, INITSPOT	; 0534h
  4257                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4258                                  					; IBM wants 4 zeros here
  4259 00001891 AB                      		stosw
  4260 00001892 AB                      		stosw
  4261 00001893 8CC8                    		mov	ax, cs		; fetch	segment
  4262 00001895 C7066C00[E506]          		mov	word [BRKADR], cbreak
  4263                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4264                                  					; break	entry point
  4265 0000189B A36E00                  		mov	[BRKADR+2], ax		
  4266                                  		;mov	ds:6Eh,	ax	; vector for break
  4267 0000189E C706A400[5907]          		mov	word [CHROUT*4], outchr
  4268                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4269 000018A4 A3A600                  		mov	[CHROUT*4+2], ax
  4270                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4271                                  
  4272 000018A7 BF0400                  		mov	di, 4
  4273 000018AA BB[EB06]                		mov	bx, intret ; 19/10/2022
  4274                                  		;mov	bx, offset intret ; intret (cs:intret)
  4275                                  					; will initialize rest of interrupts
  4276 000018AD 93                      		xchg	ax, bx
  4277 000018AE AB                      		stosw			; location 4
  4278 000018AF 93                      		xchg	ax, bx		; cs:
  4279 000018B0 AB                      		stosw			; int 1	; location 6
  4280 000018B1 83C704                  		add	di, 4
  4281 000018B4 93                      		xchg	ax, bx
  4282 000018B5 AB                      		stosw			; location 12
  4283 000018B6 93                      		xchg	ax, bx		; cs:
  4284 000018B7 AB                      		stosw			; int 3	; location 14
  4285 000018B8 93                      		xchg	ax, bx
  4286 000018B9 AB                      		stosw			; location 16
  4287 000018BA 93                      		xchg	ax, bx		; cs:
  4288 000018BB AB                      		stosw			; int 4	; location 18
  4289                                  
  4290                                  
  4291                                  ;		; 20/12/2022
  4292                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4293                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4294                                  ;	
  4295                                  ;		50:00	byte	Print screen status byte
  4296                                  ;				 00 = PrtSc not active,
  4297                                  ;				 01 = PrtSc in progress
  4298                                  ;				 FF = error
  4299                                  ;		50:01  3 bytes	Used by BASIC
  4300                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4301                                  ;		50:05  10bytes	POST work area
  4302                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4303                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4304                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4305                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4306                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4307                                  ;		50:20	word	DOS dynamic storage
  4308                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4309                                  ;		50:30	4bytes	MODE command
  4310                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4311                                  
  4312 000018BC 89160005                		mov	[0500h], dx ; 0
  4313                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4314 000018C0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4315                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4316                                  
  4317                                  ; we need to initialize the cs:motorstartup variable from the disk
  4318                                  ; parameter table at sec9. the offsets in this table are defined in
  4319                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4320                                  
  4321 000018C4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4322                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4323                                  					; [522h+0Ah]
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327 000018C7 2EA2[2601]              		mov	[cs:motorstartup], al
  4328 000018CB 2E803E[3506]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4329 000018D1 720B                    		jb	short no_diddle	; no
  4330 000018D3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4331                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4332                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4333 000018D9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4334                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4335                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4336                                  no_diddle:				
  4337 000018DE CD12                    		int	12h		; MEMORY SIZE -
  4338                                  					; Return: AX = number of contiguous 1K blocks of memory
  4339 000018E0 B106                    		mov	cl, 6
  4340 000018E2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4341                                  		
  4342                                  		; 20/12/2022
  4343                                  		; 03/07/2018 - 27/12/2018
  4344                                  		;pop	cx ; (**)
  4345                                  		;mov	[cs:drvfat], cx
  4346                                  		
  4347 000018E4 50                      		push	ax ; (*)	; save real top	of memory
  4348                                  
  4349                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4350                                  
  4351                                  ;M068 - BEGIN
  4352                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4353                                  
  4354                                  		; 20/12/2022
  4355                                  		; ds = 0
  4356                                  
  4357                                  		;push	ds
  4358                                  		;push	bx		; pushes not required but since this
  4359                                  					; happens to be a last minute change
  4360                                  					; & since it is only init code.
  4361                                  		;xor	bx, bx
  4362                                  		;mov	ds, bx
  4363                                  
  4364                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  4365                                  		;mov	bx, [2Fh*4]
  4366                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4367                                  		;mov	ds, [2Fh*4+2]
  4368                                  		; 29/09/2023
  4369 000018E5 C51EBC00                		lds	bx, [2Fh*4]
  4370                                  
  4371 000018E9 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4372                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4373 000018EE 750F                    		jnz	short SkipRPL
  4374 000018F0 807F054C                		cmp	byte [bx+5], 'L'
  4375                                  		;cmp	byte ptr [bx+5], 'L'
  4376 000018F4 7509                    		jnz	short SkipRPL
  4377 000018F6 89C2                    		mov	dx, ax		; get TOM into DX
  4378 000018F8 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4379 000018FB CD2F                    		int	2Fh		; Get new TOM from any RPL
  4380 000018FD 89D0                    		mov	ax, dx
  4381                                  SkipRPL:	
  4382                                  		; 20/12/2022
  4383                                  		;pop	bx
  4384                                  		;pop	ds
  4385                                  
  4386                                  ;M068 - END
  4387                                  		; 20/12/2022
  4388                                  		; 27/12/2018
  4389 000018FF 0E                      		push	cs
  4390 00001900 1F                      		pop	ds
  4391                                  
  4392                                  		; 18/03/2019 - Retro DOS v4.0
  4393                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4394                                  		;mov	[cs:fatloc], ax	; location to read fat
  4395                                  
  4396                                  		; 01/07/2018
  4397                                  		; 08/04/2018
  4398                                  		; 28/03/2018
  4399                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4400 00001901 83E840                  		sub	ax, 64
  4401 00001904 A3[C316]                		mov	[init_bootseg], ax ; 20/12/2022
  4402                                  		;mov	[cs:init_bootseg], ax
  4403                                  
  4404                                  		; 27/12/2018 - Retro DOS v4.0
  4405                                  		;;pop	ax ; (*)	; get back real top of memory
  4406                                  		;pop	dx ; (*)
  4407                                  		; 29/09/2023 (BugFix)
  4408 00001907 58                      		pop	ax ; (*)	; get back real top of memory
  4409                                  
  4410                                  		; 20/12/2022
  4411                                  		; 27/12/2018
  4412 00001908 59                      		pop	cx ; (**)
  4413 00001909 890E[C016]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4414                                  
  4415                                  		; 20/12/2022
  4416                                  
  4417                                  		;mov	dx, 46Dh	; SYSINIT segment
  4418 0000190D BA3304                  		mov	dx, SYSINITSEG	; 17/10/2022
  4419 00001910 8EDA                    		mov	ds, dx
  4420                                  
  4421                                  ; set pointer to resident device driver chain
  4422                                  
  4423                                  		; 17/10/2022
  4424 00001912 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4425                                  		;mov	word [273h], res_dev_list
  4426                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4427                                  					; [SYSINIT+DEVICE_LIST]
  4428 00001918 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4429                                  		;mov	[275h], cs
  4430                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4431                                  
  4432 0000191C A3[9202]                		mov	[MEMORYSIZE], ax
  4433                                  		;mov	[292h], ax
  4434                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4435                                  
  4436 0000191F FEC1                    		inc	cl
  4437 00001921 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4438                                  		;mov	[296h], cl
  4439                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4440                                  
  4441 00001925 C706[7102]B207          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4442                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4443                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4444                                  					; dos_load_seg
  4445                                  
  4446                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4447                                  ; printer cards. we initialize this value to point to an iret only if
  4448                                  ;
  4449                                  ; 1) the original segment points to storage inside valid ram.
  4450                                  ;
  4451                                  ; 2) the original segment is 0F000:xxxx
  4452                                  
  4453                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4454                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4455                                  		;mov	es, ax
  4456                                  		; 20/12/2022
  4457                                  		;push	ds ; SYSINITSEG
  4458                                  		;pop	es
  4459 0000192B 8EC2                    		mov	es, dx ; SYSINITSEG
  4460 0000192D 31C0                    		xor	ax, ax ; 0
  4461 0000192F 8ED8                    		mov	ds, ax		; segment 0
  4462                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4463 00001931 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4464                                  		; 18/10/2022
  4465 00001934 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4466                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4467 00001939 7605                    		jbe	short resetintf
  4468 0000193B 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4469 0000193E 750A                    		jnz	short keepintf
  4470                                  resetintf:	
  4471 00001940 C7063C00[EB06]          		mov	word [0Fh*4], intret			
  4472                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4473 00001946 8C0E3E00                		mov	word [0Fh*4+2], cs
  4474                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4475                                  keepintf:				
  4476                                  ; end important
  4477                                  
  4478                                  ; 17/10/2022
  4479                                  ; 28/12/2018 - Retro DOS v4.0
  4480                                  
  4481                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4482                                  ;
  4483                                  ; we will check if the system has ibm extended keyboard by
  4484                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4485                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4486                                  ; for the extended keyboard function. use cx as the temporary register.
  4487                                  
  4488                                  		; 20/12/2022
  4489                                  		; ds = 0
  4490                                  		;xor	cx, cx
  4491                                  		;mov	ds, cx
  4492                                  
  4493 0000194A 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4494                                  
  4495                                  		; 20/12/2022
  4496                                  		; 20/03/2019
  4497 0000194E 0E                      		push	cs
  4498 0000194F 1F                      		pop	ds
  4499                                  
  4500                                  		;test	cl, 00010000b ; 10h
  4501 00001950 F6C110                  		test	cl, 10h		; extended keyboard ?
  4502 00001953 740A                    		jz	short org_key	; no, original keyboard
  4503                                  
  4504                                  		; 20/12/2022
  4505                                  		;  ds = cs
  4506 00001955 C606[DE04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4507 0000195A C606[DF04]11            		mov	byte [keysts_func], 11h
  4508                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4509                                  		;mov	byte [cs:keysts_func], 11h
  4510                                  					; change for extended keyboard functions
  4511                                  org_key:
  4512                                  
  4513                                  ; 02/06/2018 - Retro DOS v3.0
  4514                                  
  4515                                  ;**************************************************************
  4516                                  ;	will initialize the number of drives
  4517                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4518                                  ;	the indications are as follows:
  4519                                  ;
  4520                                  ;	bits	7	6	drives
  4521                                  ;		0	0	1
  4522                                  ;		0	1	2
  4523                                  ;		1	0	3
  4524                                  ;		1	1	4
  4525                                  ;**************************************************************
  4526                                  		
  4527                                  		; 20/12/2022
  4528                                  		; ds = cs		
  4529                                  		;push	cs
  4530                                  		;pop	ds
  4531                                  		; 21/12/2022
  4532                                  		;push	cs
  4533                                  		;pop	es
  4534                                  
  4535 0000195F E88508                  		call	cmos_clock_read	; If cmos clock	exists,
  4536                                  					; then set the system time according to	that.
  4537                                  					; also,	reset the cmos clock rate.
  4538                                  		; 18/10/2022
  4539                                  		;mov	word ptr BData_start, offset harddrv ;
  4540                                  					; set up pointer to hdrive
  4541                                  		; 02/10/2022
  4542 00001962 C706[0000][0C09]        		mov	word [hdrv_pat], harddrv 
  4543                                  		
  4544                                  		; 20/12/2022
  4545                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4546 00001968 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4547 00001969 30E4                    		xor	ah, ah		; chuck	fat id byte
  4548 0000196B A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4549 0000196E A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4550 00001971 D1E0                    		shl	ax, 1
  4551 00001973 0106[3A17]              		add	[last_dskdrv_table], ax
  4552                                  
  4553                                  		; 14/12/2023
  4554                                  		; 13/12/2023 - Retro DOS v4.1 IO.SYS
  4555                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS
  4556                                  		; ---------------------------------- 
  4557                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  4558                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  4559                                  		; ........
  4560 00001977 1E                      		push    ds
  4561 00001978 B800F0                  		mov     ax, 0F000h
  4562 0000197B 8ED8                    		mov     ds, ax
  4563                                  
  4564 0000197D 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  4565 00001983 751F                    		jne	short skip_mode2
  4566 00001985 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  4567 0000198B 7517                    		jne	short skip_mode2
  4568 0000198D 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  4569 00001993 750F                    		jne	short skip_mode2
  4570                                  
  4571 00001995 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  4572 00001998 CD15                    		int	15h
  4573 0000199A 7208                    		jc	short skip_mode2
  4574                                  		; 10/12/2023
  4575                                  		; PCDOS 7.1 IBMBIO.COM
  4576                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  4577                                  					; (MSDOS 6.0)
  4578                                  		; MSDOS 6.22 IO.SYS
  4579 0000199C 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  4580 0000199F B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  4581 000019A2 CD15                    		int	15h
  4582                                  skip_mode2:
  4583 000019A4 1F                      		pop	ds
  4584                                  		; ........
  4585                                  
  4586 000019A5 B280                    		mov	dl, 80h
  4587 000019A7 B408                    		mov	ah, 8
  4588 000019A9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4589                                  					; DL = drive number
  4590                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4591                                  					; DL = number of consecutive drives
  4592                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4593 000019AB 7204                    		jc	short enddrv
  4594 000019AD 8816[3917]              		mov	[hnum], dl	; save number of hard disk drives
  4595                                  enddrv:
  4596                                  		; 21/12/2022
  4597 000019B1 0E                      		push	cs
  4598 000019B2 07                      		pop	es
  4599                                  
  4600                                  ; scan the list of drives to determine their type. we have three flavors of
  4601                                  ; diskette drives:
  4602                                  ;
  4603                                  ;   48tpi drives    we do nothing special for them
  4604                                  ;   96tpi drives    mark the fact that they have changeline support.
  4605                                  ;   3.5"  drives    mark changeline support and small.
  4606                                  ;
  4607                                  ; the following code uses registers for certain values:
  4608                                  ;
  4609                                  ;   dl - physical drive
  4610                                  ;   ds:di - points to current bds
  4611                                  ;   cx - flag bits for bds
  4612                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4613                                  					
  4614 000019B3 30D2                    		xor	dl, dl
  4615                                  
  4616                                  		; 20/12/2022
  4617                                  		; ds = cs
  4618                                  		; 17/06/2018		 
  4619                                  		;push	cs
  4620                                  		;pop	ds
  4621                                  
  4622 000019B5 C606[2C01]09            		mov	byte [eot], 9
  4623 000019BA BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4624                                  					; to set aside two bdss	for the	two fake floppy	drives
  4625                                  
  4626                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4627                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4628                                  
  4629                                  ; check to see if we are faking floppy drives. if not we don't
  4630                                  ; do anything special. if we are faking floppy drives we need
  4631                                  ; to set aside two bdss for the two fake floppy drives. we
  4632                                  ; don't need to initalise any fields though. so starting at start_bds
  4633                                  ; use the link field in the bds structure to go to the second bds
  4634                                  ; in the list and initalise it's link field to -1 to set the end of
  4635                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4636                                  ; the bds for harddrives.
  4637                                  
  4638 000019BD 803E[C916]01            		cmp	byte [fakefloppydrv], 1
  4639 000019C2 750B                    		jnz	short loop_drive
  4640 000019C4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4641                                  					; di <-	first bds link
  4642 000019C6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4643                                  					; di <-	second bds link
  4644 000019C8 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4645 000019CC E90801                  		jmp	dohard		; allocate/initialise bds for harddrives
  4646                                  ;-----------------------------------------------------------------------------
  4647                                  
  4648                                  loop_drive:				
  4649 000019CF 3A16[7500]              		cmp	dl, [drvmax]
  4650 000019D3 7203                    		jb	short got_more
  4651 000019D5 E9FB00                  		jmp	done_drives
  4652                                  ;-----------------------------------------------------------------------------
  4653                                  
  4654                                  got_more:				
  4655                                  		; 14/12/2023
  4656                                  		;xor	cx, cx		; zero all flags
  4657                                  
  4658 000019D8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4659                                  					; get next bds
  4660 000019DA B600                    		mov	dh, 0		; ff48tpi
  4661                                  					; set form factor to 48	tpi
  4662 000019DC C606[C816]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  4663                                  		
  4664                                  		; 21/12/2022
  4665                                  		;push	ds
  4666                                  		;push	di
  4667                                  		; 14/12/2023 ; *
  4668                                  		;push	cx ; *+ ; cx = 0
  4669 000019E1 52                      		push	dx ; *+
  4670 000019E2 57                      		push	di ; *
  4671 000019E3 06                      		push	es ; es=cs=ds ; 21/12/2022
  4672                                  		; 14/12/2023
  4673 000019E4 52                      		push	dx ; *++
  4674                                  
  4675 000019E5 B408                    		mov	ah, 8
  4676 000019E7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4677                                  					; DL = drive number
  4678                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4679                                  					; DL = number of consecutive drives
  4680                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4681                                  		; 14/12/2023
  4682 000019E9 5B                      		pop	bx ; *++
  4683                                  		;jc	short noparmsfromrom
  4684                                  		; 14/12/2023
  4685 000019EA 7303                    		jnc	short chk_pfr
  4686 000019EC E98000                  		jmp	noparmsfromrom
  4687                                  
  4688                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4689                                  ; in this case, we are going to put bogus informations to bds table.
  4690                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4691                                  ; they are calculated at the later time. this is just for the diagnostic
  4692                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4693                                  ; this should only happen with drive b.
  4694                                  
  4695                                  chk_pfr:
  4696 000019EF 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4697 000019F2 7505                    		jnz	short pfr_ok
  4698                                  
  4699                                  		;mov	ch, 39		; rom gave wrong info.
  4700                                  		;mov	cl, 9		; let's default to 360k.
  4701                                  		; 20/12/2022
  4702 000019F4 B90927                  		mov	cx, 2709h
  4703                                  
  4704 000019F7 B601                    		mov	dh, 1
  4705                                  pfr_ok:					
  4706 000019F9 FEC6                    		inc	dh		; make number of heads 1-based
  4707 000019FB FEC5                    		inc	ch		; make number of cylinders 1-based
  4708 000019FD 8836[C616]              		mov	[num_heads], dh	; save parms returned by rom
  4709 00001A01 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4710 00001A04 880E[C716]              		mov	[sec_trk], cl
  4711 00001A08 882E[C816]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4712                                  
  4713                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4714                                  
  4715 00001A0C 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4716                                  		;jbe	short eot_ok
  4717                                  		; 09/12/2022
  4718                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4719                                  		; 14/08/2023
  4720 00001A10 7604                    		jbe	short eotok
  4721 00001A12 880E[2C01]              		mov	[eot], cl
  4722                                  ;eot_ok:					
  4723                                  eotok:
  4724                                  
  4725                                  ; 14/12/2023
  4726                                  ; 13/12/2023 ('chk_changeline' procedure)
  4727                                  %if 0
  4728                                  		pop	es ; es=cs=ds ; 21/12/2022
  4729                                  		pop	di ; 13/12/2023 ; *
  4730                                  		; 13/12/2023 ; *
  4731                                  		pop	dx ; *+
  4732                                  		;pop	cx ; *+
  4733                                  		;pop	di
  4734                                  		; 21/12/2022
  4735                                  		;pop	ds
  4736                                  
  4737                                  		; 14/12/2023
  4738                                  		; 13/12/2023 - Retro DOS v4.0 & v4.1 IO.SYS - BugFix ; +*+
  4739                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1AAAh)
  4740                                  
  4741                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS - BugFix ; +*+
  4742                                  		; (MSDOS 5.0 & MSDOS 6.22 IO.SYS both have a bug here,
  4743                                  		;  they does not save CX,DX registers before INT 13h func 15h)
  4744                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4745                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4746                                  		;  -- ref: Ralf Brown's Interrupt List --
  4747                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4748                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4749                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4750                                  
  4751                                  		; 13/12/2023
  4752                                  		;push	cx ; *+ ; save flags (cx=0)
  4753                                  		;push	dx ; *+ ; save drive number (DL)
  4754                                  		; bl = dl = drive number ; *++
  4755                                  
  4756                                  ; Check	for presence of	changeline
  4757                                  
  4758                                  		mov	ah, 15h
  4759                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4760                                  					; DL = drive ID
  4761                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4762                                  					; CX:DX	= number of sectors on the media
  4763                                  		; 13/12/2023
  4764                                  		;pop	dx ; *+ ; restore drive number (in DL)
  4765                                  		;pop	cx ; *+ ; restore flags (cx=0)
  4766                                  		mov	cx, 0 ; 13/12/2023
  4767                                  		mov	dx, bx ; *++ ; bl = drive number
  4768                                  		jc	short changeline_done
  4769                                  
  4770                                  		cmp	ah, 2		; check	for presence of	changeline
  4771                                  		jnz	short changeline_done
  4772                                  
  4773                                  ; we have a drive with change line support.
  4774                                  
  4775                                  		or	cl, 2		; fchangeline
  4776                                  					; signal type
  4777                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4778                                  %endif
  4779                                  		; 14/12/2023
  4780 00001A16 E83800                  		call	chk_changeline
  4781                                  		;jc	short changeline_done
  4782                                  
  4783                                  ; we now try to set up the form factor for the types of media that we know
  4784                                  ; and can recognise. for the rest, we set the form factor as "other".
  4785                                  
  4786                                  changeline_done:			
  4787 00001A19 803E[C816]28            		cmp	byte [num_cyln], 40
  4788 00001A1E 750B                    		jnz	short try_80
  4789 00001A20 803E[C716]09            		cmp	byte [sec_trk], 9
  4790 00001A25 765F                    		jbe	short nextdrive
  4791                                  gotother:				
  4792 00001A27 B607                    		mov	dh, 7		; ffOther
  4793                                  					; we have a "strange" medium
  4794 00001A29 EB5B                    		jmp	short nextdrive
  4795                                  ;-----------------------------------------------------------------------------
  4796                                  
  4797                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4798                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4799                                  
  4800                                  try_80:					
  4801 00001A2B 803E[C816]50            		cmp	byte [num_cyln], 80
  4802 00001A30 75F5                    		jnz	short gotother
  4803 00001A32 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4804 00001A34 803E[C716]24            		cmp	byte [sec_trk], 36 ; is it	?
  4805 00001A39 744B                    		jz	short nextdrive	; yeah,	go update
  4806                                  
  4807                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4808                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4809                                  		;mov	dh, ff144
  4810                                  		;cmp	byte [sec_trk], 18
  4811                                  		;je	short nextdrive
  4812                                  
  4813 00001A3B 803E[C716]0F            		cmp	byte [sec_trk], 15
  4814 00001A40 740B                    		jz	short got96
  4815                                  		
  4816 00001A42 803E[C716]09            		cmp	byte [sec_trk], 9
  4817 00001A47 75DE                    		jnz	short gotother
  4818                                  		
  4819 00001A49 B602                    		mov	dh, 2 ; ffSmall
  4820 00001A4B EB39                    		jmp	short nextdrive
  4821                                  ; ----------------------------------------------------------------------------
  4822                                  
  4823                                  got96:					
  4824 00001A4D B601                    		mov	dh, 1 ; ff96tpi
  4825 00001A4F EB35                    		jmp	short nextdrive
  4826                                  
  4827                                  ; ----------------------------------------------------------------------------
  4828                                  		
  4829                                  		; 14/12/2023
  4830                                  		; 13/12/2023 - Retro DOS v4.1 IO.SYS
  4831                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS
  4832                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4833                                  		; check change line feature (and set fhave96 if there is)
  4834                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  4835                                  chk_changeline:
  4836 00001A51 59                      		pop	cx ; near call return address
  4837                                  
  4838 00001A52 07                      		pop	es ; es=cs=ds ; 21/12/2022
  4839 00001A53 5F                      		pop	di ; 12/12/2023 ; *
  4840                                  		; 12/12/2023 ; *
  4841 00001A54 5A                      		pop	dx ; *+
  4842                                  
  4843 00001A55 51                      		push	cx ; near call return address
  4844                                  
  4845                                  ; Check	for presence of	changeline
  4846                                  
  4847                                  		; 12/12/2023 - BugFix ; * ; +*+
  4848                                  		; (MSDOS 6.22 IO.SYS has a bug here,
  4849                                  		;  it does not save CX,DX registers before INT 13h func 15h)
  4850                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4851                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4852                                  		;  -- ref: Ralf Brown's Interrupt List --
  4853                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4854                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4855                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4856                                  
  4857                                  		; 12/12/2023
  4858                                  		;push	dx ; *+ ; save drive number (DL) - Retro DOS v4.2
  4859                                  		; bl = dl = drive number ; *++
  4860                                  
  4861 00001A56 B415                    		mov	ah, 15h
  4862 00001A58 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4863                                  					; DL = drive ID
  4864                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4865                                  					; CX:DX	= number of sectors on the media
  4866                                  		; 12/12/2023
  4867                                  		;pop	dx ; *+ ; restore drive number (in DL)
  4868 00001A5A B90000                  		mov	cx, 0  ; flags
  4869 00001A5D 89DA                    		mov	dx, bx ; *++ ; bl = drive number
  4870 00001A5F 720D                    		jc	short chk_chgl_1
  4871                                  
  4872 00001A61 80FC02                  		cmp	ah, 2		; is there changeline?
  4873 00001A64 7508                    		jne	short chk_chgl_2 ; *
  4874                                  
  4875 00001A66 80C902                  		or	cl, 2
  4876                                  		;or	cl, ah ; 2
  4877 00001A69 C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  4878                                  		; cf = 0
  4879                                  chk_chgl_1:
  4880                                  chk_chgl_2:
  4881 00001A6E C3                      		retn
  4882                                  
  4883                                  ;chk_chgl_2:	; *
  4884                                  ;		; 10/12/2023
  4885                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  4886                                  ;		;stc
  4887                                  ;		; cf = 1
  4888                                  ;		retn
  4889                                  
  4890                                  ; ----------------------------------------------------------------------------
  4891                                  
  4892                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4893                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4894                                  
  4895                                  noparmsfromrom:
  4896                                  
  4897                                  ; 14/12/2023				
  4898                                  ; 13/12/2023 ('chk_changeline' procedure)
  4899                                  %if 0				
  4900                                  		pop	es ; es=cs=ds ; 21/12/2022
  4901                                  		; 13/12/2023
  4902                                  		; bl = drive number ; *++
  4903                                  		; 13/12/2023 ; *
  4904                                  		pop	di ; *
  4905                                  		pop	dx ; *+
  4906                                  		;pop	cx ; *+ ; cx = 0 ; 13/12/2023
  4907                                  		; 13/12/2023
  4908                                  		;pop	di
  4909                                  		; 21/12/2022
  4910                                  		;pop	ds
  4911                                  
  4912                                  		mov	ah, 15h
  4913                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4914                                  					; DL = drive ID
  4915                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4916                                  					; CX:DX	= number of sectors on the media
  4917                                  		; 13/12/2023 - BugFix ; +*+
  4918                                  		; (MSDOS 5.0 & 6.22 IO.SYS bug) ; +*+
  4919                                  		; (some ROMBIOSs fix this BUG but return with false)
  4920                                  		; -- ref: Ralf Brown's Interrupt List --
  4921                                  		;pop	cx ; *+
  4922                                  		mov	cx, 0 ; 13/12/2023
  4923                                  		mov	dx, bx ; *++
  4924                                  		jc	short nextdrive
  4925                                  
  4926                                  		cmp	ah, 2		; is there changeline?
  4927                                  		jnz	short nextdrive
  4928                                  
  4929                                  		or	cl, 2
  4930                                  		mov	byte [fhave96], 1 ; fchangeline
  4931                                  %endif
  4932                                  		; 14/12/2023
  4933 00001A6F E8DFFF                  		call	chk_changeline
  4934 00001A72 7212                    		jc	short nextdrive
  4935                                  		
  4936                                  		; change line support, [fhave96] = 1
  4937                                  
  4938 00001A74 C606[C816]50            		mov	byte [num_cyln], 80
  4939 00001A79 B601                    		mov	dh, 1
  4940 00001A7B B00F                    		mov	al, 15
  4941 00001A7D 3A06[2C01]              		cmp	al, [eot]
  4942 00001A81 7603                    		jbe	short nextdrive
  4943 00001A83 A2[2C01]                		mov	[eot], al
  4944                                  ; ----------------------------------------------------------------------------
  4945                                  
  4946                                  ;eot_ok2:
  4947                                  nextdrive:				
  4948 00001A86 80C920                  		or	cl, 20h	; fi_own_physical
  4949                                  					; set this true	for all	drives
  4950 00001A89 88D7                    		mov	bh, dl		; save int13 drive number
  4951                                  
  4952                                  ; we need to do special things if we have a single drive system and are setting
  4953                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4954                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4955                                  ; we detect the presence of this situation by examining the flag single for the
  4956                                  ; value 2.
  4957 00001A8B 803E[7800]02            		cmp	byte [single], 2
  4958 00001A90 7505                    		jnz	short not_special
  4959 00001A92 FECF                    		dec	bh		; int13	drive number same for logical drive
  4960 00001A94 80F120                  		xor	cl, 20h	; fi_own_physical
  4961                                  					; reset	ownership flag for logical drive
  4962                                  not_special:
  4963                                  
  4964                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4965                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4966                                  ; form factor is of type "ffother".
  4967                                  				
  4968 00001A97 31C0                    		xor	ax, ax		; fill BDS for drive
  4969 00001A99 A0[C616]                		mov	al, [num_heads]
  4970 00001A9C 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4971 00001A9F A0[C716]                		mov	al, [sec_trk]
  4972 00001AA2 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4973 00001AA5 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4974 00001AA8 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4975 00001AAB 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4976 00001AAE 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4977 00001AB1 8A1E[C816]              		mov	bl, [num_cyln]
  4978 00001AB5 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4979 00001AB8 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4980 00001ABD 7510                    		jnz	short no_single
  4981                                  		; 14/12/2023
  4982 00001ABF FE06[7800]              		inc	byte [single]	; [single] = 2
  4983                                  		;mov	byte [single], 2 ; Don't forget we have
  4984                                  					; single drive system
  4985                                  		; 18/12/2022
  4986 00001AC3 80C910                  		or	cl, 10h
  4987                                  		;or	cx, 10h	; fi_am_mult
  4988                                  					; set that this	is one of several drives
  4989 00001AC6 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4990                                  					; save flags
  4991 00001AC9 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4992                                  					; move to next BDS in list
  4993 00001ACB FEC2                    		inc	dl		; add a	number
  4994 00001ACD EBB7                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4995                                  ; ----------------------------------------------------------------------------
  4996                                  
  4997                                  no_single:				
  4998                                  		;inc	dl
  4999                                  		; 18/12/2022
  5000 00001ACF 42                      		inc	dx
  5001 00001AD0 E9FCFE                  		jmp	loop_drive
  5002                                  ; ----------------------------------------------------------------------------
  5003                                  
  5004                                  done_drives:	
  5005                                  		;mov	word [di+BDS.link], -1			
  5006 00001AD3 C705FFFF                		mov	word [di], -1	; set link to null
  5007                                  
  5008                                  ; set up all the hard drives in	the system
  5009                                  
  5010                                  		; 20/12/2022
  5011                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  5012                                  dohard:					
  5013 00001AD7 8A36[3917]              		mov	dh, [hnum]
  5014 00001ADB 08F6                    		or	dh, dh		; done if no hardfiles
  5015 00001ADD 7459                    		jz	short static_configure
  5016 00001ADF B280                    		mov	dl, 80h
  5017                                  dohard1:				
  5018 00001AE1 52                      		push	dx
  5019 00001AE2 8B3E[3C17]              		mov	di, [end_of_bdss]
  5020 00001AE6 8A1E[7500]              		mov	bl, [drvmax]
  5021 00001AEA B700                    		mov	bh, 0		; first	primary	partition (or active)
  5022 00001AEC E8CA01                  		call	sethard
  5023 00001AEF 7208                    		jb	short hardfile_err
  5024 00001AF1 E8A906                  		call	dmax_check	; error	if already 26 drives
  5025 00001AF4 7303                    		jnb	short hardfile_err
  5026 00001AF6 E8B906                  		call	xinstall_bds	; insert new bds into linked list
  5027                                  hardfile_err:
  5028 00001AF9 5A                      		pop	dx
  5029                                  		;inc	dl		; next hard drive
  5030                                  		; 14/12/2023
  5031 00001AFA 42                      		inc	dx
  5032 00001AFB FECE                    		dec	dh
  5033 00001AFD 75E2                    		jnz	short dohard1
  5034                                  
  5035                                  ; end of physical drive	initialization
  5036                                  
  5037                                  ; *** do not change the position of the following statement.
  5038                                  ; *** domini routine will use [drvmax] value for the start of the logical
  5039                                  ; *** drive number of mini disk(s).
  5040                                  					
  5041 00001AFF E8AF05                  		call	domini		; for setting up mini disks, if found
  5042                                  
  5043                                  ; -- begin added section
  5044                                  
  5045 00001B02 8A36[3917]              		mov	dh, [hnum]	; we already know this is >0
  5046 00001B06 B280                    		mov	dl, 80h
  5047                                  dohardx1:				
  5048 00001B08 B701                    		mov	bh, 1		; do all subsequent primary partitions
  5049                                  dohardx2:				
  5050 00001B0A 52                      		push	dx
  5051 00001B0B 53                      		push	bx
  5052 00001B0C 8B3E[3C17]              		mov	di, [end_of_bdss]
  5053 00001B10 8A1E[7500]              		mov	bl, [drvmax]
  5054 00001B14 E8A201                  		call	sethard
  5055 00001B17 720E                    		jb	short dohardx4	; move to next hardfile	if error
  5056 00001B19 E88106                  		call	dmax_check	; make sure <=26 drives
  5057 00001B1C 7309                    		jnb	short dohardx4	; skip if error
  5058 00001B1E E89106                  		call	xinstall_bds	; insert new bds into linked list
  5059 00001B21 5B                      		pop	bx		; get partition	number
  5060 00001B22 5A                      		pop	dx		; restore physical drive counts
  5061 00001B23 FEC7                    		inc	bh
  5062 00001B25 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  5063                                  ; ----------------------------------------------------------------------------
  5064                                  
  5065                                  dohardx4:
  5066 00001B27 5B                      		pop	bx		; unjunk partition number from stack
  5067 00001B28 5A                      		pop	dx		; restore physical drive counts
  5068                                  		;inc	dl		; next hard drive
  5069                                  		; 14/12/2023
  5070 00001B29 42                      		inc	dx
  5071 00001B2A FECE                    		dec	dh
  5072 00001B2C 75DA                    		jnz	short dohardx1
  5073                                  
  5074                                  ; -- end changed section
  5075                                  
  5076                                  ;******************************************************************************
  5077                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  5078                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  5079                                  ; than two diskette drives
  5080                                  ;
  5081                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  5082                                  ;		as usual and then rescan the bds chain to adjust the  drive
  5083                                  ;		letters. to do this, scan for disk drives and assign logical
  5084                                  ;		drive number starting from 2 and then rescan diskette drives
  5085                                  ;		and assign next to the last logical drive number of last disk
  5086                                  ;		drive to the 3rd and 4th diskette drives.
  5087                                  ;******************************************************************************
  5088                                  
  5089 00001B2E 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  5090                                  		;jbe	short static_configure ; no - no need for remapping
  5091 00001B33 7603                    		jbe	short no_remap
  5092 00001B35 E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  5093                                  no_remap:
  5094                                  
  5095                                  ; End of drive initialization.
  5096                                  
  5097                                  ; ----------------------------------------------------------------------------
  5098                                  
  5099                                  ;we now decide, based on the configurations available so far, what
  5100                                  ;code or data we need to keep as a stay resident code. the following table
  5101                                  ;shows the configurations under consideration. they are listed in the order
  5102                                  ;of their current position memory.
  5103                                  ;
  5104                                  ;configuration will be done in two ways:
  5105                                  ;
  5106                                  ;first, we are going to set "static configuration". static configuration will
  5107                                  ;consider from basic configuration to endof96tpi configuration. the result
  5108                                  ;of static configuration will be the address the dynamic configuration will
  5109                                  ;use to start with.
  5110                                  ;
  5111                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  5112                                  ;involves possible relocation of code or data. dynamic configuration routine
  5113                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  5114                                  ;code individually. after these operation, [dosdatasg] will be set.
  5115                                  ;this will be the place sysinit routine will relocate msdos module for good.
  5116                                  
  5117                                  ; -- begin changed section
  5118                                  ;
  5119                                  ;   1.	 basic configuration for msbio (endfloppy)
  5120                                  ;   2.   end96tpi	; a system that supports "change line error"
  5121                                  ;   3.	 end of bdss	; end of bdss for hard disks
  5122                                  ;   4.	 endatrom	;some of at rom fix module.
  5123                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  5124                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  5125                                  ;
  5126                                  
  5127                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  5128                                  
  5129                                  static_configure:			
  5130 00001B38 8B3E[3C17]              		mov	di, [end_of_bdss]
  5131 00001B3C 81FF[0D09]              		cmp	di, bdss	; 19/10/2022
  5132                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  5133 00001B40 750D                    		jnz	short dynamic_configure	; that's the end, then
  5134                                  		; 18/10/2022
  5135 00001B42 BF[0D09]                		mov	di, end96tpi
  5136                                  		;mov	di, offset harddrv ; end96tpi
  5137                                  					; keep everything up to	end96tpi
  5138 00001B45 803E[7700]00            		cmp	byte [fhave96], 0
  5139 00001B4A 7503                    		jnz	short dynamic_configure
  5140                                  		
  5141 00001B4C BF[F208]                		mov	di, endfloppy
  5142                                  dynamic_configure:
  5143                                  		; 20/12/2022
  5144                                  		;push	cs
  5145                                  		;pop	es
  5146                                  		
  5147                                  		; 14/12/2023
  5148                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2268h)
  5149                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C34h)
  5150                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1BEEh)
  5151 00001B4F FC                      		cld	; clear direction flag is not necessary here !?
  5152                                  			; because there will not be a running program
  5153                                  			; which will set direction flag as backward (std)
  5154                                  
  5155                                  ; -- end changed section
  5156                                  
  5157                                  		; 20/12/2022
  5158                                  		; ds = cs <> es
  5159                                  		; ss = 0
  5160                                  		; sp = 700h
  5161                                  
  5162                                  		; 14/12/2023
  5163 00001B50 BE00F0                  		mov	si, 0F000h
  5164 00001B53 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  5165                                  
  5166 00001B55 803E[3506]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  5167                                  		;jnz	short checkcmosclock
  5168                                  		; 14/12/2023
  5169 00001B5A 751E                    		jnz	short checkcompaqbug ; no
  5170 00001B5C 803E[3917]00            		cmp	byte [hnum], 0	; No hard file?
  5171                                  		;jz	short checkcmosclock
  5172 00001B61 7417                    		jz	short checkcompaqbug
  5173 00001B63 97                      		xchg	ax, di		; save allocation pointer in ax
  5174                                  		; 14/12/2023
  5175                                  		;mov	si, 0F000h
  5176                                  		;mov	es, si		; ES ->	ROM BIOS segment
  5177 00001B64 BE[4217]                		mov	si, bios_date	; "01/10/84"
  5178 00001B67 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  5179 00001B6A B90900                  		mov	cx, 9		; bdate_l
  5180                                  					; Only patch ROM for bios 01/10/84
  5181 00001B6D F3A6                    		repe cmpsb		; check	for date + zero	on end
  5182 00001B6F 97                      		xchg	ax, di		; restore allocation pointer
  5183                                  
  5184                                  ; M015 -- begin changes
  5185                                  
  5186                                  		;jnz	short checkcmosclock
  5187                                  		; 02/10/2022
  5188 00001B70 7508                    		jnz	short checkcompaqbug
  5189                                  
  5190                                  ; install at rom fix
  5191                                  
  5192                                  		; 19/10/2022
  5193                                  		;mov	cx, offset endatrom
  5194 00001B72 B9[0014]                		mov	cx, endatrom
  5195                                  		;mov	si, offset ibm_disk_io
  5196 00001B75 BE[D212]                		mov	si, ibm_disk_io
  5197 00001B78 EB46                    		jmp	short install_int13_patch
  5198                                  ; ----------------------------------------------------------------------------
  5199                                  
  5200                                  ; M065 -- begin changes
  5201                                  ;
  5202                                  ; On certain systems with Western Digital disk controllers, the
  5203                                  ; following detection scheme caused an unpredictable and serious
  5204                                  ; failure. In particular, they've implemented a nonstandard
  5205                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5206                                  ; what happens to be at es:[bx] and other memory locations indexed
  5207                                  ; off of it.
  5208                                  ;
  5209                                  ; Compaq was unable to tell us exactly which kind of systems have
  5210                                  ; the bug, except that they guarantee that the bug was fixed in
  5211                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5212                                  ; string, and then look for date codes before 08/04/86 to decide
  5213                                  ; when to install the hook.
  5214                                  
  5215                                  ;checkcmosclock:
  5216                                  ; 02/10/2022				
  5217                                  checkcompaqbug:
  5218                                  		; 20/12/2022
  5219                                  		; es = 0F000h
  5220                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5221                                  		;mov	es, ax
  5222                                  
  5223                                  		; 19/10/2022
  5224 00001B7A 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5225                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5226 00001B81 754B                    		jnz	short not_compaq_patch
  5227 00001B83 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5228                                  		;cmp	word ptr es:0FFECh, 'PM'
  5229 00001B8A 7542                    		jnz	short not_compaq_patch
  5230 00001B8C 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5231                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5232 00001B93 7539                    		jnz	short not_compaq_patch
  5233                                  
  5234                                  ; We're running on a COMPAQ. Now look at the date code.
  5235                                  
  5236 00001B95 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5237 00001B99 86E0                    		xchg	ah, al
  5238 00001B9B 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5239                                  		;cmp	ax, '86'        ; 3836h
  5240                                  					; is it	86?
  5241 00001B9E 772E                    		ja	short not_compaq_patch
  5242 00001BA0 7218                    		jb	short do_compaq_patch
  5243 00001BA2 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5244 00001BA6 86E0                    		xchg	ah, al
  5245 00001BA8 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5246                                  		;cmp	ax, '08'        ; 3038h
  5247                                  					; is it	08?
  5248 00001BAB 7721                    		ja	short not_compaq_patch
  5249 00001BAD 720B                    		jb	short do_compaq_patch
  5250 00001BAF 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5251 00001BB3 86E0                    		xchg	ah, al
  5252 00001BB5 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5253                                  		;cmp	ax, '04'        ; 3034h
  5254                                  					; is it	04?
  5255 00001BB8 7314                    		jnb	short not_compaq_patch
  5256                                  
  5257                                  do_compaq_patch:			
  5258 00001BBA B9[2114]                		mov	cx, end_compaq_i13hook
  5259                                  		;mov	si, endatrom
  5260                                  		; 14/12/2023
  5261 00001BBD BE[0014]                		mov	si, compaq_disk_io ; endatrom
  5262                                  
  5263                                  install_int13_patch:			
  5264 00001BC0 0E                      		push	cs
  5265 00001BC1 07                      		pop	es
  5266                                  		; 18/10/2022
  5267 00001BC2 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5268 00001BC6 8C0E[B600]              		mov	[Orig13+2], cs
  5269 00001BCA 29F1                    		sub	cx, si		; size of rom fix module
  5270 00001BCC F3A4                    		rep movsb		; relocate it
  5271                                  
  5272                                  ; M065 -- end changes
  5273                                  
  5274                                  ; ----------------------------------------------------------------------------
  5275                                  not_compaq_patch:			; M065
  5276                                  		; 17/10/2022
  5277                                  checkcmosclock:	
  5278                                  		; 18/10/2022		
  5279 00001BCE 0E                      		push	cs
  5280 00001BCF 07                      		pop	es
  5281                                  
  5282                                  		; 20/12/2022
  5283                                  		; ds = cs = es
  5284                                  		; ss = 0
  5285                                  		; sp = 700h
  5286                                  
  5287 00001BD0 803E[EC04]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5288 00001BD5 7518                    		jnz	short checkk09	; no
  5289                                  
  5290 00001BD7 893E[FF04]              		mov	word [daycnttoday], di
  5291                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5292 00001BDB B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5293 00001BDE BE[2214]                		mov	si, daycnt_to_day
  5294 00001BE1 F3A4                    		rep movsb
  5295 00001BE3 893E[FB04]              		mov	word [bintobcd], di
  5296                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5297                                  					; let original segment stay
  5298 00001BE7 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5299 00001BEA BE[F314]                		mov	si, bin_to_bcd
  5300 00001BED F3A4                    		rep movsb
  5301                                  checkk09:				
  5302 00001BEF 57                      		push	di ; ? ; save ? ; 20/12/2022
  5303 00001BF0 B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5304 00001BF3 B301                    		mov	bl, 1		; wait for 1 clock tick
  5305 00001BF5 268A3D                  		mov	bh, [es:di]
  5306 00001BF8 F9                      		stc			; Assume we will fail
  5307 00001BF9 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5308                                  					; AL = condition type, BH = condition compare or mask value
  5309                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5310                                  					; DX = I/O port	address	if AL bit 4 set
  5311                                  					; 14/12/2023
  5312                                  					; ES:DI = user byte if AL bit 4 clear
  5313 00001BFB 5F                      		pop	di ; ?
  5314 00001BFC 721B                    		jc	short configdone ; 20/12/2022
  5315                                  
  5316 00001BFE C606[7900]01            		mov	byte [fhavek09], 1
  5317                                  					; remember we have a k09 type
  5318 00001C03 1E                      		push	ds
  5319 00001C04 31C0                    		xor	ax, ax
  5320 00001C06 8ED8                    		mov	ds, ax
  5321                                  		
  5322 00001C08 893EB001                		mov	[6Ch*4], di
  5323                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5324                                  					; new int 6ch handler
  5325                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5326 00001C0C 8C0EB201                		mov	word [6Ch*4+2], cs
  5327 00001C10 1F                      		pop	ds
  5328                                  		; 20/12/2022
  5329                                  		; ds = cs = es
  5330 00001C11 BE[FE14]                		mov	si, int6c
  5331 00001C14 B9C201                  		mov	cx, endk09-int6c ; 459
  5332                                  		;mov	cx, 459		; endk09 - int6c
  5333                                  					; size of k09 routine
  5334 00001C17 F3A4                    		rep movsb		;
  5335                                  					; set up config	stuff for sysinit
  5336                                  ; ----------------------------------------------------------------------------
  5337                                  ; Set up config stuff for SYSINIT
  5338                                  
  5339                                  ; 17/10/2022
  5340                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5341                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5342                                  ; 09/12/2022
  5343                                  SETDRIVE equ SetDrive
  5344                                  GETBP equ GetBp
  5345                                  		
  5346                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5347                                  configdone:
  5348                                  		; 14/12/2023
  5349                                  		; ds = cs
  5350                                  		;push	cs		; di is	final ending address of	msbio.
  5351                                  		;pop	ds
  5352                                  		
  5353 00001C19 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5354                                  		; 10/12/2022
  5355                                  		;shr	di, 1
  5356                                  		;shr	di, 1
  5357                                  		;shr	di, 1
  5358                                  		;shr	di, 1
  5359 00001C1C B104                    		mov	cl, 4
  5360 00001C1E D3EF                    		shr	di, cl		
  5361                                  		; 10/12/2022
  5362                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5363                                  		; 19/10/2022 - Temporary !
  5364                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5365                                  		; 14/08/2023
  5366 00001C20 83C770                  		add	di, 70h
  5367 00001C23 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5368                                  
  5369                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5370                                  
  5371                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5372                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5373                                  	     
  5374                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5375                                  
  5376                                  ; 14/12/2023
  5377                                  ; ----------------------------------------------------------------------------
  5378                                  ; ----------------------------------------------------------------------------
  5379                                  %if 0
  5380                                  		mov	ax, [drvfat]	; get drive and	fat id
  5381                                  		; 22/12/2022
  5382                                  		; Note: SETDRIVES uses AL (drive number) only
  5383                                  		mov	bp, SETDRIVE
  5384                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5385                                  					; at 2C7h:4D7h = 70h:2A47h
  5386                                  		push	cs		; simulate far call
  5387                                  		call	call_bios_code	; get bds for drive
  5388                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5389                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5390                                  		push	cs
  5391                                  		call	call_bios_code
  5392                                  
  5393                                  	; resort to funky old segment definitions for now
  5394                                  
  5395                                  		; 22/12/2022
  5396                                  		;push	es		; copy bds to ds:di
  5397                                  		;pop	ds
  5398                                  
  5399                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5400                                  	;
  5401                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5402                                  	;	  back. Apparently it was what actually setup es: for the following
  5403                                  	; cas----
  5404                                  
  5405                                  		; 22/12/2022
  5406                                  		;xor	di, di
  5407                                  		;mov	al, [es:di]	; get fat id byte
  5408                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5409                                  		;mov	[es:drvfat+1], al
  5410                                  		;mov	ax, [es:drvfat]
  5411                                  		
  5412                                  		; 22/12/2022
  5413                                  		; ds = cs
  5414                                  	;;;	mov	al, [drvfat]
  5415                                  
  5416                                  	; cas -- why do a SECOND setdrive here???
  5417                                  
  5418                                  		; 22/12/2022
  5419                                  		;push	es		; save whatever's in es
  5420                                  		;push	ds		; copy bds to es:di
  5421                                  		;pop	es
  5422                                  		;push	cs		; copy Bios_Data to ds
  5423                                  		;pop	ds
  5424                                  	
  5425                                  	; 22/12/2022
  5426                                  	;;;	mov	bp, SETDRIVE
  5427                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5428                                  	;;;	push	cs		; simulate far call
  5429                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5430                                  	
  5431                                  		; 22/12/2022
  5432                                  		;push	es		; copy bds back to ds:di
  5433                                  		;pop	ds
  5434                                  		;pop	es		; pop whatever was in es
  5435                                  
  5436                                  	; Now we load in the MSDOS.SYS file
  5437                                  
  5438                                  	; 22/12/2022
  5439                                  	; -----
  5440                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5441                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5442                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5443                                  	;				; get size of fat on media
  5444                                  	;	;mov	es:16DEh, bl
  5445                                  	;	mov	[es:fbigfat], bl
  5446                                  	;	mov	cl, [di+8]
  5447                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5448                                  	;	;sub	es:16D8h, ax
  5449                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5450                                  	;				; need a logical sector number that will
  5451                                  	;				; be used by getclus(diskrd procedure)
  5452                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5453                                  	;	;sbb	es:16DAh, ax
  5454                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5455                                  	; -----
  5456                                  		
  5457                                  	; -----	; 22/12/2022
  5458                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5459                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5460                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5461                                  					; get size of fat on media
  5462                                  		mov	[fbigfat], bl
  5463                                  		mov	cl, [es:di+8]
  5464                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5465                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5466                                  					; need a logical sector number that will
  5467                                  					; be used by getclus(diskrd procedure)
  5468                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5469                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5470                                  	; ------
  5471                                  
  5472                                  		xor	ch, ch	 ; cx = sectors/cluster
  5473                                  
  5474                                  	; the boot program has left the directory at 0:500h
  5475                                  
  5476                                  		push	ds
  5477                                  		xor	di, di
  5478                                  		mov	ds, di
  5479                                  		mov	bx, [53Ah]
  5480                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5481                                  					; (First cluster field of 2nd dir entry
  5482                                  					; of root directory in the buffer at 500h)
  5483                                  		pop	ds
  5484                                  loadit:
  5485                                  		mov	ax, SYSINITSEG	; 46Dh
  5486                                  		;mov	ax, 46Dh	; sysinit segment
  5487                                  		mov	es, ax
  5488                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5489                                  		;mov	es, [es:271h]
  5490                                  
  5491                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5492                                  ; ----------------------------------------------------------------------------
  5493                                  ;iseof:
  5494                                  		;;test	byte [cs:fbigfat], fbig
  5495                                  		;test	byte [cs:fbigfat], 40h ; fbig
  5496                                  		; 12/12/2023
  5497                                  		; ds = cs
  5498                                  		test	byte [fbigfat], 40h ; fbig
  5499                                  		jnz	short eofbig
  5500                                  		cmp	bx, 0FF7h
  5501                                  		jmp	short iseofx
  5502                                  ; ----------------------------------------------------------------------------
  5503                                  
  5504                                  eofbig:
  5505                                  		cmp	bx, 0FFF7h
  5506                                  iseofx:
  5507                                  		jb	short loadit	; keep loading until cluster = eof
  5508                                  %endif
  5509                                  ; ----------------------------------------------------------------------------
  5510                                  ; ----------------------------------------------------------------------------
  5511                                  
  5512 00001C27 E8BD03                  		call	setdrvparms	; 
  5513                                  
  5514                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5515                                  		;jmp	far 46Dh:267h
  5516 00001C2A EA[6702]3304            		jmp	SYSINITSEG:SYSINITSTART
  5517                                  
  5518                                  ; =============== S U B	R O U T	I N E ========================================
  5519                                  
  5520                                  ; Following are subroutines to support resident device driver initialization
  5521                                  ;
  5522                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5523                                  
  5524                                  ;	M035 -- begin changed section
  5525                                  
  5526                                  ;******************************************************************************
  5527                                  ; module name: remap
  5528                                  ;
  5529                                  ; descriptive name: all the code for himem that could be separated from msbio
  5530                                  ;
  5531                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5532                                  ;	     letters) if more than two diskette drives on the system.
  5533                                  ;
  5534                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5535                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5536                                  ;	       letters. to do this, scan for disk drives and assign logical
  5537                                  ;	       drive number starting from 2 and then rescan diskette drives
  5538                                  ;	       and assign next to the last logical drive number of last disk
  5539                                  ;	       drive to the 3rd and 4th diskette drives.
  5540                                  
  5541                                  ; input:       none
  5542                                  ; exit:	drive letters have been remapped in bds chain
  5543                                  ; exit error:  none
  5544                                  ; called from: msinit
  5545                                  ;
  5546                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5547                                  ;	  found in the system
  5548                                  ;	  this function assumes that there are no more than 26 drives assigned
  5549                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5550                                  ;	  this function assumes that the first entries in the chain are
  5551                                  ;	   floppy drives, and all the rest are hard drives
  5552                                  ;	  will alter the boot drive if necessary to reflect remapping
  5553                                  ;
  5554                                  ;******************************************************************************
  5555                                  
  5556                                  ; 17/10/2022
  5557                                  ; 02/10/2022
  5558                                  
  5559                                  remap:		; proc near
  5560                                  
  5561                                  		; 15/12/2023
  5562                                  		; ds = cs
  5563                                  		;mov	di, [cs:start_bds] ; get first bds
  5564 00001C2F 8B3E[1901]              		mov	di, [start_bds]
  5565                                  
  5566                                  ; search for 1st fixed disk physical drive num
  5567                                  
  5568                                  drive_loop:
  5569 00001C33 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5570                                  					; first	hard disk??
  5571 00001C37 7409                    		jz	short fdrv_found ; yes,	continue
  5572 00001C39 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5573                                  					; get next bds,	assume segment
  5574 00001C3B 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  5575 00001C3E 75F3                    		jnz	short drive_loop ; loop	if not
  5576 00001C40 EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5577                                  
  5578                                  ;------------------------------------------------------------------------------
  5579                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5580                                  ;logical drive nums to 3, 4, 5 etc.
  5581                                  ;------------------------------------------------------------------------------
  5582                                  
  5583                                  fdrv_found:
  5584 00001C42 B002                    		mov	al, 2		; start	with logical drv num=2
  5585                                  fdrv_loop:
  5586 00001C44 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5587 00001C47 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5588                                  					; ds:di--> next	bds
  5589                                  		;inc	al		; set num for next drive
  5590                                  		; 18/12/2022
  5591 00001C49 40                      		inc	ax
  5592 00001C4A 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  5593 00001C4D 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  5594                                  
  5595                                  ;------------------------------------------------------------------------------
  5596                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5597                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5598                                  ; any more.
  5599                                  ;------------------------------------------------------------------------------
  5600                                  
  5601                                  		;mov	di, [cs:start_bds] ; [start_bds]
  5602                                  		; 15/12/2023
  5603 00001C4F 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  5604 00001C53 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5605                                  					; ds:di-->bds2
  5606                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5607 00001C55 8A26[2501]              		mov	ah, [dsktnum]
  5608 00001C59 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5609                                  remap_loop1:
  5610 00001C5C 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5611                                  					; set new num to next floppy
  5612 00001C5E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5613 00001C61 FEC0                    		inc	al		; new number for next floppy
  5614 00001C63 FECC                    		dec	ah		; count down extra floppies
  5615 00001C65 75F5                    		jnz	short remap_loop1
  5616                                  
  5617                                  ; now we've got to adjust the boot drive if we reassigned it
  5618                                  
  5619                                  		; 15/12/2023
  5620                                  		;mov	al, [cs:drvfat]
  5621 00001C67 A0[C016]                		mov	al, [drvfat]
  5622 00001C6A 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5623 00001C6C 721D                    		jb	short rmap_exit
  5624                                  		;sub	al, [cs:dsktnum]
  5625 00001C6E 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  5626 00001C72 7204                    		jb	short remap_boot_flop ;	brif so
  5627                                  
  5628                                  ; we've got to remap the boot hard drive
  5629                                  ; subtract the number of EXTRA floppies from it
  5630                                  
  5631 00001C74 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5632 00001C76 EB04                    		jmp	short remap_change_boot_drv
  5633                                  ; ---------------------------------------------------------------------------
  5634                                  
  5635                                  ; we've got to remap the boot floppy.
  5636                                  ; add the number of hard drive partitions to it
  5637                                  
  5638                                  remap_boot_flop:
  5639                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5640                                  		; 15/12/2023
  5641 00001C78 0206[7500]              		add	al, [drvmax]
  5642                                  remap_change_boot_drv:			
  5643                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  5644 00001C7C A2[C016]                		mov	[drvfat], al
  5645 00001C7F FEC0                    		inc	al
  5646 00001C81 1E                      		push	ds
  5647 00001C82 BF3304                  		mov	di, SYSINITSEG	; 46Dh
  5648                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  5649                                  		;;mov	di, 46Dh	; SYSINIT segment
  5650 00001C85 8EDF                    		mov	ds, di
  5651 00001C87 A2[9602]                		mov	[DEFAULTDRIVE], al
  5652                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5653                                  					; pass it to sysinit as	well
  5654 00001C8A 1F                      		pop	ds ; ds = cs
  5655                                  rmap_exit:
  5656 00001C8B C3                      		retn
  5657                                  
  5658                                  ; =============== S U B	R O U T	I N E =======================================
  5659                                  
  5660                                  ; 17/10/2022
  5661                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5662                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5663                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5664                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5665                                  ;**************************************************
  5666                                  ; getboot - get the boot sector for a hard disk
  5667                                  ;
  5668                                  ; Reads the boot sector from a specified drive into
  5669                                  ; a buffer at the top of memory.
  5670                                  ;
  5671                                  ; dl = int13 drive number to read boot sector for
  5672                                  ;**************************************************
  5673                                  
  5674                                  ; 17/10/2022
  5675                                  bootbias equ 200h
  5676                                  
  5677                                  getboot:	; proc near
  5678                                  		
  5679                                  		; 15/12/2023
  5680                                  		; ds = cs
  5681                                  		
  5682                                  		; 08/04/2018
  5683                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5684                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5685                                  		; 02/10/2022 - Retro DOS v4.0
  5686                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5687                                  
  5688                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  5689                                  		; 15/12/2023
  5690 00001C8C A1[C316]                		mov	ax, [init_bootseg]
  5691 00001C8F 8EC0                    		mov	es, ax
  5692                                  
  5693                                  		; 17/10/2022
  5694 00001C91 BB0002                  		mov	bx, bootbias ; 200h
  5695                                  		;mov	bx, 200h	; bootbias
  5696                                  					; load BX, ES:BX is where sector goes
  5697 00001C94 B80102                  		mov	ax, 201h
  5698 00001C97 30F6                    		xor	dh, dh
  5699 00001C99 B90100                  		mov	cx, 1
  5700 00001C9C CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5701                                  					; AL = number of sectors to read, CH = track, CL = sector
  5702                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5703                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5704 00001C9E 7209                    		jb	short erret
  5705                                  		; 17/10/2022
  5706 00001CA0 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5707                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5708                                  					; Dave Litton magic word?
  5709 00001CA7 7401                    		jz	short norm_ret	; yes
  5710                                  erret:
  5711 00001CA9 F9                      		stc
  5712                                  norm_ret:
  5713 00001CAA C3                      		retn
  5714                                  
  5715                                  ; ---------------------------------------------------------------------------
  5716                                  		
  5717                                  		; 16/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0)
  5718                                  
  5719                                  chk_partition_type:
  5720                                  		; 16/12/2023
  5721 00001CAB 268A07                  		mov	al, [es:bx]	; partition type
  5722                                  
  5723                                  		; see if partitiontype == 1, 4, 6
  5724 00001CAE 3C01                    		cmp	al, 1		; FAT12
  5725 00001CB0 7406                    		je	short chk_ptype_retn
  5726 00001CB2 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  5727 00001CB4 7402                    		je	short chk_ptype_retn
  5728 00001CB6 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  5729                                  chk_ptype_retn:
  5730                                  		; zf = 1 -> primary DOS partition
  5731                                  		; zf = 0 -> not a primary DOS partition
  5732 00001CB8 C3                      		retn
  5733                                  
  5734                                  ; =============== S U B	R O U T	I N E =======================================
  5735                                  
  5736                                  ; 28/12/2018 - Retro DOS v4.0 
  5737                                  
  5738                                  ;***************************************************************************
  5739                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5740                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5741                                  ;   our own logical sectors start. we also read in our boot sector to
  5742                                  ;   determine version number
  5743                                  ;
  5744                                  ;   inputs:	dl is rom drive number (80...)
  5745                                  ;		bh is partition number (0....) 
  5746                                  ;		ds:di points to bds
  5747                                  ;   outputs:	carry clear -> bpb is filled in
  5748                                  ;		carry set   -> bpb is left uninitialized due to error
  5749                                  ;	trashes (at least) si, cx
  5750                                  ;	MUST PRESERVE ES:!!!!
  5751                                  ;***************************************************************************
  5752                                  
  5753                                  sethard:	; proc near
  5754                                  		; 16/12/2023
  5755                                  		; 14/08/2023
  5756                                  		; ds = cs = BIOSDATA
  5757 00001CB9 57                      		push	di
  5758 00001CBA 53                      		push	bx
  5759                                  		;push	ds  ; ds = cs = BIOSDATA ; 14/08/2023
  5760 00001CBB 06                      		push	es
  5761 00001CBC 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5762 00001CBF 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5763 00001CC2 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5764                                  					; fnon_removable
  5765 00001CC6 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5766                                  					; ffHardFile
  5767 00001CCA C606[C216]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5768 00001CCF 88FE                    		mov	dh, bh		; partition number
  5769 00001CD1 52                      		push	dx
  5770 00001CD2 B408                    		mov	ah, 8
  5771 00001CD4 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5772                                  					; DL = drive number
  5773                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5774                                  					; DL = number of consecutive drives
  5775                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5776 00001CD6 FEC6                    		inc	dh
  5777 00001CD8 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5778 00001CDB 5A                      		pop	dx
  5779 00001CDC 7249                    		jb	short setret	; error	if no hard disk
  5780 00001CDE 80E13F                  		and	cl, 3Fh
  5781 00001CE1 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5782 00001CE4 52                      		push	dx		; save partition number
  5783 00001CE5 E8A4FF                  		call	getboot
  5784 00001CE8 5A                      		pop	dx		; restore partition number
  5785 00001CE9 723C                    		jb	short setret
  5786 00001CEB BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5787                                  
  5788                                  ; The first 'active' partition is 00, the second is 01....
  5789                                  ;   then the remainder of the 'primary' but non-active partitions
  5790                                  
  5791                                  act_part:
  5792 00001CEE 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5793 00001CF3 740B                    		jz	short no_act	; no
  5794                                  ; 16/12/2023
  5795                                  %if 0
  5796                                  		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5797                                  		jz	short got_good_act
  5798                                  		cmp	byte [es:bx], 4
  5799                                  		jz	short got_good_act
  5800                                  		cmp	byte [es:bx], 6
  5801                                  		jnz	short no_act
  5802                                  %endif
  5803                                  		; 16/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0)
  5804                                  		; check if it is a primary dos partition
  5805                                  
  5806 00001CF5 E8B3FF                  		call	chk_partition_type
  5807 00001CF8 7506                    		jne	short no_act
  5808                                  
  5809                                  got_good_act:
  5810 00001CFA 08F6                    		or	dh, dh		; is this our target partition #?
  5811 00001CFC 742D                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5812 00001CFE FECE                    		dec	dh		; count	down
  5813                                  no_act:
  5814 00001D00 83C310                  		add	bx, 16
  5815 00001D03 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5816                                  					; last entry done?
  5817 00001D07 75E5                    		jnz	short act_part	; no, process next entry
  5818 00001D09 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5819                                  					; restore original value of bx
  5820                                  
  5821                                  ; Now scan the non-active partitions
  5822                                  
  5823                                  get_primary:				
  5824 00001D0C 26F647FC80              		test	byte [es:bx-4], 80h
  5825 00001D11 750B                    		jnz	short not_prim	; we've already scanned
  5826                                  					; the ACTIVE ones
  5827                                  ; 16/12/2023
  5828                                  %if 0
  5829                                  		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5830                                  		jz	short got_prim
  5831                                  		cmp	byte [es:bx], 4
  5832                                  		jz	short got_prim
  5833                                  		cmp	byte [es:bx], 6
  5834                                  		jnz	short not_prim
  5835                                  %endif
  5836                                  		; 16/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0)
  5837                                  		; check if it is a primary dos partition
  5838                                  
  5839 00001D13 E895FF                  		call	chk_partition_type
  5840 00001D16 7506                    		jne	short not_prim
  5841                                  
  5842                                  got_prim:
  5843 00001D18 08F6                    		or	dh, dh		; is this our target partition?
  5844 00001D1A 740F                    		jz	short set2
  5845 00001D1C FECE                    		dec	dh
  5846                                  not_prim:
  5847 00001D1E 83C310                  		add	bx, 16
  5848 00001D21 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5849 00001D25 75E5                    		jnz	short get_primary ; loop till we've gone through table
  5850                                  setret:					
  5851 00001D27 F9                      		stc			; error	return
  5852 00001D28 E98502                  		jmp	ret_hard_err
  5853                                  
  5854                                  ; ---------------------------------------------------------------------------
  5855                                  
  5856                                  ;  until we get the real logical boot record and get the bpb,
  5857                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5858                                  ;  for the convenience of the computation.
  5859                                  ;
  5860                                  ;  at the end of this procedure, if a bpb information is gotten from
  5861                                  ;  the valid boot record, then we are going to use those bpb information
  5862                                  ;  without change.
  5863                                  ;
  5864                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5865                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5866                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5867                                  
  5868                                  set2:
  5869                                  		; 14/08/2023
  5870                                  		; ds = cs = BIOSDATA segment (0070h)
  5871 00001D2B 8816[C516]              		mov	[rom_drv_num], dl
  5872                                  		;mov	[cs:rom_drv_num], dl
  5873                                  			; save the rom bios drive number we are handling now.
  5874 00001D2F 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5875 00001D33 268B5706                		mov	dx, [es:bx+6]
  5876                                  
  5877                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5878                                  ; sectors should be allowed	
  5879                                  
  5880 00001D37 83E801                  		sub	ax, 1
  5881 00001D3A 83DA00                  		sbb	dx, 0
  5882 00001D3D 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5883 00001D41 2613570A                		adc	dx, [es:bx+10]
  5884 00001D45 7305                    		jnc	short okdrive
  5885 00001D47 800E[C216]80            		or	byte [fbigfat], 80h ; ftoobig
  5886                                  okdrive:
  5887 00001D4C 268B4704                		mov	ax, [es:bx+4]
  5888 00001D50 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5889                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5890 00001D53 268B4706                		mov	ax, [es:bx+6]
  5891 00001D57 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5892 00001D5A 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5893 00001D5E 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5894 00001D62 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5895 00001D65 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5896                                  					; bpb->maxsec =	p->partitionlength
  5897                                  		;cmp	dx, 0
  5898                                  		;ja	short okdrive_1
  5899                                  		; 16/12/2023
  5900 00001D68 09D2                    		or	dx, dx
  5901 00001D6A 7505                    		jnz	short okdrive_1
  5902 00001D6C 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5903 00001D6F 72B6                    		jb	short setret	; return -1;
  5904                                  okdrive_1:
  5905                                  		;mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5906                                  		;mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5907                                  		; 16/12/2023
  5908                                  		;push	ax ; *
  5909 00001D71 8B4519                  		mov	ax, [di+19h]	; [di+BDS.hiddensecs+2]
  5910 00001D74 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5911                                  					; usually equal	to the # of sec/trk.
  5912 00001D76 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5913                                  		; 16/12/2023
  5914                                  		;push	ax
  5915                                  		;mov	ax, dx
  5916 00001D79 31D2                    		xor	dx, dx
  5917 00001D7B F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5918                                  					; (track)temp_h:ax + (sector)dx
  5919                                  		; 17/10/2022
  5920                                  		;mov	[cs:temp_h], ax
  5921                                  		; 14/08/2023 (ds=cs)
  5922 00001D7D A3[2205]                		mov	[temp_h], ax
  5923                                  		; 16/12/2023
  5924                                  		;pop	ax ; *
  5925 00001D80 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5926 00001D83 F7F3                    		div	bx
  5927 00001D85 88D1                    		mov	cl, dl
  5928 00001D87 FEC1                    		inc	cl
  5929                                  		;xor	bx, bx
  5930                                  		; 16/12/2023
  5931                                  		; bh = 0
  5932 00001D89 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5933                                  		;push	ax ; *
  5934 00001D8C 31D2                    		xor	dx, dx
  5935                                  		;;mov	ax, [cs:temp_h]
  5936                                  		;mov	ax, [temp_h] ; 14/08/2023
  5937                                  		; 16/12/2023
  5938 00001D8E 8706[2205]              		xchg	ax, [temp_h] ; * (push ax)
  5939 00001D92 F7F3                    		div	bx
  5940                                  		;;mov	[cs:temp_h], ax
  5941                                  		;mov	[temp_h], ax ; 14/08/2023
  5942                                  		;pop	ax ; *
  5943                                  		; 16/12/2023
  5944 00001D94 8706[2205]              		xchg	ax, [temp_h] ; * (pop ax)
  5945 00001D98 F7F3                    		div	bx		; dl is head, ax is cylinder
  5946                                  		; 14/08/2023 (ds=cs)
  5947 00001D9A 833E[2205]00            		cmp	word [temp_h], 0
  5948                                  		;cmp	word [cs:temp_h], 0
  5949                                  		;ja	short setret_brdg ; exceeds the	limit of int 13h
  5950                                  		; 16/12/2023
  5951 00001D9F 7786                    		ja	short setret
  5952 00001DA1 3D0004                  		cmp	ax, 1024
  5953                                  		;ja	short setret_brdg ; exceeds the	limit of int 13h
  5954                                  		; 16/12/2023
  5955 00001DA4 7781                    		ja	short setret
  5956                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5957                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5958                                  			; ('ja' must be 'jnb')
  5959                                  okdrive_2:
  5960                                   		; 28/07/2019
  5961                                  ; dl is head.
  5962                                  ; ax is cylinder
  5963                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5964                                  
  5965                                  ;*** for mini disks ***
  5966                                  
  5967 00001DA6 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5968                                  					; check	for mini disk
  5969 00001DAA 7503                    		jnz	short oknotmini	; not mini disk.
  5970 00001DAC 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5971                                  					; set the physical track number
  5972                                  oknotmini:
  5973                                  ;*** end of added logic for mini disk
  5974                                  				
  5975 00001DAF D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5976 00001DB1 D0CC                    		ror	ah, 1		; two bits of upper byte
  5977 00001DB3 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5978 00001DB6 08E1                    		or	cl, ah		; move two bits	to correct spot
  5979 00001DB8 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5980                                  					; cl is	sector + 2 high	bits of	cylinder
  5981 00001DBA 88D6                    		mov	dh, dl		; dh is	head
  5982                                  		
  5983                                  		; 14/08/2023 (ds=cs)
  5984 00001DBC 8A16[C516]              		mov	dl, [rom_drv_num]
  5985                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5986                                  
  5987                                  
  5988                                  ; cl is sector + 2 high bits of cylinder
  5989                                  ; ch is low 8 bits of cylinder
  5990                                  ; dh is head
  5991                                  ; dl is drive
  5992                                  
  5993                                  ; for convenience, we are going to read the logical boot sector
  5994                                  ; into cs:disksector area.
  5995                                  
  5996                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5997                                  ; is to be read in is cs:disksector.
  5998                                  
  5999 00001DC0 0E                      		push	cs
  6000 00001DC1 07                      		pop	es
  6001 00001DC2 BB[4E01]                		mov	bx, disksector	; for convenience,
  6002                                  					; we are going to read the logical boot	sector
  6003                                  					; into cs:disksector area.
  6004 00001DC5 B80102                  		mov	ax, 201h
  6005 00001DC8 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6006                                  					; AL = number of sectors to read, CH = track, CL = sector
  6007                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6008                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6009                                  		; 16/12/2023
  6010 00001DCA 7303                    		jnc	short set3_read_ok
  6011                                  set3_err:
  6012 00001DCC E9E101                  		jmp	ret_hard_err
  6013                                  
  6014                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  6015                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  6016                                  ; media if we recognize the version number.
  6017                                  
  6018                                  set3_read_ok:
  6019                                  		; 14/08/2023
  6020                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  6021                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  6022                                  		; 18/12/2023
  6023                                  		;push	bx ; +
  6024                                  		;push	ax ; (not necessary)
  6025                                  
  6026                                  		; 16/12/2023
  6027                                  		;cmp	word [bx+1FEh], 0AA55h
  6028                                  		;jne	short invalid_boot_record
  6029                                  		
  6030                                  		; 14/08/2023
  6031                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  6032 00001DCF 803FE9                  		cmp	byte [bx], 0E9h
  6033                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  6034 00001DD2 740B                    		je	short check_1_ok ; yes
  6035 00001DD4 803FEB                  		cmp	byte [bx], 0EBh
  6036                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  6037 00001DD7 7523                    		jne	short invalid_boot_record ; no
  6038 00001DD9 807F0290                		cmp	byte [bx+2], 90h
  6039                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  6040 00001DDD 751D                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  6041                                  check_1_ok:
  6042                                  
  6043                                  ; 18/12/2023
  6044                                  %if 0	
  6045                                  		; 14/08/2023			
  6046                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  6047                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  6048                                  					; point	to the bpb in the boot record
  6049                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  6050                                  		mov	al, [bx+10] ; 14/08/2023 
  6051                                  					; get the mediadescriptor byte
  6052                                  		and	al, 0F0h	; mask off low nibble
  6053                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  6054                                  		jne	short invalid_boot_record ; no,	invalid	boot record
  6055                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  6056                                  		cmp	word [bx], 512 ; 14/08/2023
  6057                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  6058                                  
  6059                                  check2_ok:				; yes, mediadescriptor ok.
  6060                                  		mov	al, [bx+2] ; 14/08/2023
  6061                                  		;mov	al, [cs:bx+2]	; now make sure that
  6062                                  					; the sectorspercluster	is
  6063                                  					; a power of 2
  6064                                  					;
  6065                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  6066                                  					; get the sectorspercluster
  6067                                  %endif
  6068                                  		; 18/12/2023
  6069                                  		; bx = disksector
  6070 00001DDF 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  6071                                  					; get the mediadescriptor byte
  6072 00001DE2 24F0                    		and	al, 0F0h	; mask off low nibble
  6073 00001DE4 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  6074 00001DE6 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  6075 00001DE8 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  6076 00001DED 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  6077                                  
  6078                                  check2_ok:	; yes, mediadescriptor ok.
  6079 00001DEF 8A470D                  		mov	al, [bx+13]	; now make sure that
  6080                                  					; the sectorspercluster is
  6081                                  					; a power of 2
  6082                                  					;
  6083                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  6084                                  					; get the sectorspercluster
  6085                                  
  6086 00001DF2 08C0                    		or	al, al		; is it	zero?
  6087 00001DF4 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  6088                                  
  6089                                  ck_power_of_two:			
  6090 00001DF6 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  6091 00001DF8 73FC                    		jnc	short ck_power_of_two
  6092 00001DFA 7406                    		jz	short valid_boot_record
  6093                                  
  6094                                  invalid_boot_record:			
  6095                                  		; 18/12/2023
  6096                                  		;pop	ax
  6097                                  		;pop	bx ; +
  6098 00001DFC E9FE00                  		jmp	unknown		; jump to invalid boot record
  6099                                  					; unformatted or illegal media.
  6100                                  	; 14/08/2023	
  6101                                  ; ---------------------------------------------------------------------------
  6102                                  ; 16/12/2023
  6103                                  ;setret_brdg:
  6104                                  ;		jmp	setret
  6105                                  ; ---------------------------------------------------------------------------
  6106                                  
  6107                                  unknown3_0_j:				
  6108 00001DFF E9FF00                  		jmp	unknown3_0	; legally formatted media,
  6109                                  					; although, content might be bad.
  6110                                  ; ---------------------------------------------------------------------------
  6111                                  
  6112                                  valid_boot_record:
  6113                                  		; 18/12/2023
  6114                                  		;pop	ax
  6115                                  		;pop	bx ; +
  6116                                  		
  6117                                  		; 18/12/2023
  6118                                  		; bx = offset disksector ; +
  6119                                  
  6120                                  ; Signature found. Now check version.
  6121                                  
  6122                                  		; 14/08/2023
  6123 00001E02 817F08322E              		cmp	word [bx+8], '2.'
  6124                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  6125                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  6126 00001E07 7506                    		jnz	short try5
  6127 00001E09 807F0A30                		cmp	byte [bx+10], '0'
  6128                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  6129                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  6130                                  		; 14/08/2023
  6131                                  		;jnz	short try5
  6132                                  		;jmp	short copybpb
  6133 00001E0D 7425                    		jz	short copybpb
  6134                                  
  6135                                  	; 14/08/2023
  6136                                  ; ---------------------------------------------------------------------------
  6137                                  ;
  6138                                  ;setret_brdg:				
  6139                                  ;		jmp	setret
  6140                                  ; ---------------------------------------------------------------------------
  6141                                  ;
  6142                                  ;unknown3_0_j:				
  6143                                  ;		jmp	unknown3_0	; legally formatted media,
  6144                                  ;					; although, content might be bad.
  6145                                  ; ---------------------------------------------------------------------------
  6146                                  
  6147                                  try5:					
  6148 00001E0F E8A201                  		call	cover_fdisk_bug
  6149                                  
  6150                                  ; see if it is an os2 signature
  6151                                  
  6152                                  		; 14/08/2023
  6153                                  		; ds = cs = BIOSDATA segment
  6154 00001E12 817F08302E              		cmp	word [bx+8], '0.'
  6155                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  6156                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  6157 00001E17 750C                    		jnz	short no_os2
  6158 00001E19 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  6159                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  6160 00001E1C 2C31                    		sub	al, '1'
  6161                                  		;sub	al, 31h		; '1'
  6162 00001E1E 24FE                    		and	al, 0FEh
  6163 00001E20 7412                    		jz	short copybpb	; accept either	'1' or '2'
  6164 00001E22 E9D800                  		jmp	unknown
  6165                                  ; ---------------------------------------------------------------------------
  6166                                  
  6167                                  ; no os2 signature, this is to check for real dos versions
  6168                                  
  6169                                  no_os2:					
  6170                                  		; 14/08/2023
  6171                                  		; ds = cs = BIOSDATA
  6172 00001E25 817F08332E              		cmp	word [bx+8], '3.'			
  6173                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  6174                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  6175 00001E2A 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  6176                                  					; do not trust it, but still legal.
  6177 00001E2C 7506                    		jnz	short copybpb	; honor	os2 boot record
  6178                                  					; or dos 4.0 version
  6179 00001E2E 807F0A31                		cmp	byte [bx+10], '1' ; 14/08/2023
  6180                                  		;cmp	byte [cs:bx+10], '1'
  6181                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  6182 00001E32 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  6183                                  copybpb:
  6184                                  
  6185                                  ; 03/10/2022
  6186                                  
  6187                                  ; we have a valid boot sector. use the bpb in it to build the
  6188                                  ; bpb in bios. it is assumed that only
  6189                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  6190                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  6191                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  6192                                  ; need to be set (all other values in already). fbigfat is also set.
  6193                                  
  6194                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  6195                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  6196                                  ; and system id according to the boot record.
  6197                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  6198                                  
  6199                                  		; 10/12/2022
  6200                                  		; (number of FATs optimization)
  6201 00001E34 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  6202                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  6203                                  		;mov	cl, [cs:si+05h]
  6204                                  		; 14/08/2023
  6205                                  		; ds = cs = BIOSDATA segment (0070h)
  6206 00001E37 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  6207                                  
  6208 00001E3A 807C1B29                		cmp	byte [si+1Bh], 29h ; 14/08/2023
  6209                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  6210                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  6211                                  					; [disksector+EXT_BOOT.SIG]
  6212                                  					; EXT_BOOT_SIGNATURE
  6213 00001E3E 753A                    		jnz	short copybpb_fat ; conventional fat system
  6214                                  
  6215                                  		; 03/10/2022
  6216                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  6217                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  6218                                  		;	     number of FATs must be 2 ; =*?=
  6219                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  6220                                  		;
  6221                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  6222                                  
  6223                                  		; 10/12/2022
  6224                                  		;cmp	byte [cs:disksector+10h], 0
  6225                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  6226                                  		;jnz	short copybpb_fat ; a fat system.
  6227 00001E40 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  6228 00001E42 7536                    		jnz	short copybpb_fat ; a fat system.
  6229                                  
  6230                                  ; non fat based	media.
  6231                                  
  6232 00001E44 57                      		push	di  ; BDS
  6233                                  		; 14/08/2023
  6234                                  		;push	ds  ; ds = cs = BIOSDATA segment
  6235                                  
  6236                                  		; 17/12/2023
  6237                                  		; es = ds = cs
  6238                                  		;push	ds
  6239                                  		;pop	es
  6240                                  
  6241                                  		; 14/08/2023
  6242                                  		; ds = cs
  6243                                  		;push	cs
  6244                                  		;pop	ds
  6245                                  
  6246                                  		; 10/12/2022
  6247                                  		; (number of FATs optimization)
  6248                                  		; SI = disksector+11
  6249                                  		; 17/10/2022
  6250                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6251                                  		;mov	si, disksector+11
  6252 00001E45 83C706                  		add	di, 6		; add di,BDS.BPB
  6253                                  
  6254                                  ; just for completeness, we'll make sure that total_sectors and
  6255                                  ; big_total_sectors aren't both zero. I've seen examples of
  6256                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  6257                                  ; got that way. If it occurs, then use the values from the
  6258                                  ; partition table.
  6259                                  
  6260                                  		; 18/12/2022
  6261 00001E48 29C9                    		sub	cx, cx 
  6262                                  
  6263                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  6264                                  		;jnz	short already_nonz 
  6265                                  		;			; how about big_total?
  6266                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  6267                                  		;jnz	short already_nonz ; we're okay if any are != 0
  6268                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6269                                  		;jnz	short already_nonz
  6270                                  
  6271                                  		; 14/08/2023
  6272                                  		; ds = cs = BIOSDATA segment (0070h)
  6273                                  
  6274                                  		; 18/12/2022
  6275                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  6276                                  		; 14/08/2023
  6277 00001E4A 394C08                  		cmp	[si+8], cx ; 0
  6278 00001E4D 751C                    		jnz	short already_nonz
  6279                                  					     	; how about big_total?
  6280                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  6281                                  		; 14/08/2023
  6282 00001E4F 394C15                  		cmp	[si+15h], cx ; 0
  6283 00001E52 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  6284                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6285 00001E54 394C17                  		cmp	[si+17h], cx ; 0
  6286 00001E57 7512                    		jnz	short already_nonz
  6287                                  
  6288                                  ; now let's copy the values from the partition table (now in the BDS)
  6289                                  ; into the BPB in the boot sector buffer, before they get copied back.
  6290                                  
  6291 00001E59 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  6292                                  		; 14/08/2023
  6293                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  6294 00001E5C 894408                  		mov	[si+8], ax
  6295 00001E5F 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  6296                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  6297 00001E62 894415                  		mov	[si+15h], ax
  6298 00001E65 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  6299                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6300 00001E68 894417                  		mov	[si+17h], ax
  6301                                  
  6302                                  already_nonz:	
  6303                                  		; 18/12/2022
  6304                                  		; cx = 0
  6305 00001E6B B119                    		mov	cl, 25
  6306                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  6307 00001E6D F3A4                    		rep movsb
  6308                                  	
  6309                                  		; 17/12/2023 (BugFix and optimization)
  6310                                  		;pop	ds ; (BugFix)
  6311 00001E6F 5F                      		pop	di ; BDS
  6312                                  		;
  6313                                  		;push	es ; (BugFix)
  6314                                  		;push	ds
  6315                                  		;pop	es
  6316                                  		;push	cs
  6317                                  		;pop	ds
  6318                                  
  6319                                  		; 14/08/2023
  6320 00001E70 BD[2B07]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  6321                                  		; 18/12/2022
  6322                                  		;mov	bp, mov_media_ids
  6323                                  		;;mov	bp, 751h	; mov_media_ids
  6324                                  					; at 2C7h:751h = 70h:2CC1h
  6325                                  					; set volume id, systemid, serial.
  6326 00001E73 0E                      		push	cs		; simulate far call
  6327 00001E74 E8D6F8                  		call	call_bios_code
  6328                                  		; 14/08/2023
  6329                                  		; ds = cs = es
  6330                                  		;push	es
  6331                                  		;pop	ds
  6332                                  		;pop	es ; (BugFix) ; 17/12/2023
  6333 00001E77 E92F01                  		jmp	goodret
  6334                                  ; ---------------------------------------------------------------------------
  6335                                  
  6336                                  ; ****** cas ---
  6337                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6338                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6339                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6340                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6341                                  ; from the boot sector into the DPB anyway, we've just been using
  6342                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6343                                  ; we'll go ahead and copy it into the DPB, except in the case
  6344                                  ; that it equals zero, in which case we just use the values in
  6345                                  ; the DPB from the partition table.
  6346                                  
  6347                                  ; 17/10/2022
  6348                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6349                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6350                                  ; 09/12/2022
  6351                                  MOVMEDIAIDS equ mov_media_ids
  6352                                  CLEARIDS equ clear_ids
  6353                                  ; 11/09/2023
  6354                                  CLEARIDS_X equ clear_ids_x
  6355                                  
  6356                                  copybpb_fat:
  6357                                  		; 10/12/2022
  6358                                  		; (number of FATs optimization)
  6359                                  		; SI = disksector+11				
  6360                                  		; 17/10/2022
  6361                                  		;mov	si, disksector+11
  6362                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6363                                  					; cs:si	-> bpb in boot
  6364 00001E7A 31D2                    		xor	dx, dx
  6365                                  		; 14/08/2023
  6366                                  		; ds = cs = BIOSDATA segment (0070h)
  6367 00001E7C 8B4408                  		mov	ax, [si+8]
  6368                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6369                                  					; get totsec from boot sec
  6370 00001E7F 09C0                    		or	ax, ax
  6371 00001E81 7514                    		jnz	short copy_totsec ; if non zero, use that
  6372 00001E83 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6373                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6374                                  					; get the big version
  6375                                  					; (32 bit total	sectors)
  6376 00001E86 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6377                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6378                                  		; 10/12/2022
  6379                                  		; (number of FATs optimization)
  6380                                  		; CL = number of FATs (2 or 1) 
  6381 00001E89 89D3                    		mov	bx, dx		; see if it is a big zero
  6382 00001E8B 09C3                    		or	bx, ax
  6383 00001E8D 7508                    		jnz	short copy_totsec
  6384                                  			; screw it. it was bogus.
  6385 00001E8F 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6386 00001E92 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6387 00001E95 EB06                    		jmp	short fat_big_small
  6388                                  
  6389                                  		;mov	cx, dx
  6390                                  		;or	cx, ax		; see if it is a big zero
  6391                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6392                                  copy_totsec:				
  6393 00001E97 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6394                                  					; make DPB match boot sec
  6395 00001E9A 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6396                                  
  6397                                  		; 10/12/2022
  6398                                  ;totsec_already_set:			
  6399                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6400                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6401                                  
  6402                                  ; determine fat entry size.
  6403                                  
  6404                                  fat_big_small:
  6405                                  
  6406                                  ;at this moment dx;ax = total sector number
  6407                                  
  6408                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6409                                  ;from the BPB on the disk
  6410                                  				
  6411                                  		; 14/08/2023
  6412                                  		; ds = cs = BIOSDATA segment (0070h)
  6413                                  				
  6414 00001E9D 8B5C03                  		mov	bx, [si+3]
  6415                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6416                                  					; get #reserved_sectors	from BPB
  6417 00001EA0 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6418                                  					; update BDS field
  6419 00001EA3 29D8                    		sub	ax, bx
  6420 00001EA5 83DA00                  		sbb	dx, 0		; update the count
  6421                                  		; 14/08/2023
  6422 00001EA8 8B5C0B                  		mov	bx, [si+0Bh]
  6423                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6424                                  					; bx = sectors/fat
  6425 00001EAB 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6426                                  					; set in bds bpb
  6427                                  		; 10/12/2022
  6428                                  		; (number of FATs optimization)
  6429                                  		; CL = number of FATs (2 or 1) 
  6430                                  		;dec	cl ; *
  6431                                  		; 18/12/2022
  6432 00001EAE 49                      		dec	cx ; *
  6433 00001EAF D3E3                    		shl	bx, cl
  6434                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6435                                  		
  6436 00001EB1 29D8                    		sub	ax, bx		; sub #	fat sectors
  6437 00001EB3 83DA00                  		sbb	dx, 0
  6438 00001EB6 8B5C06                  		mov	bx, [si+6] ; 14/08/2023
  6439                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6440                                  					; # root entries
  6441 00001EB9 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6442                                  					; set in bds bpb
  6443 00001EBC B104                    		mov	cl, 4
  6444 00001EBE D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6445 00001EC0 29D8                    		sub	ax, bx		; sub #	dir sectors
  6446 00001EC2 83DA00                  		sbb	dx, 0		;
  6447                                  					; dx:ax	now contains the
  6448                                  					; # of data sectors
  6449 00001EC5 31C9                    		xor	cx, cx ; *
  6450 00001EC7 8A4C02                  		mov	cl, [si+2] ; 14/08/2023
  6451                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6452                                  					; sectors per cluster
  6453 00001ECA 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6454                                  					; set in bios bpb
  6455 00001ECD 50                      		push	ax
  6456 00001ECE 89D0                    		mov	ax, dx
  6457 00001ED0 31D2                    		xor	dx, dx
  6458 00001ED2 F7F1                    		div	cx		; cx = sectors per cluster
  6459                                  		; 14/08/2023 (ds=cs)
  6460 00001ED4 A3[2205]                		mov	[temp_h], ax
  6461                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6462                                  					; # clusters.
  6463 00001ED7 58                      		pop	ax
  6464 00001ED8 F7F1                    		div	cx
  6465                                  		;cmp	word [cs:temp_h], 0
  6466 00001EDA 833E[2205]00            		cmp	word [temp_h], 0 ; 14/08/2023
  6467 00001EDF 7714                    		ja	short toobig_ret ; too big cluster number
  6468 00001EE1 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6469                                  					; is this 16-bit fat?
  6470 00001EE4 7205                    		jb	short copymediaid ; no,	small fat
  6471                                  		; 17/10/2022
  6472 00001EE6 800E[C216]40            		or	byte [fbigfat], 40h
  6473                                  		;or	ds:fbigfat, 40h	; fbig
  6474                                  					; 16 bit fat
  6475                                  copymediaid:				
  6476                                  		; 17/12/2023
  6477                                  		; es = ds = cs
  6478                                  		
  6479                                  		;push	es
  6480                                  		;push	ds
  6481                                  		;pop	es
  6482                                  
  6483                                  		; 14/08/2023
  6484                                  		; ds = cs = BIOSDATA
  6485                                  		;push	cs
  6486                                  		;pop	ds
  6487                                  		; 17/10/2022
  6488 00001EEB BD[2B07]                		mov	bp, MOVMEDIAIDS
  6489                                  		;mov	bp, 751h	; mov_media_ids
  6490                                  					; at 2C7h:751h = 70h:2CC1h
  6491                                  					; copy filesys_id, volume label
  6492 00001EEE 0E                      		push	cs		; simulate far call
  6493 00001EEF E85BF8                  		call	call_bios_code
  6494                                  
  6495                                  		; 14/08/2023
  6496                                  		;push	es
  6497                                  		;pop	ds
  6498                                  		; 17/12/2023
  6499                                  		;pop	es
  6500                                  
  6501 00001EF2 E99600                  		jmp	massage_bpb	; now final check for bpb info
  6502                                  					; and return.
  6503                                  ; ---------------------------------------------------------------------------
  6504                                  
  6505                                  toobig_ret:				
  6506                                  		; 14/08/2023 (ds=cs=BIOSDATA)
  6507 00001EF5 800E[C216]80            		or	byte [fbigfat], 80h ; ftoobig
  6508                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6509                                  					; too big (32 bit clust #) for FAT16
  6510 00001EFA E9AC00                  		jmp	goodret		; still	drive letter is	assigned
  6511                                  					; but useless. to big for
  6512                                  					; current pc dos fat file system
  6513                                  ; ---------------------------------------------------------------------------
  6514                                  
  6515                                  unknown:	
  6516                                  		; 12/12/2022
  6517 00001EFD 804D2402                		or	byte [di+24h], 02h			
  6518                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6519                                  					; unformatted_media
  6520                                  					; Set unformatted media	flag.
  6521                                  
  6522                                  ; the boot signature may not be	recognizable,
  6523                                  ; but we should	try and	read it	anyway.
  6524                                  
  6525                                  unknown3_0:				
  6526 00001F01 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6527                                  					; [di+BDS.totalsecs32+2]
  6528 00001F04 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6529 00001F07 BE[F216]                		mov	si, disktable2
  6530                                  
  6531                                  scan:					
  6532                                  		;cmp	dx, [cs:si]	; total sectors hw
  6533                                  		; 14/08/2023 (ds=cs)
  6534 00001F0A 3B14                    		cmp	dx, [si] 
  6535 00001F0C 720C                    		jb	short gotparm
  6536 00001F0E 7705                    		ja	short scan_next
  6537                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6538 00001F10 3B4402                  		cmp	ax, [si+2]
  6539 00001F13 7605                    		jbe	short gotparm
  6540                                  
  6541                                  scan_next:				
  6542 00001F15 83C60A                  		add	si, 10		; 5*2
  6543 00001F18 EBF0                    		jmp	short scan	; covers upto 512 mb media
  6544                                  ; ---------------------------------------------------------------------------
  6545                                  
  6546                                  gotparm:				
  6547 00001F1A 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6548                                  		;or	ds:fbigfat, cl
  6549                                  		; 17/10/2022
  6550 00001F1D 080E[C216]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6551                                  		; 14/08/2023
  6552                                  		; ds = cs = BIOSDATA
  6553 00001F21 8B4C04                  		mov	cx, [si+4]
  6554                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6555                                  					; cl = log base 2 of ch
  6556 00001F24 8B5406                  		mov	dx, [si+6]
  6557                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6558                                  
  6559                                  ; now calculate size of fat table
  6560                                  
  6561 00001F27 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6562                                  					; save number of (root)	dir entries
  6563 00001F2A 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6564 00001F2D 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6565 00001F30 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6566                                  					; save sectors per cluster
  6567                                  		; 17/10/2022
  6568 00001F33 F606[C216]40            		test	byte [fbigfat], 40h
  6569                                  		;test	ds:fbigfat, 40h	; fbig
  6570                                  					; if (fbigfat)
  6571 00001F38 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6572                                  
  6573                                  ; we don't need to change "small fat" logic since it is gauranteed
  6574                                  ; that double word total sector will not use 12 bit fat (unless
  6575                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6576                                  ; so in this case we assume dx = 0 !!
  6577                                  
  6578 00001F3A 31DB                    		xor	bx, bx		; (12 bit fat)
  6579 00001F3C 88EB                    		mov	bl, ch
  6580 00001F3E 4B                      		dec	bx
  6581 00001F3F 01C3                    		add	bx, ax		; dx=0
  6582 00001F41 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6583 00001F43 43                      		inc	bx		; BDS.secperclus
  6584 00001F44 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6585 00001F47 89DE                    		mov	si, bx
  6586 00001F49 D1EB                    		shr	bx, 1
  6587 00001F4B 01F3                    		add	bx, si
  6588 00001F4D 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6589 00001F51 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6590 00001F53 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6591                                  					; save number of fat sectors
  6592 00001F56 EB33                    		jmp	short massage_bpb
  6593                                  ; ---------------------------------------------------------------------------
  6594                                  
  6595                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6596                                  
  6597                                  dobig:					
  6598 00001F58 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6599 00001F5A 52                      		push	dx		; save total sectors (high)
  6600 00001F5B 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6601 00001F5E D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6602 00001F60 29D0                    		sub	ax, dx
  6603 00001F62 5A                      		pop	dx
  6604 00001F63 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6605 00001F66 83E801                  		sub	ax, 1
  6606 00001F69 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6607                                  					; total	secs - reserved	secs - root dir	secs
  6608 00001F6C B302                    		mov	bl, 2
  6609 00001F6E 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6610                                  					; bx = 256 * BDS.secperclus + 2
  6611                                  
  6612                                  ; I don't understand why to add bx here!!!
  6613                                  
  6614                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6615                                  		; 27/09/2022
  6616                                  		; (Microsoft FAT32 File	System Specification,
  6617                                  		; December 2000, Page 21)
  6618                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6619                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6620                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6621                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6622                                  		
  6623                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6624 00001F71 01D8                    		add	ax, bx		; 
  6625 00001F73 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6626 00001F76 83E801                  		sub	ax, 1		
  6627 00001F79 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6628                                  
  6629                                  ; assuming dx in the table will never be bigger than bx.
  6630                                  
  6631 00001F7C F7F3                    		div	bx		; BDS.fatsecs =
  6632                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6633 00001F7E 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6634                                  					; number of fat	sectors
  6635                                  
  6636                                  ; now, set the default filesys_id, volume label, serial number
  6637                                  
  6638                                  		; 14/08/2023
  6639                                  		; [di+1Fh] = [fbigfat]
  6640                                  		;
  6641                                  		;;mov	bl, ds:fbigfat
  6642                                  		;; 17/10/2022
  6643                                  		;mov	bl, [fbigfat]
  6644                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6645                                  
  6646                                  		; 14/08/2023
  6647                                  		;push	ds ; ds = cs = BIOSDATA
  6648                                  
  6649                                  		; 17/12/2023
  6650                                  		; es = ds = cs 
  6651                                  		;push	ds
  6652                                  		;pop	es
  6653                                  
  6654                                  		; 14/08/2023 
  6655                                  		; ds = cs = BIOSDATA
  6656                                  		;push	cs
  6657                                  		;pop	ds
  6658                                  		; 11/09/2023
  6659 00001F81 A0[C216]                		mov	al, [fbigfat]
  6660 00001F84 BD[CB05]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6661                                  		; 17/10/2022
  6662                                  		;mov	bp, CLEARIDS
  6663                                  		;;mov	bp, 5D9h	; clear_ids
  6664                                  					; at 2C7h:5D9h = 70h:2B49h
  6665                                  					; at BIOSCODE:06ABh
  6666                                  					;	in PCDOS 7.1 IBMBIO.COM
  6667 00001F87 0E                      		push	cs
  6668 00001F88 E8C2F7                  		call	call_bios_code
  6669                                  
  6670                                  		; 14/08/2023
  6671                                  		;pop	ds ; ds = cs = BIOSDATA
  6672                                  
  6673                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6674                                  ; set according to the partition information. we are going to
  6675                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6676                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6677                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6678                                  ; we don't do this for the bpb information from the boot record. we
  6679                                  ; are not going to change the bpb information from the boot record.
  6680                                  
  6681                                  massage_bpb:
  6682                                  		; 14/08/2023
  6683                                  		; [di+1Fh] = [fbigfat]
  6684                                  		;
  6685                                  		;; 12/12/2022
  6686                                  		;mov	bl, [fbigfat]
  6687                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6688                                  		;			; set size of fat on media
  6689                                  		;
  6690 00001F8B 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6691 00001F8E 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6692                                  		; 11/09/2023
  6693 00001F91 09D2                    		or	dx, dx
  6694 00001F93 7514                    		jnz	short goodret	
  6695                                  		;cmp	dx, 0		; double word total sectors?
  6696                                  		;;ja	short goodret	; don't have to change it.
  6697                                  		;; 12/12/2022
  6698                                  		;ja	short short goodret2
  6699                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6700                                  		;ja	short goodret	; don't have to change it.
  6701                                  		; 12/12/2022
  6702 00001F95 395519                  		cmp	[di+19h], dx ; 0
  6703                                  		;ja	short goodret2
  6704 00001F98 770F                    		ja	short goodret	; 11/09/2023
  6705 00001F9A 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6706                                  		;jb	short goodret
  6707                                  		; 12/12/2022
  6708                                  		;jc	short goodret
  6709 00001F9D 7209                    		jc	short goodret_clc ; 11/09/2023
  6710 00001F9F 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6711 00001FA2 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6712                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6713                                  		; 12/12/2022
  6714 00001FA5 89551B                  		mov	[di+1Bh], dx ; 0
  6715                                  goodret_clc:
  6716                                  		; 11/09/2023
  6717 00001FA8 F8                      		clc 
  6718                                  goodret:
  6719                                  		;mov	bl, ds:fbigfat
  6720                                  		; 11/09/2023
  6721                                  		; 12/12/2022
  6722                                  		; 17/10/2022
  6723 00001FA9 8A1E[C216]              		mov	bl, [fbigfat]
  6724 00001FAD 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6725                                  					; set size of fat on media
  6726                                  		; 11/09/2023
  6727                                  		;clc
  6728                                  ret_hard_err:
  6729                                  		; 12/12/2022
  6730                                  goodret2:
  6731 00001FB0 07                      		pop	es
  6732                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  6733 00001FB1 5B                      		pop	bx
  6734 00001FB2 5F                      		pop	di
  6735 00001FB3 C3                      		retn
  6736                                  
  6737                                  ; =============== S U B	R O U T	I N E =======================================
  6738                                  
  6739                                  ; 15/10/2022
  6740                                  
  6741                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6742                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6743                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6744                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6745                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6746                                  
  6747                                  		; 17/10/2022
  6748                                  cover_fdisk_bug:	
  6749                                  		; 14/08/2023
  6750                                  		; ds = cs
  6751                                  		
  6752                                  		; 18/12/2023
  6753                                  		;push	ax
  6754                                  		;push	dx
  6755                                  		;push	si
  6756                                  
  6757                                  		; 18/12/2023
  6758                                  		; bx = offset disksector
  6759                                  
  6760                                  		; 18/12/2023
  6761 00001FB4 807F2629                		cmp	byte [bx+26h], 29h
  6762                                  		; 14/08/2023
  6763                                  		;cmp	byte [disksector+26h], 29h
  6764                                  		;;cmp	byte [cs:disksector+26h], 29h
  6765                                  					; [disksector+EXT_BOOT.SIG],
  6766                                  					; EXT_BOOT_SIGNATURE
  6767 00001FB8 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6768                                  		
  6769 00001FBA 817F073130              		cmp	word [bx+7], 3031h
  6770                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6771 00001FBF 7506                    		jne	short cfb_chk_totalsecs ; 14/08/2023
  6772 00001FC1 807F0A30                		cmp	byte [bx+10], '0'
  6773                                  		;cmp	byte [cs:bx+10], '0'
  6774 00001FC5 7519                    		jne	short cfb_retit
  6775                                  
  6776                                  cfb_chk_totalsecs:
  6777                                  ; 18/12/2023
  6778                                  %if 0
  6779                                  		; 17/10/2022
  6780                                  		mov	si, disksector+11 ; 14Eh+0Bh
  6781                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6782                                  		; 14/08/2023
  6783                                  		cmp	word [si+8], 0
  6784                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6785                                  					; just to make sure.
  6786                                  		jz	short cfb_retit
  6787                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6788                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6789                                  		; 14/08/2023
  6790                                  		mov	ax, [si+8]
  6791                                  		add	ax, [si+11h]
  6792                                  
  6793                                  		jnc	short cfb_retit
  6794                                  		jnz	short cfb_retit
  6795                                  					; if carry set and ax=0
  6796                                  		dec	word [si+8]
  6797                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6798                                  					; then decrease	BPB_TOTALSECTORS by 1
  6799                                  %endif
  6800                                  		; 18/12/2023
  6801                                  		;cmp	word [bx+19], 0
  6802 00001FC7 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
  6803 00001FCA 21C0                    		and	ax, ax ; 0 ?
  6804 00001FCC 7412                    		jz	short cfb_retit
  6805                                  
  6806                                  		;mov	ax, [bx+19]
  6807 00001FCE 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
  6808 00001FD1 730D                    		jnc	short cfb_retit
  6809 00001FD3 750B                    		jnz	short cfb_retit
  6810                                  		; ax = 0		; 0 -> 0FFFFh
  6811 00001FD5 FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
  6812                                  
  6813 00001FD8 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6814 00001FDC 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6815                                  cfb_retit:	
  6816                                  		; 18/12/2023
  6817                                  		;pop	si
  6818                                  		;pop	dx
  6819                                  		;pop	ax
  6820                                  		
  6821 00001FE0 C3                      		retn
  6822                                  
  6823                                  ; ---------------------------------------------------------------------------
  6824                                  
  6825 00001FE1 0200                    word2:		dw 2
  6826 00001FE3 0300                    word3:		dw 3
  6827 00001FE5 0002                    word512:	dw 512
  6828                                  
  6829                                  ; =============== S U B	R O U T	I N E =======================================
  6830                                  
  6831                                  ; 15/10/2022
  6832                                  
  6833                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6834                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6835                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6836                                  ; as the bpb on the drive.
  6837                                  ;
  6838                                  ; no attempt is made to preserve registers since we are going to jump to
  6839                                  ; sysinit straight after this routine.
  6840                                  
  6841                                  setdrvparms:
  6842                                  		; 14/12/2023
  6843                                  		; ds = cs
  6844 00001FE7 31DB                    		xor	bx, bx
  6845                                  		; 18/10/2022
  6846 00001FE9 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6847                                  _next_bds:				
  6848 00001FED 06                      		push	es
  6849 00001FEE 57                      		push	di
  6850 00001FEF 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6851 00001FF3 80FB05                  		cmp	bl, 5		; ffHardFile
  6852 00001FF6 753E                    		jnz	short nothardff
  6853 00001FF8 31D2                    		xor	dx, dx
  6854 00001FFA 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6855 00001FFE 09C0                    		or	ax, ax
  6856 00002000 7508                    		jnz	short get_ccyl
  6857 00002002 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6858 00002006 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6859                                  
  6860                                  get_ccyl:				
  6861 0000200A 52                      		push	dx
  6862 0000200B 50                      		push	ax
  6863 0000200C 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6864 00002010 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6865                                  					; assume sectors per cyl. < 64k.
  6866 00002014 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6867 00002016 58                      		pop	ax
  6868 00002017 5A                      		pop	dx		; dx:ax	= total	sectors
  6869 00002018 50                      		push	ax
  6870 00002019 89D0                    		mov	ax, dx
  6871 0000201B 31D2                    		xor	dx, dx
  6872 0000201D F7F1                    		div	cx
  6873                                  
  6874                                  		; 14/12/2023  ; !*!
  6875                                  		; (data segment may not be same with code segment here)
  6876 0000201F 2EA3[2205]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6877                                  
  6878 00002023 58                      		pop	ax
  6879 00002024 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6880 00002026 09D2                    		or	dx, dx
  6881 00002028 7401                    		jz	short no_cyl_rnd ; came out even
  6882 0000202A 40                      		inc	ax		; round	up
  6883                                  
  6884                                  no_cyl_rnd:				
  6885 0000202B 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6886 0000202F 06                      		push	es
  6887 00002030 1F                      		pop	ds  ; !*! ; 14/12/2023
  6888 00002031 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6889                                  					; ds:si	-> bpb for hard	file
  6890 00002034 EB55                    		jmp	short set_recbpb
  6891                                  ; ---------------------------------------------------------------------------
  6892                                  
  6893                                  nothardff:				
  6894 00002036 0E                      		push	cs
  6895 00002037 1F                      		pop	ds
  6896                                  
  6897                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6898                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6899                                  
  6900                                  		; 10/12/2022
  6901                                  		; ds = cs
  6902                                  		; 17/10/2022 (ds=cs)
  6903 00002038 803E[C916]01            		cmp	byte [fakefloppydrv], 1
  6904                                  		;cmp	byte [cs:fakefloppydrv], 1
  6905 0000203D 7454                    		jz	short go_to_next_bds
  6906 0000203F 80FB07                  		cmp	bl, 7		; ffother
  6907                                  					; special case "other" type of medium
  6908 00002042 753D                    		jnz	short not_process_other
  6909                                  process_other:
  6910 00002044 31D2                    		xor	dx, dx
  6911 00002046 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6912 00002049 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6913 0000204C F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6914 0000204F 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6915                                  					; have the total number of sectors
  6916 00002052 48                      		dec	ax
  6917 00002053 B201                    		mov	dl, 1
  6918                                  _again:					
  6919 00002055 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6920 00002058 7206                    		jb	short _@@
  6921 0000205A D1E8                    		shr	ax, 1
  6922 0000205C D0E2                    		shl	dl, 1
  6923 0000205E EBF5                    		jmp	short _again
  6924                                  ; ---------------------------------------------------------------------------
  6925                                  
  6926                                  _@@:					
  6927 00002060 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6928 00002063 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6929 00002065 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6930                                  __@@:					
  6931 0000206A 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6932                                  
  6933                                  ; logic to get the sectors/fat area.
  6934                                  ; fat entry is assumed to be 1.5 bytes!!!
  6935                                  
  6936                                  		; 10/12/2022
  6937                                  		; ds = cs
  6938                                  		; 17/10/2022 (ds=cs)
  6939 0000206D F726[E31F]              		mul	word [word3]
  6940 00002071 F736[E11F]              		div	word [word2]
  6941 00002075 31D2                    		xor	dx, dx
  6942 00002077 F736[E51F]              		div	word [word512]
  6943                                  		;
  6944                                  		; 10/12/2022
  6945                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6946                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6947                                  		;xor	dx, dx
  6948                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6949                                  		;
  6950 0000207B 40                      		inc	ax		; + 1
  6951                                  no_round_up:
  6952 0000207C 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6953 0000207F EB12                    		jmp	short go_to_next_bds
  6954                                  ; ---------------------------------------------------------------------------
  6955                                  
  6956                                  not_process_other:			
  6957 00002081 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6958                                  		;mov	si, bpbtable
  6959                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6960                                  		; 09/12/2022
  6961                                  		;mov	si, BPBTABLE
  6962                                  		;mov	si, [bx+si]	; get address of bpb
  6963                                  		; 10/12/2022
  6964                                  		;mov	si, [BPBTABLE+bx]
  6965                                  		; 13/12/2022
  6966                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6967                                  		; 14/08/2023
  6968                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6969                                  							; correct offset
  6970 00002083 8BB7[4C72]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6971                                  		
  6972                                  		; 28/08/2023
  6973 00002087 81C6303C                		add	si, SYSINIT_OFFSET
  6974                                  set_recbpb:				
  6975 0000208B 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6976                                  					; es:di	-> recbpb
  6977 0000208E B91900                  		mov	cx, 25		; bpbx.size
  6978 00002091 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6979                                  go_to_next_bds:				
  6980 00002093 5F                      		pop	di
  6981 00002094 07                      		pop	es		; restore pointer to bds
  6982 00002095 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6983 00002098 83FFFF                  		cmp	di, 0FFFFh	; -1
  6984 0000209B 740A                    		jz	short got_end_of_bds_chain
  6985 0000209D E94DFF                  		jmp	_next_bds
  6986                                  ; ---------------------------------------------------------------------------
  6987                                  
  6988                                  		; 18/12/2022
  6989                                  ;got_end_of_bds_chain:			
  6990                                  		;retn
  6991                                  
  6992                                  ; =============== S U B	R O U T	I N E =======================================
  6993                                  
  6994                                  ; 15/10/2022
  6995                                  ; 30/12/2018 - Retro DOS v4.0
  6996                                  
  6997                                  ; al = device number
  6998                                  
  6999                                  print_init:	
  7000 000020A0 98                      		cbw
  7001 000020A1 89C2                    		mov	dx, ax
  7002 000020A3 B401                    		mov	ah, 1
  7003 000020A5 CD17                    		int	17h		; PRINTER - INITIALIZE
  7004                                  					; DX = printer port (0-3)
  7005                                  					; Return: AH = status
  7006                                  got_end_of_bds_chain:	; 18/12/2022
  7007 000020A7 C3                      		retn
  7008                                  
  7009                                  ; =============== S U B	R O U T	I N E =======================================
  7010                                  
  7011                                  ; al = device number
  7012                                  
  7013                                  aux_init:
  7014 000020A8 98                      		cbw
  7015 000020A9 89C2                    		mov	dx, ax
  7016                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  7017                                  					; 2400,n,1,8 (msequ.inc)
  7018                                  		;mov	ah, 0
  7019                                  		; 10/12/2022
  7020 000020AB B8A300                  		mov	ax, 00A3h
  7021 000020AE CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  7022                                  					; 	AL = initializing parameters,
  7023                                  					;	DX = port number (0-3)
  7024                                  					; Return: AH = RS-232 status code bits,
  7025                                  					;	  AL = modem status bits
  7026 000020B0 C3                      		retn
  7027                                  
  7028                                  ; =============== S U B	R O U T	I N E =======================================
  7029                                  
  7030                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  7031                                  ; 30/12/2018 - Retro DOS v4.0
  7032                                  ; 03/06/2018 - Retro DOS v3.0
  7033                                  ; (19/03/2018 - Retro DOS v2.0)
  7034                                  
  7035                                  ; domini **********************************************************************
  7036                                  ;
  7037                                  ;mini disk initialization routine. called right after dohard
  7038                                  ;modified for >2 hardfile support
  7039                                  ;
  7040                                  ; **cs=ds=es=datagrp
  7041                                  ;
  7042                                  ; **domini will search for every extended partition in the system, and
  7043                                  ;   initialize it.
  7044                                  ;
  7045                                  ; **bdsm stands for bds table for mini disk and located right after the label
  7046                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  7047                                  ;   address of bdsm table.
  7048                                  ;
  7049                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  7050                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  7051                                  ;   right now, they are called as ismini, hidden_trks respectively.
  7052                                  ;
  7053                                  ; **domini will use the same routine in sethard routine after label set2 to
  7054                                  ;   save coding.
  7055                                  ;
  7056                                  ; **drvmax determined in dohard routine will be used for the next
  7057                                  ;   available logical mini disk drive number.
  7058                                  ;
  7059                                  ; input: drvmax, dskdrvs
  7060                                  ;
  7061                                  ; output: minidisk installed. bdsm table established and installed to bds.
  7062                                  ;	  end_of_bdsm - ending offset address of bdsm.
  7063                                  ;
  7064                                  ; called modules:
  7065                                  ;		  getboot
  7066                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  7067                                  ;
  7068                                  ;		  setmini (new, it will use set2 routine)
  7069                                  ;
  7070                                  ; variables used: end_of_bdsm
  7071                                  ;		  rom_minidisk_num
  7072                                  ;		  mini_hdlim, mini_seclim
  7073                                  ;		  BDS_STRUC, start_bds
  7074                                  ;
  7075                                  ;******************************************************************************
  7076                                  
  7077                                  		; 18/12/2023
  7078                                  		; 19/10/2022
  7079                                  domini:
  7080 000020B1 8A36[3917]              		mov	dh, [hnum]	; get number of hardfiles
  7081                                  		; 10/12/2022
  7082 000020B5 20F6                    		and	dh, dh
  7083                                  		;cmp	dh, 0
  7084 000020B7 742F                    		jz	short dominiret	; no hard file?	then exit.
  7085 000020B9 B280                    		mov	dl, 80h		; start	with hardfile 80h
  7086                                  domini_loop:
  7087 000020BB 52                      		push	dx
  7088 000020BC 8816[3817]              		mov	[rom_minidisk_num], dl
  7089 000020C0 B408                    		mov	ah, 8
  7090 000020C2 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7091                                  					; DL = drive number
  7092                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7093                                  					; DL = number of consecutive drives
  7094                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7095 000020C4 FEC6                    		inc	dh
  7096 000020C6 31C0                    		xor	ax, ax
  7097 000020C8 88F0                    		mov	al, dh
  7098 000020CA A3[3E17]                		mov	[mini_hdlim], ax ; # of heads
  7099 000020CD 80E13F                  		and	cl, 3Fh
  7100 000020D0 88C8                    		mov	al, cl
  7101 000020D2 A3[4017]                		mov	[mini_seclim], ax ; # of sectors/track
  7102                                  
  7103                                  		; 18/12/2023
  7104                                  		;push	es ; * ; not necessary
  7105 000020D5 8A16[3817]              		mov	dl, [rom_minidisk_num]
  7106 000020D9 E8B0FB                  		call	getboot		; read master boot record into
  7107                                  					; initbootsegment:bootbias
  7108 000020DC 7203                    		jc	short domininext
  7109 000020DE E80800                  		call	find_mini_partition
  7110                                  domininext:
  7111                                  		;pop	es ; *
  7112 000020E1 5A                      		pop	dx
  7113 000020E2 FEC2                    		inc	dl		; next hard file
  7114 000020E4 FECE                    		dec	dh
  7115 000020E6 75D3                    		jnz	short domini_loop
  7116                                  dominiret:
  7117 000020E8 C3                      		retn
  7118                                  
  7119                                  ; =============== S U B	R O U T	I N E =======================================
  7120                                  
  7121                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  7122                                  ; 30/12/2018 - Retro DOS v4.0
  7123                                  
  7124                                  ;find_mini_partition tries to find every extended partition on a disk.
  7125                                  ;at entry:	di -> bdsm entry
  7126                                  ;		es:bx -> 07c0:bootbias - master boot record
  7127                                  ;		rom_minidisk_num - rom drive number
  7128                                  ;		drvmax - logical drive number
  7129                                  ;		mini_hdlim, mini_seclim
  7130                                  ;
  7131                                  ;called routine: setmini which uses set2 (in sethard routine)
  7132                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  7133                                  
  7134                                  
  7135                                  find_mini_partition:	
  7136 000020E9 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  7137                                  fmpnext:				
  7138 000020ED 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  7139 000020F1 740A                    		jz	short fmpgot
  7140 000020F3 83C310                  		add	bx, 16
  7141 000020F6 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7142 000020FA 75F1                    		jnz	short fmpnext
  7143                                  		;jmp	short fmpnextfound ; extended partition	not found
  7144                                  		; 18/12/2022
  7145                                  fmpnextfound:
  7146 000020FC C3                      		retn
  7147                                  
  7148                                  ;		; 30/07/2019 - Retro DOS v3.2
  7149                                  ;		jb	short fmpnext
  7150                                  ;fmpret:
  7151                                  ;		retn	; 29/05/2019
  7152                                  
  7153                                  ; ---------------------------------------------------------------------------
  7154                                  
  7155                                  		; 19/10/2022
  7156                                  fmpgot:					; found my partition.
  7157 000020FD E89D00                  		call	dmax_check	; check	for drvmax already 26
  7158 00002100 73FA                    		jnb	short fmpnextfound ; done if too many
  7159 00002102 8B3E[3C17]              		mov	di, [end_of_bdss] ; get next free bds
  7160 00002106 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  7161                                  		; 10/12/2022
  7162 0000210B 804D2301                		or	byte [di+23h], 1
  7163                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  7164                                  					; fNon_Removable
  7165 0000210F C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  7166                                  					; ffHardFile
  7167 00002113 C606[C216]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  7168 00002118 A1[3E17]                		mov	ax, [mini_hdlim]
  7169 0000211B 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  7170 0000211E A1[4017]                		mov	ax, [mini_seclim]
  7171 00002121 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  7172 00002124 A0[3817]                		mov	al, [rom_minidisk_num]
  7173 00002127 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  7174                                  					; set physical number
  7175 0000212A A0[7500]                		mov	al, [drvmax]
  7176 0000212D 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7177                                  					; set logical number
  7178 00002130 26837F0A00              		cmp	word [es:bx+10], 0
  7179 00002135 7707                    		ja	short fmpgot_cont
  7180 00002137 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  7181                                  					; only lower word is meaningful.
  7182 0000213C 72BE                    		jb	short fmpnextfound
  7183                                  					; should be bigger than 64 sectors at least
  7184                                  fmpgot_cont:				
  7185 0000213E 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  7186 00002141 268A7702                		mov	dh, [es:bx+2]	; cylinder
  7187 00002145 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  7188 00002148 D0C6                    		rol	dh, 1
  7189 0000214A D0C6                    		rol	dh, 1
  7190 0000214C 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  7191 00002150 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  7192                                  					; set hidden trks
  7193 00002153 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  7194 00002157 268A7701                		mov	dh, [es:bx+1]	; head
  7195 0000215B 8A16[3817]              		mov	dl, [rom_minidisk_num]
  7196 0000215F BB0002                  		mov	bx, 200h	; bootbias
  7197 00002162 B80102                  		mov	ax, 201h
  7198 00002165 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7199                                  					; AL = number of sectors to read, CH = track, CL = sector
  7200                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7201                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7202 00002167 7293                    		jc	short fmpnextfound
  7203 00002169 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7204                                  
  7205                                  		; 14/08/2023
  7206                                  		;push	es
  7207 0000216C E80800                  		call	setmini		; install a mini disk.
  7208                                  					; bx value saved.
  7209                                  		;pop	es  ; 14/08/2023
  7210 0000216F 7203                    		jc	short fmpnextchain
  7211 00002171 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  7212                                  fmpnextchain:				
  7213 00002174 E976FF                  		jmp	fmpnext		; let's find out
  7214                                  					; if we	have any chained partition
  7215                                  ; ---------------------------------------------------------------------------
  7216                                  
  7217                                  		; 18/12/2022
  7218                                  ;fmpnextfound:
  7219                                  		;retn
  7220                                  
  7221                                  ; =============== S U B	R O U T	I N E =======================================
  7222                                  
  7223                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7224                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  7225                                  
  7226                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  7227                                  	
  7228 00002177 57                      		push	di
  7229 00002178 53                      		push	bx
  7230                                  		; 14/08/2023
  7231                                  		; ds = cs = BIOSDATA segment
  7232                                  		;push	ds
  7233 00002179 06                      		push	es
  7234                                  setmini_1:				
  7235 0000217A 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  7236 0000217E 741A                    		jz	short setmini_2
  7237 00002180 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  7238 00002184 7414                    		jz	short setmini_2
  7239 00002186 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  7240 0000218A 740E                    		jz	short setmini_2
  7241 0000218C 83C310                  		add	bx, 16
  7242 0000218F 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7243 00002193 75E5                    		jnz	short setmini_1
  7244 00002195 F9                      		stc
  7245 00002196 07                      		pop	es
  7246                                  		; 14/08/2023
  7247                                  		;pop	ds
  7248 00002197 5B                      		pop	bx
  7249 00002198 5F                      		pop	di
  7250 00002199 C3                      		retn
  7251                                  
  7252                                  ; ---------------------------------------------------------------------------
  7253                                  setmini_2:				
  7254 0000219A E98EFB                  		jmp	set2		; branch into middle of sethard
  7255                                  
  7256                                  ; =============== S U B	R O U T	I N E =======================================
  7257                                  
  7258                                  ; 15/10/2022
  7259                                  ; 28/12/2018 - Retro DOS v4.0
  7260                                  ;
  7261                                  ; dmax_check --- call this when we want to install a new drive.
  7262                                  ;		it checks for drvmax < 26 to see if there is
  7263                                  ;		a drive letter left.
  7264                                  ;
  7265                                  ;	drvmax < 26 : carry SET!
  7266                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  7267                                  ;			trash ax
  7268                                  
  7269                                  dmax_check:	
  7270 0000219D 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  7271 000021A2 720D                    		jb	short dmax_ok	; return with carry if okay
  7272 000021A4 06                      		push	es
  7273                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  7274 000021A5 B83304                  		mov	ax, SYSINITSEG	; 17/10/2022	
  7275 000021A8 8EC0                    		mov	es, ax
  7276                                  		; 18/10/2022
  7277 000021AA 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  7278                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  7279                                  					; set message flag
  7280                                  					; [SYSINIT+toomanydrivesflag]
  7281 000021B0 07                      		pop	es
  7282                                  
  7283                                  		;;push	es
  7284                                  		;;mov	ax,SYSINIT_SEG
  7285                                  		;;mov	es,ax
  7286                                  		;;mov	byte [es:toomanydrivesflag],1
  7287                                  					; set message flag
  7288                                  		;;pop	es
  7289                                  		;
  7290                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  7291                                  dmax_ok:				
  7292 000021B1 C3                      		retn
  7293                                  
  7294                                  ; =============== S U B	R O U T	I N E =======================================
  7295                                  
  7296                                  ; 18/10/2022
  7297                                  ; 15/10/2022
  7298                                  ; 28/12/2018 - Retro DOS v4.0						
  7299                                  ;								 
  7300                                  ;	link next bds (at ds:di) into the chain. assume that the
  7301                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  7302                                  ;	  dskdrv_table, and end_of_bdss.	
  7303                                  
  7304                                  xinstall_bds:		
  7305 000021B2 56                      		push	si
  7306 000021B3 53                      		push	bx
  7307 000021B4 8B36[1901]              		mov	si, [start_bds]	; get first bds
  7308                                  xinstall_bds_1:				
  7309 000021B8 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  7310 000021BB 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  7311                                  		;mov	si, [si+BDS.link]
  7312 000021BD 8B34                    		mov	si, [si]	; chain	through	list
  7313 000021BF EBF7                    		jmp	short xinstall_bds_1
  7314                                  ; ---------------------------------------------------------------------------
  7315                                  
  7316                                  xinstall_bds_2:				
  7317                                  		;mov	[si+BDS.link], di
  7318 000021C1 893C                    		mov	[si], di
  7319                                  		;mov	[si+BDS.link+2], ds
  7320 000021C3 8C5C02                  		mov	[si+2], ds
  7321                                  		;mov	word [di+BDS.link], -1
  7322 000021C6 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  7323                                  		;mov	[di+BDS.link+2], ds
  7324 000021CA 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  7325                                  		; 20/03/2019 - Retro DOS v4.0
  7326                                  		;lea	bx, [di+BDS.BPB]
  7327 000021CD 8D5D06                  		lea	bx, [di+6]
  7328 000021D0 8B36[3A17]              		mov	si, [last_dskdrv_table]
  7329 000021D4 891C                    		mov	[si], bx
  7330 000021D6 8306[3A17]02            		add	word [last_dskdrv_table], 2
  7331 000021DB FE06[7500]              		inc	byte [drvmax]
  7332 000021DF 8306[3C17]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  7333 000021E4 5B                      		pop	bx
  7334 000021E5 5E                      		pop	si
  7335 000021E6 C3                      		retn
  7336                                  
  7337                                  ; =============== S U B	R O U T	I N E =======================================
  7338                                  
  7339                                  ; 17/10/2022
  7340                                  ; 15/10/2022
  7341                                  ; 28/12/2018 - Retro DOS v4.0
  7342                                  ; 03/06/2018 - Retro DOS v3.0
  7343                                  
  7344                                  		; 19/12/2023
  7345                                  cmos_clock_read:	
  7346 000021E7 50                      		push	ax
  7347 000021E8 51                      		push	cx
  7348 000021E9 52                      		push	dx
  7349 000021EA 55                      		push	bp
  7350 000021EB 31ED                    		xor	bp, bp
  7351                                  loop_clock:
  7352 000021ED 31C9                    		xor	cx, cx
  7353 000021EF 31D2                    		xor	dx, dx
  7354 000021F1 B402                    		mov	ah, 2
  7355 000021F3 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  7356                                  					; Return: CH = hours in	BCD
  7357                                  					; CL = minutes in BCD
  7358                                  					; DH = seconds in BCD
  7359 000021F5 83F900                  		cmp	cx, 0
  7360 000021F8 7512                    		jnz	short clock_present
  7361 000021FA 83FA00                  		cmp	dx, 0
  7362 000021FD 750D                    		jnz	short clock_present
  7363 000021FF 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  7364 00002202 741B                    		jz	short no_readdate ; was	at zero	setting.
  7365 00002204 45                      		inc	bp		; only perform delay once.
  7366 00002205 B90040                  		mov	cx, 4000h	; 16384
  7367                                  delay:
  7368 00002208 E2FE                    		loop	delay
  7369 0000220A EBE1                    		jmp	short loop_clock
  7370                                  ; ---------------------------------------------------------------------------
  7371                                  
  7372                                  clock_present:
  7373                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  7374                                  		; 19/12/2023
  7375                                  		; ds = cs
  7376 0000220C C606[EC04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
  7377                                  		
  7378 00002211 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  7379                                  					; possibly destroyed by	cp dos and
  7380                                  					; post routine did not restore that.
  7381 00002214 56                      		push	si
  7382 00002215 E807F3                  		call	read_real_date	; read real-time clock for date
  7383 00002218 FA                      		cli
  7384                                  		;mov	ds:daycnt, si	; set system date
  7385 00002219 8936[E904]              		mov	[daycnt], si
  7386 0000221D FB                      		sti
  7387 0000221E 5E                      		pop	si
  7388                                  no_readdate:
  7389 0000221F 5D                      		pop	bp
  7390 00002220 5A                      		pop	dx
  7391 00002221 59                      		pop	cx
  7392 00002222 58                      		pop	ax
  7393                                  cmosck9:	; 19/12/2023
  7394 00002223 C3                      		retn
  7395                                  
  7396                                  ; ---------------------------------------------------------------------------
  7397                                  
  7398                                  ; the following code is written by jack gulley in engineering group.
  7399                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  7400                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  7401                                  ; the cmos clock rate are still slow which slow down disk operations
  7402                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  7403                                  ; to fix this problem at the request of cp dos.
  7404                                  ;
  7405                                  ; the program is modified to be run on msinit. equates are defined
  7406                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  7407                                  ;
  7408                                  ;  the following code cmosck is used to insure that the cmos has not
  7409                                  ;	had its rate controls left in an invalid state on older at's.
  7410                                  ;
  7411                                  ;	it checks for an at model byte "fc" with a submodel type of
  7412                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  7413                                  ;	bits in case post has not done it. this initialization routine
  7414                                  ;	is only needed once when dos loads. it should be run as soon
  7415                                  ;	as possible to prevent slow diskette access.
  7416                                  ;
  7417                                  ;	this code exposes one to dos clearing cmos setup done by a
  7418                                  ;	resident program that hides and re-boots the system.
  7419                                  
  7420                                  cmosck:					; check and reset rtc rate bits
  7421                                  
  7422                                  ;model byte and submodel byte were already determined in msinit.
  7423                                  
  7424                                  	; 16/06/2018 - Retro DOS v3.0
  7425                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7426                                  
  7427                                  		; 19/12/2023
  7428                                  		; ds = cs
  7429                                  		;push	ax ; not necessary ; 19/12/2023
  7430                                  		;
  7431 00002224 803E[3506]FC            		cmp	byte [model_byte], 0FCh
  7432                                  		;cmp	byte [cs:model_byte], 0FCh
  7433 00002229 75F8                    		jnz	short cmosck9	; Exit if not an AT model
  7434 0000222B 2E803E[3606]06          		cmp	byte [cs:secondary_model_byte], 6
  7435                                  		;cmp	byte [cs:secondary_model_byte], 6
  7436                                  					; Is it 06 for the industral AT ?
  7437 00002231 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  7438 00002233 803E[3606]04            		cmp	byte [secondary_model_byte], 4
  7439                                  		;cmp	byte [cs:secondary_model_byte], 4
  7440                                  					; Is it 00, 01, 02, or 03 ?
  7441 00002238 73E9                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  7442                                  					; Also,Secondary_model_byte = 0
  7443                                  					;   when AH=0C0h, int 15h failed.
  7444                                  					;	RESET THE CMOS PERIODIC RATE
  7445                                  					;  Model=FC submodel=00,01,02,03 or 06
  7446                                  cmosck4:
  7447 0000223A B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7448                                  					; NMI disabled on return
  7449 0000223C B426                    		mov	ah, 26h		; 00100110b
  7450                                  					; Set divider & rate selection
  7451 0000223E E80B00                  		call	cmos_write
  7452 00002241 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7453                                  					; NMI disabled on return
  7454 00002243 E82000                  		call	cmos_read
  7455 00002246 2407                    		and	al, 7		; 00000111b
  7456                                  					; clear SET,PIE,AIE,UIE,SQWE
  7457 00002248 88C4                    		mov	ah, al
  7458 0000224A B00B                    		mov	al, 0Bh		; cmos_reg_b
  7459                                  					; NMI enabled on return
  7460                                  		; 19/12/2023
  7461                                  		;call	cmos_write
  7462                                  ;cmosck9:
  7463                                  		;pop	ax ; 19/12/2023
  7464                                  		;retn
  7465                                  
  7466                                  		; 19/12/2023
  7467                                  		;jmp	short cmos_write
  7468                                  
  7469                                  ; =============== S U B	R O U T	I N E =======================================
  7470                                  
  7471                                  ;--- cmos_write ----------------------------------------------------------------
  7472                                  ;		write byte to cmos system clock configuration table	       :
  7473                                  ;									       :
  7474                                  ; input: (al)=	cmos table address to be written to			       :
  7475                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7476                                  ;		bits 6-0 = address of table location to write		       :
  7477                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7478                                  ;									       :
  7479                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7480                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7481                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7482                                  ;		the cmos address register is pointed to a default value and    :
  7483                                  ;		the interrupt flag restored to the entry state on return.      :
  7484                                  ;		only the cmos location and the nmi state is changed.	       :
  7485                                  ;-------------------------------------------------------------------------------
  7486                                  
  7487                                  cmos_write:				; write (ah) to location (al)
  7488 0000224C 9C                      		pushf			;
  7489 0000224D 50                      		push	ax		; save work register values
  7490 0000224E FA                      		cli
  7491 0000224F 50                      		push	ax		; save user nmi	state
  7492 00002250 0C80                    		or	al, 80h		; disable nmi for us
  7493 00002252 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7494                                  					; RTC Seconds
  7495 00002254 90                      		nop
  7496 00002255 88E0                    		mov	al, ah
  7497 00002257 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7498 00002259 58                      		pop	ax		; get user nmi
  7499 0000225A 2480                    		and	al, 80h
  7500 0000225C 0C0F                    		or	al, 0Fh
  7501 0000225E E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7502                                  					; RTC Seconds
  7503 00002260 90                      		nop
  7504 00002261 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7505 00002263 58                      		pop	ax		; restore work registers
  7506                                  
  7507                                  		; 19/12/2023
  7508                                  		;push	cs		; *place code segment in stack and
  7509                                  		;call	cmos_popf	; *handle popf for b- level 80286
  7510                                  		;retn
  7511 00002264 EB18                    		jmp	short cmos_rw_popf
  7512                                  
  7513                                  ; =============== S U B	R O U T	I N E =======================================
  7514                                  
  7515                                  ;--- CMOS_READ -----------------------------------------------------------------
  7516                                  ;		read byte from cmos system clock configuration table	       :
  7517                                  ;									       :
  7518                                  ; input: (al)=	cmos table address to be read				       :
  7519                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7520                                  ;		bits 6-0 = address of table location to read		       :
  7521                                  ;									       :
  7522                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7523                                  ;		on then nmi left disabled. during the cmos read both nmi and  :
  7524                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7525                                  ;		the cmos address register is pointed to a default value and    :
  7526                                  ;		the interrupt flag restored to the entry state on return.      :
  7527                                  ;		only the (al) register and the nmi state is changed.	       :
  7528                                  ;-------------------------------------------------------------------------------
  7529                                  
  7530                                  cmos_read:				; read location (al) into (al)
  7531 00002266 9C                      		pushf
  7532 00002267 FA                      		cli
  7533 00002268 53                      		push	bx
  7534                                  		;push	ax ; *		; AL = cmos table address to be read
  7535                                  		; 19/12/2023
  7536 00002269 89C3                    		mov	bx, ax ; * ; input
  7537 0000226B 0C80                    		or	al, 80h
  7538 0000226D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7539                                  					; RTC Seconds
  7540 0000226F 90                      		nop			; (undocumented delay needed)
  7541 00002270 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7542                                  		
  7543                                  		;mov	bx, ax ; output
  7544                                  		;pop	ax ; * ; input
  7545                                  
  7546                                  		; 19/12/2023
  7547                                  		; al = output, bl = input
  7548 00002272 93                      		xchg	ax, bx ; *
  7549                                  		; bl = output, al = input
  7550                                  	
  7551 00002273 2480                    		and	al, 80h
  7552 00002275 0C0F                    		or	al, 0Fh
  7553 00002277 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7554                                  					; RTC Seconds
  7555 00002279 90                      		nop
  7556 0000227A E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7557                                  		;mov	ax, bx ; * ; output
  7558                                  		; 19/12/2023
  7559 0000227C 93                      		xchg	ax, bx
  7560 0000227D 5B                      		pop	bx
  7561                                  
  7562                                  		; 19/12/2023
  7563                                  cmos_rw_popf:
  7564 0000227E 0E                      		push	cs		; *place code segment in stack and
  7565 0000227F E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7566 00002282 C3                      		retn			; return with flags restored
  7567                                  
  7568                                  ; ---------------------------------------------------------------------------
  7569                                  
  7570                                  cmos_popf:				
  7571 00002283 CF                      		iret			; popf for level b- parts
  7572                                  					; return far and restore flags
  7573                                  
  7574                                  ; 21/12/2022
  7575                                  ; ---------------------------------------------------------------------------
  7576                                  ; ---------------------------------------------------------------------------
  7577                                  %if 0
  7578                                  
  7579                                  ; ---------------------------------------------------------------------------
  7580                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7581                                  ; ---------------------------------------------------------------------------
  7582                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7583                                  ; ---------------------------------------------------------------------------
  7584                                  
  7585                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7586                                  ;
  7587                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7588                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7589                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7590                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7591                                  
  7592                                  ; =============== S U B	R O U T	I N E =======================================
  7593                                  
  7594                                  ; GetClus, read in a cluster at a specified address
  7595                                  ;
  7596                                  ;  bx = cluster to read
  7597                                  ;  cx = sectors per cluster
  7598                                  ;  es:di = load location
  7599                                  
  7600                                  ; 17/10/2022
  7601                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7602                                  ; 09/12/2022
  7603                                  DISKRD equ diskrd
  7604                                  
  7605                                  		; 17/10/2022
  7606                                  getclus:
  7607                                  		; 14/12/2023
  7608                                  		; 13/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0 IO.SYS)
  7609                                  		; ds = cs
  7610                                  
  7611                                  		push	cx
  7612                                  		push	di
  7613                                  		;mov	[cs:doscnt], cx
  7614                                  		mov	[doscnt], cx ; 13/12/2023
  7615                                  		mov	ax, bx
  7616                                  		dec	ax
  7617                                  		dec	ax
  7618                                  		mul	cx		; convert to logical sector
  7619                                  					; dx:ax	= matching logical sector number
  7620                                  					;	  starting from the data sector
  7621                                  		;add	ax, [cs:bios_l]
  7622                                  		;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7623                                  		; 13/12/2023
  7624                                  		add	ax, [bios_l]
  7625                                  		adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
  7626                                  unpack:
  7627                                  		push	ds ; ds = cs ; 13/12/2023
  7628                                  		push	dx ; * ; 13/12/2023
  7629                                  		push	ax
  7630                                  		push	bx
  7631                                  		;mov	si, [cs:fatloc]
  7632                                  		mov	si, [fatloc] ; 13/12/2023
  7633                                  		mov	ds, si
  7634                                  		mov	si, bx		; next cluster
  7635                                  		test	byte [cs:fbigfat], 40h	; fbig
  7636                                  					; 16 bit fat?
  7637                                  		jnz	short unpack16	; yes
  7638                                  		shr	si, 1		; 12 bit fat. si=si/2
  7639                                  					; si = clus + clus/2
  7640                                  		add	si, bx		;
  7641                                  					; (si =	byte offset of the cluster in the FAT)
  7642                                  		;push	dx ; 13/12/2023
  7643                                  		xor	dx, dx
  7644                                  		; 12/12/2023
  7645                                  		; ds = FAT buffer segment
  7646                                  		call	get_fat_sector
  7647                                  		;pop	dx ; 12/12/2023
  7648                                  
  7649                                  		mov	ax, [bx]	; save it into ax
  7650                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7651                                  		; 25/06/2023
  7652                                  		;mov	al, [bx]	; splitted fat
  7653                                  
  7654                                  		; 13/12/2023
  7655                                  		;mov	[cs:temp_cluster], al
  7656                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
  7657                                  
  7658                                  		inc	si		; (next	byte)
  7659                                  
  7660                                  		;push	dx ; 13/12/2023
  7661                                  		xor	dx, dx
  7662                                  		call	get_fat_sector
  7663                                  		;pop	dx ; 13/12/2023
  7664                                  
  7665                                  		;mov	al, ds:0
  7666                                  		; 13/12/2023
  7667                                  		; ds = FAT buffer segment
  7668                                  		;mov	al, [0] ; 19/10/2022
  7669                                  		;mov	[cs:temp_cluster+1], al
  7670                                  		;mov	ax, [cs:temp_cluster]
  7671                                  		; 13/12/2023
  7672                                  		;mov	al, [cs:temp_cluster]
  7673                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
  7674                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
  7675                                  even_odd:
  7676                                  		pop	bx		; restore old fat entry	value
  7677                                  		push	bx		; save it right	away.
  7678                                  		shr	bx, 1		; was it even or odd?
  7679                                  		jnb	short havclus	; it was even.
  7680                                  		shr	ax, 1		; odd. massage fat value and keep
  7681                                  					; the highest 12 bits.
  7682                                  		shr	ax, 1
  7683                                  		shr	ax, 1
  7684                                  		shr	ax, 1
  7685                                  havclus:
  7686                                  		mov	bx, ax		; now bx = new fat entry.
  7687                                  		and	bx, 0FFFh	; keep low 12 bits.
  7688                                  		jmp	short unpackx
  7689                                  ; ---------------------------------------------------------------------------
  7690                                  
  7691                                  unpack16:
  7692                                  		;push	dx	; 13/12/2023
  7693                                  		xor	dx, dx ; 0
  7694                                  		shl	si, 1		; extend to 32 bit offset
  7695                                  		;adc	dx, 0
  7696                                  		; 13/12/2023
  7697                                  		rcl	dx, 1
  7698                                  
  7699                                  		; 13/12/2023
  7700                                  		; ds = FAT buffer segment
  7701                                  		call	get_fat_sector
  7702                                  		;pop	dx	; 13/12/2023
  7703                                  		mov	bx, [bx]	;
  7704                                  					; bx = new fat entry.
  7705                                  unpackx:
  7706                                  		pop	si		; restore old bx value into si
  7707                                  		pop	ax		; restore logical sector (low)
  7708                                  		pop	dx ; * ; 13/12/2023
  7709                                  		pop	ds
  7710                                  		; 13/12/2023
  7711                                  		; (this is a fast kernel loading method by the MSDOS programmer)
  7712                                  		; ((consequtive clusters --> consequtive sectors))
  7713                                  		; ds = cs
  7714                                  		sub	si, bx
  7715                                  		cmp	si, -1		; one apart? (consequtive?)
  7716                                  					; (current = previous+1)
  7717                                  		jnz	short getcl2	; no, read [doscnt] sectors 
  7718                                  		;add	[cs:doscnt], cx
  7719                                  		add	[doscnt], cx ; 13/12/2023 ; add to read count
  7720                                  		jmp	short unpack
  7721                                  ; ---------------------------------------------------------------------------
  7722                                  
  7723                                  getcl2:
  7724                                  		push	bx
  7725                                  		push	dx		; sector to read (high)
  7726                                  		push	ax		; sector to read (low)
  7727                                  
  7728                                  		; 13/12/2023
  7729                                  		; ds = cs
  7730                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
  7731                                  		;mov	cx, [cs:doscnt]
  7732                                  		mov	ax, [drvfat]	; get drive and	fat spec
  7733                                  		mov	cx, [doscnt]
  7734                                  
  7735                                  		pop	dx		; sector to read for diskrd (low)
  7736                                  		;pop	word [cs:start_sec_h]
  7737                                  		; 13/12/2023
  7738                                  		pop	word [start_sec_h]
  7739                                  					; sector to read for diskrd (high)
  7740                                  		; 13/12/2023
  7741                                  		; ds = cs
  7742                                  		;push	ds
  7743                                  		;push	cs
  7744                                  		;pop	ds
  7745                                  
  7746                                  		push	cs		; simulate far call
  7747                                  		; 17/10/2022
  7748                                  		mov	bp, DISKRD	; 8E5h
  7749                                  		;mov	bp, 8E5h	; offset diskrd
  7750                                  					; 2C7h:8E5h = 70h:2E55h
  7751                                  		call	call_bios_code	; read the clusters
  7752                                  		
  7753                                  		;pop	ds
  7754                                  		; 13/12/2023
  7755                                  		; ds = cs
  7756                                  		pop	bx
  7757                                  		pop	di
  7758                                  
  7759                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
  7760                                  		; 13/12/2023
  7761                                  		mov	ax, [doscnt]
  7762                                  		xchg	ah, al		; multiply by 256
  7763                                  		shl	ax, 1		; times	2 equal	512
  7764                                  		add	di, ax		; update load location
  7765                                  		pop	cx		; restore sectors/cluster
  7766                                  		retn
  7767                                  
  7768                                  ; =============== S U B	R O U T	I N E =======================================
  7769                                  
  7770                                  
  7771                                  ;function: find and read the corresponding fat sector into ds:0
  7772                                  ;
  7773                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7774                                  ;     ds - fatloc segment
  7775                                  ;     cs:drvfat - logical drive number, fat id
  7776                                  ;     cs:md_sectorsize
  7777                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7778                                  ;
  7779                                  ;out). corresponding fat sector read in.
  7780                                  ;      bx = offset value from fatlog segment.
  7781                                  ;      other registera saved.
  7782                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7783                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7784                                  ;      should save this byte, and read the next fat sector to get the rest
  7785                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7786                                  
  7787                                  		; 17/10/2022
  7788                                  get_fat_sector:
  7789                                  		; 14/12/2023
  7790                                  		; 13/12/2023
  7791                                  		; ds = fat buffer segment
  7792                                  
  7793                                  		; 13/12/2023
  7794                                  		;push	ax ; (not necessary)
  7795                                  		push	cx ; read count (sectors per cluster)
  7796                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
  7797                                  		push	si ; FAT offset value (from fat entry 0)
  7798                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
  7799                                  		push	ds ; FAT buffer segment
  7800                                  
  7801                                  		; 13/12/2023
  7802                                  		push	cs
  7803                                  		pop	ds
  7804                                  
  7805                                  		mov	ax, si
  7806                                  		;;mov	cx, [cs:md_sectorsize] ; 512
  7807                                  		; 13/12/2023
  7808                                  		;mov	cx, [md_sectorsize] ; 512
  7809                                  		;div	cx		; ax = sector number, dx = offset
  7810                                  		; 13/12/2023
  7811                                  		;nop
  7812                                  
  7813                                  		; 13/12/2023
  7814                                  		div	word [md_sectorsize] ; 512
  7815                                  
  7816                                  		; ax = FAT sector (sequence/index) number
  7817                                  		; dx = cluster number offset
  7818                                  
  7819                                  		; Get rid of the assumption that
  7820                                  		; there	is only	one reserved sector
  7821                                  
  7822                                  		; 13/12/2023 ; *
  7823                                  		;push	es ; *
  7824                                  		;push	ds ; *
  7825                                  		;push	di ; *
  7826                                  		push	ax
  7827                                  		;push	cs ; *
  7828                                  		;pop	ds ; *
  7829                                  
  7830                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
  7831                                  		; 13/12/2023
  7832                                  		mov	ax, [drvfat]	; get drive # and FAT id 
  7833                                  		mov	bp, SETDRIVE
  7834                                  		;;mov	bp, 4D7h	; setdrive
  7835                                  					; at 2C7h:4D7h = 70h:2A47h
  7836                                  		push	cs		; simulate far call
  7837                                  		call	call_bios_code	; get bds for drive
  7838                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7839                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7840                                  					; add #reserved_sectors
  7841                                  		; 13/12/2023
  7842                                  		;pop	di ; *
  7843                                  		;pop	ds ; *
  7844                                  		;pop	es ; *
  7845                                  
  7846                                  		; 13/12/2023
  7847                                  		; ds = cs
  7848                                  		cmp	ax, [last_fat_sec_num]
  7849                                  		;cmp	ax, [cs:last_fat_sec_num]
  7850                                  		jz	short gfs_split_chk ; don't need to read it again.
  7851                                  		mov	[last_fat_sec_num], ax
  7852                                  		;mov	[cs:last_fat_sec_num], ax
  7853                                  					; sector number
  7854                                  					; (in the partition, without hidden sectors)
  7855                                  		; 13/12/2023
  7856                                  		pop	es ; FAT buffer segment (DS on top of the stack)
  7857                                  		push	es ; (put it on top of the stack again)
  7858                                  
  7859                                  		push	dx ; cluster number offset
  7860                                  
  7861                                  		; 13/12/2023
  7862                                  		xor	cx, cx
  7863                                  		mov	[start_sec_h], cx ;0 
  7864                                  		;mov	word [cs:start_sec_h], 0 
  7865                                  					; prepare to read the fat sector
  7866                                  					; start_sec_h is always	0 for fat sector.
  7867                                  		mov	dx, ax
  7868                                  		; 13/12/2023
  7869                                  		inc	cx ; cx = 1
  7870                                  		;mov	cx, 1		; 1 sector read
  7871                                  		;mov	ax, [cs:drvfat]
  7872                                  		mov	ax, [drvfat]
  7873                                  		;push	ds
  7874                                  		;pop	es
  7875                                  
  7876                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
  7877                                  		
  7878                                  		; 13/12/2023
  7879                                  		;push	ds
  7880                                  		;push	cs
  7881                                  		;pop	ds
  7882                                  		
  7883                                  		push	cs		; simulate far call
  7884                                  		mov	bp, DISKRD	; 8E5h
  7885                                  		;mov	bp, 8E5h	; offset diskrd
  7886                                  					; 2C7h:8E5h = 70h:2E55h
  7887                                  		call	call_bios_code
  7888                                  
  7889                                  		; 13/12/2023
  7890                                  		;pop	ds
  7891                                  		; ds = cs = biosdata segment
  7892                                  
  7893                                  		pop	dx ; cluster number offset 
  7894                                  
  7895                                  gfs_split_chk:
  7896                                  		; 13/12/2023
  7897                                  		;mov	cx, [cs:md_sectorsize] ; 512
  7898                                  		mov	cx, [md_sectorsize]
  7899                                  ;gfs_split_chk:
  7900                                  		dec	cx		; 511
  7901                                  		cmp	dx, cx		; if offset points to the
  7902                                  					; last byte of this sector,
  7903                                  					; then splitted	entry.
  7904                                  		mov	bx, dx		; set bx to dx
  7905                                  		
  7906                                  		; 13/12/2023
  7907                                  		; bx = dx = cluster number offset in the FAT buffer
  7908                                  		pop	ds ; FAT buffer segment
  7909                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
  7910                                  		pop	si ; FAT offset value (from fat entry 0)
  7911                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
  7912                                  		pop	cx ; read count (sectors per cluster)
  7913                                  		;pop	ax
  7914                                  
  7915                                  		retn
  7916                                  ; 15/10/2022
  7917                                  ;Bios_Data_Init	ends
  7918                                  
  7919                                  %endif
  7920                                  ; ---------------------------------------------------------------------------
  7921                                  ; ---------------------------------------------------------------------------
  7922                                  
  7923                                  		; 09/12/2022
  7924                                  		;db 0
  7925                                  
  7926                                  numbertodiv	equ ($-BData_start)
  7927                                  numbertomod	equ (numbertodiv % 16)
  7928                                  
  7929                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
  7930 00002284 00<rep Ch>              		times (16-numbertomod) db 0
  7931                                  %endif
  7932                                  
  7933                                  ;align 16
  7934                                  
  7935                                  ; 09/12/2022
  7936                                  IOSYSCODESEGOFF equ $ - BData_start
  7937                                  ; 29/09/2023
  7938                                  ;IOSYSCODESEGOFF equ $-$$
  7939                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7940                                  
  7941                                  ; 28/09/2023
  7942                                  S1SIZE equ $-$$
  7943                                  
  7944                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7945                                  ; ---------------------------------------------------------------------------
  7946                                  		;db 4 dup(0)
  7947                                  ; 09/12/2022		
  7948                                  ;		times 4 db 0	; 19/10/2022
  7949                                  ; ---------------------------------------------------------------------------
  7950                                  
  7951                                  ;============================================================================
  7952                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7953                                  ;============================================================================
  7954                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7955                                  
  7956                                  section .BIOSCODE vstart=0  
  7957                                  
  7958                                  BCode_start:	 ; 09/12/2022
  7959                                   
  7960                                  ; 02/10/2022
  7961                                  
  7962                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7963                                  ;----------------------------------------------------------------------------
  7964                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7965                                  ;----------------------------------------------------------------------------
  7966                                  
  7967                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7968 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7969 00000030 7000                    BiosDataWord:	dw 70h
  7970                                  
  7971                                  ; 15/10/2022
  7972                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7973                                  ; 09/12/2022
  7974                                  BIOSDATAWORD	equ BiosDataWord
  7975                                  
  7976                                  ; ---------------------------------------------------------------------------
  7977                                  
  7978                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7979                                  
  7980                                  ;************************************************************************
  7981                                  ;*									*
  7982                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7983                                  ;*	  trashes di, cx, es						*
  7984                                  ;*									*
  7985                                  ;*	cas -- should be made disposable!				*
  7986                                  ;*									*
  7987                                  ;************************************************************************
  7988                                  
  7989                                  _seg_reinit:
  7990 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7991                                  					; at 2C7h:30h or 70h:25A0h
  7992                                  		;mov	di, (offset cdev+2)
  7993 00000037 BF[D706]                		mov	di, cdev+2	; 19/10/2022
  7994 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7995                                  
  7996                                  _seg_reinit_1:				
  7997 0000003D AB                      		stosw			; modify Bios_Code entry points
  7998 0000003E 47                      		inc	di
  7999 0000003F 47                      		inc	di
  8000 00000040 E2FB                    		loop	_seg_reinit_1
  8001 00000042 CB                      		retf
  8002                                  
  8003                                  ; ---------------------------------------------------------------------------
  8004                                  
  8005                                  ; 15/10/2022
  8006                                  
  8007                                  ;************************************************************************
  8008                                  ;*									*
  8009                                  ;*	chardev_entry - main device driver dispatch routine		*
  8010                                  ;*	   called with a dummy parameter block on the stack		*
  8011                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  8012                                  ;*									*
  8013                                  ;*	will eventually take care of doing the transitions in		*
  8014                                  ;*	   out of Bios_Code						*
  8015                                  ;*									*
  8016                                  ;************************************************************************
  8017                                  
  8018                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  8019 00000043 56                      		push	si
  8020 00000044 50                      		push	ax
  8021 00000045 51                      		push	cx
  8022 00000046 52                      		push	dx
  8023 00000047 57                      		push	di
  8024 00000048 55                      		push	bp
  8025 00000049 1E                      		push	ds
  8026 0000004A 06                      		push	es
  8027 0000004B 53                      		push	bx
  8028 0000004C 89E5                    		mov	bp, sp
  8029 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  8030                                  		;;mov	ds, word [cs:0030h]
  8031                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  8032 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  8033 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  8034 00000059 A2[2100]                		mov	[auxnum], al
  8035 0000005C 8826[E004]              		mov	[printdev], ah
  8036 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  8037 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  8038 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  8039 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  8040 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  8041 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  8042                                  		; 17/10/2022
  8043 00000076 81FE[9104]              		cmp	si, DSKTBL
  8044                                  		;cmp	si, 4A2h	; dsktbl
  8045                                  					; at 2C7h:4A2h = 70h:2A12h
  8046 0000007A 7517                    		jnz	short no_sector32_mapping
  8047                                  
  8048                                  ; Special case for 32-bit start sector number:
  8049                                  ;   if (si==dsktbl) /* if this is a disk device call */
  8050                                  ;      set high 16 bits of secnum to 0
  8051                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  8052                                  ;
  8053                                  ; pass high word of sector number in start_sec_h, low word in dx
  8054                                  ;
  8055                                  ; note: start_l and start_h are the offsets within the io_request packet
  8056                                  ;	  which contain the low and hi words of the 32 bit start sector if
  8057                                  ;	  it has been used.
  8058                                  ;
  8059                                  ; note: remember not to destroy the registers which have been set up before
  8060                                  
  8061                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  8062 0000007C C706[2405]0000          		mov	word [start_sec_h], 0
  8063 00000082 83FAFF                  		cmp	dx, 0FFFFh
  8064 00000085 750C                    		jnz	short no_sector32_mapping
  8065 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  8066                                  					; 32 bits dsk req
  8067                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  8068 0000008B 8916[2405]              		mov	[start_sec_h], dx
  8069 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  8070                                  					; dx = packet.start_l
  8071                                  no_sector32_mapping:			
  8072 00000093 97                      		xchg	ax, di
  8073 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  8074 00000098 2E3A04                  		cmp	al, cs:[si]
  8075 0000009B 732C                    		jnb	short command_error
  8076 0000009D 98                      		cbw			; note that al <= 15 means ok
  8077 0000009E D1E0                    		shl	ax, 1
  8078 000000A0 01C6                    		add	si, ax
  8079 000000A2 97                      		xchg	ax, di
  8080 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  8081 000000A7 FC                      		cld
  8082                                  		; 17/10/2022
  8083 000000A8 2EFF5401                		call	near [cs:si+1]
  8084                                  		;call	word ptr cs:si+1
  8085 000000AC 7202                    		jb	short already_got_ah_status
  8086 000000AE B401                    		mov	ah, 1
  8087                                  already_got_ah_status:
  8088                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  8089                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  8090                                  					; cas note: shouldn't be needed!
  8091 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  8092                                  		;lds	bx, ds:ptrsav
  8093 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  8094 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  8095                                  					; mark operation complete
  8096 000000BC 5B                      		pop	bx
  8097 000000BD 07                      		pop	es
  8098 000000BE 1F                      		pop	ds
  8099 000000BF 5D                      		pop	bp
  8100 000000C0 5F                      		pop	di
  8101 000000C1 5A                      		pop	dx
  8102 000000C2 59                      		pop	cx
  8103 000000C3 58                      		pop	ax
  8104 000000C4 5E                      		pop	si
  8105 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  8106                                  	
  8107                                  		; fall through into bc_retf
  8108                                  ; ---------------------------------------------------------------------------	
  8109                                  bc_retf:
  8110 000000C8 CB                      		retf
  8111                                  ; ---------------------------------------------------------------------------
  8112                                  
  8113                                  command_error:				
  8114 000000C9 E80900                  		call	bc_cmderr
  8115 000000CC EBE2                    		jmp	short already_got_ah_status
  8116                                  ; 15/10/2022
  8117                                  ; 01/05/2019
  8118                                  
  8119                                  ;----------------------------------------------------------------------------
  8120                                  ; The following piece of hack is for supporting CP/M compatibility
  8121                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  8122                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  8123                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  8124                                  ; high.
  8125                                  ;----------------------------------------------------------------------------
  8126                                  
  8127                                  		;db 7 dup(0)
  8128                                  
  8129                                  		; 15/10/2022
  8130                                  
  8131 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  8132                                  
  8133 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  8134                                  				;  which is the CP/M call 5 entry point
  8135                                  		
  8136                                  
  8137                                  ; ---------------------------------------------------------------------------
  8138                                  
  8139                                  ;	exit - all routines return through this path
  8140                                  
  8141                                  bc_cmderr:				
  8142 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  8143                                  					; unknown command error
  8144                                  
  8145                                  ; =============== S U B	R O U T	I N E =======================================
  8146                                  
  8147                                  ;	now zero the count field by subtracting its current value,
  8148                                  ;	  which is still in cx, from itself.
  8149                                  
  8150                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  8151                                  ;	  in order to return the number actually complete
  8152                                  
  8153                                  bc_err_cnt:	
  8154                                  		;les	bx, ds:ptrsav
  8155                                  		; 19/10/2022
  8156 000000D7 C41E[1200]              		les	bx, [ptrsav]
  8157 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  8158                                  					; # of successful i/o's
  8159 000000DF B481                    		mov	ah, 81h		; mark error return
  8160 000000E1 F9                      		stc			; indicate abnormal end
  8161 000000E2 C3                      		retn
  8162                                  
  8163                                  ; 15/10/2022
  8164                                  
  8165                                  ;Bios_Code ends
  8166                                  
  8167                                  ;----------------------------------------------------------------------------
  8168                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  8169                                  ;----------------------------------------------------------------------------
  8170                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8171                                  ; 10/01/2019 - Retro DOS v4.0
  8172                                  
  8173                                  ; 30/04/2019
  8174                                  
  8175                                  ;title	mschar - character and clock devices
  8176                                  
  8177                                  ;MODE_CTRLBRK	equ	0FFh
  8178                                  
  8179                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  8180                                  
  8181                                  ;************************************************************************
  8182                                  ;*									*
  8183                                  ;*	device driver dispatch tables					*
  8184                                  ;*									*
  8185                                  ;*	each table starts with a byte which lists the number of		*
  8186                                  ;*	legal functions, followed by that number of words. Each		*
  8187                                  ;*	word represents an offset of a routine in Bios_Code which	*
  8188                                  ;*	handles the function. The functions are terminated with		*
  8189                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  8190                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  8191                                  ;*	returned as abnormal completion status. Notice that ds		*
  8192                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  8193                                  ;*									*
  8194                                  ;************************************************************************
  8195                                  
  8196                                  		; 13/12/2022
  8197                                  		;db 0
  8198                                  
  8199                                  		; 13/12/202
  8200 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  8201                                  					; 2C7h:0E4h = 70h:2654h
  8202 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8203                                  					; 00 init
  8204 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  8205 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  8206 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  8207                                  					; 03
  8208 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  8209                                  					; 04
  8210 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  8211                                  					; 05
  8212 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  8213 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  8214                                  					; 07
  8215 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  8216                                  					; 08
  8217 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  8218 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  8219                                  con_table_end:
  8220 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  8221                                  					; 2C7h:0FBh = 70h:266Bh
  8222 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  8223 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8224 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8225 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  8226 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  8227                                  					; 04 indicate zero chars read
  8228 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  8229                                  					; 05 read non-destructive
  8230 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8231 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  8232 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  8233 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  8234 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  8235 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  8236 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  8237 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  8238 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  8239 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  8240 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  8241 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  8242 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  8243 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  8244 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  8245 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  8246 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  8247 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  8248 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  8249 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  8250                                  prn_table_end:
  8251 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  8252                                  					; 2C7h:130h = 70h:26A0h
  8253 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  8254 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8255 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8256 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  8257 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  8258 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  8259 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8260 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  8261 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  8262 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  8263 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  8264                                  aux_table_end:
  8265 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  8266                                  					; 2C7h:147h = 70h:26B7h
  8267 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  8268 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8269 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8270 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  8271 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  8272 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  8273 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8274 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  8275 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  8276 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  8277                                  tim_table_end:
  8278                                  
  8279                                  ; ---------------------------------------------------------------------------
  8280                                  
  8281                                  ;************************************************************************
  8282                                  ;*									*
  8283                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  8284                                  ;*									*
  8285                                  ;************************************************************************
  8286                                  
  8287                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  8288                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  8289 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  8290                                  con_loop:				
  8291 0000015D E80500                  		call	chrin		; get char in al
  8292 00000160 AA                      		stosb			; store	char at	es:di
  8293 00000161 E2FA                    		loop	con_loop
  8294                                  con_exit:				
  8295 00000163 F8                      		clc
  8296 00000164 C3                      		retn
  8297                                  
  8298                                  ; =============== S U B	R O U T	I N E =======================================
  8299                                  
  8300                                  ;************************************************************************
  8301                                  ;*									*
  8302                                  ;*	chrin - input single char from keyboard into al			*
  8303                                  ;*									*
  8304                                  ;*	  we are going to issue extended keyboard function, if		*
  8305                                  ;*	  supported. the returning value of the extended keystroke	*
  8306                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  8307                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  8308                                  ;*	  this creates a conflict when the user entered real		*
  8309                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  8310                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  8311                                  ;*	  in the following manner:					*
  8312                                  ;*									*
  8313                                  ;*	      ah = 16h							*
  8314                                  ;*	      int 16h							*
  8315                                  ;*	      if al == 0, then extended code (in ah)			*
  8316                                  ;*	      else if al == 0E0h, then					*
  8317                                  ;*	      if ah <> 0, then extended code (in ah)			*
  8318                                  ;*		else greek_alpha character.				*
  8319                                  ;*									*
  8320                                  ;*	also, for compatibility reason, if an extended code is		*
  8321                                  ;*	  detected, then we are going to change the value in al		*
  8322                                  ;*	  from 0E0h to 00h.						*
  8323                                  ;*									*
  8324                                  ;************************************************************************
  8325                                  
  8326                                  		; 19/10/2022
  8327                                  chrin:		
  8328 00000165 8A26[DE04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  8329 00000169 30C0                    		xor	al, al
  8330 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  8331 0000016F 08C0                    		or	al, al
  8332 00000171 752A                    		jnz	short keyret
  8333 00000173 CD16                    		int	16h		; KEYBOARD -
  8334 00000175 09C0                    		or	ax, ax
  8335 00000177 74EC                    		jz	short chrin
  8336 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8337 0000017C 7504                    		jnz	short alt_ext_chk
  8338 0000017E B010                    		mov	al, 10h
  8339 00000180 EB1B                    		jmp	short keyret
  8340                                  ; ---------------------------------------------------------------------------
  8341                                  
  8342                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  8343                                  ;    if character read was 0E0h then
  8344                                  ;      if extended byte was zero (i.e. ah == 0) then
  8345                                  ;	 goto keyret
  8346                                  ;      else
  8347                                  ;	 set al to zero
  8348                                  ;	 goto alt_save
  8349                                  ;      endif
  8350                                  ;    endif
  8351                                  ;  endif
  8352                                  
  8353                                  alt_ext_chk:
  8354 00000182 803E[DE04]00            		cmp	byte [keyrd_func], 0
  8355 00000187 740C                    		jz	short not_ext
  8356 00000189 3CE0                    		cmp	al, 0E0h
  8357 0000018B 7508                    		jnz	short not_ext
  8358 0000018D 08E4                    		or	ah, ah
  8359 0000018F 740C                    		jz	short keyret
  8360 00000191 30C0                    		xor	al, al
  8361 00000193 EB04                    		jmp	short alt_save
  8362                                  ; ---------------------------------------------------------------------------
  8363                                  
  8364                                  not_ext:				
  8365 00000195 08C0                    		or	al, al		; special case?
  8366 00000197 7504                    		jnz	short keyret
  8367                                  alt_save:				
  8368 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  8369                                  keyret:					
  8370 0000019D C3                      		retn
  8371                                  
  8372                                  ; ---------------------------------------------------------------------------
  8373                                  
  8374                                  ;************************************************************************
  8375                                  ;*									*
  8376                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  8377                                  ;*									*
  8378                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  8379                                  ;*	in the status word of the request packet, and there is no	*
  8380                                  ;*	character in the input buffer, the driver issues a system	*
  8381                                  ;*	wait request to the rom. on return from the rom, it returns	*
  8382                                  ;*	a 'char-not-found' to the dos.					*
  8383                                  ;*									*
  8384                                  ;************************************************************************
  8385                                  
  8386                                  		; 19/10/2022
  8387                                  con_rdnd:				
  8388 0000019E A0[0C00]                		mov	al, [altah]
  8389 000001A1 08C0                    		or	al, al
  8390 000001A3 754C                    		jnz	short rdexit
  8391 000001A5 8A26[DF04]              		mov	ah, [keysts_func]
  8392 000001A9 CD16                    		int	16h		; KEYBOARD -
  8393 000001AB 751D                    		jnz	short gotchr
  8394 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  8395 000001B2 7412                    		jz	short z_bus_exit
  8396 000001B4 C41E[1200]              		les	bx, [ptrsav]
  8397                                  		; 12/12/2022
  8398 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  8399                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  8400 000001BD 7407                    		jz	short z_bus_exit
  8401 000001BF B80041                  		mov	ax, 4100h
  8402 000001C2 30DB                    		xor	bl, bl
  8403 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  8404                                  					; AL = condition type, BH = condition compare or mask value
  8405                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  8406                                  					; DX = I/O port	address	if AL bit 4 set
  8407                                  z_bus_exit:				
  8408 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  8409 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  8410 000001C9 C3                      		retn
  8411                                  ; ---------------------------------------------------------------------------
  8412                                  
  8413                                  gotchr:					
  8414 000001CA 09C0                    		or	ax, ax
  8415 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  8416 000001CE 8A26[DE04]              		mov	ah, [keyrd_func] ; issue keyboard read function
  8417 000001D2 CD16                    		int	16h		; KEYBOARD -
  8418 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  8419                                  ; ---------------------------------------------------------------------------
  8420                                  
  8421                                  notbrk:					
  8422 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8423 000001D9 7504                    		jnz	short rd_ext_chk
  8424 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  8425 000001DD EB12                    		jmp	short rdexit
  8426                                  ; ---------------------------------------------------------------------------
  8427                                  
  8428                                  rd_ext_chk:				
  8429 000001DF 803E[DE04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  8430 000001E4 740B                    		jz	short rdexit
  8431 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  8432 000001E8 7507                    		jnz	short rdexit
  8433 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  8434 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  8435 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  8436                                  					; change it for	compatibility
  8437                                  rdexit:					
  8438 000001F1 C41E[1200]              		les	bx, [ptrsav]
  8439 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  8440                                  					; return keyboard character here
  8441                                  bc_exvec:				
  8442 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8443                                  					; indicate normal termination
  8444 000001FA C3                      		retn
  8445                                  ; ---------------------------------------------------------------------------
  8446                                  
  8447                                  ;************************************************************************
  8448                                  ;*									*
  8449                                  ;*	con_write - console write routine				*
  8450                                  ;*									*
  8451                                  ;*	entry:	es:di -> buffer						*
  8452                                  ;*		cx    =  count						*
  8453                                  ;*									*
  8454                                  ;************************************************************************
  8455                                  
  8456                                  con_writ:
  8457                                  		;jcxz	short bc_exvec
  8458 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  8459                                  		; 12/12/2022
  8460                                  		;jcxz	cc_ret
  8461                                  con_lp:					
  8462 000001FD 268A05                  		mov	al, [es:di]
  8463 00000200 47                      		inc	di
  8464 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  8465                                  					; AL = character to display
  8466 00000203 E2F8                    		loop	con_lp
  8467                                  cc_ret:					
  8468 00000205 F8                      		clc
  8469 00000206 C3                      		retn
  8470                                  
  8471                                  ; =============== S U B	R O U T	I N E =======================================
  8472                                  
  8473                                  ;************************************************************************
  8474                                  ;*									*
  8475                                  ;*	con_flush - flush out keyboard queue				*
  8476                                  ;*									*
  8477                                  ;************************************************************************
  8478                                  
  8479                                  con_flush:
  8480 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  8481                                  flloop:					; while	(charavail()) charread();	
  8482 0000020C B401                    		mov	ah, 1
  8483 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  8484                                  					; Return: ZF clear if character	in buffer
  8485                                  					; AH = scan code, AL = character
  8486                                  					; ZF set if no character in buffer
  8487 00000210 74F3                    		jz	short cc_ret
  8488 00000212 30E4                    		xor	ah, ah
  8489 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  8490                                  					; Return: AH = scan code, AL = character
  8491 00000216 EBF4                    		jmp	short flloop
  8492                                  
  8493                                  ; ---------------------------------------------------------------------------
  8494                                  
  8495                                  ; 15/10/2022
  8496                                  
  8497                                  ;************************************************************************
  8498                                  ;*									*
  8499                                  ;*	some equates for rom bios printer i/o				*
  8500                                  ;*									*
  8501                                  ;************************************************************************
  8502                                  
  8503                                  ; ibm rom status bits (i don't trust them, neither should you)
  8504                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  8505                                  ; whole slew of bits, only one of which is correct.
  8506                                  
  8507                                  ;notbusystatus	equ 10000000b		; not busy
  8508                                  ;nopaperstatus	equ 00100000b		; no more paper
  8509                                  ;prnselected	equ 00010000b		; printer selected
  8510                                  ;ioerrstatus	equ 00001000b		; some kinda error
  8511                                  ;timeoutstatus	equ 00000001b		; time out.
  8512                                  ;
  8513                                  ;noprinter	equ 00110000b		; no printer attached
  8514                                  
  8515                                  ; 18/03/2019 - Retro DOS v4.0
  8516                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  8517                                  
  8518                                  ; ---------------------------------------------------------------------------
  8519                                  
  8520                                  ;************************************************************************
  8521                                  ;*									*
  8522                                  ;*	prn_input - return with no error but zero chars read		*
  8523                                  ;*									*
  8524                                  ;*	enter with cx = number of characters requested			*
  8525                                  ;*									*
  8526                                  ;************************************************************************
  8527                                  
  8528                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8529 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8530                                  					; (sub reqpkt.count,cx)
  8531                                  		; 12/12/2022
  8532                                  prn_done:
  8533 0000021B F8                      		clc			; but return with carry	reset for no error
  8534 0000021C C3                      		retn
  8535                                  ; ---------------------------------------------------------------------------
  8536                                  
  8537                                  ;************************************************************************
  8538                                  ;*									*
  8539                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8540                                  ;*									*
  8541                                  ;*	auxnum has printer number					*
  8542                                  ;*									*
  8543                                  ;************************************************************************
  8544                                  
  8545                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8546                                  		;jcxz	short prn_done	; no chars to output
  8547 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  8548                                  prn_loop:				
  8549 0000021F BB0200                  		mov	bx, 2		; retry	count
  8550                                  prn_out:				
  8551 00000222 E83600                  		call	prnstat		; get status
  8552 00000225 751D                    		jnz	short TestPrnError
  8553 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8554 0000022A 30E4                    		xor	ah, ah
  8555 0000022C E82E00                  		call	prnop		; print	to printer
  8556 0000022F 7419                    		jz	short prn_con	; no error - continue
  8557 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8558 00000234 7509                    		jnz	short _prnwf
  8559 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8560 00000238 C606[0C00]00            		mov	byte [altah], 0
  8561 0000023D EB08                    		jmp	short pmessg
  8562                                  ; ---------------------------------------------------------------------------
  8563                                  
  8564                                  _prnwf:					
  8565 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8566 00000242 7406                    		jz	short prn_con
  8567                                  TestPrnError:				
  8568 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8569 00000245 75DB                    		jnz	short prn_out
  8570                                  pmessg:					
  8571 00000247 E98DFE                  		jmp	bc_err_cnt
  8572                                  ; ---------------------------------------------------------------------------
  8573                                  
  8574                                  prn_con:				
  8575 0000024A 47                      		inc	di		; point	to next	char and continue
  8576 0000024B E2D2                    		loop	prn_loop
  8577                                  ;prn_done:				
  8578                                  		; 12/12/2022
  8579                                  prn_done2:
  8580                                  		;clc
  8581                                  		; cf=0
  8582 0000024D C3                      		retn
  8583                                  ; ---------------------------------------------------------------------------
  8584                                  
  8585                                  ;************************************************************************
  8586                                  ;*									*
  8587                                  ;*	prn_stat - device driver entry to return printer status		*
  8588                                  ;*									*
  8589                                  ;************************************************************************
  8590                                  
  8591                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8592 0000024E E80A00                  		call	prnstat		; device in dx
  8593 00000251 75F4                    		jnz	short pmessg
  8594 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8595                                  		;jnz	short prn_done
  8596                                  		; 12/12/2022
  8597 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8598 00000258 E96BFF                  		jmp	z_bus_exit
  8599                                  ; ---------------------------------------------------------------------------
  8600                                  
  8601                                  ;************************************************************************
  8602                                  ;*									*
  8603                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8604                                  ;*		 printer status. Return meaningful error code		*
  8605                                  ;*									*
  8606                                  ;************************************************************************
  8607                                  
  8608                                  prnstat:				
  8609 0000025B B402                    		mov	ah, 2		; set command for get status
  8610                                  					; PRINTER - GET	STATUS
  8611                                  					; DX = printer port (0-3)
  8612                                  					; Return: AH = status
  8613                                  
  8614                                  ; =============== S U B	R O U T	I N E =======================================
  8615                                  
  8616                                  ;************************************************************************
  8617                                  ;*									*
  8618                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8619                                  ;*		return zero true if no error				*
  8620                                  ;*		return zero false if error, al = error code		*
  8621                                  ;*									*
  8622                                  ;************************************************************************
  8623                                  
  8624                                  prnop:	
  8625 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8626 00000261 CD17                    		int	17h
  8627                                  
  8628                                  	; This check was added to see if this is a case of no
  8629                                  	; printer being installed. This tests checks to be sure
  8630                                  	; the error is noprinter (30h)
  8631                                  
  8632 00000263 50                      		push	ax
  8633 00000264 80E430                  		and	ah, 30h
  8634 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8635 0000026A 58                      		pop	ax
  8636 0000026B 7506                    		jnz	short NextTest
  8637 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8638 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8639                                  
  8640                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8641                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8642                                  ; careful about breaking basic.
  8643                                  
  8644                                  NextTest:				
  8645 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8646                                  					; i/o error?
  8647 00000276 740A                    		jz	short checknotready ; no, try not ready
  8648                                  
  8649                                  ; at this point, we know we have an error. the converse is not true
  8650                                  
  8651 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8652                                  					; first, assume	out of paper
  8653 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8654 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8655 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8656                                  ret1:					
  8657 00000281 C3                      		retn
  8658                                  ; ---------------------------------------------------------------------------
  8659                                  
  8660                                  checknotready:				
  8661 00000282 B002                    		mov	al, 2		; assume not-ready
  8662 00000284 F6C401                  		test	ah, 1
  8663 00000287 C3                      		retn
  8664                                  
  8665                                  ; ---------------------------------------------------------------------------
  8666                                  
  8667                                  ;************************************************************************
  8668                                  ;*									*
  8669                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8670                                  ;*		     this entry point should never block waiting for	*
  8671                                  ;*		     device to come ready.				*
  8672                                  ;*									*
  8673                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8674                                  ;*	outputs: set the number of bytes transferred in the		*
  8675                                  ;*		 device driver request packet				*
  8676                                  ;*									*
  8677                                  ;************************************************************************
  8678                                  
  8679                                  		; 19/10/2022
  8680                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8681 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8682                                  prn_tilbloop:				
  8683 0000028A 51                      		push	cx
  8684 0000028B 53                      		push	bx
  8685 0000028C 30FF                    		xor	bh, bh
  8686 0000028E 8A1E[E004]              		mov	bl, [printdev]
  8687 00000292 D1E3                    		shl	bx, 1
  8688                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8689 00000294 8B8F[E104]              		mov	cx, [wait_count+bx]
  8690 00000298 5B                      		pop	bx
  8691                                  prn_getstat:				
  8692 00000299 E8BFFF                  		call	prnstat		; get status
  8693 0000029C 7514                    		jnz	short prn_bperr	; error
  8694 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8695 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8696 000002A3 59                      		pop	cx		; get original count
  8697 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8698 000002A6 26                      		es
  8699 000002A7 AC                      		lodsb
  8700                                  		;lods	byte ptr es:[si] ; es
  8701                                  					; lodsb
  8702 000002A8 30E4                    		xor	ah, ah
  8703 000002AA E8B0FF                  		call	prnop
  8704 000002AD 7504                    		jnz	short prn_berr	; error
  8705 000002AF E2D9                    		loop	prn_tilbloop
  8706                                  		; 12/12/2022
  8707                                  		; cf=0 (prnop)
  8708                                  		;clc			; normal no-error return
  8709 000002B1 C3                      		retn			;   from device driver
  8710                                  
  8711                                  ; ---------------------------------------------------------------------------
  8712                                  
  8713                                  prn_bperr:				
  8714 000002B2 59                      		pop	cx		; restore transfer count from stack
  8715                                  prn_berr:				
  8716 000002B3 E921FE                  		jmp	bc_err_cnt
  8717                                  ; ---------------------------------------------------------------------------
  8718                                  
  8719                                  ; 15/10/2022
  8720                                  
  8721                                  ;************************************************************************
  8722                                  ;*									*
  8723                                  ;*	prn_genioctl - get/set printer retry count			*
  8724                                  ;*									*
  8725                                  ;************************************************************************
  8726                                  
  8727                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8728                                  ; 11/01/2019
  8729                                  
  8730                                  ;********************************;*
  8731                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8732                                  ;********************************;*
  8733                                  
  8734                                  ;;RAWIO SUB-FUNCTIONS
  8735                                  ;;get_retry_count equ 65h
  8736                                  ;;set_retry_count equ 45h
  8737                                  
  8738                                  ;;struc A_RETRYCOUNT
  8739                                  ;;.rc_count: resw 1
  8740                                  ;;endstruc
  8741                                  
  8742                                  ;ioc_pc equ 5
  8743                                  
  8744                                  ; ---------------------------------------------------------------------------
  8745                                  
  8746                                  		; 19/10/2022
  8747                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8748 000002B6 C43E[1200]              		les	di, [ptrsav]
  8749 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8750                                  					; ioc_pc
  8751 000002BF 7403                    		jz	short prnfunc_ok
  8752                                  
  8753                                  prnfuncerr:				
  8754 000002C1 E911FE                  		jmp	bc_cmderr
  8755                                  ; ---------------------------------------------------------------------------
  8756                                  
  8757                                  prnfunc_ok:				
  8758 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8759 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8760 000002CC 30FF                    		xor	bh, bh
  8761                                  		;mov	bl, ds:printdev	; get index into retry counts
  8762 000002CE 8A1E[E004]              		mov	bl, [printdev]
  8763 000002D2 D1E3                    		shl	bx, 1
  8764                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8765 000002D4 8B8F[E104]              		mov	cx, [wait_count+bx]
  8766 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8767 000002DA 7407                    		jz	short prngetcount
  8768 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8769 000002DE 75E1                    		jnz	short prnfuncerr
  8770 000002E0 268B0D                  		mov	cx, [es:di]
  8771                                  prngetcount:				
  8772                                  		;mov	ds:wait_count[bx], cx
  8773 000002E3 898F[E104]              		mov	[wait_count+bx], cx
  8774 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8775                                  					; return current retry count
  8776                                  		; 12/12/2022
  8777                                  		; cf=0
  8778                                  		;clc
  8779 000002EA C3                      		retn
  8780                                  ; ---------------------------------------------------------------------------
  8781                                  
  8782                                  ;************************************************************************
  8783                                  ;*									*
  8784                                  ;*  prn_ioctl_query							*
  8785                                  ;*									*
  8786                                  ;*  Added for 5.00							*
  8787                                  ;************************************************************************
  8788                                  
  8789                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8790 000002EB C43E[1200]              		les	di, [ptrsav]
  8791 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8792                                  					; ioc_pc
  8793 000002F4 750D                    		jnz	short prn_query_err
  8794 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8795 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8796 000002FC 7404                    		jz	short IOCtlSupported
  8797 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8798 00000300 7501                    		jnz	short prn_query_err
  8799                                  IOCtlSupported:	
  8800                                  		; 12/12/2022
  8801                                  		; cf=0		
  8802                                  		;clc
  8803 00000302 C3                      		retn
  8804                                  ; ---------------------------------------------------------------------------
  8805                                  
  8806                                  prn_query_err:
  8807                                  		; 12/12/2022				
  8808                                  		;stc
  8809 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8810                                  ; ---------------------------------------------------------------------------
  8811                                  
  8812                                  ;************************************************************************
  8813                                  ;*									*
  8814                                  ;*	aux port driver code -- "aux" == "com1"				*
  8815                                  ;*									*
  8816                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8817                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8818                                  ;*									*
  8819                                  ;************************************************************************
  8820                                  
  8821                                  ;	values in ah, requesting function of int 14h in rom bios
  8822                                  
  8823                                  ;auxfunc_send	 equ	1	;transmit
  8824                                  ;auxfunc_receive equ	2	;read
  8825                                  ;auxfunc_status	 equ	3	;request status
  8826                                  
  8827                                  ;	error flags, reported by int 14h, reported in ah:
  8828                                  
  8829                                  ;flag_data_ready equ	01h	;data ready
  8830                                  ;flag_overrun	 equ	02h	;overrun error
  8831                                  ;flag_parity	 equ	04h	;parity error
  8832                                  ;flag_frame	 equ	08h	;framing error
  8833                                  ;flag_break	 equ	10h	;break detect
  8834                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8835                                  ;flag_timeout	 equ	80h	;timeout
  8836                                  
  8837                                  ;	these flags reported in al:
  8838                                  
  8839                                  ;flag_cts	 equ	10h	;clear to send
  8840                                  ;flag_dsr	 equ	20h	;data set ready
  8841                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8842                                  
  8843                                  ; ---------------------------------------------------------------------------
  8844                                  
  8845                                  ;************************************************************************
  8846                                  ;*									*
  8847                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8848                                  ;*		   at es:di						*
  8849                                  ;*									*
  8850                                  ;************************************************************************
  8851                                  
  8852                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8853                                  		;jcxz	short exvec2
  8854 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8855 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8856 0000030B 30C0                    		xor	al, al
  8857 0000030D 8607                    		xchg	al, [bx]
  8858 0000030F 08C0                    		or	al, al
  8859 00000311 7503                    		jnz	short aux2
  8860                                  aux1:					
  8861 00000313 E80500                  		call	auxin		; get character	from port
  8862                                  					; won't return if error
  8863                                  aux2:					
  8864 00000316 AA                      		stosb
  8865 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8866                                  exvec2:					
  8867 00000319 F8                      		clc			; all done, successful exit
  8868                                  auxin_retn:	; 18/12/2022
  8869 0000031A C3                      		retn
  8870                                  ; ---------------------------------------------------------------------------
  8871                                  
  8872                                  ;************************************************************************
  8873                                  ;*									*
  8874                                  ;*	auxin - call rom bios to read character from aux port		*
  8875                                  ;*		if error occurs, map the error and return one		*
  8876                                  ;*		level up to device driver exit code, setting		*
  8877                                  ;*		the number of bytes transferred appropriately		*
  8878                                  ;*									*
  8879                                  ;************************************************************************
  8880                                  
  8881                                  auxin:					
  8882 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8883 0000031D E83C00                  		call	auxop
  8884 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8885                                  		;jnz	short arbad	; skip if any error bits set
  8886                                  		;retn
  8887                                  		; 25/06/2023 (BugFix)
  8888 00000323 74F5                    		jz	short auxin_retn
  8889                                  ; ---------------------------------------------------------------------------
  8890                                  
  8891                                  arbad:					
  8892 00000325 58                      		pop	ax		; remove return	address	(near call)
  8893 00000326 30C0                    		xor	al, al
  8894 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8895 0000032A E9AAFD                  		jmp	bc_err_cnt
  8896                                  
  8897                                  ; ---------------------------------------------------------------------------
  8898                                  
  8899                                  ;************************************************************************
  8900                                  ;*									*
  8901                                  ;*	aux_rdnd - non-destructive aux port read			*
  8902                                  ;*									*
  8903                                  ;************************************************************************
  8904                                  
  8905                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8906 0000032D E85200                  		call	getbx
  8907 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8908 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8909 00000334 7511                    		jnz	short auxdrx	; then return character
  8910 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8911 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8912 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8913 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8914 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8915 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8916 00000345 8807                    		mov	[bx], al
  8917                                  auxdrx:					
  8918 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8919                                  ; ---------------------------------------------------------------------------
  8920                                  
  8921                                  auxbus:					
  8922 0000034A E979FE                  		jmp	z_bus_exit
  8923                                  ; ---------------------------------------------------------------------------
  8924                                  
  8925                                  ;************************************************************************
  8926                                  ;*									*
  8927                                  ;*	aux_wrst - return aux port write status				*
  8928                                  ;*									*
  8929                                  ;************************************************************************
  8930                                  
  8931                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8932 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8933 00000350 A820                    		test	al, 20h		; test data set	ready
  8934 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8935 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8936 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8937                                  		; 12/12/2022
  8938                                  		; cf=0	; (test instruction resets cf)
  8939                                  		;clc
  8940 00000359 C3                      		retn
  8941                                  ; ---------------------------------------------------------------------------
  8942                                  
  8943                                  ;************************************************************************
  8944                                  ;*									*
  8945                                  ;*	auxstat - call rom bios to determine aux port status		*
  8946                                  ;*									*
  8947                                  ;*	exit:	ax = status						*
  8948                                  ;*		dx = [auxnum]						*
  8949                                  ;*									*
  8950                                  ;************************************************************************
  8951                                  
  8952                                  auxstat:				
  8953 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8954                                  
  8955                                  		; fall into auxop
  8956                                  
  8957                                  ; =============== S U B	R O U T	I N E =======================================
  8958                                  
  8959                                  ;************************************************************************
  8960                                  ;*									*
  8961                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8962                                  ;*									*
  8963                                  ;*	entry:	ah = int 14h function number				*
  8964                                  ;*	exit:	ax = results						*
  8965                                  ;*		dx = [auxnum]						*
  8966                                  ;*									*
  8967                                  ;************************************************************************
  8968                                  
  8969                                  auxop:		; proc near		
  8970 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8971                                  					; 0=init, 1=send, 2=receive, 3=status
  8972                                  					; get port number
  8973 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8974                                  					; DX = port number (0-3)
  8975                                  					; Return: AX = port status code
  8976 00000362 C3                      		retn
  8977                                  
  8978                                  ; ---------------------------------------------------------------------------
  8979                                  
  8980                                  ;************************************************************************
  8981                                  ;*									*
  8982                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8983                                  ;*		   auxbuf [auxnum] to zero				*
  8984                                  ;*									*
  8985                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8986                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8987                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8988                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8989                                  ;*									*
  8990                                  ;************************************************************************
  8991                                  
  8992                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8993 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8994 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8995                                  					; zero out buffer
  8996                                  		;clc			; all done, successful return
  8997                                  		; 12/12/2022
  8998                                  		; cf=0 ('add' instruction in 'getbx')
  8999 00000369 C3                      		retn
  9000                                  ; ---------------------------------------------------------------------------
  9001                                  
  9002                                  ;************************************************************************
  9003                                  ;*									*
  9004                                  ;*	aux_writ - write to aux device					*
  9005                                  ;*									*
  9006                                  ;************************************************************************
  9007                                  
  9008                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  9009                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  9010 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  9011                                  aux_loop:				
  9012 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  9013                                  					; move di pointer to next character
  9014 0000036F 47                      		inc	di
  9015 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  9016 00000372 E8E7FF                  		call	auxop		; send character over aux port
  9017 00000375 F6C480                  		test	ah, 80h		; check	for error
  9018 00000378 7405                    		jz	short awok	; then no error
  9019 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  9020 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  9021                                  ; ---------------------------------------------------------------------------
  9022                                  
  9023                                  awok:					
  9024 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  9025                                  					; still	more character to print
  9026                                  		;clc			; all done, successful return
  9027                                  		; 12/12/2022
  9028                                  		; cf=0 (test instruction above)	
  9029 00000381 C3                      		retn
  9030                                  
  9031                                  ; =============== S U B	R O U T	I N E =======================================
  9032                                  
  9033                                  ;************************************************************************
  9034                                  ;*									*
  9035                                  ;*	getbx - return bx -> single byte input buffer for		*
  9036                                  ;*		selected aux port ([auxnum])				*
  9037                                  ;*									*
  9038                                  ;************************************************************************
  9039                                  
  9040                                  getbx:	
  9041 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  9042                                  					; for selected aux port	([auxnum])
  9043                                  		;add	bx, offset auxbuf
  9044 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  9045                                  		; 12/12/2022
  9046                                  		; cf=0 (if [uaxnum] is valid number) 
  9047 0000038A C3                      		retn
  9048                                  
  9049                                  ; ---------------------------------------------------------------------------
  9050                                  
  9051                                  ; 15/10/2022
  9052                                  
  9053                                  ;----------------------------------------------------------------
  9054                                  ;								:
  9055                                  ;		    clock device driver 			:
  9056                                  ;								:
  9057                                  ;								:
  9058                                  ;   this file contains the clock device driver. 		:
  9059                                  ;								:
  9060                                  ;   the routines in this files are:				:
  9061                                  ;								:
  9062                                  ;	routine 		function			:
  9063                                  ;	------- 		--------			:
  9064                                  ;	tim_writ		set the current time		:
  9065                                  ;	tim_read		read the current time		:
  9066                                  ;	time_to_ticks		convert time to corresponding	:
  9067                                  ;				  number of clock ticks 	:
  9068                                  ;								:
  9069                                  ; the clock ticks at the rate of:				:
  9070                                  ;								:
  9071                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  9072                                  ; see each routine for information on the use.			:
  9073                                  ;								:
  9074                                  ;----------------------------------------------------------------
  9075                                  
  9076                                  ; convert time to ticks
  9077                                  ; input : time in cx and dx
  9078                                  ; ticks returned in cx:dx
  9079                                  
  9080                                  ;19/07/2019
  9081                                  ;09/03/2019
  9082                                  
  9083                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  9084                                  
  9085                                  ; first convert from hour,min,sec,hund. to
  9086                                  ; total number of 100th of seconds
  9087                                  
  9088 0000038B B03C                    		mov	al, 60
  9089 0000038D F6E5                    		mul	ch		; hours	to minutes
  9090 0000038F B500                    		mov	ch, 0
  9091 00000391 01C8                    		add	ax, cx		; total	minutes
  9092 00000393 B97017                  		mov	cx, 6000	; 60*100
  9093 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  9094 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  9095 0000039A 89C1                    		mov	cx, ax
  9096 0000039C B064                    		mov	al, 100
  9097 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  9098 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  9099 000003A2 83D200                  		adc	dx, 0		; ripple carry
  9100 000003A5 B700                    		mov	bh, 0
  9101 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  9102 000003A9 83D200                  		adc	dx, 0
  9103                                  
  9104                                  	; dx:cx is time in 1/100 sec
  9105                                  
  9106 000003AC 92                      		xchg	ax, dx
  9107 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  9108 000003AE BB0BE9                  		mov	bx, 59659
  9109 000003B1 F7E3                    		mul	bx		; multiply low half
  9110 000003B3 87D1                    		xchg	dx, cx
  9111 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  9112 000003B6 F7E3                    		mul	bx		; multiply high	half
  9113 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  9114 000003BA 83D200                  		adc	dx, 0
  9115 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  9116 000003BE BB0500                  		mov	bx, 5
  9117 000003C1 F6F3                    		div	bl		; divide high half by 5
  9118 000003C3 88C1                    		mov	cl, al
  9119 000003C5 B500                    		mov	ch, 0
  9120 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  9121 000003C9 98                      		cbw
  9122 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  9123 000003CB F7F3                    		div	bx		; divide low half by 5
  9124 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  9125 000003CF CB                      		retf			; far return
  9126                                  
  9127                                  ; ---------------------------------------------------------------------------
  9128                                  
  9129                                  ; 17/10/2022
  9130                                  ; 15/10/2022
  9131                                  
  9132                                  ;--------------------------------------------------------------------
  9133                                  ;
  9134                                  ; tim_writ sets the current time
  9135                                  ;
  9136                                  ; on entry es:[di] has the current time:
  9137                                  ;
  9138                                  ;	number of days since 1-1-80	(word)
  9139                                  ;	minutes (0-59)			(byte)
  9140                                  ;	hours (0-23)			(byte)
  9141                                  ;	hundredths of seconds (0-99)	(byte)
  9142                                  ;	seconds (0-59)			(byte)
  9143                                  ;
  9144                                  ; each number has been checked for the correct range.
  9145                                  ;
  9146                                  ;	NOTE: Any changes in this routine probably require corresponding
  9147                                  ;	changes in the version that is built with the power manager driver.
  9148                                  ;	See ptime.asm.
  9149                                  ;
  9150                                  ;--------------------------------------------------------------------
  9151                                  
  9152                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  9153 000003D0 268B05                  		mov	ax, [es:di]
  9154 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  9155                                  					; end to avoid tick windows.
  9156 000003D4 803E[EC04]00            		cmp	byte [havecmosclock], 0
  9157                                  		;cmp	ds:havecmosclock, 0
  9158 000003D9 7426                    		jz	short no_cmos_1
  9159 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  9160                                  					; get binary hours
  9161                                  					; convert to bcd
  9162 000003DF FF1E[FB04]              		call	far [bintobcd]
  9163                                  		;call	ds:bintobcd	; call far [bintobcd]
  9164 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  9165 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  9166 000003E9 FF1E[FB04]              		call	far [bintobcd]
  9167                                  		;call	ds:bintobcd	; convert to bcd
  9168 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  9169 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  9170 000003F3 FF1E[FB04]              		call	far [bintobcd]
  9171                                  		;call	ds:bintobcd
  9172 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  9173 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  9174 000003FB FA                      		cli
  9175 000003FC B403                    		mov	ah, 3
  9176 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  9177                                  					; CH = hours in	BCD, CL	= minutes in BCD
  9178                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  9179                                  					; Return: CMOS clock set
  9180 00000400 FB                      		sti
  9181                                  no_cmos_1:				
  9182 00000401 268B4D02                		mov	cx, [es:di+2]
  9183 00000405 268B5504                		mov	dx, [es:di+4]
  9184                                  		; 17/10/2022
  9185 00000409 FF1E[D906]              		call	far [ttticks]
  9186                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  9187                                  					; convert time to ticks
  9188                                  					; cx:dx	now has	time in	ticks
  9189 0000040D FA                      		cli			; turn off timer
  9190 0000040E B401                    		mov	ah, 1
  9191 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  9192                                  					; CX:DX	= clock	count
  9193                                  					; Return: time of day set
  9194                                  		;pop	ds:daycnt
  9195 00000412 8F06[E904]              		pop	word [daycnt]
  9196 00000416 FB                      		sti
  9197                                  		;cmp	ds:havecmosclock, 0
  9198 00000417 803E[EC04]00            		cmp	byte [havecmosclock], 0
  9199 0000041C 740A                    		jz	short no_cmos_2
  9200 0000041E FF1E[FF04]              		call	far [daycnttoday]
  9201                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  9202                                  					; convert to bcd format
  9203 00000422 FA                      		cli
  9204 00000423 B405                    		mov	ah, 5
  9205 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  9206                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  9207                                  					; CH = century (19h or 20h)
  9208                                  					; Return: CMOS clock set
  9209 00000427 FB                      		sti
  9210                                  no_cmos_2:
  9211                                  		; 12/12/2022
  9212                                  		; cf=0				
  9213                                  		;clc
  9214 00000428 C3                      		retn
  9215                                  
  9216                                  ; ---------------------------------------------------------------------------
  9217                                  
  9218                                  ; 15/10/2022
  9219                                  
  9220                                  ;----------------------------------------------------------------------------
  9221                                  ; gettime reads date and time
  9222                                  ; and returns the following information:
  9223                                  ;
  9224                                  ;	es:[di]  =count of days since 1-1-80
  9225                                  ;	es:[di+2]=hours
  9226                                  ;	es:[di+3]=minutes
  9227                                  ;	es:[di+4]=seconds
  9228                                  ;	es:[di+5]=hundredths of seconds
  9229                                  ;
  9230                                  ;	NOTE: Any changes in this routine probably require corresponding
  9231                                  ;	changes in the version that is built with the power manager driver.
  9232                                  ;	See ptime.asm.
  9233                                  ;----------------------------------------------------------------------------
  9234                                  
  9235                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9236                                  		; 20/12/2023 - Retro DOS v5.0 (& Retro DOS v4.1 optimization)
  9237                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:04EFh)
  9238                                  
  9239                                  tim_read:				; 2C7h:435h = 70h:29A5h
  9240 00000429 E84A00                  		call	GetTickCnt
  9241 0000042C 8B36[E904]              		mov	si, [daycnt]
  9242                                  
  9243                                  ; we now need to convert the time in tick to the time in 100th of
  9244                                  ; seconds. the relation between tick and seconds is:
  9245                                  ;
  9246                                  ;		 65,536 seconds
  9247                                  ;	       ----------------
  9248                                  ;		1,193,180 tick
  9249                                  ;
  9250                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  9251                                  ;
  9252                                  ;	ticks from clock  * 65,536 * 100
  9253                                  ;      --------------------------------- = time in 100th of seconds
  9254                                  ;		1,193,180
  9255                                  ;
  9256                                  ; fortunately this formula simplifies to:
  9257                                  ;
  9258                                  ;	ticks from clock * 5 * 65,536
  9259                                  ;      --------------------------------- = time in 100th of seconds
  9260                                  ;		59,659
  9261                                  ;
  9262                                  ; the calculation is done by first multipling tick by 5. next we divide by
  9263                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  9264                                  ; my 16 bits to the left.
  9265                                  ;
  9266                                  ; start with ticks in cx:dx
  9267                                  ; multiply by 5
  9268                                  
  9269 00000430 89C8                    		mov	ax, cx
  9270 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  9271                                  					; multiply by 5
  9272 00000434 D1E2                    		shl	dx, 1
  9273 00000436 D1D1                    		rcl	cx, 1		; times	2
  9274 00000438 D1E2                    		shl	dx, 1
  9275 0000043A D1D1                    		rcl	cx, 1		; times	4
  9276 0000043C 01DA                    		add	dx, bx
  9277 0000043E 11C8                    		adc	ax, cx		; times	5
  9278 00000440 92                      		xchg	ax, dx
  9279                                  
  9280                                  ; now have ticks * 5 in	dx:ax
  9281                                  ; we now need to multiply by 65536 and divide by 59659 d.
  9282                                  
  9283 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  9284 00000444 F7F1                    		div	cx		; dx now has remainder
  9285                                  					; ax has high word of final quotient
  9286                                  		;mov	bx, ax		; put high word	in safe	place
  9287                                  		; 20/12/2023
  9288 00000446 93                      		xchg	ax, bx
  9289 00000447 31C0                    		xor	ax, ax		; this is the multiply by 65536
  9290 00000449 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  9291                                  
  9292                                  ; rounding based on the	remainder may be added here
  9293                                  ; the result in	bx:ax is time in 1/100 second.
  9294                                  
  9295 0000044B 89DA                    		mov	dx, bx		
  9296 0000044D B9C800                  		mov	cx, 200		; extract 1/100's
  9297                                  
  9298                                  ; division by 200 is necessary to ensure no overflow--max result
  9299                                  ; is number of seconds in a day/2 = 43200.
  9300                                  
  9301 00000450 F7F1                    		div	cx
  9302 00000452 80FA64                  		cmp	dl, 100		; remainder over 100?
  9303 00000455 7203                    		jb	short noadj
  9304 00000457 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  9305                                  noadj:					
  9306 0000045A F5                      		cmc			; if we	subtracted 100,	carry is now set
  9307 0000045B 88D3                    		mov	bl, dl		; save 1/100's
  9308                                  
  9309                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  9310                                  ; by two, shifting a one in if the remainder had exceeded 100.
  9311                                  
  9312 0000045D D1D0                    		rcl	ax, 1		
  9313 0000045F B200                    		mov	dl, 0
  9314 00000461 D1D2                    		rcl	dx, 1
  9315                                  		;mov	cx, 60		; divide out seconds
  9316                                  		; 20/12/2023
  9317 00000463 B13C                    		mov	cl, 60
  9318 00000465 F7F1                    		div	cx
  9319 00000467 88D7                    		mov	bh, dl		; save the seconds
  9320 00000469 F6F1                    		div	cl		; break	into hours and minutes
  9321 0000046B 86C4                    		xchg	al, ah
  9322                                  
  9323                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  9324                                  
  9325                                  		; 20/12/2023
  9326                                  		;push	ax
  9327                                  		;mov	ax, si		; daycnt
  9328 0000046D 96                      		xchg	ax, si
  9329 0000046E AB                      		stosw
  9330                                  		;pop	ax
  9331 0000046F 96                      		xchg	ax, si		; al = hours, ah = minutes
  9332 00000470 AB                      		stosw
  9333 00000471 89D8                    		mov	ax, bx
  9334 00000473 AB                      		stosw
  9335 00000474 F8                      		clc
  9336 00000475 C3                      		retn
  9337                                  
  9338                                  ; =============== S U B	R O U T	I N E =======================================
  9339                                  
  9340                                  ; 15/10/2022
  9341                                  
  9342                                  ;----------------------------------------------------------------------------
  9343                                  ;
  9344                                  ; procedure : GetTickCnt
  9345                                  ;
  9346                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  9347                                  ;		of rollover [except when power management driver is in use]. 
  9348                                  ;		Uses the following logic for updating Daycnt
  9349                                  ;
  9350                                  ;		if ( rollover ) {
  9351                                  ;			if ( t_switch )
  9352                                  ;				daycnt++ ;
  9353                                  ;			else
  9354                                  ;				daycnt += rollover ;
  9355                                  ;		}
  9356                                  ;
  9357                                  ; USES : AX
  9358                                  ;
  9359                                  ; RETURNS : CX:DX - tick count
  9360                                  ; MODIFIES : daycnt
  9361                                  ;
  9362                                  ;----------------------------------------------------------------------------
  9363                                  
  9364                                  		; 17/10/2022
  9365                                  GetTickCnt:	
  9366 00000476 30E4                    		xor	ah, ah
  9367 00000478 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  9368                                  					; Return: CX:DX	= clock	count
  9369                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  9370                                  					; midnight
  9371                                  					; Otherwise, AL	> 0
  9372                                  		; 20/12/2023
  9373 0000047A 30E4                    		xor	ah, ah
  9374 0000047C 3826[EB04]              		cmp	byte [t_switch], ah ; 0
  9375                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  9376 00000480 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
  9377                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  9378                                  					; and not flag
  9379 00000482 0106[E904]              		add	[daycnt], ax
  9380 00000486 C3                      		retn
  9381                                  ; ---------------------------------------------------------------------------
  9382                                  
  9383                                  inc_case:				
  9384 00000487 08C0                    		or	al, al
  9385 00000489 7404                    		jz	short no_rollover
  9386 0000048B FF06[E904]              		inc	word [daycnt]
  9387                                  no_rollover:				
  9388 0000048F C3                      		retn
  9389                                  
  9390                                  ;----------------------------------------------------------------------------
  9391                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  9392                                  ;----------------------------------------------------------------------------
  9393                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9394                                  ; 09/03/2019 - Retro DOS v4.0
  9395                                  
  9396                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  9397                                  ; 26/05/2018 - Retro DOS v3.0
  9398                                  ; 23/03/2018 - Retro DOS v2.0
  9399                                  
  9400                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  9401                                  
  9402                                  ;struc BPB_TYPE
  9403                                  ;.SECSIZE:	resw 1
  9404                                  ;.SECALL:	resb 1
  9405                                  ;.RESNUM:	resw 1
  9406                                  ;.FATNUM:	resb 1
  9407                                  ;.DIRNUM:	resw 1
  9408                                  ;.SECNUM:	resw 1
  9409                                  ;.FATID:	resb 1
  9410                                  ;.FATSIZE:	resw 1
  9411                                  ;.SLIM:		resw 1
  9412                                  ;.HLIM:		resw 1
  9413                                  ;.HIDDEN:	resw 1
  9414                                  ;.size:
  9415                                  ;endstruc
  9416                                  
  9417                                  ;-----------------------------------------------------------------
  9418                                  ;	disk interface routines
  9419                                  ;-----------------------------------------------------------------
  9420                                  
  9421                                  ; device attribute bits:
  9422                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  9423                                  
  9424                                  ;MAXERR		equ	5
  9425                                  ;MAX_HD_FMT_ERR	equ	2
  9426                                  
  9427                                  ;LSTDRV	equ 504h
  9428                                  
  9429                                  ; some floppies do not have changeline. as a result, media-check would
  9430                                  ; normally return i-don't-know, the dos would continually reread the fat and
  9431                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  9432                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  9433                                  ; the time of the last successful disk operation and compare it with the current
  9434                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  9435                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  9436                                  ; since we cannot trust the timer to be always available, we record the number 
  9437                                  ; of media checks that have occurred when no apparent time has elapsed. while
  9438                                  ; this number is < a given threshold, we say no change. when it exceeds that
  9439                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  9440                                  ; the time of last successful access, if we see that time has passed too,
  9441                                  ; we reset the counter.
  9442                                  
  9443                                  accessmax	equ	5
  9444                                  
  9445                                  ; due to various bogosities, we need to continually adjust what the head
  9446                                  ; settle time is.  the following algorithm is used:
  9447                                  ;
  9448                                  ;   get the current head settle value.
  9449                                  ;   if it is 0, then
  9450                                  ;	set slow = 15
  9451                                  ;   else
  9452                                  ;	set slow = value
  9453                                  ;   ...
  9454                                  ;*********************************************
  9455                                  ;************ old algorithm ******************
  9456                                  ;*   if we are seeking and writing then
  9457                                  ;*	 use slow
  9458                                  ;*   else
  9459                                  ;*	 use fast
  9460                                  ;*********************************************
  9461                                  ;*********** ibm's requested logic ***********
  9462                                  ;   if we are seeking and writing and not on an at then
  9463                                  ;	use slow
  9464                                  ;   else
  9465                                  ;	use fast
  9466                                  ;   ...
  9467                                  ;   restore current head settle value
  9468                                  ;
  9469                                  ;
  9470                                  ;---------------------------------------
  9471                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  9472                                  					; it on after handling config.sys file as a
  9473                                  					; default value, if multrk_flag = multrk_off1.
  9474                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  9475                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  9476                                  
  9477                                  ; close data segment, open Bios_Code segment
  9478                                  
  9479                                  ; 15/10/2022
  9480                                  
  9481                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  9482                                  
  9483                                  ;-----------------------------------------------------------------
  9484                                  ;	command jump table
  9485                                  ;-----------------------------------------------------------------
  9486                                  
  9487 00000490 00                      		db 0
  9488                                  
  9489                                  ; 11/12/2022
  9490                                  %if 0
  9491                                  
  9492                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  9493                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  9494                                  		dw 1742h		; dsk_init
  9495                                  		dw 4EBh			; media_chk
  9496                                  		dw 592h			; get_bpb
  9497                                  		dw 0D5h			; bc_cmderr
  9498                                  		dw 857h			; dsk_read
  9499                                  		dw 83Dh			; x_bus_exit
  9500                                  		dw 558h			; ret_carry_clear
  9501                                  		dw 558h			; ret_carry_clear
  9502                                  		dw 849h			; dsk_writ
  9503                                  		dw 841h			; dsk_writv
  9504                                  		dw 558h			; ret_carry_clear
  9505                                  		dw 558h			; ret_carry_clear
  9506                                  		dw 0D5h			; bc_cmderr
  9507                                  		dw 80Ah			; dsk_open
  9508                                  		dw 81Ah			; dsk_close
  9509                                  		dw 831h			; dsk_rem
  9510                                  		dw 558h			; ret_carry_clear
  9511                                  		dw 558h			; ret_carry_clear
  9512                                  		dw 558h			; ret_carry_clear
  9513                                  		dw 0C6Bh		; do_generic_ioctl
  9514                                  		dw 558h			; ret_carry_clear
  9515                                  		dw 558h			; ret_carry_clear
  9516                                  		dw 558h			; ret_carry_clear
  9517                                  		dw 1124h		; ioctl_getown
  9518                                  		dw 1142h		; ioctl_setown
  9519                                  		dw 129Ah		; ioctl_support_query
  9520                                  
  9521                                  ;dtbl_siz equ $-dsktbl
  9522                                  
  9523                                  %endif
  9524                                  		; 11/12/2022
  9525 00000491 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  9526 00000492 [9716]                  		dw dsk_init
  9527 00000494 [DA04]                  		dw media_chk
  9528 00000496 [8005]                  		dw get_bpb
  9529 00000498 [D500]                  		dw bc_cmderr
  9530 0000049A [2A08]                  		dw dsk_read
  9531 0000049C [1008]                  		dw x_bus_exit
  9532 0000049E [4605]                  		dw ret_carry_clear
  9533 000004A0 [4605]                  		dw ret_carry_clear
  9534 000004A2 [1C08]                  		dw dsk_writ
  9535 000004A4 [1408]                  		dw dsk_writv
  9536 000004A6 [4605]                  		dw ret_carry_clear
  9537 000004A8 [4605]                  		dw ret_carry_clear
  9538 000004AA [D500]                  		dw bc_cmderr
  9539 000004AC [E007]                  		dw dsk_open
  9540 000004AE [EF07]                  		dw dsk_close
  9541 000004B0 [0508]                  		dw dsk_rem
  9542 000004B2 [4605]                  		dw ret_carry_clear
  9543 000004B4 [4605]                  		dw ret_carry_clear
  9544 000004B6 [4605]                  		dw ret_carry_clear
  9545 000004B8 [280C]                  		dw do_generic_ioctl
  9546 000004BA [4605]                  		dw ret_carry_clear
  9547 000004BC [4605]                  		dw ret_carry_clear
  9548 000004BE [4605]                  		dw ret_carry_clear
  9549 000004C0 [BA10]                  		dw ioctl_getown
  9550 000004C2 [D710]                  		dw ioctl_setown
  9551 000004C4 [1812]                  		dw ioctl_support_query
  9552                                  
  9553                                  dtbl_siz equ $-dsktbl
  9554                                  
  9555                                  ; =============== S U B	R O U T	I N E =======================================
  9556                                  
  9557                                  ; ---------------------------------------------------------------------------
  9558                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9559                                  ; the one that belongs to the drive specified. carry is set if none exists
  9560                                  ; for the drive. Pointer is returned in es:[di]
  9561                                  ;
  9562                                  ;  AL contains the logical drive number.
  9563                                  ; ---------------------------------------------------------------------------
  9564                                  
  9565                                  SetDrive:	
  9566                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9567 000004C6 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9568                                  X_Scan_Loop:				
  9569 000004CA 26384505                		cmp	[es:di+5], al	
  9570 000004CE 7409                    		jz	short X_SetDrv
  9571 000004D0 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9572 000004D3 83FFFF                  		cmp	di, 0FFFFh
  9573 000004D6 75F2                    		jnz	short X_Scan_Loop
  9574 000004D8 F9                      		stc
  9575                                  X_SetDrv:				
  9576 000004D9 C3                      		retn
  9577                                  
  9578                                  ; ---------------------------------------------------------------------------
  9579                                  
  9580                                  ; 15/10/2022
  9581                                  
  9582                                  ; ---------------------------------------------------------------------
  9583                                  ; if id is f9, have a 96tpi disk else
  9584                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9585                                  ;  otherwise if within 2 secs of last disk operation media could not
  9586                                  ;    have changed, otherwise dont know if media has changed
  9587                                  ; ---------------------------------------------------------------------
  9588                                  
  9589                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9590 000004DA E8E9FF                  		call	SetDrive
  9591 000004DD BE0100                  		mov	si, 1
  9592 000004E0 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9593                                  					; fchanged_by_format
  9594 000004E5 7416                    		jz	short WeAreNotFakingIt
  9595                                  		; 12/12/2022
  9596 000004E7 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9597                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9598                                  					; ~fchanged_by_format ;	reset flag
  9599 000004EC C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9600                                  					; Ensure that we ask the rom if media has changed
  9601 000004F1 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9602                                  					; fnon_removable
  9603 000004F6 740C                    		jz	short wehaveafloppy
  9604 000004F8 BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9605 000004FB EB2C                    		jmp	short Media_Done ; Media_Done
  9606                                  ; ---------------------------------------------------------------------------
  9607                                  
  9608                                  WeAreNotFakingIt:
  9609                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9610 000004FD 26F6452301              		test	byte [es:di+23h], 1
  9611 00000502 7525                    		jnz	short Media_Done
  9612                                  wehaveafloppy:				
  9613 00000504 31F6                    		xor	si, si		; Presume "I don't know"
  9614                                  
  9615                                  		; If we have a floppy with changeline support, we ask the ROM
  9616                                  		; to determine if media has changed. We do not perform the
  9617                                  		; 2 second check for these drives.
  9618                                  
  9619 00000506 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9620 0000050B 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9621 0000050D E85212                  		call	mediacheck	;  Call	into removable routine
  9622 00000510 7236                    		jb	short err_exitj
  9623 00000512 E8A213                  		call	haschange
  9624 00000515 7512                    		jnz	short Media_Done
  9625                                  mChk_NoChangeLine:
  9626                                  		; If we come here, we have a floppy with no changeline support
  9627                                  			
  9628 00000517 BE0100                  		mov	si, 1		; Presume no change
  9629 0000051A A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9630 0000051D 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9631                                  					; Is drive of last access the same?
  9632 00000521 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9633 00000523 E82800                  		call	Check_Time_Of_Access
  9634 00000526 EB01                    		jmp	short Media_Done
  9635                                  ; ---------------------------------------------------------------------------
  9636                                  
  9637                                  Media_Unk:				
  9638 00000528 4E                      		dec	si		; ; Return "I don't know"
  9639                                  
  9640                                  		; SI now contains the correct value for media change.
  9641                                  		; Clean up the left overs
  9642                                  Media_Done:	
  9643                                  		; 19/10/2022			
  9644 00000529 06                      		push	es
  9645 0000052A C41E[1200]              		les	bx, [ptrsav]
  9646 0000052E 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9647 00000532 07                      		pop	es
  9648 00000533 09F6                    		or	si, si
  9649 00000535 790F                    		jns	short ret_carry_clear ;	volidok
  9650 00000537 803E[7700]00            		cmp	byte [fhave96], 0
  9651 0000053C 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9652 0000053E E80813                  		call	media_set_vid
  9653                                  mChk1_NoChangeLine:			
  9654 00000541 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9655                                  					; Make sure we ask rom for media check
  9656                                  ret_carry_clear:			
  9657 00000546 F8                      		clc			; volidok
  9658 00000547 C3                      		retn
  9659                                  ; ---------------------------------------------------------------------------
  9660                                  
  9661                                  err_exitj:				
  9662 00000548 E86806                  		call	maperror	; guaranteed to	set carry
  9663                                  ret81:					
  9664 0000054B B481                    		mov	ah, 81h		; return error status
  9665 0000054D C3                      		retn			; return with carry set
  9666                                  
  9667                                  ; =============== S U B	R O U T	I N E =======================================
  9668                                  
  9669                                  ; ---------------------------------------------------------------------------
  9670                                  ; perform a check on the time passed since the last access for this physical
  9671                                  ; drive.
  9672                                  ; we are accessing the same drive. if the time of last successful access was
  9673                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9674                                  ; returns in si:
  9675                                  ;	0 - if time of last access was >= 2 seconds
  9676                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9677                                  ; registers affected ax,cx,dx, flags.
  9678                                  ;
  9679                                  ;	assume es:di -> bds, ds->Bios_Data
  9680                                  ; ---------------------------------------------------------------------------
  9681                                  
  9682                                  		; 19/10/2022
  9683                                  Check_Time_Of_Access:
  9684 0000054E BE0100                  		mov	si, 1		; presume no change.
  9685 00000551 E822FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9686 00000554 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9687                                  					; get stored time
  9688 00000558 29C2                    		sub	dx, ax
  9689 0000055A 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9690 0000055E 19C1                    		sbb	cx, ax
  9691 00000560 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9692 00000562 09D2                    		or	dx, dx		; time must pass
  9693 00000564 7511                    		jnz	short timepassed ; yes, examine max value
  9694 00000566 FE06[1D01]              		inc	byte [accesscount]
  9695 0000056A 803E[1D01]05            		cmp	byte [accesscount], 5 
  9696                                  					; if count is less than threshold, ok
  9697 0000056F 720C                    		jb	short timecheck_ret
  9698 00000571 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9699 00000575 EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9700                                  ; ---------------------------------------------------------------------------
  9701                                  
  9702                                  timepassed:				
  9703 00000577 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9704                                  					; min elapsed time? (2 seconds)
  9705 0000057A 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9706                                  
  9707                                  		; everything indicates that we do not know what has happened.
  9708                                  timecheck_unk:				
  9709 0000057C 4E                      		dec	si		; presume i don't know
  9710                                  timecheck_ret:				
  9711 0000057D C3                      		retn
  9712                                  
  9713                                  ; ---------------------------------------------------------------------------
  9714                                  ; 15/10/2022
  9715                                  Err_Exitj2:
  9716 0000057E EBC8                    		jmp	short err_exitj
  9717                                  
  9718                                  ; ---------------------------------------------------------------------------
  9719                                  
  9720                                  ; 15/10/2022
  9721                                  
  9722                                  ; ==========================================================================
  9723                                  ; Build a valid bpb for the disk in the drive.
  9724                                  ; ==========================================================================
  9725                                  
  9726                                  		; 19/10/2022
  9727                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9728 00000580 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9729 00000583 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9730 00000586 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9731                                  					; fnon_removable
  9732 0000058B 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9733                                  
  9734                                  		; let's set the default value for volid,vol_serial,
  9735                                  		; filesys_id in bds table
  9736                                  
  9737 0000058D E83700                  		call	clear_ids
  9738                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9739 00000590 C606[0305]01            		mov	byte [set_id_flag], 1
  9740 00000595 E85B00                  		call	GetBp		; build	a bpb if necessary
  9741 00000598 72B1                    		jb	short ret81
  9742                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9743 0000059A 803E[0305]02            		cmp	byte [set_id_flag], 2
  9744                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9745 0000059F C606[0305]00            		mov	byte [set_id_flag], 0
  9746 000005A4 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9747                                  					; otherwise, conventional boot record
  9748                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9749 000005A6 803E[7700]00            		cmp	byte [fhave96], 0
  9750 000005AB 7403                    		jz	short already_gotbpb ; brif not
  9751 000005AD E80D13                  		call	set_volume_id
  9752                                  already_gotbpb:				
  9753 000005B0 83C706                  		add	di, 6		; BDS.BPB
  9754                                  					; return the bpb from the current bds
  9755                                  
  9756                                  ;		fall into setptrsav, es:di -> result
  9757                                  
  9758                                  ; ---------------------------------------------------------------------------
  9759                                  
  9760                                  ; 15/10/2022
  9761                                  
  9762                                  ; ==========================================================================
  9763                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9764                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9765                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9766                                  ;It fails, for instance, when we install an external drive using driver.sys
  9767                                  ;because then the BDS segment is no longer Bios_Data. 
  9768                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9769                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9770                                  ;restored before returning to the caller.
  9771                                  ; ==========================================================================
  9772                                  
  9773                                  		; 19/10/2022
  9774                                  SetPtrSav:	; return point for dsk_init				
  9775 000005B3 8CC1                    		mov	cx, es		; save es
  9776                                  		;les	bx, ds:ptrsav
  9777 000005B5 C41E[1200]              		les	bx, [ptrsav]
  9778 000005B9 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9779 000005BD 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9780 000005C1 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9781 000005C5 F8                      		clc
  9782 000005C6 C3                      		retn
  9783                                  
  9784                                  ; =============== S U B	R O U T	I N E =======================================
  9785                                  
  9786                                  ; 15/10/2022
  9787                                  
  9788                                  ; -----------------------------------------------------
  9789                                  ; clear ids in bds table. only applied for floppies.
  9790                                  ;input:  es:di -> bds table
  9791                                  ;	assumes ds: -> Bios_Data
  9792                                  ;output: volid set to "NO NAME    "
  9793                                  ;	 vol_serial set to 0.
  9794                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9795                                  ;	   depending on the flag fatsize in bds.
  9796                                  ;
  9797                                  ;	trashes si, cx
  9798                                  ; -----------------------------------------------------
  9799                                  
  9800                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9801                                  ;size_of_EXT_SYSTEM_ID equ 8
  9802                                  
  9803                                  clear_ids:
  9804                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9805 000005C7 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9806                                  clear_ids_x:	; 11/09/2023		
  9807                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9808 000005CB 57                      		push	di
  9809 000005CC 31C9                    		xor	cx, cx		; no serial number
  9810 000005CE 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9811 000005D2 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9812                                  
  9813                                  		; BUGBUG - there's a lot in common here and with
  9814                                  		; mov_media_ids.. see if we can save some space by
  9815                                  		; merging them... jgl
  9816                                  
  9817                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9818                                  		; 10/12/2022
  9819 000005D6 B10B                    		mov	cl, 11 ; cx = 11		
  9820                                  
  9821                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9822 000005D8 BE[1605]                		mov	si, vol_no_name	; 19/10/2022
  9823 000005DB 83C74B                  		add	di, 75		; BDS.volid
  9824 000005DE F3A4                    		rep movsb
  9825                                  		
  9826                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9827                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9828                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9829                                  		;test	byte [es:di+1Fh], 40h
  9830                                  
  9831                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9832                                  			; Microsoft/IBM code has a bug here because the BDS's
  9833                                  			; .volid and .filesys_id fields will be reset
  9834                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9835                                  			; at the BDS offset 31 but current (this) code checks flags
  9836                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9837                                  			;
  9838                                  			; Correct Code:
  9839                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9840                                  			; 11/09/2023
  9841                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9842                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9843                                  			;
  9844                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9845                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9846                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9847                                  			;
  9848                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9849                                  			; 'clear_ids' is used for floppy disks only and the default
  9850                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9851                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9852                                  
  9853 000005E0 A840                    		test	al, 40h ; * 
  9854                                  		
  9855                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9856 000005E2 BE[0D05]                		mov	si, fat_16_id	; 19/10/2022
  9857 000005E5 7503                    		jnz	short ci_bigfat
  9858                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9859 000005E7 BE[0405]                		mov	si, fat_12_id	 ; 19/10/2022
  9860                                  ci_bigfat:				
  9861                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9862                                  		; 10/12/2022
  9863 000005EA B108                    		mov	cl, 8 ; cx = 8 
  9864 000005EC 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9865                                  					; filesys_id field
  9866 000005EF F3A4                    		rep movsb
  9867 000005F1 5F                      		pop	di		; restore bds pointer
  9868                                  getret_exit:		; 21/12/2023
  9869 000005F2 C3                      		retn
  9870                                  
  9871                                  ; =============== S U B	R O U T	I N E =======================================
  9872                                  
  9873                                  ; 15/10/2022
  9874                                  
  9875                                  ; ---------------------------------------------------------------------------
  9876                                  ;	getbp - return bpb from the drive specified by the bds.
  9877                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9878                                  ;	    note that we never come here for fixed disks.
  9879                                  ;	    for all other cases,
  9880                                  ;	      - it reads boot sector to pull out the bpb
  9881                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9882                                  ;		to get the fat id byte to build the bpb from there.
  9883                                  ;
  9884                                  ;   inputs:	es:di point to correct bds.
  9885                                  ;
  9886                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9887                                  ;		carry set, and al=7 if invalid disk.
  9888                                  ;		carry set and error code in al if other error.
  9889                                  ;		if failed to recognize the boot record, then will set the
  9890                                  ;		set_id_flag to 0.
  9891                                  ;		this routine will only work for a floppy diskette.
  9892                                  ;		     for a fixed disk, it will just return.
  9893                                  ;
  9894                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9895                                  ;	  segment definitions. It should be migrated towards.
  9896                                  ;	   now es:di has the bds, ds: has Bios_Data
  9897                                  ; ---------------------------------------------------------------------------
  9898                                  
  9899                                  GetBp:		; if returning fake bpb then return bpb as is.
  9900                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable
  9901 000005F3 26F6452305              		test	byte [es:di+23h], 5
  9902                                  		;jz	short getbp1	; getbp1
  9903                                  		;jmp	getret_exit
  9904                                  		; 21/12/2023
  9905 000005F8 75F8                    		jnz	short getret_exit
  9906                                  ; ---------------------------------------------------------------------------
  9907                                  getbp1:
  9908 000005FA 51                      		push	cx
  9909 000005FB 52                      		push	dx
  9910 000005FC 53                      		push	bx
  9911                                  
  9912                                  		; attempt to read in boot sector and determine bpb.
  9913                                  		; we assume that the 2.x and greater dos disks all
  9914                                  		; have a valid boot sector.
  9915                                  
  9916 000005FD E8A600                  		call	readbootsec
  9917 00000600 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9918 00000602 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9919 00000604 7508                    		jnz	short dofatbpb
  9920 00000606 E8EB00                  		call	movbpb		; move bpb into	registers
  9921 00000609 EB54                    		jmp	short Has1
  9922                                  ; ---------------------------------------------------------------------------
  9923                                  
  9924                                  getbp_err_ret_brdg:			
  9925 0000060B E98400                  		jmp	getbp_err_ret
  9926                                  ; ---------------------------------------------------------------------------
  9927                                  
  9928                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9929                                  		; and fill in bpb from there.
  9930                                  dofatbpb:				
  9931 0000060E E84F01                  		call	readfat		; puts media descriptor	byte in	ah
  9932 00000611 72F8                    		jb	short getbp_err_ret_brdg
  9933                                  		;cmp	ds:fhave96, 0	; changeline support available?
  9934 00000613 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9935 00000618 7403                    		jz	short bpb_nochangeline ; brif not
  9936 0000061A E84112                  		call	hidensity	; may not return! May add sp, 2	and
  9937                                  					; jump to has1!!!!!! or	has720K
  9938                                  bpb_nochangeline:		; test for a valid 3.5" medium
  9939 0000061D 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9940                                  					; ffSmall
  9941 00000622 7512                    		jnz	short is_floppy
  9942 00000624 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9943 00000627 7573                    		jnz	short got_unknown_medium
  9944                                  Has720K:
  9945                                  		; 22/12/2023
  9946                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
  9947                                  		;mov	bx, sm92	; 19/10/2022
  9948                                  
  9949                                  		; es points to segment of bds. the following should be modified
  9950                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9951                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9952                                  
  9953                                  		; 22/12/2023
  9954                                  		;; 10/12/2022
  9955                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9956                                  		;; 21/12/2022
  9957                                  		;mov	al, [bx]
  9958                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9959                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9960                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9961                                  		;; 19/10/2022 - Temporary !
  9962                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9963                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9964                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9965                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
  9966                                  
  9967                                  		; 22/12/2023 (sm92)
  9968                                  		; (PCDOS 7.1, IBMBIO.COM - BIOSCODE:071Eh)
  9969 00000629 B003                    		mov	al, 3		; bpbtype.sbf = 3
  9970 0000062B B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
  9971 0000062E BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
  9972                                  					; dh = bpbtype.chead = 2
  9973 00000631 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
  9974                                  					; bh = bpbtype.dire = 112
  9975 00000634 EB29                    		jmp	short Has1
  9976                                  ; ---------------------------------------------------------------------------
  9977                                  
  9978                                  is_floppy:			; must be a 5.25" floppy if we come here
  9979 00000636 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9980 00000639 7261                    		jb	short got_unknown_medium
  9981                                  
  9982 0000063B B001                    		mov	al, 1		; set number of	fat sectors
  9983 0000063D BB0840                  		mov	bx, 16392	; 64*256+8
  9984                                  					; set dir entries and sector max
  9985 00000640 B94001                  		mov	cx, 320		; 40*8
  9986                                  					; set size of drive
  9987 00000643 BA0101                  		mov	dx, 257		; 01*256+1
  9988                                  					; set head limit and sec/all unit
  9989                                  		; 22/12/2023
  9990                                  		;mov	al, 1		; bpbtype.sbf = 1
  9991                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
  9992                                  		;			; bh = bpbtype.dire = 64
  9993                                  		;mov	cx, 140h	; bpbtype.csec = 320
  9994                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
  9995                                  		;			; dh = bpbtype.chead = 1
  9996                                  
  9997 00000646 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9998 00000649 7507                    		jnz	short has8	; nz = has 8 sectors
  9999 0000064B FEC0                    		inc	al	; 2 	; inc number of	fat sectors
 10000 0000064D FEC3                    		inc	bl	; 9	; inc sector max
 10001                                  		;add	cx, 40		; increase size	(to 360)
 10002                                  		; 18/12/2022
 10003 0000064F 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 10004                                  has8:
 10005 00000652 F6C401                  		test	ah, 1		; test for 1 or	2 heads
 10006 00000655 7408                    		jz	short Has1	; jz = 1 head
 10007 00000657 01C9                    		add	cx, cx		; double size of disk
 10008 00000659 B770                    		mov	bh, 112		; increase number of directory entries
 10009 0000065B FEC6                    		inc	dh		; inc sec/all unit
 10010 0000065D FEC2                    		inc	dl		; inc head limit
 10011                                  Has1:
 10012                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 10013 0000065F 1E                      		push	ds
 10014 00000660 06                      		push	es
 10015 00000661 1F                      		pop	ds
 10016                                  
 10017                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 10018                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 10019                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 10020                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 10021                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 10022                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 10023                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 10024                                  
 10025 00000662 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 10026 00000665 30F6                    		xor	dh, dh
 10027 00000667 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 10028 0000066A 88FA                    		mov	dl, bh
 10029 0000066C 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 10030 0000066F 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 10031 00000672 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 10032 00000675 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 10033 00000678 88C2                    		mov	dl, al
 10034 0000067A 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 10035 0000067D 88DA                    		mov	dl, bl
 10036 0000067F 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 10037                                  
 10038                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 10039                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 10040                                  		; to 0 since this code is for floppies
 10041                                  
 10042                                  		; 18/12/2022
 10043                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 10044                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 10045                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 10046                                  		; 18/12/2022
 10047 00000682 29C9                    		sub	cx, cx ; 0
 10048                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 10049                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 10050                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 10051                                  		
 10052                                  		; 02/09/2023
 10053 00000684 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 10054 00000687 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 10055 0000068A 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 10056                                  		
 10057 0000068D 1F                      		pop	ds ; 02/09/2023
 10058                                  getret:
 10059 0000068E 5B                      		pop	bx
 10060 0000068F 5A                      		pop	dx
 10061 00000690 59                      		pop	cx
 10062                                  ;getret_exit:		; 21/12/2023
 10063 00000691 C3                      		retn
 10064                                  ; ---------------------------------------------------------------------------
 10065                                  
 10066                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 10067                                  		;mov	ds:set_id_flag,	0
 10068                                  		; 19/10/2022
 10069 00000692 C606[0305]00            		mov	byte [set_id_flag], 0
 10070 00000697 E81905                  		call	maperror
 10071 0000069A EBF2                    		jmp	short getret
 10072                                  ; ---------------------------------------------------------------------------
 10073                                  
 10074                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 10075                                  		; we do	not assume any type of bpb for this medium.
 10076                                  
 10077                                  got_unknown_medium:
 10078                                  		;mov	ds:set_id_flag,	0
 10079 0000069C C606[0305]00            		mov	byte [set_id_flag], 0
 10080 000006A1 B007                    		mov	al, 7
 10081 000006A3 F9                      		stc
 10082 000006A4 EBE8                    		jmp	short getret
 10083                                  
 10084                                  ; =============== S U B	R O U T	I N E =======================================
 10085                                  
 10086                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10087                                  
 10088                                  ; ----------------------------------------------------------------
 10089                                  ; read in the boot sector. set carry if error in reading sector.
 10090                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 10091                                  ;
 10092                                  ;	assumes es:di -> bds, ds-> Bios_Data
 10093                                  ; ----------------------------------------------------------------
 10094                                  
 10095                                  ; 10/03/2019 - Retro DOS v4.0
 10096                                  
 10097                                  readbootsec:	
 10098 000006A6 B600                    		mov	dh, 0		; head 0
 10099 000006A8 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 10100 000006AB E8BF00                  		call	read_sector
 10101 000006AE 7243                    		jb	short err_ret
 10102 000006B0 31DB                    		xor	bx, bx		; assume valid boot sector
 10103                                  
 10104                                  		; put a sanity check for the boot sector in here to detect
 10105                                  		; boot sectors that do not have valid bpbs. we examine the
 10106                                  		; first two bytes - they must contain a long jump (69h) or a
 10107                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 10108                                  		; (E9h). if this test is passed, we further check by examining
 10109                                  		; the signature at the end of the boot sector for the word
 10110                                  		; AA55h. if the signature is not present, we examine the media
 10111                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 10112                                  		; logic is modified a little bit. we are not going to check
 10113                                  		; signature. instead we are going to sanity check the media
 10114                                  		; byte in bpb regardless of the validity of signature. this is
 10115                                  		; to save the already developed commercial products that have
 10116                                  		; good jump instruction and signature but with the false bpb
 10117                                  		; informations
 10118                                  
 10119                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 10120                                  
 10121                                  		; 02/09/2023
 10122                                  		; 19/10/2022
 10123                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 10124                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 10125                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 10126                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 10127                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 10128                                  		;jnz	short invalidbootsec
 10129                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 10130                                  		;jnz	short invalidbootsec
 10131                                  
 10132                                  		; 02/09/2023 (PCDOS 7.1)
 10133 000006B2 A0[4E01]                		mov	al, [disksector]
 10134 000006B5 3C69                    		cmp	al, 69h		; is it a direct jump?
 10135 000006B7 740F                    		je	short check_bpb_mediabyte
 10136                                  					; don't need to find a nop
 10137 000006B9 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 10138 000006BB 740B                    		je	short check_bpb_mediabyte
 10139                                  					; no need for nop
 10140 000006BD 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 10141 000006BF 7530                    		jne	short invalidbootsec
 10142 000006C1 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 10143 000006C6 7529                    		jne	short invalidbootsec
 10144                                  
 10145                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10146                                  ;
 10147                                  ;; 10/03/2019
 10148                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 10149                                  ;;
 10150                                  ;; Don't have to perform the following signature check since
 10151                                  ;; we need to check the media byte even with the good signatured diskette.
 10152                                  ;;
 10153                                  ;;check_signature:
 10154                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 10155                                  ;;							 ; disk or 1.x media.
 10156                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 10157                                  ;;					       ; may need some special handling
 10158                                  
 10159                                  ; check for non-ibm disks which do not have the signature AA55h at the
 10160                                  ; end of the boot sector, but still have a valid boot sector. this is done
 10161                                  ; by examining the media descriptor in the boot sector.
 10162                                  
 10163                                  		; 19/10/2022
 10164                                  check_bpb_mediabyte:
 10165 000006C8 A0[6301]                		mov	al, [disksector+15h]
 10166                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 10167 000006CB 50                      		push	ax ; 02/09/2023
 10168 000006CC 24F0                    		and	al, 0F0h
 10169 000006CE 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 10170 000006D0 58                      		pop	ax ; 02/09/2023
 10171 000006D1 751E                    		jnz	short invalidbootsec
 10172                                  
 10173                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 10174                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 10175                                  ; sectors. these are specifically diskettes that were formatted in drives
 10176                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 10177                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 10178                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 10179                                  ; help our build bpb routine to recognise these specific cases, and to
 10180                                  ; set up out copy of the bpb accordingly.
 10181                                  ; we do this by checking to see if the boot sector is off a diskette that
 10182                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 10183                                  ; sec/clus field to 1. if not, we carry on as normal.
 10184                                  
 10185                                  checksinglesided:
 10186                                  		;mov	al, [disksector+15h]
 10187                                  		; 02/09/2023
 10188                                  		; al = [disksector+15h]
 10189 000006D3 3CF0                    		cmp	al, 0F0h
 10190 000006D5 741B                    		jz	short gooddsk
 10191 000006D7 A801                    		test	al, 1
 10192 000006D9 7517                    		jnz	short gooddsk
 10193 000006DB 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
 10194 000006E1 7507                    		jnz	short mustbeearlier
 10195 000006E3 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 10196 000006E8 7308                    		jnb	short gooddsk
 10197                                  
 10198                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 10199                                  
 10200                                  mustbeearlier:				
 10201 000006EA C606[5B01]01            		mov	byte [disksector+0Dh], 1
 10202                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 10203 000006EF EB01                    		jmp	short gooddsk
 10204                                  ; ---------------------------------------------------------------------------
 10205                                  
 10206                                  invalidbootsec:				
 10207 000006F1 43                      		inc	bx		; indicate that boot sector invalid
 10208                                  		; 10/12/2022
 10209                                  movbpb_ret:
 10210                                  gooddsk:				
 10211 000006F2 F8                      		clc
 10212                                  err_ret:
 10213 000006F3 C3                      		retn
 10214                                  ; ---------------------------------------------------------------------------
 10215                                  
 10216                                  		; 10/12/2022
 10217                                  ;err_ret:				
 10218                                  		;retn
 10219                                  
 10220                                  ; =============== S U B	R O U T	I N E =======================================
 10221                                  
 10222                                  ; 15/10/2022
 10223                                  ; ---------------------------------------------------------------------------
 10224                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 10225                                  ; getbp routine at has1
 10226                                  ;
 10227                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 10228                                  ; serial number, volume label, file system id in bds according to
 10229                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
 10230                                  ; to signal that volume label is set already from the extended boot record
 10231                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 10232                                  ; the volume label in the root directory.)
 10233                                  ; ---------------------------------------------------------------------------
 10234                                  
 10235                                  ; 10/03/2019 - Retro DOS v4.0
 10236                                  
 10237                                  		; 19/10/2022
 10238                                  movbpb:	
 10239 000006F4 8A36[5B01]              		mov	dh, [disksector+0Dh]
 10240                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 10241                                  					; sectors per unit
 10242 000006F8 8A3E[5F01]              		mov	bh, [disksector+11h]
 10243                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 10244                                  					; number of directory entries
 10245 000006FC 8B0E[6101]              		mov	cx, [disksector+13h]
 10246                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 10247                                  					; size of drive
 10248 00000700 8A26[6301]              		mov	ah, [disksector+15h]
 10249                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 10250                                  					; media	descriptor
 10251 00000704 A0[6401]                		mov	al, [disksector+16h];
 10252                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 10253                                  					; number of fat	sectors
 10254 00000707 8A1E[6601]              		mov	bl, [disksector+18h]
 10255                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 10256                                  					; sectors per track
 10257 0000070B 8A16[6801]              		mov	dl, [disksector+1Ah]
 10258                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 10259                                  					; number of heads
 10260 0000070F 803E[0305]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 10261 00000714 75DC                    		jnz	short movbpb_ret
 10262 00000716 E81200                  		call	mov_media_ids
 10263 00000719 7205                    		jb	short movbpb_conv ; conventional boot record?
 10264 0000071B C606[0305]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 10265                                  movbpb_conv:				
 10266 00000720 803E[7700]01            		cmp	byte [fhave96], 1
 10267 00000725 75CB                    		jnz	short movbpb_ret
 10268 00000727 E88711                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 10269                                  		; 10/12/2022
 10270                                  		; cf = 0
 10271                                  ;movbpb_ret:				
 10272                                  		;clc
 10273 0000072A C3                      		retn
 10274                                  
 10275                                  ; =============== S U B	R O U T	I N E =======================================
 10276                                  
 10277                                  ;copy the boot_serial number, volume id, and filesystem id from the
 10278                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 10279                                  ;by es:di.
 10280                                  
 10281                                  ;in.) es:di -> bds
 10282                                  ;     ds:disksector = valid extended boot record.
 10283                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 10284                                  ;      the boot record information.
 10285                                  ;     carry flag set if not an extended bpb.
 10286                                  ;     all registers saved except the flag.
 10287                                  
 10288                                  		; 19/10/2022
 10289                                  mov_media_ids:		
 10290 0000072B 803E[7401]29            		cmp	byte [disksector+26h], 29h
 10291                                  					; [disksector+EXT_BOOT.SIG],
 10292                                  					; EXT_BOOT_SIGNATURE
 10293 00000730 752C                    		jnz	short mmi_not_ext
 10294 00000732 51                      		push	cx
 10295 00000733 8B0E[7501]              		mov	cx, [disksector+27h]
 10296                                  					; [disksector+EXT_BOOT.SERIAL]
 10297 00000737 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 10298 0000073B 8B0E[7701]              		mov	cx, [disksector+29h]
 10299                                  					; [disksector+EXT_BOOT.SERIAL+2]
 10300 0000073F 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 10301 00000743 57                      		push	di
 10302 00000744 56                      		push	si
 10303 00000745 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 10304 00000748 BE[7901]                		mov	si, disksector+2Bh
 10305                                  		;mov	si, (offset disksector+2Bh) ;
 10306                                  					; disksector+EXT_BOOT.VOL_LABEL
 10307 0000074B 83C74B                  		add	di, 75		; BDS.volid
 10308 0000074E F3A4                    		rep movsb
 10309                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 10310                                  		; 10/12/2022
 10311 00000750 B108                    		mov	cl, 8 ; cx = 8
 10312 00000752 BE[8401]                		mov	si, disksector+36h
 10313                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 10314 00000755 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 10315 00000758 F3A4                    		rep movsb
 10316 0000075A 5E                      		pop	si
 10317 0000075B 5F                      		pop	di
 10318 0000075C 59                      		pop	cx
 10319                                  		; 10/12/2022
 10320                                  		; cf = 0
 10321                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 10322                                  				; (20/09/2022)
 10323 0000075D C3                      		retn
 10324                                  ; ---------------------------------------------------------------------------
 10325                                  
 10326                                  mmi_not_ext:				
 10327 0000075E F9                      		stc
 10328 0000075F C3                      		retn
 10329                                  
 10330                                  ; =============== S U B	R O U T	I N E =======================================
 10331                                  
 10332                                  ; 15/10/2022
 10333                                  ; --------------------------------------------------------------
 10334                                  ; read in the fat sector and get the media byte from it.
 10335                                  ; input : es:di -> bds
 10336                                  ; output:
 10337                                  ;	  carry set if an error occurs, ax contains error code.
 10338                                  ;	  otherwise, ah contains media byte on exit
 10339                                  ; --------------------------------------------------------------
 10340                                  
 10341                                  readfat:	
 10342                                  		;mov	dh, 0
 10343                                  		; 10/12/2022
 10344 00000760 30F6                    		xor	dh, dh
 10345 00000762 B90200                  		mov	cx, 2		; head 0
 10346                                  					; cylinder 0, sector 2
 10347 00000765 E80500                  		call	read_sector
 10348 00000768 7202                    		jb	short bad_fat_ret
 10349 0000076A 8A27                    		mov	ah, [bx]	; media	byte
 10350                                  bad_fat_ret:				
 10351 0000076C C3                      		retn
 10352                                  
 10353                                  ; =============== S U B	R O U T	I N E =======================================
 10354                                  
 10355                                  ; 15/10/2022
 10356                                  
 10357                                  ; ---------------------------------------------------------------------------
 10358                                  ; read a single sector into the temp buffer.
 10359                                  ; perform three retries in case of error.
 10360                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 10361                                  ;		cx has sector and cylinder
 10362                                  ;		dh has head
 10363                                  ;		es:di has bds
 10364                                  ;		ds has Bios_Data
 10365                                  ;
 10366                                  ;   outputs:	carry clear
 10367                                  ;		    Bios_Data:bx point to sector
 10368                                  ;		       (note: some callers assume location of buffer)
 10369                                  ;
 10370                                  ;		carry set
 10371                                  ;		    ax has rom error code
 10372                                  ;
 10373                                  ; register bp is preserved.
 10374                                  ; ---------------------------------------------------------------------------
 10375                                  
 10376                                  ; 10/03/2019 - Retro DOS v4.0
 10377                                  
 10378                                  		; 19/10/2022
 10379                                  read_sector:	
 10380 0000076D 55                      		push	bp
 10381 0000076E BD0300                  		mov	bp, 3		; make 3 attempts
 10382 00000771 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 10383 00000775 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
 10384                                  rd_ret:					
 10385 00000778 06                      		push	es
 10386 00000779 1E                      		push	ds
 10387 0000077A 07                      		pop	es
 10388 0000077B B80102                  		mov	ax, 201h
 10389 0000077E CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10390                                  					; AL = number of sectors to read, CH = track, CL = sector
 10391                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10392                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10393 00000780 07                      		pop	es
 10394 00000781 734A                    		jnb	short okret2
 10395                                  rd_rty:					
 10396 00000783 E86504                  		call	again		; reset	disk, decrement	bp, preserve ax
 10397 00000786 7442                    		jz	short err_rd_ret
 10398 00000788 26F6452301              		test	byte [es:di+23h], 1
 10399                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 10400                                  					; fnon_removable
 10401 0000078D 75E9                    		jnz	short rd_ret
 10402 0000078F 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10403 00000794 7510                    		jnz	short rd_skip1_dpt
 10404 00000796 50                      		push	ax
 10405 00000797 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 10406 00000798 C536[2D01]              		lds	si, [dpt]
 10407                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10408                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 10409                                  		;			; NORMSETTLE
 10410                                  		; 12/12/2022
 10411 0000079C B00F                    		mov	al, 15
 10412 0000079E 864409                  		xchg	al, [si+9]
 10413                                  		; 
 10414 000007A1 1F                      		pop	ds
 10415 000007A2 A2[2A01]                		mov	[save_head_sttl], al
 10416 000007A5 58                      		pop	ax
 10417                                  rd_skip1_dpt:				
 10418 000007A6 06                      		push	es
 10419 000007A7 1E                      		push	ds
 10420 000007A8 07                      		pop	es
 10421 000007A9 B80102                  		mov	ax, 201h
 10422 000007AC CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10423                                  					; AL = number of sectors to read, CH = track, CL = sector
 10424                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10425                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10426 000007AE 07                      		pop	es
 10427 000007AF 9C                      		pushf
 10428 000007B0 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10429 000007B5 750E                    		jnz	short rd_skip2_dpt
 10430 000007B7 50                      		push	ax
 10431 000007B8 A0[2A01]                		mov	al, [save_head_sttl]
 10432 000007BB 1E                      		push	ds
 10433 000007BC C536[2D01]              		lds	si, [dpt]
 10434 000007C0 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10435 000007C3 1F                      		pop	ds
 10436 000007C4 58                      		pop	ax
 10437                                  rd_skip2_dpt:				
 10438 000007C5 9D                      		popf
 10439 000007C6 7305                    		jnb	short okret2
 10440 000007C8 EBB9                    		jmp	short rd_rty
 10441                                  ; ---------------------------------------------------------------------------
 10442                                  
 10443                                  err_rd_ret:				
 10444 000007CA B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 10445                                  					; return error
 10446 000007CC F9                      		stc
 10447                                  
 10448                                  ; update information pertaining to last drive accessed, time of access, last
 10449                                  ; track accessed in that drive.
 10450                                  
 10451                                  okret2:					
 10452 000007CD 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 10453 000007D1 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 10454 000007D5 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10455                                  					; save last track accessed on this drive
 10456                                  					; preserve flags in case error occurred
 10457 000007D9 9C                      		pushf
 10458 000007DA E8EE03                  		call	set_tim
 10459 000007DD 9D                      		popf			; restore flags
 10460 000007DE 5D                      		pop	bp
 10461 000007DF C3                      		retn
 10462                                  
 10463                                  ;----------------------------------------------------------------------------
 10464                                  ;	disk open/close routines
 10465                                  ;----------------------------------------------------------------------------
 10466                                  
 10467                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 10468 000007E0 803E[7700]00            		cmp	byte [fhave96], 0
 10469 000007E5 7407                    		jz	short dsk_open_exit ; done if no changeline support
 10470 000007E7 E8DCFC                  		call	SetDrive	; get bds for drive
 10471 000007EA 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 10472                                  dsk_open_exit:	
 10473                                  		; 10/12/2022
 10474                                  		; cf = 0			
 10475                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10476                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10477 000007EE C3                      		retn
 10478                                  ; ---------------------------------------------------------------------------
 10479                                  
 10480                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 10481 000007EF 803E[7700]00            		cmp	byte [fhave96], 0
 10482 000007F4 740E                    		jz	short exitjx	; done if no changeline	support
 10483 000007F6 E8CDFC                  		call	SetDrive	; get bds for drive
 10484 000007F9 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 10485 000007FE 7404                    		jz	short exitjx	; watch	out for	wrap
 10486 00000800 26FF4D20                		dec	word [es:di+20h]
 10487                                  exitjx:					
 10488                                  		; 10/12/2022
 10489                                  		; cf = 0
 10490                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10491                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10492 00000804 C3                      		retn
 10493                                  
 10494                                  ;----------------------------------------------------------------------------
 10495                                  ;		disk removable routine
 10496                                  ;----------------------------------------------------------------------------
 10497                                  
 10498                                  		; al is	unit #
 10499                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 10500 00000805 E8BEFC                  		call	SetDrive	; get bds for this drive
 10501                                  		;test	byte [es:di+BDS.flags], fnon_removable
 10502 00000808 26F6452301              		test	byte [es:di+23h], 1
 10503                                  		;jnz	short x_bus_exit ; non_rem
 10504 0000080D 7501                    		jnz	short non_rem	; 15/10/2022
 10505                                  		; 10/12/2022
 10506                                  		; cf = 0
 10507                                  		;clc			; CF is already ZERO here
 10508                                  					; 15/10/2022
 10509 0000080F C3                      		retn
 10510                                  ; ---------------------------------------------------------------------------
 10511                                  
 10512                                  non_rem:
 10513                                  x_bus_exit:				
 10514 00000810 B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 10515                                  					; return busy status
 10516 00000812 F9                      		stc
 10517                                  dsk_ret:				
 10518 00000813 C3                      		retn
 10519                                  
 10520                                  ;----------------------------------------------------------------------------
 10521                                  ;		disk i/o routines
 10522                                  ;----------------------------------------------------------------------------
 10523                                  
 10524                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 10525                                  		;mov	word [wrtverify], 103h
 10526                                  		; 19/10/2022
 10527 00000814 C706[2001]0301          		mov	word [rflag], 103h
 10528                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 10529 0000081A EB06                    		jmp	short dsk_cl
 10530                                  ; ---------------------------------------------------------------------------
 10531                                  
 10532                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 10533                                  		;mov	word [wrtverify], 3
 10534                                  		; 19/10/2022
 10535 0000081C C706[2001]0300          		mov	word [rflag], 3
 10536                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 10537                                  
 10538                                  dsk_cl:					
 10539 00000822 E89400                  		call	diskio		; romwrite
 10540                                  ; ---------------------------------------------------------------------------
 10541                                  
 10542                                  dsk_io:					
 10543 00000825 73EC                    		jnb	short dsk_ret
 10544 00000827 E9ADF8                  		jmp	bc_err_cnt
 10545                                  ; ---------------------------------------------------------------------------
 10546                                  
 10547                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 10548 0000082A E88700                  		call	diskrd
 10549 0000082D EBF6                    		jmp	short dsk_io
 10550                                  
 10551                                  ; =============== S U B	R O U T	I N E =======================================
 10552                                  
 10553                                  ; 15/10/2022
 10554                                  ; 10/03/2019 - Retro DOS v4.0
 10555                                  
 10556                                  ;-----------------------------------------------------------
 10557                                  ; miscellaneous odd jump routines.
 10558                                  ; moved out of mainline for speed.
 10559                                  
 10560                                  ; if we have a system where we have virtual drives, we need 
 10561                                  ; to prompt the user to place the correct disk in the drive.
 10562                                  ;
 10563                                  ;	assume es:di -> bds, ds:->Bios_Data
 10564                                  ;-----------------------------------------------------------
 10565                                  
 10566                                  		; 19/10/2022
 10567                                  checksingle:
 10568 0000082F 50                      		push	ax
 10569 00000830 53                      		push	bx
 10570 00000831 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10571                                  
 10572                                  ; if hard drive, cannot change disk.
 10573                                  ; if current owner of physical drive, no need to change diskette.
 10574                                  
 10575 00000835 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10576 00000838 7573                    		jnz	short singleret
 10577 0000083A F6C310                  		test	bl, 10h		; fi_am_mult
 10578                                  					; is there a drive sharing this	physical drive?
 10579 0000083D 746E                    		jz	short singleret
 10580                                  
 10581                                  
 10582                                  ; look for the previous owner of this physical drive
 10583                                  ; and reset its ownership flag.
 10584                                  
 10585 0000083F 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10586                                  					; get physical drive number
 10587 00000843 06                      		push	es		; preserve pointer to current bds
 10588 00000844 57                      		push	di
 10589 00000845 C43E[1901]              		les	di, [start_bds] ; get first bds
 10590                                  scan_list:
 10591 00000849 26384504                		cmp	[es:di+4], al
 10592 0000084D 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10593 0000084F B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10594 00000851 26845D23                		test	[es:di+23h], bl
 10595 00000855 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10596 00000857 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10597 0000085B 5F                      		pop	di		; restore pointer to current bds
 10598 0000085C 07                      		pop	es
 10599 0000085D 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10600                                  
 10601                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10602                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10603                                  ; in this case.
 10604 00000861 803E[7A00]01            		cmp	byte [fsetowner], 1
 10605 00000866 7517                    		jnz	short not_fsetowner
 10606                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10607 00000868 26807D0400              		cmp	byte [es:di+4], 0
 10608 0000086D 753E                    		jnz	short singleret
 10609 0000086F 268A4505                		mov	al, [es:di+5]
 10610                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10611                                  					; get the DOS drive letter
 10612 00000873 06                      		push	es
 10613 00000874 8E06[1A00]              		mov	es, [zeroseg]
 10614 00000878 26A20405                		mov	[es:LSTDRV], al
 10615                                  		;mov	es:504h, al	; [es:LSTDRV]
 10616                                  					; set up sdsb
 10617 0000087C 07                      		pop	es		; restore bds pointer
 10618 0000087D EB2E                    		jmp	short singleret
 10619                                  ; ---------------------------------------------------------------------------
 10620                                  
 10621                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10622                                  ; we now check to see if we are in a single drive system and the application
 10623                                  ; has "cleverly" diddled the sdsb
 10624                                  
 10625                                  not_fsetowner:
 10626 0000087F 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10627 00000884 7517                    		jnz	short ignore_sdsb
 10628 00000886 50                      		push	ax
 10629 00000887 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10630 0000088B 88C4                    		mov	ah, al
 10631 0000088D 06                      		push	es
 10632 0000088E 8E06[1A00]              		mov	es, [zeroseg]
 10633 00000892 2686060405              		xchg	al, [es:LSTDRV]
 10634                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10635                                  					; then swap(curr_drv,req_drv)
 10636 00000897 07                      		pop	es
 10637 00000898 38C4                    		cmp	ah, al		; else
 10638 0000089A 58                      		pop	ax		; swap(curr_drv,req_drv)
 10639 0000089B 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10640                                  ignore_sdsb:
 10641 0000089D E83B0E                  		call	swpdsk
 10642 000008A0 EB0B                    		jmp	short singleret
 10643                                  ; ---------------------------------------------------------------------------
 10644                                  
 10645                                  scan_skip:
 10646 000008A2 26C43D                  		les	di, [es:di]			
 10647                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10648                                  					; go to	next bds
 10649 000008A5 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10650 000008A8 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10651 000008AA F9                      		stc
 10652 000008AB 5F                      		pop	di		; restore current bds
 10653 000008AC 07                      		pop	es
 10654                                  singleret:
 10655 000008AD 5B                      		pop	bx
 10656 000008AE 58                      		pop	ax
 10657 000008AF C3                      		retn
 10658                                  
 10659                                  ; 22/12/2023
 10660                                  %if 0
 10661                                  ; ---------------------------------------------------------------------------
 10662                                  
 10663                                  baddrive:
 10664                                  		mov	al, 8		; sector not found
 10665                                  		jmp	short baddrive_ret
 10666                                  %endif
 10667                                  
 10668                                  ; ---------------------------------------------------------------------------
 10669                                  
 10670                                  unformatteddrive:
 10671 000008B0 B007                    		mov	al, 7		; unknown media
 10672                                  ;baddrive_ret:
 10673 000008B2 F9                      		stc
 10674                                  ; ---------------------------------------------------------------------------
 10675                                  
 10676                                  ioret:
 10677 000008B3 C3                      		retn
 10678                                  
 10679                                  ; ---------------------------------------------------------------------------
 10680                                  
 10681                                  ; 15/10/2022
 10682                                  
 10683                                  ; ---------------------------------------------------------------------------
 10684                                  ;	disk i/o handler
 10685                                  ;
 10686                                  ;	al = drive number (0-6)
 10687                                  ;	ah = media descriptor
 10688                                  ;	cx = sector count
 10689                                  ;	dx = first sector (low)
 10690                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10691                                  ;	ds = cs
 10692                                  ;	es:di = transfer address
 10693                                  ;	[rflag]=operation (2=read, 3=write)
 10694                                  ;	[verify]=1 for verify after write
 10695                                  ;
 10696                                  ;	if successful carry flag = 0
 10697                                  ;	  else cf=1 and al contains error code
 10698                                  ; ---------------------------------------------------------------------------
 10699                                  
 10700                                  diskrd:
 10701                                  		;mov	ds:rflag, 2	; romread
 10702                                  		; 19/10/2022
 10703 000008B4 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10704                                  
 10705                                  ; =============== S U B	R O U T	I N E =======================================
 10706                                  
 10707                                  		; 19/10/2022
 10708                                  diskio:
 10709 000008B9 89FB                    		mov	bx, di		; es:bx	= transfer address
 10710 000008BB 8C06[2E05]              		mov	[xfer_seg], es	; save transfer	segment
 10711 000008BF E804FC                  		call	SetDrive
 10712 000008C2 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10713 000008C6 A2[1F01]                		mov	[medbyt], al
 10714                                  		;jcxz	short ioret
 10715 000008C9 E3E8                    		jcxz	ioret
 10716                                  
 10717                                  ; see if the media is formatted or not by checking the flags field in
 10718                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10719                                  ; go to the error exit at label unformatteddrive.
 10720                                  
 10721 000008CB 26F6452402              		test	byte [es:di+24h], 2
 10722                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10723                                  					; unformatted_media
 10724 000008D0 75DE                    		jnz	short unformatteddrive
 10725 000008D2 890E[2201]              		mov	[seccnt], cx	; save sector count
 10726 000008D6 8926[3501]              		mov	[spsav], sp	; save sp
 10727                                  
 10728                                  ; ensure that we are trying to access valid sectors on the drive
 10729                                  
 10730 000008DA 89D0                    		mov	ax, dx
 10731 000008DC 31F6                    		xor	si, si
 10732 000008DE 01CA                    		add	dx, cx
 10733                                  		;adc	si, 0
 10734                                  		; 02/09/2023 (PCDOS 7.1)
 10735 000008E0 D1D6                    		rcl	si, 1
 10736 000008E2 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10737                                  					; 32 bit sector ?
 10738 000008E7 740C                    		jz	short sanity32
 10739                                  		;cmp	si, 0
 10740                                  		; 02/09/2023
 10741 000008E9 09F6                    		or	si, si
 10742 000008EB 751A                    		jnz	short baddrive
 10743 000008ED 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10744 000008F1 7714                    		ja	short baddrive
 10745 000008F3 EB16                    		jmp	short sanityok
 10746                                  ; ---------------------------------------------------------------------------
 10747                                  
 10748                                  sanity32:
 10749 000008F5 0336[2405]              		add	si, [start_sec_h]
 10750 000008F9 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10751 000008FD 720C                    		jb	short sanityok
 10752 000008FF 7706                    		ja	short baddrive
 10753 00000901 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10754                                  		;ja	short baddrive
 10755                                  		; 22/12/2023
 10756 00000905 7604                    		jna	short sanityok
 10757                                  ; 22/12/2023
 10758                                  %if 1
 10759                                  ; ---------------------------------------------------------------------------
 10760                                  
 10761                                  baddrive:
 10762 00000907 B008                    		mov	al, 8		; sector not found
 10763                                  		;jmp	short baddrive_ret
 10764                                  ; ---------------------------------------------------------------------------
 10765                                  ;unformatteddrive:
 10766                                  		;mov	al, 7		; unknown media
 10767                                  baddrive_ret:
 10768 00000909 F9                      		stc
 10769                                  ;ioret:
 10770 0000090A C3                      		retn
 10771                                  %endif
 10772                                  
 10773                                  ; ---------------------------------------------------------------------------
 10774                                  
 10775                                  sanityok:
 10776 0000090B 8B16[2405]              		mov	dx, [start_sec_h]
 10777 0000090F 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10778 00000913 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10779                                  
 10780                                  ; now dx;ax have the physical first sector.
 10781                                  ; since the following procedures is going to destroy ax, let's
 10782                                  ; save it temporarily to saved_word.
 10783                                  
 10784 00000917 A3[2205]                		mov	[saved_word], ax ; save the sector number (low)
 10785                                  		; 22/12/2023
 10786                                  		; [temp_h] = [saved_word]
 10787                                  
 10788                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10789                                  ; will do it because we will skip the set up stuff with hard disks.
 10790                                  
 10791 0000091A 06                      		push	es
 10792                                  		;mov	es, [zeroseg]
 10793                                  		; 02/09/2023
 10794 0000091B 31F6                    		xor	si, si ; 0
 10795 0000091D 8EC6                    		mov	es, si
 10796 0000091F 26C4367800              		les	si, [es:DSKADR]
 10797                                  		;les	si, es:78h	; [es:DSKADR]
 10798                                  					; current disk parm table
 10799 00000924 8936[2D01]              		mov	[dpt], si
 10800 00000928 8C06[2F01]              		mov	[dpt+2], es
 10801 0000092C 07                      		pop	es
 10802 0000092D 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10803                                  					; fnon_removable
 10804 00000932 7510                    		jnz	short skip_setup
 10805 00000934 E8F8FE                  		call	checksingle
 10806                                  
 10807                                  ; check to see if we have previously noted a change line. the routine
 10808                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10809                                  ; the proper error code.
 10810                                  
 10811 00000937 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10812 0000093C 7403                    		jz	short diskio_nochangeline ; brif not
 10813 0000093E E8680E                  		call	checklatchio	; will do a sneaky pop stack return
 10814                                  					; if a disk error occurs
 10815                                  diskio_nochangeline:			
 10816 00000941 E87700                  		call	iosetup		; set up tables	and variables for i/o
 10817                                  
 10818                                  ; now the settle values are correct for the following code
 10819                                  
 10820                                  skip_setup:
 10821                                  
 10822                                  ; 32 bit sector calculation.
 10823                                  ; dx:[saved_word] = starting sector number.
 10824                                  
 10825 00000944 89D0                    		mov	ax, dx
 10826 00000946 31D2                    		xor	dx, dx
 10827                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10828                                  					 ; divide by sec per track
 10829                                  		; 02/09/2023
 10830 00000948 268B4D13                		mov	cx, [es:di+13h]
 10831 0000094C F7F1                    		div	cx
 10832                                  
 10833                                  		;mov	[temp_h], ax
 10834                                  		;mov	ax, [saved_word]
 10835                                  		; 22/12/2023
 10836 0000094E 8706[2205]              		xchg	ax, [saved_word] ; [temp_h] = [saved_word]
 10837                                  
 10838 00000952 F7F1                    		div	cx ; 02/09/2023
 10839                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10840                                  					; now, [temp_h]:ax = track #, dx = sector
 10841                                  		;inc	dl		; sector number	is 1 based.
 10842                                  		; 18/12/2022
 10843 00000954 42                      		inc	dx
 10844 00000955 8816[3101]              		mov	[cursec], dl	; save current sector
 10845 00000959 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10846                                  					; get number of	heads
 10847 0000095D 50                      		push	ax
 10848 0000095E 31D2                    		xor	dx, dx
 10849 00000960 A1[2205]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10850 00000963 F7F1                    		div	cx
 10851 00000965 A3[2205]                		mov	[temp_h], ax	; [temp_h] = [saved_word]	
 10852 00000968 58                      		pop	ax
 10853 00000969 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10854 0000096B 833E[2205]00            		cmp	word [temp_h], 0
 10855                                  		;ja	short baddrive_brdg
 10856                                  		; 22/12/2023
 10857 00000970 7795                    		ja	short baddrive
 10858 00000972 3D0004                  		cmp	ax, 1024	; 2^10 currently maximum for track #.
 10859                                  		;ja	short baddrive_brdg
 10860 00000975 7790                    		ja	short baddrive
 10861 00000977 8816[3201]              		mov	[curhd], dl	; save current head
 10862 0000097B A3[3301]                		mov	[curtrk], ax	; save current track
 10863                                  
 10864                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10865                                  ; violations here. not true. we perform the operation as if everything is
 10866                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10867                                  
 10868 0000097E A1[2201]                		mov	ax, [seccnt]
 10869 00000981 E87E00                  		call	block		; (cas - call/ret)
 10870                                  		;call	done
 10871                                  		;retn
 10872                                  		; 18/12/2022
 10873                                  		;jmp	done
 10874                                  		; 22/12/2023
 10875                                  		;jmp	short done
 10876                                  
 10877                                  ; ---------------------------------------------------------------------------
 10878                                  
 10879                                  		; 22/12/2023
 10880                                  ;baddrive_brdg:
 10881                                  		;jmp	baddrive
 10882                                  
 10883                                  ; =============== S U B	R O U T	I N E =======================================
 10884                                  
 10885                                  ;--------------------------------------------------------------
 10886                                  ; set time of last access, and reset default values in the dpt.
 10887                                  ;
 10888                                  ;	  note: trashes (at least) si
 10889                                  ;--------------------------------------------------------------
 10890                                  
 10891                                  		; 19/10/2022
 10892                                  done:
 10893 00000984 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10894                                  					; fnon_removable
 10895 00000989 752F                    		jnz	short ddbx	; do not set for non-removable media
 10896 0000098B E83D02                  		call	set_tim
 10897                                  ;diddleback:
 10898                                  ; 09/12/2022
 10899                                  diddle_back:
 10900 0000098E 9C                      		pushf
 10901 0000098F 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10902 00000994 7523                    		jnz	short nodiddleback
 10903 00000996 50                      		push	ax
 10904 00000997 06                      		push	es
 10905 00000998 C436[2D01]              		les	si, [dpt]
 10906 0000099C A0[2B01]                		mov	al, [save_eot]
 10907 0000099F 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10908 000009A3 A0[2701]                		mov	al, [settlecurrent]
 10909 000009A6 8A26[2601]              		mov	ah, [motorstartup]
 10910 000009AA 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10911 000009AE 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10912 000009B3 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10913 000009B7 07                      		pop	es
 10914 000009B8 58                      		pop	ax
 10915                                  nodiddleback:
 10916 000009B9 9D                      		popf
 10917                                  ddbx:
 10918                                  skip_dpt_setting:	; 22/12/2023
 10919 000009BA C3                      		retn
 10920                                  
 10921                                  ; =============== S U B	R O U T	I N E =======================================
 10922                                  
 10923                                  ;--------------------------------------------------------------
 10924                                  ; set the drive-last-accessed flag for diskette only.
 10925                                  ; we know that the hard disk will not be removed.
 10926                                  ; es:di -> current bds.
 10927                                  ; ds -> Bios_Data
 10928                                  ; ax,cx,si are destroyed.
 10929                                  ;--------------------------------------------------------------
 10930                                  
 10931                                  		; 23/12/2023
 10932                                  		; 19/10/2022
 10933                                  iosetup:
 10934 000009BB 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10935 000009BF A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10936                                  
 10937                                  ; determine proper head settle values
 10938                                  
 10939 000009C2 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10940 000009C7 75F1                    		jnz	short skip_dpt_setting
 10941 000009C9 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10942 000009CC 1E                      		push	ds
 10943 000009CD C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10944 000009D1 884404                  		mov	[si+4],	al
 10945                                  		; 23/12/2023
 10946 000009D4 88C4                    		mov	ah, al
 10947 000009D6 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10948                                  		;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10949 000009D9 1F                      		pop	ds
 10950 000009DA A2[2601]                		mov	[motorstartup], al
 10951 000009DD 8826[2B01]              		mov	[save_eot], ah
 10952                                  
 10953                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10954                                  ; motor start time to 4. this checking for every i/o is going to affect
 10955                                  ; performance across the board, but is necessary!!
 10956                                  
 10957 000009E1 1E                      		push	ds
 10958 000009E2 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10959 000009E6 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10960                                  					; ffSmall
 10961 000009EB 7505                    		jnz	short motor_start_ok
 10962 000009ED B004                    		mov	al, 4
 10963 000009EF 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10964                                  motor_start_ok:
 10965                                  
 10966                                  ; ds:si now points to disk parameter table.
 10967                                  ; get current settle and set fast settle
 10968                                  
 10969                                  		;xor	al, al
 10970                                  		;inc	al		; ibm wants fast settle	to be 1
 10971                                  		; 18/12/2022
 10972 000009F2 31C0                    		xor	ax, ax
 10973 000009F4 40                      		inc	ax
 10974 000009F5 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10975                                  					; get settle and set up	for fast
 10976 000009F8 1F                      		pop	ds
 10977 000009F9 A2[2701]                		mov	[settlecurrent], al
 10978 000009FC B00F                    		mov	al, 15		; NORMSETTLE
 10979                                  					; someone has diddled the settle
 10980 000009FE A2[2801]                		mov	[settleslow], al
 10981                                  		; 22/12/2023
 10982                                  ;skip_dpt_setting:
 10983 00000A01 C3                      		retn
 10984                                  
 10985                                  ; =============== S U B	R O U T	I N E =======================================
 10986                                  
 10987                                  ;--------------------------------------------------------------
 10988                                  ;read the number of sectors specified in ax,
 10989                                  ;handling track boundaries
 10990                                  ;es:di -> bds for this drive
 10991                                  ;--------------------------------------------------------------
 10992                                  
 10993                                  		; 23/12/2023
 10994                                  		; 19/10/2022
 10995                                  block:
 10996 00000A02 09C0                    		or	ax, ax
 10997 00000A04 74B4                    		jz	short ddbx
 10998 00000A06 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10999                                  					; fnon_removable
 11000 00000A0B 740D                    		jz	short block_floppy ;
 11001                                  
 11002                                  ; check	to see if multi	track operation	is allowed. if not
 11003                                  ; we have to go	to the block_floppy below to break up the operation.
 11004                                  
 11005 00000A0D F606[2605]80            		test	byte [multrk_flag], 80h
 11006                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 11007 00000A12 7406                    		jz	short block_floppy
 11008 00000A14 E82800                  		call	Disk
 11009 00000A17 31C0                    		xor	ax, ax
 11010 00000A19 C3                      		retn
 11011                                  ; ---------------------------------------------------------------------------
 11012                                  
 11013                                  block_floppy:
 11014                                  
 11015                                  ; read at most 1 track worth. perform minimization at sector / track
 11016                                  				
 11017 00000A1A 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 11018                                  		;inc	cl
 11019                                  		; 23/12/2023
 11020 00000A1E 41                      		inc	cx
 11021 00000A1F 2A0E[3101]              		sub	cl, [cursec]
 11022 00000A23 30ED                    		xor	ch, ch
 11023 00000A25 39C8                    		cmp	ax, cx
 11024 00000A27 7302                    		jnb	short gotmin
 11025 00000A29 89C1                    		mov	cx, ax
 11026                                  gotmin:
 11027                                  
 11028                                  ; ax is the requested number of sectors to read
 11029                                  ; cx is the number that we can do on this track
 11030                                  
 11031 00000A2B 50                      		push	ax
 11032 00000A2C 51                      		push	cx
 11033 00000A2D 89C8                    		mov	ax, cx
 11034 00000A2F E80D00                  		call	Disk
 11035 00000A32 59                      		pop	cx
 11036 00000A33 58                      		pop	ax
 11037                                  
 11038                                  ; cx is the number of sectors just transferred
 11039                                  
 11040 00000A34 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 11041 00000A36 D0E1                    		shl	cl, 1
 11042 00000A38 00CF                    		add	bh, cl		; adjust transfer address
 11043 00000A3A EBC6                    		jmp	short block
 11044                                  dskerr_brdg:
 11045 00000A3C E9E700                  		jmp	dskerr
 11046                                  
 11047                                  ; =============== S U B	R O U T	I N E =======================================
 11048                                  
 11049                                  ; 15/10/2022
 11050                                  
 11051                                  ;--------------------------------------------------------------
 11052                                  ;perform disk i/o with retries
 11053                                  ; al = number of sectors (1-8, all on one track)
 11054                                  ; es:di point to drive parameters
 11055                                  ; xfer_seg:bx = transfer address 
 11056                                  ;		(must not cross a 64k physical boundary)
 11057                                  ; [rflag] = 2 if read, 3 if write
 11058                                  ; [verify] = 0 for normal, 1 for verify after write
 11059                                  ;--------------------------------------------------------------
 11060                                  
 11061                                  		; 23/12/2023
 11062                                  		; 19/10/2022
 11063                                  Disk:
 11064                                  
 11065                                  ; Check for hard disk format and
 11066                                  ; if TRUE then set max error count to 2
 11067                                  
 11068 00000A3F BD0500                  		mov	bp, 5		; MAXERR
 11069                                  					; set up retry count
 11070                                  		; 23/12/2023
 11071 00000A42 268A4D23                		mov	cl, [es:di+23h]
 11072 00000A46 83E101                  		and	cx, 1
 11073                                  		;test	byte [es:di+23h], 1
 11074                                  					; [es:di+BDS.flags], fnon_removable
 11075 00000A49 7408                    		jz	short GetRdWrInd
 11076 00000A4B 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 11077 00000A4E 7403                    		jz	short GetRdWrInd
 11078 00000A50 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 11079                                  GetRdWrInd:				
 11080 00000A53 892E[2905]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 11081 00000A57 892E[2B05]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 11082 00000A5B 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 11083                                  ;retry:
 11084                                  ; 09/12/2022
 11085                                  _retry:
 11086 00000A5F 50                      		push	ax
 11087 00000A60 8B16[3301]              		mov	dx, [curtrk]
 11088                                  		
 11089                                  		; 23/12/2023
 11090 00000A64 E30B                    		jcxz	disk_not_mini
 11091                                  		;test	byte [es:di+23h], 1
 11092                                  		;jz	short disk_not_mini
 11093                                  		
 11094 00000A66 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 11095                                  					; is this a mini disk? ((logical dos partition))
 11096 00000A6B 7504                    		jnz	short disk_not_mini ; no. continue to next.
 11097 00000A6D 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 11098                                  					; add hidden trks.
 11099                                  disk_not_mini:
 11100 00000A71 D0CE                    		ror	dh, 1
 11101 00000A73 D0CE                    		ror	dh, 1
 11102 00000A75 0A36[3101]              		or	dh, [cursec]
 11103 00000A79 89D1                    		mov	cx, dx
 11104 00000A7B 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 11105 00000A7D 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 11106 00000A81 268A5504                		mov	dl, [es:di+4]	; physical drive number
 11107                                  					; [es:di+BDS.drivenum]
 11108 00000A85 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 11109 00000A8A 7411                    		jz	short do_fast	; hard files use fast speed
 11110                                  
 11111                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 11112                                  ; this helps when we have just done a reset disk operation and the head has
 11113                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 11114                                  
 11115 00000A8C 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 11116                                  		;jz	short do_writej
 11117                                  		; 23/12/2023
 11118 00000A91 7460                    		jz	short do_write
 11119 00000A93 80FC02                  		cmp	ah, 2		; romread
 11120 00000A96 7405                    		jz	short do_fast
 11121 00000A98 80FC04                  		cmp	ah, 4		; romverify
 11122                                  		;jz	short do_fast
 11123                                  		; 23/12/2023
 11124 00000A9B 7556                    		jnz	short do_write
 11125                                  ;do_writej:
 11126                                  
 11127                                  ; reads always fast, unless we have just done a disk reset operation
 11128                                  			
 11129                                  		;jmp	short do_write	; reads	always fast
 11130                                  ; ---------------------------------------------------------------------------
 11131                                  
 11132                                  do_fast:
 11133 00000A9D E8FB00                  		call	fastspeed	; change settle	mode
 11134                                  testerr:
 11135 00000AA0 729A                    		jb	short dskerr_brdg
 11136                                  
 11137                                  ; set drive and track of last access
 11138                                  
 11139 00000AA2 8816[7600]              		mov	[step_drv], dl
 11140 00000AA6 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 11141                                  no_set:
 11142                                  		;cmp	word [wrtverify], 103h
 11143 00000AAA 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 11144 00000AB0 7452                    		jz	short doverify
 11145                                  noverify:
 11146 00000AB2 58                      		pop	ax
 11147                                  
 11148                                  ; check the flags word in the bds to see if the drive is non removable
 11149                                  ; if not we needn't do anything special
 11150                                  ; if it is a hard disk then check to see if multi-track operation
 11151                                  ; is specified. if specified we don't have to calculate for the next
 11152                                  ; track since we are already done. so we can go to the exit of this routine.
 11153                                  
 11154 00000AB3 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 11155                                  					; fnon_removable
 11156 00000AB8 7407                    		jz	short its_removable
 11157 00000ABA F606[2605]80            		test	byte [multrk_flag], 80h ; multrk_on
 11158 00000ABF 7530                    		jnz	short disk_ret
 11159                                  its_removable:
 11160 00000AC1 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 11161 00000AC4 30E4                    		xor	ah, ah
 11162 00000AC6 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 11163 00000ACA 00C1                    		add	cl, al
 11164 00000ACC 880E[3101]              		mov	[cursec], cl
 11165 00000AD0 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11166                                  					; see if sector/track limit reached
 11167 00000AD4 761B                    		jbe	short disk_ret
 11168 00000AD6 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 11169 00000ADB 8A36[3201]              		mov	dh, [curhd]
 11170 00000ADF FEC6                    		inc	dh
 11171 00000AE1 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 11172 00000AE5 7206                    		jb	short noxor
 11173 00000AE7 30F6                    		xor	dh, dh
 11174 00000AE9 FF06[3301]              		inc	word [curtrk]
 11175                                  noxor:
 11176 00000AED 8836[3201]              		mov	[curhd], dh
 11177                                  disk_ret:
 11178 00000AF1 F8                      		clc
 11179 00000AF2 C3                      		retn
 11180                                  ; ---------------------------------------------------------------------------
 11181                                  
 11182                                  ; 15/10/2022
 11183                                  
 11184                                  ;--------------------------------------------------------------
 11185                                  ; the request is for write. determine if we are talking about
 11186                                  ; the same track and drive. if so, use the fast speed.
 11187                                  ;--------------------------------------------------------------
 11188                                  
 11189                                  do_write:
 11190 00000AF3 3A16[7600]              		cmp	dl, [step_drv]
 11191 00000AF7 7506                    		jnz	short do_norm	; we have changed drives
 11192 00000AF9 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 11193 00000AFD 749E                    		jz	short do_fast	; we are still on the same track
 11194                                  do_norm:
 11195 00000AFF E87500                  		call	normspeed
 11196 00000B02 EB9C                    		jmp	short testerr
 11197                                  ; ---------------------------------------------------------------------------
 11198                                  
 11199                                  ;--------------------------------------------------------------
 11200                                  ; we have a verify request also. get state info and go verify
 11201                                  ;--------------------------------------------------------------
 11202                                  
 11203                                  doverify:
 11204 00000B04 58                      		pop	ax
 11205 00000B05 50                      		push	ax
 11206 00000B06 B404                    		mov	ah, 4
 11207 00000B08 E89000                  		call	fastspeed
 11208 00000B0B 73A5                    		jnb	short noverify
 11209                                  
 11210                                  ; check the error returned in ah to see if it is a soft ecc error.
 11211                                  ; if it is not we needn't do anything special. if it is a soft
 11212                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 11213                                  ; this retry count becomes 0 then we just ignore the error and go to
 11214                                  ; no_verify but if we can still try then we call the routine to reset
 11215                                  ; the disk and go to dskerr1 to retry the operation.
 11216                                  
 11217 00000B0D 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 11218 00000B10 750B                    		jnz	short not_softecc_err
 11219 00000B12 FF0E[2B05]              		dec	word [soft_ecc_cnt]
 11220 00000B16 749A                    		jz	short noverify	; no more retry
 11221 00000B18 E83305                  		call	ResetDisk	; reset	disk
 11222 00000B1B EB3E                    		jmp	short dskerr1	; retry
 11223                                  ; ---------------------------------------------------------------------------
 11224                                  
 11225                                  not_softecc_err:			; other error.
 11226 00000B1D E82E05                  		call	ResetDisk
 11227 00000B20 FF0E[2905]              		dec	word [vretry_cnt]
 11228 00000B24 EB1C                    		jmp	short dskerr0
 11229                                  ; ---------------------------------------------------------------------------
 11230                                  
 11231                                  ;--------------------------------------------------------------
 11232                                  ; need to special case the change-line error ah=06h.
 11233                                  ; if we get this, we need to return it.
 11234                                  ;--------------------------------------------------------------
 11235                                  
 11236                                  dskerr:
 11237 00000B26 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 11238 00000B2B 7403                    		jz	short dskerr_nochangeline ; brif not
 11239 00000B2D E8EB0C                  		call	checkio
 11240                                  dskerr_nochangeline:
 11241 00000B30 803E[2D05]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 11242 00000B35 7508                    		jnz	short dochkagain ; no more retry.
 11243 00000B37 BD0100                  		mov	bp, 1
 11244 00000B3A C606[2D05]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 11245                                  dochkagain:
 11246 00000B3F E8A900                  		call	again
 11247                                  dskerr0:
 11248 00000B42 7420                    		jz	short harderr
 11249 00000B44 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 11250                                  					; fnon_removable
 11251 00000B49 7505                    		jnz	short skip_timeout_chk
 11252 00000B4B 80FC80                  		cmp	ah, 80h		; timeout?
 11253 00000B4E 7414                    		jz	short harderr
 11254                                  skip_timeout_chk:
 11255 00000B50 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 11256 00000B53 740A                    		jz	short write_fault_err ;	then, don't retry.
 11257 00000B55 C706[2B05]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 11258                                  					; set soft_ecc_cnt back	to maxerr
 11259                                  dskerr1:
 11260 00000B5B 58                      		pop	ax		; restore sector count
 11261                                  		;jmp	retry
 11262                                  		; 09/12/2022
 11263 00000B5C E900FF                  		jmp	_retry
 11264                                  ; ---------------------------------------------------------------------------
 11265                                  
 11266                                  write_fault_err:
 11267 00000B5F BD0100                  		mov	bp, 1		; just retry only once
 11268                                  					; for write fault error.
 11269 00000B62 EBF7                    		jmp	short dskerr1
 11270                                  
 11271                                  		; fall into harderr
 11272                                  ; ---------------------------------------------------------------------------
 11273                                  
 11274                                  ; entry point for routines that call maperror themselves
 11275                                  
 11276                                  harderr:
 11277 00000B64 E84C00                  		call	maperror
 11278                                  harderr2:
 11279 00000B67 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 11280                                  					; force a media check through rom
 11281 00000B6C 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 11282 00000B70 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 11283                                  
 11284                                  ; since we are performing a non-local goto, restore the disk parameters
 11285                                  
 11286                                  		;jmp	diddleback
 11287                                  		; 09/12/2022
 11288 00000B74 E917FE                  		jmp	diddle_back
 11289                                  
 11290                                  ; =============== S U B	R O U T	I N E =======================================
 11291                                  
 11292                                  ; change settle value from settlecurrent to whatever is appropriate
 11293                                  ; note that this routine is never called for a fixed disk.
 11294                                  
 11295                                  		; 19/10/2022
 11296                                  normspeed:
 11297 00000B77 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 11298 00000B7C 751D                    		jnz	short fastspeed
 11299 00000B7E 06                      		push	es
 11300 00000B7F 50                      		push	ax
 11301 00000B80 A0[2801]                		mov	al, [settleslow]
 11302 00000B83 C436[2D01]              		les	si, [dpt]	; current disk parm table
 11303 00000B87 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11304 00000B8B 58                      		pop	ax
 11305 00000B8C 07                      		pop	es
 11306 00000B8D E80B00                  		call	fastspeed
 11307                                  		; 24/12/2023
 11308                                  		;push	es
 11309                                  		;les	si, [dpt]
 11310                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11311                                  		;			; 1 is fast settle value
 11312                                  		;pop	es
 11313 00000B90 1E                      		push	ds
 11314 00000B91 C536[2D01]              		lds	si, [dpt]
 11315 00000B95 C6440901                		mov	byte [si+9], 1
 11316 00000B99 1F                      		pop	ds
 11317                                  
 11318 00000B9A C3                      		retn
 11319                                  
 11320                                  ; =============== S U B	R O U T	I N E =======================================
 11321                                  
 11322                                  ; if the drive has been marked as too big (i.e. starting sector of the
 11323                                  ; partition is > 16 bits, then always return drive not ready.
 11324                                  
 11325                                  fastspeed:
 11326 00000B9B 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 11327                                  					; ftoobig
 11328 00000BA0 750D                    		jnz	short notready
 11329 00000BA2 06                      		push	es
 11330 00000BA3 8E06[2E05]              		mov	es, [xfer_seg]
 11331 00000BA7 CD13                    		int	13h		; DISK -
 11332 00000BA9 8C06[2E05]              		mov	[xfer_seg], es
 11333 00000BAD 07                      		pop	es
 11334 00000BAE C3                      		retn
 11335                                  ; ---------------------------------------------------------------------------
 11336                                  
 11337                                  notready:
 11338 00000BAF F9                      		stc
 11339 00000BB0 B480                    		mov	ah, 80h
 11340 00000BB2 C3                      		retn
 11341                                  
 11342                                  ; =============== S U B	R O U T	I N E =======================================
 11343                                  
 11344                                  ; map error returned by rom in ah into corresponding code to be returned to
 11345                                  ; dos in al. trashes di. guaranteed to set carry.
 11346                                  
 11347                                  maperror:
 11348 00000BB3 51                      		push	cx
 11349 00000BB4 06                      		push	es
 11350 00000BB5 1E                      		push	ds		; set es=Bios_Data
 11351 00000BB6 07                      		pop	es
 11352 00000BB7 88E0                    		mov	al, ah		; put error code in al
 11353 00000BB9 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 11354 00000BBC B90900                  		mov	cx, 9		; numerr (= errout-errin)
 11355                                  					; number of possible error conditions
 11356 00000BBF BF[3C01]                		mov	di, errin	; point to error conditions
 11357 00000BC2 F2AE                    		repne scasb
 11358                                  		; 10/12/2022
 11359 00000BC4 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 11360                                  					; get translation
 11361                                  		; 19/10/2022 - Temporary ! 
 11362                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 11363 00000BC7 07                      		pop	es
 11364 00000BC8 59                      		pop	cx
 11365 00000BC9 F9                      		stc			; flag error condition
 11366 00000BCA C3                      		retn
 11367                                  
 11368                                  ; =============== S U B	R O U T	I N E =======================================
 11369                                  
 11370                                  ; set the time of last access for this drive.
 11371                                  ; this is done only for removable media. es:di -> bds
 11372                                  
 11373                                  set_tim:
 11374 00000BCB 50                      		push	ax
 11375 00000BCC E8A7F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 11376                                  
 11377                                  ; we have the new time. if we see that the time has passed,
 11378                                  ; then we reset the threshold counter...
 11379                                  
 11380 00000BCF 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 11381 00000BD3 7506                    		jnz	short setaccess
 11382 00000BD5 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 11383                                  		;jz	short done_set
 11384                                  		; 12/12/2022
 11385 00000BD9 740E                    		je	short done_set2
 11386                                  setaccess:
 11387 00000BDB C606[1D01]00            		mov	byte [accesscount], 0
 11388 00000BE0 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 11389 00000BE4 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 11390                                  done_set:
 11391 00000BE8 F8                      		clc
 11392                                  done_set2:		; 12/12/2022
 11393 00000BE9 58                      		pop	ax
 11394 00000BEA C3                      		retn
 11395                                  
 11396                                  ; =============== S U B	R O U T	I N E =======================================
 11397                                  
 11398                                  ; this routine is called if an error occurs while formatting or verifying.
 11399                                  ; it resets the drive,and decrements the retry count.
 11400                                  ; on entry - ds:di - points to bds for the drive
 11401                                  ;	     bp    - contains retry count
 11402                                  ; on exit    flags indicate result of decrementing retry count
 11403                                  
 11404                                  again:
 11405 00000BEB E86004                  		call	ResetDisk
 11406 00000BEE 80FC06                  		cmp	ah, 6
 11407 00000BF1 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 11408                                  					; do not decrement retry count.
 11409 00000BF3 4D                      		dec	bp		; decrement retry count
 11410 00000BF4 C3                      		retn
 11411                                  ; ---------------------------------------------------------------------------
 11412                                  
 11413                                  dont_dec_retry_count:
 11414 00000BF5 08E4                    		or	ah, ah
 11415 00000BF7 C3                      		retn
 11416                                  
 11417                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 11418                                  
 11419                                  ;----------------------------------------------------------------------------
 11420                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 11421                                  ;----------------------------------------------------------------------------
 11422                                  ; 11/03/2019 - Retro DOS v4.0
 11423                                  
 11424                                  ; 18/03/2019
 11425                                  
 11426                                  ; ==========================================================================
 11427                                  ;
 11428                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 11429                                  ;
 11430                                  ;      This function is intended to give the user to control the
 11431                                  ;      bds table flags of unformatted_media bit.
 11432                                  ;      GetAccessFlag will show the status -
 11433                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 11434                                  ;						1 disk i/o allowed
 11435                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 11436                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 11437                                  ;						1 disallow disk i/o
 11438                                  ; ==========================================================================
 11439                                  
 11440                                  		; generic ioctl dispatch tables
 11441                                  
 11442                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 11443                                  
 11444                                  ; ---------------------------------------------------------------------------
 11445 00000BF8 00                      		db 0
 11446                                  
 11447                                  ; 09/12/2022 
 11448                                  %if 0
 11449                                  
 11450                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 11451                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 11452                                  		dw 0EE8h	; 61h	; ReadTrack
 11453                                  		dw 0E86h	; 62h	; VerifyTrack
 11454                                  		dw 0CA3h	 	; Cmd_Error_Proc
 11455                                  		dw 0CA3h		; Cmd_Error_Proc
 11456                                  		dw 0CA3h		; Cmd_Error_Proc
 11457                                  		dw 119Ah	; 66h	; GetMediaId
 11458                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 11459                                  		dw 12C1h	; 68h	; SenseMediaType
 11460                                  
 11461                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 11462                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 11463                                  		dw 0EEFh	; 41h	; WriteTrack
 11464                                  		dw 0DC1h	; 42h	; FormatTrack
 11465                                  		dw 0CA3h		; Cmd_Error_Proc
 11466                                  		dw 0CA3h		; Cmd_Error_Proc
 11467                                  		dw 0CA3h		; Cmd_Error_Proc
 11468                                  		dw 11D2h	; 46h	; SetMediaId
 11469                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 11470                                  
 11471                                  %endif
 11472                                  
 11473                                  		; 09/12/2022
 11474 00000BF9 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 11475 00000BFA [640C]                  		dw GetDeviceParameters	; 60h
 11476 00000BFC [A60E]                  		dw ReadTrack		; 61h
 11477 00000BFE [460E]                  		dw VerifyTrack		; 62h
 11478 00000C00 [600C]                  		dw Cmd_Error_Proc
 11479 00000C02 [600C]                  		dw Cmd_Error_Proc
 11480 00000C04 [600C]                  		dw Cmd_Error_Proc
 11481 00000C06 [2511]                  		dw GetMediaId		; 66h
 11482 00000C08 [EB11]                  		dw GetAccessFlag	; 67h ; unpublished function
 11483 00000C0A [3C12]                  		dw SenseMediaType	; 68h
 11484                                  
 11485 00000C0C 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 11486 00000C0D [AF0C]                  		dw SetDeviceParameters	; 40h
 11487 00000C0F [AD0E]                  		dw WriteTrack		; 41h
 11488 00000C11 [820D]                  		dw FormatTrack		; 42h
 11489 00000C13 [600C]                  		dw Cmd_Error_Proc
 11490 00000C15 [600C]                  		dw Cmd_Error_Proc
 11491 00000C17 [600C]                  		dw Cmd_Error_Proc
 11492 00000C19 [5B11]                  		dw SetMediaId		; 46h
 11493 00000C1B [0012]                  		dw SetAccessFlag	; 47h ; unpublished function
 11494                                  
 11495                                  ; ==========================================================================
 11496                                  ; IOC_DC_Table
 11497                                  ;
 11498                                  ; This table contains all of the valid generic IOCtl Minor codes for
 11499                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 11500                                  ; Added for 5.00
 11501                                  ; ==========================================================================
 11502                                  
 11503 00000C1D 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 11504 00000C1E 40                      		db 40h			; SET_DEVICE_PARAMETERS
 11505 00000C1F 61                      		db 61h			; READ_TRACK
 11506 00000C20 41                      		db 41h			; WRITE_TRACK
 11507 00000C21 62                      		db 62h			; VERIFY_TRACK
 11508 00000C22 42                      		db 42h			; FORMAT_TRACK
 11509 00000C23 66                      		db 66h			; GET_MEDIA_ID
 11510 00000C24 46                      		db 46h			; SET_MEDIA_ID
 11511 00000C25 67                      		db 67h			; GET_ACCESS_FLAG
 11512 00000C26 47                      		db 47h			; SET_ACCESS_FLAG
 11513 00000C27 68                      		db 68h			; SENSE_MEDIA_TYPE
 11514                                  
 11515                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 11516                                  
 11517                                  ; ---------------------------------------------------------------------------
 11518                                  
 11519                                  ; 16/10/2022
 11520                                  
 11521                                  ; ==========================================================================
 11522                                  ; Do_Generic_IOCtl: perform generic ioctl request
 11523                                  ;
 11524                                  ;    input: AL contains logical drive
 11525                                  ;
 11526                                  ;	functions are dispatched through a call. On return, carry indicates
 11527                                  ;	error code in al. Note::bES:b& ds undefined on return from
 11528                                  ;	subfunctions.
 11529                                  ;
 11530                                  ; ==========================================================================
 11531                                  
 11532                                  ; 11/03/2019
 11533                                  		; 19/10/2022
 11534                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 11535 00000C28 E89BF8                  		call	SetDrive	; ES:DI	Points to bds for drive
 11536 00000C2B 06                      		push	es
 11537 00000C2C C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 11538 00000C30 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 11539                                  					; RAWIO
 11540 00000C35 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 11541 00000C39 07                      		pop	es
 11542 00000C3A 7525                    		jnz	short IoctlFuncErr
 11543                                  
 11544                                  		; cas note: Could do the above two blocks in reverse order.
 11545                                  		; Would have to preserve al for SetDrive
 11546                                  
 11547                                  		; 10/12/2022
 11548 00000C3C BE[F90B]                		mov	si, IoReadJumpTable
 11549                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 11550                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 11551 00000C3F A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 11552 00000C41 7503                    		jnz	short NotGenericWrite ; function is a read.
 11553                                  		; 10/12/2022
 11554 00000C43 BE[0C0C]                		mov	si, IoWriteJumpTable
 11555                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 11556                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 11557                                  NotGenericWrite:			
 11558 00000C46 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 11559 00000C48 2C40                    		sub	al, 40h		; offset for base function
 11560 00000C4A 2E3A04                  		cmp	al, [cs:si]
 11561 00000C4D 7712                    		ja	short IoctlFuncErr
 11562 00000C4F 98                      		cbw
 11563 00000C50 D1E0                    		shl	ax, 1
 11564 00000C52 46                      		inc	si
 11565 00000C53 01C6                    		add	si, ax
 11566 00000C55 2EFF14                  		call	near [cs:si]
 11567                                  		;call	word ptr cs:[si]
 11568 00000C58 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11569                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11570                                  					; 2C7h:30h = 70h:25A0h
 11571 00000C5D B481                    		mov	ah, 81h		; Return this status in	case of	carry
 11572 00000C5F C3                      		retn			; Pass carry flag through to exit code
 11573                                  ; ---------------------------------------------------------------------------
 11574                                  
 11575                                  		; Cmd_Error_Proc is called as a procedure and also use
 11576                                  		; as a fall through from above
 11577                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 11578 00000C60 5A                      		pop	dx
 11579                                  
 11580                                  IoctlFuncErr:				
 11581 00000C61 E971F4                  		jmp	bc_cmderr
 11582                                  ; ---------------------------------------------------------------------------
 11583                                  
 11584                                  ; 16/10/2022
 11585                                  
 11586                                  ; ==========================================================================
 11587                                  ;**	GetDeviceParameters:
 11588                                  ;
 11589                                  ;	GetDeviceParameters implements the generic ioctl function:
 11590                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 11591                                  ;
 11592                                  ;	ENTRY	(ES:di) = BDS for drive
 11593                                  ;		PtrSav = long pointer to request header
 11594                                  ;	EXIT	??? BUGBUG
 11595                                  ;	USES	??? BUGBUG
 11596                                  ; ==========================================================================
 11597                                  
 11598                                  		; 19/10/2022
 11599                                  GetDeviceParameters:
 11600                                  		; Copy info from bds to the device parameters packet
 11601                                  
 11602 00000C64 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11603 00000C68 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11604                                  					; (DS:BX) = return buffer
 11605 00000C6B 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 11606 00000C6F 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11607 00000C72 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 11608 00000C76 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 11609                                  					; Mask off other bits
 11610 00000C79 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11611 00000C7C 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 11612 00000C80 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11613 00000C83 30C0                    		xor	al, al		; Set media type to default
 11614 00000C85 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11615                                  					
 11616                                  		; copy recommended bpb
 11617 00000C88 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11618 00000C8B F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11619                                  					; BUILD_DEVICE_BPB
 11620 00000C8E 7412                    		jz	short UseBpbPresent
 11621 00000C90 1E                      		push	ds		; Save request packet segment
 11622 00000C91 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11623                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11624                                  					; 2C7h:30h = 70h:25A0h
 11625                                  					; Point back to Bios_Data
 11626 00000C96 E896FB                  		call	checksingle
 11627 00000C99 E857F9                  		call	GetBp		; Build	the bpb	from scratch
 11628 00000C9C 1F                      		pop	ds		; Restore request packet segment
 11629 00000C9D 720F                    		jb	short GetParmRet
 11630 00000C9F 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11631                                  					; Use this subfield of bds instead
 11632                                  UseBpbPresent:				
 11633 00000CA2 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11634                                  					; This is where	the result goes
 11635 00000CA5 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11636                                  					; For now use 'small' bpb
 11637 00000CA8 1E                      		push	ds		; reverse segments for copy
 11638 00000CA9 06                      		push	es
 11639 00000CAA 1F                      		pop	ds
 11640 00000CAB 07                      		pop	es
 11641 00000CAC F3A4                    		rep movsb
 11642                                  		
 11643                                  		; 12/12/2022
 11644                                  		; cf=0 (test instruction -above- resets cf) 	
 11645                                  		;clc
 11646                                  GetParmRet:				
 11647 00000CAE C3                      		retn
 11648                                  ; ---------------------------------------------------------------------------
 11649                                  
 11650                                  ; 17/10/2022
 11651                                  ; 16/10/2022
 11652                                  
 11653                                  ; ==========================================================================
 11654                                  ; SetDeviceParameters:
 11655                                  ;
 11656                                  ; input: ES:di points to bds for drive
 11657                                  ; ==========================================================================
 11658                                  
 11659                                  		; 19/10/2022
 11660                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11661 00000CAF C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11662 00000CB3 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11663 00000CB6 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11664                                  					; fchanged_by_format|fchanged
 11665 00000CBC F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11666                                  					; ONLY_SET_TRACKLAYOUT
 11667 00000CBF 7579                    		jnz	short setTrackTable
 11668 00000CC1 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11669 00000CC4 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11670 00000CC8 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11671 00000CCB 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11672 00000CCF 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11673 00000CD2 1E                      		push	ds
 11674                                  		; 17/10/2022
 11675 00000CD3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11676                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11677                                  					; 2C7h:30h = 70h:25A0h
 11678                                  		;cmp	byte [fhave96], 0
 11679 00000CD8 803E[7700]00            		cmp	byte [fhave96], 0
 11680 00000CDD 1F                      		pop	ds
 11681 00000CDE 7502                    		jnz	short HaveChange ; we have changeline support
 11682                                  		; 10/12/2022
 11683 00000CE0 24FD                    		and	al, 0FDh
 11684                                  		;and	ax, 0FFFDh	; ~fchangeline
 11685                                  
 11686                                  		; Ignore all bits except non_removable and changeline
 11687                                  HaveChange:				
 11688 00000CE2 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11689 00000CE5 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11690 00000CE9 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11691 00000CED 09C8                    		or	ax, cx
 11692 00000CEF 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11693 00000CF3 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11694                                  					; Set media type
 11695 00000CF6 1E                      		push	ds
 11696 00000CF7 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11697                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11698 00000CFC A2[2E06]                		mov	[mediatype], al
 11699                                  		;mov	ds:mediatype, al
 11700 00000CFF 1F                      		pop	ds
 11701                                  
 11702                                  		; The media changed (maybe) so we will have to do a set dasd
 11703                                  		; the next time we format a track
 11704                                  
 11705                                  		; 10/12/2022
 11706 00000D00 26804D2380              		or	byte [es:di+35], 80h
 11707                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11708                                  					; set_dasd_true
 11709 00000D05 57                      		push	di		; Save bds pointer
 11710                                  
 11711                                  		; Figure out what we are supposed to do with the bpb
 11712                                  		; were we asked to install a fake bpb?
 11713                                  
 11714 00000D06 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11715                                  					; INSTALL_FAKE_BPB
 11716 00000D09 7514                    		jnz	short InstallFakeBpb
 11717                                  
 11718                                  		; were we returning a fake bpb when asked to build a bpb?
 11719                                  
 11720                                  		; 10/12/2022
 11721 00000D0B 26F6452304              		test	byte [es:di+35], 4
 11722                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11723                                  					; return_fake_bpb
 11724 00000D10 7405                    		jz	short InstallRecommendedBpb
 11725                                  
 11726                                  		; we were returning a fake bpb but we can stop now
 11727                                  
 11728                                  		; 10/12/2022
 11729 00000D12 26806523FB              		and	byte [es:di+35], 0FBh
 11730                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11731                                  					; ~return_fake_bpb
 11732                                  InstallRecommendedBpb:			
 11733 00000D17 B91F00                  		mov	cx, 31		; A_BPB.size
 11734 00000D1A 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11735 00000D1D EB0B                    		jmp	short CopyTheBpb
 11736                                  ; ---------------------------------------------------------------------------
 11737                                  
 11738                                  InstallFakeBpb:
 11739                                  		; 10/12/2022
 11740 00000D1F 26804D2304              		or	byte [es:di+35], 4				
 11741                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11742                                  					; return_fake_bpb
 11743 00000D24 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11744                                  					; move 'smaller' bpb
 11745 00000D27 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11746                                  
 11747                                  CopyTheBpb:				
 11748 00000D2A 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11749 00000D2D F3A4                    		rep movsb
 11750 00000D2F 1E                      		push	ds		; Save packet segment
 11751                                  		; 17/10/2022
 11752 00000D30 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11753                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11754                                  					; Setup	for ds -> Bios_Data
 11755 00000D35 E8C503                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11756 00000D38 1F                      		pop	ds		; Restore packet segment
 11757 00000D39 5F                      		pop	di		; Restore bds pointer
 11758                                  setTrackTable:				
 11759 00000D3A 8B4F26                  		mov	cx, [bx+38]
 11760 00000D3D 1E                      		push	ds
 11761 00000D3E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11762 00000D43 890E[3005]              		mov	[sectorspertrack], cx
 11763 00000D47 1F                      		pop	ds
 11764                                  		; 10/12/2022
 11765 00000D48 26806523F7              		and	byte [es:di+35], 0F7h
 11766                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11767                                  					; ~good_tracklayout
 11768 00000D4D F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11769                                  					; TRACKLAYOUT_IS_GOOD
 11770 00000D50 7405                    		jz	short UglyTrackLayOut
 11771                                  		; 10/12/2022
 11772 00000D52 26804D2308              		or	byte [es:di+35], 8
 11773                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11774                                  					; good_tracklayout
 11775                                  UglyTrackLayOut:			
 11776 00000D57 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11777 00000D5A 7722                    		ja	short TooManyPerTrack
 11778                                  		;jcxz	short SectorInfoSaved
 11779 00000D5C E31E                    		jcxz	SectorInfoSaved	; 19/10/2022
 11780 00000D5E BF[3205]                		mov	di, tracktable
 11781 00000D61 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11782                                  		; 17/10/2022
 11783 00000D64 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11784                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11785                                  					; Trash	our bds	pointer
 11786                                  StoreSectorInfo:
 11787 00000D69 47                      		inc	di
 11788 00000D6A 47                      		inc	di		; Skip over cylinder and head
 11789 00000D6B AD                      		lodsw			; Get sector id
 11790 00000D6C AA                      		stosb			; Copy it
 11791 00000D6D AD                      		lodsw			; Get sector size
 11792                                  		
 11793                                  		; 02/09/2023 (PCDOS 7.1)
 11794                                  		;call	SectSizeToSectIndex
 11795 00000D6E 80FC03                  		cmp	ah, 3 ; 02/09/2023
 11796                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11797                                  					; examine upper	byte only
 11798 00000D71 7704                    		ja	short OneK
 11799 00000D73 88E0                    		mov	al, ah		; value	in AH is the index!
 11800 00000D75 EB02                    		jmp	short sdp_s
 11801                                  OneK:
 11802 00000D77 B003                    		mov	al, 3
 11803                                  sdp_s:
 11804 00000D79 AA                      		stosb			; Store	sector SIZE index
 11805 00000D7A E2ED                    		loop	StoreSectorInfo
 11806                                  SectorInfoSaved:
 11807 00000D7C F8                      		clc
 11808 00000D7D C3                      		retn
 11809                                  ; ---------------------------------------------------------------------------
 11810                                  
 11811                                  TooManyPerTrack:			
 11812 00000D7E B00C                    		mov	al, 0Ch
 11813 00000D80 F9                      		stc
 11814 00000D81 C3                      		retn
 11815                                  ; ---------------------------------------------------------------------------
 11816                                  
 11817                                  ; 16/10/2022
 11818                                  
 11819                                  ; ==========================================================================
 11820                                  ; FormatTrack:
 11821                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11822                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11823                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11824                                  ;
 11825                                  ; input: ES:di points to bds for drive
 11826                                  ;
 11827                                  ; output:
 11828                                  ;	for status call:
 11829                                  ;	specialfunction byte set to:
 11830                                  ;		0 - rom support + legal combination
 11831                                  ;		1 - no rom support
 11832                                  ;		2 - illegal combination
 11833                                  ;		3 - no media present
 11834                                  ;	carry cleared.
 11835                                  ;
 11836                                  ;	for format track:
 11837                                  ;		carry set if error
 11838                                  ;
 11839                                  ; ==========================================================================
 11840                                  
 11841                                  ; 16/03/2019
 11842                                  
 11843                                  		; 19/10/2022
 11844                                  FormatTrack:
 11845 00000D82 C51E[1200]              		lds	bx, [ptrsav]
 11846 00000D86 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11847 00000D89 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11848                                  					; STATUS_FOR_FORMAT
 11849 00000D8C 740E                    		jz	short DoFormatTrack
 11850 00000D8E 1E                      		push	ds
 11851                                  		; 17/10/2022
 11852 00000D8F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11853                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11854 00000D94 E82302                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11855 00000D97 1F                      		pop	ds
 11856 00000D98 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11857 00000D9A F8                      		clc
 11858 00000D9B C3                      		retn
 11859                                  ; ---------------------------------------------------------------------------
 11860                                  
 11861                                  DoFormatTrack:				
 11862 00000D9C 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11863                                  					; DEV_HARDDISK
 11864 00000DA1 7508                    		jnz	short DoFormatDiskette
 11865                                  		; 17/10/2022
 11866 00000DA3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11867                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11868                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11869 00000DA8 E99B00                  		jmp	VerifyTrack
 11870                                  ; ---------------------------------------------------------------------------
 11871                                  
 11872                                  DoFormatDiskette:			
 11873 00000DAB 8B4F01                  		mov	cx, [bx+1]
 11874 00000DAE 8B5703                  		mov	dx, [bx+3]
 11875 00000DB1 F60702                  		test	byte [bx], 2
 11876                                  		; 17/10/2022
 11877 00000DB4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11878                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11879                                  					; Setup	ds-> Bios_Data for verify
 11880 00000DB9 7403                    		jz	short DoFormatDiskette_1
 11881 00000DBB E9E300                  		jmp	VerifyTrack_Err
 11882                                  ; ---------------------------------------------------------------------------
 11883                                  
 11884                                  DoFormatDiskette_1:			
 11885 00000DBE E8F901                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11886 00000DC1 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11887 00000DC3 7406                    		jz	short NeedToSetDasd ; Old rom
 11888 00000DC5 3C03                    		cmp	al, 3		; Time out error?
 11889 00000DC7 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11890                                  					; about	the illegal combination)
 11891 00000DC9 EB66                    		jmp	short FormatFailed
 11892                                  ; ---------------------------------------------------------------------------
 11893                                  
 11894                                  NeedToSetDasd:				
 11895 00000DCB 52                      		push	dx
 11896 00000DCC E88E01                  		call	SetDasd		; INT 13h, AH=17h
 11897 00000DCF 5A                      		pop	dx
 11898                                  NoSetDasd:				
 11899 00000DD0 E85CFA                  		call	checksingle	; Do any needed	diskette swapping
 11900 00000DD3 89D0                    		mov	ax, dx		; Get track from packet
 11901 00000DD5 A3[3901]                		mov	[trknum], ax
 11902 00000DD8 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11903 00000DDC 88CC                    		mov	ah, cl
 11904 00000DDE BB[3205]                		mov	bx, tracktable
 11905 00000DE1 8B0E[3005]              		mov	cx, [sectorspertrack]
 11906                                  
 11907                                  StoreCylinderHead:			
 11908 00000DE5 8907                    		mov	[bx], ax	; Store	into TrackTable
 11909 00000DE7 83C304                  		add	bx, 4		; Skip to next sector field
 11910 00000DEA E2F9                    		loop	StoreCylinderHead
 11911                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 11912                                  		; 02/09/2023
 11913 00000DEC B105                    		mov	cl, 5
 11914                                  FormatRetry:				
 11915 00000DEE 51                      		push	cx
 11916 00000DEF BB[3205]                		mov	bx, tracktable
 11917 00000DF2 A0[3005]                		mov	al, [sectorspertrack]
 11918 00000DF5 B405                    		mov	ah, 5		; romformat
 11919 00000DF7 8C1E[2E05]              		mov	[xfer_seg], ds
 11920 00000DFB E86602                  		call	ToRom
 11921 00000DFE 59                      		pop	cx
 11922 00000DFF 7216                    		jb	short FormatError
 11923 00000E01 51                      		push	cx		; Now verify the sectors just formatted.
 11924                                  					; NOTE:	because	of bug in some BIOSes we have to
 11925                                  					;	set ES:BX to 00:00
 11926 00000E02 53                      		push	bx
 11927 00000E03 31DB                    		xor	bx, bx
 11928 00000E05 891E[2E05]              		mov	[xfer_seg], bx
 11929 00000E09 A0[3005]                		mov	al, [sectorspertrack]
 11930 00000E0C B404                    		mov	ah, 4		; romverify
 11931 00000E0E B101                    		mov	cl, 1
 11932 00000E10 E85102                  		call	ToRom
 11933 00000E13 5B                      		pop	bx
 11934 00000E14 59                      		pop	cx
 11935 00000E15 7329                    		jnb	short FormatOk
 11936                                  FormatError:				
 11937 00000E17 E83402                  		call	ResetDisk
 11938 00000E1A C606[3006]01            		mov	byte [had_format_error], 1
 11939 00000E1F 50                      		push	ax
 11940 00000E20 51                      		push	cx
 11941 00000E21 52                      		push	dx
 11942 00000E22 E89501                  		call	SetMediaForFormat
 11943 00000E25 3C01                    		cmp	al, 1
 11944 00000E27 7503                    		jnz	short WhileErr
 11945 00000E29 E83101                  		call	SetDasd
 11946                                  WhileErr:				
 11947 00000E2C 5A                      		pop	dx
 11948 00000E2D 59                      		pop	cx
 11949 00000E2E 58                      		pop	ax
 11950 00000E2F E2BD                    		loop	FormatRetry
 11951                                  FormatFailed:				
 11952 00000E31 C606[3006]01            		mov	byte [had_format_error], 1
 11953                                  					; Set the format error flag
 11954 00000E36 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11955 00000E39 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11956 00000E3B B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11957                                  DoMapIt:				
 11958 00000E3D E973FD                  		jmp	maperror
 11959                                  ; ---------------------------------------------------------------------------
 11960                                  
 11961                                  FormatOk:				
 11962 00000E40 C606[3006]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11963 00000E45 C3                      		retn
 11964                                  ; ---------------------------------------------------------------------------
 11965                                  
 11966                                  ; 16/10/2022
 11967                                  
 11968                                  ; ==========================================================================
 11969                                  ;
 11970                                  ; VerifyTrack:
 11971                                  ;
 11972                                  ; input: ES:di points to bds for drive
 11973                                  ; ==========================================================================
 11974                                  
 11975                                  VerifyTrack:				
 11976 00000E46 1E                      		push	ds
 11977 00000E47 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11978 00000E4B C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11979                                  
 11980                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11981                                  
 11982 00000E4E 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11983 00000E51 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11984 00000E54 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11985 00000E57 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11986                                  					; Get option flag word
 11987 00000E59 1F                      		pop	ds
 11988 00000E5A C606[2001]04            		mov	byte [rflag], 4	; romverify
 11989 00000E5F 890E[3301]              		mov	[curtrk], cx
 11990 00000E63 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11991 00000E66 8B0E[3005]              		mov	cx, [sectorspertrack]
 11992                                  
 11993                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11994                                  		; specified if not we should go to the normal track verification
 11995                                  		; routine. If fast format has been specified we should get the
 11996                                  		; number of tracks to be verified and check it to see if it is
 11997                                  		; > 255. If it is then it is an error and we should go to
 11998                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11999                                  		; sectors per track to get the total number of sectors to be
 12000                                  		; verified. This should also be less than equal to 255
 12001                                  		; otherwise we go to same error exit. If everything is okay
 12002                                  		; we initalise cx to the total sectors. use ax as a temporary
 12003                                  		; register.
 12004                                  
 12005                                  					; Special function requested?	
 12006 00000E6A F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 12007 00000E6D 7421                    		jz	short NormVerifyTrack
 12008 00000E6F 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 12009 00000E71 08E4                    		or	ah, ah
 12010 00000E73 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 12011 00000E75 F6E1                    		mul	cl
 12012 00000E77 08E4                    		or	ah, ah
 12013 00000E79 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 12014 00000E7B 89C1                    		mov	cx, ax
 12015                                  		; 10/12/2022
 12016 00000E7D 26F6452301              		test	byte [es:di+35], 1
 12017                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 12018                                  					; fnon_removable
 12019 00000E82 740C                    		jz	short NormVerifyTrack
 12020                                  					; Multitrack operation = on?
 12021                                  		; 10/12/2022
 12022                                  		; 19/10/2022
 12023 00000E84 F606[2605]80            		test	byte [multrk_flag], 80h
 12024                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 12025                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 12026 00000E89 7405                    		jz	short NormVerifyTrack
 12027 00000E8B C606[2D05]01            		mov	byte [multitrk_format_flag], 1
 12028                                  NormVerifyTrack:			
 12029 00000E90 31C0                    		xor	ax, ax		; 1st sector
 12030 00000E92 31DB                    		xor	bx, bx
 12031 00000E94 891E[2E05]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 12032 00000E98 E83F00                  		call	TrackIo
 12033 00000E9B C606[2D05]00            		mov	byte [multitrk_format_flag], 0
 12034 00000EA0 C3                      		retn
 12035                                  ; ---------------------------------------------------------------------------
 12036                                  
 12037                                  VerifyTrack_Err:			
 12038 00000EA1 B401                    		mov	ah, 1
 12039 00000EA3 E90DFD                  		jmp	maperror
 12040                                  ; ---------------------------------------------------------------------------
 12041                                  
 12042                                  ; 16/10/2022
 12043                                  
 12044                                  ; ==========================================================================
 12045                                  ;
 12046                                  ; ReadTrack:
 12047                                  ;
 12048                                  ; input: ES:di points to bds for drive
 12049                                  ;
 12050                                  ; ==========================================================================
 12051                                  
 12052                                  ReadTrack:				
 12053 00000EA6 C606[2001]02            		mov	byte [rflag], 2	; romread
 12054 00000EAB EB05                    		jmp	short ReadWriteTrack
 12055                                  ; ---------------------------------------------------------------------------
 12056                                  
 12057                                  WriteTrack:
 12058                                  
 12059                                  ; ==========================================================================
 12060                                  ;
 12061                                  ; WriteTrack:
 12062                                  ;
 12063                                  ; input: ES:di points to bds for drive
 12064                                  ;
 12065                                  ; ==========================================================================
 12066                                  				
 12067 00000EAD C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12068                                  
 12069                                  		; Fall into ReadWriteTrack
 12070                                  
 12071                                  ; ==========================================================================
 12072                                  ;
 12073                                  ; readWriteTrack:
 12074                                  ;
 12075                                  ; input:
 12076                                  ;    ES:di points to bds for drive
 12077                                  ;    rFlag - 2 for read,3 for write
 12078                                  ;
 12079                                  ; ==========================================================================
 12080                                  
 12081                                  ReadWriteTrack:	
 12082                                  		; save bds pointer segment so we can use it to access
 12083                                  		; our packet. Notice that this is not the standard register
 12084                                  		; assignment for accessing packets
 12085                                  		
 12086                                  		; 19/10/2022	
 12087 00000EB2 06                      		push	es
 12088 00000EB3 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 12089 00000EB7 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12090 00000EBB 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 12091 00000EBF A3[3301]                		mov	[curtrk], ax
 12092 00000EC2 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 12093 00000EC6 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 12094 00000EC9 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 12095 00000ECD 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 12096 00000ED1 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 12097                                  					; Get transfer address
 12098                                  
 12099                                  		; we just trashed our packet address, but we no longer care
 12100                                  
 12101 00000ED5 8C06[2E05]              		mov	[xfer_seg], es	; Pass transfer	segment
 12102 00000ED9 07                      		pop	es
 12103                                  
 12104                                  		; Fall into TrackIo
 12105                                  
 12106                                  ; =============== S U B	R O U T	I N E =======================================
 12107                                  
 12108                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12109                                  
 12110                                  ; ==========================================================================
 12111                                  ;
 12112                                  ; TrackIo:
 12113                                  ;    performs track read/write/verify
 12114                                  ;
 12115                                  ;   input:
 12116                                  ;      rFlag	- 2 = read
 12117                                  ;		  3 = write
 12118                                  ;		  4 = verify
 12119                                  ;      AX	- Index into track table of first sector to io
 12120                                  ;      CX	- Number of sectors to io
 12121                                  ;      Xfer_Seg:BX - Transfer address
 12122                                  ;      ES:DI	- Pointer to bds
 12123                                  ;      CurTrk	- Current cylinder
 12124                                  ;      CurHd	- Current head
 12125                                  ;
 12126                                  ; ==========================================================================
 12127                                  
 12128                                  ; 16/03/2019 - Retro DOS v4.0
 12129                                  		
 12130                                  		; 19/10/2022
 12131                                  TrackIo:	
 12132                                  					; Procedure `disk' will pop stack to
 12133 00000EDA 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 12134 00000EDE E84EF9                  		call	checksingle	; Ensure correct disk is in drv
 12135 00000EE1 803E[2F06]01            		cmp	byte [media_set_for_format], 1
 12136                                  					; See if we have already set	disk
 12137 00000EE6 7407                    		jz	short Dptalreadyset ; base table
 12138 00000EE8 50                      		push	ax		; set up tables	and variables for i/o
 12139 00000EE9 51                      		push	cx
 12140 00000EEA E8CEFA                  		call	iosetup
 12141 00000EED 59                      		pop	cx
 12142 00000EEE 58                      		pop	ax
 12143                                  Dptalreadyset:				; Point si at the table entry of the			
 12144 00000EEF BE[3205]                		mov	si, tracktable	; first sector to be io'd
 12145 00000EF2 D1E0                    		shl	ax, 1
 12146 00000EF4 D1E0                    		shl	ax, 1
 12147 00000EF6 01C6                    		add	si, ax
 12148                                  
 12149                                  		; WE WANT:
 12150                                  		; CX to	be the number of times we have to loop
 12151                                  		; DX to	be the number of sectors we read on each iteration
 12152                                  		
 12153 00000EF8 BA0100                  		mov	dx, 1
 12154                                  		; 12/12/2022
 12155 00000EFB 26F6452308              		test	byte [es:di+23h], 8
 12156                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 12157                                  					; good_tracklayout
 12158 00000F00 7402                    		jz	short ionextsector
 12159                                  		
 12160 00000F02 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 12161                                  ionextsector:				
 12162 00000F04 51                      		push	cx
 12163 00000F05 52                      		push	dx
 12164 00000F06 46                      		inc	si
 12165 00000F07 46                      		inc	si		; Skip over the	cylinder and head in
 12166                                  					; the track table
 12167 00000F08 AC                      		lodsb			; Get sector ID	from track table
 12168 00000F09 A2[3101]                		mov	[cursec], al
 12169                                  
 12170                                  		; assumptions for a fixed disk multi-track disk	i/o
 12171                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 12172                                  		;     only CL is valid.
 12173                                  		; 2). Sector size should be set	to 512 bytes.
 12174                                  		; 3). Good track layout
 12175                                  		
 12176                                  		; 12/12/2022
 12177 00000F0C 26F6452301              		test	byte [es:di+23h], 1
 12178                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 12179                                  					; fnon_removable ; Fixed disk?
 12180 00000F11 7414                    		jz	short IoRemovable ; No
 12181                                  		; 12/12/2022
 12182 00000F13 F606[2605]80            		test	byte [multrk_flag], 80h
 12183                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 12184                                  						; Allow multi-track operation?
 12185 00000F18 740D                    		jz	short IoRemovable ; No,don't do that.
 12186 00000F1A 8916[2201]              		mov	[seccnt], dx
 12187 00000F1E 89D0                    		mov	ax, dx
 12188 00000F20 E81CFB                  		call	Disk
 12189 00000F23 5A                      		pop	dx
 12190 00000F24 59                      		pop	cx
 12191 00000F25 F8                      		clc
 12192 00000F26 C3                      		retn
 12193                                  ; ---------------------------------------------------------------------------
 12194                                  
 12195                                  IoRemovable:				
 12196 00000F27 AC                      		lodsb			; Get sector size index	from track
 12197                                  					; table	and save it
 12198 00000F28 50                      		push	ax
 12199 00000F29 56                      		push	si
 12200 00000F2A 1E                      		push	ds		; Save Bios_Data
 12201 00000F2B 50                      		push	ax
 12202 00000F2C 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 12203                                  					; Fetch	EOT while ds-> Bios_Data
 12204 00000F30 C536[2D01]              		lds	si, [dpt]
 12205 00000F34 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 12206 00000F37 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 12207 00000F3A 58                      		pop	ax
 12208 00000F3B 1F                      		pop	ds
 12209 00000F3C 88D0                    		mov	al, dl
 12210 00000F3E A3[2201]                		mov	[seccnt], ax
 12211 00000F41 E8FBFA                  		call	Disk
 12212 00000F44 5E                      		pop	si		; Advance buffer pointer by adding
 12213                                  					; sector size
 12214                                  		;pop	ax
 12215                                  		; 24/12/2023
 12216 00000F45 59                      		pop	cx
 12217                                  
 12218                                  		; 02/09/2023 (PCDOS 7.1)
 12219                                  		;call	SectorSizeIndexToSectorSize
 12220                                  		;mov	cl, al	; 24/12/2023
 12221 00000F46 B88000                  		mov	ax, 128
 12222 00000F49 D3E0                    		shl	ax, cl
 12223                                  
 12224 00000F4B 01C3                    		add	bx, ax
 12225 00000F4D 5A                      		pop	dx
 12226 00000F4E 59                      		pop	cx
 12227 00000F4F E2B3                    		loop	ionextsector
 12228 00000F51 803E[2F06]01            		cmp	byte [media_set_for_format], 1
 12229                                  		;jz	short NoNeedDone
 12230                                  		; 12/12/2022
 12231 00000F56 7404                    		je	short NoNeedDone2
 12232 00000F58 E829FA                  		call	done		; set time of last access, and reset
 12233                                  					; entries in Dpt.
 12234                                  NoNeedDone:
 12235 00000F5B F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 12236                                  NoNeedDone2:
 12237 00000F5C C3                      		retn
 12238                                  
 12239                                  ; =============== S U B	R O U T	I N E =======================================
 12240                                  
 12241                                  ; ---------------------------------------------------------------------------
 12242                                  ;
 12243                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 12244                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 12245                                  ; are permissible.
 12246                                  ;
 12247                                  ; On Input   AX contains sector size in bytes
 12248                                  ; On Output  AL Contains index
 12249                                  ; All other registers preserved
 12250                                  ;
 12251                                  ; ---------------------------------------------------------------------------
 12252                                  
 12253                                  ; 02/09/2023
 12254                                  ;SectSizeToSectIndex:
 12255                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 12256                                  ;					; examine upper	byte only
 12257                                  ;		ja	short OneK
 12258                                  ;		mov	al, ah		; value	in AH is the index!
 12259                                  ;		retn
 12260                                  
 12261                                  ; ---------------------------------------------------------------------------
 12262                                  ;
 12263                                  ;OneK:
 12264                                  ;		mov	al, 3
 12265                                  ;		retn
 12266                                  
 12267                                  ; =============== S U B	R O U T	I N E =======================================
 12268                                  
 12269                                  ; 02/09/2023
 12270                                  ;SectorSizeIndexToSectorSize:
 12271                                  ;		mov	cl, al
 12272                                  ;		mov	ax, 128
 12273                                  ;		shl	ax, cl
 12274                                  ;		retn
 12275                                  
 12276                                  ; =============== S U B	R O U T	I N E =======================================
 12277                                  
 12278                                  ; 16/10/2022
 12279                                  
 12280                                  ; ---------------------------------------------------------------------------
 12281                                  ;
 12282                                  ; SetDASD
 12283                                  ;
 12284                                  ; Set up the rom for formatting.
 12285                                  ; we have to tell the rom bios what type of disk is in the drive.
 12286                                  ;
 12287                                  ; On Input   - ES:di - Points to bds
 12288                                  ;
 12289                                  ; ---------------------------------------------------------------------------
 12290                                  
 12291                                  		; 19/10/2022
 12292                                  SetDasd:	
 12293 00000F5D 803E[3006]01            		cmp	byte [had_format_error], 1 ;
 12294                                  					; See if we've previously set dasd type
 12295 00000F62 740C                    		jz	short DoSetDasd
 12296                                  		; 10/12/2022
 12297 00000F64 26F6452380              		test	byte [es:di+23h], 80h
 12298                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 12299                                  					; set_dasd_true
 12300 00000F69 7446                    		jz	short DasdHasBeenSet
 12301                                  		; 10/12/2022
 12302 00000F6B 268065237F              		and	byte [es:di+23h], 7Fh
 12303                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 12304                                  					; ~set_dasd_true
 12305                                  DoSetDasd:
 12306 00000F70 C606[3006]00            		mov	byte [had_format_error], 0 ; Reset it
 12307 00000F75 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 12308 00000F7A B004                    		mov	al, 4
 12309                                  		; 02/09/2023
 12310 00000F7C 268A6522                		mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 12311 00000F80 80FC02                  		cmp	ah, 2
 12312                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12313                                  					; DEV_3INCH720KB
 12314 00000F83 7414                    		jz	short DoSet
 12315                                  		; 24/12/2023
 12316 00000F85 B001                    		mov	al, 1
 12317                                  		;cmp	ah, 1
 12318 00000F87 38C4                    		cmp	ah, al	; 1
 12319                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 12320                                  					; DEV_5INCH96TPI
 12321                                  		;jz	short GotBig
 12322                                  		; 24/12/2023
 12323                                  		;mov	al, 1
 12324                                  		;jmp	short DoSet
 12325                                  		; 02/09/2023
 12326 00000F89 750E                    		jnz	short DoSet
 12327                                  GotBig:
 12328                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 12329                                  		; 02/09/2023
 12330 00000F8B 40                      		inc	ax  ; mov al, 2
 12331 00000F8C 803E[2E06]00            		cmp	byte [mediatype], 0
 12332 00000F91 7506                    		jnz	short DoSet
 12333                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 12334                                  		; 10/12/2022
 12335                                  		;inc	al  ; al = 3
 12336                                  		; 18/12/2022
 12337 00000F93 40                      		inc	ax  ; al = 3
 12338 00000F94 C606[3B01]54            		mov	byte [gap_patch], 54h
 12339                                  DoSet:
 12340 00000F99 1E                      		push	ds
 12341 00000F9A 56                      		push	si
 12342                                  
 12343                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 12344                                  		; 02/09/2023
 12345 00000F9B 31F6                    		xor	si, si
 12346 00000F9D 8EDE                    		mov	ds, si	; 0
 12347                                  
 12348 00000F9F C5367800                		lds	si, [DSKADR]
 12349                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 12350                                  		;;lds	si, ds:78h
 12351                                  
 12352 00000FA3 C644090F                		mov	byte [si+9], 0Fh ;
 12353                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 12354 00000FA7 5E                      		pop	si
 12355 00000FA8 1F                      		pop	ds
 12356 00000FA9 B417                    		mov	ah, 17h
 12357 00000FAB 268A5504                		mov	dl, [es:di+4]
 12358 00000FAF CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 12359                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 12360                                  DasdHasBeenSet:
 12361 00000FB1 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 12362 00000FB5 8826[3701]              		mov	[formt_eot], ah
 12363 00000FB9 C3                      		retn
 12364                                  
 12365                                  ; =============== S U B	R O U T	I N E =======================================
 12366                                  
 12367                                  ; 16/10/2022
 12368                                  
 12369                                  ; ---------------------------------------------------------------------------
 12370                                  ;
 12371                                  ; Set Media Type for Format
 12372                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 12373                                  ; BPB area in the BDS can be handled by the rom.
 12374                                  ; On Input, ES:DI -> current BDS.
 12375                                  ; The status of the operation is returned in AL
 12376                                  ;
 12377                                  ;	- 0 - if the support is available,and the combination is valid.
 12378                                  ;	- 1 - no rom support
 12379                                  ;	- 2 - illegal combination
 12380                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 12381                                  ;
 12382                                  ; Flags also may be altered. All other registers preserved.
 12383                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 12384                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 12385                                  ; to the one returned. the original pointer to the disk base table is stored
 12386                                  ; in TempDpt, until it is restored.
 12387                                  ;
 12388                                  ; ---------------------------------------------------------------------------
 12389                                  
 12390                                  		; 19/10/2022
 12391                                  SetMediaForFormat:	
 12392 00000FBA 51                      		push	cx
 12393 00000FBB 52                      		push	dx
 12394                                  
 12395                                  		; If we have a format error, then do not change Dpt, TempDpt.
 12396                                  		; but we need to call int 13h, ah=18h again.
 12397                                  
 12398 00000FBC 803E[3006]01            		cmp	byte [had_format_error], 1
 12399 00000FC1 7425                    		jz	short SkipSaveDskAdr
 12400 00000FC3 30C0                    		xor	al, al		; If already done return 0
 12401 00000FC5 803E[2F06]01            		cmp	byte [media_set_for_format], 1
 12402 00000FCA 7502                    		jnz	short DoSetMediaForFormat
 12403 00000FCC EB7D                    		jmp	SetMediaRet	; Media	already	set
 12404                                  ; ---------------------------------------------------------------------------
 12405                                  
 12406                                  DoSetMediaForFormat:
 12407 00000FCE 06                      		push	es
 12408 00000FCF 56                      		push	si
 12409                                  		
 12410                                  		; 02/09/2023
 12411                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 12412 00000FD0 31F6                    		xor	si, si ; 0
 12413 00000FD2 8EC6                    		mov	es, si
 12414                                  
 12415 00000FD4 26C4367800              		les	si, [es:DSKADR]
 12416                                  		;les	si, es:78h	; [es:DSKADR]
 12417                                  					; Get pointer to disk base table
 12418 00000FD9 8936[2D01]              		mov	[dpt], si
 12419 00000FDD 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12420                                  
 12421                                  		; Initialize the head settle time to 0Fh. See the offsets
 12422                                  		; given in dskprm.inc.
 12423                                  
 12424 00000FE1 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12425 00000FE6 5E                      		pop	si
 12426 00000FE7 07                      		pop	es
 12427                                  SkipSaveDskAdr:				
 12428 00000FE8 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 12429 00000FEC 49                      		dec	cx
 12430 00000FED 80E503                  		and	ch, 3
 12431 00000FF0 D0CD                    		ror	ch, 1
 12432 00000FF2 D0CD                    		ror	ch, 1
 12433 00000FF4 86E9                    		xchg	ch, cl
 12434 00000FF6 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 12435 00000FFA 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12436 00000FFE 06                      		push	es
 12437 00000FFF 1E                      		push	ds
 12438 00001000 56                      		push	si
 12439 00001001 57                      		push	di
 12440 00001002 B418                    		mov	ah, 18h
 12441 00001004 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 12442                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 12443 00001006 7231                    		jb	short FormaStatErr
 12444 00001008 803E[3006]01            		cmp	byte [had_format_error], 1
 12445 0000100D 7423                    		jz	short skip_disk_base_setting
 12446 0000100F 06                      		push	es		; Save segment returned	by the rom
 12447                                  
 12448                                  		; 02/09/2023
 12449                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 12450 00001010 31F6                    		xor	si, si
 12451 00001012 8EC6                    		mov	es, si ; 0
 12452 00001014 06                      		push	es ; * ; 02/09/2023
 12453                                  
 12454 00001015 26C4367800              		les	si, [es:DSKADR]
 12455                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 12456                                  					; Get current disk base	table
 12457 0000101A 8936[3106]              		mov	[tempdpt], si
 12458 0000101E 8C06[3306]              		mov	[tempdpt+2], es ; Save it
 12459                                  
 12460                                  		; 02/09/2023
 12461                                  		;;mov	es, [zeroseg]
 12462                                  		;xor	si, si ; 0
 12463                                  		;mov	es, si
 12464 00001022 07                      		pop	es ; * ; 02/09/2023
 12465                                  
 12466                                  		;mov	es:78h,	di
 12467 00001023 26893E7800              		mov	[es:DSKADR], di
 12468                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 12469 00001028 268F067A00              		pop	word [es:DSKADR+2]
 12470 0000102D C606[2F06]01            		mov	byte [media_set_for_format], 1
 12471                                  skip_disk_base_setting:			
 12472 00001032 30C0                    		xor	al, al		; Legal	combination + rom support code
 12473                                  		;mov	ds:had_format_error, al	; Reset	the flag
 12474 00001034 A2[3006]                		mov	[had_format_error], al
 12475 00001037 EB0E                    		jmp	short PopStatRet
 12476                                  ; ---------------------------------------------------------------------------
 12477                                  
 12478                                  FormaStatErr:
 12479                                  		; 10/12/2022
 12480 00001039 B003                    		mov	al, 3
 12481                                  				
 12482 0000103B 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 12483                                  					; Illegal combination =	0Ch
 12484 0000103E 7406                    		jz	short FormatStatIllegalComb
 12485 00001040 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 12486 00001043 7402                    		jz	short FormatStatTimeOut
 12487                                  		; 10/12/2022
 12488                                  		;dec	al
 12489                                  		; 18/12/2022
 12490 00001045 48                      		dec	ax
 12491                                  		; al = 2
 12492                                  		;mov	al, 1		; Function not supported.
 12493                                  		;jmp	short PopStatRet
 12494                                  ; ---------------------------------------------------------------------------
 12495                                  
 12496                                  FormatStatIllegalComb:
 12497                                  		; 10/12/2022
 12498                                  		;dec	al	; 3 -> 2 or 2 -> 1
 12499                                  		; 18/12/2022
 12500 00001046 48                      		dec	ax
 12501                                  		; al = 2				
 12502                                  		;mov	al, 2		; Function supported, but
 12503                                  					; Illegal sect/trk,trk combination.
 12504                                  		; 10/12/2022
 12505                                  		;jmp	short PopStatRet
 12506                                  ; ---------------------------------------------------------------------------
 12507                                  
 12508                                  FormatStatTimeOut:			
 12509                                  		; 10/12/2022
 12510                                  		; al = 3
 12511                                  		;mov	al, 3		; Function supported, but
 12512                                  					; Media	not present.
 12513                                  PopStatRet:				
 12514 00001047 5F                      		pop	di
 12515 00001048 5E                      		pop	si
 12516 00001049 1F                      		pop	ds
 12517 0000104A 07                      		pop	es
 12518                                  SetMediaRet:				
 12519 0000104B 5A                      		pop	dx
 12520 0000104C 59                      		pop	cx
 12521 0000104D C3                      		retn
 12522                                  
 12523                                  ; =============== S U B	R O U T	I N E =======================================
 12524                                  
 12525                                  ; 16/10/2022
 12526                                  
 12527                                  ; ---------------------------------------------------------------------------
 12528                                  ;
 12529                                  ; RESET THE DRIVE
 12530                                  ;
 12531                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 12532                                  ; slow head settle time for the next operation. this is because the reset
 12533                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 12534                                  ; time around - there is a problem with 3.5" drives in that the head does
 12535                                  ; not settle down in time,even for read operations!!
 12536                                  ;
 12537                                  ; ---------------------------------------------------------------------------
 12538                                  
 12539                                  ResetDisk:
 12540 0000104E 50                      		push	ax
 12541                                  
 12542                                  		; 02/09/2023
 12543 0000104F B80100                  		mov	ax, 1 ; PCDOS 7.1
 12544 00001052 3806[2F06]              		cmp	[media_set_for_format], al ; 1
 12545                                  		;cmp	byte [media_set_for_format], 1
 12546                                  					; Reset while formatting?
 12547 00001056 7503                    		jnz	short ResetDisk_cont
 12548                                  					; Then verify operation in "fmt & vrfy"
 12549                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 12550 00001058 A2[3006]                		mov	[had_format_error], al ; 1
 12551                                  ResetDisk_cont:
 12552                                  		; 02/09/2023 (ah=0)
 12553                                  		;xor	ah, ah		; So signals that we had a format error
 12554 0000105B CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 12555                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 12556 0000105D C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 12557                                  					; Zap up the speed
 12558 00001062 58                      		pop	ax
 12559 00001063 C3                      		retn
 12560                                  
 12561                                  ; =============== S U B	R O U T	I N E =======================================
 12562                                  
 12563                                  ; 16/10/2022
 12564                                  
 12565                                  ; ---------------------------------------------------------------------------
 12566                                  ;
 12567                                  ; This routine sets up the drive parameter table with the values needed for
 12568                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 12569                                  ;
 12570                                  ; on entry  -	ES:DI - points to bds for the drive
 12571                                  ;		Xfer_Seg:BX - points to trkbuf
 12572                                  ;		AL    - number of sectors
 12573                                  ;		AH    - int 13 function code
 12574                                  ;		CL    - sector number for verify
 12575                                  ;		DS    - Bios_Data
 12576                                  ;
 12577                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 12578                                  ;		AX and flags are the results of the int 13
 12579                                  ;
 12580                                  ; ---------------------------------------------------------------------------
 12581                                  
 12582                                  		; 24/12/2023
 12583                                  		; 19/10/2022
 12584                                  ToRom:	
 12585 00001064 53                      		push	bx
 12586 00001065 56                      		push	si
 12587                                  
 12588                                  		; Compaq bug fix - check whether we are using new ROM
 12589                                  		; functionality to set up format, not merely if it exists.
 12590                                  		; This was formerly a check against [new_rom]
 12591                                  
 12592 00001066 F606[2F06]01            		test	byte [media_set_for_format], 1
 12593 0000106B 7534                    		jnz	short GotValidDpt
 12594 0000106D 50                      		push	ax
 12595 0000106E 06                      		push	es		; Save bds segment
 12596 0000106F 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12597                                  					; ffSmall ; is it a 3.5" drive?
 12598                                  		; 24/12/2023
 12599                                  		;pushf	; not necessary	; (Save	the cmp	result)
 12600                                  		
 12601 00001074 8E06[1A00]              		mov	es, [zeroseg]
 12602                                  		;les	si, es:78h	; Get pointer to disk base table
 12603 00001078 26C4367800              		les	si, [es:DSKADR]
 12604                                  		;mov	word ptr ds:dpt, si
 12605                                  		;mov	word ptr ds:dpt+2, es ;	Save pointer to table
 12606 0000107D 8936[2D01]              		mov	[dpt], si
 12607 00001081 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12608                                  		
 12609 00001085 A0[3701]                		mov	al, [formt_eot]
 12610 00001088 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 12611 0000108C A0[3B01]                		mov	al, [gap_patch]
 12612 0000108F 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 12613                                  					; Important for	format
 12614 00001093 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12615                                  					; Assume we are	doing a	seek operation
 12616                                  					; Setup	motor start correctly for 3.5" drives
 12617                                  		; 24/12/2023
 12618                                  		;popf			; Get result of	earlier	cmp
 12619 00001098 7505                    		jnz	short MotorStrtOK
 12620 0000109A 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 12621                                  MotorStrtOK:				
 12622 0000109F 07                      		pop	es		; Restore bds segment
 12623 000010A0 58                      		pop	ax
 12624                                  GotValidDpt:				
 12625 000010A1 8B16[3901]              		mov	dx, [trknum]	; Set track number
 12626 000010A5 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 12627 000010A7 268A5504                		mov	dl, [es:di+4]	; Set drive number
 12628 000010AB 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 12629 000010AF 06                      		push	es		; Save bds segment
 12630 000010B0 8E06[2E05]              		mov	es, [xfer_seg]
 12631 000010B4 CD13                    		int	13h		; DISK -
 12632 000010B6 07                      		pop	es		; Restore bds segment
 12633 000010B7 5E                      		pop	si
 12634 000010B8 5B                      		pop	bx
 12635 000010B9 C3                      		retn
 12636                                  
 12637                                  ; ---------------------------------------------------------------------------
 12638                                  
 12639                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12640                                  
 12641                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 12642                                  
 12643                                  ; ==========================================================================
 12644                                  ;
 12645                                  ; get the owner of the physical drive represented by the logical drive in al.
 12646                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 12647                                  ; if this is not the case, the system may hang, just following the linked list.
 12648                                  ;
 12649                                  ; ==========================================================================
 12650                                  
 12651                                  		; 19/10/2022
 12652                                  ioctl_getown:
 12653 000010BA E809F4                  		call	SetDrive
 12654 000010BD 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12655                                  					; Get physical drive number
 12656 000010C1 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12657                                  ownloop:				
 12658 000010C5 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12659 000010C9 7507                    		jnz	short getnextBDS
 12660                                  		; 10/12/2022
 12661 000010CB 26F6452320              		test	byte [es:di+23h], 20h
 12662                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12663                                  					; fi_own_physical
 12664 000010D0 7514                    		jnz	short exitown
 12665                                  getnextBDS:				
 12666 000010D2 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12667 000010D5 EBEE                    		jmp	short ownloop
 12668                                  ; ---------------------------------------------------------------------------
 12669                                  
 12670                                  ; ==========================================================================
 12671                                  ;
 12672                                  ; set the ownership of the physical drive represented by the logical drive
 12673                                  ; in al to al.
 12674                                  ;
 12675                                  ; ==========================================================================
 12676                                  
 12677                                  		; 19/10/2022
 12678                                  ioctl_setown:
 12679 000010D7 E8ECF3                  		call	SetDrive
 12680 000010DA C606[7A00]01            		mov	byte [fsetowner], 1
 12681                                  					; set flag for CheckSingle to look at.
 12682 000010DF E84DF7                  		call	checksingle
 12683                                  		; 02/09/2023
 12684 000010E2 FE0E[7A00]              		dec	byte [fsetowner] ; 0
 12685                                  		;mov	byte [fsetowner], 0
 12686                                  					; set ownership	of drive reset flag
 12687                                  		; Fall into ExitOwn
 12688                                  
 12689                                  ; ==========================================================================
 12690                                  ;
 12691                                  ; if there is only one logical drive assigned to this physical drive, return
 12692                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12693                                  ;
 12694                                  ; ==========================================================================
 12695                                  
 12696                                  exitown:				
 12697 000010E6 30C9                    		xor	cl, cl
 12698                                  		; 12/12/2022
 12699 000010E8 26F6452310              		test	byte [es:di+23h], 10h
 12700                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12701                                  					; fi_am_mult
 12702 000010ED 7406                    		jz	short exitnomult
 12703 000010EF 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12704                                  					; Get logical drive number
 12705                                  					; Get it 1-based
 12706 000010F3 FEC1                    		inc	cl
 12707                                  exitnomult:				
 12708 000010F5 C51E[1200]              		lds	bx, [ptrsav]
 12709 000010F9 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12710                                  					; Exit normal termination
 12711                                  		; 12/12/2022
 12712                                  		; cf=0
 12713                                  		;clc
 12714 000010FC C3                      		retn
 12715                                  
 12716                                  ; =============== S U B	R O U T	I N E =======================================
 12717                                  
 12718                                  ; 16/10/2022
 12719                                  
 12720                                  ; ---------------------------------------------------------------------------
 12721                                  ;
 12722                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12723                                  ; only if the first byte of TempDpt is not -1.
 12724                                  ; all registers (including flags) are preserved.
 12725                                  ;
 12726                                  ; ---------------------------------------------------------------------------
 12727                                  
 12728                                  		; 24/12/2023
 12729                                  		; 19/10/2022
 12730                                  RestoreOldDpt:
 12731                                  		; if we have already restored the disk base table earlier,
 12732                                  		; do not do it again.
 12733                                  
 12734 000010FD 50                      		push	ax
 12735 000010FE 30C0                    		xor	al, al
 12736 00001100 A2[3006]                		mov	[had_format_error], al	; Reset flag and 
 12737 00001103 8606[2F06]              		xchg	al, [media_set_for_format] ; get current flag setting
 12738 00001107 08C0                    		or	al, al
 12739 00001109 7418                    		jz	short DontRestore
 12740 0000110B 56                      		push	si
 12741 0000110C 1E                      		push	ds
 12742 0000110D 06                      		push	es
 12743 0000110E C536[3106]              		lds	si, [tempdpt]
 12744                                  
 12745                                  		; 17/10/2022
 12746                                  		;mov	es, [cs:BIOSDATAWORD]
 12747                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12748                                  		;mov	es, [es:zeroseg]
 12749                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 12750                                  
 12751                                  		; 24/12/2023
 12752 00001112 31C0                    		xor	ax, ax
 12753 00001114 8EC0                    		mov	es, ax ; 0
 12754                                  
 12755                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 12756 00001116 2689367800              		mov	[es:DSKADR], si
 12757                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12758 0000111B 268C1E7A00              		mov	[es:DSKADR+2], ds
 12759 00001120 07                      		pop	es
 12760 00001121 1F                      		pop	ds
 12761 00001122 5E                      		pop	si
 12762                                  DontRestore:
 12763 00001123 58                      		pop	ax
 12764                                  		; 12/12/2022
 12765                                  		; cf=0
 12766                                  		;clc			;  Clear carry
 12767 00001124 C3                      		retn
 12768                                  
 12769                                  ; ---------------------------------------------------------------------------
 12770                                  
 12771                                  ; 16/10/2022
 12772                                  
 12773                                  ; ==========================================================================
 12774                                  ;	get media id
 12775                                  ; ==========================================================================
 12776                                  ;
 12777                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12778                                  ;	    the media that has the extended boot record.
 12779                                  ;	    for the conventional media,this routine will return "unknown
 12780                                  ;	    media type" error to dos.
 12781                                  ;
 12782                                  ; INPUT :   ES:di -> bds table for this drive.
 12783                                  ;
 12784                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12785                                  ;	    if carry set,then al contains the device driver error number
 12786                                  ;	    that will be returned to dos.
 12787                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12788                                  ;
 12789                                  ; SUBROUTINES TO BE CALLED:
 12790                                  ;	BootIo:NEAR
 12791                                  ;
 12792                                  ; LOGIC:
 12793                                  ;	to recognize the extended boot record,this logic will actually
 12794                                  ;	access the boot sector even if it is a hard disk.
 12795                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12796                                  ;	field of bpb and the extended boot signature.
 12797                                  ;
 12798                                  ; {
 12799                                  ;	get logical drive number from bds table;
 12800                                  ;	rFlag = read operation;
 12801                                  ;	BootIo;		 /*get the media boot record into the buffer
 12802                                  ;	if (no error) then
 12803                                  ;	     if (extended boot record) then
 12804                                  ;		{ set volume label,volume serial number and system id
 12805                                  ;		  of the request packet to those of the boot record;
 12806                                  ;		};
 12807                                  ;	     else		  /*not an extended bpb */
 12808                                  ;		{ set register al to "unknown media.." error code;
 12809                                  ;		  set carry bit;
 12810                                  ;		};
 12811                                  ;	else
 12812                                  ;	     ret;	/*already error code is set in the register al
 12813                                  ;
 12814                                  ; ==========================================================================
 12815                                  
 12816                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12817                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12818                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12819                                  
 12820                                  		; 24/12/2023
 12821                                  		; 19/10/2022
 12822                                  GetMediaId:
 12823 00001125 E89900                  		call	ChangeLineChk
 12824 00001128 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12825 0000112C C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12826 00001131 E87500                  		call	BootIo		; Read boot sector into	DiskSector
 12827 00001134 7224                    		jb	short IOCtl_If1
 12828                                  					; Valid? (0F0h-0FFh?)
 12829 00001136 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12830                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12831                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12832                                  		; 24/12/2023
 12833 0000113B 721B                    		jb	short IOCtl_If7	
 12834                                  
 12835                                  		; 10/12/2022
 12836 0000113D BE[7401]                		mov	si, disksector+26h
 12837 00001140 803C29                  		cmp	byte [si], 29h
 12838                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12839                                  					; EXT_BOOT_SIGNATURE
 12840 00001143 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12841 00001145 C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12842 00001149 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12843                                  		; 10/12/2022
 12844 0000114D 46                      		inc	si
 12845                                  		; si = disksector+27h 
 12846                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12847 0000114E 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12848                                  IOCtl_If4:		; 24/12/2023
 12849 00001151 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12850                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12851                                  					; +size_of_EXT_SYSTEM_ID
 12852 00001154 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12853                                  	
 12854                                  		; 10/12/2022
 12855                                  		; cf = 0
 12856                                  		;clc
 12857                                  
 12858 00001156 C3                      		retn
 12859                                  ; ---------------------------------------------------------------------------
 12860                                  
 12861                                  		; 24/12/2023
 12862                                  IOCtl_If2:
 12863 00001157 F9                      		stc	
 12864                                  IOCtl_If7:
 12865 00001158 B007                    		mov	al, 7		; error_unknown_media
 12866                                  		;stc
 12867                                  IOCtl_If6:
 12868                                  IOCtl_If1:
 12869 0000115A C3                      		retn
 12870                                  ; ---------------------------------------------------------------------------
 12871                                  
 12872                                  ; 16/10/2022
 12873                                  
 12874                                  ; ==========================================================================
 12875                                  ;  set media id
 12876                                  ; ==========================================================================
 12877                                  
 12878                                  ; function: set the volume label, the system id and the serial number of
 12879                                  ;	    the media that has the extended boot record.
 12880                                  ;	    for the conventional media, this routine will return "unknown
 12881                                  ;	    media.." error to dos.
 12882                                  ;	    this routine will also set the corresponding informations in
 12883                                  ;	    the bds table.
 12884                                  ;
 12885                                  ; input :   ES:di -> bds table for this drive.
 12886                                  ;
 12887                                  ; output:   the extended boot record in the media will be set according to
 12888                                  ;	    the request packet.
 12889                                  ;	    if carry set, then al contains the device driver error number
 12890                                  ;	    that will be returned to dos.
 12891                                  ;
 12892                                  ; subroutines to be called:
 12893                                  ;	BootIo:NEAR
 12894                                  ;
 12895                                  ; logic:
 12896                                  ;
 12897                                  ; {
 12898                                  ;	get drive_number from bds;
 12899                                  ;	rFlag = "read operation";
 12900                                  ;	BootIo;
 12901                                  ;	if (no error) then
 12902                                  ;	     if (extended boot record) then
 12903                                  ;		{ set volume label,volume serial number and system id
 12904                                  ;		  of the boot record to those of the request packet;
 12905                                  ;		  rFlag = "write operation";
 12906                                  ;		  get drive number from bds;
 12907                                  ;		  BootIo;	  /*write it back*/
 12908                                  ;		};
 12909                                  ;	     else		  /*not an extended bpb */
 12910                                  ;		{ set register al to "unknown media.." error code;
 12911                                  ;		  set carry bit;
 12912                                  ;		  ret;	 /*return back to caller */
 12913                                  ;		};
 12914                                  ;	else
 12915                                  ;	     ret;		 /*already error code is set */
 12916                                  ;
 12917                                  ; ==========================================================================
 12918                                  
 12919                                  		; 24/12/2023
 12920                                  		; 19/10/2022
 12921                                  SetMediaId:
 12922 0000115B E86300                  		call	ChangeLineChk
 12923 0000115E 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12924                                  					; Logical drive	number
 12925 00001162 88C2                    		mov	dl, al
 12926 00001164 C606[2001]02            		mov	byte [rflag], 2	; romread
 12927 00001169 52                      		push	dx
 12928 0000116A E83C00                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12929 0000116D 5A                      		pop	dx
 12930 0000116E 72EA                    		jb	short IOCtl_If6
 12931                                  					; Valid? (0F0h-0FFh?)
 12932 00001170 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12933                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12934 00001175 72E1                    		jb	short IOCtl_If7	; Brif not
 12935                                  		
 12936 00001177 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12937                                  					; EXT_BOOT_SIGNATURE
 12938                                  		;jnz	short IOCtl_If7	; not extended boot record
 12939                                  		; 24/12/2023
 12940 0000117C 75D9                    		jnz	short IOCtl_If2
 12941                                  
 12942 0000117E 06                      		push	es		; Save BDS pointer
 12943 0000117F 57                      		push	di
 12944 00001180 1E                      		push	ds		; Point	ES To boot record
 12945 00001181 07                      		pop	es
 12946 00001182 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12947 00001185 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12948 00001189 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12949 0000118C 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12950                                  
 12951                                  		; 24/12/2023
 12952                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12953                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 12954                                  		;			; +size_of_EXT_SYSTEM_ID
 12955                                  		;rep movsb
 12956 0000118F E8BFFF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 12957                                  
 12958 00001192 06                      		push	es		; point	ds back	to Bios_Data
 12959 00001193 1F                      		pop	ds
 12960 00001194 5F                      		pop	di		; restore bds pointer
 12961 00001195 07                      		pop	es
 12962 00001196 E892F5                  		call	mov_media_ids	; update the bds media id info.
 12963 00001199 88D0                    		mov	al, dl
 12964 0000119B C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12965 000011A0 E80600                  		call	BootIo		; write	it back.
 12966 000011A3 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12967                                  					; make sure chk_media check the driver
 12968                                  					; return with error code from BootIo
 12969 000011A8 C3                      		retn
 12970                                  ; ---------------------------------------------------------------------------
 12971                                  
 12972                                  		; 24/12/2023
 12973                                  ;IOCtl_If7:
 12974                                  ;		mov	al, 7		; error_unknown_media
 12975                                  ;		stc
 12976                                  ;IOCtl_If6:
 12977                                  ;		retn
 12978                                  
 12979                                  ; =============== S U B	R O U T	I N E =======================================
 12980                                  
 12981                                  ; 16/10/2022
 12982                                  
 12983                                  ; ---------------------------------------------------------------------------
 12984                                  ;	BootIo
 12985                                  ; ---------------------------------------------------------------------------
 12986                                  ;
 12987                                  ; function: read/write the boot record into boot sector.
 12988                                  ;
 12989                                  ; input :
 12990                                  ;	    al=logical drive number
 12991                                  ;	    rFlag = operation (read/write)
 12992                                  ;
 12993                                  ; output:   for read operation,the boot record of the drive specified in bds
 12994                                  ;	    be read into the DiskSector buffer.
 12995                                  ;	    for write operation,the DiskSector buffer image will be written
 12996                                  ;	    to the drive specified in bds.
 12997                                  ;	    if carry set,then al contains the device driver error number
 12998                                  ;	    that will be returned to dos.
 12999                                  ;	    AX,CX,DX register destroyed.
 13000                                  ;	    if carry set,then al will contain the error code from DiskIO.
 13001                                  ;
 13002                                  ; subroutines to be called:
 13003                                  ;	DiskIO:NEAR
 13004                                  ;
 13005                                  ; logic:
 13006                                  ;
 13007                                  ; {
 13008                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 13009                                  ;	sectorcount = 1;	 /*read 1 sector only */
 13010                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 13011                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 13012                                  ; }
 13013                                  ; ==========================================================================
 13014                                  
 13015                                  		; 19/10/2022
 13016                                  BootIo:	
 13017 000011A9 06                      		push	es
 13018 000011AA 57                      		push	di
 13019 000011AB 53                      		push	bx
 13020 000011AC 1E                      		push	ds
 13021 000011AD 07                      		pop	es		; Point ES: to Bios_Data
 13022                                  
 13023                                  		; Call DiskIO to read/write the boot sec. The parameters which
 13024                                  		; need to be initialized for this subroutine out here are
 13025                                  		; - Transfer address to Bios_Data:DiskSector
 13026                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 13027                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 13028                                  		; - Number of sectors <-- 1
 13029                                  
 13030 000011AE BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 13031 000011B1 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 13032 000011B3 8916[2405]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 13033 000011B7 B90100                  		mov	cx, 1
 13034 000011BA E8FCF6                  		call	diskio
 13035 000011BD 5B                      		pop	bx
 13036 000011BE 5F                      		pop	di
 13037 000011BF 07                      		pop	es
 13038 000011C0 C3                      		retn
 13039                                  
 13040                                  ; =============== S U B	R O U T	I N E =======================================
 13041                                  
 13042                                  ; 16/10/2022
 13043                                  
 13044                                  ; ---------------------------------------------------------------------------
 13045                                  ;	ChangeLineChk
 13046                                  ; ---------------------------------------------------------------------------
 13047                                  ;
 13048                                  ; when the user calls get/set media id call before dos establishes the media
 13049                                  ; by calling "media_chk",the change line activity of the drive is going to be
 13050                                  ; lost.	this routine will check the change line activity and will save the
 13051                                  ; history in the flags.
 13052                                  ;
 13053                                  ; FUNCTION: check the change line error activity
 13054                                  ;
 13055                                  ; INPUT :  ES:di -> bds table.
 13056                                  ;
 13057                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 13058                                  ;
 13059                                  ; SUBROUTINES TO BE CALLED:
 13060                                  ;	Set_Changed_DL
 13061                                  ;
 13062                                  ; ---------------------------------------------------------------------------
 13063                                  
 13064                                  ChangeLineChk:	
 13065 000011C1 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13066 000011C5 08D2                    		or	dl, dl		; Fixed	disk?
 13067 000011C7 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 13068                                  		; 12/12/2022
 13069 000011C9 26F6452304              		test	byte [es:di+23h], 4
 13070                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 13071                                  					; return_fake_bpb
 13072 000011CE 751A                    		jnz	short ChangeLnChkRet
 13073 000011D0 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 13074 000011D5 7513                    		jnz	short ChangeLnChkRet
 13075 000011D7 E8DD06                  		call	haschange	; This drive support change line?
 13076 000011DA 740E                    		jz	short ChangeLnChkRet ; Do nothing
 13077                                  
 13078                                  		; Execute the rom disk interrupt to check changeline activity.
 13079                                  
 13080 000011DC B416                    		mov	ah, 16h
 13081 000011DE CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13082                                  					; DL = drive to	check
 13083                                  					; Return: AH = disk change status
 13084 000011E0 7308                    		jnb	short ChangeLnChkRet
 13085 000011E2 53                      		push	bx
 13086 000011E3 BB4000                  		mov	bx, 40h		; fchanged
 13087                                  					; Update flag in BDS for this
 13088                                  					; physical drive
 13089 000011E6 E8A706                  		call	set_changed_dl
 13090 000011E9 5B                      		pop	bx
 13091                                  ChangeLnChkRet:				
 13092 000011EA C3                      		retn
 13093                                  
 13094                                  ; ---------------------------------------------------------------------------
 13095                                  
 13096                                  ; 16/10/2022
 13097                                  
 13098                                  ; ==========================================================================
 13099                                  ;	GetAccessFlag
 13100                                  ; ==========================================================================
 13101                                  ;
 13102                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 13103                                  ;
 13104                                  ; INPUT :
 13105                                  ;	    ES:di -> bds table
 13106                                  ;
 13107                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 13108                                  ;						 = 1 if disk i/o allowed.
 13109                                  ; ==========================================================================
 13110                                  
 13111                                  		; 19/10/2022
 13112                                  GetAccessFlag:
 13113 000011EB C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 13114 000011EF C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 13115                                  		;mov	al, 0		; Assume result	is unformatted
 13116                                  		; 10/12/2022
 13117 000011F2 28C0                    		sub	al, al
 13118                                  		; 10/12/2022
 13119 000011F4 26F6452402              		test	byte [es:di+36], 02h
 13120                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 13121                                  					; unformatted_media
 13122 000011F9 7501                    		jnz	short GafDone	; Done if unformatted
 13123                                  		;inc	al		; Return true for formatted
 13124                                  		; 24/12/2023
 13125 000011FB 40                      		inc	ax
 13126                                  GafDone:
 13127 000011FC 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 13128 000011FF C3                      		retn
 13129                                  ; ---------------------------------------------------------------------------
 13130                                  
 13131                                  ; 16/10/2022
 13132                                  
 13133                                  ; ==========================================================================
 13134                                  ;	SetAccessFlag
 13135                                  ; ==========================================================================
 13136                                  ;
 13137                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 13138                                  ;
 13139                                  ; input :
 13140                                  ;	    ES:di -> bds table
 13141                                  ;
 13142                                  ; output:   unformtted_media bit modified according to the user request
 13143                                  ; ==========================================================================
 13144                                  
 13145                                  		; 19/10/2022
 13146                                  SetAccessFlag:				
 13147 00001200 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 13148 00001204 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 13149                                  		; 10/12/2022
 13150 00001207 26806524FD              		and	byte [es:di+36], 0FDh
 13151                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 13152                                  					; ~unformatted_media
 13153 0000120C 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 13154 00001210 7505                    		jnz	short saf_Done
 13155                                  		; 10/12/2022
 13156 00001212 26804D2402              		or	byte [es:di+36], 02h
 13157                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 13158                                  					; unformatted_media
 13159                                  saf_Done:				
 13160 00001217 C3                      		retn
 13161                                  ; ---------------------------------------------------------------------------
 13162                                  
 13163                                  ; 16/10/2022
 13164                                  
 13165                                  ; ==========================================================================
 13166                                  ; Ioctl_Support_Query
 13167                                  ; ==========================================================================
 13168                                  ;
 13169                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 13170                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 13171                                  ; device attributes specifies if this function is supported.
 13172                                  ;
 13173                                  ; ==========================================================================
 13174                                  
 13175                                  		; 19/10/2022
 13176                                  ioctl_support_query:
 13177 00001218 06                      		push	es
 13178 00001219 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 13179 0000121D 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 13180                                  					; AL ==	Major, AH == Minor
 13181 00001221 3C08                    		cmp	al, 8		; IOC_DC
 13182                                  					; See if major code is 8
 13183 00001223 7513                    		jnz	short nosupport
 13184 00001225 0E                      		push	cs
 13185 00001226 07                      		pop	es
 13186 00001227 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 13187                                  		; 10/12/2022
 13188 0000122A BF[1D0C]                		mov	di, IOC_DC_Table
 13189                                  		;mov	di, 0C60h	; IOC_DC_Table
 13190                                  					; at 2C7h:0C60h	= 70h:31D0h
 13191 0000122D 86C4                    		xchg	al, ah		; Put minor code in AL
 13192 0000122F F2AE                    		repne scasb		; Scan for minor code in AL
 13193 00001231 7505                    		jnz	short nosupport	; it was not found
 13194 00001233 B80001                  		mov	ax, 100h
 13195                                  		; 10/12/2022
 13196                                  		; (jump to ioctlsupexit is not required)
 13197                                  		;jmp	short $+2	; ioctlsupexit
 13198                                  					; Signal ioctl is supported
 13199                                  		;;jmp	short ioctlsupexit
 13200                                  ; ---------------------------------------------------------------------------
 13201                                  ioctlsupexit:				
 13202 00001236 07                      		pop	es
 13203                                  		; 10/12/2022
 13204                                  		; cf = 0
 13205                                  		;clc
 13206 00001237 C3                      		retn
 13207                                  ; ---------------------------------------------------------------------------
 13208                                  nosupport:				
 13209 00001238 07                      		pop	es
 13210 00001239 E999EE                  		jmp	bc_cmderr
 13211                                  ; ---------------------------------------------------------------------------
 13212                                  
 13213                                  ; 16/10/2022
 13214                                  
 13215                                  ; ==========================================================================
 13216                                  ;	GetMediaSenseStatus
 13217                                  ; ==========================================================================
 13218                                  ;
 13219                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 13220                                  ;	    diskette drive and whether the media is the default type
 13221                                  ;	    for that drive. (default type means the max size for that
 13222                                  ;	    drive)
 13223                                  ;
 13224                                  ; INPUT :   ES:DI -> BDS table
 13225                                  ; OUTPUT:   If carry clear
 13226                                  ;	    DS:BX -> Updated IOCtlPacket
 13227                                  ;
 13228                                  ;			 Special Function at offset 0:
 13229                                  ;				0	- Media detected is not default type
 13230                                  ;				1	- Media detected is default type
 13231                                  ;
 13232                                  ;			 Device Type at offset 1:
 13233                                  ;				2       - 720K 3.5" 80 tracks
 13234                                  ;				7	- 1.44M 3.5" 80 tracks
 13235                                  ;				9	- 2.88M 3.5" 80 tracks
 13236                                  ;
 13237                                  ; Error Codes returned in AX if carry set:
 13238                                  ;
 13239                                  ; 8102 - Drive not ready	- No disk is in the drive.
 13240                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 13241                                  ;				  the media is really unkown, any error
 13242                                  ;				  other than "media not present"
 13243                                  ; 
 13244                                  ; ==========================================================================
 13245                                  
 13246                                  		; 19/10/2022
 13247                                  SenseMediaType:				
 13248 0000123C C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 13249 00001240 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 13250                                  		; 10/10/2022
 13251                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 13252 00001243 31D2                    		xor	dx, dx
 13253 00001245 8917                    		mov	[bx], dx ; 0
 13254                                  		;
 13255 00001247 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13256                                  					; Get int 13h drive number from	BDS
 13257                                  		; 10/12/2022
 13258                                  		;xor	dh, dh		; DX = physical	drive number
 13259 0000124B B420                    		mov	ah, 20h		; Get Media Type function
 13260                                  					; If no	carry media type in AL
 13261 0000124D CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 13262 0000124F 7216                    		jb	short MediaSenseEr ; error code	in AH
 13263 00001251 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 13264                                  DetermineMediaType:			
 13265 00001253 FEC8                    		dec	al
 13266 00001255 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 13267 00001257 740A                    		jz	short GotMediaType
 13268 00001259 0404                    		add	al, 4
 13269 0000125B 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 13270 0000125D 7404                    		jz	short GotMediaType
 13271 0000125F 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 13272 00001261 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 13273                                  GotMediaType:				
 13274 00001263 884701                  		mov	[bx+1],	al	; Save the return value
 13275                                  		; 10/12/2022
 13276                                  		; cf = 0
 13277                                  		;clc			; Signal success
 13278 00001266 C3                      		retn
 13279                                  ; ---------------------------------------------------------------------------
 13280                                  
 13281                                  MediaSenseEr:				
 13282 00001267 80FC32                  		cmp	ah, 32h		; See if not default media error
 13283 0000126A 74E7                    		jz	short DetermineMediaType ; Not really an error
 13284 0000126C B002                    		mov	al, 2		; Now assume drive not ready
 13285 0000126E 80FC31                  		cmp	ah, 31h		; See if media was present
 13286 00001271 7402                    		jz	short SenseErrExit ; Return drive not ready
 13287                                  UnknownMediaType:			
 13288 00001273 B007                    		mov	al, 7		; Just don't know the media type
 13289                                  SenseErrExit:				
 13290 00001275 B481                    		mov	ah, 81h		; Signal error return
 13291 00001277 F9                      		stc
 13292 00001278 C3                      		retn
 13293                                  
 13294                                  ; ---------------------------------------------------------------------------
 13295                                  		; 10/12/2022
 13296                                  		;db    0
 13297                                  ; ---------------------------------------------------------------------------
 13298                                  
 13299                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13300                                  
 13301                                  ;-----------------------------------------------------------------------------
 13302                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 13303                                  ;-----------------------------------------------------------------------------
 13304                                  ; 16/03/2019 - Retro DOS v4.0
 13305                                  
 13306                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 13307                                  ;	after booting. this allows testing and implementation of custom int_13
 13308                                  ;	handlers, without giving up ms-dos error recovery
 13309                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 13310                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 13311                                  ;	exit:	orig13	== address of new int_13 handler
 13312                                  ;		ds:dx	== old orig13 value
 13313                                  ;		es:bx	== old old13  value
 13314                                  ;
 13315                                  ; int 2f handler for external block drivers to communicate with the internal
 13316                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 13317                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 13318                                  ; dsk_entry, the entry point for all disk requests.
 13319                                  ;
 13320                                  ; on exit from this driver, we will return to the external driver
 13321                                  ; that issued this int 2f, and can then remove the flags from the stack.
 13322                                  ; this scheme allows us to have a small external device driver, and makes
 13323                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 13324                                  ; since we only need to make changes in one place (most of the time).
 13325                                  ;
 13326                                  ;   ax=800h - check for installed handler - reserved
 13327                                  ;   ax=801h - install the bds into the linked list
 13328                                  ;   ax=802h - dos request
 13329                                  ;   ax=803h - return bds table starting pointer in ds:di
 13330                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 13331                                  ;	    problem. bds table is going to be used to get head/sector
 13332                                  ;	    informations without calling generic ioctl get device parm call.)
 13333                                  
 13334                                  ;BIOSSEGMENT equ 70h
 13335                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 13336                                  
 13337                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 13338                                  
 13339                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 13340 00001279 80FC13                  		cmp	ah, 13h
 13341 0000127C 7413                    		jz	short int2f_replace_int13
 13342 0000127E 80FC08                  		cmp	ah, 8
 13343 00001281 7431                    		jz	short mine
 13344                                  
 13345                                  ; Check for WIN386 startup and return the BIOS instance data
 13346                                  
 13347 00001283 80FC16                  		cmp	ah, 16h		; MultWin386
 13348 00001286 746C                    		jz	short win386call
 13349 00001288 80FC4A                  		cmp	ah, 4Ah		; multMULT
 13350 0000128B 7503                    		jnz	short i2f_handler_iret
 13351 0000128D E99700                  		jmp	handle_multmult
 13352                                  ; ---------------------------------------------------------------------------
 13353                                  
 13354                                  i2f_handler_iret:			
 13355 00001290 CF                      		iret
 13356                                  ; ---------------------------------------------------------------------------
 13357                                  
 13358                                  int2f_replace_int13:			
 13359 00001291 50                      		push	ax	; free up a register for caller's ds
 13360 00001292 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 13361                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 13362                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13363                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13364 00001294 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 13365                                  		; 19/10/2022
 13366                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 13367                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 13368                                  		;push	word ptr ds:Old13	; return them to caller
 13369                                  		;push	word ptr ds:Old13+2
 13370                                  		
 13371                                  		; 02/09/2023 (PCDOS 7.1)
 13372                                  		;push	word [Orig13]
 13373 00001299 FF36[B600]              		push	word [Orig13+2]
 13374                                  		;push	word [Old13]
 13375 0000129D FF36[0801]              		push	word [Old13+2]
 13376                                  
 13377                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 13378                                  		;mov	word ptr ds:Orig13+2, ax
 13379                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 13380                                  		;mov	word ptr ds:Old13+2, es
 13381                                  		
 13382                                  		;mov	[Orig13], dx
 13383                                  		; 02/09/2023
 13384 000012A1 8716[B400]              		xchg	dx, [Orig13]
 13385 000012A5 A3[B600]                		mov	[Orig13+2], ax
 13386                                  		;mov	[Old13], bx
 13387                                  		; 02/09/2023
 13388 000012A8 871E[0601]              		xchg	bx, [Old13]
 13389 000012AC 8C06[0801]              		mov	[Old13+2], es
 13390                                  
 13391 000012B0 07                      		pop	es			; es:bx := old old13 vector
 13392                                  		; 02/09/2023
 13393                                  		;pop	bx
 13394 000012B1 1F                      		pop	ds			; ds:dx := old orig13 vector
 13395                                  		;pop	dx ; 02/09/2023
 13396 000012B2 58                      		pop	ax
 13397                                  i2f_iret:
 13398 000012B3 CF                      		iret
 13399                                  ; ---------------------------------------------------------------------------
 13400                                  
 13401                                  mine:					
 13402 000012B4 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 13403 000012B6 73FB                    		jnb	short i2f_iret
 13404 000012B8 08C0                    		or	al, al			; a get installed state request?
 13405 000012BA 7503                    		jnz	short disp_func
 13406 000012BC B0FF                    		mov	al, 0FFh
 13407                                  		;jmp	short i2f_iret
 13408                                  		; 02/09/2023
 13409 000012BE CF                      		iret
 13410                                  ; ---------------------------------------------------------------------------
 13411                                  
 13412                                  disp_func:				
 13413 000012BF 3C01                    		cmp	al, 1			; request for installing bds?
 13414 000012C1 7418                    		jz	short do_subfun_01
 13415 000012C3 3C03                    		cmp	al, 3			; get bds vector?
 13416 000012C5 7423                    		jz	short do_get_bds_vector
 13417                                  
 13418                                  ; set up pointer to request packet
 13419                                  
 13420 000012C7 1E                      		push	ds
 13421 000012C8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 13422                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13423                                  					; = [0070h:25A0h] = [02C7h:0030h]
 13424                                  		; 19/10/2022
 13425                                  		;mov	word ptr ds:ptrsav, bx
 13426                                  		;mov	word ptr ds:ptrsav+2, es
 13427 000012CD 891E[1200]              		mov	[ptrsav], bx
 13428 000012D1 8C06[1400]              		mov	[ptrsav+2], es
 13429 000012D5 1F                      		pop	ds
 13430                                  		;jmp	far ptr	i2f_dskentry
 13431                                  		; 17/10/2022
 13432                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 13433 000012D6 EA[8D08]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 13434                                  					; NOTE: jump to a FAR function, not an
 13435                                  					;  IRET type function. Callers of
 13436                                  					;  this int2f subfunction will have
 13437                                  					;  to be careful to do a popf
 13438                                  
 13439                                  ; ---------------------------------------------------------------------------
 13440                                  
 13441                                  do_subfun_01:
 13442 000012DB 06                      		push	es
 13443 000012DC 1E                      		push	ds
 13444 000012DD 1E                      		push	ds
 13445 000012DE 07                      		pop	es
 13446                                  		; 17/10/2022
 13447 000012DF 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 13448                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13449                                  					; point	ds: -> Bios_Data
 13450 000012E4 E8BC03                  		call	install_bds
 13451 000012E7 1F                      		pop	ds
 13452 000012E8 07                      		pop	es
 13453                                  		;jmp	short i2f_iret
 13454                                  		; 02/09/2023
 13455 000012E9 CF                      		iret
 13456                                  ; ---------------------------------------------------------------------------
 13457                                  
 13458                                  do_get_bds_vector:
 13459                                  		; 17/10/2022
 13460 000012EA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 13461                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13462 000012EF C53E[1901]              		lds	di, [start_bds]
 13463                                  		;lds	di, ds:start_bds
 13464                                  ;ii2f_iret:	; 10/12/2022
 13465                                  		;jmp	short i2f_iret
 13466                                  		; 02/09/2023
 13467 000012F3 CF                      		iret
 13468                                  ; ---------------------------------------------------------------------------
 13469                                  
 13470                                  ; 17/10/2022
 13471                                  ; 16/10/2022
 13472                                  
 13473                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 13474                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 13475                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 13476                                  
 13477                                  win386call:				
 13478 000012F4 1E                      		push	ds
 13479 000012F5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13480                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13481                                  					; at 2C7h:30h =	70h:25A0h
 13482 000012FA 3C05                    		cmp	al, 5		; Win386_Init
 13483                                  					; is it	win386 initializing?
 13484 000012FC 7410                    		jz	short Win386Init
 13485 000012FE 3C06                    		cmp	al, 6		; Win386_Exit
 13486                                  					; is it	win386 exiting?
 13487 00001300 7523                    		jnz	short win_iret	; if not, continue int2f chain
 13488                                  		; 12/12/2022
 13489 00001302 F6C201                  		test	dl, 1
 13490                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 13491 00001305 751E                    		jnz	short win_iret	; if not win386, then continue
 13492                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 13493 00001307 8026[C508]00            		and	byte [IsWin386], 0 
 13494 0000130C EB17                    		jmp	short win_iret
 13495                                  ; ---------------------------------------------------------------------------
 13496                                  
 13497                                  Win386Init:	
 13498                                  		; 12/12/2022
 13499 0000130E F6C201                  		test	dl, 1			
 13500                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 13501 00001311 7512                    		jnz	short win_iret	; if not win386, then continue
 13502                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 13503 00001313 800E[C508]01            		or	byte [IsWin386], 1
 13504                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 13505                                  		;mov	word ptr ds:SI_Next+2, es
 13506 00001318 891E[9308]              		mov	[SI_Next], bx
 13507 0000131C 8C06[9508]              		mov	[SI_Next+2], es
 13508                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 13509 00001320 BB[9108]                		mov	bx, Win386_SI	; 19/10/2022
 13510 00001323 1E                      		push	ds
 13511 00001324 07                      		pop	es
 13512                                  win_iret:				
 13513 00001325 1F                      		pop	ds
 13514                                  ii2f_iret:	; 10/12/2022
 13515                                  		;jmp	short i2f_iret	; return back up the chain
 13516                                  		; 02/09/2023
 13517 00001326 CF                      		iret
 13518                                  ; ---------------------------------------------------------------------------
 13519                                  
 13520                                  handle_multmult:			
 13521 00001327 3C01                    		cmp	al, 1
 13522 00001329 7514                    		jnz	short try_2
 13523 0000132B 1E                      		push	ds
 13524 0000132C E84500                  		call	HMAPtr		; get offset of free HMA
 13525                                  		; 10/12/2022
 13526                                  		;xor	bx, bx
 13527                                  		;dec	bx
 13528 0000132F BBFFFF                  		mov	bx, 0FFFFh
 13529 00001332 8EC3                    		mov	es, bx		; seg of HMA
 13530 00001334 89FB                    		mov	bx, di
 13531 00001336 F7D3                    		not	bx
 13532 00001338 09DB                    		or	bx, bx
 13533 0000133A 7401                    		jz	short try_1
 13534 0000133C 43                      		inc	bx
 13535                                  try_1:
 13536 0000133D 1F                      		pop	ds
 13537                                  		;jmp	short ii2f_iret
 13538                                  		; 02/09/2023
 13539 0000133E CF                      		iret
 13540                                  ; ---------------------------------------------------------------------------
 13541                                  
 13542                                  try_2:					
 13543 0000133F 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 13544 00001341 7530                    		jnz	short try_3
 13545 00001343 1E                      		push	ds
 13546                                  		; 10/12/2022
 13547                                  		;xor	di, di
 13548                                  		;dec	di
 13549 00001344 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 13550 00001347 8EC7                    		mov	es, di
 13551 00001349 E82800                  		call	HMAPtr		; get offset of free HMA
 13552 0000134C 83FFFF                  		cmp	di, 0FFFFh
 13553 0000134F 7421                    		jz	short InsuffHMA
 13554 00001351 F7DF                    		neg	di		; free space in HMA
 13555 00001353 39FB                    		cmp	bx, di
 13556 00001355 7605                    		jbe	short try_4
 13557                                  		; 10/12/2022
 13558                                  		;sub	di, di
 13559                                  		;dec	di
 13560 00001357 BFFFFF                  		mov	di, 0FFFFh
 13561                                  		;jmp	short InsuffHMA
 13562                                  		; 02/09/2023
 13563 0000135A 1F                      		pop	ds
 13564 0000135B CF                      		iret
 13565                                  ; ---------------------------------------------------------------------------
 13566                                  
 13567                                  try_4:					
 13568                                  		;mov	di, ds:FreeHMAPtr
 13569 0000135C 8B3E[EB08]              		mov	di, [FreeHMAPtr]
 13570 00001360 83C30F                  		add	bx, 15
 13571                                  		;and	bx, 0FFF0h
 13572                                  		; 10/12/2022
 13573 00001363 80E3F0                  		and	bl, 0F0h
 13574                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 13575 00001366 011E[EB08]              		add	[FreeHMAPtr], bx
 13576 0000136A 7506                    		jnz	short InsuffHMA
 13577 0000136C C706[EB08]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 13578                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 13579                                  					; no more HMA if we have wrapped
 13580                                  InsuffHMA:
 13581 00001372 1F                      		pop	ds
 13582                                  		; 10/12/2022
 13583                                  try_3:		
 13584                                  		;jmp	short ii2f_iret
 13585                                  		; 02/09/2023
 13586 00001373 CF                      		iret
 13587                                  ; ---------------------------------------------------------------------------
 13588                                  
 13589                                  		; 10/12/2022
 13590                                  ;try_3:					
 13591                                  		;jmp	ii2f_iret
 13592                                  
 13593                                  ; =============== S U B	R O U T	I N E =======================================
 13594                                  
 13595                                  ; 16/10/2022
 13596                                  
 13597                                  ;--------------------------------------------------------------------------
 13598                                  ;
 13599                                  ; procedure : HMAPtr
 13600                                  ;
 13601                                  ;		Gets the offset of the free HMA area ( with respect to
 13602                                  ;							seg ffff )
 13603                                  ;		If DOS has not moved high, tries to move DOS high.
 13604                                  ;		In the course of doing this, it will allocate all the HMA
 13605                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 13606                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 13607                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 13608                                  ;
 13609                                  ;	RETURNS : offset of free HMA in DI
 13610                                  ;		  BIOS_DATA, seg in DS
 13611                                  ;
 13612                                  ;--------------------------------------------------------------------------
 13613                                  
 13614                                  		; 17/10/2022
 13615                                  HMAPtr:
 13616 00001374 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13617                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13618 00001379 8B3E[EB08]              		mov	di, [FreeHMAPtr]
 13619                                  		;mov	di, ds:FreeHMAPtr
 13620 0000137D 83FFFF                  		cmp	di, 0FFFFh
 13621 00001380 750F                    		jnz	short HMAPtr_retn
 13622 00001382 803E[F108]00            		cmp	byte [SysinitPresent], 0
 13623                                  		;cmp	ds:SysinitPresent, 0
 13624 00001387 7408                    		jz	short HMAPtr_retn
 13625 00001389 FF1E[ED08]              		call	far [MoveDOSIntoHMA]
 13626                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 13627 0000138D 8B3E[EB08]              		mov	di, [FreeHMAPtr]
 13628                                  		;mov	di, ds:FreeHMAPtr
 13629                                  HMAPtr_retn:				
 13630 00001391 C3                      		retn
 13631                                  
 13632                                  ; =============== S U B	R O U T	I N E =======================================
 13633                                  
 13634                                  ; 16/10/2022
 13635                                  
 13636                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 13637                                  ; but go ahead and update direction flag, si, & di
 13638                                  
 13639                                  move_sector:
 13640                                  
 13641                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 13642                                  ; any segment to be a fault. Theoretically, this could be handled
 13643                                  ; by the fault handler and the behavior of an 8086 could be emulated
 13644                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 13645                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 13646                                  ; also handles the fault incorrectly in their ROM BIOS for real
 13647                                  ; mode. Their fault handler was only designed to deal with one
 13648                                  ; special case which occurred in a magazine benchmark, but didn't
 13649                                  ; handle the general case worth beans.
 13650                                  ;
 13651                                  ; Simply changing this code to do a byte loop would work okay but
 13652                                  ; would involve a general case performance hit. Therefore, we'll
 13653                                  ; check for either source or destination offsets being within one
 13654                                  ; sector of the end of their segments and only in that case fall
 13655                                  ; back to a byte move.
 13656                                  
 13657 00001392 FC                      		cld
 13658 00001393 51                      		push	cx
 13659 00001394 B90001                  		mov	cx, 256
 13660 00001397 81FE00FE                		cmp	si, 0FE00h
 13661 0000139B 770A                    		ja	short movsec_bytes
 13662 0000139D 81FF00FE                		cmp	di, 0FE00h
 13663 000013A1 7704                    		ja	short movsec_bytes
 13664 000013A3 F3A5                    		rep movsw
 13665 000013A5 59                      		pop	cx
 13666 000013A6 C3                      		retn
 13667                                  ; ---------------------------------------------------------------------------
 13668                                  
 13669                                  movsec_bytes:				
 13670 000013A7 D1E1                    		shl	cx, 1
 13671 000013A9 F3A4                    		rep movsb
 13672 000013AB 59                      		pop	cx
 13673 000013AC C3                      		retn
 13674                                  
 13675                                  ; =============== S U B	R O U T	I N E =======================================
 13676                                  
 13677                                  ; 16/10/2022
 13678                                  
 13679                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 13680                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 13681                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 13682                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 13683                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 13684                                  ; but we break down a request when we get an ecc or dma error into several
 13685                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 13686                                  ; number of sectors on a track on the medium, and the request would fail.
 13687                                  ;
 13688                                  ; input conditions:
 13689                                  ;	all registers set up for an int 13 request.
 13690                                  ;
 13691                                  ; output:
 13692                                  ;	dh - contains starting head number for request
 13693                                  ;	cx - contains starting sector and cylinder numbers
 13694                                  ;	(the above may or may not have been changed, and are 0-based)
 13695                                  ;	all other registers preserved.
 13696                                  
 13697                                  check_wrap:	
 13698 000013AD 50                      		push	ax
 13699 000013AE 53                      		push	bx
 13700 000013AF 06                      		push	es
 13701 000013B0 57                      		push	di
 13702 000013B1 E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 13703 000013B4 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 13704                                  		; 12/12/2022
 13705 000013B6 26F6452301              		test	byte [es:di+23h], 1
 13706                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13707 000013BB 7457                    		jz	short no_wrap	; no wrapping for removable media
 13708 000013BD 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13709 000013C1 89C8                    		mov	ax, cx
 13710 000013C3 83E03F                  		and	ax, 3Fh		; extract sector number
 13711 000013C6 39D8                    		cmp	ax, bx		; are we going to wrap?
 13712 000013C8 764A                    		jbe	short no_wrap
 13713 000013CA F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13714                                  
 13715                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13716                                  ; last sector on that track.
 13717                                  
 13718 000013CC 08E4                    		or	ah, ah
 13719 000013CE 7503                    		jnz	short not_on_bound
 13720                                  		; 18/12/2022
 13721 000013D0 48                      		dec	ax ; *
 13722 000013D1 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13723                                  					; if on	boundary
 13724                                  		;dec	al ; *		; also decrement # of head wraps
 13725                                  not_on_bound:				
 13726 000013D3 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13727 000013D6 08E1                    		or	cl, ah		; or in	new sector #
 13728 000013D8 30E4                    		xor	ah, ah		; ax = # of head wraps
 13729 000013DA 40                      		inc	ax
 13730 000013DB 00F0                    		add	al, dh		; add in starting head #
 13731 000013DD 80D400                  		adc	ah, 0		; catch	any carry
 13732                                  		; 02/09/2023
 13733 000013E0 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13734 000013E4 39D8                    		cmp	ax, bx
 13735                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13736                                  					; are we going to wrap around a	head?
 13737 000013E6 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13738 000013E8 52                      		push	dx		; preserve drive number and head number
 13739 000013E9 31D2                    		xor	dx, dx
 13740                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13741 000013EB F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13742                                  
 13743                                  ; careful here! if new head # is 0, then we are on the last head.
 13744                                  
 13745 000013ED 09D2                    		or	dx, dx
 13746 000013EF 7507                    		jnz	short no_head_bound
 13747 000013F1 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13748                                  
 13749                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13750                                  
 13751 000013F3 09C0                    		or	ax, ax
 13752 000013F5 7401                    		jz	short no_head_bound
 13753 000013F7 48                      		dec	ax		; reduce number	of cylinder wraps
 13754                                  no_head_bound:				
 13755 000013F8 88D7                    		mov	bh, dl		; bh has new head number
 13756 000013FA 5A                      		pop	dx		; restore drive number and head number
 13757 000013FB FECF                    		dec	bh		; get it 0-based
 13758 000013FD 88FE                    		mov	dh, bh		; set up new head number in dh
 13759 000013FF 88CF                    		mov	bh, cl
 13760 00001401 80E73F                  		and	bh, 3Fh		; preserve sector number
 13761 00001404 B306                    		mov	bl, 6
 13762 00001406 86CB                    		xchg	cl, bl
 13763 00001408 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13764 0000140A 00C5                    		add	ch, al		; add in cylinder wrap
 13765 0000140C 10E3                    		adc	bl, ah		; add in high byte
 13766 0000140E D2E3                    		shl	bl, cl		; move up to ms	end
 13767 00001410 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13768 00001412 08F9                    		or	cl, bh		; or in	sector number
 13769                                  no_wrap:				
 13770 00001414 F8                      		clc
 13771 00001415 5F                      		pop	di
 13772 00001416 07                      		pop	es
 13773 00001417 5B                      		pop	bx
 13774 00001418 58                      		pop	ax
 13775 00001419 C3                      		retn
 13776                                  ; ---------------------------------------------------------------------------
 13777                                  
 13778                                  no_wrap_head:				
 13779 0000141A 88C6                    		mov	dh, al		; do not lose new head number
 13780 0000141C FECE                    		dec	dh		; get it 0-based
 13781 0000141E EBF4                    		jmp	short no_wrap
 13782                                  
 13783                                  ; =============== S U B	R O U T	I N E =======================================
 13784                                  
 13785                                  ; 16/10/2022
 13786                                  
 13787                                  ; this is a special version of the bds lookup code which is
 13788                                  ; based on physical drives rather than the usual logical drives
 13789                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13790                                  ; otherwise carry is clear
 13791                                  ;
 13792                                  ; guaranteed to trash no registers except es:di
 13793                                  
 13794                                  		; 19/10/2022
 13795                                  find_bds:	
 13796 00001420 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13797                                  fbds_1:					
 13798 00001424 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13799 00001428 7409                    		jz	short fdbs_2
 13800 0000142A 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13801                                  					; go to next bds
 13802 0000142D 83FFFF                  		cmp	di, 0FFFFh
 13803 00001430 75F2                    		jnz	short fbds_1
 13804 00001432 F9                      		stc
 13805                                  fdbs_2:					
 13806 00001433 C3                      		retn
 13807                                  
 13808                                  ; =============== S U B	R O U T	I N E =======================================
 13809                                  
 13810                                  ; 16/10/2022
 13811                                  		; 17/10/2022
 13812                                  doint:
 13813                                  		; 10/12/2022
 13814 00001434 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13815                                  					; get physical drive number
 13816                                  		; 19/10/2022 - Temporary !
 13817                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13818                                  		
 13819 00001437 30E4                    		xor	ah, ah
 13820 00001439 08C0                    		or	al, al
 13821 0000143B 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13822                                  		; 10/12/2022
 13823 0000143D 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13824                                  					; get request code
 13825                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13826 00001440 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13827                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13828 00001443 9D                      		popf
 13829                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13830                                  		; 17/10/2022
 13831 00001444 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 13832                                  		;;call	call_orig13	; call far 70h:797h
 13833                                  					; call far KERNEL_SEGMENT:call_orig13
 13834 00001449 9C                      		pushf
 13835                                  		; 10/12/2022
 13836 0000144A 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13837                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13838                                  dointdone:				
 13839 0000144D C3                      		retn
 13840                                  
 13841                                  ;----------------------------------------------------------------------------
 13842                                  
 13843                                  ; 16/10/2022
 13844                                  
 13845                                  ; this is the true int 13 handler. we parse the request to see if there is
 13846                                  ; a dma violation. if so, depending on the function, we:
 13847                                  ;   read/write break the request into three pieces and move the middle one
 13848                                  ;	       into our internal buffer.
 13849                                  ;
 13850                                  ;   format     copy the format table into the buffer
 13851                                  ;   verify     point the transfer address into the buffer
 13852                                  ;
 13853                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13854                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13855                                  ; the offending sector into the buffer below and do the i/o from there.
 13856                                  
 13857                                  ;struc INT13FRAME
 13858                                  ;.oldbp: resw
 13859                                  ;.oldax: resw 
 13860                                  ;.oldbx: resw
 13861                                  ;.oldcx: resw
 13862                                  ;.olddx: resw
 13863                                  ;.oldds: resw	; now we save caller's ds, too
 13864                                  ;.olddd: resd
 13865                                  ;.oldf:	resw
 13866                                  ;end struc
 13867                                  
 13868                                  ;----------------------------------------------------------------------------
 13869                                  
 13870                                  ;   entry conditions:
 13871                                  ;	ah = function
 13872                                  ;	al = number of sectors
 13873                                  ;	es:bx = dma address
 13874                                  ;	cx = packed track and sector
 13875                                  ;	dx = head and drive
 13876                                  ;   output conditions:
 13877                                  ;	no dma violation.
 13878                                  
 13879                                  ;	use extreme caution when working with this code. In general,
 13880                                  ;	  all registers are hot at all times.
 13881                                  ;
 13882                                  ;	question:  does this code handle cases where dma errors
 13883                                  ;	  occur during ecc retries, and where ecc errors occur during
 13884                                  ;	  dma breakdowns???? Hmmmmm.
 13885                                  
 13886                                  ;----------------------------------------------------------------------------
 13887                                  
 13888                                  ; ---------------------------------------------------------------------------
 13889                                  
 13890 0000144E 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13891                                  
 13892                                  ; 17/10/2022
 13893                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13894                                  ; 09/12/2022
 13895                                  DTYPEARRAY equ dtype_array
 13896                                  
 13897                                  ; ---------------------------------------------------------------------------
 13898                                  
 13899                                  ; stick some special stuff out of mainline
 13900                                  
 13901                                  ; we know we're doing a format command. if we have changeline
 13902                                  ; support, then flag some special changed stuff and set changed
 13903                                  ; by format bit for all logical drives using this physical drive
 13904                                  
 13905                                  format_special_stuff:
 13906 00001452 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 13907 00001457 7459                    		jz	short format_special_stuff_done ; brif not
 13908 00001459 53                      		push	bx
 13909 0000145A BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13910 0000145D E83004                  		call	set_changed_dl	; indicate that media changed by format
 13911 00001460 5B                      		pop	bx
 13912 00001461 EB4F                    		jmp	short format_special_stuff_done
 13913                                  ; ---------------------------------------------------------------------------
 13914                                  
 13915                                  ; 16/10/2022
 13916                                  
 13917                                  ; we know we've got ec35's on the system. Now see if we're doing
 13918                                  ; a floppy. If so, create a mask and see if this particular
 13919                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13920                                  
 13921                                  		; 19/10/2022
 13922                                  ec35_special_stuff:
 13923 00001463 84D2                    		test	dl, dl		; floppy or hard disk?
 13924 00001465 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13925 00001467 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13926 00001468 51                      		push	cx
 13927 00001469 88D1                    		mov	cl, dl		; turn drive number into bit map
 13928 0000146B B001                    		mov	al, 1		; assume drive 0
 13929 0000146D D2E0                    		shl	al, cl		; shift	over correct number of times
 13930 0000146F 8406[2805]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13931 00001473 59                      		pop	cx
 13932 00001474 58                      		pop	ax
 13933 00001475 7442                    		jz	short ec35_special_stuff_done
 13934                                  					; done if this floppy is not an	ec35
 13935 00001477 53                      		push	bx		; free up a far	pointer	(es:bx)
 13936 00001478 06                      		push	es
 13937                                  		; 17/10/2022
 13938 00001479 2EC41E[4E14]            		les	bx, [cs:DTYPEARRAY]
 13939                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13940                                  					; 0070h:3A65h =	2C7h:14F5h
 13941 0000147E 00D3                    		add	bl, dl
 13942 00001480 80D700                  		adc	bh, 0		; find entry for this drive
 13943 00001483 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13944                                  					; (360k	disk in	360k drive,
 13945                                  					; no double-stepping, 250 kbs transfer rate)
 13946 00001487 07                      		pop	es
 13947 00001488 5B                      		pop	bx
 13948 00001489 EB2E                    		jmp	short ec35_special_stuff_done
 13949                                  ; ---------------------------------------------------------------------------
 13950                                  
 13951                                  ; 16/10/2022
 13952                                  
 13953                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13954                                  ; this function does not reset the common buses after the execution.
 13955                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13956                                  ; will issue ah=1 (read status) call to reset the buses.
 13957                                  
 13958                                  ps2_special_stuff:
 13959 0000148B 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13960                                  					; read driver parm ?
 13961 00001490 7407                    		jz	short ps2_30_problem
 13962 00001492 803E[1E00]15            		cmp	byte [prevoper], 15h
 13963                                  					; apparently function 15h fails, too
 13964 00001497 752D                    		jnz	short ps2_special_stuff_done
 13965                                  ps2_30_problem:
 13966 00001499 50                      		push	ax
 13967 0000149A B401                    		mov	ah, 1
 13968                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13969                                  		; 17/10/2022
 13970 0000149C 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 13971                                  		;call	call_orig13	; call far 70:797h
 13972                                  					; call far KERNEL_SEGMENT:call_orig13
 13973 000014A1 58                      		pop	ax
 13974 000014A2 EB22                    		jmp	short ps2_special_stuff_done
 13975                                  ; ---------------------------------------------------------------------------
 13976                                  
 13977                                  ; 17/10/2022
 13978                                  ; 16/10/2022
 13979                                  
 13980                                  ; here is the actual int13 handler
 13981                                  
 13982                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13983                                  
 13984                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13985                                  ; vectoring up here from Bios_Data
 13986                                  
 13987                                  		; 19/10/2022
 13988 000014A4 1E                      		push	ds		; save caller's ds register first thing
 13989                                  		;;mov	ds, word [cs:0030h]
 13990                                  					; and set up our own ds -> Bios_Data
 13991 000014A5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13992                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13993                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13994                                  
 13995                                  ; let the operation proceed. if there is a dma violation, then we do things
 13996                                  
 13997 000014AA A3[1E00]                		mov	[prevoper], ax	; save request
 13998 000014AD 80FC05                  		cmp	ah, 5		; romformat
 13999 000014B0 74A0                    		jz	short format_special_stuff
 14000                                  					; go do special stuff for format
 14001                                  format_special_stuff_done:
 14002 000014B2 803E[2805]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 14003 000014B7 75AA                    		jnz	short ec35_special_stuff
 14004                                  					; go handle it out of line if so
 14005                                  ec35_special_stuff_done:
 14006                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 14007 000014B9 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14008                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14009                                  		
 14010 000014BE 9C                      		pushf			; save result flags
 14011                                  		
 14012 000014BF 803E[3506]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 14013                                  					; mdl_ps2_30
 14014 000014C4 74C5                    		jz	short ps2_special_stuff
 14015                                  					; exit mainline to address special
 14016                                  ps2_special_stuff_done:			; ps2/30 problem if so
 14017 000014C6 9D                      		popf
 14018 000014C7 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 14019                                  ret_from_i13:
 14020 000014C9 1F                      		pop	ds
 14021 000014CA CA0200                  		retf	2		; restore ds &	iret w/flags
 14022                                  ; ---------------------------------------------------------------------------
 14023                                  
 14024                                  ; most of our code exits through here. If carry isn't set, then
 14025                                  ; just do a simple exit. Else doublecheck that we aren't getting
 14026                                  ; a changeline error.
 14027                                  
 14028                                  i13ret_ck_chglinerr:
 14029 000014CD 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 14030                                  i13_ret_error:
 14031 000014CF 80FC06                  		cmp	ah, 6		; did i	see a change event?
 14032 000014D2 7513                    		jnz	short int13b	; skip if wrong	error
 14033 000014D4 08D2                    		or	dl, dl		; is this for the hard disk?
 14034 000014D6 780F                    		js	short int13b	; yes, ignore
 14035 000014D8 803E[7700]00            		cmp	byte [fhave96], 0
 14036 000014DD 7408                    		jz	short int13b	; just in case ROM returned this
 14037                                  					; error	even though it told us it
 14038                                  					; never	would
 14039 000014DF 53                      		push	bx
 14040 000014E0 BB4000                  		mov	bx, 40h		; fchanged
 14041 000014E3 E8AA03                  		call	set_changed_dl
 14042 000014E6 5B                      		pop	bx
 14043                                  int13b:
 14044 000014E7 F9                      		stc			; now return the error
 14045 000014E8 EBDF                    		jmp	short ret_from_i13
 14046                                  ; ---------------------------------------------------------------------------
 14047                                  
 14048                                  ; some kind of error occurred. see if it is dma violation
 14049                                  
 14050                                  goterr13:
 14051 000014EA 80FC09                  		cmp	ah, 9		; dma error?
 14052 000014ED 747C                    		jz	short gotdmaerr
 14053                                  goterr13_xxxx:
 14054 000014EF 80FC11                  		cmp	ah, 11h		; ecc error?
 14055 000014F2 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 14056 000014F4 803E[2F06]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 14057 000014F9 74D4                    		jz	short i13_ret_error
 14058                                  
 14059 000014FB 803E[1F00]02            		cmp	byte [prevoper+1], 2
 14060                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 14061                                  					; (2 = romread)
 14062                                  					; ECC correction only applies to reads
 14063 00001500 75CD                    		jnz	short i13_ret_error
 14064                                  
 14065 00001502 30E4                    		xor	ah, ah
 14066                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 14067                                  		; 17/10/2022
 14068 00001504 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14069                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14070                                  					; call far 70:797h
 14071 00001509 A1[1E00]                		mov	ax, [prevoper]
 14072 0000150C 30E4                    		xor	ah, ah		; return code =	no error
 14073 0000150E 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 14074 00001510 74B7                    		jz	short ret_from_i13 ; return with carry clear
 14075 00001512 53                      		push	bx
 14076 00001513 51                      		push	cx
 14077 00001514 52                      		push	dx
 14078 00001515 A2[2000]                		mov	[number_of_sec], al
 14079                                  loop_ecc:
 14080 00001518 B80102                  		mov	ax, 201h	; read one sector
 14081                                  
 14082                                  ; we do reads one sector at a time. this ensures that we will eventually
 14083                                  ; finish the request since ecc errors on one sector do read in that sector.
 14084                                  ;
 14085                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 14086                                  ; that attempt to read more sectors than are available on a particular
 14087                                  ; track.
 14088                                  ;
 14089                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 14090                                  ; this request.
 14091                                  ;
 14092                                  ; at this point, all registers are set up for the call to orig13, except
 14093                                  ; that there may be a starting sector number that is bigger than the number
 14094                                  ; of sectors on a track.
 14095                                  ;
 14096 0000151B E88FFE                  		call	check_wrap	; get correct parameters for int 13
 14097                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 14098                                  		; 17/10/2022
 14099 0000151E 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14100                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14101 00001523 730C                    		jnb	short ok11_op
 14102 00001525 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 14103 00001528 741B                    		jz	short handle_dma_during_ecc
 14104 0000152A 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 14105 0000152D 7510                    		jnz	short ok11_exit_err
 14106                                  		; 10/12/2022
 14107                                  		; xor ax ax -> ah = 0
 14108                                  		;mov	ah, 0		; ecc error. reset the system again.
 14109 0000152F 31C0                    		xor	ax, ax		; clear	the error code so that if this
 14110                                  					; was the last sector, no error	code
 14111                                  					; will be returned for the corrected
 14112                                  					; read.	(clear carry too.)
 14113                                  ok11_op:
 14114 00001531 FE0E[2000]              		dec	byte [number_of_sec]
 14115 00001535 7409                    		jz	short ok11_exit	; all done?
 14116 00001537 FEC1                    		inc	cl		; advance sector number
 14117                                  					; add 200h to address
 14118 00001539 FEC7                    		inc	bh
 14119 0000153B FEC7                    		inc	bh
 14120 0000153D EBD9                    		jmp	short loop_ecc
 14121                                  ; ---------------------------------------------------------------------------
 14122                                  
 14123                                  ; locate error returns centrally
 14124                                  
 14125                                  ok11_exit_err:
 14126 0000153F F9                      		stc			; set carry bit again.
 14127                                  ok11_exit:
 14128 00001540 5A                      		pop	dx
 14129 00001541 59                      		pop	cx
 14130 00001542 5B                      		pop	bx
 14131 00001543 EB88                    		jmp	short i13ret_ck_chglinerr
 14132                                  ; ---------------------------------------------------------------------------
 14133                                  
 14134                                  ; do the single sector read again, this time into our temporary
 14135                                  ; buffer, which is guaranteed not to have a DMA error, then
 14136                                  ; move the data to its proper location and proceed
 14137                                  
 14138                                  handle_dma_during_ecc:
 14139 00001545 06                      		push	es
 14140 00001546 53                      		push	bx
 14141 00001547 BB[4E01]                		mov	bx, disksector
 14142 0000154A 1E                      		push	ds
 14143 0000154B 07                      		pop	es		; point es:bx to buffer
 14144 0000154C B80102                  		mov	ax, 201h	; read one sector
 14145                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 14146                                  		; 17/10/2022
 14147 0000154F 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14148                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14149 00001554 5B                      		pop	bx
 14150 00001555 07                      		pop	es
 14151 00001556 7305                    		jnb	short handle_dma_during_ecc_noerr
 14152 00001558 80FC11                  		cmp	ah, 11h
 14153 0000155B 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 14154                                  
 14155                                  ; now we're kosher. Copy the data to where it belongs and resume
 14156                                  ; the ECC looping code.
 14157                                  
 14158                                  handle_dma_during_ecc_noerr:
 14159 0000155D 56                      		push	si
 14160 0000155E 57                      		push	di
 14161 0000155F 89DF                    		mov	di, bx
 14162 00001561 BE[4E01]                		mov	si, disksector
 14163 00001564 E82BFE                  		call	move_sector
 14164 00001567 5F                      		pop	di
 14165 00001568 5E                      		pop	si
 14166 00001569 EBC6                    		jmp	short ok11_op
 14167                                  ; ---------------------------------------------------------------------------
 14168                                  
 14169                                  ; we truly have a dma violation. restore register ax and retry the
 14170                                  ; operation as best we can.
 14171                                  
 14172                                  gotdmaerr:
 14173 0000156B A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 14174 0000156E FB                      		sti
 14175 0000156F 80FC02                  		cmp	ah, 2		; romread
 14176 00001572 723B                    		jb	short i13_done_dmaerr
 14177                                  					; just pass dma error thru for
 14178                                  					; functions we don't handle
 14179 00001574 80FC04                  		cmp	ah, 4		; romverify
 14180 00001577 743C                    		jz	short intverify
 14181 00001579 80FC05                  		cmp	ah, 5		; romformat
 14182 0000157C 7448                    		jz	short intformat
 14183 0000157E 772F                    		ja	short i13_done_dmaerr
 14184                                  
 14185                                  ; we are doing a read/write call. check for dma problems
 14186                                  
 14187                                  ;	******** set up stack frame here!!! ********
 14188                                  
 14189 00001580 52                      		push	dx
 14190 00001581 51                      		push	cx
 14191 00001582 53                      		push	bx
 14192 00001583 50                      		push	ax
 14193 00001584 55                      		push	bp
 14194 00001585 89E5                    		mov	bp, sp
 14195 00001587 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 14196 00001589 D1E2                    		shl	dx, 1
 14197 0000158B D1E2                    		shl	dx, 1
 14198 0000158D D1E2                    		shl	dx, 1
 14199 0000158F D1E2                    		shl	dx, 1		; segment converted to absolute	address
 14200 00001591 01DA                    		add	dx, bx		; combine with offset
 14201 00001593 81C2FF01                		add	dx, 511		; simulate a transfer
 14202                                  
 14203                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 14204                                  ; we skip the first transfer and perform the remaining buffering and transfer
 14205                                  
 14206 00001597 7303                    		jnb	short no_skip_first
 14207 00001599 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 14208                                  ; ---------------------------------------------------------------------------
 14209                                  
 14210                                  no_skip_first:
 14211 0000159C D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 14212 0000159E B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 14213 000015A0 28F4                    		sub	ah, dh
 14214                                  
 14215                                  ; ah is now the number of sectors that we can successfully write in this
 14216                                  ; segment. if this number is above or equal to the requested number, then we
 14217                                  ; continue the operation as normal. otherwise, we break it into pieces.
 14218                                  ;
 14219                                  ; wait a sec. this is goofy. the whole reason we got here in the
 14220                                  ; first place is because we got a dma error. so it's impossible
 14221                                  ; for the whole block to fit, unless the dma error was returned
 14222                                  ; in error.
 14223                                  
 14224 000015A2 38C4                    		cmp	ah, al		; can we fit it	in?
 14225 000015A4 7236                    		jb	short doblock	; no, perform blocking.
 14226                                  
 14227                                  ; yes, the request fits. let it happen.
 14228                                  
 14229 000015A6 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 14230                                  					; set up head number
 14231 000015A9 E888FE                  		call	doint
 14232 000015AC E9D900                  		jmp	bad13		; and return from this place
 14233                                  ; ---------------------------------------------------------------------------
 14234                                  
 14235                                  i13_done_dmaerr:
 14236 000015AF B409                    		mov	ah, 9		; pass dma error thru to caller
 14237 000015B1 F9                      		stc
 14238 000015B2 E914FF                  		jmp	ret_from_i13	; return with error,
 14239                                  					; we know it's not a changeline error
 14240                                  ; ---------------------------------------------------------------------------
 14241                                  
 14242                                  ; verify the given sectors. place the buffer pointer into our space.
 14243                                  
 14244                                  intverify:
 14245 000015B5 06                      		push	es		; save caller's dma address
 14246 000015B6 53                      		push	bx
 14247 000015B7 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 14248 000015B8 07                      		pop	es
 14249                                  dosimple:
 14250 000015B9 BB[4E01]                		mov	bx, disksector
 14251                                  					; do the i/o from Bios_Data:disksector
 14252                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 14253                                  		; 17/10/2022
 14254 000015BC 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14255                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14256 000015C1 5B                      		pop	bx
 14257 000015C2 07                      		pop	es
 14258 000015C3 E907FF                  		jmp	i13ret_ck_chglinerr
 14259                                  ; ---------------------------------------------------------------------------
 14260                                  
 14261                                  ; format operation. copy the parameter table into Bios_Data:disksector
 14262                                  
 14263                                  intformat:
 14264 000015C6 06                      		push	es
 14265 000015C7 53                      		push	bx
 14266 000015C8 56                      		push	si
 14267 000015C9 57                      		push	di
 14268 000015CA 1E                      		push	ds
 14269                                  
 14270                                  ; point ds to the caller's dma buffer, es to Bios_Data
 14271                                  ; in other words, swap (ds, es)
 14272                                  
 14273 000015CB 06                      		push	es
 14274 000015CC 1E                      		push	ds
 14275 000015CD 07                      		pop	es
 14276 000015CE 1F                      		pop	ds
 14277 000015CF 89DE                    		mov	si, bx
 14278 000015D1 BF[4E01]                		mov	di, disksector
 14279 000015D4 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 14280 000015D7 1F                      		pop	ds
 14281 000015D8 5F                      		pop	di
 14282 000015D9 5E                      		pop	si		; do the i/o from
 14283 000015DA EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 14284                                  ; ---------------------------------------------------------------------------
 14285                                  
 14286                                  ; we can't fit the request into the entire block. perform the operation on
 14287                                  ; the first block.
 14288                                  ;
 14289                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 14290                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 14291                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 14292                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 14293                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 14294                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 14295                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 14296                                  ; doblock will handle the first block of requested sectors within the
 14297                                  ; boundary of this safe value.
 14298                                  
 14299                                  doblock:
 14300                                  
 14301                                  ; try to get the # of sectors/track from bds via rom drive number.
 14302                                  ; for any mini disks installed, here we have to pray that they have the
 14303                                  ; same # of sector/track as the main dos partition disk drive.
 14304                                  				
 14305 000015DC 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 14306                                  					; get head #, drive #
 14307 000015DF 51                      		push	cx
 14308 000015E0 06                      		push	es
 14309 000015E1 57                      		push	di		; ah - # of sectors before dma boundary
 14310                                  					; al - requested # of sectors for i/o.
 14311 000015E2 E83BFE                  		call	find_bds
 14312 000015E5 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 14313                                  		; 12/12/2022
 14314 000015E9 26F6452301              		test	byte [es:di+23h], 1
 14315                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 14316 000015EE 5F                      		pop	di
 14317 000015EF 07                      		pop	es
 14318 000015F0 88E0                    		mov	al, ah		; set al=ah for	floppies
 14319 000015F2 7404                    		jz	short doblockflop ; they are track by track operation
 14320 000015F4 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 14321 000015F6 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 14322                                  doblockflop:
 14323 000015F8 59                      		pop	cx
 14324                                  doblockcontinue:
 14325 000015F9 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 14326 000015FB 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 14327 000015FD 50                      		push	ax
 14328 000015FE 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 14329 00001600 EB03                    		jmp	short doblockdoint
 14330                                  ; ---------------------------------------------------------------------------
 14331                                  
 14332                                  doblocklast:
 14333 00001602 88C4                    		mov	ah, al
 14334 00001604 50                      		push	ax
 14335                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 14336 00001605 E82CFE                  		call	doint
 14337 00001608 727E                    		jb	short bad13	; something happened, bye!
 14338 0000160A 58                      		pop	ax
 14339 0000160B 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 14340                                  					; decrement by the successful operation
 14341 0000160E 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 14342 00001610 00E7                    		add	bh, ah		; advance dma addres
 14343 00001612 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 14344 00001614 38C4                    		cmp	ah, al		; check	the previous value
 14345 00001616 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 14346                                  					; then we are done already.
 14347 00001618 28E0                    		sub	al, ah		; otherwise,
 14348                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 14349 0000161A E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 14350 0000161D EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 14351                                  ; ---------------------------------------------------------------------------
 14352                                  
 14353                                  bufferx:
 14354 0000161F 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 14355                                  					; set up head number
 14356                                  buffer:
 14357 00001622 53                      		push	bx
 14358 00001623 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 14359 00001626 80FC03                  		cmp	ah, 3		; romwrite
 14360 00001629 7525                    		jnz	short doread	;
 14361                                  
 14362                                  ; copy the offending sector into local buffer
 14363                                  
 14364 0000162B 06                      		push	es
 14365 0000162C 1E                      		push	ds
 14366 0000162D 56                      		push	si
 14367 0000162E 57                      		push	di
 14368 0000162F 1E                      		push	ds		; exchange segment registers
 14369 00001630 06                      		push	es
 14370 00001631 1F                      		pop	ds
 14371 00001632 07                      		pop	es
 14372 00001633 BF[4E01]                		mov	di, disksector	; where to move
 14373 00001636 57                      		push	di		; save it
 14374 00001637 89DE                    		mov	si, bx		; source
 14375 00001639 E856FD                  		call	move_sector	; move sector into local buffer
 14376 0000163C 5B                      		pop	bx		; new transfer address
 14377                                  					; (es:bx = Bios_Data:diskbuffer)
 14378 0000163D 5F                      		pop	di		; restore caller's di & si
 14379 0000163E 5E                      		pop	si
 14380 0000163F 1F                      		pop	ds		; restore Bios_Data
 14381                                  
 14382                                  ; see if we are wrapping around a track or head
 14383                                  
 14384 00001640 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 14385                                  					; get drive number
 14386 00001642 8A5608                  		mov	dl, [bp+8]
 14387 00001645 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 14388                                  					;
 14389                                  					; ah is	function
 14390                                  					; al is	1 for single sector transfer
 14391                                  					; es:bx	is local transfer addres
 14392                                  					; cx is	track/sector number
 14393                                  					; dx is	head/drive number
 14394                                  					; si,di	unchanged
 14395 00001648 E8E9FD                  		call	doint
 14396 0000164B 07                      		pop	es		; restore caller's dma segment
 14397 0000164C 723A                    		jb	short bad13	; go clean up
 14398 0000164E EB22                    		jmp	short dotail
 14399                                  ; ---------------------------------------------------------------------------
 14400                                  
 14401                                  ; reading a sector. do int first, then move things around
 14402                                  
 14403                                  doread:
 14404 00001650 06                      		push	es
 14405 00001651 53                      		push	bx
 14406 00001652 1E                      		push	ds		; es = Bios_Code
 14407 00001653 07                      		pop	es
 14408 00001654 BB[4E01]                		mov	bx, disksector
 14409 00001657 B001                    		mov	al, 1
 14410 00001659 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 14411                                  					; get drive number
 14412 0000165C E84EFD                  		call	check_wrap	;
 14413                                  					; ah = function
 14414                                  					; al = 1 for single sector
 14415                                  					; es:bx	points to local	buffer
 14416                                  					; cx, dx are track/sector, head/drive
 14417 0000165F E8D2FD                  		call	doint
 14418 00001662 5B                      		pop	bx
 14419 00001663 07                      		pop	es
 14420 00001664 7222                    		jb	short bad13
 14421 00001666 56                      		push	si
 14422 00001667 57                      		push	di
 14423 00001668 89DF                    		mov	di, bx
 14424 0000166A BE[4E01]                		mov	si, disksector
 14425 0000166D E822FD                  		call	move_sector
 14426 00001670 5F                      		pop	di
 14427 00001671 5E                      		pop	si
 14428                                  
 14429                                  ; note the fact that we've done 1 more sector
 14430                                  
 14431                                  dotail:
 14432 00001672 5B                      		pop	bx		; retrieve new dma area
 14433 00001673 80C702                  		add	bh, 2		; advance over sector
 14434 00001676 41                      		inc	cx
 14435 00001677 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 14436 0000167A F8                      		clc
 14437 0000167B FEC8                    		dec	al
 14438 0000167D 7409                    		jz	short bad13	; no more i/o
 14439                                  
 14440                                  ; see if we wrap around a track or head boundary with starting sector
 14441                                  ; we already have the correct head number to pass to check_wrap
 14442                                  
 14443 0000167F 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 14444 00001682 E828FD                  		call	check_wrap
 14445 00001685 E8ACFD                  		call	doint
 14446                                  
 14447                                  ; we are done. ax has the final code; we throw away what we got before
 14448                                  
 14449                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 14450                                  ;	   or we've finished. If carry is set now, our only
 14451                                  ;	   hope for salvation is that it was a read operation
 14452                                  ;	   and the error code is ECC error. In that case, we'll
 14453                                  ;	   just pop the registers and go do the old ECC thing.
 14454                                  ;	   When the DMA error that got us here in the first
 14455                                  ;	   place occurs, it'll handle it.
 14456                                  
 14457                                  bad13:
 14458 00001688 89EC                    		mov	sp, bp
 14459 0000168A 5D                      		pop	bp
 14460 0000168B 5B                      		pop	bx
 14461 0000168C 5B                      		pop	bx
 14462 0000168D 59                      		pop	cx
 14463 0000168E 5A                      		pop	dx
 14464 0000168F 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 14465 00001691 E935FE                  		jmp	ret_from_i13	; non-error exit
 14466                                  ; ---------------------------------------------------------------------------
 14467                                  
 14468                                  xgoterr13_xxxx:
 14469 00001694 E958FE                  		jmp	goterr13_xxxx
 14470                                  
 14471                                  ; ---------------------------------------------------------------------------
 14472                                  		; 10/12/2022
 14473                                  		;db 	0
 14474                                  ; ---------------------------------------------------------------------------
 14475                                  
 14476                                  ;Bios_Code ends
 14477                                  
 14478                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14479                                  
 14480                                  ;-----------------------------------------------------------------------------
 14481                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 14482                                  ;-----------------------------------------------------------------------------
 14483                                  ; 17/03/2019 - Retro DOS v4.0
 14484                                  
 14485                                  		; 19/10/2022
 14486                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 14487 00001697 8A26[7500]              		mov	ah, [drvmax]
 14488 0000169B BF[7E06]                		mov	di, dskdrvs
 14489 0000169E 1E                      		push	ds		; pass result in es:di
 14490 0000169F 07                      		pop	es
 14491 000016A0 E910EF                  		jmp	SetPtrSav
 14492                                  
 14493                                  ; =============== S U B	R O U T	I N E =======================================
 14494                                  
 14495                                  ;---------------------------------------------------------------------------
 14496                                  ; install_bds installs a bds at location es:di into the current linked list of
 14497                                  ; bds maintained by this device driver. it places the bds at the end of the
 14498                                  ; list. Trashes (at least) ax, bx, di, si
 14499                                  ;---------------------------------------------------------------------------
 14500                                  
 14501                                  install_bds:		
 14502 000016A3 1E                      		push	ds		; save Bios_Data segment
 14503 000016A4 BE[1901]                		mov	si, start_bds	; beginning of chain
 14504                                  
 14505                                  		; ds:si now points to link to first bds
 14506                                  		; assume bds list is non-empty
 14507                                  loop_next_bds:				
 14508 000016A7 C534                    		lds	si, [si]	; [si+BDS.link]
 14509                                  					; fetch	next bds
 14510 000016A9 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14511 000016AD 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 14512                                  					; drive	with new one?
 14513 000016B0 7518                    		jnz	short next_bds
 14514 000016B2 B310                    		mov	bl, 10h		; fi_am_mult
 14515 000016B4 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14516                                  					; set both of them to i_am_mult	if so
 14517 000016B8 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 14518 000016BB 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 14519                                  					; we don't own it
 14520 000016C0 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 14521                                  					; determine if changeline available
 14522 000016C3 80E302                  		and	bl, 2		; fchangeline
 14523 000016C6 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14524                                  next_bds:				
 14525                                  		; 02/09/2023 (PCDOS 7.1)
 14526 000016CA B8FFFF                  		mov	ax, 0FFFFh	; -1
 14527 000016CD 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 14528                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 14529                                  					; are we at end	of list?
 14530 000016CF 75D6                    		jnz	short loop_next_bds
 14531 000016D1 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 14532                                  					; install bds
 14533 000016D4 893C                    		mov	[si], di
 14534 000016D6 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 14535                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 14536                                  					; set next pointer to null
 14537 000016D9 1F                      		pop	ds
 14538                                  
 14539                                  ; 16/10/2022 (MSDOS 6.0 Code)
 14540                                  ;
 14541                                  ; **** If the new drive has a higher EOT value, we must alter the
 14542                                  ;      'eot' variable appropriately.
 14543                                  ;
 14544                                  ;		; 01/06/2019
 14545                                  ;		;mov	al,[es:di+52]
 14546                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 14547                                  ;
 14548                                  ;		cmp	al,[eot]
 14549                                  ;		jbe	short _eot_ok
 14550                                  ;		mov	[eot],al
 14551                                  
 14552 000016DA C3                      		retn
 14553                                  
 14554                                  ; ---------------------------------------------------------------------------
 14555                                  
 14556                                  ; 17/10/2022
 14557                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 14558                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 14559                                  ; 09/12/2022
 14560                                  DRVLET equ drvlet
 14561                                  SNGMSG equ sngmsg
 14562                                  
 14563                                  ; 16/10/2022
 14564                                  
 14565                                  ;---------------------------------------------------------------------------
 14566                                  ;  ask to swap the disk in drive a:
 14567                                  ;	es:di -> bds
 14568                                  ;	ds -> Bios_Data
 14569                                  ;---------------------------------------------------------------------------
 14570                                  
 14571                                  		; 19/10/2022
 14572 000016DB F606[C508]01            swpdsk:		test	byte [IsWin386], 1			
 14573                                  		;test	ds:IsWin386, 1	; Is win386 present?
 14574 000016E0 7405                    		jz	short no_win386	; no, skip SetFocus
 14575                                  		
 14576                                  		; set focus to the correct VM
 14577                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 14578                                  		; 17/10/2022
 14579 000016E2 9A[C608]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 14580                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 14581                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 14582                                  no_win386:				
 14583 000016E7 51                      		push	cx
 14584 000016E8 52                      		push	dx
 14585 000016E9 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 14586                                  					; get the drive	letter
 14587                                  
 14588                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 14589                                  ;           then existing dsk is drive A & vice versa
 14590                                  
 14591 000016ED 88D6                    		mov	dh, dl
 14592 000016EF 80F601                  		xor	dh, 1
 14593 000016F2 29C9                    		sub	cx, cx		; nobody has handled swap disk
 14594 000016F4 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 14595                                  					; broad	cast code for swap disk
 14596                                  					; Broadcast it
 14597 000016F7 CD2F                    		int	2Fh	
 14598 000016F9 41                      		inc	cx		; cx == -1 ?
 14599 000016FA 741E                    		jz	short swpdsk9	; somebody has handled it
 14600                                  
 14601                                  ; using a different drive in a one drive system so request the user change disks
 14602                                  
 14603 000016FC 80C241                  		add	dl, 'A'
 14604                                  		; 17/10/2022
 14605 000016FF 2E8816[3917]            		mov	[cs:DRVLET], dl
 14606                                  		; 16/10/2022
 14607                                  		;;mov	byte [cs:drvlet], dl
 14608                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 14609                                  					; 0070h:3D54h =	2C7h:17E4h
 14610 00001704 BE[1D17]                		mov	si, SNGMSG
 14611                                  		;mov	si, 17C8h	; sngmsg
 14612                                  					; 0070h:3D38h =	2C7h:17C8h
 14613 00001707 53                      		push	bx
 14614 00001708 2E                      		cs
 14615 00001709 AC                      		lodsb			; get the next character of the message
 14616                                  		;lods	byte ptr cs:[si]
 14617                                  wrmsg_loop:				
 14618 0000170A CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 14619                                  					; AL = character to display
 14620 0000170C 2E                      		cs
 14621 0000170D AC                      		lodsb
 14622                                  		;lods	byte ptr cs:[si] ; cs lodsb
 14623                                  					; get the next character of the	message
 14624 0000170E 08C0                    		or	al, al
 14625 00001710 75F8                    		jnz	short wrmsg_loop
 14626 00001712 E8F2EA                  		call	con_flush	; flush out keyboard queue
 14627                                  					; call rom-bios
 14628 00001715 30E4                    		xor	ah, ah
 14629 00001717 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 14630                                  					; Return: AH = scan code, AL = character
 14631 00001719 5B                      		pop	bx
 14632                                  swpdsk9:				
 14633 0000171A 5A                      		pop	dx
 14634 0000171B 59                      		pop	cx
 14635 0000171C C3                      		retn
 14636                                  
 14637                                  ; ---------------------------------------------------------------------------
 14638                                  
 14639                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14640                                  
 14641                                  ;--------------------------------------------------------
 14642                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 14643                                  ;--------------------------------------------------------
 14644                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 14645                                  ;--------------------------------------------------------
 14646                                  ; 17/03/2019 - Retro DOS v4.0
 14647                                  
 14648                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 14649 0000171D 0D0A                    sngmsg:		db 0Dh,0Ah
 14650 0000171F 496E73657274206469-     		db 'Insert diskette for drive '
 14650 00001728 736B6574746520666F-
 14650 00001731 7220647269766520   
 14651                                  
 14652                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 14653 00001739 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 14653 00001742 65737320616E79206B-
 14653 0000174B 6579207768656E2072-
 14653 00001754 656164790D0A       
 14654 0000175A 0A00                    		db 0Ah,0
 14655                                  
 14656                                  ; =============== S U B	R O U T	I N E =======================================
 14657                                  
 14658                                  ;---------------------------------------------------------------------------
 14659                                  ; input : es:di points to current bds for drive.
 14660                                  ; return : zero set if no open files
 14661                                  ;	   zero reset if open files
 14662                                  ;---------------------------------------------------------------------------
 14663                                  
 14664                                  chkopcnt:		
 14665 0000175C 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14666 00001761 C3                      		retn
 14667                                  
 14668                                  ; =============== S U B	R O U T	I N E =======================================
 14669                                  
 14670                                  ;---------------------------------------------------------------------------
 14671                                  ; at media check time, we need to really get down and check what the change is.
 14672                                  ; this is guaranteed to be expensive.
 14673                                  ;
 14674                                  ;	es:di -> bds, ds -> Bios_Data
 14675                                  ;---------------------------------------------------------------------------
 14676                                  
 14677                                  mediacheck:	
 14678 00001762 E8CAF0                  		call	checksingle	; make sure correct disk is in place
 14679 00001765 31F6                    		xor	si, si
 14680 00001767 E84D01                  		call	haschange
 14681 0000176A 742F                    		jz	short mediaret
 14682 0000176C E83C01                  		call	checkromchange
 14683 0000176F 752B                    		jnz	short mediadovolid
 14684 00001771 50                      		push	ax
 14685 00001772 52                      		push	dx
 14686 00001773 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14687                                  					; set logical drive number
 14688 00001777 B416                    		mov	ah, 16h
 14689 00001779 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 14690                                  					; DL = drive to	check
 14691                                  					; Return: AH = disk change status
 14692 0000177B 5A                      		pop	dx
 14693 0000177C 58                      		pop	ax
 14694 0000177D 721D                    		jb	short mediadovolid
 14695 0000177F BE0100                  		mov	si, 1		; signal no change
 14696                                  
 14697                                  ; there are some drives with changeline that "lose" the changeline indication
 14698                                  ; if a different drive is accessed after the current one. in order to avoid
 14699                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14700                                  ; is not active and we are accessing a different drive from the last one.
 14701                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14702                                  ; status.
 14703                                  		; 19/10/2022
 14704 00001782 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14705 00001786 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14706                                  					; (If the last drive accessed is not current drive
 14707                                  					; media	change status may be incorrect.	So,
 14708                                  					; "I don't now" will be returned even if it is indicated
 14709                                  					; as media is not changed.)
 14710 0000178A 740F                    		jz	short mediaret	; (same	drive,
 14711                                  					; media	changeline indication is reliable)
 14712                                  
 14713                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14714                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14715                                  ; "not changed" here since the 2 second test said no change.)
 14716                                  
 14717 0000178C 50                      		push	ax
 14718 0000178D 51                      		push	cx
 14719 0000178E 52                      		push	dx
 14720 0000178F E8BCED                  		call	Check_Time_Of_Access
 14721 00001792 5A                      		pop	dx
 14722 00001793 59                      		pop	cx
 14723 00001794 58                      		pop	ax
 14724 00001795 09F6                    		or	si, si
 14725 00001797 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14726                                  					; (volume id will be checked)
 14727 00001799 31F6                    		xor	si, si		; return "i don't know"
 14728                                  mediaret:				
 14729 0000179B C3                      		retn
 14730                                  ; ---------------------------------------------------------------------------
 14731                                  
 14732                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14733                                  ; because this may be different since we only set medbyt when doing a read
 14734                                  ; or write.
 14735                                  
 14736                                  mediadovolid:				
 14737 0000179C E854EE                  		call	GetBp		; build	a new bpb in current bds
 14738 0000179F 72FA                    		jb	short mediaret
 14739 000017A1 E82D00                  		call	check_vid
 14740 000017A4 73F5                    		jnb	short mediaret
 14741 000017A6 E90AF4                  		jmp	maperror	; fix up al for	return to dos
 14742                                  ; ---------------------------------------------------------------------------
 14743                                  
 14744                                  ; simple, quick check of latched change. if no indication, then return
 14745                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14746                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14747                                  ; dos.
 14748                                  ;
 14749                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14750                                  
 14751                                  ;	call with es:di -> bds, ds -> Bios_Data
 14752                                  ;	***** warning:  this routine will return one level up on the stack
 14753                                  ;			if an error occurs!
 14754                                  
 14755                                  checklatchio:	
 14756                                  
 14757                                  ; if returning fake bpb then assume the disk has not changed
 14758                                  			
 14759 000017A9 E8B0FF                  		call	chkopcnt
 14760 000017AC 741B                    		jz	short checkret	; done if zero
 14761                                  
 14762                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14763                                  
 14764 000017AE E8FA00                  		call	checkromchange
 14765 000017B1 7416                    		jz	short checkret
 14766                                  
 14767                                  ; we now see that a change line has been seen in the past. let's do the
 14768                                  ; expensive verification.
 14769                                  
 14770 000017B3 E83DEE                  		call	GetBp		; build	bpb in current bds
 14771 000017B6 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14772 000017B8 E81600                  		call	check_vid
 14773 000017BB 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14774 000017BD 09F6                    		or	si, si		; is changed for sure?
 14775 000017BF 7908                    		jns	short checkret
 14776 000017C1 E87B00                  		call	returnvid
 14777                                  checklatchret:				
 14778 000017C4 E8ECF3                  		call	maperror	; fix up al for	return to dos
 14779                                  ret_no_error_map:			
 14780 000017C7 F9                      		stc
 14781 000017C8 5E                      		pop	si		; pop off return address
 14782                                  checkret:				
 14783 000017C9 C3                      		retn
 14784                                  ; ---------------------------------------------------------------------------
 14785                                  
 14786                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14787                                  ; only if there was a disk error. return that error code in ax.
 14788                                  ;
 14789                                  ;	called with es:di -> bds, ds -> Bios_Data
 14790                                  
 14791                                  checkfatvid:				
 14792 000017CA E8BC01                  		call	fat_check	; check	the fat	and the	vid
 14793 000017CD 09F6                    		or	si, si
 14794 000017CF 7827                    		js	short changed_drv ;
 14795                                  
 14796                                  ; the fat was the same. fall into check_vid and check volume id.
 14797                                  
 14798                                  		; fall into check_vid
 14799                                  
 14800                                  ; =============== S U B	R O U T	I N E =======================================
 14801                                  
 14802                                  ; now with the extended boot record, the logic should be enhanced.
 14803                                  ;
 14804                                  ; if it is the extended boot record, then we check the volume serial
 14805                                  ; number instead of volume id. if it is different, then set si to -1.
 14806                                  ;
 14807                                  ; if it is same, then si= 1 (no change).
 14808                                  ;
 14809                                  ; if it is not the extended boot record, then just follows the old
 14810                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14811                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14812                                  ; should have already covered by extended boot structure checking.
 14813                                  ; so, we will return "i don't know" by setting si to 0.
 14814                                  ;
 14815                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14816                                  ; (this will be gauranteed by a successful getbp call right before this
 14817                                  ; routine.)
 14818                                  ;
 14819                                  ;	called with es:di -> bds, ds -> bds
 14820                                  
 14821                                  		; 19/10/2022
 14822                                  check_vid:
 14823                                  
 14824                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14825                                  ; boot signature. if it is set then go to do the extended
 14826                                  ; id check otherwise continue with code below
 14827                                  
 14828 000017D1 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14829                                  					; [disksector+EXT_BOOT.SIG],
 14830                                  					; EXT_BOOT_SIGNATURE
 14831 000017D6 7427                    		jz	short do_ext_check_id
 14832 000017D8 E8DC00                  		call	haschange
 14833 000017DB 74EC                    		jz	short checkret
 14834 000017DD 31F6                    		xor	si, si
 14835 000017DF 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14836                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14837 000017E4 7411                    		jz	short checkfatret ; don't read vol id
 14838                                  					; if not fat system
 14839 000017E6 E8EE00                  		call	read_volume_id
 14840 000017E9 720C                    		jb	short checkfatret
 14841 000017EB E89201                  		call	check_volume_id
 14842 000017EE BEFFFF                  		mov	si, 0FFFFh	; -1
 14843                                  					; definitely changed
 14844 000017F1 7505                    		jnz	short changed_drv
 14845                                  
 14846 000017F3 46                      		inc	si		; not changed
 14847                                  vid_no_changed:				
 14848 000017F4 E8BA00                  		call	resetchanged
 14849                                  		; 12/12/2022
 14850                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14851                                  		;clc
 14852                                  checkfatret:				
 14853 000017F7 C3                      		retn
 14854                                  ; ---------------------------------------------------------------------------
 14855                                  
 14856                                  		; 12/12/2022
 14857                                  changed_drv:
 14858 000017F8 F8                      		clc			; cas -- return	no error
 14859 000017F9 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14860                                  					; ensure that we ask rom for media
 14861 000017FE C3                      		retn			; check	next time round
 14862                                  ; ---------------------------------------------------------------------------
 14863                                  
 14864                                  ; extended id check
 14865                                  
 14866                                  ; 16/10/2022
 14867                                  
 14868                                  ; the code to check extended id is basically a check to see if the
 14869                                  ; volume serial number is still the same. the volume serial number
 14870                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14871                                  ; ds:di points to the bds of the drive under consideration.
 14872                                  ; the bds has fields containing the high and low words 
 14873                                  ; of the volume serial number of the media in the drive.
 14874                                  ; compare these fields to the fields mentioned above. if these fields
 14875                                  ; do not match the media has changed and so we should jump to the code
 14876                                  ; starting at ext_changed else return "i don't know" status
 14877                                  ; in the register used for the changeline status and continue executing
 14878                                  ; the code given below. for temporary storage use the register which
 14879                                  ; has been saved and restored around this block.
 14880                                  ;
 14881                                  ; bds fields in inc\msbds.inc
 14882                                  
 14883                                  		; 19/10/2022
 14884                                  do_ext_check_id:
 14885 000017FF 50                      		push	ax
 14886                                  		;mov	ax, word ptr ds:disksector+27h
 14887                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14888 00001800 A1[7501]                		mov	ax, [disksector+27h]
 14889                                  		; 02/09/2023
 14890 00001803 31F6                    		xor	si, si ; 0
 14891 00001805 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14892 00001809 750C                    		jnz	short ext_changed
 14893 0000180B A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14894 0000180E 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14895 00001812 7503                    		jnz	short ext_changed
 14896                                  		;xor	si, si		; 0
 14897                                  					; don't know
 14898 00001814 58                      		pop	ax
 14899 00001815 EBDD                    		jmp	short vid_no_changed
 14900                                  					; reset the flag
 14901                                  ; ---------------------------------------------------------------------------
 14902                                  
 14903                                  ext_changed:
 14904 00001817 58                      		pop	ax
 14905                                  		; 02/09/2023
 14906 00001818 4E                      		dec	si ; mov si, 0FFFFh ; -1
 14907                                  		;mov	si, 0FFFFh	; -1
 14908                                  					; disk changed!
 14909                                  		; 12/12/2022
 14910                                  		; ('changed_drv' clears cf)
 14911                                  		;clc
 14912 00001819 EBDD                    		jmp	short changed_drv
 14913                                  
 14914                                  ; ---------------------------------------------------------------------------
 14915                                  
 14916                                  ; at i/o time, we detected the error. now we need to determine whether the
 14917                                  ; media was truly changed or not. we return normally if media change unknown.
 14918                                  ; and we pop off the call and jmp to harderr if we see an error.
 14919                                  ;
 14920                                  ; es:di -> bds
 14921                                  
 14922                                  checkio:				
 14923 0000181B 80FC06                  		cmp	ah, 6
 14924 0000181E 75D7                    		jnz	short checkfatret
 14925 00001820 E839FF                  		call	chkopcnt
 14926 00001823 74D2                    		jz	short checkfatret
 14927 00001825 E8CBED                  		call	GetBp
 14928 00001828 7212                    		jb	short no_error_map
 14929 0000182A E89DFF                  		call	checkfatvid
 14930 0000182D 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14931 0000182F 09F6                    		or	si, si		; is changed for sure?
 14932 00001831 7802                    		js	short checkioerr ; yes changed
 14933 00001833 45                      		inc	bp		; allow	a retry
 14934 00001834 C3                      		retn
 14935                                  ; ---------------------------------------------------------------------------
 14936                                  
 14937                                  checkioerr:				
 14938 00001835 E80700                  		call	returnvid
 14939                                  
 14940                                  checkioret:				
 14941 00001838 F9                      		stc			; make sure carry gets passed through
 14942 00001839 E928F3                  		jmp	harderr
 14943                                  ; ---------------------------------------------------------------------------
 14944                                  
 14945                                  no_error_map:				
 14946 0000183C E928F3                  		jmp	harderr2
 14947                                  
 14948                                  ; =============== S U B	R O U T	I N E =======================================
 14949                                  
 14950                                  ; return vid sets up the vid for a return to dos.
 14951                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14952                                  ;  **** trashes si! ****
 14953                                  
 14954                                  returnvid:		
 14955 0000183F BE1600                  		mov	si, 22		; extra
 14956                                  					; offset into pointer to return	value
 14957 00001842 E80700                  		call	vid_into_packet
 14958 00001845 B406                    		mov	ah, 6
 14959 00001847 F9                      		stc
 14960 00001848 C3                      		retn
 14961                                  
 14962                                  ; ---------------------------------------------------------------------------
 14963                                  
 14964                                  ; moves the pointer to the volid for the drive into the original request packet
 14965                                  ; no attempt is made to preserve registers.
 14966                                  ;
 14967                                  ; assumes es:di -> bds
 14968                                  ; **trashes si**
 14969                                  
 14970                                  media_set_vid:				
 14971 00001849 BE0F00                  		mov	si, 15		; trans+1
 14972                                  					; return the value here	in packet
 14973                                  
 14974                                  		; fall into vid_into_packet
 14975                                  
 14976                                  ; =============== S U B	R O U T	I N E =======================================
 14977                                  
 14978                                  ; return pointer to vid in bds at es:di in packet[si]
 14979                                  
 14980                                  		; 19/10/2022
 14981                                  vid_into_packet:
 14982 0000184C 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14983 0000184D C51E[1200]              		lds	bx, [ptrsav]
 14984 00001851 83C74B                  		add	di, 75		; BDS.volid
 14985 00001854 8938                    		mov	[bx+si], di
 14986 00001856 83EF4B                  		sub	di, 75		; BDS.volid
 14987 00001859 8C4002                  		mov	[bx+si+2], es
 14988 0000185C 1F                      		pop	ds
 14989                                  dofloppy:	; 18/12/2022
 14990 0000185D C3                      		retn
 14991                                  
 14992                                  ; ---------------------------------------------------------------------------
 14993                                  
 14994                                  ;----------------------------------------------------------------------------
 14995                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14996                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14997                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14998                                  ;   of getbp. for 3.5" media, we just return.
 14999                                  ;
 15000                                  ;   inputs:	es:di point to correct bds for this drive
 15001                                  ;		ah has media byte
 15002                                  ;
 15003                                  ;   outputs:	carry clear
 15004                                  ;		    no registers modified
 15005                                  ;		carry set
 15006                                  ;		    al = sectors/fat
 15007                                  ;		    bh = number of root directory entries
 15008                                  ;		    bl = sectors per track
 15009                                  ;		    cx = number of sectors
 15010                                  ;		    dh = sectors per allocation unit
 15011                                  ;		    dl = number of heads
 15012                                  ;
 15013                                  ;----------------------------------------------------------------------------
 15014                                  
 15015                                  hidensity:
 15016                                  
 15017                                  ; check for correct drive
 15018                                  		
 15019                                  		; 12/12/2022
 15020 0000185E 26F6452302              		test	byte [es:di+23h], 2		
 15021                                  		;test	word [es:di+23h], 2 ; is it special?	
 15022                                  					; [es:di+BDS.flags], fchangeline
 15023 00001863 74F8                    		jz	short dofloppy	; no, do normal floppy test
 15024                                  
 15025                                  ; we have a media byte that is pretty complex. examine drive information
 15026                                  ; table to see what kind it is.
 15027                                  
 15028 00001865 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 15029 0000186A 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 15030                                  					; yes, use fatid...
 15031                                  ; 96 tpi drive?
 15032 0000186C 80FCF9                  		cmp	ah, 0F9h
 15033 0000186F 75EC                    		jnz	short dofloppy
 15034                                  
 15035                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 15036                                  ;------ a 720K diskette
 15037                                  
 15038                                  		; 02/09/2023 (PCDOS 7.1)
 15039 00001871 268A4522                		mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 15040 00001875 3C07                    		cmp	al, 7
 15041                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 15042                                  					; ffOther
 15043 00001877 7413                    		jz	short Is720K
 15044 00001879 3C09                    		cmp	al, 9
 15045                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 15046                                  					; ff288
 15047 0000187B 740F                    		jz	short Is720K
 15048 0000187D B007                    		mov	al, 7		; seven	sectors	/ fat
 15049 0000187F BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 15050                                  					; 224 root dir entries
 15051                                  					; & 0Fh sector max
 15052 00001882 B96009                  		mov	cx, 2400	; 80*15*2
 15053                                  					; 80 tracks, 15 sectors/track,
 15054                                  					; 2 sides
 15055                                  		; 02/09/2023
 15056 00001885 5A                      		pop	dx		; pop off return address
 15057 00001886 BA0201                  		mov	dx, 258		; 1*256+2
 15058                                  					; sectors/allocation unit
 15059                                  					; & head max
 15060                                  		;add	sp, 2		; pop off return address
 15061 00001889 E9D3ED                  		jmp	Has1		; return to tail of getbp
 15062                                  ; ---------------------------------------------------------------------------
 15063                                  
 15064                                  Is720K:
 15065                                  		; 02/09/2023
 15066 0000188C 5B                      		pop	bx		; pop off return address
 15067                                  		;add	sp, 2		; pop off return address
 15068 0000188D E999ED                  		jmp	Has720K		; return to 720K code
 15069                                  ; ---------------------------------------------------------------------------
 15070                                  
 15071                                  		; 18/12/2022
 15072                                  ;dofloppy:				
 15073                                  		;retn
 15074                                  
 15075                                  ; =============== S U B	R O U T	I N E =======================================
 15076                                  
 15077                                  ; 16/10/2022
 15078                                  
 15079                                  ;---------------------------------------------------------------------------
 15080                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 15081                                  ;		   essentially used to indicate changeline, or format.
 15082                                  ;
 15083                                  ;   inputs:	dl contains physical drive number
 15084                                  ;		bx contains bits to set in the flag field in the bdss
 15085                                  ;   outputs:	none
 15086                                  ;   registers modified: flags
 15087                                  ;
 15088                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 15089                                  ;
 15090                                  ; in the virtual drive system we *must* flag the other drives as being changed
 15091                                  ;---------------------------------------------------------------------------
 15092                                  
 15093                                  set_changed_dl:	
 15094 00001890 06                      		push	es
 15095 00001891 57                      		push	di
 15096                                  		;les	di, ds:start_bds
 15097                                  		; 19/10/2022
 15098 00001892 C43E[1901]              		les	di, [start_bds]
 15099                                  
 15100                                  ; note: we assume that the list is non-empty
 15101                                  
 15102                                  scan_bds:				
 15103 00001896 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 15104 0000189A 7504                    		jnz	short get_next_bds
 15105                                  
 15106                                  ; someone may complain, but this *always* must be done when a disk change is
 15107                                  ; noted. there are *no* other compromising circumstances.
 15108                                  
 15109 0000189C 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 15110                                  					; signal change	on other drive
 15111                                  get_next_bds:				
 15112 000018A0 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 15113                                  					; go to	next bds
 15114 000018A3 83FFFF                  		cmp	di, 0FFFFh
 15115 000018A6 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 15116 000018A8 5F                      		pop	di
 15117 000018A9 07                      		pop	es
 15118 000018AA C3                      		retn
 15119                                  
 15120                                  ; =============== S U B	R O U T	I N E =======================================
 15121                                  
 15122                                  ;---------------------------------------------------------------------------
 15123                                  ; checkromchange - see if external program has diddled rom change line.
 15124                                  ;
 15125                                  ;   inputs:	es:di points to current bds.
 15126                                  ;   outputs:	zero set - no change
 15127                                  ;		zero reset - change
 15128                                  ;   registers modified: none
 15129                                  ;---------------------------------------------------------------------------
 15130                                  
 15131                                  checkromchange:	
 15132                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 15133                                  		; 10/12/2022
 15134 000018AB 26F6452340              		test	byte [es:di+23h], 40h
 15135                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 15136                                  					; fchanged
 15137 000018B0 C3                      		retn
 15138                                  
 15139                                  ; =============== S U B	R O U T	I N E =======================================
 15140                                  
 15141                                  ;---------------------------------------------------------------------------
 15142                                  ; resetchanged - restore value of change line
 15143                                  ;
 15144                                  ;   inputs:	es:di points to current bds
 15145                                  ;   outputs:	none
 15146                                  ;   registers modified: none
 15147                                  ;---------------------------------------------------------------------------
 15148                                  
 15149                                  resetchanged:	
 15150                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 15151                                  		; 10/12/2022
 15152 000018B1 26806523BF              		and	byte [es:di+23h], 0BFh
 15153                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 15154                                  					; ~fchanged
 15155 000018B6 C3                      		retn
 15156                                  
 15157                                  ; =============== S U B	R O U T	I N E =======================================
 15158                                  
 15159                                  ;---------------------------------------------------------------------------
 15160                                  ; haschange - see if drive can supply change line
 15161                                  ;
 15162                                  ;   inputs:	es:di points to current bds
 15163                                  ;   outputs:	zero set - no change line available
 15164                                  ;		zero reset - change line available
 15165                                  ;   registers modified: none
 15166                                  ;---------------------------------------------------------------------------
 15167                                  
 15168                                  haschange:
 15169                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 15170                                  		; 10/12/2022
 15171 000018B7 26F6452302              		test	byte [es:di+23h], 2		
 15172                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 15173                                  					; fchangeline
 15174 000018BC C3                      		retn
 15175                                  
 15176                                  ; ---------------------------------------------------------------------------
 15177                                  
 15178                                  ; 16/10/2022
 15179                                  
 15180                                  ;-------------------------------------------------------------------------
 15181                                  ; set_volume_id      -	main routine, calls other routines.
 15182                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 15183                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 15184                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 15185                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 15186                                  ;-------------------------------------------------------------------------
 15187                                  
 15188                                  ; set_volume_id
 15189                                  ;   if drive has changeline support, read in and set the volume_id
 15190                                  ; and the last fat_id byte. if no change line support then do nothing.
 15191                                  ;
 15192                                  ;   on entry:
 15193                                  ;	es:di points to the bds for this disk.
 15194                                  ;	ah contains media byte
 15195                                  ;
 15196                                  ;   on exit:
 15197                                  ;	carry clear:
 15198                                  ;	   successful call
 15199                                  ;	carry set
 15200                                  ;	   error and ax has error code
 15201                                  
 15202                                  set_volume_id:				
 15203 000018BD 52                      		push	dx		; save registers
 15204 000018BE 50                      		push	ax
 15205 000018BF E8F5FF                  		call	haschange	; does drive have changeline support?
 15206 000018C2 740B                    		jz	short setvret	; no, get out
 15207 000018C4 E81000                  		call	read_volume_id
 15208 000018C7 7209                    		jb	short seterr
 15209 000018C9 E8A800                  		call	transfer_volume_id ; copy the volume id	to special drive
 15210 000018CC E8E2FF                  		call	resetchanged	; restore value	of change line
 15211                                  setvret:				
 15212                                  		; 10/12/2022
 15213                                  		; cf = 0
 15214                                  		;clc			; no error, clear carry flag
 15215 000018CF 58                      		pop	ax		; restore registers
 15216 000018D0 5A                      		pop	dx
 15217 000018D1 C3                      		retn
 15218                                  ; ---------------------------------------------------------------------------
 15219                                  
 15220                                  seterr:					
 15221 000018D2 5A                      		pop	dx		; pop stack but don't overwrite ax
 15222 000018D3 5A                      		pop	dx		; restore dx
 15223 000018D4 C3                      		retn
 15224                                  ; ---------------------------------------------------------------------------
 15225 000018D5 0000                    root_sec:	dw 0			; root sector #
 15226                                  
 15227                                  ; 16/10/2022
 15228                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 15229                                  ; 09/12/2022
 15230                                  ROOTSEC equ root_sec
 15231                                  
 15232                                  ; =============== S U B	R O U T	I N E =======================================
 15233                                  
 15234                                  ; 16/10/2022
 15235                                  
 15236                                  ; read_volume_id read the volume id and tells if it has been changed.
 15237                                  ;
 15238                                  ;   on entry:
 15239                                  ;	es:di points to current bds for drive.
 15240                                  ;
 15241                                  ;   on exit:
 15242                                  ;	carry clear
 15243                                  ;	    si = 1  no change
 15244                                  ;	    si = 0  ?
 15245                                  ;	    si = -1 change
 15246                                  ;
 15247                                  ;	carry set:
 15248                                  ;	    error and ax has error code.
 15249                                  
 15250                                  read_volume_id:
 15251 000018D7 52                      		push	dx		; preserve registers
 15252 000018D8 51                      		push	cx
 15253 000018D9 53                      		push	bx
 15254 000018DA 50                      		push	ax
 15255 000018DB 06                      		push	es		; stack the bds last
 15256 000018DC 57                      		push	di
 15257 000018DD 1E                      		push	ds		; point es to Bios_Data
 15258 000018DE 07                      		pop	es
 15259 000018DF BF[0009]                		mov	di, tmp_vid	; "NO NAME	 "
 15260 000018E2 BE[F408]                		mov	si, nul_vid	; "NO NAME	 "
 15261 000018E5 B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 15262 000018E8 F3A4                    		rep movsb
 15263 000018EA 5F                      		pop	di
 15264 000018EB 07                      		pop	es
 15265 000018EC 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 15266                                  					; # of fats
 15267 000018F0 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 15268                                  					; sectors / fat
 15269 000018F4 F6E1                    		mul	cl		; size taken by	fats
 15270 000018F6 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 15271                                  					; add on reserved sectors
 15272                                  					;
 15273                                  					; ax is	now sector # (0	based)
 15274                                  		; 17/10/2022
 15275 000018FA 2EA3[D518]              		mov	[cs:ROOTSEC], ax
 15276                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 15277                                  					; 0070h:3EFFh =	2C7h:198Fh
 15278 000018FE 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 15279                                  					; # root dir entries
 15280 00001902 B104                    		mov	cl, 4		; 16 entries/sector
 15281 00001904 D3E8                    		shr	ax, cl		; divide by 16
 15282                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 15283                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 15284 00001906 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 15285                                  next_sec:				
 15286 00001907 51                      		push	cx		; save outer loop counter
 15287 00001908 2EA1[D518]              		mov	ax, [cs:ROOTSEC]
 15288                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 15289                                  					; get sector #
 15290 0000190C 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 15291                                  					; sectors / track
 15292 00001910 31D2                    		xor	dx, dx
 15293 00001912 F7F1                    		div	cx
 15294                                  
 15295                                  ; set up registers for call to read_sector
 15296                                  
 15297 00001914 42                      		inc	dx		; dx= sectors into track
 15298                                  					; ax= track count from 0
 15299 00001915 88D1                    		mov	cl, dl		; sector to read
 15300 00001917 31D2                    		xor	dx, dx
 15301 00001919 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 15302                                  					; # heads on this disc
 15303 0000191D 88D6                    		mov	dh, dl		; head number
 15304 0000191F 88C5                    		mov	ch, al		; track	#
 15305 00001921 E849EE                  		call	read_sector	; get first sector of the root directory,
 15306                                  					; ds:bx	-> directory sector
 15307 00001924 723F                    		jb	short readviderr
 15308 00001926 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 15309 00001929 B008                    		mov	al, 8		; volume label bit
 15310                                  fvid_loop:				
 15311                                  		; 02/09/2023 (PCDOS 7.1)
 15312 0000192B 382F                    		cmp	[bx], ch ; 0
 15313                                  		;cmp	byte [bx], 0 ; end of dir?
 15314 0000192D 7433                    		jz	short no_vid	; yes, no vol id
 15315 0000192F 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 15316 00001932 7405                    		jz	short ent_loop	; yes, skip
 15317 00001934 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 15318 00001937 750F                    		jnz	short found_vid	; jmp yes
 15319                                  ent_loop:				
 15320 00001939 83C320                  		add	bx, 32		; add length of	directory entry
 15321 0000193C E2ED                    		loop	fvid_loop
 15322 0000193E 59                      		pop	cx		; outer loop
 15323 0000193F 2EFF06[D518]            		inc	word [cs:ROOTSEC]
 15324                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 15325                                  					; next sector
 15326 00001944 E2C1                    		loop	next_sec	; continue
 15327                                  notfound:
 15328                                  		; 02/09/2023
 15329                                  		;xor	si, si
 15330 00001946 EB13                    		jmp	short fvid_ret
 15331                                  ; ---------------------------------------------------------------------------
 15332                                  
 15333                                  found_vid:
 15334                                  		; 02/09/2023
 15335                                  		; cf = 0  ('test' instruction clears cf)				
 15336 00001948 59                      		pop	cx		; clean stack of outer loop counter
 15337 00001949 89DE                    		mov	si, bx		; point	to volume_id
 15338 0000194B 06                      		push	es		; preserve current bds
 15339 0000194C 57                      		push	di
 15340 0000194D 1E                      		push	ds
 15341 0000194E 07                      		pop	es		; point es to Bios_Data
 15342 0000194F BF[0009]                		mov	di, tmp_vid	; "NO NAME	 "
 15343 00001952 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 15344                                  					; length of string minus nul
 15345 00001955 F3A4                    		rep movsb		; mov volume label to tmp_vid
 15346                                  		;xor	al, al
 15347                                  		; 02/09/2023
 15348 00001957 91                      		xchg	ax, cx		; ax = 0
 15349 00001958 AA                      		stosb			; null terminate
 15350                                  		;;xor	si, si
 15351                                  		; 02/09/2023
 15352                                  		;xchg	ax, si		; si = 0
 15353 00001959 5F                      		pop	di		; restore current bds
 15354 0000195A 07                      		pop	es
 15355                                  fvid_ret:
 15356                                  		; 02/09/2023
 15357 0000195B 31F6                    		xor	si, si ; 0
 15358                                  				
 15359 0000195D 58                      		pop	ax
 15360                                  		; 10/12/2022
 15361                                  		; cf = 0
 15362                                  		;clc
 15363                                  rvidret:				
 15364 0000195E 5B                      		pop	bx		; restore registers
 15365 0000195F 59                      		pop	cx
 15366 00001960 5A                      		pop	dx
 15367 00001961 C3                      		retn
 15368                                  ; ---------------------------------------------------------------------------
 15369                                  
 15370                                  no_vid:
 15371 00001962 59                      		pop	cx		; clean stack of outer loop counter
 15372                                  		;jmp	short notfound	; not found
 15373                                  		; 02/09/2023
 15374 00001963 EBF6                    		jmp	short fvid_ret
 15375                                  ; ---------------------------------------------------------------------------
 15376                                  
 15377                                  readviderr:				
 15378 00001965 5E                      		pop	si		; trash the outer loop counter
 15379 00001966 5E                      		pop	si		; caller's ax, return error code instead 
 15380 00001967 EBF5                    		jmp	short rvidret
 15381                                  
 15382                                  ; ---------------------------------------------------------------------------
 15383                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 15384                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 15385                                  preset_volid_addr:
 15386 00001969 BE[0009]                		mov	si, tmp_vid	; "NO NAME    "
 15387                                  		;
 15388                                  		; PCDOS 7.1
 15389                                  		;add	di, 125		; BDS.volid
 15390                                  		;mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 15391                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 15392 0000196C 83C74B                  		add	di, 75		; BDS.volid
 15393 0000196F B90C00                  		mov	cx, 12		; VOLID_SIZ
 15394                                  		;
 15395 00001972 FC                      		cld
 15396 00001973 C3                      		retn
 15397                                  
 15398                                  ; =============== S U B	R O U T	I N E =======================================
 15399                                  
 15400                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 15401                                  ;
 15402                                  ; inputs:	es:di has current bds
 15403                                  ; outputs:	bds for drive has volume id from tmp
 15404                                  
 15405                                  transfer_volume_id:
 15406 00001974 57                      		push	di		; copy the volume id from tmp to special drive
 15407                                  		;push	si
 15408 00001975 51                      		push	cx
 15409                                  		; 27/12/2023
 15410 00001976 56                      		push	si
 15411                                  
 15412                                  		;mov	si, tmp_vid	; "NO NAME	 "
 15413                                  		;;add	di, BDS.volid
 15414                                  		;add	di, 75		; BDS.volid
 15415                                  		;;mov	cx, VOLID_SIZ
 15416                                  		;mov	cx, 12		; VOLID_SIZ
 15417                                  		;cld
 15418                                  		; 02/09/2023 (PCDOS 7.1)
 15419 00001977 E8EFFF                  		call	preset_volid_addr
 15420                                  
 15421 0000197A F3A4                    		rep movsb
 15422                                  		
 15423                                  		; 27/12/2023
 15424 0000197C 5E                      		pop	si
 15425                                  chk_volid_ok:
 15426 0000197D 59                      		pop	cx
 15427                                  		;pop	si
 15428 0000197E 5F                      		pop	di
 15429 0000197F C3                      		retn
 15430                                  
 15431                                  ; =============== S U B	R O U T	I N E =======================================
 15432                                  
 15433                                  ;  check_volume_id - compare volume id in tmp area with
 15434                                  ;		     one expected for drive
 15435                                  ;
 15436                                  ;   inputs:	es:di has current bds for drive
 15437                                  ;   outputs:	zero true means it matched
 15438                                  
 15439                                  check_volume_id:
 15440 00001980 57                      		push	di
 15441 00001981 51                      		push	cx
 15442                                  		
 15443                                  		;mov	si, tmp_vid	; "NO NAME	 "
 15444                                  		;;add	di, BDS.volid
 15445                                  		;add	di, 75		; BDS.volid
 15446                                  		;;mov	cx, VOLID_SIZ
 15447                                  		;mov	cx, 12		; VOLID_SIZ
 15448                                  		;cld
 15449                                  		; 02/09/2023 (PCDOS 7.1)
 15450 00001982 E8E4FF                  		call	preset_volid_addr
 15451                                  
 15452 00001985 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 15453                                  		
 15454                                  		; 27/12/2023
 15455                                  		;pop	cx
 15456                                  		;pop	di
 15457                                  		;retn
 15458 00001987 EBF4                    		jmp	short chk_volid_ok
 15459                                  
 15460                                  ; =============== S U B	R O U T	I N E =======================================
 15461                                  
 15462                                  ;   fat_check - see of the fatid has changed in the specified drive.
 15463                                  ;	      - uses the fat id obtained from the boot sector.
 15464                                  ;
 15465                                  ;   inputs:	medbyt is expected fat id
 15466                                  ;		es:di points to current bds
 15467                                  ;
 15468                                  ;   output:	si = -1 if fat id different,
 15469                                  ;		si = 0 otherwise
 15470                                  ;
 15471                                  ;   no other registers changed.
 15472                                  
 15473                                  fat_check:
 15474 00001989 50                      		push	ax
 15475 0000198A 31F6                    		xor	si, si		; say fat id's are same.
 15476 0000198C A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 15477 0000198F 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 15478                                  					; compare it with the bds medbyte
 15479 00001993 7401                    		jz	short okret1	; carry	clear
 15480 00001995 4E                      		dec	si
 15481                                  okret1:
 15482 00001996 58                      		pop	ax
 15483 00001997 C3                      		retn
 15484                                  
 15485                                  ; ---------------------------------------------------------------------------
 15486                                  
 15487                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 15488                                  		;times 7 db 0
 15489                                  
 15490                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)
 15491                                  
 15492                                  		; 09/12/2022
 15493                                  		;times 4 db 0	; 17/10/2022
 15494                                  		;db 4 dup(0)	; times 4 db 0
 15495                                  
 15496                                  ; ---------------------------------------------------------------------------
 15497                                  
 15498                                  		; 09/12/2022
 15499                                  		;db 0
 15500                                  
 15501                                  number2div	equ ($-BCode_start)
 15502                                  number2mod	equ (number2div % 16)
 15503                                  
 15504                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 15505 00001998 00<rep 8h>              		times (16-number2mod) db 0
 15506                                  %endif
 15507                                  
 15508                                  ;align 16
 15509                                  
 15510                                  ; 09/12/2022
 15511                                  BCODE_END	equ $ - BCode_start
 15512                                  ; 29/09/2023
 15513                                  BCODEEND:
 15514                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 15515                                  ; 13/12/2022
 15516                                  SYSINITOFFSET	equ BCODE_END
 15517                                  ; 29/09/2023
 15518                                  ;SYSINITOFFSET	equ $-$$
 15519                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 15520                                  
 15521                                  ; 28/09/2023
 15522                                  S2SIZE equ $-$$
 15523                                  
 15524                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 15525                                  
 15526                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15527                                  ; 01/05/2019 - Retro DOS v4.0 
 15528                                  ; ============================================================================
 15529                                  ; end of BIOSCODE
 15530                                  
 15531                                  ; ----------------------------------------------------------------------------
 15532                                  ; %include sysinit5.s	; 09/12/2022
 15533                                  ; ----------------------------------------------------------------------------
 15534                                  
 15535                                  ;=============================================================================
 15536                                  ; (IO.SYS) SYSINIT SEGMENT 
 15537                                  ;=============================================================================
 15538                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15539                                  
 15540                                  section .SYSINIT vstart=0
 15541                                  
 15542                                  ; ****************************************************************************
 15543                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 15544                                  ; ----------------------------------------------------------------------------
 15545                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 15546                                  ; ----------------------------------------------------------------------------
 15547                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 15548                                  ; ----------------------------------------------------------------------------
 15549                                  ; Assembler: NASM version 2.15
 15550                                  ; ----------------------------------------------------------------------------
 15551                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 15552                                  ; ----------------------------------------------------------------------------
 15553                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 15554                                  ; ----------------------------------------------------------------------------
 15555                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 15556                                  ; source code by Microsoft, 1991 
 15557                                  ; ----------------------------------------------------------------------------
 15558                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 15559                                  ; by Microsoft, 12/10/1983
 15560                                  ; ****************************************************************************
 15561                                  ; main file: 'retrodos4.s'
 15562                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 15563                                  
 15564                                  ; 21/10/2022
 15565                                  ; ----------------------------------------------------------------------------
 15566                                  ; This source code (version) is based on SYSINIT source code of disassembled
 15567                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 15568                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 15569                                  ; ----------------------------------------------------------------------------
 15570                                  ; Binary file splitter & joiner: FFSJ v3.3
 15571                                  
 15572                                  ;--------------------------------------------------------------
 15573                                  ; SYSINIT.TXT (27/01/1983)
 15574                                  ;--------------------------------------------------------------
 15575                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 15576                                  ;over  the  system  initialization  after  the  OEM  bios   has
 15577                                  ;performed any  initialization  it  needs  to  do.   Control is
 15578                                  ;transfered with a long jump to the external  variable  SYSINIT
 15579                                  ;
 15580                                  ;
 15581                                  ;   The OEM  has  the  following  variables declared external:
 15582                                  ;
 15583                                  ;   CURRENT_DOS_LOCATION    WORD
 15584                                  ;
 15585                                  ;This word  contains  the  segment  number of the DOS before it
 15586                                  ;is relocated.  The OEM bios must set this value.
 15587                                  ;
 15588                                  ;   FINAL_DOS_LOCATION      WORD
 15589                                  ;
 15590                                  ;This word contains the segment number of the DOS after SYSINIT
 15591                                  ;moves it.  The OEM bios must set this value.
 15592                                  ;
 15593                                  ;   DEVICE_LIST             DWORD
 15594                                  ;
 15595                                  ;This  double  word  pointer  points  to  the  linked  list  of
 15596                                  ;character and block device drivers.  The  OEM  must  set  this
 15597                                  ;value.
 15598                                  ;
 15599                                  ;   MEMORY_SIZE             WORD
 15600                                  ;
 15601                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 15602                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 15603                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 15604                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 15605                                  ;and read it back until it gets a mismatch.
 15606                                  ;
 15607                                  ;   DEFAULT_DRIVE           BYTE
 15608                                  ;
 15609                                  ;This is  the initial default drive when the system first comes
 15610                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 15611                                  ;it then drive a is assumed.
 15612                                  ;
 15613                                  ;   BUFFERS                 BYTE
 15614                                  ;
 15615                                  ;This is  the  default  number of buffers for the system.  This
 15616                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15617                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 15618                                  ;
 15619                                  ;   FILES                   BYTE
 15620                                  ;
 15621                                  ;This is  the  default  number  of  files for the system.  This
 15622                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15623                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 15624                                  ;
 15625                                  ;   SYSINIT                 FAR
 15626                                  ;
 15627                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 15628                                  ;this label at the end of its INIT code.
 15629                                  ;
 15630                                  ;   The OEM  has  the  following  variables declared public:
 15631                                  ;
 15632                                  ;   RE_INIT                 FAR
 15633                                  ;
 15634                                  ;This is an entry point which allows the BIOS to do some INIT
 15635                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 15636                                  ;PRESERVED.  On entry DS points to the first available memory
 15637                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 15638                                  ;prefix which represents  the  "program"  currently  running.
 15639                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 15640                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 15641                                  ;that  no  memory  is  allocated to it, it is running in free
 15642                                  ;memory.
 15643                                  ;NOTES:
 15644                                  ;     At the time this routine is called SYSINIT occupies the
 15645                                  ;highest 10K of memory ("highest" is determined by the  value
 15646                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 15647                                  ;     Since this is called AFTER DOS is initialized, you can
 15648                                  ;make system calls.  This also implies that the code for this
 15649                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 15650                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 15651                                  ;     If you don't want  anything done just set this to point
 15652                                  ;at a FAR RET instruction.
 15653                                  
 15654                                  ; ----------------------------------------------------------------------
 15655                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 15656                                  ; ----------------------------------------------------------------------
 15657                                  
 15658                                  ;include version.inc
 15659                                  ; ----------------------------------------------------------------------
 15660                                  
 15661                                  ;FALSE   EQU     0
 15662                                  ;TRUE    EQU     0FFFFh
 15663                                  
 15664                                  ;IBMVER	    EQU     TRUE
 15665                                  ;IBMCOPYRIGHT EQU   FALSE
 15666                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 15667                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 15668                                  ;MSVER      EQU     FALSE
 15669                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 15670                                  ;KANJI      EQU     FALSE
 15671                                  
 15672                                  ;(MSDOS 6.0, versiona.inc, 1991)
 15673                                  ; ----------------------------------------------------------------------
 15674                                  ;MAJOR_VERSION  EQU	6
 15675                                  ;;MINOR_VERSION	EQU	0	;6.00
 15676                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 15677                                  
 15678                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 15679                                  ; ----------------------------------------------------------------------
 15680                                  MAJOR_VERSION   EQU	5
 15681                                  MINOR_VERSION   EQU	0
 15682                                  
 15683                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 15684                                  
 15685                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 15686                                  				; currently 0.
 15687                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 15688                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 15689                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 15690                                  
 15691                                  ;      if1
 15692                                  ;      %OUT  ... for DOS Version 5.00 ...
 15693                                  ;      endif
 15694                                  
 15695                                         ;******************************
 15696                                         ;Each assembler program should:
 15697                                         ;  mov ah,030h                   ;DOS Get Version function
 15698                                         ;  int 021h                      ;Version ret. in AX,minor version first
 15699                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 15700                                         ;  jne error_handler             ; EXACT version match.
 15701                                         ;******************************
 15702                                  
 15703                                  ; ----------------------------------------------------------------------
 15704                                  ; device definitions
 15705                                  
 15706                                  ;Attribute bit masks
 15707                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 15708                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 15709                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 15710                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 15711                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 15712                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 15713                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 15714                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 15715                                  
 15716                                  ; The device table list has the form:
 15717                                  struc	SYSDEV
 15718 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 15719 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 15720 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 15721 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 15722 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 15723                                  .size:
 15724                                  endstruc
 15725                                  
 15726                                  ;Static Reguest Header
 15727                                  struc	SRHEAD
 15728 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15729 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15730 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15731 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15732 00000005 ????????????????                	resb 8		;Reserved for queue links
 15733                                  .size:
 15734                                  endstruc
 15735                                  
 15736                                  ;Status word masks
 15737                                  STERR   EQU     8000H           ;Bit 15 - Error
 15738                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15739                                  STDON   EQU     0100H           ;Bit 8 - Done
 15740                                  STECODE EQU     00FFH           ;Error code
 15741                                  WRECODE EQU     0
 15742                                  
 15743                                  ;Function codes
 15744                                  DEVINIT EQU     0               ;Initialization
 15745                                  DINITHL EQU     26              ;Size of init header
 15746                                  DEVMDCH EQU     1               ;Media check
 15747                                  DMEDHL  EQU     15              ;Size of media check header
 15748                                  DEVBPB  EQU     2               ;Get BPB
 15749                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15750                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15751                                  DEVRD   EQU     4               ;Read
 15752                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15753                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15754                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15755                                  DEVIST  EQU     6               ;Input status
 15756                                  DSTATHL EQU     13              ;Size of status header
 15757                                  DEVIFL  EQU     7               ;Input flush
 15758                                  DFLSHL  EQU     15              ;Size of flush header
 15759                                  DEVWRT  EQU     8               ;Write
 15760                                  DEVWRTV EQU     9               ;Write with verify
 15761                                  DEVOST  EQU     10              ;Output status
 15762                                  DEVOFL  EQU     11              ;Output flush
 15763                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15764                                  
 15765                                  ; ----------------------------------------------------------------------
 15766                                  struc	SYS_FCB
 15767 00000000 ??                      .fcb_drive:	resb 1
 15768 00000001 ????????????????        .fcb_name:	resb 8
 15769 00000009 ??????                  .fcb_ext:	resb 3
 15770 0000000C ????                    .fcb_EXTENT:	resw 1
 15771 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15772 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15773                                                          ; word
 15774 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15775 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15776 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15777 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15778                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15779                                                          ; If file, bit 6=0 if dirty
 15780                                                          ; If I/O device, bit 6=0 if EOF (input)
 15781                                                          ;               Bit 5=1 if Raw mode
 15782                                                          ;               Bit 0=1 if console input device
 15783                                                          ;               Bit 1=1 if console output device
 15784                                                          ;               Bit 2=1 if null device
 15785                                                          ;               Bit 3=1 if clock device
 15786 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15787 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15788 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15789 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15790 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15791 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15792                                  .size:
 15793                                  endstruc
 15794                                  
 15795                                  ; ----------------------------------------------------------------------
 15796                                  ; Field definition for I/O buffer information
 15797                                  
 15798                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15799                                  
 15800                                  struc buffinfo
 15801 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15802 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15803 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15804                                  			; SFT table index (bit 7 = 1)
 15805                                  			; = FFh if buffer free
 15806 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15807                                  			;	= 0 if Local device buffer
 15808                                  			; Bit 6 = 1 if buffer dirty
 15809                                  			; Bit 5 = Reserved
 15810                                  			; Bit 4 = Search bit (bit 7 = 1)
 15811                                  			; Bit 3 = 1 if buffer is DATA
 15812                                  			; Bit 2 = 1 if buffer is DIR
 15813                                  			; Bit 1 = 1 if buffer is FAT
 15814                                  			; Bit 0 = Reserved
 15815 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15816                                  ; The next two items are often refed as a word (bit 7 = 0)
 15817 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15818 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15819 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15820 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15821 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15822                                  .size:
 15823                                  endstruc
 15824                                  
 15825                                  %define buf_offset	dword [buf_sector]
 15826                                  			;For bit 7 = 1, this is the byte
 15827                                  			;offset of the start of the buffer in
 15828                                  			;the file pointed to by buf_ID.  Thus
 15829                                  			;the buffer starts at location
 15830                                  			;buf_offset in the file and contains
 15831                                  			;buf_fill bytes.
 15832                                  
 15833                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15834                                  
 15835                                  
 15836                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15837                                  
 15838                                  ;Flag byte masks
 15839                                  buf_isnet	EQU	10000000B
 15840                                  buf_dirty	EQU	01000000B
 15841                                  ;***
 15842                                  buf_visit	EQU	00100000B
 15843                                  ;***
 15844                                  buf_snbuf	EQU	00010000B
 15845                                  
 15846                                  buf_isDATA	EQU	00001000B
 15847                                  buf_isDIR	EQU	00000100B
 15848                                  buf_isFAT	EQU	00000010B
 15849                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15850                                  
 15851                                  buf_NetID	EQU	bufinsiz
 15852                                  
 15853                                  ; ----------------------------------------------------------------------
 15854                                  
 15855                                  ; ----------------------------------------------------------------------
 15856                                  ;**	DPB - Drive Parameter Block
 15857                                  
 15858                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15859                                  
 15860                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15861                                  ;	possibly inaccurate deductions from code study... - jgl
 15862                                  ;
 15863                                  ;	The DPB is DOS's main structure for describing block devices.
 15864                                  ;	It contains info about the "Drive" intermingled with info about
 15865                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15866                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15867                                  ;
 15868                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15869                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15870                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15871                                  
 15872                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15873                                  
 15874                                  ; 12/05/2019 - Retro DOS v4.0
 15875                                  
 15876                                  struc	DPB
 15877 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15878 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15879 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15880 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15881 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15882 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15883 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15884 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15885 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15886 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15887                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15888 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15889 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15890 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15891 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15892 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15893                                  				; check the first time this DPB is used
 15894 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15895 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15896 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15897                                  .size:
 15898                                  endstruc
 15899                                  
 15900                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15901                                  
 15902                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15903                                  
 15904                                  ; ----------------------------------------------------------------------
 15905                                  ; 26/03/2018
 15906                                  
 15907                                  ; IOCTL SUB-FUNCTIONS
 15908                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15909                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15910                                  IOCTL_READ_HANDLE	EQU	2
 15911                                  IOCTL_WRITE_HANDLE	EQU	3
 15912                                  IOCTL_READ_DRIVE	EQU	4
 15913                                  IOCTL_WRITE_DRIVE	EQU	5
 15914                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15915                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15916                                  IOCTL_CHANGEABLE?	EQU	8
 15917                                  IOCTL_SHARING_RETRY	EQU	11
 15918                                  GENERIC_IOCTL_HANDLE	EQU	12
 15919                                  GENERIC_IOCTL		EQU	13
 15920                                  
 15921                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15922                                  RAWIO			EQU	8
 15923                                  
 15924                                  ; RAWIO SUB-FUNCTIONS
 15925                                  GET_DEVICE_PARAMETERS	EQU	60H
 15926                                  SET_DEVICE_PARAMETERS	EQU	40H
 15927                                  READ_TRACK		EQU	61H
 15928                                  WRITE_TRACK		EQU	41H
 15929                                  VERIFY_TRACK		EQU	62H
 15930                                  FORMAT_TRACK		EQU	42H
 15931                                  
 15932                                  ; DEVICETYPE VALUES
 15933                                  MAX_SECTORS_IN_TRACK	EQU	63
 15934                                  DEV_5INCH		EQU	0
 15935                                  DEV_5INCH96TPI		EQU	1
 15936                                  DEV_3INCH720KB		EQU	2
 15937                                  DEV_8INCHSS		EQU	3
 15938                                  DEV_8INCHDS		EQU	4
 15939                                  DEV_HARDDISK		EQU	5
 15940                                  DEV_OTHER		EQU	7
 15941                                  ;DEV_3INCH1440KB	EQU	7
 15942                                  DEV_3INCH2880KB		EQU	9
 15943                                  ; Retro DOS v2.0 - 26/03/2018
 15944                                  ;;DEV_TAPE		EQU	6
 15945                                  ;;DEV_ERIMO		EQU	8
 15946                                  ;DEV_3INCH2880KB	EQU	9
 15947                                  DEV_3INCH1440KB		EQU	10
 15948                                  
 15949                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15950                                  					; CURRENTLY SUPPORT.
 15951                                  MAX_DEV_TYPE		EQU	10
 15952                                  
 15953                                  struc A_SECTORTABLE
 15954 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15955 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15956                                  .size:
 15957                                  endstruc
 15958                                  
 15959                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15960                                  
 15961                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15962                                  ;
 15963                                  ;	The BPB contains information about the disk structure.  It dates
 15964                                  ;	back to the earliest FAT systems and so FAT information is
 15965                                  ;	intermingled with physical driver information.
 15966                                  ;
 15967                                  ;	A boot sector contains a BPB for its device; for other disks
 15968                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15969                                  ;	information in the DPB.
 15970                                  ;
 15971                                  ;	The BDS structure contains a BPB within it.
 15972                                  
 15973                                  struc A_BPB
 15974 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15975 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15976 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15977 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15978 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15979 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15980 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15981 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15982 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15983 0000000F ????                    .BPB_HEADS:		resw	1
 15984 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15985 00000013 ????                    			resw	1
 15986 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15987 00000017 ????                    			resw	1
 15988 00000019 ????????????            			resb	6	; NOTE:  many times these
 15989                                  ;					; 	 6 bytes are omitted
 15990                                  ;					;	 when BPB manipulations
 15991                                  ;					;	 are performed!
 15992                                  .size:
 15993                                  endstruc
 15994                                  
 15995                                  struc A_DEVICEPARAMETERS
 15996 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15997 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15998 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15999 00000004 ????                    .DP_CYLINDERS:		resw	1
 16000 00000006 ??                      .DP_MEDIATYPE:		resb	1
 16001 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 16002 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 16003 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 16004                                  endstruc
 16005                                  
 16006                                  ; ----------------------------------------------------------------------
 16007                                  ; structure, equates for devmark for mem command.
 16008                                  
 16009                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 16010                                  
 16011                                  struc devmark
 16012 00000000 ??                       .id:	    resb 1
 16013 00000001 ????                     .seg:	    resw 1
 16014 00000003 ????                     .size:	    resw 1
 16015 00000005 ??????                   .dum:	    resb 3
 16016 00000008 ????????????????         .filename: resb 8
 16017                                  endstruc
 16018                                  
 16019                                  devmark_stk	equ	'S'
 16020                                  devmark_device	equ	'D'
 16021                                  devmark_ifs	equ	'I'
 16022                                  devmark_buf	equ	'B'
 16023                                  devmark_cds	equ	'L' ; lastdrive
 16024                                  devmark_files	equ	'F'
 16025                                  devmark_fcbs	equ	'X'
 16026                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 16027                                  devmark_ems_stub equ	'E'
 16028                                  
 16029                                  setbrkdone	equ	00000001b
 16030                                  for_devmark	equ	00000010b
 16031                                  not_for_devmark equ	11111101b
 16032                                  
 16033                                  ; ----------------------------------------------------------------------
 16034                                  ; Memory arena structure
 16035                                  
 16036                                  ; 24/03/2019 - Retro DOS v4.0 
 16037                                  ; (MSDOS 6.0, ARENA.INC)
 16038                                  
 16039                                  ;** Arena Header
 16040                                  
 16041                                  struc ARENA
 16042 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 16043 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 16044 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 16045 00000005 ??????                  .RESERVED	resb 3		; reserved
 16046 00000008 ????????????????        .NAME:		resb 8		; owner file name
 16047                                  endstruc
 16048                                  
 16049                                  ; 12/04/2019
 16050                                  
 16051                                  arena_owner_system	EQU 0	; free block indication
 16052                                  
 16053                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 16054                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 16055                                  
 16056                                  ; ----------------------------------------------------------------------
 16057                                  ; Process data block (otherwise known as program header)
 16058                                  
 16059                                  ; 23/03/2019 - Retro DOS v4.0
 16060                                  
 16061                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 16062                                  
 16063                                  FILPERPROC	EQU     20
 16064                                  
 16065                                  struc PDB	; Process_data_block
 16066 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 16067 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 16068 00000004 ??                                      resb 1
 16069 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 16070 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 16071 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 16072 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 16073 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 16074 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 16075 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 16076 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 16077 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 16078 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 16079 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 16080 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 16081 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 16082 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 16083 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 16084 00000042 <res Eh>                .PAD1:		resb 14		; 	
 16085 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 16086 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 16087 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 16088 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 16089 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 16090 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 16091                                  ;.size:
 16092                                  endstruc
 16093                                  
 16094                                  ; ----------------------------------------------------------------------
 16095                                  ; <system call definitions>
 16096                                  
 16097                                  ; 23/03/2019 - Retro DOS v4.0
 16098                                  
 16099                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 16100                                  
 16101                                  ABORT                           EQU 0   ;  0      0
 16102                                  STD_CON_INPUT                   EQU 1   ;  1      1
 16103                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 16104                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 16105                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 16106                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 16107                                  RAW_CON_IO                      EQU 6   ;  6      6
 16108                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 16109                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 16110                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 16111                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 16112                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 16113                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 16114                                  DISK_RESET                      EQU 13  ; 13      D
 16115                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 16116                                  FCB_OPEN                        EQU 15  ; 15      F
 16117                                  FCB_CLOSE                       EQU 16  ; 16     10
 16118                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 16119                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 16120                                  FCB_DELETE                      EQU 19  ; 19     13
 16121                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 16122                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 16123                                  FCB_CREATE                      EQU 22  ; 22     16
 16124                                  FCB_RENAME                      EQU 23  ; 23     17
 16125                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 16126                                  SET_DMA                         EQU 26  ; 26     1A
 16127                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 16128                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 16129                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 16130                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 16131                                  GET_FCB_POSITION                EQU 36  ; 36     24
 16132                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 16133                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 16134                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 16135                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 16136                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 16137                                  GET_DATE                        EQU 42  ; 42     2A
 16138                                  SET_DATE                        EQU 43  ; 43     2B
 16139                                  GET_TIME                        EQU 44  ; 44     2C
 16140                                  SET_TIME                        EQU 45  ; 45     2D
 16141                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 16142                                  ; Extended functionality group
 16143                                  GET_DMA                         EQU 47  ; 47     2F
 16144                                  GET_VERSION                     EQU 48  ; 48     30
 16145                                  KEEP_PROCESS                    EQU 49  ; 49     31
 16146                                  GET_DPB                         EQU 50  ; 50     32
 16147                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 16148                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 16149                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 16150                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 16151                                  CHAR_OPER                       EQU 55  ; 55     37
 16152                                  INTERNATIONAL                   EQU 56  ; 56     38
 16153                                  ;   Directory Group
 16154                                  MKDIR                           EQU 57  ; 57     39
 16155                                  RMDIR                           EQU 58  ; 58     3A
 16156                                  CHDIR                           EQU 59  ; 59     3B
 16157                                  ;   File Group
 16158                                  CREAT                           EQU 60  ; 60     3C
 16159                                  OPEN                            EQU 61  ; 61     3D
 16160                                  CLOSE                           EQU 62  ; 62     3E
 16161                                  READ                            EQU 63  ; 63     3F
 16162                                  WRITE                           EQU 64  ; 64     40
 16163                                  UNLINK                          EQU 65  ; 65     41
 16164                                  LSEEK                           EQU 66  ; 66     42
 16165                                  CHMOD                           EQU 67  ; 67     43
 16166                                  IOCTL                           EQU 68  ; 68     44
 16167                                  XDUP                            EQU 69  ; 69     45
 16168                                  XDUP2                           EQU 70  ; 70     46
 16169                                  CURRENT_DIR                     EQU 71  ; 71     47
 16170                                  ;    Memory Group
 16171                                  ALLOC                           EQU 72  ; 72     48
 16172                                  DEALLOC                         EQU 73  ; 73     49
 16173                                  SETBLOCK                        EQU 74  ; 74     4A
 16174                                  ;    Process Group
 16175                                  EXEC                            EQU 75  ; 75     4B
 16176                                  EXIT                            EQU 76  ; 76     4C
 16177                                  WAITPROCESS			EQU 77  ; 77     4D
 16178                                  FIND_FIRST                      EQU 78  ; 78     4E
 16179                                  ;   Special Group
 16180                                  FIND_NEXT                       EQU 79  ; 79     4F
 16181                                  ; SPECIAL SYSTEM GROUP
 16182                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 16183                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 16184                                  GET_IN_VARS                     EQU 82  ; 82     52
 16185                                  SETDPB                          EQU 83  ; 83     53
 16186                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 16187                                  DUP_PDB                         EQU 85  ; 85     55
 16188                                  RENAME                          EQU 86  ; 86     56
 16189                                  FILE_TIMES                      EQU 87  ; 87     57
 16190                                  ;
 16191                                  ALLOCOPER			EQU 88	; 88     58	
 16192                                  ; Network extention system calls
 16193                                  GetExtendedError		EQU 89	; 89	 59
 16194                                  CreateTempFile			EQU 90	; 90	 5A
 16195                                  CreateNewFile			EQU 91	; 91	 5B
 16196                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 16197                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 16198                                  					;	    CloseByName, CloseUser,
 16199                                  					;	    CloseUserProcess,
 16200                                  					;	    GetOpenFileList
 16201                                  UserOper			EQU 94	; 94	 5E Get and Set
 16202                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 16203                                  xNameTrans			EQU 96	; 96	 60
 16204                                  PathParse			EQU 97	; 97	 61
 16205                                  GetCurrentPSP			EQU 98	; 98	 62
 16206                                  Hongeul 			EQU 99	; 99	 63
 16207                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 16208                                  Set_Printer_Flag		EQU 100 ; 100	 64
 16209                                  GetExtCntry			EQU 101 ; 101	 65
 16210                                  GetSetCdPg			EQU 102 ; 102	 66
 16211                                  ExtHandle			EQU 103 ; 103	 67
 16212                                  Commit				EQU 104 ; 104	 68
 16213                                  GetSetMediaID			EQU 105 ; 105	 69
 16214                                  IFS_IOCTL			EQU 107 ; 107	 6B
 16215                                  ExtOpen 			EQU 108 ; 108	 6C
 16216                                  ;
 16217                                  ;ifdef ROMEXEC
 16218                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 16219                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 16220                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 16221                                  ;endif
 16222                                  ;
 16223                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 16224                                  OEM_C1				EQU 249 ; 249	 F9
 16225                                  OEM_C2				EQU 250 ; 250	 FA
 16226                                  OEM_C3				EQU 251 ; 251	 FB
 16227                                  OEM_C4				EQU 252 ; 252	 FC
 16228                                  OEM_C5				EQU 253 ; 253	 FD
 16229                                  OEM_C6				EQU 254 ; 254	 FE
 16230                                  OEM_C7				EQU 255 ; 255	 FF
 16231                                  
 16232                                  ; ----------------------------------------------------------------------
 16233                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 16234                                  ; ----------------------------------------------------------------------
 16235                                  
 16236                                  ;;	IF	STACKSW
 16237                                  
 16238                                  ;;
 16239                                  ;; Internal Stack Parameters
 16240                                  ;EntrySize		equ	8
 16241                                  ;
 16242                                  ;MinCount		equ	8
 16243                                  ;DefaultCount		equ	9
 16244                                  ;MaxCount		equ	64
 16245                                  ;
 16246                                  ;MinSize 		equ	32
 16247                                  ;DefaultSize		equ	128
 16248                                  ;MaxSize 		equ	512
 16249                                  
 16250                                  ;;	ENDIF
 16251                                  
 16252                                  ; ----------------------------------------------------------------------
 16253                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 16254                                  ; ----------------------------------------------------------------------
 16255                                  					  ;;Rev 3.30 Modification
 16256                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 16257                                  									  
 16258                                  ;*******************************					  
 16259                                  ;System Service call ( Int 15h )					  
 16260                                  ;*******************************					  
 16261                                  ;Function AH = 0C0h, Return system configuration			  
 16262                                  ;For PC and PCJR on return:						  
 16263                                  ;	(AH)	= 80h							  
 16264                                  ;	(CY)	= 1							  
 16265                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 16266                                  ;	(AH)	= 86h							  
 16267                                  ;	(CY)	= 1							  
 16268                                  ;For all others:							  
 16269                                  ;	(AH)	= 0							  
 16270                                  ;	(CY)	= 0							  
 16271                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 16272                                  ; System descriptor :							  
 16273                                  ;	DW	xxxx		length of descriptor in bytes,		  
 16274                                  ;				minimum length = 8			  
 16275                                  ;	DB	xx		model byte				  
 16276                                  ;				0FFh	= PC				  
 16277                                  ;				0FEh	= PC/XT, Portable		  
 16278                                  ;				0FDh	= PC/JR 			  
 16279                                  ;				0FCh	= PC/AT				  
 16280                                  ;				0F9h	= Convertable			  
 16281                                  ;				0F8h	= Model 80			  
 16282                                  ;				0E0 thru 0EFh = reserved		  
 16283                                  ;									  
 16284                                  ;	DB	xx		secondary model byte			  
 16285                                  ;				000h	= PC1				  
 16286                                  ;				000h	= PC/XT, Portable		  
 16287                                  ;				000h	= PC/JR 			  
 16288                                  ;				000h	= PC/AT 			  
 16289                                  ;				001h	= PC/AT Model 339		  
 16290                                  ;				003h	= PC/RT				  
 16291                                  ;				000h	= Convertable			  
 16292                                  ;									  
 16293                                  ;	DB	xx		bios revision level			  
 16294                                  ;				00 for first release, subsequent release  
 16295                                  ;				of code with same model byte and	  
 16296                                  ;				secondary model byte require revison level
 16297                                  ;				to increase by one.			  
 16298                                  ;									  
 16299                                  ;	DB	xx		feature information byte 1		  
 16300                                  ;				X0000000 = 1, bios use DMA channel 3	  
 16301                                  ;					 = 0, DMA channel 3 not used	  
 16302                                  ;									  
 16303                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 16304                                  ;					 = 0, 2nd Interrupt chip not present
 16305                                  ;									  
 16306                                  ;				00X00000 = 1, Real Time Clock present	  
 16307                                  ;					 = 0, Real Time Clock not present 
 16308                                  ;									  
 16309                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 16310                                  ;						called in keyboard interrupt
 16311                                  ;						(Int 09h).		  
 16312                                  ;					 = 0, Keyboard escape sequence not
 16313                                  ;						called. 		  
 16314                                  ;				0000XXXX reserved			  
 16315                                  ;									  
 16316                                  ;	DB	xx		feature information byte 2 - reserved	  
 16317                                  ;									  
 16318                                  ;	DB	xx		feature information byte 2 - reserved	  
 16319                                  ;									  
 16320                                  ;	DB	xx		feature information byte 2 - reserved	  
 16321                                  ;									  
 16322                                  ;	DB	xx		feature information byte 2 - reserved	  
 16323                                  ;									  
 16324                                  
 16325                                  ; 22/03/2019									  
 16326                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 16327 00000000 ????                    .bios_sd_leng:		resw 1				  
 16328 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 16329                                  .bios_sd_scnd_modelbyte: 
 16330 00000003 ??                      			resb 1					  
 16331 00000004 ??                      			resb 1					  
 16332 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 16333 00000006 ????????                			resb 4					  
 16334                                  endstruc					  
 16335                                  									  
 16336                                  ;FeatureByte1	bit map equates 					  
 16337                                  DMAchannel3		equ 10000000b					  
 16338                                  ScndIntController	equ 01000000b					  
 16339                                  RealTimeClock		equ 00100000b					  
 16340                                  KeyEscapeSeq		equ 00010000b					  
 16341                                  					;;End of Modification
 16342                                  
 16343                                  ; ----------------------------------------------------------------------
 16344                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 16345                                  ; ----------------------------------------------------------------------
 16346                                  ; 22/03/2019 - Retro DOS v4.0
 16347                                  
 16348                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 16349                                  
 16350                                  struc SysInitVars
 16351                                  ; MSDOS 3.3
 16352 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 16353 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 16354 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 16355 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 16356 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 16357 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 16358 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 16359 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 16360 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 16361 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 16362 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 16363 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 16364                                  ; MSDOS 6.0
 16365 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 16366 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 16367 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 16368 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 16369                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 16370 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 16371 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 16372 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 16373 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 16374 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 16375 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 16376 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 16377                                  .size:
 16378                                  endstruc
 16379                                  
 16380                                  ;This is added for more information exchage between DOS, BIOS.
 16381                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 16382                                  
 16383                                  ; 22/03/2019
 16384                                  struc SysInitVars_Ext
 16385 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 16386 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 16387                                  endstruc
 16388                                  
 16389                                  ; 09/06/2018
 16390                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 16391                                  SYSI_DPB    equ	0
 16392                                  SYSI_SFT    equ 4
 16393                                  SYSI_CLOCK  equ 8
 16394                                  SYSI_CON    equ 12
 16395                                  SYSI_MAXSEC equ 16
 16396                                  SYSI_BUF    equ 18 		
 16397                                  SYSI_CDS    equ 22
 16398                                  SYSI_FCB    equ 26
 16399                                  SYSI_KEEP   equ 30
 16400                                  SYSI_NUMIO  equ	32
 16401                                  SYSI_NCDS   equ	33
 16402                                  SYSI_DEV    equ 34
 16403                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 16404                                  SYSI_ATTR	  equ 38
 16405                                  SYSI_STRAT	  equ 40
 16406                                  SYSI_INTER	  equ 42
 16407                                  SYSI_NAME	  equ 44
 16408                                  SYSI_SPLICE	  equ 52
 16409                                  SYSI_IBMDOS_SIZE  equ 53
 16410                                  SYSI_IFS_DOSCALL@ equ 55
 16411                                  SYSI_IFS	  equ 59
 16412                                  SYSI_BUFFERS	  equ 63
 16413                                  SYSI_BOOT_DRIVE   equ 67
 16414                                  SYSI_DWMOVE	  equ 68
 16415                                  SYSI_EXT_MEM	  equ 69
 16416                                  
 16417                                  ;The SYSI_BUF of SysInitVars points to the following structure
 16418                                  
 16419                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 16420                                  
 16421                                  struc BUFFINF 	; BUFFINFO
 16422 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 16423 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 16424 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 16425 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 16426                                  
 16427 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 16428                                  				; are in HMA
 16429 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 16430                                  				;  used to read/write on disks
 16431 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 16432 00000015 ????                    .UU_EMS_NPA640:		resw 1
 16433 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 16434 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 16435 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 16436 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 16437 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 16438 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 16439 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 16440                                  .size:
 16441                                  endstruc
 16442                                  
 16443                                  ; ----------------------------------------------------------------------
 16444                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 16445                                  ; ----------------------------------------------------------------------
 16446                                  ; 22/03/2019 - Retro DOS v4.0
 16447                                  
 16448                                  ;**	CDS - Current Directory Structure
 16449                                  ;
 16450                                  ; CDS items are used bu the internal routines to store cluster numbers and
 16451                                  ; network identifiers for each logical name.  The ID field is used dually,
 16452                                  ; both as net ID and for a cluster number for local devices. In the case
 16453                                  ; of local devices, the cluster number will be -1 if there is a potential
 16454                                  ; of the disk being changed or if the path must be recracked.
 16455                                  ;
 16456                                  ;	Some pathnames have special preambles, such as
 16457                                  ;
 16458                                  ;		\\machine\sharename\...
 16459                                  ;	For these pathnames we can't allow ".." processing to back us
 16460                                  ;	up into the special front part of the name.  The CURDIR_END field
 16461                                  ;	holds the address of the seperator character which marks
 16462                                  ;	the split between the special preamble and the regular
 16463                                  ;	path list; ".." processing isn't allowed to back us up past
 16464                                  ;	(i.e., before) CURDIR_END
 16465                                  ;	For the root, it points at the leading /. For net
 16466                                  ;	assignments it points at the end (nul) of the initial assignment:
 16467                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 16468                                  ;	  ^		 ^		     ^
 16469                                  
 16470                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 16471                                  TEMPLEN 	EQU	DIRSTRLEN*2
 16472                                  
 16473                                  struc 		curdir_list
 16474                                  ; MSDOS 3.3
 16475 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 16476 00000043 ????                    .cdir_flags	resw	1		; various flags
 16477 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 16478 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 16479 0000004D ????                    .cdir_usr_word	resw	1
 16480 0000004F ????                    .cdir_end	resw	1		; end of assignment
 16481                                  ; MSDOS 6.0
 16482 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 16483 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 16484 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 16485                                  .size:
 16486                                  endstruc
 16487                                  
 16488                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 16489                                  						; ASM87 which doesn't allow
 16490                                  						; Size directive as a macro
 16491                                  						; argument
 16492                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 16493                                  
 16494                                  ;**	Flag values for CURDIR_FLAGS
 16495                                  
 16496                                  ;Flag word masks
 16497                                  curdir_isnet	EQU	1000000000000000B
 16498                                  curdir_isifs	EQU	1000000000000000B
 16499                                  curdir_inuse	EQU	0100000000000000B
 16500                                  curdir_splice	EQU	0010000000000000B
 16501                                  curdir_local	EQU	0001000000000000B
 16502                                  
 16503                                  ; ----------------------------------------------------------------------
 16504                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 16505                                  ; ----------------------------------------------------------------------
 16506                                  ; 25/03/2019 - Retro DOS v4.0
 16507                                  
 16508                                  ; system file table
 16509                                  
 16510                                  ;**	System File Table SuperStructure
 16511                                  ;
 16512                                  ;	The system file table entries are allocated in contiguous groups.
 16513                                  ;	There may be more than one such groups; the SF "superstructure"
 16514                                  ;	tracks the groups.
 16515                                  
 16516                                  struc	SF
 16517 00000000 ????????                .SFLink:	resd	1
 16518 00000004 ????                    .SFCount:	resw	1		; number of entries
 16519 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 16520                                  .size:
 16521                                  endstruc
 16522                                  
 16523                                  ;**	System file table entry
 16524                                  ;
 16525                                  ;	These are the structures which are at SFTABLE in the SF structure.
 16526                                  
 16527                                  struc	SF_ENTRY
 16528 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 16529                                  					;   if FCB then ref count
 16530 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 16531 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 16532 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 16533                                  					; Bit 15 = 1 if remote file
 16534                                  					;	 = 0 if local file or device
 16535                                  					; Bit 14 = 1 if date/time is not to be
 16536                                  					;   set from clock at CLOSE.  Set by
 16537                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 16538                                  					;   other reseters of the dirty bit
 16539                                  					;   (WRITE)
 16540                                  					; Bit 13 = Pipe bit (reserved)
 16541                                  					;
 16542                                  					; Bits 0-7 (old FCB_devid bits)
 16543                                  					; If remote file or local file, bit
 16544                                  					; 6=0 if dirty Device ID number, bits
 16545                                  					; 0-5 if local file.
 16546                                  					; bit 7=0 for local file, bit 7
 16547                                  					;      =1 for local I/O device
 16548                                  					; If local I/O device, bit 6=0 if EOF (input)
 16549                                  					;		Bit 5=1 if Raw mode
 16550                                  					;		Bit 0=1 if console input device
 16551                                  					;		Bit 1=1 if console output device
 16552                                  					;		Bit 2=1 if null device
 16553                                  					;		Bit 3=1 if clock device
 16554 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 16555                                  					; to device header if local device,
 16556                                  					; points to net device header if
 16557                                  					; remote
 16558 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 16559                                  ;.sf_lstclus:	resw	1 ; *	
 16560 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 16561 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 16562 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 16563 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 16564                                  ;
 16565                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 16566                                  ; ID
 16567                                  ;
 16568 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 16569 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 16570 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 16571                                  ;
 16572                                  ; End of 7 bytes of file-system specific info.
 16573                                  ;
 16574 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 16575                                  					; directory entry.  This is used by
 16576                                  					; close to detect file deleted and
 16577                                  					; disk changed errors.
 16578                                  ; SHARING INFO
 16579 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 16580 0000002D ????                    .sf_UID:	resw	1
 16581 0000002F ????                    .sf_PID:	resw	1
 16582 00000031 ????                    .sf_MFT:	resw	1
 16583 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 16584 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 16585                                  .size:
 16586                                  endstruc
 16587                                  
 16588                                  ; ----------------------------------------------------------------------
 16589                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 16590                                  ; ----------------------------------------------------------------------
 16591                                  ; 11/06/2018 - Retro DOS v3.0
 16592                                  
 16593                                  ;Equates for COUNTRY INFORMATION.
 16594                                  SetCountryInfo		EQU	1	;country info
 16595                                  SetUcase		EQU	2	;uppercase table
 16596                                  SetLcase		EQU	3	;lowercase table (Reserved)
 16597                                  SetUcaseFile		EQU	4	;uppercase file spec table
 16598                                  SetFileList		EQU	5	;valid file character list
 16599                                  SetCollate		EQU	6	;collating sequence
 16600                                  SetDBCS 		EQU	7	;double byte character set
 16601                                  SetALL			EQU	-1	;all the entries
 16602                                  
 16603                                  ;DOS country and code page information table structure.
 16604                                  ;Internally, IBMDOS gives a pointer to this table.
 16605                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 16606                                  ;this structure.
 16607                                  
 16608                                  struc country_cdpg_info ; DOS_country_cdpg_info
 16609 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 16610 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 16611 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 16612 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 16613 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 16614 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 16615                                  
 16616 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 16617 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 16618                                  
 16619 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 16620 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 16621                                  
 16622 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 16623 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 16624                                  
 16625 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 16626 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 16627 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 16628 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 16629 00000067 ????                    .ccDFormat:		resw	1	;date format
 16630 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 16631                                  					;5 byte of (currency symbol+0)
 16632 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 16633 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 16634 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 16635 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 16636 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 16637 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 16638 00000078 ??                      .ccTFormat:		resb	1	;time format
 16639 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 16640 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 16641 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 16642                                  .size:
 16643                                  endstruc
 16644                                  
 16645                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 16646                                  
 16647                                  ; ======================================================================
 16648                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 16649                                  ; ======================================================================
 16650                                  ; 21/03/2019 - Retro DOS v4.0
 16651                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16652                                  
 16653                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 16654                                  ; 21/10/2022
 16655                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 16656                                  ; 22/10/2022
 16657                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 16658                                  ; 09/12/2022
 16659                                  DOSBIOCODESEG equ IOSYSCODESEG
 16660                                  
 16661                                  ; Note: These offset addresses must be chanqed when the code 
 16662                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 16663                                  
 16664                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 16665                                  
 16666                                  ; 09/12/2022
 16667                                  %if 0
 16668                                  
 16669                                  ; 13/05/2019
 16670                                  
 16671                                  ;IsWin386         equ 08CFh
 16672                                  ;V86_Crit_SetFocus equ 08D0h
 16673                                  ; 21/10/2022
 16674                                  IsWin386          equ 08D0h
 16675                                  V86_Crit_SetFocus equ 08D1h 
 16676                                  
 16677                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 16678                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16679                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 16680                                  
 16681                                  ;SysinitPresent	  equ 08FCh
 16682                                  ; 21/10/2022
 16683                                  SysinitPresent	  equ 08FDh
 16684                                  
 16685                                  inHMA		  equ 000Dh
 16686                                  xms		  equ 000Eh
 16687                                  ;FreeHMAPtr	  equ 08F6h
 16688                                  ;multrk_flag	  equ 0533h
 16689                                  ;ec35_flag	  equ 0535h
 16690                                  ;EOT		  equ 012Eh
 16691                                  ; 21/10/2022
 16692                                  FreeHMAPtr	  equ 08F7h
 16693                                  multrk_flag	  equ 052Fh
 16694                                  ec35_flag	  equ 0531h
 16695                                  EOT		  equ 012Ch
 16696                                  
 16697                                  ;NextStack	  equ 08BFh
 16698                                  ;IT_StackLoc	  equ 08C5h
 16699                                  ;IT_StackSize	  equ 08C9h
 16700                                  ; 21/10/2022
 16701                                  NextStack	  equ 08C0h
 16702                                  IT_StackLoc	  equ 08C6h
 16703                                  IT_StackSize	  equ 08CAh
 16704                                  
 16705                                  ;MoveDOSIntoHMA	  equ 08F8h
 16706                                  ; 21/10/2022
 16707                                  MoveDOSIntoHMA	  equ 08F9h
 16708                                  
 16709                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 16710                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 16711                                  ; 21/10/2022
 16712                                  INT19SEM equ 0640h ; (iosys5.txt)
 16713                                  I19_LST  equ 0641h ; (iosys5.txt)
 16714                                  
 16715                                  %endif
 16716                                  
 16717                                  ; 09/12/2022
 16718                                  seg_reinit equ _seg_reinit
 16719                                  ec35_flag  equ ec35flag		
 16720                                  INT19SEM   equ int19sem
 16721                                  I19_LST    equ i19_lst
 16722                                  
 16723                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 16724                                  INT19OLD08 equ I19_LST+6
 16725                                  INT19OLD09 equ I19_LST+11
 16726                                  INT19OLD0A equ I19_LST+16
 16727                                  INT19OLD0B equ I19_LST+21
 16728                                  INT19OLD0C equ I19_LST+26
 16729                                  INT19OLD0D equ I19_LST+31
 16730                                  INT19OLD0E equ I19_LST+36
 16731                                  INT19OLD70 equ I19_LST+41
 16732                                  INT19OLD72 equ I19_LST+46
 16733                                  INT19OLD73 equ I19_LST+51
 16734                                  INT19OLD74 equ I19_LST+56
 16735                                  INT19OLD76 equ I19_LST+61
 16736                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16737                                  
 16738                                  ; 09/12/2022
 16739                                  %if 0
 16740                                  
 16741                                  ;keyrd_func	equ 04E9h
 16742                                  ;keysts_func	equ 04EAh
 16743                                  ;t_switch	equ 04F6h
 16744                                  ; 21/10/2022
 16745                                  keyrd_func	equ 04E5h
 16746                                  keysts_func	equ 04E6h
 16747                                  t_switch	equ 04F2h
 16748                                  
 16749                                  ; 22/10/2022
 16750                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16751                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16752                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16753                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16754                                  
 16755                                  %endif
 16756                                  
 16757                                  ; 09/12/2022
 16758                                  BCODESTART	equ BIOSDATAWORD
 16759                                  RE_INIT		equ re_init
 16760                                  
 16761                                  ; ----------------------------------------------------------------------
 16762                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16763                                  ; ----------------------------------------------------------------------
 16764                                  ; 15/04/2019 - Retro DOS v4.0
 16765                                  
 16766                                  CONFIG_BEGIN        equ  '['
 16767                                  CONFIG_BREAK        equ  'C'
 16768                                  CONFIG_BUFFERS      equ  'B'
 16769                                  CONFIG_COMMENT      equ  'Y'
 16770                                  CONFIG_COUNTRY      equ  'Q'
 16771                                  CONFIG_DEVICE       equ  'D'
 16772                                  CONFIG_DEVICEHIGH   equ  'U'
 16773                                  CONFIG_DOS          equ  'H'
 16774                                  CONFIG_DRIVPARM     equ  'P'
 16775                                  CONFIG_FCBS         equ  'X'
 16776                                  CONFIG_FILES        equ  'F'
 16777                                  CONFIG_INCLUDE      equ  'J'
 16778                                  CONFIG_INSTALL      equ  'I'
 16779                                  CONFIG_INSTALLHIGH  equ  'W'
 16780                                  CONFIG_LASTDRIVE    equ  'L'
 16781                                  CONFIG_MENUCOLOR    equ  'R'
 16782                                  CONFIG_MENUDEFAULT  equ  'A'
 16783                                  CONFIG_MENUITEM     equ  'E'
 16784                                  CONFIG_MULTITRACK   equ  'M'
 16785                                  CONFIG_NUMLOCK      equ  'N'
 16786                                  CONFIG_REM          equ  '0'
 16787                                  CONFIG_SEMICOLON    equ  ';'
 16788                                  CONFIG_SET          equ  'V'
 16789                                  CONFIG_SHELL        equ  'S'
 16790                                  CONFIG_STACKS       equ  'K'
 16791                                  CONFIG_SUBMENU      equ  'O'
 16792                                  CONFIG_SWITCHES     equ  '1'
 16793                                  
 16794                                  CONFIG_UNKNOWN      equ  'Z'
 16795                                  
 16796                                  CONFIG_OPTION_QUERY equ 80h
 16797                                  
 16798                                  ; ----------------------------------------------------------------------
 16799                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16800                                  ; ----------------------------------------------------------------------
 16801                                  ; 21/03/2019 - Retro DOS v4.0
 16802                                  
 16803                                  true	equ	0FFFFh
 16804                                  false	equ	0
 16805                                  cr	equ	13
 16806                                  lf	equ	10
 16807                                  tab	equ	9
 16808                                  
 16809                                  multMULT	   equ	4Ah
 16810                                  multMULTGETHMAPTR  equ	1
 16811                                  multMULTALLOCHMA   equ	2
 16812                                  
 16813                                  ;NOEXEC    equ	FALSE
 16814                                  
 16815                                  stacksw    equ	true	;include switchable hardware stacks
 16816                                  mycds_size equ	88	;size of curdir_list. if it is not
 16817                                  			;the same, then will generate compile error.
 16818                                  
 16819                                  entrysize   equ     8
 16820                                  
 16821                                  mincount    equ     8
 16822                                  defaultcount equ    9
 16823                                  maxcount    equ     64
 16824                                  
 16825                                  minsize     equ     32
 16826                                  defaultsize equ     128
 16827                                  maxsize     equ     512
 16828                                  
 16829                                  ;%define allocbyte  byte [es:bp+0]
 16830                                  ;%define intlevel   byte [es:bp+1]
 16831                                  ;%define savedsp    word [es:bp+2]
 16832                                  ;%define savedss    word [es:bp+4]
 16833                                  ;%define newsp	    word [es:bp+6]
 16834                                  
 16835                                  allocbyte   equ     0
 16836                                  intlevel    equ     1
 16837                                  savedsp     equ     2
 16838                                  savedss     equ     4
 16839                                  newsp       equ     6
 16840                                  
 16841                                  free	    equ     0
 16842                                  allocated   equ     1
 16843                                  overflowed  equ     2
 16844                                  clobbered   equ     3
 16845                                  
 16846                                  ;---------------------------------------
 16847                                  ; external variable defined in ibmbio module for multi-track
 16848                                  
 16849                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16850                                  			  ; it on after handling config.sys file as a
 16851                                  			  ; default value,if multrk_flag = multrk_off1.
 16852                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16853                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16854                                  
 16855                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16856                                  
 16857                                  SYSINIT$:
 16858                                  	;IF	STACKSW 
 16859                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16860                                  	; include STKMES.INC	;Fatal stack error message
 16861                                  	;   public Endstackcode
 16862                                  ;Endstackcode	label byte
 16863                                  	;ENDIF
 16864                                  
 16865                                  ; 05/07/2018
 16866                                  ; ----------------------------------------------------------------------
 16867                                  ; 04/06/2018 - Retro DOS v3.0
 16868                                  
 16869                                  ; ----------------------------------------------------------------------
 16870                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16871                                  ; ----------------------------------------------------------------------
 16872                                  
 16873                                  ;	MSStack.inc
 16874                                  ;
 16875                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16876                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16877                                  ;	a standard header structure.
 16878                                  ;	Fyi, the following shows the relations between
 16879                                  ;	the interrupt vector and interrupt level.
 16880                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16881                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16882                                  ;	MSSTACK module modifies the following interrupt vectors
 16883                                  ;	to meet the standard Interrupt Sharing standard;
 16884                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16885                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16886                                  ;	should be initialized to indicat whether this interrupt handler is
 16887                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16888                                  ;	program header is initialized in STKINIT.INC module.
 16889                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16890                                  ;
 16891                                  
 16892                                  ;  User specifies the number of stack elements - default = 9
 16893                                  ;						 minimum = 8
 16894                                  ;						 maximum = 64
 16895                                  ;
 16896                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16897                                  ;
 16898                                  ;  Picks a stack from pool of stacks and switches to it
 16899                                  ;
 16900                                  ;  Calls the previously saved interrupt vector after pushing flags
 16901                                  ;
 16902                                  ;  On return, returns the stack to the stack pool
 16903                                  ;
 16904                                  
 16905                                  ; This is a modification of STACKS:
 16906                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16907                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16908                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16909                                  ;    . Allows system to work if the only stack that got too big was the most
 16910                                  ;      deeply nested one
 16911                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16912                                  ; 4. Does not intercept any interupts on a PCjr.
 16913                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16914                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16915                                  
 16916                                  		;EVEN
 16917                                  ;align 2
 16918                                  		; 21/10/2022
 16919                                  
 16920 00000000 0000                    		dw	0	; spare field but leave these in order
 16921 00000002 0000                    stackcount:	dw	0
 16922 00000004 0000                    stackat: 	dw	0
 16923 00000006 0000                    stacksize:	dw	0
 16924 00000008 0000                    stacks:		dw	0
 16925 0000000A 0000                    		dw	0
 16926                                  
 16927 0000000C [0800]                  firstentry:	dw	stacks
 16928 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16929 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16930                                  
 16931                                  ;***********************************************************************
 16932                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16933                                  
 16934                                  ; ----------------------------------------------------------------------
 16935                                  
 16936 00000012 00000000                old02:	dd	0
 16937                                  
 16938                                  int02:
 16939                                  
 16940                                  ; *********************************************************************
 16941                                  ;
 16942                                  ; this is special support for the pc convertible / nmi handler
 16943                                  ;
 16944                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16945                                  ;	caused by using the "out" instructions to certain ports. when this
 16946                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16947                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16948                                  ;	includes other type of interrupts (hardware and software), and
 16949                                  ;	also includes other type of nmi's. when any nmi has occured,
 16950                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16951                                  ;	the software takes specific steps to allow further interrupting.
 16952                                  ;
 16953                                  ;	for pc convertible, the situation where the nmi is generated by the
 16954                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16955                                  ;	otherwords, it is actually a "restartable exception". in this
 16956                                  ;	case, the software handler must be able to get to the stack in
 16957                                  ;	order to figure out what instruction caused the problem, where
 16958                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16959                                  ;	we will not switch stacks in this situation. this situation is
 16960                                  ;	detected by interrogating port 62h, and checking for a bit value
 16961                                  ;	of 80h. if set, *****do not switch stacks*****.
 16962                                  ;
 16963                                  ; *********************************************************************
 16964                                  
 16965 00000016 50                      	push	ax
 16966 00000017 06                      	push	es
 16967 00000018 B800F0                  	mov	ax,0F000h
 16968 0000001B 8EC0                    	mov	es,ax
 16969                                  	; 02/11/2022
 16970 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16971 00000023 07                      	pop	es
 16972 00000024 750C                    	jne	short normal02
 16973                                  
 16974 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16975                                  				; 0-3: values of DIP switches
 16976                                  				; 5: 1=Timer 2 channel out
 16977                                  				; 6: 1=I/O channel check
 16978                                  				; 7: 1=RAM parity check error occurred.
 16979 00000028 A880                    	test	al,80h
 16980 0000002A 7406                    	jz	short normal02
 16981                                  special02:
 16982 0000002C 58                      	pop	ax
 16983 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16984                                  normal02:
 16985 00000032 58                      	pop	ax
 16986 00000033 E81101                  	call	do_int_stacks
 16987 00000036 [1200]                  	dw	old02
 16988                                  
 16989                                  ; ----------------------------------------------------------------------
 16990                                  
 16991 00000038 00000000                old08:	dd	0
 16992                                  
 16993                                  int08:
 16994 0000003C E80801                  	call	do_int_stacks
 16995 0000003F [3800]                  	dw	old08
 16996                                  
 16997                                  ; ----------------------------------------------------------------------
 16998                                  
 16999 00000041 00000000                old09:	dd	0
 17000                                  
 17001                                  int09:
 17002                                  
 17003                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 17004                                  ; as its first instruction for compatibility reasons
 17005                                  
 17006 00000045 EB02                    	jmp	short keyboard_lbl
 17007 00000047 90                      	nop
 17008 00000048 00                      	db	0
 17009                                  
 17010                                  keyboard_lbl:
 17011 00000049 E8FB00                  	call	do_int_stacks
 17012 0000004C [4100]                  	dw	old09
 17013                                  
 17014                                  ; ----------------------------------------------------------------------
 17015                                  
 17016 0000004E 00000000                old70:	dd	0
 17017                                  
 17018                                  int70:
 17019 00000052 E8F200                  	call	do_int_stacks
 17020 00000055 [4E00]                  	dw	old70
 17021                                  
 17022                                  ; ----------------------------------------------------------------------
 17023                                  
 17024                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 17025                                  ;public	int&a
 17026                                  ;public	old&a
 17027                                  ;public	firstflag&a
 17028                                  ;int&a	proc	far
 17029                                  ;	jmp	short entry_int&a&_stk
 17030                                  ;old&a	dd	  0		;forward pointer
 17031                                  ;	dw	  424bh 	;compatible signature for int. sharing
 17032                                  ;firstflag&a db   0		;the firstly hooked.
 17033                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 17034                                  ;	db	7 dup (0)	;reserved for future.
 17035                                  ;entry_int&a&_stk:
 17036                                  ;	call	do_int_stacks
 17037                                  ;	dw	old&a
 17038                                  ;intret_&a:
 17039                                  ;	iret
 17040                                  ;int&a	endp
 17041                                  ;	endm
 17042                                  
 17043                                  ; ----------------------------------------------------------------------
 17044                                  
 17045                                  int0A:
 17046 00000057 EB10                    	jmp	short entry_int0A_stk
 17047 00000059 00000000                old0A:	dd	0	
 17048 0000005D 4B42                    	dw	424Bh
 17049                                  firstflag0A:
 17050 0000005F 00                      	db	0
 17051 00000060 EB0C                    	jmp	short intret_0A
 17052 00000062 00<rep 7h>              	times	7 db 0
 17053                                  
 17054                                  entry_int0A_stk:
 17055 00000069 E8DB00                  	call	do_int_stacks
 17056 0000006C [5900]                  	dw	old0A
 17057                                  intret_0A:
 17058 0000006E CF                      	iret
 17059                                  
 17060                                  ; ----------------------------------------------------------------------
 17061                                  
 17062                                  int0B:
 17063 0000006F EB10                    	jmp	short entry_int0B_stk
 17064 00000071 00000000                old0B:	dd	0	
 17065 00000075 4B42                    	dw	424Bh
 17066                                  firstflag0B:
 17067 00000077 00                      	db	0
 17068 00000078 EB0C                    	jmp	short intret_0B
 17069 0000007A 00<rep 7h>              	times	7 db 0
 17070                                  
 17071                                  entry_int0B_stk:
 17072 00000081 E8C300                  	call	do_int_stacks
 17073 00000084 [7100]                  	dw	old0B
 17074                                  intret_0B:
 17075 00000086 CF                      	iret
 17076                                  
 17077                                  ; ----------------------------------------------------------------------
 17078                                  
 17079                                  int0C:
 17080 00000087 EB10                    	jmp	short entry_int0C_stk
 17081 00000089 00000000                old0C:	dd	0	
 17082 0000008D 4B42                    	dw	424Bh
 17083                                  firstflag0C:
 17084 0000008F 00                      	db	0
 17085 00000090 EB0C                    	jmp	short intret_0C
 17086 00000092 00<rep 7h>              	times	7 db 0
 17087                                  
 17088                                  entry_int0C_stk:
 17089 00000099 E8AB00                  	call	do_int_stacks
 17090 0000009C [8900]                  	dw	old0C
 17091                                  intret_0C:
 17092 0000009E CF                      	iret
 17093                                  
 17094                                  ; ----------------------------------------------------------------------
 17095                                  
 17096                                  int0D:
 17097 0000009F EB10                    	jmp	short entry_int0D_stk
 17098 000000A1 00000000                old0D:	dd	0	
 17099 000000A5 4B42                    	dw	424Bh
 17100                                  firstflag0D:
 17101 000000A7 00                      	db	0
 17102 000000A8 EB0C                    	jmp	short intret_0D
 17103 000000AA 00<rep 7h>              	times	7 db 0
 17104                                  
 17105                                  entry_int0D_stk:
 17106 000000B1 E89300                  	call	do_int_stacks
 17107 000000B4 [A100]                  	dw	old0D
 17108                                  intret_0D:
 17109 000000B6 CF                      	iret
 17110                                  
 17111                                  ; ----------------------------------------------------------------------
 17112                                  
 17113                                  int0E:
 17114 000000B7 EB10                    	jmp	short entry_int0E_stk
 17115 000000B9 00000000                old0E:	dd	0	
 17116 000000BD 4B42                    	dw	424Bh
 17117                                  firstflag0E:
 17118 000000BF 00                      	db	0
 17119 000000C0 EB0C                    	jmp	short intret_0E
 17120 000000C2 00<rep 7h>              	times	7 db 0
 17121                                  
 17122                                  entry_int0E_stk:
 17123 000000C9 E87B00                  	call	do_int_stacks
 17124 000000CC [B900]                  	dw	old0E
 17125                                  intret_0E:
 17126 000000CE CF                      	iret
 17127                                  
 17128                                  ; ----------------------------------------------------------------------
 17129                                  
 17130                                  int72:
 17131 000000CF EB10                    	jmp	short entry_int72_stk
 17132 000000D1 00000000                old72:	dd	0	
 17133 000000D5 4B42                    	dw	424Bh
 17134                                  firstflag72:
 17135 000000D7 00                      	db	0
 17136 000000D8 EB0C                    	jmp	short intret_72
 17137 000000DA 00<rep 7h>              	times	7 db 0
 17138                                  
 17139                                  entry_int72_stk:
 17140 000000E1 E86300                  	call	do_int_stacks
 17141 000000E4 [D100]                  	dw	old72
 17142                                  intret_72:
 17143 000000E6 CF                      	iret
 17144                                  
 17145                                  ; ----------------------------------------------------------------------
 17146                                  
 17147                                  int73:
 17148 000000E7 EB10                    	jmp	short entry_int73_stk
 17149 000000E9 00000000                old73:	dd	0	
 17150 000000ED 4B42                    	dw	424Bh
 17151                                  firstflag73:
 17152 000000EF 00                      	db	0
 17153 000000F0 EB0C                    	jmp	short intret_73
 17154 000000F2 00<rep 7h>              	times	7 db 0
 17155                                  
 17156                                  entry_int73_stk:
 17157 000000F9 E84B00                  	call	do_int_stacks
 17158 000000FC [E900]                  	dw	old73
 17159                                  intret_73:
 17160 000000FE CF                      	iret
 17161                                  
 17162                                  ; ----------------------------------------------------------------------
 17163                                  
 17164                                  int74:
 17165 000000FF EB10                    	jmp	short entry_int74_stk
 17166 00000101 00000000                old74:	dd	0	
 17167 00000105 4B42                    	dw	424Bh
 17168                                  firstflag74:
 17169 00000107 00                      	db	0
 17170 00000108 EB0C                    	jmp	short intret_74
 17171 0000010A 00<rep 7h>              	times	7 db 0
 17172                                  
 17173                                  entry_int74_stk:
 17174 00000111 E83300                  	call	do_int_stacks
 17175 00000114 [0101]                  	dw	old74
 17176                                  intret_74:
 17177 00000116 CF                      	iret
 17178                                  
 17179                                  ; ----------------------------------------------------------------------
 17180                                  
 17181                                  int76:
 17182 00000117 EB10                    	jmp	short entry_int76_stk
 17183 00000119 00000000                old76:	dd	0	
 17184 0000011D 4B42                    	dw	424Bh
 17185                                  firstflag76:
 17186 0000011F 00                      	db	0
 17187 00000120 EB0C                    	jmp	short intret_76
 17188 00000122 00<rep 7h>              	times	7 db 0
 17189                                  
 17190                                  entry_int76_stk:
 17191 00000129 E81B00                  	call	do_int_stacks
 17192 0000012C [1901]                  	dw	old76
 17193                                  intret_76:
 17194 0000012E CF                      	iret
 17195                                  
 17196                                  ; ----------------------------------------------------------------------
 17197                                  
 17198                                  int77:
 17199 0000012F EB10                    	jmp	short entry_int77_stk
 17200 00000131 00000000                old77:	dd	0	
 17201 00000135 4B42                    	dw	424Bh
 17202                                  firstflag77:
 17203 00000137 00                      	db	0
 17204 00000138 EB0C                    	jmp	short intret_77
 17205 0000013A 00<rep 7h>              	times	7 db 0
 17206                                  
 17207                                  entry_int77_stk:
 17208 00000141 E80300                  	call	do_int_stacks
 17209 00000144 [3101]                  	dw	old77
 17210                                  intret_77:
 17211 00000146 CF                      	iret
 17212                                  
 17213                                  ; ----------------------------------------------------------------------
 17214                                  
 17215                                  ;********************************************************************
 17216                                  ;common routines
 17217                                  ;********************************************************************
 17218                                  
 17219                                  ; do interrupt stack switching. the fake return address holds
 17220                                  ; a pointer to the far-pointer of the actual interrupt
 17221                                  ; service routine
 17222                                  
 17223                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 17224                                  ; 21/03/2019 - Retro DOS v4.0
 17225                                  
 17226                                  ;allocbyte   equ 0
 17227                                  ;intlevel    equ 1
 17228                                  ;savedsp     equ 2
 17229                                  ;savedss     equ 4
 17230                                  ;newsp       equ 6
 17231                                  
 17232                                  do_int_stacks:
 17233 00000147 50                      	push	ax
 17234 00000148 55                      	push	bp
 17235 00000149 06                      	push	es
 17236 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 17237 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 17238 00000154 B001                    	mov	al,allocated ; 1
 17239                                  	; 21/10/2022
 17240                                  	;xchg	[es:bp+allocbyte],al 
 17241                                  	; 11/12/2022
 17242 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 17243 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 17244 0000015C 754F                    	jne	short notfree02
 17245                                  
 17246 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 17247                                  
 17248                                  found02:
 17249 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 17250 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 17251                                  
 17252 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 17253                                  
 17254 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 17255                                  	; 21/10/2022
 17256                                  	;mov	bp,[es:bp+6]
 17257                                  	; 11/12/2022
 17258                                  	;cmp	[es:bp+0],ax	
 17259 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 17260 00000176 7542                    	jne	short foundbad02
 17261                                  
 17262                                  	;mov	ax,es			; point ss,sp to the new stack
 17263                                  	;mov	es,bp
 17264                                  	;mov	bp,sp
 17265                                  	;mov	bp,[bp+6]
 17266                                  	;mov	ss,ax
 17267                                  	;mov	sp,es
 17268                                  	;mov	es,ax
 17269                                  	;mov	bp,[cs:bp]
 17270                                  
 17271                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 17272 00000178 55                      	push    bp
 17273 00000179 89E5                    	mov     bp,sp
 17274 0000017B 8B4608                  	mov     ax,[bp+8]
 17275 0000017E 5D                      	pop     bp
 17276 0000017F 06                      	push    es
 17277 00000180 17                      	pop     ss
 17278 00000181 89EC                    	mov     sp,bp
 17279 00000183 89C5                    	mov     bp,ax
 17280                                  	; 11/12/2022
 17281                                  	;mov	bp,[cs:bp+0]	
 17282 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 17283                                  
 17284 00000189 9C                      	pushf				; go execute the real interrupt handler
 17285                                  	; 11/12/2022
 17286 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 17287                                  	; 21/10/2022
 17288                                  	;call	far [cs:bp+0]
 17289                                  
 17290 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 17291                                  	; 11/12/2022
 17292 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 17293                                  	; 21/10/2022
 17294                                  	;mov	bp,[es:bp+0]
 17295 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 17296 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 17297                                  
 17298                                  	; 11/12/2022
 17299                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 17300                                  	; 21/10/2022
 17301 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 17302 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 17303                                  
 17304 000001A6 07                      	pop	es
 17305 000001A7 5D                      	pop	bp			; saved on entry
 17306 000001A8 58                      	pop	ax			; saved on entry
 17307 000001A9 83C402                  	add	sp,2
 17308 000001AC CF                      	iret				; done with this interrupt
 17309                                  
 17310                                  notfree02:
 17311 000001AD 3C01                    	cmp	al,allocated		; error flag
 17312 000001AF 7404                    	je	short findnext02	;  no, continue
 17313                                  	; 11/12/2022
 17314                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 17315                                  	; 21/10/2022
 17316 000001B1 26864600                	xchg	[es:bp],al
 17317                                  
 17318                                  findnext02:
 17319 000001B5 E81200                  	call	longpath
 17320 000001B8 EBAA                    	jmp	short found02
 17321                                  
 17322                                  foundbad02:
 17323 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 17324 000001BF 72F4                    	jc	short findnext02
 17325 000001C1 89C5                    	mov	bp,ax			; flag this entry
 17326                                  	; 11/12/2022
 17327                                  	;mov	byte [es:bp+allocbyte],clobbered
 17328                                  	; 21/10/2022
 17329 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 17330 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 17331                                  
 17332                                  ; ----------------------------------------------------------------------
 17333                                  
 17334                                  ; Common routines
 17335                                  
 17336                                  longpath:
 17337                                  	; 21/03/2019
 17338 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 17339                                  lploopp:
 17340                                  	; 11/12/2022
 17341                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 17342                                  	; 21/10/2022
 17343 000001CF 26807E0000              	cmp	byte [es:bp],free
 17344 000001D4 7512                    	jne	short inuse		;  no, try next one
 17345                                  
 17346 000001D6 B001                    	mov	al,allocated
 17347                                  	; 11/12/2022
 17348                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 17349                                  	; 21/10/2022
 17350 000001D8 26864600                	xchg	[es:bp],al
 17351 000001DC 3C00                    	cmp	al,free 		; is it still free?
 17352 000001DE 7414                    	je	short found		;  yes, go use it
 17353                                  
 17354 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 17355 000001E2 7404                    	je	short inuse		;  no, check the next one
 17356                                  
 17357                                  	; 11/12/2022
 17358                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 17359                                  	; 21/10/2022
 17360 000001E4 26884600                	mov	[es:bp],al
 17361                                  inuse:
 17362 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 17363 000001ED 7406                    	je	short fatal
 17364 000001EF 83ED08                  	sub	bp,entrysize
 17365 000001F2 EBDB                    	jmp	short lploopp
 17366                                  found:
 17367 000001F4 C3                      	retn
 17368                                  fatal:
 17369 000001F5 1E                      	push	ds
 17370 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 17371 000001F9 8ED8                    	mov	ds,ax
 17372 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 17373 00000200 1F                      	pop	ds
 17374 00000201 7504                    	jne	short skip_nmis
 17375                                  
 17376 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 17377 00000205 E672                    	out	72h,al
 17378                                  
 17379                                  skip_nmis:
 17380 00000207 FA                      	cli				; disable and mask
 17381 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 17382 0000020A E621                    	out	021h,al
 17383 0000020C E6A1                    	out	0A1h,al
 17384                                  
 17385 0000020E 8CCE                    	mov	si,cs
 17386 00000210 8EDE                    	mov	ds,si
 17387 00000212 BE[3902]                	mov	si,fatal_msg
 17388                                  ;SR;
 17389                                  ;   We set all foci to this VM to issue the stack failure message
 17390                                  ;
 17391 00000215 50                      	push	ax
 17392 00000216 1E                      	push	ds
 17393                                  	;;mov	ax,Bios_Data ; 0070h
 17394                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17395                                  	; 21/10/2022
 17396 00000217 B87000                  	mov	ax,DOSBIODATASEG
 17397 0000021A 8ED8                    	mov	ds,ax
 17398                                  
 17399                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 17400 0000021C F606[C508]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 17401 00000221 1F                      	pop	ds
 17402 00000222 58                      	pop	ax
 17403 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 17404                                  
 17405                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 17406                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 17407                                  	; 21/10/2022
 17408 00000225 9A[C608]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 17409                                  ;
 17410                                  ;SR; We do not bother about the returned status of this call. 
 17411                                  ;
 17412                                  fatal_loop:
 17413 0000022A AC                      	lodsb
 17414 0000022B 3C24                    	cmp	al,'$'
 17415 0000022D 7408                    	je	short fatal_done
 17416                                  
 17417 0000022F B307                    	mov	bl,7
 17418 00000231 B40E                    	mov	ah,14
 17419 00000233 CD10                    	int	10h			; whoops, this enables ints
 17420 00000235 EBF3                    	jmp	short fatal_loop
 17421                                  
 17422                                  fatal_done:
 17423 00000237 EBFE                    	jmp	short fatal_done
 17424                                  
 17425                                  
 17426                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17427                                  ; ----------------------------------------------------------------------
 17428                                  ;	include msbio.cl5		; fatal stack error message
 17429                                  
 17430                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 17431                                  
 17432                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 17433                                  ; ----------------------------------------------------------------------
 17434                                  ; 04/06/2018 - Retro DOS v3.0
 17435                                  
 17436                                  fatal_msg:
 17437 00000239 0D0A                    	db	0Dh,0Ah
 17438 0000023B 070D0A                  	db	7,0Dh,0Ah
 17439 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 17439 00000247 737461636B206F7665-
 17439 00000250 72666C6F770D0A     
 17440 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 17440 00000260 6C7465640D0A24     
 17441                                  
 17442                                  endstackcode:
 17443                                  
 17444                                  ; ----------------------------------------------------------------------
 17445                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 17446                                  ; ----------------------------------------------------------------------
 17447                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 17448                                  
 17449                                  ; 22/03/2019 - Retro DOS v4.0
 17450                                  
 17451                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 17452                                  
 17453                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 17454                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 17455                                  
 17456                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17457                                  ; ----------------------------------------------------------------------
 17458                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 17459                                  
 17460                                  SYSINIT:	
 17461 00000267 E91C02                          JMP	GOINIT
 17462                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 17463                                  
 17464                                  ; ----------------------------------------------------------------------
 17465                                  
 17466                                  struc DDHighInfo
 17467 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 17468 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 17469 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 17470                                  endstruc
 17471                                  
 17472                                  ; 22/03/2019 - Retro DOS v4.0
 17473                                  
 17474 0000026A 00                      runhigh: db	0
 17475                                  
 17476                                  ; 02/11/2022
 17477                                  ;align 4
 17478                                  
 17479                                  DOSINFO: 
 17480 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 17481                                  ;MSDOS:
 17482                                  dos_temp_location: ; dword ; MSDOS 6.0
 17483                                  dosinit:		; MSDOS 6.0
 17484 0000026F 0000                    	dw	0
 17485                                  
 17486                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17487                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 17488                                  ;	dw	0
 17489                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 17490                                  
 17491                                  CURRENT_DOS_LOCATION:
 17492 00000271 0000                    	dw	0
 17493                                  
 17494                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 17495                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 17496                                  
 17497                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17498                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 17499                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17500                                  
 17501                                  DEVICE_LIST:
 17502 00000273 00000000                	dd	0
 17503                                  
 17504                                  ; 04/06/2018 - Retro DOS v3.0
 17505                                  ; 28/03/2018
 17506                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 17507                                  ;
 17508                                  sysi_country:	
 17509 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 17510                                  
 17511                                  ; MSDOS 6.0
 17512 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 17513                                  
 17514 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 17515 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 17516                                  
 17517 00000283 0000                    def_php:	dw	0
 17518                                  
 17519                                  ; M022--
 17520                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 17521                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 17522                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 17523                                  ;  the new home.
 17524                                  
 17525                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 17526                                  ; 21/10/2022
 17527                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 17528                                  
 17529                                  ; 22/10/2022
 17530                                  seg_reinit_ptr:	; label dword
 17531 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 17532                                  temp_bcode_seg:
 17533                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 17534                                  		; 22/10/2022
 17535 00000287 9902                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 17536                                  
 17537                                  fake_floppy_drv:
 17538 00000289 00                      		db	0	; set to 1 if this machine
 17539                                  				; does not have any floppies!!!
 17540                                  
 17541                                  ; Internal Stack Parameters
 17542                                  
 17543 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 17544 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 17545 0000028E 00000000                stack_addr:	dd	0	
 17546                                  
 17547                                  ; 05/06/2018 - Retro DOS v3.0
 17548                                  
 17549                                  ; various default values
 17550                                  
 17551 00000292 0100                    MEMORY_SIZE:	dw	1
 17552                                  
 17553                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 17554                                  
 17555 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 17556 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 17557 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 17558 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 17559 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 17560                                  
 17561 0000029D 08                      FILES:	db	8	; enough files for pipe
 17562 0000029E 04                      FCBS:	db	4	; performance for recycling
 17563 0000029F 00                      KEEP:	db	0	; keep original set
 17564 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 17565                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 17566                                  ;CONFBOT: dw	0
 17567                                  ;ALLOCLIM: dw	0
 17568                                  CONFBOT: ; 02/11/2022
 17569 000002A1 0000                    top_of_cdss: dw 0
 17570                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 17571 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 17572                                  
 17573 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 17574                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 17575                                  ; (SYSINIT:02A9h)
 17576                                  command_line:
 17577 000002A9 0200                    	db	2,0
 17578 000002AB 50                      	db	'P'
 17579 000002AC 00                      	db	0
 17580 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 17581                                  ; (SYSINIT:0329h)
 17582 00000329 00                      ZERO:	db	0
 17583 0000032A 00                      sepchr:	db	0
 17584 0000032B 0000                    linecount: dw	0			; line count in config.sys
 17585 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 17586 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 17587                                  
 17588 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 17589 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 17590                                  
 17591 00000339 0000                    buf_prev_off:	dw	0
 17592                                  
 17593                                          ;IF      NOT NOEXEC
 17594                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 17595                                          ;ENDIF
 17596                                  
 17597                                  ; 01/05/2018
 17598                                  COMEXE:
 17599 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 17600 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 17601 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17602 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 17603 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17604 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 17605 00000347 0000                    		dw	0
 17606                                  
 17607                                  ; variables for install= command.
 17608                                  
 17609 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 17610                                  					;  indicating the pass number
 17611                                  					; 0 - do scan for DOS=HIGH/LOW
 17612                                  					; 1 - load device drivers
 17613                                  					; 2 - was to load IFS
 17614                                  					;      now it is unused
 17615                                  					; 3 - do install=
 17616                                  					; >3 - nop
 17617 0000034A 0000                    install_flag:	dw	0
 17618                                  
 17619                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 17620                                  has_installed	equ	00000010b	; sysinit_base installed.
 17621                                  
 17622 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 17623 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 17624 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 17625 00000356 0000                    checksum:	dw	0		; used by sum_up
 17626                                  
 17627 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 17628 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 17629 0000036D 20                      ldexec_start:	db	' '
 17630 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 17631                                  
 17632                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 17633                                  
 17634                                  instexe:
 17635 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 17636 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 17637 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17638 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 17639 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17640 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 17641 000003CA 0000                    		dw	0
 17642                                  
 17643                                  ; variables for comment=
 17644                                  
 17645 000003CC 00                      com_level:	db	0		; level of " " in command line
 17646 000003CD 00                      cmmt:		db	0		; length of comment string token
 17647 000003CE 00                      cmmt1:		db	0		; token
 17648 000003CF 00                      cmmt2:		db	0		; token
 17649 000003D0 00                      cmd_indicator:	db	0
 17650 000003D1 00                      donotshownum:	db	0
 17651                                  
 17652 000003D2 0000                    count:		dw	0
 17653 000003D4 0000                    org_count:	dw	0
 17654 000003D6 0000                    chrptr:		dw	0
 17655 000003D8 0000                    cntryfilehandle: dw	0
 17656 000003DA 0000                    old_area:	dw	0
 17657 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 17658                                  
 17659                                  bucketptr: ; label dword
 17660                                  bufptr:	   ; label dword		; leave this stuff in order!
 17661 000003DE 0000                    memlo:	dw	0
 17662                                  prmblk:	   ; label word
 17663 000003E0 0000                    memhi:	dw	0
 17664 000003E2 0000                    ldoff:	dw	0
 17665 000003E4 0000                    area:	dw	0
 17666                                  
 17667                                  ; Following is the request packet used to call INIT routines for 
 17668                                  ; all device drivers. Some fields may be accessed individually in
 17669                                  ; the code, and hence have individual labels, but they should not
 17670                                  ; be separated.
 17671                                  
 17672 000003E6 18                      packet:	db	24			; was 22
 17673 000003E7 00                      	db	0
 17674 000003E8 00                      	db	0			; initialize code
 17675 000003E9 0000                    	dw	0
 17676 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 17677                                  
 17678 000003F3 00                      unitcount:	db	0
 17679 000003F4 00000000                break_addr:	dd	0
 17680 000003F8 00000000                bpb_addr:	dd	0
 17681                                  drivenumber:	; 22/10/2022
 17682 000003FC 00                      devdrivenum:	db	0 
 17683 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 17684                                  
 17685                                  ; end of request packet
 17686                                  
 17687                                  ;drivenumber:	db	0  ; 22/03/2019
 17688                                  
 17689                                  toomanydrivesflag:
 17690 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 17691                                  align 2
 17692                                  
 17693                                  BCodeSeg:	; 21/10/2022
 17694 00000400 9902                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 17695                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 17696                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 17697                                  
 17698                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17699                                  ;; 19/04/2019
 17700                                  ;_timer_lw_:
 17701                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 17702                                  	
 17703                                  ;SR;
 17704                                  ; This is the communication block between the DOS and the BIOS. It starts at
 17705                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 17706                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 17707                                  ;is passed to DOS as part of the DOSINIT call.
 17708                                  ;
 17709                                  
 17710                                  BiosComBlock:
 17711                                  	;dd	Bios_Data:SysinitPresent 
 17712                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 17713 00000402 [F108]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 17714                                  	;dw	KERNEL_SEGMENT ; 0070h
 17715                                  	; 21/10/2022
 17716 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 17717                                  
 17718                                  ;align 2
 17719                                  
 17720                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 17721                                  tempstack:	
 17722 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 17723                                  
 17724                                  ; ----------------------------------------------------------------------------
 17725                                  
 17726                                  	; 22/10/2022 - Retro DOS v4.0
 17727                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17728                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17729                                  	; 12/12/2022
 17730                                  	; 22/03/2019 - Retro DOS v4.0
 17731                                  	; 06/07/2018
 17732                                  	; 04/06/2018 - Retro DOS v3.0
 17733                                  ; before doing anything else, let's set the model byte
 17734 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 17735 00000488 CD15                    	int	15h			; *
 17736 0000048A 7216                    	jc	short no_rom_config
 17737                                  
 17738                                  	;cmp	ah,0			; double check
 17739                                  	;jne	short no_rom_config
 17740                                  	; 04/09/2023
 17741 0000048C 08E4                    	or	ah,ah
 17742 0000048E 7512                    	jnz	short no_rom_config
 17743 00000490 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17744 00000494 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 17745 00000498 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17746 0000049C 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 17747                                  	;jmp	short SYSIN
 17748                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17749 000004A0 EB2C                    	jmp	short move_myself
 17750                                  
 17751                                  no_rom_config:				; Old ROM
 17752 000004A2 B800F0                  	mov	ax,0F000h
 17753 000004A5 8ED8                    	mov	ds,ax
 17754 000004A7 A0FEFF                  	mov	al,[0FFFEh]
 17755 000004AA 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17756                                  
 17757                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17758                                  ; execute the equipment determination interrupt and then
 17759                                  ; check the returned value to see if we have any floppy drives
 17760                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17761                                  ; see the at tech ref bios listings for help on the equipment
 17762                                  ; flag interrupt (11h)	
 17763                                  
 17764                                  	; 22/10/2022
 17765                                  check_for_fake_floppy:			; entry point for rom_config above
 17766 000004AE CD11                    	int	11h			; check equipment flag
 17767                                  
 17768                                  	; 12/12/2022
 17769 000004B0 A801                    	test	al,1		
 17770                                  	;test	ax,1			; have any floppies?
 17771 000004B2 751A                    	jnz	short move_myself	; yes,normal system
 17772                                  
 17773                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17774                                  ; whether it is an old ROM BIOS or a new one
 17775                                  ;
 17776                                  ; WARNING !!!
 17777                                  ;
 17778                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17779                                  ; here will require an equivalent modification in MSINIT.ASM also
 17780                                  
 17781 000004B4 06                      	push	es
 17782                                  
 17783 000004B5 30C9                    	xor	cl,cl	
 17784 000004B7 B408                    	mov	ah,8			; get disk parameters
 17785 000004B9 B200                    	mov	dl,0			; of drive 0
 17786 000004BB CD13                    	int	13h
 17787                                  
 17788 000004BD 07                      	pop	es
 17789                                  
 17790 000004BE 720E                    	jc	short move_myself	; if error lets assume that the
 17791                                  					;  ROM BIOS lied
 17792                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 17793                                  	;je	short move_myself
 17794                                  	; 04/09/2023
 17795 000004C0 08C9                    	or	cl,cl
 17796 000004C2 740A                    	jz	short move_myself
 17797                                  
 17798 000004C4 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17799 000004C6 7506                    	jnz	short move_myself
 17800                                  
 17801 000004C8 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17802                                  
 17803                                  move_myself:
 17804 000004CE FC                      	cld				; set up move
 17805 000004CF 31F6                    	xor	si,si
 17806 000004D1 89F7                    	mov	di,si
 17807                                  
 17808                                  	; 12/12/2022
 17809 000004D3 0E                      	push	cs
 17810 000004D4 1F                      	pop	ds
 17811                                  
 17812                                  	;mov	cx,[cs:MEMORY_SIZE]
 17813 000004D5 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17814                                  
 17815                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17816                                  ;;;	if	msver
 17817                                  ;	cmp	cx,1		; 1 means do scan
 17818                                  ;	jnz	short noscan
 17819                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17820                                  ;	xor	bx,bx
 17821                                  ;
 17822                                  ;memscan:inc	cx
 17823                                  ;	jz	setend
 17824                                  ;	mov	ds,cx
 17825                                  ;	mov	al,[bx]
 17826                                  ;	not	al
 17827                                  ;	mov	[bx],al
 17828                                  ;	cmp	al,[bx]
 17829                                  ;	not	al
 17830                                  ;	mov	[bx],al
 17831                                  ;	jz	short memscan
 17832                                  ;setend:
 17833                                  ;	mov	cs:[memory_size],cx
 17834                                  ;;;	endif
 17835                                  
 17836                                  ;noscan: 				; cx is mem size in para
 17837                                  ;;
 17838                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17839                                  ;;		  before we try to run.
 17840                                  ;;	       b) in any case, we should check for sufficient memory and give
 17841                                  ;;		  an appropriate error diagnostic if there isn't enough
 17842                                  ;
 17843                                  ;	push	cs
 17844                                  ;	pop	ds
 17845                                  ;
 17846                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17847                                  ;;	  that way it would be easier to slide them down home in a minimal
 17848                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17849                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17850                                  ;;	  temporary home and the final one.  the problem with doing that
 17851                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17852                                  ;
 17853                                  ;	dec	cx			; one para for an arena at end of mem
 17854                                  ;					; in case of UMBs
 17855                                  
 17856                                  	; 22/10/2022
 17857                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17858                                  
 17859                                  	; 12/12/2022
 17860                                  	;push	cs
 17861                                  	;pop	ds
 17862                                  
 17863 000004D9 49                      	dec	cx
 17864                                  
 17865                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17866                                  
 17867 000004DA 31DB                    	xor	bx,bx
 17868 000004DC 8EC3                    	mov	es,bx	; 0
 17869                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17870                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17871                                  	; 29/09/2023
 17872 000004DE 26C41EBC00              	les	bx,[es:(2Fh*4)]
 17873 000004E3 26817F035250            	cmp	word [es:bx+3],'RP'
 17874 000004E9 751B                    	jne	short NoRPL
 17875 000004EB 26807F054C              	cmp	byte [es:bx+5],'L'
 17876 000004F0 7514                    	jne	short NoRPL
 17877                                  
 17878 000004F2 89CA                    	mov	dx,cx			; get TOM into DX
 17879 000004F4 52                      	push	dx
 17880 000004F5 B8064A                  	mov	ax,4A06h
 17881                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17882 000004F8 CD2F                    	int	2Fh			; Get new TOM from any RPL
 17883 000004FA 58                      	pop	ax
 17884 000004FB 89D1                    	mov	cx,dx
 17885 000004FD 39C2                    	cmp	dx,ax
 17886 000004FF 7405                    	je	short NoRPL
 17887                                  	
 17888                                  	; 11/12/2022
 17889                                  	; ds = cs
 17890 00000501 8916[9402]              	mov	[RPLMemTop],dx
 17891                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17892                                  	;mov	[cs:RPLMemTop],dx
 17893                                  	
 17894 00000505 49                      	dec	cx
 17895                                  NoRPL:
 17896 00000506 B8[F037]                	mov	ax,SI_end		; need this much room for sysinit
 17897                                  					; (SI_end == sysinit code size)
 17898 00000509 E8B006                  	call	off_to_para
 17899 0000050C 29C1                    	sub	cx,ax
 17900                                  
 17901                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17902                                  ; code above sysinit in memory
 17903                                  ;
 17904 0000050E 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 17905                                  
 17906 00000512 B8A019                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17907 00000515 E8A406                  	call	off_to_para		; leave this much room for BIOS code
 17908 00000518 29C1                    	sub	cx,ax
 17909 0000051A 8EC1                    	mov	es,cx			; offset where sysinit will be located
 17910                                  
 17911 0000051C B9[F037]                	mov	cx,SI_end		; (sysinit code size)
 17912 0000051F D1E9                    	shr	cx,1			; divide by 2 to get words
 17913 00000521 F3A5                    	rep	movsw			; relocate sysinit
 17914                                  
 17915 00000523 06                      	push	es			; push relocated segment
 17916 00000524 B8[2905]                	mov	ax,SYSIN
 17917 00000527 50                      	push	ax			; push relocated entry point
 17918                                  
 17919 00000528 CB                      	retf				; far jump to relocated sysinit
 17920                                  
 17921                                  ; ----------------------------------------------------------------------------
 17922                                  
 17923                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17924                                  
 17925                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17926                                  	; (SYSINIT:0533h)
 17927                                  SYSIN:
 17928                                  	; Retro DOS 4.0 - 22/03/2019
 17929                                  	; Retro DOS 2.0 - 25/02/2018
 17930                                  
 17931                                  	; 23/04/2019
 17932                                  	;;mov	ax,Bios_Data
 17933                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17934                                  	; 21/10/2022
 17935 00000529 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17936 0000052C 8ED8                    	mov	ds,ax
 17937 0000052E 8C0E[EF08]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17938 00000532 C606[F108]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17939                                  
 17940                                  ; first move the MSDOS.SYS image up to a harmless place 
 17941                                  ; on top of our new sysinitseg
 17942                                  
 17943                                  	; 22/10/2022
 17944 00000537 B8[F037]                	mov	ax,SI_end		; how big is sysinitseg?
 17945 0000053A E87F06                  	call	off_to_para
 17946 0000053D 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17947 0000053F 01C8                    	add	ax,cx
 17948 00000541 8EC0                    	mov	es,ax
 17949                                  	
 17950 00000543 31F6                    	xor	si,si
 17951 00000545 89F7                    	mov	di,si
 17952                                  
 17953 00000547 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17954                                  
 17955                                  	;mov	ax,cs	
 17956                                  	;mov	ds,ax
 17957                                  
 17958                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17959                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17960                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17961                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17962                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17963                                  
 17964                                  	; 22/10/2022
 17965 0000054C B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17966 0000054F F3A5                    	rep     movsw
 17967 00000551 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17968                                  
 17969                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17970                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17971                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17972                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17973                                  
 17974                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17975                                  	;mov	ax,cs
 17976                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17977                                  	;mov	ds,ax
 17978                                  
 17979                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17980                                  
 17981                                  ;	; 24/04/2019 
 17982                                  ;;ifndef ROMDOS
 17983                                  ;	mov	ax,[es:3] 		; get offset of dos
 17984                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17985                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17986                                  ;	call	off_to_para		; subtract this much from segment
 17987                                  ;	; 23/04/2019
 17988                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17989                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17990                                  ;;else
 17991                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17992                                  ;;
 17993                                  ;;endif ; ROMDOS
 17994                                  
 17995                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17996                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17997                                  
 17998                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17999                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 18000                                  
 18001                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 18002                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 18003 00000556 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 18004                                  
 18005 00000559 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 18006                                  	; 02/11/2022
 18007 0000055D E85C06                  	call	off_to_para		; subtract this much from segment
 18008 00000560 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 18009                                  
 18010                                  	; Current DOSCODE start address = dword [dosinit]
 18011                                  
 18012                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 18013                                  ;; until it is determined whether it will be running in HIMEM or not.
 18014                                  
 18015                                  ;ifndef ROMDOS
 18016                                  
 18017                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 18018                                  
 18019                                  	; 22/10/2022
 18020 00000565 8CC0                    	mov	ax,es
 18021 00000567 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 18022 0000056A 8EC0                    	mov	es,ax
 18023 0000056C 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 18024 00000571 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 18025                                  
 18026                                  	;mov	si,BCODE_START ; mov si,30h
 18027                                  	; 09/12/2022
 18028 00000573 BE[3000]                	mov	si,BCODESTART
 18029                                  	; 02/11/2022
 18030 00000576 89F7                    	mov	di,si
 18031                                  	;mov	cx,BCODE_END   ; mov cx,1A60h
 18032                                  	;sub	cx,si
 18033                                  	; 29/09/2023
 18034                                  	BCODESIZE equ BCODEEND-BCODESTART
 18035 00000578 B97019                  	mov	cx,BCODESIZE
 18036 0000057B D1E9                    	shr	cx,1
 18037 0000057D F3A5                    	rep	movsw			; move Bios_Code into place
 18038                                  
 18039 0000057F 8CC0                    	mov	ax,es			; tell it what segment it's in
 18040 00000581 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 18041                                  
 18042                                  ;endif	; not ROMDOS
 18043                                  
 18044                                  ; now call dosinit while it's in its temporary home
 18045                                  
 18046                                  	;mov	ax,cs
 18047                                  	;mov	ds,ax	 
 18048                                  
 18049                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 18050                                  
 18051                                  	; 22/10/2022
 18052                                  
 18053 00000586 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 18054                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 18055 0000058B 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 18056                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 18057                                  
 18058 00000590 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 18059                                  
 18060 00000595 FA                      	cli
 18061 00000596 8CC8                    	mov	ax,cs
 18062 00000598 8ED0                    	mov	ss,ax
 18063                                  
 18064                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 18065                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 18066                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 18067                                  ;SYSINIT:0532h:
 18068                                  
 18069                                  ; 22/10/2022
 18070                                  ; ----------------------------------------------------------------------------
 18071                                  ;SYSINIT:05A6h:
 18072                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 18073                                  
 18074                                  	;mov	sp, 05A6h
 18075 0000059A BC9A05                  	mov     sp,locstack		; set stack
 18076                                  
 18077 0000059D FB                      	sti
 18078                                  
 18079                                  ;align 2
 18080                                  	; 30/03/2018
 18081                                  ;LOCSTACK:
 18082                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 18083                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 18084                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 18085                                  
 18086                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18087                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 18088                                  
 18089                                  ; This call to DOSINIT will relocate the DOS data from its present location
 18090                                  ; at the top of memory, to its final location in low memory just above the
 18091                                  ; BIOS data. It will then build important DOS data structures in low 
 18092                                  ; memory following the DOS data. It returns (among many other things) the
 18093                                  ; new starting address of free memory.
 18094                                  
 18095 0000059E 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 18096                                  			 ; es:di -> sysinitvars_ext
 18097                                  
 18098 000005A3 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 18099                                  	
 18100                                  	; 11/12/2022
 18101                                  	; 22/03/2019
 18102 000005A8 0E                      	push	cs
 18103 000005A9 1F                      	pop	ds
 18104                                  	; 22/10/2022
 18105 000005AA A3[8102]                	mov	[hi_doscod_size],ax
 18106 000005AD 890E[7F02]              	mov	[lo_doscod_size],cx
 18107 000005B1 8916[7B02]              	mov	[dos_segreinit],dx
 18108                                  	
 18109                                  	; 11/12/2022
 18110                                  	; ds = cs
 18111                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 18112                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 18113                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 18114                                  
 18115                                  	; 05/06/2018 - Retro DOS v3.0
 18116                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 18117                                  
 18118                                  	; 11/12/2022
 18119                                  	; ds = cs
 18120                                  	; 22/10/2022
 18121                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 18122 000005B5 268B05                  	mov	ax,[es:di] ; 22/03/2019
 18123                                  	;mov	[cs:DOSINFO],ax
 18124 000005B8 A3[6B02]                	mov	[DOSINFO],ax
 18125                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 18126 000005BB 268B4502                	mov	ax,[es:di+2]
 18127                                  	;mov	[cs:DOSINFO+2],ax
 18128 000005BF A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 18129                                  
 18130                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 18131 000005C2 268B4504                	mov	ax,[es:di+4]
 18132                                  	;mov	[cs:sysi_country],ax
 18133 000005C6 A3[7702]                	mov	[sysi_country],ax
 18134                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 18135 000005C9 268B4506                	mov	ax,[es:di+6]
 18136                                  	;mov	[cs:sysi_country+2],ax
 18137 000005CD A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 18138                                  
 18139                                  	; 20/04/2019
 18140                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 18141                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 18142                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 18143                                  	; 22/10/2022
 18144                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 18145                                  	;;;mov	[dos_segreinit+2],es
 18146                                  	;;mov	[dos_segreinit+2],ax
 18147                                  	;mov	[cs:dos_segreinit+2],ax
 18148                                  	; 11/12/2022
 18149                                  	; ds = cs
 18150 000005D0 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18151 000005D4 8C06[7D02]              	mov	[dos_segreinit+2],es
 18152                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18153                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 18154                                  	;mov	[cs:dos_segreinit+2],es
 18155                                  
 18156                                  ; ----------------------------------------------------------------------------
 18157                                  
 18158                                  ;SYSINIT:0577h:
 18159                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 18160                                  ;SYSINIT:05D1h:	; NoRPLArena 
 18161                                  
 18162                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18163                                  ;------ Cover up RPL code with an arena
 18164                                  ;SYSINIT:05EBh:
 18165                                  	; 11/12/2022
 18166                                  	; ds = cs
 18167 000005D8 31DB                    	xor	bx,bx
 18168 000005DA 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 18169                                  	;cmp	word [RPLMemTop],0
 18170                                  	;;cmp	word [cs:RPLMemTop],0
 18171 000005DE 7450                    	je	short NoRPLArena
 18172                                  
 18173                                  ;------ alloc all memory
 18174                                  
 18175                                  	; 11/12/2022
 18176                                  	;mov	bx,0FFFFh
 18177 000005E0 4B                      	dec	bx
 18178                                  	; bx = 0FFFFh
 18179 000005E1 B448                    	mov	ah,48h
 18180 000005E3 CD21                    	int	21h
 18181                                  			; DOS - 2+ - ALLOCATE MEMORY
 18182                                  			; BX = number of 16-byte paragraphs desired
 18183 000005E5 B448                    	mov	ah,48h
 18184 000005E7 CD21                    	int	21h
 18185                                  
 18186 000005E9 8EC0                    	mov	es,ax			; get it into ES and save it
 18187 000005EB 06                      	push	es
 18188                                  
 18189                                  ;------ resize upto RPL mem
 18190                                  
 18191                                  	; 11/12/2022
 18192                                  	; ds = cs
 18193                                  	;sub	ax,[cs:RPLMemTop]
 18194 000005EC 2B06[9402]              	sub	ax,[RPLMemTop]
 18195 000005F0 F7D8                    	neg	ax
 18196 000005F2 48                      	dec	ax
 18197 000005F3 89C3                    	mov	bx,ax
 18198 000005F5 B44A                    	mov	ah,4Ah
 18199 000005F7 CD21                    	int	21h
 18200                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18201                                  			; ES = segment address of block to change
 18202                                  			; BX = new size in paragraphs
 18203                                  
 18204                                  ;------ allocate the free (RPL MEM)
 18205                                  
 18206 000005F9 BBFFFF                  	mov	bx,0FFFFh
 18207 000005FC B448                    	mov	ah,48h
 18208 000005FE CD21                    	int	21h
 18209 00000600 B448                    	mov	ah,48h
 18210 00000602 CD21                    	int	21h
 18211                                  
 18212                                  ;----- mark that it belongs to RPL
 18213                                  
 18214 00000604 48                      	dec	ax
 18215 00000605 8EC0                    	mov	es,ax
 18216                                  	;mov	word [es:arena_owner],8
 18217 00000607 26C70601000800          	mov	word [es:1],8
 18218                                  	;mov	word [es:arena_name],'RP'
 18219 0000060E 26C70608005250          	mov	word [es:8],'RP'
 18220                                  	;mov	word [es:arena_name+2],'L'
 18221 00000615 26C7060A004C00          	mov	word [es:10],'L'
 18222                                  	;mov	word [es:arena_name+4],0
 18223 0000061C 26C7060C000000          	mov	word [es:12],0
 18224                                  	;mov	word [es:arena_name+6],0
 18225 00000623 26C7060E000000          	mov	word [es:14],0	
 18226                                  
 18227 0000062A 07                              pop     es                      ; get back ptr to first block
 18228 0000062B B449                            mov     ah,49h	; Dealloc	; and free it
 18229 0000062D CD21                    	int	21h		
 18230                                  					; DOS - 2+ - FREE MEMORY
 18231                                  					; ES = segment address of area to be freed
 18232                                  	; 11/12/2022
 18233 0000062F F8                      	clc
 18234                                  
 18235                                  ; ----------------------------------------------------------------------------
 18236                                  
 18237                                  NoRPLArena:
 18238                                  	; 11/12/2022
 18239                                  	; ds = cs
 18240                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 18241 00000630 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 18242                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 18243                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 18244                                  
 18245                                  	; 11/12/2022
 18246                                  	;clc				; get the extended memory size
 18247                                  
 18248                                  ;	execute the get extended memory size subfunction in the bios int 15h
 18249                                  ;	if the function reports an error do nothing else store the extended
 18250                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 18251                                  ;	currently pointed to by es:di. use the offsets specified in the
 18252                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 18253                                  
 18254 00000634 B488                    	mov	ah,88h
 18255 00000636 CD15                    	int	15h			; check extended memory size
 18256 00000638 720B                    	jc	short no_ext_memory
 18257                                  			; Get Extended Memory Size
 18258                                  			; Return: CF clear on success
 18259                                  			; AX = size of memory above 1M in K	
 18260                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 18261                                  	; 22/10/2022
 18262 0000063A 26894545                	mov	[es:di+45h],ax ; save extended memory size
 18263 0000063E 09C0                    	or	ax,ax
 18264 00000640 7403                    	jz	short no_ext_memory
 18265 00000642 E8F004                  	call	ClrVDISKHeader
 18266                                  no_ext_memory:
 18267                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 18268 00000645 268B4510                	mov	ax,[es:di+10h]
 18269                                  	;add	ax,bufinsiz
 18270 00000649 83C014                  	add	ax,20			; size of buffer header
 18271                                  	; 11/12/2022
 18272                                  	; ds = cs
 18273 0000064C A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 18274                                  	;mov	[cs:singlebuffersize],ax	
 18275                                  	; 11/12/2022
 18276 0000064F A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 18277                                  	;mov	al,[cs:DEFAULT_DRIVE]
 18278                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 18279 00000652 26884543                	mov	[es:di+43h],al
 18280                                  
 18281                                  ; determine if 386 system...
 18282                                  
 18283                                  	;get_cpu_type			; macro to determine cpu type
 18284                                  
 18285                                  get_cpu_type:
 18286                                  	; 11/12/2022
 18287 00000656 9C                      	pushf
 18288                                  	;push	bx
 18289                                  	;xor	bx,bx
 18290                                  	; 11/12/2022
 18291                                  	;xor	cx,cx
 18292                                  	;
 18293 00000657 31C0                    	xor	ax,ax
 18294                                  	; ax = 0
 18295 00000659 50                      	push    ax
 18296 0000065A 9D                      	popf
 18297 0000065B 9C                      	pushf
 18298 0000065C 58                      	pop	ax
 18299 0000065D 2500F0                  	and	ax,0F000h
 18300                                  	;cmp	ax,0F000h
 18301 00000660 80FCF0                  	cmp	ah,0F0h 
 18302 00000663 7410                    	je	short cpu_8086
 18303                                  	;mov	ax,0F000h
 18304 00000665 B4F0                    	mov	ah,0F0h
 18305                                  	; ax = 0F000h
 18306 00000667 50                      	push	ax
 18307 00000668 9D                      	popf
 18308 00000669 9C                      	pushf
 18309 0000066A 58                      	pop	ax
 18310                                  	;and	ax,0F000h
 18311 0000066B 80E4F0                  	and	ah,0F0h
 18312 0000066E 7405                    	jz	short cpu_286
 18313                                  cpu_386:
 18314                                  	; 11/12/2022
 18315                                  	;;inc	bx
 18316                                  	;inc	cx
 18317                                  	; 11/12/2022
 18318                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 18319 00000670 26C6454401              	mov	byte [es:di+44h],1
 18320                                  cpu_286:
 18321                                  	;;;inc	bx
 18322                                  	;;inc	cx
 18323                                  cpu_8086:
 18324                                  	; 11/12/2022
 18325                                  	;;mov	ax,bx	
 18326                                  	;pop	bx
 18327 00000675 9D                      	popf
 18328                                  
 18329                                  	;...
 18330                                  
 18331                                  	; 11/12/2022
 18332                                  	;or	cl,cl
 18333                                  	;jz	short not_386_system
 18334                                  	; 11/12/202
 18335                                  	;cmp	cl,2
 18336                                  	;;cmp	ax,2			; is it a 386?
 18337                                  	;jne	short not_386_system	; no: don't mess with flag
 18338                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 18339                                  	; 11/12/2022
 18340                                  	; 22/10/2022
 18341                                  	;mov	byte [es:di+44h],1
 18342                                  not_386_system:
 18343                                  	;mov	al,[es:di+SYSI_NUMIO]
 18344 00000676 268A4520                	mov	al,[es:di+20h]
 18345                                  	; 11/12/2022
 18346                                  	; ds = cs
 18347 0000067A A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 18348                                  	;mov	[cs:drivenumber],al
 18349                                  
 18350 0000067D 8CC8                    	mov	ax,cs
 18351 0000067F 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 18352                                  	; 11/12/2022
 18353                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 18354                                  	;;mov	cx,[cs:singlebuffersize]
 18355                                  	;shr	cx,1			
 18356                                  	;shr	cx,1			; divide size by 16...
 18357                                  	;shr	cx,1
 18358                                  	;shr	cx,1			; ...to get paragraphs...
 18359                                  	;inc	cx			; ... and round up
 18360                                  	; 11/12/2022
 18361 00000682 8B1E[9B02]              	mov	bx,[singlebuffersize]
 18362 00000686 B104                    	mov	cl,4
 18363 00000688 D3EB                    	shr	bx,cl
 18364 0000068A 43                      	inc	bx
 18365                                  
 18366                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 18367                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 18368                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 18369                                  ;	  it is probably safe to assume that the sector size always will be.
 18370                                  ;
 18371                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 18372                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 18373                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 18374                                  ;	  other code from ever causing a problem???
 18375                                  
 18376                                  	; 11/12/2022
 18377 0000068B 29D8                    	sub	ax,bx
 18378                                  	;sub	ax,cx
 18379 0000068D A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 18380                                  	; 22/10/2022
 18381                                  	;mov	[cs:top_of_cdss],ax
 18382                                  
 18383                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 18384                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 18385                                  ;	for allocating memory for MagicDrv.
 18386                                  
 18387 00000690 06                      	push	es			; preserve pointer to dosinfo
 18388 00000691 57                      	push	di
 18389                                  
 18390                                  	; 22/10/2022
 18391                                  ;	mov	cx,ax			; save pointer for buffer
 18392                                  ;
 18393                                  ;;	now allocate space for 26 CDSs
 18394                                  ;
 18395                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 18396                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 18397                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 18398                                  
 18399                                  ; setup and initialize the temporary buffer at cx
 18400                                  
 18401                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 18402 00000692 26C47D12                	les	di,[es:di+12h]
 18403                                  	; 11/12/2022
 18404 00000696 31DB                    	xor	bx,bx
 18405                                  	;xor	ax,ax
 18406                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 18407                                  	;mov	word [es:di+4],0
 18408 00000698 26895D04                	mov	[es:di+4],bx ; 0
 18409                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 18410                                  	;mov	word [es:di],0
 18411 0000069C 26891D                  	mov	[es:di],bx ; 0
 18412                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 18413                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 18414 0000069F 26894502                	mov	[es:di+2],ax
 18415                                  
 18416                                  	;mov	es,cx
 18417 000006A3 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 18418                                  
 18419                                  	; 11/12/2022
 18420                                  	;xor	ax,ax
 18421                                  	;mov	di,ax			; es:di -> single buffer
 18422 000006A5 89DF                    	mov	di,bx
 18423                                  	; di = 0
 18424                                  
 18425                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 18426                                  	; 11/12/2022
 18427                                  	;mov	[es:di],ax ; 0
 18428 000006A7 26891D                  	mov	[es:di],bx ; 0
 18429                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 18430                                  	; 11/12/2022
 18431                                  	;mov	[es:di+2],ax ; 0
 18432 000006AA 26895D02                	mov	[es:di+2],bx ; 0 
 18433                                  
 18434                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 18435                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 18436                                  
 18437                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 18438 000006AE 26C74504FF00            	mov	word [es:di+4],00FFh
 18439                                  ;SYSINIT:06E6h
 18440                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 18441                                  	;mov	word [es:di+6],0
 18442                                  	; 11/12/2022
 18443                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 18444 000006B4 26895D06                	mov	[es:di+6],bx ; 0
 18445                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 18446                                  	;mov	word [es:di+8],0
 18447                                  	; 11/12/2022
 18448                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 18449 000006B8 26895D08                	mov	[es:di+8],bx ; 0
 18450                                  
 18451 000006BC 5F                      	pop	di			; restore pointer to DOSINFO data
 18452 000006BD 07                      	pop	es
 18453                                  
 18454                                  	; 11/12/2022
 18455                                  	; ds = cs
 18456                                  	; 22/10/2022
 18457                                  	;push	cs
 18458                                  	;pop	ds
 18459                                  
 18460 000006BE E80405                  	call	TempCDS 		; set up cdss so re_init and sysinit
 18461                                  					;  can make disk system calls
 18462                                  					; tempcds trashes ds
 18463                                  	; 10/05/2019
 18464 000006C1 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 18465                                  
 18466                                  	;if not ibmjapver
 18467                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 18468                                  	;endif
 18469                                  
 18470                                  	; 22/10/2022
 18471                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 18472                                  	;call	far ptr 70h:89Bh
 18473 000006C6 9A[9008]7000            	call	DOSBIODATASEG:RE_INIT
 18474                                  
 18475 000006CB FB                      	sti				; ints ok
 18476 000006CC FC                      	cld				; make sure
 18477                                  
 18478                                  ; 23/03/2019
 18479                                  
 18480                                  ;SYSINIT:069Ch
 18481                                  
 18482                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 18483                                  ; of the way by putting it just below sysinit at end of memory.
 18484                                  
 18485 000006CD 8CCB                    	mov	bx,cs
 18486 000006CF 83EB10                  	sub	bx,10h
 18487 000006D2 8EC3                    	mov	es,bx
 18488 000006D4 31F6                    	xor	si,si
 18489 000006D6 89F7                    	mov	di,si
 18490 000006D8 B98000                  	mov	cx,128
 18491 000006DB F3A5                    	rep	movsw
 18492                                  
 18493                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 18494                                  	; 22/10/2022
 18495 000006DD 268C063600              	mov	[es:36h],es
 18496                                  
 18497                                   	; Set Process Data Block - Program Segment Prefix address
 18498                                  	; BX = PDB/PSP segment
 18499 000006E2 B450                            mov	ah,50h ; SET_CURRENT_PDB
 18500 000006E4 CD21                    	int	21h			; tell DOS we moved it
 18501                                  			; DOS - 2+ internal - SET PSP SEGMENT
 18502                                  			; BX = segment address of new PSP
 18503                                  	; 22/10/2022
 18504                                  	; 27/03/2019
 18505 000006E6 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 18506                                  
 18507 000006E7 0E                      	push	cs	
 18508 000006E8 1F                      	pop	ds
 18509                                  
 18510                                  	; set up temp. critical error handler
 18511 000006E9 BA[B232]                	mov	dx,int24		; set up int 24 handler
 18512                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 18513                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 18514 000006EC B82425                  	mov	ax,2524h
 18515 000006EF CD21                    	int	21h
 18516                                  
 18517 000006F1 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 18518 000006F6 7405                            je      short no_err		   ;  N: continue            M029
 18519 000006F8 BA[B037]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 18520                                          ; 22/10/2022
 18521                                  	;call	print 			   ;		             M029
 18522                                  	; 12/12/2022
 18523 000006FB EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 18524                                  no_err:
 18525                                  	; 12/05/2019
 18526                                  	;----------------------------------------------
 18527                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 18528                                  	; 22/10/2022 - Retro DOS v4.0
 18529                                  	; 12/12/2022
 18530 000006FD BA[B632]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 18531                                  p_dosinit_msg:
 18532 00000700 E88A2B                  	call	print			; Print message
 18533                                  	;----------------------------------------------
 18534                                  	
 18535                                  	; 11/12/2022
 18536                                  	; 22/10/2022
 18537                                  	; 23/03/2019 - Retro DOS v4.0
 18538                                  	;pop	ds			; start of free memory
 18539                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 18540                                  	
 18541                                  	; 11/12/2022
 18542                                  	; 27/03/2019
 18543 00000703 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 18544 00000707 1F                      	pop	ds ; */
 18545                                  
 18546 00000708 08D2                    	or	dl,dl
 18547                                  	;jz	short nodrvset		; bios didn't say
 18548 0000070A 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 18549                                  	;dec	dl			; A = 0
 18550                                  	; 18/12/2022
 18551 0000070C 4A                      	dec	dx
 18552 0000070D B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 18553 0000070F CD21                    	int	21h			; select the disk
 18554                                  			; DOS - SELECT DISK
 18555                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 18556                                  			; Return: AL = number of logical drives
 18557                                  nodrvset:
 18558                                  	;ifdef	dblspace_hooks
 18559                                  	;	....
 18560                                  	;	....
 18561                                  	;endif	
 18562                                  
 18563                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 18564                                  
 18565                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 18566                                  ; ----------------------------------------------------------------------------
 18567                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 18568                                  
 18569                                  ProcessConfig:
 18570                                  	;; ds = cs ; 27/03/2019
 18571                                  	; 11/12/2022
 18572                                  	; ds <> cs	
 18573                                  
 18574                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 18575                                  
 18576 00000711 E87F17                  	call	doconf			; do pre-scan for dos=high/low
 18577                                  
 18578                                  	; 11/12/2022
 18579                                  	; 27/03/2019
 18580                                  	; ds = cs (at return from doconf)
 18581                                  
 18582                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 18583                                  ; It will either be relocated to low memory, above the DOS data structures,
 18584                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 18585                                  ; code entry points will be located in low memory. Dos_segreinit is used
 18586                                  ; to tell the DOS data where the code has been placed, and to install the
 18587                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 18588                                  ; must first initialize it in its present location and load the installable
 18589                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 18590                                  ; relocate the DOS code into HiMem.
 18591                                  ;
 18592                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 18593                                  ; to install the low memory stub (this must be done before allowing any
 18594                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 18595                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 18596                                  ; been patched.
 18597                                  
 18598                                  	; 22/10/2022 - Retro DOS v4.0
 18599                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 18600                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 18601                                  	; 11/12/2022
 18602 00000714 803E[6A02]00            	cmp	byte [runhigh],0
 18603 00000719 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 18604                                  
 18605                                  ;------ user chose to load high
 18606                                  
 18607                                  	; 22/10/2022
 18608                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 18609                                  	; 11/12/2022
 18610                                  	; ds = cs
 18611 0000071B 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18612                                  
 18613                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18614                                  	; 27/03/2019
 18615                                  	;;mov	es,[FINAL_DOS_LOCATION]
 18616                                  
 18617 0000071F 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 18618                                  	; 11/12/2022
 18619                                  	; ds = cs
 18620                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18621 00000721 FF1E[7B02]              	call	far [dos_segreinit]
 18622                                  
 18623 00000725 EB10                    	jmp	short do_multi_pass
 18624                                  
 18625                                  ;------ User chose to load dos low
 18626                                  
 18627                                  dont_install_stub:
 18628                                  	; 22/10/2022
 18629 00000727 31DB                    	xor	bx,bx			; M012
 18630                                  					; don't use int 21 call to alloc mem
 18631 00000729 E8D601                  	call	MovDOSLo		; move it !
 18632                                  
 18633 0000072C B80100                  	mov	ax,1			; dont install stub
 18634                                  	; 11/12/2022
 18635                                  	; ds = cs
 18636 0000072F 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18637                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 18638                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18639                                  	; 27/03/2019
 18640                                  ;do_multi_pass:
 18641                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 18642                                  
 18643                                  	; 11/12/2022
 18644                                  	; ds =cs
 18645                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 18646 00000733 FF1E[7B02]              	call	far [dos_segreinit]
 18647                                  do_multi_pass:
 18648 00000737 E81201                  	call	AllocFreeMem		; allocate all the free mem
 18649                                  					; & update [memhi] & [area]
 18650                                  					; start of free memory.
 18651                                  	;ifdef	dblspace_hooks
 18652                                  	;mov	bx,0			; magic backdoor to place int hooks
 18653                                  	;call	cs:MagicBackdoor
 18654                                  	;endif
 18655                                  
 18656                                  ; Now, process config.sys some more.  
 18657                                  ; Load the device drivers and install programs
 18658                                  
 18659                                  	; 22/10/2022
 18660                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 18661                                  	; 11/12/2022
 18662                                  	; ds = cs
 18663 0000073A FE06[4903]              	inc	byte [multi_pass_id]
 18664 0000073E E8E517                  	call	multi_pass		; load device drivers
 18665 00000741 E87924                  	call	ShrinkUMB
 18666 00000744 E89F24                  	call	UnlinkUMB		; unlink all UMBs	;M002
 18667                                  	; 02/11/2022
 18668                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 18669                                  	; 11/12/2022
 18670                                  	; ds = cs
 18671 00000747 FE06[4903]              	inc	byte [multi_pass_id]
 18672 0000074B E8D817                  	call	multi_pass		; was load ifs (now does nothing)
 18673                                  
 18674                                  	;ifdef	dblspace_hooks
 18675                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 18676                                  	;endif
 18677                                  
 18678                                  	; ds = cs
 18679                                  	
 18680 0000074E E80A05                  	call	endfile			; setup fcbs, files, buffers etc
 18681                                  
 18682                                  	;ifdef	dblspace_hooks
 18683                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 18684                                  	;endif
 18685                                  
 18686                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 18687                                  ;to device drivers. This has been moved up to this point to avoid problems 
 18688                                  ;with overlays called from installed programs
 18689                                  
 18690                                  	; 11/12/2022
 18691                                  	; ds = cs
 18692                                  
 18693                                  	;;mov	ax,Bios_Data ; 0070h
 18694                                  	;mov	ax,KERNEL_SEGMENT
 18695                                  	; 21/10/2022
 18696 00000751 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 18697 00000754 8EC0                    	mov	es,ax			; point ES to bios data
 18698                                  
 18699 00000756 26C606[F108]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 18700                                  
 18701                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18702                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 18703                                  	;test	byte [cs:install_flag],1
 18704                                  	; 11/12/2022
 18705                                  	; ds = cs
 18706 0000075C F606[4A03]01            	test	byte [install_flag],1
 18707                                  	;test	byte [cs:install_flag],have_install_cmd
 18708                                  					; are there install commands?
 18709 00000761 7407                    	jz	short dolast		; no, no need for further processing
 18710                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 18711                                  	; 11/12/2022
 18712                                  	; ds =cs
 18713 00000763 FE06[4903]              	inc	byte [multi_pass_id]
 18714 00000767 E8BC17                  	call	multi_pass		; execute install= commands
 18715                                  
 18716                                  dolast:
 18717                                  	
 18718                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 18719                                  ;  free the confbot area used for config.sys and sysinit itself.
 18720                                  
 18721                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 18722                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 18723                                  ; anything, but just set up the ROM area for suballocation (or print
 18724                                  ; a message if HiMem is not available).
 18725                                  ;
 18726                                  ; There is also this little hack for CPM style DOS calls that needs to
 18727                                  ; be done when A20 is set...
 18728                                  
 18729                                  	; 11/12/2022
 18730                                  	; ds = cs
 18731                                  
 18732                                  	; 22/10/2022
 18733                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 18734                                  	; 11/12/2022
 18735 0000076A 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18736 0000076F 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18737 00000771 E83D01                  	call	LoadDOSHiOrLo
 18738                                  _@@_:
 18739                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18740                                  	; 11/12/2022
 18741                                  	; ds = cs
 18742 00000774 803E[6A02]00            	cmp	byte [runhigh],0
 18743                                  	;je	short _@@@
 18744 00000779 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18745 0000077B E82804                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18746                                  _@@@:
 18747                                  
 18748                                  ; We are now done with CONFIG.SYS processing
 18749                                  
 18750                                  ConfigDone:
 18751                                  	; 12/12/2022
 18752                                  	; 22/10/2022
 18753                                  	;mov	byte [cs:donotshownum],1 
 18754                                  					; done with config.sys.
 18755                                  					; do not show line number message.
 18756                                  	;mov	es,[cs:area]
 18757                                  	; 12/12/2022
 18758                                  	; ds = cs
 18759                                  	; 27/03/2019
 18760 0000077E C606[D103]01            	mov	byte [donotshownum],1
 18761 00000783 8E06[E403]              	mov	es,[area]
 18762                                  
 18763 00000787 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18764 00000789 CD21                    	int	21h
 18765                                  			; DOS - 2+ - FREE MEMORY
 18766                                  			; ES = segment address of area to be freed
 18767                                  
 18768                                  	; 22/10/2022
 18769                                  	;test	word [cs:install_flag],2
 18770                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18771                                  	;test	byte [cs:install_flag],has_installed
 18772                                  	; 11/12/2022
 18773                                  	; ds = cs
 18774 0000078B F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 18775                                  	;test	byte [install_flag],has_installed
 18776 00000790 741F                    	jz	short skip_free_sysinitbase ; no.
 18777                                  
 18778                                  ; set block from the old_area with impossible_owner_size.
 18779                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18780                                  ; handle install= command.
 18781                                  
 18782                                  	; 12/12/2022
 18783                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18784                                  	;push	bx
 18785                                  	
 18786                                  	; 22/10/2022
 18787                                  	;mov	es,[cs:old_area]
 18788                                  	;mov	bx,[cs:impossible_owner_size]
 18789                                  	; 12/12/2022
 18790                                  	; ds = cs
 18791 00000792 8E06[DA03]              	mov	es,[old_area]
 18792 00000796 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 18793                                  	
 18794 0000079A B44A                    	mov	ah,4Ah ; SETBLOCK
 18795 0000079C CD21                    	int	21h
 18796                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18797                                  			; ES = segment address of block to change
 18798                                  			; BX = new size in paragraphs
 18799 0000079E 8CC0                    	mov	ax,es
 18800 000007A0 48                      	dec	ax
 18801 000007A1 8EC0                    	mov	es,ax			; point to arena
 18802                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18803 000007A3 26C70601000800          	mov	word [es:1],8
 18804                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18805 000007AA 26C70608005344          	mov	word [es:8],'SD'
 18806                                  	
 18807                                  	; 12/12/2022
 18808                                  	;pop	bx
 18809                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18810                                  
 18811                                  skip_free_sysinitbase:
 18812                                  	; 22/10/2022
 18813                                  	;cmp	byte [cs:runhigh],0
 18814                                  	; 12/12/2022
 18815                                  	; ds = cs
 18816 000007B1 803E[6A02]00            	cmp	byte [runhigh],0	
 18817 000007B6 7403                    	je	short _@@@@
 18818                                  
 18819 000007B8 E8D202                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18820                                  
 18821                                  ; ----------------------------------------------------------------------------
 18822                                  
 18823                                  _@@@@:
 18824                                  	; 12/12/2022
 18825                                  	; ds = cs
 18826                                  	; 22/10/2022
 18827                                  	; 27/03/2019
 18828                                  	;push	cs
 18829                                  	;pop	ds			; point DS to sysinitseg
 18830                                  
 18831                                  ; set up the parameters for command
 18832                                  
 18833                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18834                                  ;;ifdef  MULTI_CONFIG
 18835                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18836                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18837                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18838                                  ;	; !!!
 18839                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18840                                  ;       ; !!!
 18841                                  ;	call    disable_autoexec        ; no, we should disable it
 18842                                  ;process_autoexec:
 18843                                  ;;endif	; !!!
 18844                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18845                                  ;	; !!!
 18846                                  
 18847                                  	; 22/10/2022 
 18848                                  	;mov     cl,[command_line]
 18849                                          ;mov     ch,0
 18850                                          ;inc     cx
 18851                                          ;mov     si,command_line	
 18852                                  	;add     si,cx
 18853                                          ;mov     byte [si],cr	; cr-terminate command line
 18854                                  
 18855                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18856                                  	; (SYSINIT:0809h)
 18857                                  	
 18858                                  	;mov	si,(offset command_line+1)
 18859 000007BB BE[AA02]                	mov	si,command_line+1
 18860 000007BE 1E                      	push    ds
 18861 000007BF 07                      	pop     es
 18862 000007C0 89F7                    	mov     di,si
 18863 000007C2 B1FF                    	mov     cl,0FFh ; -1
 18864                                  _@_loop:
 18865 000007C4 FEC1                    	inc     cl ; +1
 18866 000007C6 AC                      	lodsb
 18867 000007C7 AA                      	stosb
 18868 000007C8 08C0                    	or      al,al
 18869 000007CA 75F8                    	jnz     short _@_loop
 18870 000007CC 4F                      	dec     di
 18871 000007CD B00D                    	mov     al,0Dh
 18872 000007CF AA                      	stosb			; cr-terminate command line
 18873 000007D0 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 18874                                  
 18875                                  ; ----------------------------------------------------------------------------
 18876                                  
 18877                                  ;   Once we get to this point, the above code, which is below "retry"
 18878                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18879                                  ;   which follow....)
 18880                                  
 18881                                  retry:
 18882 000007D4 BA[6333]                	mov	dx,commnd	; now pointing to file description
 18883                                  
 18884                                  ; we are going to open the command interpreter and size it as is done in
 18885                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18886                                  ; there is not enough room for the command interpreter,exec will probably
 18887                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18888                                  ; here to catch it. this code is not perfect (for instance .exe command
 18889                                  ; interpreters are possible) because it does its sizing based on the
 18890                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18891                                  ; correctness to be usable.
 18892                                  
 18893                                  ; first, find out where the command interpreter is going to go.
 18894                                  
 18895 000007D7 52                      	push	dx		; save pointer to name
 18896 000007D8 BBFFFF                  	mov	bx,0FFFFh
 18897 000007DB B448                    	mov	ah,48h	; ALLOC
 18898 000007DD CD21                            int     21h             ; get biggest piece
 18899 000007DF B448                    	mov	ah,48h	; ALLOC
 18900 000007E1 CD21                    	int	21h		; second time gets it
 18901 000007E3 7243                    	jc	short memerrjx	; oooops
 18902                                  
 18903 000007E5 8EC0                    	mov	es,ax
 18904 000007E7 B449                    	mov	ah,49h	; DEALLOC
 18905 000007E9 CD21                    	int	21h		; give it right back
 18906 000007EB 89DD                    	mov	bp,bx
 18907                                  
 18908                                  ; es:0 points to block,and bp is the size of the block in para.
 18909                                  
 18910                                  ; we will now adjust the size in bp down by the size of sysinit.
 18911                                  ; we need to do this because exec might get upset if some of the exec
 18912                                  ; data in sysinit is overlayed during the exec.
 18913                                  
 18914                                  	; 22/10/2022
 18915                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18916 000007ED 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18917 000007F1 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18918                                  
 18919                                  ; Note that the "config_wrkseg" environment data is a segment in
 18920                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18921                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18922                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18923                                  ; we need to make sure that there's no way Exec will stomp on that data
 18924                                  ; before it can copy it, and one way to do that is to make the available
 18925                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18926                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18927                                  ; of the current sysinit CS....
 18928                                  ;
 18929                                  ; The reason I use the term "paranoid" is because this code should have
 18930                                  ; slid the data required by Exec up to the very top of memory, because as
 18931                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18932                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18933                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18934                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18935                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18936                                  
 18937                                  	; 22/10/2022
 18938                                  	;mov	cx,[config_envlen]
 18939                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18940                                          ;mov	ax,[config_wrkseg]
 18941                                  ;no_env:
 18942                                  	; 22/10/2022
 18943                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18944 000007F3 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18945 000007F5 83C311                  	add	bx,11h		; add the sysinit php
 18946 000007F8 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18947 000007FA 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18948                                  
 18949                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18950 000007FC B8003D                          mov	ax,3D00h
 18951 000007FF F9                      	stc                     ; in case of int 24
 18952 00000800 CD21                    	int	21h
 18953 00000802 7240                    	jc	short comerr	; ooops
 18954                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18955                                  			; DS:DX -> ASCIZ filename
 18956                                  			; AL = access mode
 18957                                  			; 0 - read
 18958                                  	; 22/10/2022
 18959                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18960 00000804 89C3                            mov     bx,ax           ; handle in bx
 18961                                  
 18962                                  ;   If the standard command interpreter is being used, verify it is correct
 18963                                  
 18964                                  	; 22/10/2022
 18965                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18966                                  	;jne	short skip_validation ; yes
 18967                                  	;mov	dx,retry-4
 18968                                  	;mov	cx,4		;
 18969                                  	;mov	ah,READ		;
 18970                                  	;int	21h		;
 18971                                  	;cmp	byte [retry-4],0E9h
 18972                                  	;jne	short comerr
 18973                                  	;; 20/04/2019 - Retro DOS v4.0
 18974                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18975                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18976                                  	;jne	short comerr	;
 18977                                  
 18978                                  ;skip_validation:
 18979                                  	; 22/10/2022
 18980                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18981 00000806 31C9                    	xor	cx,cx
 18982 00000808 31D2                    	xor	dx,dx
 18983                                  	;mov	ax,(LSEEK<<8)|2
 18984 0000080A B80242                  	mov	ax,4202h
 18985 0000080D F9                      	stc			;in case of int 24
 18986 0000080E CD21                    	int	21h		; get file size in dx:ax
 18987 00000810 7232                    	jc	short comerr
 18988                                  				; convert size in dx:ax to para in ax
 18989 00000812 83C00F                  	add	ax,15		; round up size for conversion to para
 18990 00000815 83D200                  	adc	dx,0
 18991 00000818 E8A103                  	call	off_to_para
 18992 0000081B B10C                    	mov	cl,12
 18993 0000081D D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18994 0000081F 09D0                    	or	ax,dx		; ax is now # of para for file
 18995 00000821 83C010                  	add	ax,10h		; 100h byte php
 18996 00000824 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18997 00000826 7203                    	jb	short okld	; jump if yes.
 18998                                  
 18999                                  	; 22/10/2022
 19000                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 19001                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 19002                                  	; 02/11/2022
 19003                                  	;jmp	mem_err
 19004                                  	; 11/12/2022
 19005                                  	; ds = cs
 19006 00000828 E92B28                  	jmp	mem_err2
 19007                                  
 19008                                  ;memerrjx:
 19009                                  ;	mov	dx,badmem
 19010                                  ;	call	print
 19011                                  ;       jmp     short continue
 19012                                  
 19013                                  okld:
 19014 0000082B B43E                    	mov	ah,3Eh ; CLOSE
 19015 0000082D CD21                    	int	21h		; close file
 19016                                  
 19017                                  	; 22/10/2022
 19018 0000082F 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 19019                                  
 19020                                  	; 24/03/2019
 19021                                  
 19022 00000830 0E                      	push	cs		; point es to sysinitseg
 19023 00000831 07                      	pop	es
 19024 00000832 BB[3B03]                        mov     bx,COMEXE	; point to exec block
 19025                                  	; 22/10/2022
 19026                                  	;pop	dx              ; recover pointer to name
 19027                                  
 19028                                  ;;ifdef	MULTI_CONFIG
 19029                                  
 19030                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 19031                                  ;   there will be data if there were any valid SET commands and/or if a menu
 19032                                  ;   selection was made (in which case the CONFIG environment variable will be
 19033                                  ;   set to that selection).
 19034                                  
 19035                                  	; 23/10/2022
 19036                                  	;mov	cx,[config_envlen]
 19037                                  	;jcxz	no_envdata
 19038                                          ;mov	cx,[config_wrkseg]
 19039                                  ;no_envdata:
 19040                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 19041                                  	;mov	[bx],cx
 19042                                  
 19043                                  ;;endif	;MULTI_CONFIG
 19044                                  
 19045                                  	; 23/10/2022
 19046                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 19047                                  
 19048                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 19049 00000835 8C4F04                  	mov	[bx+4],cs
 19050                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 19051 00000838 8C4F08                  	mov	[bx+8],cs
 19052                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 19053 0000083B 8C4F0C                  	mov	[bx+12],cs
 19054                                  
 19055                                  ;mov	ax,(EXEC<<8) + 0
 19056                                  	; 23/10/2022
 19057                                  	;xor	ax,ax
 19058                                  	;mov	ah,4Bh
 19059                                  	; 14/08/2023
 19060                                  	;mov	ax,4B00h
 19061 0000083E B8004B                  	mov	ax,(EXEC<<8)       
 19062                                  
 19063 00000841 F9                      	stc                     ; in case of int 24
 19064 00000842 CD21                            int     21h             ; go start up command
 19065                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 19066                                  			; DS:DX -> ASCIZ filename
 19067                                  			; ES:BX -> parameter block
 19068                                  			; AL = subfunc: load & execute program
 19069                                  	;push	cs
 19070                                  	;pop	ds
 19071                                  
 19072                                  	; 23/10/2022
 19073                                  	;push	dx		; push to balance fall-through pop
 19074                                  
 19075                                  ; note fall through if exec returns (an error)
 19076                                  comerr:
 19077                                  	; 23/10/2022
 19078                                  ;;ifdef	MULTI_CONFIG
 19079                                  	;cmp	byte [commnd4],0
 19080                                  	;je	short comerr2	; all defaults exhausted, print err msg
 19081                                  	;cmp	byte [newcmd],0
 19082                                  	;je	short continue	; don't print err msg for defaults just yet
 19083                                  ;comerr2:
 19084                                  ;;endif
 19085 00000844 BA[B336]                        mov     dx,badcom	; want to print command error
 19086 00000847 E8172A                  	call	badfil
 19087                                  continue:
 19088                                  	; 23/10/2022
 19089                                  	;pop	dx
 19090                                  
 19091                                  ;;ifndef MULTI_CONFIG
 19092                                  	;jmp	stall
 19093                                  	; 24/10/2022
 19094                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 19095 0000084A EBFE                    	jmp	short stall
 19096                                  ;;else
 19097                                  	; 23/10/2022
 19098                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 19099                                  	;int	21h             ;
 19100                                  	;add	al,'A'          ;
 19101                                  	;mov	dl,al           ; DL == default drive letter
 19102                                  	;mov	si,commnd2
 19103                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 19104                                  	;jne	short do_def2	; then try the 2nd alternate;
 19105                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 19106                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 19107                                  ;do_def2:			
 19108                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 19109                                          ;jne	short do_alt    ; no
 19110                                  ;do_def3:
 19111                                  	;mov	si,commnd3
 19112                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 19113                                  	;jne	short do_alt	; no
 19114                                  	;mov	si,commnd4
 19115                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 19116                                  	;jne	short do_alt	; no
 19117                                  	;push	dx              ;
 19118                                  	;mov	dx,badcomprmpt
 19119                                  	;call	print		;
 19120                                  	;pop	dx              ; recover default drive letter in DL
 19121                                  ;request_input:			;
 19122                                  	;mov	ah,STD_CON_OUTPUT
 19123                                  	;int	21h             ;
 19124                                  	;push	dx              ;
 19125                                  	;mov	dl,'>'          ;
 19126                                  	;int	21h             ;
 19127                                  	;mov	bl,[tmplate+1]	;
 19128                                  	;mov	bh,0            ;
 19129                                  	;mov	byte [commnd+bx],0Dh
 19130                                  	;mov	dx,tmplate
 19131                                  	;mov	ah,STD_CON_STRING_INPUT
 19132                                  	;int	21h             ; read a line of input
 19133                                  	;mov	dx,crlfm	;
 19134                                  	;call	print           ;
 19135                                  	;pop	dx              ;
 19136                                  	;mov	bl,[tmplate+1]	;
 19137                                  	;or	bl,bl           ; was anything typed?
 19138                                  	;jz	short request_input ;
 19139                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 19140                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 19141                                  	;mov	word [command_line],0D00h
 19142                                  	;jmp	short do_exec   ;
 19143                                  ;do_alt:
 19144                                  	;push	ds
 19145                                  	;pop	es
 19146                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 19147                                  	;mov	di,commnd	;
 19148                                  ;do_alt1:
 19149                                  	;lodsb			; copy the alternate, zapping it as we go,
 19150                                  	;mov	byte [si-1],0	; so that we know it's been tried
 19151                                  	;stosb 			;
 19152                                  	;or	al,al		;
 19153                                  	;jnz	short do_alt1	;
 19154                                  	;mov	di,command_line
 19155                                  	;cmp	byte [si+2],':'
 19156                                  	;jne	short do_alt2	;
 19157                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 19158                                  ;do_alt2:			;
 19159                                  	;lodsb			;
 19160                                  	;stosb			;
 19161                                  	;or	al,al           ;
 19162                                  	;jnz	short do_alt2   ;
 19163                                  	;mov	byte [di-1],cr
 19164                                  
 19165                                  ;;   Last but not least, see if we need to call disable_autoexec
 19166                                  
 19167                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 19168                                  	;;cmp	[command_line-1],0
 19169                                          ;;jne	short do_exec   ;
 19170                                          ;;mov	[command_line-1],'/'
 19171                                  	;;call	disable_autoexec ;
 19172                                  
 19173                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 19174                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 19175                                  	;call	disable_autoexec
 19176                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 19177                                  ;do_exec:
 19178                                  	;jmp     retry		;
 19179                                  
 19180                                  ;;endif	;MULTI_CONFIG
 19181                                  
 19182                                  ; 24/03/2019 - Retro DOS v4.0
 19183                                  
 19184                                  ; ----------------------------------------------------------------------
 19185                                  ; procedure : AllocFreeMem
 19186                                  ;
 19187                                  ; Allocate Max memory from DOS to find out where to load DOS.
 19188                                  ; DOS is at temporary location when this call is being made
 19189                                  ;
 19190                                  ; Inputs : None
 19191                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 19192                                  ;	   [area] & [memhi] set to the para value of the start of the
 19193                                  ;	   free memory.
 19194                                  ;
 19195                                  ; Uses   : AX, BX
 19196                                  ;
 19197                                  ; ----------------------------------------------------------------------
 19198                                  
 19199                                  	; 23/10/2022
 19200                                  AllocFreeMem:
 19201 0000084C BBFFFF                  	mov	bx,0FFFFh
 19202 0000084F B448                    	mov	ah,48h ; ALLOC
 19203 00000851 CD21                    	int	21h			; first time fails
 19204 00000853 B448                    	mov	ah,48h ; ALLOC
 19205 00000855 CD21                    	int	21h			; second time gets it
 19206                                  	; 11/12/2022
 19207                                  	; ds = cs
 19208                                  	;mov	[cs:area],ax
 19209                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 19210 00000857 A3[E403]                	mov	[area],ax
 19211 0000085A A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 19212 0000085D C3                      	retn				; start of free memory
 19213                                  				
 19214                                  	; include msbio.cl6
 19215                                  ; ----------------------------------------------------------------------
 19216                                  DOSLOMSG:
 19217 0000085E 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 19217 00000867 7661696C61626C653A-
 19217 00000870 204C6F6164696E6720-
 19217 00000879 444F53206C6F770D0A-
 19217 00000882 24                 
 19218                                  FEmsg:
 19219 00000883 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 19219 0000088C 6F723A2043616E6E6F-
 19219 00000895 7420616C6C6F636174-
 19219 0000089E 65204D656D6F727920-
 19219 000008A7 666F7220444F530D0A-
 19219 000008B0 24                 
 19220                                  
 19221                                  ; ----------------------------------------------------------------------
 19222                                  ;
 19223                                  ; procedure : LoadDOSHiOrLo
 19224                                  ;
 19225                                  ;		Tries to move DOS into HMA. If it fails then loads
 19226                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 19227                                  ;		moved; this just tries to allocate the HMA, and prints
 19228                                  ;		a message if this is not possible.
 19229                                  ;
 19230                                  ; ----------------------------------------------------------------------
 19231                                  
 19232                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19233                                  LoadDOSHiOrLo:
 19234                                  	; 27/03/2019 - Retro DOS v4.0
 19235                                  	; ds = cs
 19236 000008B1 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 19237                                  	;jc	short LdngLo		; If that don't work...
 19238                                  	;retn
 19239                                  	; 18/12/2022
 19240 000008B4 731C                    	jnc	short LoadDosHi_ok
 19241                                  LdngLo:
 19242                                  	; 23/10/2022
 19243                                  	;push	cs
 19244                                  	;pop	ds
 19245                                  	; 11/12/2022
 19246                                  	; ds = cs
 19247 000008B6 B409                    	mov	ah,9
 19248 000008B8 BA[5E08]                	mov	dx,DOSLOMSG		; inform user that we are
 19249 000008BB CD21                    	int	21h			; loading low
 19250                                  
 19251                                  ;ifndef ROMDOS
 19252                                  	; actually move the dos, and reinitialize it.
 19253                                  
 19254 000008BD BB0100                  	mov	bx,1				; M012
 19255                                  						;  use int 21 alloc for mem
 19256 000008C0 E83F00                  	call	MovDOSLo
 19257                                  	; 11/12/2022
 19258                                  	; ds = cs
 19259                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 19260                                  	; 23/10/2022
 19261 000008C3 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 19262                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 19263                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 19264 000008C7 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 19265                                  	; 11/12/2022
 19266                                  	; ds = cs
 19267                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 19268 000008C9 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 19269                                  	
 19270                                  ;endif ; ROMDOS
 19271                                  	; 23/10/2022
 19272                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 19273                                  	; 11/12/2022
 19274                                  	; ds = cs
 19275 000008CD C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 19276                                  LoadDosHi_ok:	; 18/12/2022
 19277 000008D2 C3                      	retn
 19278                                  
 19279                                  ; ----------------------------------------------------------------------
 19280                                  ;
 19281                                  ; procedure : TryToMovDOSHi
 19282                                  ;
 19283                                  ;		This tries to move DOS into HMA.
 19284                                  ;		Returns CY if it failed.
 19285                                  ;		If it succeeds returns with carry cleared.
 19286                                  ;
 19287                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 19288                                  ;		the A20 switching code in the low mem stub to be installed.
 19289                                  ; 
 19290                                  ; ----------------------------------------------------------------------
 19291                                  
 19292                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19293                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 19294                                  TryToMovDOSHi:
 19295                                  	; 11/12/2022
 19296                                  	; 27/03/2019 - Retro DOS v4.0
 19297                                  	; ds = cs
 19298 000008D3 E81300                  	call	MovDOSHi
 19299 000008D6 7210                    	jc	short ttldhx
 19300                                  
 19301                                  ;ifndef ROMDOS
 19302                                  	; 23/10/2022
 19303                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 19304                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 19305                                  	; 11/12/2022
 19306                                  	; ds = cs
 19307 000008D8 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 19308                                  ;else
 19309                                  ;	..
 19310                                  ;endif ; ROMDOS
 19311                                  
 19312                                  	; 11/12/2022
 19313                                  	; ds = cs
 19314 000008DC 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 19315                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 19316 000008DE FF1E[7B02]              	call	far [dos_segreinit]
 19317                                  	;mov	byte [cs:runhigh],1
 19318 000008E2 C606[6A02]01            	mov	byte [runhigh],1
 19319 000008E7 F8                      	clc
 19320                                  ttldhx:
 19321 000008E8 C3                      	retn
 19322                                  
 19323                                  ; ----------------------------------------------------------------------
 19324                                  ;
 19325                                  ; procedure : MovDOSHi
 19326                                  ;
 19327                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 19328                                  ;		For ROMDOS, the code is not actually moved, but the
 19329                                  ;		HMA is allocated and prepared for sub-allocation.
 19330                                  ;
 19331                                  ;		Returns : CY if it failed
 19332                                  ;
 19333                                  ; ----------------------------------------------------------------------
 19334                                  
 19335                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19336                                  MovDOSHi:
 19337                                  	; 14/05/2019
 19338                                  	; 27/03/2019 - Retro DOS v4.0
 19339                                  	; ds = cs
 19340 000008E9 E8D500                  	call	AllocHMA
 19341 000008EC 7213                    	jc	short mdhx			; did we get HMA?
 19342 000008EE B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 19343 000008F1 8EC0                    	mov	es,ax
 19344                                  
 19345                                  ;ifndef ROMDOS
 19346                                  	; actually move the BIOS and DOS
 19347                                  
 19348                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19349                                  	; 24/03/2019
 19350                                  	
 19351                                  	; 23/10/2022
 19352 000008F3 E83200                  	call	MovBIOS				; First move BIOS into HMA
 19353                                  
 19354                                  	; ES:DI points to free HMA after BIOS
 19355                                  	
 19356                                  	; 14/05/2019
 19357                                  	; 24/03/2019 - Retro DOS v4.0
 19358                                  	;xor	di,di
 19359                                  	
 19360                                  	; 23/10/2022
 19361                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 19362                                  	; 11/12/2022
 19363                                  	; ds = cs
 19364 000008F6 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 19365 000008FA E81100                  	call	MovDOS				; and move it
 19366                                  
 19367                                  	; ES:DI points to free HMA after DOS
 19368                                  ;else
 19369                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 19370                                  ;
 19371                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 19372                                  ;
 19373                                  ;endif ; ROMDOS
 19374                                  
 19375 000008FD E85D02                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 19376 00000900 F8                      	clc
 19377                                  mdhx:
 19378 00000901 C3                      	retn
 19379                                  
 19380                                  ; ----------------------------------------------------------------------
 19381                                  ;
 19382                                  ; procedure : MovDOSLo
 19383                                  ;
 19384                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 19385                                  ;
 19386                                  ; ----------------------------------------------------------------------
 19387                                  
 19388                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19389                                  
 19390                                  ;ifndef ROMDOS
 19391                                  
 19392                                  MovDOSLo:
 19393                                  	; 14/05/2019
 19394                                  	; 27/03/2019 - Retro DOS v4.0
 19395                                  	; ds = cs
 19396 00000902 E84500                  	call	AllocMemForDOS			; incestuosly!!!
 19397                                  	
 19398                                  	; 23/10/2022
 19399                                  	; 14/05/2019
 19400                                  	;inc	ax  ; skip MCB
 19401                                  	
 19402 00000905 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 19403                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19404                                  	; 24/03/2019
 19405                                  	
 19406                                  	; 23/10/2022
 19407 00000907 E81E00                  	call	MovBIOS
 19408                                  
 19409                                  ;------ ES:DI points memory immediately after BIOS
 19410                                  
 19411                                  	; 14/05/2019
 19412                                  	; NOTE: 
 19413                                  	;     Order of (RETRO) DOS kernel sections at memory:
 19414                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 19415                                  
 19416                                  	; 24/03/2019 - Retro DOS v4.0
 19417                                  	;xor	di,di	
 19418                                  
 19419                                  	; 23/10/2022
 19420                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 19421                                  	; 11/12/2022
 19422                                  	; ds = cs
 19423 0000090A 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 19424                                  	;call	MovDOS
 19425                                  	;retn
 19426                                  	; 11/12/2022
 19427                                  	;jmp	short MovDOS
 19428                                  
 19429                                  ;endif ; ROMDOS
 19430                                  
 19431                                  ; 11/12/2022
 19432                                  
 19433                                  ; ----------------------------------------------------------------------
 19434                                  ;
 19435                                  ; procedure : MovDOS
 19436                                  ;
 19437                                  ;		Moves DOS code into requested area
 19438                                  ;
 19439                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19440                                  ;	     CX    - size of DOS code to be moved
 19441                                  ;
 19442                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19443                                  ;
 19444                                  ; ----------------------------------------------------------------------
 19445                                  
 19446                                  	; 11/12/2022
 19447                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19448                                  
 19449                                  ;ifndef ROMDOS
 19450                                  
 19451                                  MovDOS:
 19452                                  	; 14/05/2019
 19453                                  	; 27/03/2019 - Retro DOS v4.0
 19454                                  
 19455                                  	; 11/12/2022
 19456                                  	; ds = cs
 19457                                  
 19458                                  	; 23/10/2022
 19459                                  	;push	ds ; *//
 19460                                  	
 19461 0000090E 06                      	push	es
 19462 0000090F 57                      	push	di
 19463                                  
 19464                                  	; 11/12/2022
 19465 00000910 1E                      	push	ds ; *// ; 11/12/202
 19466                                  
 19467                                  	; 29/04/2019
 19468 00000911 C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 19469                                  	; 23/10/2022
 19470                                  	;lds	si,[cs:dosinit]
 19471                                  	; 04/09/2023
 19472 00000915 89F0                    	mov	ax,si
 19473                                  
 19474 00000917 F3A4                    	rep	movsb
 19475                                  
 19476 00000919 1F                      	pop	ds ; *// ; 11/12/2022
 19477                                  
 19478 0000091A 5B                      	pop	bx				; get back offset into which
 19479                                  						;  DOS was moved
 19480                                  	; 04/09/2023
 19481                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 19482                                  						;  wants to run
 19483                                  	; 04/09/2023
 19484                                  	;mov	ax,[dosinit]
 19485                                  	; ax = [dosinit]
 19486                                  
 19487 0000091B 29D8                    	sub	ax,bx
 19488 0000091D E89C02                  	call	off_to_para
 19489 00000920 5B                      	pop	bx				; get the segment at which
 19490                                  						;  we moved DOS into
 19491 00000921 29C3                    	sub	bx,ax				; Adjust segment
 19492                                  	
 19493                                  	; 11/12/2022
 19494                                  	; 23/10/2022
 19495                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19496                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19497                                  	; 11/12/2022
 19498 00000923 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 19499                                  		
 19500                                  	; 27/03/2019
 19501                                  	;pop	ds ; *//
 19502                                  	; ds = cs
 19503                                  	;mov	[FINAL_DOS_LOCATION],bx
 19504                                  
 19505 00000927 C3                      	retn
 19506                                  
 19507                                  ;endif ;ROMDOS
 19508                                  
 19509                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19510                                  ; 24/03/2019
 19511                                  ; ----------------------------------------------------------------------
 19512                                  ;
 19513                                  ; procedure : MovBIOS
 19514                                  ;
 19515                                  ;		Moves BIOS code into requested segment
 19516                                  ;
 19517                                  ;	In : ES - segment to which BIOS is to be moved
 19518                                  ;		  ( it moves always into offset BCode_Start)
 19519                                  ;
 19520                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 19521                                  ;
 19522                                  ; ----------------------------------------------------------------------
 19523                                  
 19524                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19525                                  
 19526                                  ;ifndef ROMDOS
 19527                                  
 19528                                  MovBIOS: ; proc	near
 19529                                  	; 11/12/2022
 19530 00000928 1E                      	push	ds ; ds = cs	
 19531                                  	;
 19532                                  	; 23/10/2022
 19533                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 19534                                  	; 17/09/2023
 19535 00000929 8E1E[8702]              	mov	ds,[temp_bcode_seg]
 19536                                  	;mov	si,BCODE_START ; mov si,30h
 19537                                  	; 09/12/2022
 19538 0000092D BE[3000]                	mov	si,BCODESTART
 19539 00000930 89F7                    	mov	di,si
 19540 00000932 B9A019                  	mov	cx,BCODE_END ; mov cx,1A60h
 19541 00000935 29F1                    	sub	cx,si				; size of BIOS
 19542 00000937 D1E9                    	shr	cx,1				; Both the labels are para
 19543                                  						;  aligned
 19544 00000939 F3A5                    	rep	movsw
 19545                                  	
 19546                                  	; 11/12/2022
 19547 0000093B 1F                      	pop	ds ; ds = cs
 19548                                  	;
 19549 0000093C 06                      	push	es
 19550 0000093D 57                      	push	di				; save end of BIOS
 19551 0000093E 8CC0                    	mov	ax,es
 19552                                  	;
 19553                                  	; 11/12/2022
 19554                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 19555                                  	;;call	dword ptr cs:_seg_reinit_ptr
 19556                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 19557                                  	; ds = cs
 19558 00000940 A3[0004]                	mov	[BCodeSeg],ax
 19559 00000943 FF1E[8502]              	call	far [seg_reinit_ptr]
 19560                                  	;
 19561 00000947 5F                      	pop	di
 19562 00000948 07                      	pop	es				; get back end of BIOS
 19563 00000949 C3                      	retn
 19564                                  
 19565                                  ;MovBIOS endp
 19566                                  
 19567                                  ;endif ; ROMDOS
 19568                                  
 19569                                  ; 11/12/2022
 19570                                  %if 0
 19571                                  
 19572                                  ; 24/03/2019
 19573                                  
 19574                                  ; ----------------------------------------------------------------------
 19575                                  ;
 19576                                  ; procedure : MovDOS
 19577                                  ;
 19578                                  ;		Moves DOS code into requested area
 19579                                  ;
 19580                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19581                                  ;	     CX    - size of DOS code to be moved
 19582                                  ;
 19583                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19584                                  ;
 19585                                  ; ----------------------------------------------------------------------
 19586                                  
 19587                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19588                                  
 19589                                  ;ifndef ROMDOS
 19590                                  
 19591                                  MovDOS:
 19592                                  	; 14/05/2019
 19593                                  	; 27/03/2019 - Retro DOS v4.0
 19594                                  
 19595                                  	; 11/12/2022
 19596                                  	; ds = cs
 19597                                  
 19598                                  	; 23/10/2022
 19599                                  	;push	ds ; *//
 19600                                  	
 19601                                  	push	es
 19602                                  	push	di
 19603                                  
 19604                                  	; 11/12/2022
 19605                                  	push	ds ; *// ; 11/12/202
 19606                                  
 19607                                  	; 29/04/2019
 19608                                  	lds	si,[dosinit] ; 11/12/2022
 19609                                  	; 23/10/2022
 19610                                  	;lds	si,[cs:dosinit]
 19611                                  	; 04/09/2023
 19612                                  	mov	ax,si
 19613                                  
 19614                                  	rep	movsb
 19615                                  
 19616                                  	pop	ds ; *// ; 11/12/2022
 19617                                  
 19618                                  	pop	bx				; get back offset into which
 19619                                  						;  DOS was moved
 19620                                  	;mov	ax,[dosinit] ; 04/09/2023
 19621                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 19622                                  						;  wants to run
 19623                                  	sub	ax,bx
 19624                                  	call	off_to_para
 19625                                  	pop	bx				; get the segment at which
 19626                                  						;  we moved DOS into
 19627                                  	sub	bx,ax				; Adjust segment
 19628                                  	
 19629                                  	; 11/12/2022
 19630                                  	; 23/10/2022
 19631                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19632                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19633                                  	; 11/12/2022
 19634                                  	mov	[CURRENT_DOS_LOCATION],bx
 19635                                  		
 19636                                  	; 27/03/2019
 19637                                  	;pop	ds ; *//
 19638                                  	; ds = cs
 19639                                  	;mov	[FINAL_DOS_LOCATION],bx
 19640                                  
 19641                                  	retn
 19642                                  
 19643                                  ;endif ;ROMDOS
 19644                                  
 19645                                  %endif
 19646                                  
 19647                                  ; ----------------------------------------------------------------------
 19648                                  ;
 19649                                  ; procedure : AllocMemForDOS
 19650                                  ;
 19651                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 19652                                  ;
 19653                                  ;	Out : AX - seg of allocated memoryblock
 19654                                  ;
 19655                                  ; ----------------------------------------------------------------------
 19656                                  
 19657                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19658                                  
 19659                                  ;ifndef ROMDOS
 19660                                  
 19661                                  AllocMemForDOS:
 19662                                  	; 11/12/2022
 19663                                  	; 14/05/2019
 19664                                  	; 27/03/2019 - Retro DOS v4.0
 19665                                  	; ds = cs
 19666                                  	;mov	ax,BCode_end
 19667                                  	;sub	ax,BCode_start		; BIOS code size
 19668                                  	; 23/10/2022
 19669 0000094A B8A019                  	mov	ax,BCODE_END ; 1A60h
 19670                                  	;sub	ax,BCODE_START ; 30h
 19671                                  	; 09/12/2022
 19672 0000094D 2D[3000]                	sub	ax,BCODESTART 
 19673                                  	; 24/03/2019 - Retro DOS v4.0 
 19674                                  	; 02/11/2022
 19675                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 19676                                  	; 11/12/2022
 19677                                  	; ds = cs
 19678 00000950 0306[7F02]              	add	ax,[lo_doscod_size]
 19679 00000954 83C00F                  	add	ax,15
 19680 00000957 E86202                  	call	off_to_para			; convert to para
 19681                                  	; 23/10/2022
 19682                                  	; 14/05/2019
 19683                                  	;inc	ax ; + 1 paragraph for MCB
 19684 0000095A 09DB                    	or	bx,bx				; M012
 19685 0000095C 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 19686 0000095E 741A                    	jz	short update_arena		; M012
 19687 00000960 B448                    	mov	ah,48h				; request DOS
 19688 00000962 CD21                    	int	21h
 19689 00000964 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 19690                                   	; 23/10/2022
 19691                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 19692 00000966 83E803                  	sub	ax,3				; Take care ORG 30h of
 19693                                  						;  BIOS code
 19694 00000969 8EC0                    	mov	es,ax
 19695                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 19696                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 19697                                  	; 14/05/2019
 19698                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 19699                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 19700                                  	; 23/10/2022
 19701 0000096B 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 19702 00000972 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 19703                                  
 19704 00000979 C3                      	retn
 19705                                  
 19706                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 19707                                  ;	  using DOS itself causes an arena to be generated.
 19708                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 19709                                  ;	  assume that the device drivers are loaded into
 19710                                  ;	  the first arena. For this reason, MagicDrv's
 19711                                  ;	  main device driver header arena is manually
 19712                                  ;	  truncated from the arena chain, and the space
 19713                                  ;	  for DOS is allocated using the following
 19714                                  ;	  simple code, which also assumes that the
 19715                                  ;	  first arena is the free one where DOS's low
 19716                                  ;	  stub will go.
 19717                                  ;
 19718                                  ; M012 : BEGIN
 19719                                  
 19720                                  	; 23/10/2022
 19721                                  update_arena:
 19722 0000097A 1E                      	push	ds ; ds = cs
 19723 0000097B 57                      	push	di
 19724 0000097C 51                      	push	cx
 19725 0000097D 52                      	push	dx
 19726                                  	; 23/10/2022
 19727                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 19728                                  	; 11/12/2022
 19729                                  	; ds = cs 
 19730 0000097E C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 19731 00000982 4F                      	dec	di
 19732 00000983 4F                      	dec	di				; Arena head is immediately
 19733                                  						;  before sysvar
 19734 00000984 8E05                    	mov	es,[di]				; es = arena head
 19735                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 19736 00000986 268B0E0300              	mov	cx,[es:3]
 19737 0000098B 39D9                    	cmp	cx,bx				; is it sufficient ?
 19738 0000098D 7227                    	jb	short FatalErr			; no, fatal error
 19739                                  
 19740                                  	;mov	dl,[es:ARENA.SIGNATURE]
 19741 0000098F 268A160000              	mov	dl,[es:0]
 19742 00000994 8CC0                    	mov	ax,es
 19743 00000996 01D8                    	add	ax,bx				; ax = new arena head
 19744 00000998 8905                    	mov	[di],ax				; store it in DOS data area
 19745 0000099A 8ED8                    	mov	ds,ax
 19746                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19747 0000099C 88160000                	mov	[0],dl
 19748                                  	;mov	word [ARENA.OWNER],0		; free
 19749 000009A0 C70601000000            	mov	word [1],0
 19750 000009A6 29D9                    	sub	cx,bx				; size of the new block
 19751                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19752 000009A8 890E0300                	mov	[3],cx
 19753 000009AC 8CC0                    	mov	ax,es				; return seg to the caller
 19754                                  	; 23/10/2022
 19755                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19756 000009AE 83E803                  	sub	ax,3				;  BIOS code
 19757 000009B1 5A                      	pop	dx
 19758 000009B2 59                      	pop	cx
 19759 000009B3 5F                      	pop	di
 19760 000009B4 1F                      	pop	ds ; ds = cs
 19761 000009B5 C3                      	retn
 19762                                  ;
 19763                                  ; M012 : END
 19764                                  ;
 19765                                  FatalErr:
 19766 000009B6 0E                      	push	cs
 19767 000009B7 1F                      	pop	ds
 19768 000009B8 BA[8308]                	mov	dx,FEmsg
 19769 000009BB B409                    	mov	ah,9
 19770 000009BD CD21                    	int	21h 		; DOS - PRINT STRING
 19771                                  				; DS:DX -> string terminated by "$"
 19772                                          ;jmp	stall
 19773                                  	; 23/10/2022
 19774 000009BF FA                      	cli
 19775 000009C0 F4                      	hlt
 19776                                  
 19777                                  ;endif ;ROMDOS
 19778                                  
 19779                                  ; 25/03/2019 - Retro DOS v4.0
 19780                                  
 19781                                  ; ----------------------------------------------------------------------
 19782                                  ;
 19783                                  ; procedure : AllocHMA
 19784                                  ;
 19785                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19786                                  ;	  up there. If it gets any sort of error, it will return with
 19787                                  ;	  carry set so that we can resort to running low.
 19788                                  ;
 19789                                  ;	It also returns ES: -> 0ffffh if it returns success
 19790                                  ;
 19791                                  ; ----------------------------------------------------------------------
 19792                                  
 19793                                  AllocHMA:
 19794                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19795                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19796                                  ;		   been deleted because it can be recycled for skipping the
 19797                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19798                                  ;		   in the case of a pre-286.
 19799                                  
 19800                                  ;;	see if we're running on a pre-286. If not, force low.
 19801                                  ;
 19802                                  ;	xor	ax,ax
 19803                                  ;	pushf			; save flags (like int)
 19804                                  ;	push	ax
 19805                                  ;	popf
 19806                                  ;	pushf
 19807                                  ;	pop	ax
 19808                                  ;	popf			; restore original flags (like int)
 19809                                  ;	and	ax,0F000h
 19810                                  ;	cmp	ax,0F000h	; 8088/8086?
 19811                                  ;	jz	short grab_hma_error
 19812                                  
 19813                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19814                                  	; (SYSINIT:0A26h)
 19815                                  
 19816 000009C1 1E                      	push	ds
 19817                                  	;;mov	ax,Bios_Data
 19818                                  	;mov	ax,KERNEL_SEGMENT
 19819                                  	; 21/10/2022
 19820 000009C2 B87000                  	mov	ax,DOSBIODATASEG
 19821 000009C5 8ED8                    	mov	ds,ax
 19822                                  
 19823 000009C7 E84A00                  	call	IsXMSLoaded
 19824 000009CA 7545                    	jnz	short grabhma_error
 19825                                  
 19826 000009CC B81043                  	mov	ax,4310h
 19827 000009CF CD2F                    	int	2Fh		; get the vector into es:bx
 19828                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19829                                  		; Return: ES:BX -> driver entry point
 19830                                  
 19831 000009D1 891E[0E00]              	mov	[xms],bx
 19832                                  	;mov	[0Eh], bx
 19833 000009D5 8C06[1000]              	mov	[xms+2],es
 19834                                  	;mov	[10h],es
 19835                                  
 19836 000009D9 B401                    	mov	ah,1		; request HMA
 19837 000009DB BAFFFF                  	mov	dx,0FFFFh
 19838                                  	;call	dword ptr ds:0Eh
 19839 000009DE FF1E[0E00]              	call	far [xms]
 19840 000009E2 48                      	dec	ax
 19841 000009E3 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19842                                  
 19843                                  ;------ Himem may be lying because it has allocated mem for int 15
 19844                                  
 19845 000009E5 B488                    	mov	ah,88h
 19846 000009E7 CD15                    	int	15h
 19847                                  		; Get Extended Memory Size
 19848                                  		; Return: CF clear on success
 19849                                  		; AX = size of memory above 1M in K
 19850 000009E9 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19851                                  	;jb	short grabhma_error
 19852                                  	; 11/12/2022
 19853 000009EC 7224                    	jb	short grabhma_err ; cf=1
 19854                                  allocHMA_1:
 19855 000009EE B405                    	mov	ah,5		; localenableA20
 19856                                  	;call	dword ptr ds:0Eh
 19857 000009F0 FF1E[0E00]              	call	far [xms]
 19858 000009F4 48                      	dec	ax
 19859 000009F5 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19860                                  
 19861 000009F7 E88501                  	call	IsVDiskInstalled
 19862 000009FA 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19863                                  
 19864 000009FC B8FFFF                  	mov	ax,0FFFFh
 19865 000009FF 8EC0                    	mov	es,ax
 19866 00000A01 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19867 00000A08 26813E10003412          	cmp	word [es:10h],1234h
 19868                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19869                                  	; 11/12/2022
 19870 00000A0F 7401                    	je	short allocHMA_ok	
 19871                                  
 19872                                  ; 11/12/2022
 19873                                  ;	; 11/12/2022
 19874                                  ;	; cf=0
 19875                                  ;	;clc
 19876                                  ;	pop	ds
 19877                                  ;	retn
 19878                                  
 19879                                  grabhma_error:
 19880 00000A11 F9                      	stc
 19881                                  	; 11/12/022
 19882                                  grabhma_err:	; cf=1
 19883                                  allocHMA_ok:	; cf=0
 19884 00000A12 1F                      	pop	ds
 19885 00000A13 C3                      	retn
 19886                                  
 19887                                  ; ----------------------------------------------------------------------
 19888                                  ;
 19889                                  ; procedure : IsXMSLoaded
 19890                                  ;
 19891                                  ;             Checks whether a XMS driver is loaded
 19892                                  ;
 19893                                  ; Returns : Z flag set if XMS driver loaded
 19894                                  ;           Z flag reset if no XMS drivers are present
 19895                                  ;
 19896                                  ; ----------------------------------------------------------------------
 19897                                  
 19898                                  IsXMSLoaded:
 19899 00000A14 B80043                  	mov	ax,4300h
 19900 00000A17 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19901                                  				; Return: AL = 80h XMS driver installed
 19902                                  				; AL <> 80h no driver
 19903 00000A19 3C80                    	cmp	al,80h		; XMS installed?
 19904 00000A1B C3                      	retn
 19905                                  
 19906                                  ; ----------------------------------------------------------------------
 19907                                  ; procedure : FTryToMovDOSHi
 19908                                  ;
 19909                                  ;		Called from HMA suballoc calls
 19910                                  ;	
 19911                                  ; ----------------------------------------------------------------------
 19912                                  
 19913                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19914                                  	; (SYSINIT:0A84h)
 19915                                  
 19916                                  FTryToMovDOSHi:	; proc	far
 19917                                  
 19918 00000A1C 50                      	push	ax
 19919 00000A1D 53                      	push	bx
 19920 00000A1E 51                      	push	cx
 19921 00000A1F 52                      	push	dx
 19922 00000A20 56                      	push	si
 19923 00000A21 57                      	push	di
 19924 00000A22 1E                      	push	ds
 19925 00000A23 06                      	push	es
 19926                                  
 19927                                  	; 23/10/2022
 19928                                  	; 27/03/2019 - Retro DOS v4.0
 19929                                  	; 11/12/2022
 19930 00000A24 0E                      	push	cs
 19931 00000A25 1F                      	pop	ds
 19932                                  
 19933                                  	;cmp	byte [cs:runhigh],0FFh
 19934                                  	; 11/12/2022
 19935 00000A26 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19936 00000A2B 7503                    	jne	short _ftymdh_1
 19937                                  
 19938                                  	; ds = cs
 19939 00000A2D E8A3FE                  	call	TryToMovDOSHi
 19940                                  _ftymdh_1:
 19941 00000A30 07                      	pop	es
 19942 00000A31 1F                      	pop	ds
 19943 00000A32 5F                      	pop	di
 19944 00000A33 5E                      	pop	si
 19945 00000A34 5A                      	pop	dx
 19946 00000A35 59                      	pop	cx
 19947 00000A36 5B                      	pop	bx
 19948 00000A37 58                      	pop	ax
 19949                                  
 19950 00000A38 CB                      	retf
 19951                                  
 19952                                  ; ----------------------------------------------------------------------
 19953                                  ;
 19954                                  ; following piece of code will be moved into a para boundary. And the para
 19955                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19956                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19957                                  ; to determine free extended memory.
 19958                                  ;
 19959                                  ; For more details read "power programming" column by Ray Duncan in the
 19960                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19961                                  ;
 19962                                  ; ----------------------------------------------------------------------
 19963                                  
 19964                                  StartVDHead:
 19965                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19966                                  
 19967 00000A39 00000000                	dd	0		; link to next device driver
 19968 00000A3D 0080                    	dw	8000h		; device attribute
 19969 00000A3F 0000                    	dw	0		; strategy routine offset
 19970 00000A41 0000                    	dw	0		; interrupt routine offset
 19971 00000A43 01                      	db	1		; number of units
 19972                                  	;db	7 dup(0) 
 19973 00000A44 00<rep 7h>              	times	7 db 0 		; reserved area
 19974                                  VDiskSig1:
 19975 00000A4B 564449534B              	db	'VDISK'
 19976                                  
 19977                                  VLEN1	equ	($-VDiskSig1)
 19978                                  
 19979 00000A50 202056332E33            	db	'  V3.3'	; vdisk label
 19980                                  	;db	15 dup (0)	; pad
 19981 00000A56 00<rep Fh>              	times	15 db 0
 19982 00000A65 0000                    	dw	0		; bits 0-15 of free HMA
 19983 00000A67 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19984                                  VDInt19:
 19985 00000A68 EA                      	db	0EAh		; jmp to old vector
 19986                                  OldVDInt19:
 19987 00000A69 00000000                	dd	0		; Saved int 19 vector
 19988                                  
 19989                                  EndVDHead: ; label byte
 19990                                  
 19991                                  VDiskHMAHead:	
 19992 00000A6D 000000                  	db	0,0,0		; non-bootable disk
 19993                                  VDiskSig2:
 19994 00000A70 564449534B              	db	'VDISK'
 19995                                  
 19996                                  VLEN2	equ	($-VDiskSig2)
 19997                                  
 19998 00000A75 332E33                  	db	'3.3'		; OEM - signature
 19999 00000A78 8000                    	dw	128		; number of bytes/sector
 20000 00000A7A 01                      	db	1		; sectors/cluster
 20001 00000A7B 0100                    	dw	1		; reserved sectors
 20002 00000A7D 01                      	db	1		; number of FAT copies
 20003 00000A7E 4000                    	dw	64		; number of root dir entries
 20004 00000A80 0002                    	dw	512		; number of sectors
 20005 00000A82 FE                      	db	0FEh		; media descriptor
 20006 00000A83 0600                    	dw	6		; number of sectors/FAT
 20007 00000A85 0800                    	dw	8		; sectors per track
 20008 00000A87 0100                    	dw	1		; number of heads
 20009 00000A89 0000                    	dw	0		; number of hidden sectors
 20010 00000A8B 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 20011                                  
 20012                                  EndVDiskHMAHead: ; label byte
 20013                                  
 20014                                  ; ----------------------------------------------------------------------
 20015                                  ;
 20016                                  ; procedure : InstVDiskHeader
 20017                                  ;
 20018                                  ;             Installs the VDISK header to reserve the 64k of HMA
 20019                                  ;	      It puts a 32 byte header at 10000:0 and
 20020                                  ;	      another header at (seg of int19):0
 20021                                  ;
 20022                                  ; Inputs : None
 20023                                  ;
 20024                                  ; Outputs : None
 20025                                  ;
 20026                                  ; USES : DS,SI,AX,CX,DX
 20027                                  ;
 20028                                  ; ----------------------------------------------------------------------
 20029                                  
 20030                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20031                                  
 20032                                  InstVDiskHeader:
 20033 00000A8D 31C0                    	xor	ax,ax
 20034 00000A8F 8ED8                    	mov	ds,ax			; seg of int vect table
 20035                                  
 20036                                  ;-------------- save old int 19 vector
 20037                                  
 20038                                  	; 23/10/2022
 20039 00000A91 A16400                  	mov	ax,[19h*4]
 20040                                  	;mov	[OldVDInt19],ax
 20041 00000A94 2EA3[690A]              	mov	[cs:OldVDInt19],ax
 20042 00000A98 A16600                  	mov	ax,[19h*4+2]
 20043                                  	;mov	[OldVDInt19+2],ax
 20044 00000A9B 2EA3[6B0A]              	mov	[cs:OldVDInt19+2],ax
 20045                                  
 20046                                  ;-------------- calculate seg of new int 19 handler
 20047                                  
 20048 00000A9F B448                    	mov	ah,48h			; allocate memory
 20049                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 20050                                  	; 23/10/2022
 20051 00000AA1 BB0400                  	mov	bx,4
 20052 00000AA4 CD21                    	int	21h
 20053                                  
 20054                                  ;	if carry, fatal hanging error!!!!!
 20055                                  
 20056 00000AA6 48                      	dec	ax			; point to arena
 20057 00000AA7 8EC0                    	mov	es,ax
 20058                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 20059 00000AA9 26C70601000800          	mov	word [es:1],8
 20060                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 20061 00000AB0 26C70608005343          	mov	word [es:8],'SC'
 20062 00000AB7 40                      	inc	ax
 20063 00000AB8 8EC0                    	mov	es,ax			; get back to allocated memory
 20064                                  
 20065                                  ;-------------- install new int 19 vector
 20066                                  
 20067 00000ABA FA                      	cli				; no reboots at this time
 20068                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 20069 00000ABB C70664002F00            	mov	word [19h*4],47
 20070 00000AC1 A36600                  	mov	[19h*4+2],ax
 20071                                  
 20072                                  ;-------------- move the code into proper place
 20073                                  
 20074                                  	;mov	cx,(EndVDHead-StartVDHead)
 20075 00000AC4 B93400                  	mov	cx,52
 20076 00000AC7 BE[390A]                	mov	si,StartVDHead
 20077 00000ACA 31FF                    	xor	di,di
 20078 00000ACC 0E                      	push	cs
 20079 00000ACD 1F                      	pop	ds
 20080 00000ACE FC                      	cld
 20081 00000ACF F3A4                    	rep	movsb
 20082 00000AD1 FB                      	sti				; BUGBUG is sti OK now?
 20083                                  
 20084                                  ;-------------- mov the HMA VDisk head into HMA
 20085                                  
 20086                                  	; 23/10/2022
 20087 00000AD2 57                      	push	di
 20088 00000AD3 06                      	push	es
 20089                                  
 20090                                  	;mov	ax,0FFFFh
 20091                                  	;mov	es,ax
 20092                                  	; 04/09/2023
 20093 00000AD4 49                      	dec	cx
 20094                                  	; cx = 0FFFFh
 20095 00000AD5 8EC1                    	mov	es,cx
 20096                                  
 20097 00000AD7 BF1000                  	mov	di,10h
 20098                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 20099 00000ADA B92000                  	mov	cx,32
 20100 00000ADD BE[6D0A]                	mov	si,VDiskHMAHead
 20101 00000AE0 F3A4                    	rep	movsb			; ds already set to cs
 20102                                  
 20103 00000AE2 5F                      	pop	di
 20104 00000AE3 07                      	pop	es
 20105                                  
 20106 00000AE4 C3                      	retn
 20107                                  
 20108                                  ; ----------------------------------------------------------------------
 20109                                  ; procedure : ClrVDISKHeader
 20110                                  ;
 20111                                  ;		Clears the first 32 bytes at 1MB boundary
 20112                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 20113                                  ;		left by previous DOS=HIGH session
 20114                                  ;
 20115                                  ; ----------------------------------------------------------------------
 20116                                  
 20117                                  struc desc
 20118 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 20119 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 20120 00000004 ??                       .hi_byte:	resb 	1		; address
 20121 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 20122 00000006 ????                     .reserved:	resw	1		;
 20123                                   .size:
 20124                                  endstruc
 20125                                  
 20126                                  		; 23/10/2022
 20127                                  bmove:		;label byte
 20128                                  
 20129                                  dummy:		;times desc.size db 0	; desc	<>
 20130 00000AE5 00<rep 8h>              		times 8 db 0		 
 20131                                  gdt:		;times desc.size db 0	; desc	<>
 20132 00000AED 00<rep 8h>              		times 8 db 0
 20133 00000AF5 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 20134 00000AF7 0000                    		dw	0
 20135 00000AF9 00                      		db	0
 20136 00000AFA 93                      		db	93h
 20137 00000AFB 0000                    		dw	0
 20138 00000AFD FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 20139 00000AFF 0000                    		dw	0
 20140 00000B01 10                      		db	10h
 20141 00000B02 93                      		db	93h
 20142 00000B03 0000                    		dw	0
 20143                                  
 20144                                  rombios_code:	;times desc.size db 0	; desc	<>
 20145 00000B05 00<rep 8h>              		times 8 db 0
 20146                                  temp_stack:	;times desc.size db 0	; desc	<>
 20147 00000B0D 00<rep 8h>              		times 8 db 0
 20148                                  
 20149 00000B15 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 20150                                  
 20151                                  
 20152                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 20153                                  
 20154                                  ClrVDISKHeader:	; proc	near
 20155                                  
 20156                                  ;;-----------------------------------------------------------	      ;I070
 20157                                  ;; The following workaround get around a problem with the	      ;I070
 20158                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 20159                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 20160                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 20161                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 20162                                  ;; move crashes the system. We can do this because these	      ;I070
 20163                                  ;; systems clear all of memory on a cold boot.			      ;I070
 20164                                  ;								      ;I070
 20165                                  ;               in      al,64h         ; Test for password servr mode ;I070
 20166                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 20167                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 20168                                  ;                                      ; Check for Tortugas...	      ;I070
 20169                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 20170                                  ;               je      short ClrVDISKno                              ;I070
 20171                                  ;                                      ; Check for mod 30-286	      ;I070
 20172                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 20173                                  ;               jne     short ClrVDISKok			      ;I070
 20174                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 20175                                  ;								      ;I070
 20176                                  ;ClrVDISKok:							      ;I070
 20177                                  ;-----------------------------------------------------------	      ;I070
 20178                                  
 20179                                  	; 12/12/2022
 20180                                  	; ds = cs
 20181                                  
 20182 00000B35 06                      	push	es
 20183 00000B36 8CC8                    	mov	ax,cs
 20184 00000B38 89C2                    	mov	dx,ax
 20185 00000B3A B10C                    	mov	cl,12
 20186 00000B3C D3EA                    	shr	dx,cl
 20187 00000B3E B104                    	mov	cl,4
 20188 00000B40 D3E0                    	shl	ax,cl
 20189 00000B42 05[150B]                	add	ax,ClrdVDISKHead
 20190 00000B45 80D200                  	adc	dl,0
 20191                                  
 20192                                  	;; 23/10/2022
 20193                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 20194                                  	;mov	[cs:src_desc+2],ax
 20195                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 20196                                  	;mov	[cs:src_desc+4],dl
 20197                                  	; 12/12/2022
 20198                                  	;mov	[src_desc+desc.lo_word],ax
 20199 00000B48 A3[F70A]                	mov	[src_desc+2],ax
 20200                                  	;mov	[src_desc+desc.hi_byte],dl
 20201 00000B4B 8816[F90A]              	mov	[src_desc+4],dl
 20202                                  
 20203 00000B4F B91000                  	mov	cx,16	; 16 words
 20204 00000B52 0E                      	push	cs
 20205 00000B53 07                      	pop	es
 20206 00000B54 BE[E50A]                	mov	si,bmove
 20207 00000B57 B487                    	mov	ah,87h
 20208 00000B59 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 20209                                  			; CX = number of words to move 
 20210                                  			; ES:SI -> global descriptor table
 20211                                  			; Return: CF set on error, AH = status
 20212 00000B5B 07                      	pop	es
 20213 00000B5C C3                      	retn
 20214                                  
 20215                                  ; ----------------------------------------------------------------------
 20216                                  ;
 20217                                  ; procedure : SaveFreeHMAPtr
 20218                                  ;
 20219                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 20220                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 20221                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 20222                                  ;		the offset.
 20223                                  ;
 20224                                  ; Inputs : ES:DI - pointer to free HMA
 20225                                  ; Output : FreeHMAPtr in BIOS data segment updated
 20226                                  ;
 20227                                  ; ----------------------------------------------------------------------
 20228                                  
 20229                                  SaveFreeHMAPtr:
 20230                                  	; 04/09/2023
 20231 00000B5D 1E                      	push	ds
 20232 00000B5E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20233 00000B61 8ED8                    	mov	ds,ax
 20234                                  	;
 20235 00000B63 8CC3                    	mov	bx,es
 20236 00000B65 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 20237                                  	; 04/09/2023
 20238 00000B68 A2[0D00]                	mov	[inHMA],al ; 0FFh
 20239                                  	;
 20240 00000B6B 29D8                    	sub	ax,bx
 20241 00000B6D 83C70F                  	add	di,15		   ; para round
 20242 00000B70 83E7F0                  	and	di,0FFF0h
 20243 00000B73 B104                    	mov	cl,4
 20244 00000B75 D3E0                    	shl	ax,cl
 20245 00000B77 29C7                    	sub	di,ax
 20246                                  	;
 20247                                  	; 04/09/2023
 20248                                  	;push	ds
 20249                                  	;;mov	ax,Bios_Data ; 0070h
 20250                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20251                                  	; 21/10/2022
 20252                                  	; 04/09/2023
 20253                                  	;mov	ax,DOSBIODATASEG ; 0070h
 20254                                  	;mov	ds,ax
 20255 00000B79 893E[EB08]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 20256                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 20257 00000B7D 1F                      	pop	ds
 20258 00000B7E C3                      	retn
 20259                                  
 20260                                  ; ----------------------------------------------------------------------
 20261                                  ;
 20262                                  ; procedure : IsVDiskInstalled
 20263                                  ;
 20264                                  ;		Checks for the presence of VDISK header at 1MB boundary
 20265                                  ;		& INT 19 vector
 20266                                  ;
 20267                                  ; Inputs  : A20 flag should be ON
 20268                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 20269                                  ;
 20270                                  ; ----------------------------------------------------------------------
 20271                                  
 20272                                  IsVDiskInstalled:
 20273 00000B7F 31C0                    	xor	ax,ax
 20274 00000B81 8ED8                    	mov	ds,ax
 20275 00000B83 8E1E4E00                	mov	ds,[19*4+2]
 20276                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 20277                                  	; 23/10/2022
 20278 00000B87 BE1200                  	mov	si,18
 20279                                  	;mov	cx,VLEN1 ; 5
 20280 00000B8A B90500                  	mov	cx,5
 20281 00000B8D 0E                      	push	cs
 20282 00000B8E 07                      	pop	es
 20283 00000B8F BF[4B0A]                	mov	di,VDiskSig1
 20284 00000B92 F3A6                    	rep	cmpsb
 20285 00000B94 740F                    	je	short ivdins_retn
 20286 00000B96 B8FFFF                  	mov	ax,0FFFFh
 20287 00000B99 8ED8                    	mov	ds,ax
 20288                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 20289 00000B9B BE1300                  	mov	si,13h
 20290 00000B9E BF[700A]                	mov	di,VDiskSig2
 20291                                  	;;mov	cx,VLEN2  ; 5
 20292                                  	;mov	cx,5
 20293                                  	; 04/09/2023
 20294 00000BA1 B105                    	mov	cl,5
 20295 00000BA3 F3A6                    	rep	cmpsb
 20296                                  ivdins_retn: 
 20297 00000BA5 C3                      	retn			; returns the Zero flag
 20298                                  
 20299                                  ; ----------------------------------------------------------------------
 20300                                  ;
 20301                                  ; procedure : CPMHack
 20302                                  ;
 20303                                  ;		Copies the code from 0:c0 into ffff:0d0h
 20304                                  ;		for CPM compatibility
 20305                                  ;
 20306                                  ; ----------------------------------------------------------------------
 20307                                  
 20308                                  	; 11/12/2022
 20309                                  CPMHack:
 20310 00000BA6 1E                      	push	ds
 20311 00000BA7 B9FFFF                  	mov	cx,0FFFFh
 20312 00000BAA 8EC1                    	mov	es,cx		; ES = FFFF
 20313                                  	;xor	cx,cx
 20314                                  	; 11/12/2022
 20315 00000BAC 41                      	inc	cx  ; cx = 0
 20316 00000BAD 8ED9                    	mov	ds,cx		; DS = 0
 20317 00000BAF BEC000                  	mov	si,0C0h
 20318 00000BB2 BFD000                  	mov	di,0D0h
 20319                                  	;mov	cx,5
 20320 00000BB5 B105                    	mov	cl,5
 20321 00000BB7 FC                      	cld
 20322 00000BB8 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 20323 00000BBA 1F                      	pop	ds
 20324 00000BBB C3                      	retn
 20325                                  
 20326                                  ; ----------------------------------------------------------------------
 20327                                  ;
 20328                                  ; procedure : off_to_para
 20329                                  ;
 20330                                  ; ----------------------------------------------------------------------
 20331                                  off_to_para:
 20332 00000BBC D1E8                    	shr	ax,1
 20333 00000BBE D1E8                    	shr	ax,1
 20334 00000BC0 D1E8                    	shr	ax,1
 20335 00000BC2 D1E8                    	shr	ax,1
 20336 00000BC4 C3                      	retn
 20337                                  
 20338                                  ; ----------------------------------------------------------------------
 20339                                  ;**	TempCDS - Create (Temporary?) CDS
 20340                                  ;
 20341                                  ;	ENTRY	?? BUGBUG
 20342                                  ;		(DS) = SysInitSeg
 20343                                  ;	EXIT	?? BUGBUG
 20344                                  ;	USES	?? BUGBUG
 20345                                  ; ----------------------------------------------------------------------
 20346                                  
 20347                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20348                                  TempCDS:
 20349 00000BC5 C43E[6B02]              	les	di,[DOSINFO]
 20350 00000BC9 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 20351                                  	;mov	cl,[es:di+20h]
 20352 00000BCD 30ED                    	xor	ch,ch			; (cx) = # of block devices
 20353                                  
 20354 00000BCF 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 20355                                  	;mov	[es:di+21h],cl	
 20356                                  
 20357 00000BD3 88C8                    	mov	al,cl
 20358 00000BD5 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 20359                                  	;mov	ah,88
 20360 00000BD7 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 20361 00000BD9 E8C804                  	call	ParaRound		; (ax) = paragraph size for CDSs
 20362 00000BDC 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 20363                                  
 20364                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 20365                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 20366                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 20367                                  ;		   variable which has the top of free memory for
 20368                                  ;		   device driver loads, etc.
 20369                                  
 20370 00000BE0 29C6                    	sub	si,ax
 20371                                  
 20372                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 20373                                  ;		that automatically updates alloclim every time we
 20374                                  ;		set up some new CDSs. Instead, I've added code
 20375                                  ;		which pre-allocates space for 26 CDSs. This
 20376                                  ;	        way we've got room for worst case CDSs before
 20377                                  ;		we place MagicDrv.sys
 20378                                  ;
 20379                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 20380                                  
 20381                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20382                                  	; (SYSINIT:0C52h)
 20383 00000BE2 8936[A302]              	mov	[ALLOCLIM],si
 20384                                  
 20385 00000BE6 26897518                	mov	[es:di+SYSI_CDS+2],si
 20386                                  	;mov	[es:di+18h],si
 20387 00000BEA 89F0                    	mov	ax,si
 20388 00000BEC 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 20389                                  	;mov	[word es:di+16h],0
 20390                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 20391 00000BF2 26C535                  	lds	si,[es:di]
 20392 00000BF5 8EC0                    	mov	es,ax
 20393 00000BF7 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 20394                                  
 20395                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 20396                                  ;	info from the corresponding DPB.
 20397                                  ;
 20398                                  ;	(cx) = count of CDSs left to process
 20399                                  ;	(es:di) = address of next CDS
 20400                                  
 20401                                  fooset:
 20402                                  	; 23/10/2022
 20403 00000BF9 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 20404 00000BFD AB                      	stosw				; setup the root as the curdir
 20405                                  
 20406                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 20407                                  
 20408                                  ;	(ds:si) = address of DPB
 20409                                  ;		 (si) = -1 if no drive
 20410                                  
 20411 00000BFE 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 20412 00000C02 AB                      	stosw
 20413 00000C03 2EFE06[A502]            	inc	byte [cs:DirStrng]
 20414 00000C08 31C0                    	xor	ax,ax
 20415 00000C0A 51                      	push	cx
 20416                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 20417 00000C0B B93F00                  	mov	cx,63	; 23/10/2022
 20418 00000C0E F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 20419                                  
 20420                                  ;	should handle the system that does not have any floppies.
 20421                                  ;	in this case,we are going to pretended there are two dummy floppies
 20422                                  ;	in the system. still they have dpb and cds,but we are going to
 20423                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 20424                                  ;	"invalid drive specification" message when the user try to
 20425                                  ;	access them.
 20426                                  ;
 20427                                  ;	(ax) = 0
 20428                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20429                                  ;	(ds:si) = Next DPB (-1 if none)
 20430                                  
 20431 00000C10 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 20432 00000C13 7413                    	je	short fooset_zero	; don't have any physical drive.
 20433                                  
 20434                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 20435                                  ;	if we are faking floppy drives then see if this cds being initialised
 20436                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 20437                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 20438                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 20439                                  ;	for dpb offsets look at inc\dpb.inc.
 20440                                  
 20441                                  	; 04/09/2023
 20442 00000C15 41                      	inc	cx  ; cx = 1
 20443                                  
 20444 00000C16 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 04/09/2023
 20445                                  	;cmp	byte [cs:fake_floppy_drv],1
 20446 00000C1B 7512                    	jne	short normcds 		; machine has floppy drives
 20447                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 20448                                  	;cmp	byte [si],1
 20449 00000C1D 380C                    	cmp	[si],cl ; 1 ; 04/09/2023
 20450 00000C1F 770E                    	ja	short normcds
 20451 00000C21 B103                    	mov	cl,3			; the next dbp pointer
 20452                                  					; AX should be zero here
 20453 00000C23 F3AB                    	rep	stosw
 20454 00000C25 59                      	pop	cx
 20455 00000C26 EB17                    	jmp	short get_next_dpb
 20456                                  
 20457                                  ;	(ax) = 0
 20458                                  
 20459                                  fooset_zero:
 20460 00000C28 B103                    	mov	cl,3
 20461 00000C2A F3AB                    	rep	stosw
 20462 00000C2C 59                      	pop	cx
 20463 00000C2D EB13                    	jmp	short fincds
 20464                                  
 20465                                  ;*	We have a "normal" DPB and thus a normal CDS.
 20466                                  ;
 20467                                  ;	(ax) = 0
 20468                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20469                                  ;	(ds:si) = Next DPB (-1 if none)
 20470                                  
 20471                                  normcds:
 20472 00000C2F 59                      	pop	cx
 20473                                  
 20474                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 20475                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 20476                                  ;	this media is a non-fat based one.
 20477                                  
 20478                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 20479                                  	; 23/10/2022
 20480                                  	;cmp	byte [si+8],0
 20481                                  	; 04/09/2023 (ax=0)
 20482 00000C30 384408                  	cmp	[si+8],al ; 0
 20483 00000C33 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 20484 00000C35 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 20485                                  	;mov	ax,4000h
 20486                                  setnormcds:
 20487 00000C38 AB                      	stosw				; curdir_flags
 20488 00000C39 89F0                    	mov	ax,si
 20489 00000C3B AB                      	stosw				; curdir_devptr
 20490 00000C3C 8CD8                    	mov	ax,ds
 20491 00000C3E AB                      	stosw
 20492                                  
 20493                                  get_next_dpb:				; entry point for fake_fooset_zero
 20494                                  	; 23/10/2022
 20495 00000C3F C57419                  	lds	si,[si+19h]
 20496                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20497                                  fincds:
 20498 00000C42 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 20499 00000C45 AB                      	stosw				; curdir_id
 20500 00000C46 AB                      	stosw				; curdir_id
 20501 00000C47 AB                      	stosw				; curdir_user_word
 20502 00000C48 B80200                  	mov	ax,2
 20503 00000C4B AB                      	stosw				; curdir_end
 20504 00000C4C B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 20505 00000C4E AA                      	stosb
 20506 00000C4F AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 20507 00000C50 AB                      	stosw
 20508 00000C51 AB                      	stosw
 20509                                  
 20510 00000C52 E2A5                    	loop	fooset
 20511                                  	
 20512 00000C54 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 20513                                  	
 20514 00000C5A C3                      	retn
 20515                                  
 20516                                  ; ----------------------------------------------------------------------
 20517                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 20518                                  ;
 20519                                  ;	entry:
 20520                                  ;	   al == ASCII CAPS drive letter
 20521                                  ;
 20522                                  ;	exit:
 20523                                  ;	   ds:si -> DPB, or si = -1 if not found
 20524                                  ; ----------------------------------------------------------------------
 20525                                  
 20526                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 20527                                  ;
 20528                                  ;get_dpb_for_drive_al:
 20529                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 20530                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 20531                                  ;	lds	si,[si]
 20532                                  ;	sub	al,'A'
 20533                                  ;
 20534                                  ;get_dpb_for_drive_1:
 20535                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 20536                                  ;	cmp	al,[si]
 20537                                  ;	je	short got_dpb_for_drive	;  done if so
 20538                                  ;
 20539                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20540                                  ;	cmp	si,-1
 20541                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 20542                                  ;
 20543                                  ;got_dpb_for_drive:
 20544                                  ;	retn
 20545                                  
 20546                                  ;=======================================================================
 20547                                  
 20548                                  ;**	EndFile - Build DOS structures
 20549                                  ;
 20550                                  ; This procedure is called after the config.sys has been processed and
 20551                                  ; installable device drivers have been loaded (but before "install="
 20552                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 20553                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 20554                                  ; to allow for the safe EXECing of "install=" programs. All memory
 20555                                  ; above these structures is deallocated back to DOS.
 20556                                  ;
 20557                                  ;	ENTRY	?? BUGBUG
 20558                                  ;	EXIT	?? BUGBUG
 20559                                  ;	USES	?? BUGBUG
 20560                                  
 20561                                  ;=======================================================================
 20562                                  ; allocate files
 20563                                  ; ----------------------------------------------------------------------
 20564                                  
 20565                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20566                                  	; (SYSINIT:0CCDh)
 20567                                  
 20568                                  endfile:
 20569                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 20570                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 20571                                  ; to confbot.
 20572                                  
 20573                                  ;	if this procedure has been called to take care of install= command,
 20574                                  ;	   then we have to save es,si registers.
 20575                                  
 20576                                  	; 11/12/2022
 20577                                  	; ds = cs
 20578                                  
 20579                                  	; 23/10/2022
 20580                                  	; 31/03/2019
 20581 00000C5B 1E                      	push	ds
 20582                                  
 20583                                  	;;mov	ax,Bios_Data ; 0070h
 20584                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20585                                  	; 21/10/2022
 20586 00000C5C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20587 00000C5F 8ED8                    	mov	ds,ax
 20588                                  
 20589                                  	;cmp	word [052Fh],0
 20590 00000C61 833E[2605]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 20591 00000C66 7505                    	jne	short multrk_flag_done
 20592                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20593                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 20594                                  	; 12/12/2022
 20595 00000C68 800E[2605]80            	or	byte [multrk_flag],multrk_on ; 80h
 20596                                  multrk_flag_done:
 20597                                  	; 23/10/2022
 20598                                  	; 31/03/2019
 20599 00000C6D 1F                      	pop	ds
 20600                                  
 20601                                  	; 11/12/2022
 20602                                  	; ds = cs
 20603 00000C6E A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 20604 00000C71 A3[A302]                	mov	[ALLOCLIM],ax
 20605                                  	; 23/10/2022
 20606                                  	;mov	ax, [cs:top_of_cdss]
 20607                                  	;mov	[cs:ALLOCLIM], ax 
 20608                                  
 20609                                  	; 11/12/2022
 20610                                  	; ds = cs
 20611                                  	;push	cs
 20612                                  	;pop	ds
 20613                                  	
 20614                                  	;mov	ax,[CONFBOT]
 20615                                  	;mov	[ALLOCLIM],ax
 20616                                  
 20617 00000C74 E8A023                  	call	round
 20618                                  	; 11/12/2022
 20619                                  	; ds = cs
 20620 00000C77 A0[9D02]                	mov	al,[FILES]
 20621                                  	; 23/10/2022
 20622                                  	;mov	al,[cs:FILES]
 20623 00000C7A 2C05                    	sub	al,5
 20624 00000C7C 764B                    	jbe	short dofcbs
 20625                                  
 20626 00000C7E 50                      	push	ax
 20627                                  	;mov	al,devmark_files ; 'F'
 20628 00000C7F B046                    	mov	al,'F'
 20629 00000C81 E86D07                  	call	setdevmark		; set devmark for sfts (files)
 20630 00000C84 58                      	pop	ax
 20631 00000C85 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20632                                  					;  it does sign extend.
 20633                                  	; 11/12/2022
 20634                                  	; ds = cs
 20635 00000C87 8B1E[DE03]              	mov	bx,[memlo]
 20636 00000C8B 8B16[E003]              	mov	dx,[memhi]
 20637 00000C8F C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20638                                  	; 23/10/2022
 20639                                  	;mov	bx,[cs:memlo]
 20640                                  	;mov	dx,[cs:memhi]
 20641                                  	;lds	di,[cs:DOSINFO]		
 20642                                  
 20643                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 20644 00000C93 C57D04                  	lds	di,[di+4]
 20645                                  
 20646                                  	;mov	[di+SF.SFLink],bx
 20647 00000C96 891D                    	mov	[di],bx
 20648 00000C98 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 20649                                  
 20650 00000C9B 0E                      	push	cs
 20651 00000C9C 1F                      	pop	ds
 20652                                  
 20653                                  	; 11/12/2022
 20654                                  	; ds = cs
 20655 00000C9D C43E[DE03]              	les	di,[memlo]		;point to new sft
 20656                                  	; 23/10/2022
 20657                                  	;les	di,[cs:memlo]
 20658                                  
 20659                                  	;mov	word [es:di+SF.SFLink],-1
 20660 00000CA1 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 20661                                  	;mov	[es:di+SF.SFCount],ax
 20662 00000CA6 26894504                	mov	[es:di+4],ax
 20663                                  	;mov	bl,SF_ENTRY.size ; 59
 20664 00000CAA B33B                    	mov	bl,59
 20665 00000CAC F6E3                    	mul	bl			;ax = number of bytes to clear
 20666 00000CAE 89C1                    	mov	cx,ax
 20667                                  	; 11/12/2022
 20668                                  	; ds = cs
 20669 00000CB0 0106[DE03]              	add	[memlo],ax		;allocate memory
 20670                                  	; 23/10/2022
 20671                                  	;add	[cs:memlo],ax
 20672 00000CB4 B80600                  	mov	ax,6
 20673                                  	; 11/12/2022
 20674 00000CB7 0106[DE03]              	add	[memlo],ax		;remember the header too
 20675                                  	;add	[cs:memlo],ax
 20676                                  	; 11/12/2022
 20677 00000CBB 800E[1014]02            	or	byte [setdevmarkflag],for_devmark ; 2
 20678                                  	; 23/10/2022
 20679                                  	;or	byte [cs:setdevmarkflag],2
 20680 00000CC0 E85423                  	call	round			; check for mem error before the stosb
 20681 00000CC3 01C7                    	add	di,ax
 20682 00000CC5 31C0                    	xor	ax,ax
 20683 00000CC7 F3AA                    	rep	stosb			;clean out the stuff
 20684                                  
 20685                                  ; allocate fcbs
 20686                                  ; ----------------------------------------------------------------------
 20687                                  
 20688                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20689                                  	; (SYSINIT:0D48h)
 20690                                  dofcbs:
 20691                                  	; 11/12/2022
 20692                                  	; ds = cs
 20693                                  	;push	cs
 20694                                  	;pop	ds
 20695 00000CC9 E84B23                  	call	round
 20696                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 20697 00000CCC B058                    	mov	al,'X'
 20698 00000CCE E82007                  	call	setdevmark
 20699                                  	; 11/12/2022
 20700                                  	; ds = cs
 20701 00000CD1 A0[9E02]                	mov	al,[FCBS]
 20702                                  	;mov	al,[cs:FCBS]
 20703 00000CD4 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20704                                  					;  it does sign extend.
 20705                                  	; 11/12/2022
 20706 00000CD6 8B1E[DE03]              	mov	bx,[memlo]
 20707 00000CDA 8B16[E003]              	mov	dx,[memhi]
 20708 00000CDE C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20709                                  	; 23/10/2022
 20710                                  	;mov	bx,[cs:memlo]
 20711                                  	;mov	dx,[cs:memhi]
 20712                                  	;lds	di,[cs:DOSINFO]
 20713                                  
 20714                                  	;mov	[di+SYSI_FCB],bx
 20715                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 20716                                  	; 23/10/2022
 20717 00000CE2 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 20718 00000CE5 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 20719                                  
 20720 00000CE8 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 20721 00000CED 30FF                    	xor	bh,bh
 20722                                  	;mov	[di+SYSI_KEEP],bx
 20723 00000CEF 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 20724                                  
 20725 00000CF2 0E                      	push	cs
 20726 00000CF3 1F                      	pop	ds
 20727                                  	
 20728 00000CF4 C43E[DE03]              	les	di,[memlo]		;point to new table
 20729                                  	;mov	word [es:di+SF.SFLink],-1
 20730 00000CF8 26C705FFFF              	mov	word [es:di],-1
 20731                                  	;mov	[es:di+SF.SFCount],ax
 20732                                  	; 02/11/2022
 20733 00000CFD 26894504                	mov	[es:di+4],ax
 20734 00000D01 B339                    	mov	bl,SF_ENTRY.size ; 59
 20735 00000D03 89C1                    	mov	cx,ax
 20736 00000D05 F6E3                    	mul	bl			;ax = number of bytes to clear
 20737 00000D07 0106[DE03]              	add	[memlo],ax		;allocate memory
 20738                                  	;mov	ax,6
 20739 00000D0B B80600                  	mov	ax,SF.size-2 ; 6
 20740 00000D0E 0106[DE03]              	add	[memlo],ax		;remember the header too
 20741                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20742 00000D12 800E[1014]02            	or	byte [setdevmarkflag],2
 20743 00000D17 E8FD22                  	call	round			; check for mem error before the stosb
 20744 00000D1A 01C7                    	add	di,ax			;skip over header
 20745 00000D1C B041                    	mov	al,'A'
 20746                                  fillloop:
 20747 00000D1E 51                      	push	cx			; save count
 20748 00000D1F B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 20749 00000D22 FC                      	cld
 20750 00000D23 F3AA                    	rep	stosb			; filled
 20751                                  
 20752                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 20753                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 20754                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 20755                                  
 20756                                  	; 18/12/2022
 20757                                  	;cx = 0
 20758 00000D25 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 20759 00000D29 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 20760 00000D2D 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 20761                                  	
 20762                                  	; 23/10/2022	
 20763                                  	;mov     word [es:di-3Bh],0
 20764                                  	;mov     word [es:di-26h],0
 20765                                  	;mov     word [es:di-24h],0
 20766                                  
 20767 00000D31 59                      	pop	cx
 20768 00000D32 E2EA                    	loop	fillloop
 20769                                  
 20770                                  ; allocate buffers
 20771                                  ; ----------------------------------------------------------------------
 20772                                  
 20773                                  ; search through the list of media supported and allocate 3 buffers if the
 20774                                  ; capacity of the drive is > 360kb
 20775                                  
 20776                                  	; 18/12/2022
 20777                                  	; cx = 0
 20778 00000D34 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20779 00000D39 7403                    	je	short dodefaultbuff
 20780 00000D3B E98000                  	jmp	dobuff			; the user entered the buffers=.
 20781                                  
 20782                                  dodefaultbuff:
 20783                                  	; 18/12/2022
 20784 00000D3E 890E[9902]              	mov	[h_buffers],cx ; 0
 20785 00000D42 41                      	inc	cx
 20786 00000D43 41                      	inc	cx
 20787 00000D44 890E[9702]              	mov	[buffers],cx ; 2
 20788                                  	
 20789                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20790                                  	;mov	word [buffers],2	; default to 2 buffers
 20791                                  
 20792                                  	; 23/10/2022
 20793                                  	; 04/09/2023
 20794                                  	;push	ax
 20795                                  	;push	ds ; 26/03/2019
 20796                                  
 20797                                  	; 04/09/2023
 20798                                  	; ds = cs
 20799 00000D48 C42E[6B02]              	les	bp,[DOSINFO]		; search through the dpb's
 20800                                  	;les	bp,[cs:DOSINFO]
 20801                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20802                                  	; 11/12/2022
 20803 00000D4C 26C46E00                	les	bp,[es:bp]
 20804                                  	; 23/10/2022
 20805                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20806                                  
 20807                                  	; 04/09/2023
 20808                                  	; ds = cs
 20809                                  	;push	cs
 20810                                  	;pop	ds
 20811                                  ;SYSINIT:0DE2h:
 20812                                  nextdpb:				; test if the drive supports removeable media
 20813                                  	;mov	bl,[es:bp+DPB.drive]
 20814                                  	; 11/12/2022
 20815 00000D50 268A5E00                	mov	bl,[es:bp]
 20816                                  	; 23/10/2022
 20817                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20818                                  
 20819                                  	;inc	bl
 20820                                  	; 18/12/2022
 20821 00000D54 43                      	inc	bx
 20822                                  
 20823                                  	;mov	ax,(IOCTL<<8)|8
 20824 00000D55 B80844                  	mov	ax,4408h
 20825 00000D58 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20826                                  
 20827                                  ; ignore fixed disks
 20828                                  
 20829 00000D5A 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20830 00000D5C 7534                    	jnz	short nosetbuf
 20831                                  
 20832                                  ; get parameters of drive
 20833                                  
 20834 00000D5E 31DB                    	xor	bx,bx
 20835                                  	;;mov	bl,[es:bp+DPB.drive]
 20836                                  	; 11/12/2022
 20837 00000D60 268A5E00                	mov	bl,[es:bp]
 20838                                  	; 23/10/2022
 20839                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20840                                  	
 20841                                  	;inc	bl
 20842                                  	; 18/12/2022
 20843 00000D64 43                      	inc	bx
 20844                                  
 20845 00000D65 BA[7434]                	mov	dx,deviceparameters
 20846                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20847 00000D68 B80D44                  	mov	ax,440Dh
 20848                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20849 00000D6B B96008                  	mov	cx,860h
 20850 00000D6E CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20851 00000D70 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20852                                  					; generic ioctl
 20853                                  ; determine capacity of drive
 20854                                  ; media capacity = #sectors * bytes/sector
 20855                                  
 20856                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20857                                  	; 23/10/2022
 20858 00000D72 8B1E[8334]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20859                                  	
 20860                                  ; to keep the magnitude of the media capacity within a word,
 20861                                  ; scale the sector size
 20862                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20863                                  
 20864                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20865                                  	; 23/10/2022
 20866 00000D76 A1[7B34]                	mov	ax, [deviceparameters+7] ; bytes per sector
 20867 00000D79 31D2                    	xor	dx,dx
 20868 00000D7B B90002                  	mov	cx,512
 20869 00000D7E F7F1                    	div	cx			; scale sector size in factor of
 20870                                  					; 512 bytes
 20871 00000D80 F7E3                    	mul	bx			; ax = #sectors * size factor
 20872 00000D82 09D2                    	or	dx,dx			; just in case of large floppies
 20873 00000D84 7505                    	jnz	short setbuf
 20874 00000D86 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20875 00000D89 7607                    	jbe	short nosetbuf
 20876                                  setbuf:
 20877                                  	; 18/12/2022
 20878                                  	; word [buffers] = 2
 20879 00000D8B C606[9702]03            	mov	byte [buffers],3
 20880                                  	;mov	word [buffers],3
 20881 00000D90 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20882                                  					; for default buffer count
 20883                                  nosetbuf:
 20884                                  	; 23/10/2022
 20885                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20886 00000D92 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20887 00000D97 7406                    	je	short chk_memsize_for_buffers
 20888                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20889 00000D99 26C46E19                	les	bp,[es:bp+19h]
 20890 00000D9D EBB1                    	jmp	short nextdpb
 20891                                  
 20892                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20893                                  ;memory size too.
 20894                                  ; default buffers = 2
 20895                                  ; if diskette media > 360 kb,then default buffers = 3
 20896                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20897                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20898                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20899                                  
 20900                                  chk_memsize_for_buffers:
 20901                                  	; 18/12/2022
 20902                                  	;cmp	word [MEMORY_SIZE],2000h
 20903                                  	;jbe	short bufset
 20904                                  	;mov	word [buffers],5
 20905                                  	;cmp	word [MEMORY_SIZE],4000h
 20906                                  	;jbe	short bufset
 20907                                  	;mov	word [buffers],10
 20908                                  	;cmp	word [MEMORY_SIZE],8000h
 20909                                  	;jbe	short bufset
 20910                                  	;mov	word [buffers],15
 20911                                  
 20912                                  	; 18/12/2022
 20913                                  	; word [buffers] = 3 or 2
 20914 00000D9F BB[9702]                	mov	bx,buffers
 20915 00000DA2 A1[9202]                	mov	ax,[MEMORY_SIZE]
 20916 00000DA5 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20917                                  
 20918 00000DA6 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20919 00000DA9 7213                    	jb	short bufset
 20920 00000DAB C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20921 00000DAE 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20922 00000DB1 730B                    	jnb	short bufset
 20923 00000DB3 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20924 00000DB6 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20925 00000DB9 7303                    	jnb	short bufset
 20926 00000DBB C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20927                                  bufset:
 20928                                  	; 23/10/2022
 20929                                  	; 26/03/2019
 20930                                  	; 04/09/2023
 20931                                  	;pop	ds
 20932                                  	;pop	ax
 20933                                  
 20934                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20935                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20936                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20937                                  
 20938                                  ; 26/03/2019
 20939                                  
 20940                                  ;*******************************************************************************
 20941                                  ;									       *
 20942                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20943                                  ; input :								       *
 20944                                  ;    memhi:memlo - start of the next available memory			       *
 20945                                  ;    buffers = number of buffers					       *
 20946                                  ;    h_buffers = number of secondary buffers				       *
 20947                                  ;									       *
 20948                                  ; output:								       *
 20949                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20950                                  ;	buffinfo set.							       *
 20951                                  ;	bufferqueue set.						       *
 20952                                  ;									       *
 20953                                  ; subroutines to be called:						       *
 20954                                  ;									       *
 20955                                  ;*******************************************************************************
 20956                                  
 20957                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20958                                  	; (SYSINIT:0E60h)
 20959                                  dobuff:
 20960                                  	; ds = cs ; 31/03/2019
 20961                                  	; 23/10/2022
 20962                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20963                                  	; 04/09/2023
 20964 00000DBE A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 20965 00000DC1 8B0E[9902]              	mov	cx,[h_buffers] ; *
 20966 00000DC5 C51E[6B02]              	lds	bx,[DOSINFO]
 20967                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 20968                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20969 00000DC9 89473F                  	mov	[bx+3Fh],ax
 20970                                  	; 04/09/2023
 20971                                  	;mov	ax,[cs:h_buffers]
 20972                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20973                                  	;mov	[bx+41h],ax
 20974                                  	; 04/09/2023
 20975 00000DCC 894F41                  	mov	[bx+41h],cx ; *
 20976 00000DCF C55F12                  	lds	bx,[bx+12h]
 20977                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20978 00000DD2 E84222                  	call	round		; get [memhi]:[memlo]
 20979                                  	;mov	al,devmark_buf	; ='B'
 20980 00000DD5 B042                    	mov	al,'B'	
 20981 00000DD7 E81706                  	call	setdevmark
 20982                                  
 20983                                  ;allocate buffers
 20984                                  
 20985 00000DDA 1E                      	push	ds			; save buffer info. ptr.
 20986 00000DDB 53                      	push	bx
 20987                                  
 20988 00000DDC E85203                  	call	set_buffer
 20989                                  
 20990 00000DDF 5B                      	pop	bx
 20991 00000DE0 1F                      	pop	ds
 20992                                  
 20993                                  ;now set the secondary buffer if specified.
 20994                                  
 20995 00000DE1 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20996 00000DE7 742D                    	je	short xif16
 20997 00000DE9 E82B22                  	call	round
 20998                                  	; 23/10/2022
 20999 00000DEC 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 21000                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 21001 00000DF1 894F06                  	mov	[bx+6],cx
 21002 00000DF4 2E8B0E[E003]            	mov	cx,[cs:memhi]
 21003                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 21004 00000DF9 894F08                  	mov	[bx+8],cx
 21005 00000DFC 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 21006                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 21007 00000E01 894F0A                  	mov	[bx+10],cx
 21008 00000E04 B80002                  	mov	ax,512			; 512 byte
 21009 00000E07 F7E1                    	mul	cx
 21010 00000E09 2EA3[DE03]              	mov	[cs:memlo],ax
 21011                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21012 00000E0D 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 21013 00000E13 E80122                  	call	round
 21014                                  xif16:
 21015                                  
 21016                                  ; ----------------------------------------------------------------------
 21017                                  ; allocate cdss
 21018                                  ; ----------------------------------------------------------------------
 21019                                  
 21020                                  buf1:
 21021 00000E16 E8FE21                  	call	round
 21022                                  
 21023 00000E19 50                      	push	ax
 21024                                  	; 23/10/2022
 21025                                  	;mov	ax,devmark_cds		;='L'
 21026 00000E1A B84C00                  	mov	ax, 'L'
 21027 00000E1D E8D105                  	call	setdevmark
 21028 00000E20 58                      	pop	ax
 21029                                  
 21030 00000E21 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 21031                                  	;mov	cl,[es:di+SYSI_NUMIO]
 21032 00000E26 268A4D20                	mov	cl,[es:di+20h]
 21033 00000E2A 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 21034 00000E2F 7305                    	jae	short gotncds 		; user setting must be at least numio
 21035 00000E31 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 21036                                  gotncds:
 21037 00000E36 30ED                    	xor	ch,ch
 21038                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 21039 00000E38 26884D21                	mov	[es:di+21h],cl
 21040 00000E3C 2EA1[E003]              	mov	ax,[cs:memhi]
 21041                                  	;mov	[es:di+SYSI_CDS+2],ax
 21042 00000E40 26894518                	mov	[es:di+18h],ax
 21043 00000E44 2EA1[DE03]              	mov	ax,[cs:memlo]
 21044                                  	;mov	[es:di+SYSI_CDS],ax
 21045 00000E48 26894516                	mov	[es:di+16h],ax
 21046 00000E4C 88C8                    	mov	al,cl
 21047                                  	;mov	ah,curdirlen ; curdir_list.size
 21048 00000E4E B458                    	mov	ah,88
 21049 00000E50 F6E4                    	mul	ah
 21050 00000E52 E84F02                  	call	ParaRound
 21051 00000E55 2E0106[E003]            	add	[cs:memhi],ax
 21052                                  
 21053                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21054 00000E5A 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 21055 00000E60 E8B421                  	call	round			; check for mem error before initializing
 21056                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 21057 00000E63 26C535                  	lds	si,[es:di]
 21058                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 21059 00000E66 26C47D16                	les	di,[es:di+16h]
 21060 00000E6A E88CFD                  	call	fooset
 21061                                  
 21062                                  ; ----------------------------------------------------------------------
 21063                                  ; allocate space for internal stack
 21064                                  ; ----------------------------------------------------------------------
 21065                                  
 21066 00000E6D 0E                      	push	cs
 21067 00000E6E 1F                      	pop	ds
 21068                                  
 21069                                  ;	if the user did not entered stacks= command, as a default, do not install
 21070                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 21071                                  ;	otherwise,install it to the user specified value or to the default
 21072                                  ;	value of 9,128 for other systems.
 21073                                  
 21074 00000E6F 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 21075 00000E74 740E                    	je	short doinstallstack	; then install as specified by the user
 21076 00000E76 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 21077 00000E7B 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 21078 00000E7D 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 21079 00000E82 736D                    	jae	short skipstack
 21080                                  doinstallstack:
 21081 00000E84 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 21082 00000E87 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 21083 00000E89 7466                    	jz	short skipstack		; don't install stack.
 21084                                  
 21085                                  ;	dynamic relocation of stack code.
 21086                                  
 21087 00000E8B E88921                  	call	round			;[memhi] = seg. for stack code
 21088                                  					;[memlo] = 0
 21089                                  
 21090                                  ; set devmark block into memory for mem command
 21091                                  ; devmark_id = 's' for stack
 21092                                  
 21093                                  	;mov	al,devmark_stk	;='S'
 21094                                  	; 23/10/2022
 21095 00000E8E B053                    	mov	al,'S'
 21096 00000E90 E85E05                  	call	setdevmark
 21097                                  
 21098 00000E93 A1[E003]                	mov	ax,[memhi]
 21099 00000E96 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 21100                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21101                                  	; 11/12/2022
 21102                                  	; ds = cs
 21103                                  	;push	cs
 21104                                  	;pop	ds
 21105 00000E98 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 21106 00000E9A 31FF                    	xor	di,di
 21107 00000E9C B9[6702]                	mov	cx,endstackcode
 21108 00000E9F 890E[DE03]              	mov	[memlo],cx
 21109 00000EA3 E87121                  	call	round		;have enough space for relocation?
 21110 00000EA6 F3A4                    	rep	movsb
 21111                                  
 21112 00000EA8 1E                      	push	ds		; stick the location of the NextStack entry
 21113                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 21114                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21115                                  	; 21/10/2022
 21116 00000EA9 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21117 00000EAC 8ED8                    	mov	ds,ax
 21118 00000EAE C706[B508][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 21119 00000EB4 8C06[B708]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 21120                                  
 21121 00000EB8 2EA1[DE03]              	mov	ax,[cs:memlo]
 21122 00000EBC 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 21123 00000EC0 A3[BB08]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 21124 00000EC3 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 21125 00000EC7 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 21126 00000ECB A3[BD08]                	mov	[IT_StackLoc+2],ax
 21127                                  
 21128                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 21129                                  
 21130                                  	;mov	ax,entrysize ; mov ax,8
 21131                                  	; 23/10/2022
 21132 00000ECE B80800                  	mov	ax,8
 21133 00000ED1 2E0306[8C02]            	add	ax,[cs:stack_size]
 21134 00000ED6 2EF726[8A02]            	mul	word [cs:stack_count]
 21135                                  
 21136 00000EDB A3[BF08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 21137                                  
 21138 00000EDE 1F                      	pop	ds		; no more need to access Instance Table
 21139                                  
 21140 00000EDF E8C201                  	call	ParaRound	; convert size to paragraphs
 21141                                  	
 21142                                  	; 11/12/2022
 21143                                  	; ds = cs
 21144                                  	;add	[cs:memhi],ax
 21145 00000EE2 0106[E003]              	add	[memhi],ax
 21146                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21147                                  	;or	byte [cs:setdevmarkflag],2
 21148 00000EE6 800E[1014]02            	or	byte [setdevmarkflag],2
 21149                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 21150                                  				;to set the devmark_size for stack by round routine.
 21151 00000EEB E82921                  	call	round		; check for memory error before
 21152                                  				; continuing
 21153 00000EEE E8E702                  	call	stackinit	; initialize hardware stack. 
 21154                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 21155                                  skipstack:
 21156                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21157                                  	; (SYSINIT:0F99h)
 21158                                  
 21159                                  	; 11/12/2022
 21160                                  	; ds = cs
 21161                                  	;push	cs
 21162                                  	;pop	ds
 21163                                  
 21164 00000EF1 A0[9D02]                	mov	al,[FILES]
 21165 00000EF4 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 21166                                  				;  it does sign extend.
 21167 00000EF6 89C1                    	mov	cx,ax
 21168 00000EF8 31DB                    	xor	bx,bx		;close standard input
 21169 00000EFA B43E                    	mov	ah,3Eh ; CLOSE
 21170 00000EFC CD21                    	int	21h
 21171 00000EFE BB0200                  	mov	bx,2
 21172                                  rcclloop:			;close everybody but standard output
 21173 00000F01 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 21174 00000F03 CD21                    	int	21h		; in case we can't get new one open.
 21175 00000F05 43                      	inc	bx
 21176 00000F06 E2F9                    	loop	rcclloop
 21177                                  
 21178 00000F08 BA[FE32]                	mov	dx,condev
 21179 00000F0B B002                    	mov	al,2
 21180 00000F0D B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 21181 00000F0F F9                      	stc			; set for possible int 24
 21182 00000F10 CD21                    	int	21h
 21183 00000F12 7305                    	jnc	short goaux
 21184 00000F14 E84A23                  	call	badfil
 21185 00000F17 EB13                    	jmp	short goaux2
 21186                                  goaux:	
 21187 00000F19 50                      	push	ax
 21188 00000F1A BB0100                  	mov	bx,1		;close standard output
 21189 00000F1D B43E                    	mov	ah,3Eh ; CLOSE
 21190 00000F1F CD21                    	int	21h
 21191 00000F21 58                      	pop	ax
 21192                                  
 21193 00000F22 89C3                    	mov	bx,ax		;new device handle
 21194 00000F24 B445                    	mov	ah,45h ; XDUP
 21195 00000F26 CD21                    	int	21h		;dup to 1,stdout
 21196 00000F28 B445                    	mov	ah,45h ; XDUP
 21197 00000F2A CD21                    	int	21h		;dup to 2,stderr
 21198                                  goaux2: 
 21199 00000F2C BA[0233]                	mov	dx,auxdev
 21200 00000F2F B002                    	mov	al,2		;read/write access
 21201 00000F31 E85E23                  	call	open_dev
 21202                                  
 21203 00000F34 BA[0633]                	mov	dx,prndev
 21204 00000F37 B001                    	mov	al,1		;write only
 21205 00000F39 E85623                  	call	open_dev
 21206                                  
 21207                                  ;global rearm command for shared interrupt devices attached in the system;
 21208                                  ;shared interrupt attachment has some problem when it issues interrupt
 21209                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 21210                                  ;no further interrupts on that level will be presented until a global rearm
 21211                                  ;is issued. by the request of the system architecture group, msbio will
 21212                                  ;issue a global rearm after every device driver is loaded.
 21213                                  ;to issue a global rearm:	;for pc1,xt,palace
 21214                                  ;
 21215                                  ;			  out 02f2h,xx  ; interrupt level 2
 21216                                  ;			  out 02f3h,xx  ; interrupt level 3
 21217                                  ;			  out 02f4h,xx  ; interrupt level 4
 21218                                  ;			  out 02f5h,xx  ; interrupt level 5
 21219                                  ;			  out 02f6h,xx  ; interrupt level 6
 21220                                  ;			  out 02f7h,xx  ; interrupt level 7
 21221                                  ;
 21222                                  ;	for pc at,in addition to the above commands,
 21223                                  ;	need to handle the secondary interrupt handler
 21224                                  ;
 21225                                  ;			  out 06f2h,xx  ; interrupt level 10
 21226                                  ;			  out 06f3h,xx  ; interrupt level 11
 21227                                  ;			  out 06f4h,xx  ; interrupt level 12
 21228                                  ;			  out 06f6h,xx  ; interrupt level 14
 21229                                  ;			  out 06f7h,xx  ; interrupt level 15
 21230                                  ;
 21231                                  ;	for round-up machine
 21232                                  ;
 21233                                  ;			  none.
 21234                                  
 21235                                  ; where xx stands for any value.
 21236                                  ;
 21237                                  ; for your information,after naples level machine,the system service bios
 21238                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 21239                                  
 21240                                  	; 24/10/2022
 21241                                  
 21242 00000F3C 50                      	push	ax
 21243 00000F3D 53                      	push	bx
 21244 00000F3E 52                      	push	dx
 21245 00000F3F 06                      	push	es
 21246                                  
 21247 00000F40 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 21248 00000F42 BAF202                  	mov	dx,2F2h 		;get starting address
 21249 00000F45 EE                      	out	dx,al			; out 02f2h,0ffh
 21250 00000F46 42                      	inc	dx
 21251 00000F47 EE                      	out	dx,al			; out 02f3h,0ffh
 21252 00000F48 42                      	inc	dx
 21253 00000F49 EE                      	out	dx,al			; out 02f4h,0ffh
 21254 00000F4A 42                      	inc	dx
 21255 00000F4B EE                      	out	dx,al			; out 02f5h,0ffh
 21256 00000F4C 42                      	inc	dx
 21257 00000F4D EE                      	out	dx,al			; out 02f6h,0ffh
 21258 00000F4E 42                      	inc	dx
 21259 00000F4F EE                      	out	dx,al			; out 02f7h,0ffh
 21260                                  
 21261                                  ;sb secondary global rearm
 21262                                  
 21263 00000F50 B800F0                  	mov	ax,0F000h		;get machine type
 21264 00000F53 8EC0                    	mov	es,ax
 21265 00000F55 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 21266 00000F5B 740D                    	je	short startrearm	; *if at no need to check
 21267                                  
 21268 00000F5D B4C0                    	mov	ah,0C0h 		;get system configuration
 21269 00000F5F CD15                    	int	15h			; *
 21270 00000F61 7216                    	jc	short finishrearm	; *jmp if old rom
 21271                                  
 21272                                  ; test feature byte for secondary interrupt controller
 21273                                  
 21274 00000F63 26F6470540              	test	byte [es:bx+5],40h
 21275                                  	; 24/10/2022
 21276                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 21277 00000F68 740F                    	je	short finishrearm	;jmp if it is there
 21278                                  
 21279                                  startrearm:
 21280 00000F6A B0FF                    	mov	al,0FFh 		;write any pattern to port
 21281 00000F6C BAF206                  	mov	dx,6F2h 		;get starting address
 21282 00000F6F EE                      	out	dx,al			;out 06f2h,0ffh
 21283 00000F70 42                      	inc	dx			;bump address
 21284 00000F71 EE                      	out	dx,al			;out 06f3h,0ffh
 21285 00000F72 42                      	inc	dx			;bump address
 21286 00000F73 EE                      	out	dx,al			;out 06f4h,0ffh
 21287 00000F74 42                      	inc	dx			;bump address
 21288 00000F75 42                      	inc	dx			;bump address
 21289 00000F76 EE                      	out	dx,al			;out 06f6h,0ffh
 21290 00000F77 42                      	inc	dx			;bump address
 21291 00000F78 EE                      	out	dx,al			;out 06f7h,0ffh
 21292                                  
 21293                                  finishrearm:
 21294 00000F79 07                      	pop	es
 21295 00000F7A 5A                      	pop	dx
 21296 00000F7B 5B                      	pop	bx
 21297 00000F7C 58                      	pop	ax
 21298                                  
 21299                                  ;    global rearm end *******************
 21300                                  
 21301                                  ; ----------------------------------------------------------------------
 21302                                  ; allocate sysinit_base for install= command
 21303                                  ; ----------------------------------------------------------------------
 21304                                  ; sysinit_base allocation.
 21305                                  ;   check if endfile has been called to handle install= command.
 21306                                  
 21307                                  set_sysinit_base:
 21308                                  
 21309                                  ; ----------------------------------------------------------------------
 21310                                  ;sysinit_base will be established in the secure area of
 21311                                  ;lower memory when it handles the first install= command.
 21312                                  ;sysinit_base is the place where the actual exec function will be called and
 21313                                  ;will check sysinit module in high memory if it is damaged by the application
 21314                                  ;program.  if sysinit module has been broken,then "memory error..." message
 21315                                  ;is displayed by sysinit_base.
 21316                                  ; ----------------------------------------------------------------------
 21317                                  
 21318                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 21319                                  	; (SYSINIT:1028h)
 21320                                  
 21321                                  	; 11/12/2022
 21322                                  	; ds = cs
 21323 00000F7D 50                      	push	ax			; set devmark for mem command
 21324 00000F7E A1[E003]                	mov	ax,[memhi]
 21325 00000F81 2B06[E403]              	sub	ax,[area]
 21326 00000F85 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 21327                                  	;mov	al,devmark_inst ; 'T'
 21328 00000F88 B054                    	mov	al,'T'
 21329 00000F8A E86404                  	call	setdevmark
 21330 00000F8D 58                      	pop	ax
 21331                                  
 21332 00000F8E 8B3E[E003]              	mov	di,[memhi]
 21333 00000F92 8EC7                    	mov	es,di
 21334 00000F94 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 21335 00000F98 31FF                    	xor	di,di
 21336 00000F9A 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 21337 00000F9E BE[B010]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 21338 00000FA1 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 21339                                  	; 24/10/2022 
 21340                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 21341 00000FA4 010E[DE03]              	add	[memlo],cx
 21342                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 21343                                  	; 11/12/2022
 21344                                  	; ds = cs
 21345                                  	;or	byte [cs:setdevmarkflag],2
 21346 00000FA8 800E[1014]02            	or	byte [setdevmarkflag],2
 21347                                  	;or	byte [setdevmarkflag],for_devmark
 21348 00000FAD E86720                  	call	round			; check mem error. also,readjust memhi for the next use.
 21349 00000FB0 F3A4                    	rep	movsb			; reallocate it.
 21350                                  
 21351 00000FB2 C706[5203][8910]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 21352 00000FB8 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 21353                                  	;or	word [install_flag],has_installed ; set the flag.
 21354                                  	;or	byte [install_flag],has_installed ; 2
 21355                                  	; 11/12/2022
 21356 00000FBC 800E[4A03]02            	or	byte [install_flag],2
 21357                                  	; 24/10/2022
 21358                                  	;or	word [install_flag],2	
 21359                                  
 21360                                  ; ----------------------------------------------------------------------
 21361                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 21362                                  ; the top of the memory will be allocated for sysinit and config.sys if
 21363                                  ; have_install_cmd.
 21364                                  ; ----------------------------------------------------------------------
 21365                                  
 21366 00000FC1 E85320                  	call	round
 21367 00000FC4 8B1E[E003]              	mov	bx,[memhi]
 21368 00000FC8 A1[E403]                	mov	ax,[area]
 21369 00000FCB A3[DA03]                	mov	[old_area],ax		; save [area]
 21370 00000FCE 8EC0                    	mov	es,ax			;calc what we needed
 21371 00000FD0 29C3                    	sub	bx,ax
 21372                                  	; 24/10/2022
 21373 00000FD2 B44A                    	mov	ah,4Ah ; SETBLOCK
 21374 00000FD4 CD21                    	int	21h			;give the rest back
 21375                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21376                                  		; ES = segment address of block to change
 21377                                  		; BX = new size in paragraphs
 21378 00000FD6 06                      	push	es
 21379 00000FD7 8CC0                    	mov	ax,es
 21380 00000FD9 48                      	dec	ax
 21381 00000FDA 8EC0                    	mov	es,ax			;point to arena
 21382                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 21383                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 21384                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 21385                                  	; 24/10/2022
 21386 00000FDC 26C70601000800          	mov	word [es:1],8		;set impossible owner
 21387 00000FE3 26C70608005344          	mov	word [es:8],'SD'	; System Data
 21388 00000FEA 07                      	pop	es
 21389                                  
 21390 00000FEB BBFFFF                  	mov	bx,0FFFFh
 21391 00000FEE B448                    	mov	ah,48h ; ALLOC
 21392 00000FF0 CD21                    	int	21h
 21393 00000FF2 B448                    	mov	ah,48h ; ALLOC
 21394 00000FF4 CD21                    	int	21h			; allocate the rest of the memory
 21395                                  		; DOS - 2+ - ALLOCATE MEMORY
 21396                                  		; BX = number of 16-byte paragraphs desired
 21397 00000FF6 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 21398 00000FF9 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 21399                                  
 21400                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 21401                                  ;;;; allocated.
 21402                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 21403                                  ;;;; this time) to the top-of-the memory),here we are going to
 21404                                  ;;;; 1). "setblock" from memhi to confbot.
 21405                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 21406                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 21407                                  
 21408                                  ;memory allocation for sysinit,confbot module.
 21409                                  
 21410 00000FFF 8EC0                    	mov	es,ax
 21411                                  	;mov	bx,[CONFBOT]
 21412                                  	; 24/10/2022
 21413 00001001 8B1E[A102]              	mov	bx,[top_of_cdss]
 21414 00001005 29C3                    	sub	bx,ax			; confbot - memhi
 21415 00001007 4B                      	dec	bx			; make a room for the memory block id.
 21416 00001008 4B                      	dec	bx			; make sure!!!.
 21417 00001009 B44A                    	mov	ah,4Ah ; SETBLOCK
 21418 0000100B CD21                    	int	21h			; this will free (confbot to top of memory)
 21419                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21420                                  		; ES = segment address of block to change
 21421                                  		; BX = new size in paragraphs
 21422 0000100D BBFFFF                  	mov	bx,0FFFFh
 21423 00001010 B448                    	mov	ah,48h ; ALLOC
 21424 00001012 CD21                    	int	21h
 21425 00001014 B448                    	mov	ah,48h ; ALLOC
 21426 00001016 CD21                    	int	21h			; allocate (confbot to top of memory)
 21427                                  		; DOS - 2+ - ALLOCATE MEMORY
 21428                                  		; BX = number of 16-byte paragraphs desired
 21429 00001018 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 21430                                  					; need this to free this area for command.com.
 21431 0000101B 8E06[E003]              	mov	es,[memhi]
 21432 0000101F B449                    	mov	ah,49h			; free allocated memory.
 21433 00001021 CD21                    	int	21h			; free (memhi to confbot(=area))
 21434                                  		; DOS - 2+ - FREE MEMORY
 21435                                  		; ES = segment address of area to be freed
 21436                                  endfile_ret:
 21437 00001023 C3                      	retn
 21438                                  
 21439                                  ; End of "EndFile" DOS structure configuration.
 21440                                  
 21441                                  ; ----------------------------------------------------------------------
 21442                                  ; 26/03/2019 - Retro DOS v4.0
 21443                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 21444                                  ; ----------------------------------------------------------------------
 21445                                  ; Do_Install_Exec
 21446                                  ;
 21447                                  ; This procedure is used to EXEC a program being loaded via the 
 21448                                  ; "install=" mechanism in config.sys. It does this by setting up
 21449                                  ; the parameters, and then jumping to sysinit_base, which has been
 21450                                  ; setup in low memory. When complete, sysinit_base will jump back
 21451                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 21452                                  ; program).
 21453                                  
 21454                                  ;SYSINIT:10CFh:
 21455                                  
 21456                                  do_install_exec:			; now,handles install= command.
 21457                                  
 21458 00001024 56                      	push	si			; save si for config.sys again.
 21459                                  
 21460                                  ; we are going to call load/exec function.
 21461                                  ; set es:bx to the parameter block here;;;;;;;
 21462                                  ; set ds:dx to the asciiz string. remember that we already has 0
 21463                                  ; after the filename. so parameter starts after that. if next
 21464                                  ; character is a line feed (i.e. 10),then assume that the 0
 21465                                  ; we already encountered used to be a carrage return. in this
 21466                                  ; case,let's set the length to 0 which will be followed by
 21467                                  ; carridge return.
 21468                                  
 21469                                  ; es:si -> command line in config.sys. points to the first non blank
 21470                                  ;character after =.
 21471                                  
 21472 00001025 06                      	push	es
 21473 00001026 1E                      	push	ds
 21474 00001027 07                      	pop	es
 21475 00001028 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 21476 00001029 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 21477                                  
 21478 0000102B 31C9                    	xor	cx,cx
 21479 0000102D FC                      	cld
 21480 0000102E 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 21481 00001034 BF[6E03]                	mov	di,ldexec_parm
 21482                                  installfilename:			; skip the file name
 21483 00001037 AC                      	lodsb				; al = ds:si; si++
 21484 00001038 3C00                    	cmp	al,0
 21485 0000103A 7402                    	je	short got_installparm
 21486 0000103C EBF9                    	jmp	short installfilename
 21487                                  got_installparm:			; copy the parameters to ldexec_parm
 21488 0000103E AC                      	lodsb
 21489 0000103F 268805                  	mov	[es:di],al
 21490 00001042 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 21491 00001044 7405                    	je	short done_installparm
 21492 00001046 FEC1                    	inc	cl			; # of char. in the parm.
 21493 00001048 47                      	inc	di
 21494 00001049 EBF3                    	jmp	short got_installparm
 21495                                  done_installparm:
 21496 0000104B 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 21497 00001050 80F900                  	cmp	cl,0			; if no parm,then
 21498 00001053 7506                    	jne	short install_seg_set 	; let the parm area
 21499 00001055 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 21500                                  					; starts with cr.
 21501                                  install_seg_set:
 21502 0000105B 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 21503 00001062 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 21504                                  
 21505                                  ;---------------------------------------------------M067----------------
 21506                                  ;
 21507                                  ; 	the environment pointer is made 0. so the current environment ptr.
 21508                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 21509                                  ;
 21510                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 21511                                  ;
 21512                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 21513                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 21514                                  ; 	was fixed. 
 21515                                  ;
 21516                                  ; ----------------------------------------------------------------------
 21517                                  
 21518                                  ;;ifdef   MULTI_CONFIG
 21519                                  
 21520                                  ; If there's any environment data in "config_wrkseg", pass to app
 21521                                  
 21522                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21523                                          ;mov     cx,ax
 21524                                          ;cmp     word [cs:config_envlen],0
 21525                                          ;je      short no_envdata2
 21526                                          ;mov     cx,[cs:config_wrkseg]
 21527                                  ;no_envdata2:
 21528                                  ;;endif  ;MULTI_CONFIG
 21529                                  
 21530                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 21531                                  	; 24/10/2022
 21532                                  	;mov	[cs:iexec.environ],cx
 21533                                  	; 02/11/2022
 21534 00001064 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 21535                                  
 21536                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 21537 00001068 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 21538                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 21539 0000106C 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 21540                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 21541 00001070 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 21542 00001074 E86E00                  	call	sum_up
 21543 00001077 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 21544 0000107B 31C0                    	xor	ax,ax
 21545 0000107D B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 21546 0000107F BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 21547 00001082 06                      	push	es			; save es,ds for load/exec
 21548 00001083 1E                      	push	ds			; these registers will be restored in sysinit_base.
 21549 00001084 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 21550                                  					; load/exec function and check sum.
 21551                                  
 21552                                  ;----------------------------------------
 21553                                  
 21554                                  ;j.k. this is the returning address from sysinit_base.
 21555                                  
 21556                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21557                                  
 21558                                  sysinitptr:				; returning far address from sysinit_base
 21559 00001089 5E                      	pop	si			; restore si for config.sys file.
 21560 0000108A 06                      	push	es
 21561 0000108B 1E                      	push	ds
 21562 0000108C 07                      	pop	es
 21563 0000108D 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 21564 0000108E 7306                            jnc     short install_exit_ret
 21565                                  
 21566 00001090 56                      	push	si			; error in loading the file for install=.
 21567 00001091 E8D121                  	call	badload 		; es:si-> path,filename,0.
 21568 00001094 5E                      	pop	si
 21569                                  
 21570                                  	; 24/10/2022
 21571                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 21572                                  	; 11/12/2022
 21573                                  	; ds = cs
 21574 00001095 C3                      	retn
 21575                                  
 21576                                  install_exit_ret:
 21577                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 21578                                  
 21579                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 21580                                  ;SYSINIT:1142h:
 21581 00001096 B44D                    	mov     ah,4Dh
 21582 00001098 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 21583 0000109A 80FC03                  	cmp     ah,3
 21584 0000109D 7404                    	jz      short sysinitptr_retn
 21585 0000109F E80916                  	call    error_line
 21586 000010A2 F9                      	stc
 21587                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 21588 000010A3 C3                      	retn		
 21589                                  
 21590                                  ; ----------------------------------------------------------------------
 21591                                  
 21592                                  ;**	ParaRound - Round Up length to paragraph multiple
 21593                                  ;
 21594                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 21595                                  ;	by 16 yielding a "length in paragraphs" value.
 21596                                  ;
 21597                                  ;	ENTRY	(ax) = byte length
 21598                                  ;	EXIT	(ax) = rounded up length in paragraphs
 21599                                  ;	USES	ax, flags
 21600                                  
 21601                                  ParaRound:
 21602 000010A4 83C00F                  	add	ax,15
 21603 000010A7 D1D8                    	rcr	ax,1
 21604 000010A9 D1E8                    	shr	ax,1
 21605 000010AB D1E8                    	shr	ax,1
 21606 000010AD D1E8                    	shr	ax,1
 21607 000010AF C3                      	retn
 21608                                  
 21609                                  ; ----------------------------------------------------------------------
 21610                                  ; sysinit_base module.
 21611                                  ;
 21612                                  ; This module is relocated by the routine EndFile to a location in low
 21613                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 21614                                  ; that are being loaded by the "install=" command. After the EXEC call
 21615                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 21616                                  ; top of memory) to be sure that the EXECed program did not damage it.
 21617                                  ; If it did, then this module will print an error message and stop the
 21618                                  ; system. Otherwise, it returns control to SYSINIT.
 21619                                  ;
 21620                                  ;in: after relocation,
 21621                                  ;    ax = 4b00h - load and execute the program dos function.
 21622                                  ;    ds = confbot. segment of config.sys file image
 21623                                  ;    es = sysinitseg. segment of sysinit module itself.
 21624                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 21625                                  ;    es:bx = pointer to a parameter block for load.
 21626                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 21627                                  ;    bigsize (word) - # of word from confbot to SI_end.
 21628                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 21629                                  ;			word boundary moduler form.
 21630                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 21631                                  ;
 21632                                  ;note: sysinit should save necessary registers and when the control is back
 21633                                  
 21634                                  	; 24/10/2022
 21635                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 21636                                  sysinit_base:				
 21637 000010B0 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 21638 000010B5 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 21639 000010BA CD21                    	int	21h			; load/exec dos call.
 21640 000010BC 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 21641 000010C1 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 21642 000010C6 1F                      	pop	ds			; restore confbot seg
 21643 000010C7 07                      	pop	es			; restore sysinitseg
 21644 000010C8 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 21645                                  					; at this time,i don't have to worry about
 21646                                  					; that sysinit module has been broken or not.
 21647 000010CA E81800                  	call	sum_up			; otherwise,check if it is good.
 21648 000010CD 263906[5603]            	cmp	[es:checksum],ax
 21649 000010D2 740C                    	je	short sysinit_base_end
 21650                                  
 21651                                  ;	memory broken. show "memory allocation error" message and stall.
 21652                                  
 21653 000010D4 B409                    	mov	ah,9
 21654 000010D6 0E                      	push	cs
 21655 000010D7 1F                      	pop	ds
 21656 000010D8 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 21657 000010DB CD21                    	int	21h
 21658                                  		; DOS - PRINT STRING
 21659                                  		; DS:DX -> string terminated by "$"
 21660                                  	; 24/10/2022
 21661                                  _stall: 
 21662                                  	; 11/12/2022
 21663 000010DD F4                      	hlt 
 21664                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21665                                  	;hlt				;use HLT to minimize energy consumption
 21666 000010DE EBFD                            jmp	short _stall
 21667                                  
 21668                                  sysinit_base_end: 
 21669 000010E0 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 21670                                  
 21671                                  ;-------------------------------------
 21672                                  
 21673                                  sum_up:
 21674                                  
 21675                                  ;in:   es - sysinitseg.
 21676                                  ;out:  ax - result
 21677                                  ;
 21678                                  ;remark: since this routine will only check starting from "locstack" to the end of
 21679                                  ;	 sysinit segment,the data area, and the current stack area are not
 21680                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 21681                                  ;	 gaurantee to be safe.
 21682                                  ;
 21683                                  ;first sum up confbot seg.
 21684                                  
 21685 000010E5 1E                      	push	ds
 21686                                  	;mov	ax,[es:CONFBOT]
 21687                                  	; 24/10/2022
 21688 000010E6 26A1[A102]              	mov	ax,[es:top_of_cdss]
 21689 000010EA 8ED8                    	mov	ds,ax
 21690 000010EC 31F6                    	xor	si,si
 21691 000010EE 31C0                    	xor	ax,ax
 21692 000010F0 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 21693                                  					;whole test better fail.
 21694 000010F5 D1E9                    	shr	cx,1			; make it a word count
 21695 000010F7 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 21696                                  sum1:
 21697 000010F9 0304                    	add	ax,[si]
 21698 000010FB 46                      	inc	si
 21699 000010FC 46                      	inc	si
 21700 000010FD E2FA                    	loop	sum1
 21701                                  ;now,sum up sysinit module.
 21702                                  sum_sys_code:
 21703                                  	; 24/10/2022
 21704 000010FF BEFE10                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 21705                                  				        ; starting after the stack.  M069
 21706                                  					;  this does not cover the possible stack code!!!
 21707                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 21708                                  	; 02/11/2022
 21709                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 21710                                  	; 30/12/2022 (BugFix)
 21711                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 21712 00001102 B9[F037]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 21713 00001105 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 21714 00001107 D1E9                    	shr	cx,1
 21715                                  sum2:
 21716 00001109 260304                  	add	ax,[es:si]
 21717 0000110C 46                      	inc	si
 21718 0000110D 46                      	inc	si
 21719 0000110E E2F9                    	loop	sum2
 21720 00001110 1F                      	pop	ds
 21721 00001111 C3                      	retn
 21722                                  
 21723                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21724                                  
 21725                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 21726                                  ;SYSINIT:11BDh:
 21727 00001112 0000                    	dw	0
 21728                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 21729                                  ;SYSINIT:11BFh:
 21730 00001114 0000                    	dw	0
 21731                                  
 21732                                  mem_alloc_err_msgx:
 21733                                  
 21734                                         ;include msbio.cl4		; memory allocation error message
 21735                                  
 21736                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 21737 00001116 0D0A                    	db	0Dh,0Ah
 21738 00001118 4D656D6F727920616C-     	db 	'Memory allocation error $'
 21738 00001121 6C6F636174696F6E20-
 21738 0000112A 6572726F722024     
 21739                                  
 21740                                  end_sysinit_base: ; label byte
 21741                                  	; 24/10/2022
 21742                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 21743                                  
 21744                                  ; ----------------------------------------------------------------------
 21745                                  ; Set_Buffer
 21746                                  ;
 21747                                  ;function: set buffers in the real memory.				  
 21748                                  ;	   lastly set the memhi,memlo for the next available free address.
 21749                                  ;
 21750                                  ;input:    ds:bx -> buffinfo.
 21751                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 21752                                  ;	   singlebuffersize = buffer header size + sector size		  
 21753                                  ;
 21754                                  ;output:   buffers Queue established.	       				   
 21755                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 21756                                  ; ----------------------------------------------------------------------
 21757                                  
 21758                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21759                                  	; (SYSINIT:11DCh)
 21760                                  
 21761                                  set_buffer:
 21762 00001131 30D2                    	xor	dl,dl				; assume buffers not in HMA
 21763 00001133 E85500                  	call	GetBufferAddr
 21764 00001136 7402                    	jz	short set_buff_1
 21765                                  	;mov	dl,1				; buffers in HMA
 21766                                  	; 17/09/2023
 21767 00001138 FEC2                    	inc	dl ; mov dl,1
 21768                                  set_buff_1:
 21769                                  	; 25/10/2022
 21770                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 21771 0000113A 893F                    	mov	[bx],di
 21772                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 21773 0000113C 8C4702                  	mov	[bx+2],es
 21774                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 21775 0000113F C747040000              	mov	word [bx+4],0
 21776                                  
 21777 00001144 89F8                    	mov	ax,di
 21778 00001146 2E8B0E[9702]            	mov	cx,[cs:buffers]
 21779 0000114B 57                      	push	di				; remember first buffer
 21780                                  
 21781                                  ;	for each buffer
 21782                                  
 21783                                  nxt_buff:
 21784 0000114C E86100                  	call	set_buffer_info 		; set buf_link,buf_id...
 21785 0000114F 89C7                    	mov	di,ax
 21786 00001151 E2F9                    	loop	nxt_buff
 21787                                  
 21788 00001153 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21789                                  
 21790 00001158 59                      	pop	cx				; get first buffer
 21791                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21792 00001159 26890D                  	mov	[es:di],cx
 21793 0000115C 87CF                    	xchg	cx,di
 21794                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21795                                  	; 25/10/2022
 21796 0000115E 26894D02                	mov	[es:di+2],cx
 21797                                  
 21798 00001162 08D2                    	or	dl,dl				; In HMA ?
 21799 00001164 7417                    	jz	short set_buff_2		; no
 21800                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21801 00001166 C6470C01                	mov	byte [bx+12],1
 21802 0000116A 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21803                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 21804 0000116E C7470D0000              	mov	word [bx+13],0
 21805                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21806 00001173 89470F                  	mov	word [bx+15],ax
 21807 00001176 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21808                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21809 0000117A 83E814                  	sub	ax,20
 21810                                  set_buff_2:
 21811 0000117D 2E0106[DE03]            	add	[cs:memlo],ax
 21812                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21813 00001182 2E800E[1014]02          	or	byte [cs:setdevmarkflag],2
 21814                                  	;call	round
 21815                                  	;retn
 21816                                  	; 12/12/2022
 21817 00001188 E98C1E                  	jmp	round
 21818                                  
 21819                                  ; ----------------------------------------------------------------------
 21820                                  ; procedure : GetBufferAddr
 21821                                  ;
 21822                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21823                                  ;
 21824                                  ; returns in es:di the buffer adress
 21825                                  ; returns NZ if allocated in HMA
 21826                                  ; ----------------------------------------------------------------------
 21827                                  
 21828                                  	; 25/10/2022 
 21829                                  GetBufferAddr:
 21830 0000118B 53                      	push	bx
 21831 0000118C 52                      	push	dx
 21832 0000118D 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21833 00001191 2EF726[9702]            	mul	word [cs:buffers]
 21834                                  	;add	ax,0Fh
 21835 00001196 83C00F                  	add	ax,15 
 21836                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21837                                  	;and	ax,~15	; 0FFF0h	; para round
 21838                                  	; 12/12/2022
 21839 00001199 24F0                    	and	al,~15	; 0F0h
 21840 0000119B 89C3                    	mov	bx,ax
 21841 0000119D B8024A                  	mov	ax,4A02h
 21842                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21843 000011A0 CD2F                    	int	2Fh
 21844 000011A2 83FFFF                  	cmp	di,0FFFFh
 21845 000011A5 7506                    	jne	short got_hma
 21846                                  
 21847                                  	;mov	di,0			; dont xor di,di Z flag needed
 21848                                  	; 05/09/2023
 21849                                  	; zf=1
 21850 000011A7 47                      	inc	di ; 0FFFFh -> 0
 21851                                  	; zf=1
 21852                                  
 21853                                  	;zf=1
 21854                                  	;xor	di,di	; 25/10/2022
 21855                                  	;zf=1
 21856 000011A8 2E8E06[E003]            	mov	es,[cs:memhi]
 21857                                  got_hma:
 21858 000011AD 5A                      	pop	dx
 21859 000011AE 5B                      	pop	bx
 21860 000011AF C3                      	retn
 21861                                  
 21862                                  ; ----------------------------------------------------------------------
 21863                                  
 21864                                  set_buffer_info:
 21865                                  
 21866                                  ;function: set buf_link,buf_id,buf_sector
 21867                                  ;
 21868                                  ;in: es:di -> buffer header to be set.
 21869                                  ;    ax = di
 21870                                  ;
 21871                                  ;out:
 21872                                  ;    above entries set.
 21873                                  
 21874                                  	; 25/10/2022 
 21875 000011B0 2EFF36[3903]            	push	word [cs:buf_prev_off]
 21876                                  	;pop	word [es:di+buffinfo.buf_prev]
 21877 000011B5 268F4502                	pop	word [es:di+2]
 21878 000011B9 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 21879 000011BD 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 21880                                  	;mov	[es:di+buffinfo.buf_next],ax
 21881 000011C2 268905                  	mov	[es:di],ax
 21882                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21883 000011C5 26C74504FF00            	mov	word [es:di+4],00FFh
 21884                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21885 000011CB 26C745060000            	mov	word [es:di+6],0
 21886                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21887 000011D1 26C745080000            	mov	word [es:di+8],0
 21888 000011D7 C3                      	retn
 21889                                  
 21890                                  ; ======================================================================
 21891                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21892                                  ; ----------------------------------------------------------------------
 21893                                  ; 27/03/2019 - Retro DOS v4.0
 21894                                  
 21895                                  ; ----------------------------------------------------------------------
 21896                                  ; ibmstack initialization routine.
 21897                                  ;
 21898                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21899                                  ;	has been modified. this initialization routine also has to
 21900                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21901                                  ;	should be set to signal that this interrupt handler is the
 21902                                  ;	first handler hooked to this interrupt vector.
 21903                                  ;	we determine this by looking at the instruction pointed by
 21904                                  ;	this vector. if it is iret, then this handler should be the
 21905                                  ;	first one. in our case, only the interrupt vector 77h is the
 21906                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21907                                  ;
 21908                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21909                                  ;	some design changes are needed to the above interrupt sharing
 21910                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21911                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21912                                  ;	interrupts would only be generated on levels 7 and 15.
 21913                                  ;	these assumptions are not true any more. we have to use the firstflag
 21914                                  ;	for every level of interrupt. we will set the firstflag on the following
 21915                                  ;	conditions:
 21916                                  ;
 21917                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21918                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21919                                  ;	 c. else if cs:ip points to an iret, then "first"
 21920                                  ;	 d. else if cs:ip points to dummy, then "first"
 21921                                  ;
 21922                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21923                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21924                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21925                                  ;	the bioses for all of the machines.
 21926                                  ;
 21927                                  ;	system design group requests bios to handle the phantom interrupts.
 21928                                  ;
 21929                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21930                                  ;	produced by the bogus adapter card even without interrupt request is
 21931                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21932                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21933                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21934                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21935                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21936                                  ;	interrupt line.
 21937                                  ;
 21938                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21939                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21940                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21941                                  ;	control. if it is the first, then the following action should be
 21942                                  ;	taken. we don't have to implement skack logic in this case.
 21943                                  ;
 21944                                  ;	to implement this logic, we rather choose a simple method.
 21945                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21946                                  ;	going to hook this interrupt vector. the reason is if the original
 21947                                  ;	vector points to "iret" and do nothing, we don't need
 21948                                  ;	to implement the stack logic for it. this will simplify implementation
 21949                                  ;	while maintaining compatibility with the old version of dos.
 21950                                  ;	this implies that in the main stack code, there might be a stack code
 21951                                  ;	that will never be used, a dead code.
 21952                                  ;
 21953                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21954                                  
 21955                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21956                                  	; (SYSINIT:1287h)
 21957                                  
 21958                                  	; 14/12/2022
 21959                                  stackinit:
 21960 000011D8 50                      	push	ax
 21961 000011D9 1E                      	push	ds
 21962 000011DA 06                      	push	es
 21963 000011DB 53                      	push	bx
 21964 000011DC 51                      	push	cx
 21965 000011DD 52                      	push	dx
 21966 000011DE 57                      	push	di
 21967 000011DF 56                      	push	si
 21968 000011E0 55                      	push	bp
 21969                                  
 21970                                  ;currently es -> stack code area
 21971                                  
 21972                                  	; 12/12/2022
 21973                                  	; ds = cs
 21974 000011E1 A1[8A02]                	mov	ax,[stack_count]
 21975 000011E4 89C1                    	mov	cx,ax  ; *!*!*  
 21976                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21977                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21978                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21979 000011E6 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21980                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21981 000011EA A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21982 000011ED 26A3[0600]              	mov	[es:stacksize],ax
 21983                                  	; 12/12/2022
 21984 000011F1 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21985                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21986                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21987                                  	;mov	ax,[cs:stack_addr]  ; !!
 21988 000011F4 26A3[0800]              	mov	[es:stacks],ax
 21989                                  	; 12/12/2022
 21990 000011F8 89C5                    	mov	bp,ax ; *!*
 21991 000011FA A1[9002]                	mov	ax,[stack_addr+2]
 21992                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21993                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21994                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21995 000011FD 26A3[0A00]              	mov	[es:stacks+2],ax
 21996                                  
 21997                                  ; initialize the data fields with the parameters
 21998                                  
 21999                                  ; "firstentry" will always be at stacks
 22000                                  
 22001                                  	;mov	bp,[es:stacks]			; get offset of stack
 22002                                  	; 12/12/2022
 22003                                  	; bp = [es:stacks] ; *!*
 22004 00001201 26892E[0C00]            	mov	[es:firstentry],bp
 22005                                  
 22006                                  ; the stacks will always immediately follow the table entries
 22007                                  
 22008 00001206 B80800                  	mov	ax,entrysize ; 8
 22009                                  	;mov	cx,[es:stackcount]
 22010                                  	; 12/12/2022
 22011                                  	; cx = [es:stackcount] ; *!*!*
 22012 00001209 F7E1                    	mul	cx
 22013 0000120B 01E8                    	add	ax,bp
 22014 0000120D 26A3[0400]              	mov	[es:stackat],ax
 22015 00001211 89C3                    	mov	bx,ax
 22016 00001213 83EB02                  	sub	bx,2
 22017                                  
 22018                                  ; zero the entire stack area to start with
 22019                                  
 22020 00001216 268B3E[0400]            	mov	di,[es:stackat]
 22021 0000121B 26A1[0600]              	mov	ax,[es:stacksize]
 22022 0000121F F7E1                    	mul	cx
 22023 00001221 89C1                    	mov	cx,ax
 22024 00001223 31C0                    	xor	ax,ax
 22025 00001225 06                      	push	es
 22026 00001226 1F                      	pop	ds				;ds = relocated stack code seg.
 22027                                  
 22028                                  ;now, ds -> stack code area
 22029                                  
 22030 00001227 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 22031 0000122B FC                      	cld
 22032 0000122C F3AA                    	rep	stosb
 22033                                  
 22034 0000122E 8B0E[0200]              	mov	cx,[stackcount]
 22035                                  
 22036                                  ; loop for "count" times, building a table entry
 22037                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 22038                                  ;  cx = number of entries
 22039                                  ;  es:bp => base of stacks - 2
 22040                                  ;  es:bx => first table entry
 22041                                  
 22042                                  buildloop:
 22043                                  	; 11/12/2022
 22044                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 22045                                  	; 25/10/2022
 22046                                  	;mov	byte [es:bp],free
 22047                                  	; 14/08/2023
 22048 00001232 26884600                	mov	[es:bp],al ; 0 ; free
 22049 00001236 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 22050                                  	;mov	[es:bp+1],al
 22051 0000123A 26894602                	mov	[es:bp+savedsp],ax
 22052                                  	;mov	[es:bp2],ax
 22053 0000123E 26894604                	mov	[es:bp+savedss],ax
 22054                                  	;mov	[es:bp+4],ax
 22055 00001242 031E[0600]              	add	bx,[stacksize]
 22056 00001246 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 22057                                  	;mov	[es:bp+6],bx
 22058 0000124A 26892F                  	mov	[es:bx],bp
 22059 0000124D 83C508                  	add	bp,entrysize ; 8
 22060                                  
 22061 00001250 E2E0                    	loop	buildloop
 22062                                  
 22063 00001252 83ED08                  	sub	bp,entrysize ; 8
 22064 00001255 892E[0E00]              	mov	[lastentry],bp
 22065 00001259 892E[1000]              	mov	[nextentry],bp
 22066                                  
 22067 0000125D 1E                      	push	ds
 22068                                  	;mov	ax,0F000h		;look at the model byte
 22069                                  	; 05/09/2023
 22070 0000125E B4F0                    	mov	ah,0F0h ; ax = 0F000h
 22071 00001260 8ED8                    	mov	ds,ax	
 22072 00001262 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 22073 00001267 1F                      	pop	ds
 22074 00001268 7504                    	jne	short skip_disablenmis
 22075                                  
 22076 0000126A B007                    	mov	al,07h			; disable convertible nmis
 22077 0000126C E672                    	out	72h,al
 22078                                  
 22079                                  skip_disablenmis:
 22080 0000126E 31C0                    	xor	ax,ax
 22081 00001270 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 22082                                  					;ds - relocated stack code segment
 22083 00001272 FA                      	cli
 22084                                  
 22085                                  	;irp	aa,<02,08,09,70>
 22086                                  	;
 22087                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 22088                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 22089                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 22090                                  	;mov	dx,offset int&aa	;pass where new handler is
 22091                                  	;call	new_init_loop		;adjust the vector to new handler,
 22092                                  	;				;saving pointer to original owner
 22093                                  	;endm
 22094                                  
 22095                                  stkinit_02:
 22096 00001273 BE0800                  	mov	si,02h*4 ; 8
 22097 00001276 BF[3906]                	mov	di,INT19OLD02
 22098 00001279 BB[1200]                	mov	bx,old02
 22099 0000127C BA[1600]                	mov	dx,int02
 22100 0000127F E84801                  	call	new_init_loop
 22101                                  stkinit_08:
 22102 00001282 BE2000                  	mov	si,08h*4 ; 32
 22103 00001285 BF[3E06]                	mov	di,INT19OLD08
 22104 00001288 BB[3800]                	mov	bx,old08
 22105 0000128B BA[3C00]                	mov	dx,int08
 22106 0000128E E83901                  	call	new_init_loop
 22107                                  stkinit_09:
 22108 00001291 BE2400                  	mov	si,09h*4 ; 36
 22109 00001294 BF[4306]                	mov	di,INT19OLD09
 22110 00001297 BB[4100]                	mov	bx,old09
 22111 0000129A BA[4500]                	mov	dx,int09
 22112 0000129D E82A01                  	call	new_init_loop
 22113                                  stkinit_70:
 22114 000012A0 BEC001                  	mov	si,70h*4 ; 448
 22115 000012A3 BF[6106]                	mov	di,INT19OLD70
 22116 000012A6 BB[4E00]                	mov	bx,old70
 22117 000012A9 BA[5200]                	mov	dx,int70
 22118 000012AC E81B01                  	call	new_init_loop
 22119                                  
 22120                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 22121                                  	;
 22122                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 22123                                  	;push	ds			;save relocated stack code segment
 22124                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 22125                                  	;push	ds
 22126                                  	;pop	dx			;dx = segment value
 22127                                  	;	
 22128                                  	;cmp	dx,0
 22129                                  	;jz	int&aa&_first
 22130                                  	;
 22131                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 22132                                  	;jz	int&aa&_first
 22133                                  	;
 22134                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 22135                                  	;jz	int&aa&_not_first
 22136                                  	;
 22137                                  	;cmp	dx,0f000h		;rom bios segment
 22138                                  	;jnz	int&aa&_not_first
 22139                                  	;
 22140                                  	;push	es
 22141                                  	;push	dx
 22142                                  	;mov	dx,0f000h
 22143                                  	;mov	es,dx
 22144                                  	;cmp	bx,word ptr es:0ff01h
 22145                                         	;pop	dx
 22146                                  	;pop	es
 22147                                  	;jz	int&aa&_first
 22148                                  	;
 22149                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 22150                                  	;pop	ds
 22151                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 22152                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 22153                                  	;mov	dx, offset int&aa	;pass where new handler is
 22154                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 22155                                  	;				;pointer to original owner.
 22156                                  	;jmp	short int&aa&_end
 22157                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 22158                                  	;pop	ds
 22159                                  ;int&aa&_end:
 22160                                  	;
 22161                                  	;endm
 22162                                  
 22163                                  stkinit_0A:
 22164 000012AF BE2800                  	mov	si,0Ah*4 ; 40
 22165                                  	
 22166                                  ; 14/12/2022
 22167                                  %if 0	
 22168                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22169                                  	push	ds
 22170                                  	
 22171                                  	lds	bx,[es:si]
 22172                                  	push	ds
 22173                                  	pop	dx
 22174                                  		
 22175                                  	cmp	dx,0
 22176                                  	je	short int_0A_first
 22177                                  	
 22178                                  	cmp	byte [bx],0CFh
 22179                                  	je	short int_0A_first
 22180                                  	
 22181                                  	cmp	word [bx+6],424Bh
 22182                                  	je	short int_0A_not_first
 22183                                  	
 22184                                  	cmp	dx,0F000h
 22185                                  	jne	short int_0A_not_first
 22186                                  	
 22187                                  	push	es
 22188                                  	push	dx
 22189                                  	mov	dx,0F000h
 22190                                  	mov	es,dx
 22191                                  	cmp	bx,[es:0FF01h]
 22192                                         	pop	dx
 22193                                  	pop	es
 22194                                  	je	short int_0A_first
 22195                                  %Endif
 22196                                  
 22197                                  	; 14/12/2022
 22198                                  	; 25/10/2022
 22199 000012B2 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 22200 000012B5 730C                    	jnc	short int_0A_first
 22201                                  	
 22202                                  int_0A_not_first:
 22203                                  	; 14/12/2022
 22204                                  	; 25/10/2022
 22205                                  	;pop	ds
 22206 000012B7 BF[4806]                	mov	di,INT19OLD0A
 22207 000012BA BB[5900]                	mov	bx,old0A
 22208 000012BD BA[5700]                	mov	dx,int0A
 22209 000012C0 E80701                  	call	new_init_loop
 22210                                  	
 22211                                  	; 14/12/2022	
 22212                                  	;jmp	short int_0A_end
 22213                                  ;int_0A_first:
 22214                                  	; 25/10/2022
 22215                                  	;pop	ds
 22216                                  
 22217                                  	; 14/12/2022
 22218                                  int_0A_first:
 22219                                  int_0A_end:
 22220                                  
 22221                                  stkinit_0B:
 22222 000012C3 BE2C00                  	mov	si,0Bh*4 ; 44
 22223                                  	
 22224                                  	; 14/12/2022
 22225                                  	; 25/10/2022
 22226 000012C6 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 22227 000012C9 730C                    	jnc	short int_0B_end ; int_0B_first
 22228                                  
 22229                                  ; 14/12/2022
 22230                                  %if 0	
 22231                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22232                                  	push	ds
 22233                                  	lds	bx,[es:si]
 22234                                  	push	ds
 22235                                  	pop	dx
 22236                                  		
 22237                                  	cmp	dx,0
 22238                                  	je	short int_0B_first
 22239                                  
 22240                                  	cmp	byte [bx],0CFh
 22241                                  	je	short int_0B_first
 22242                                  	
 22243                                  	cmp	word [bx+6],424Bh
 22244                                  	je	short int_0B_not_first
 22245                                  	
 22246                                  	cmp	dx,0F000h
 22247                                  	jne	short int_0B_not_first
 22248                                  
 22249                                  	push	es
 22250                                  	push	dx
 22251                                  	mov	dx,0F000h
 22252                                  	mov	es,dx
 22253                                  	cmp	bx,[es:0FF01h]
 22254                                  	pop	dx
 22255                                  	pop	es
 22256                                  	je	short int_0B_first
 22257                                  %endif
 22258                                  
 22259                                  int_0B_not_first:
 22260                                  	; 14/12/2022
 22261                                  	; 25/10/2022
 22262                                  	;pop	ds
 22263 000012CB BF[4D06]                	mov	di,INT19OLD0B
 22264 000012CE BB[7100]                	mov	bx,old0B
 22265 000012D1 BA[6F00]                	mov	dx,int0B
 22266 000012D4 E8F300                  	call	new_init_loop
 22267                                  
 22268                                  	; 14/12/2022
 22269                                  	;jmp	short int_0B_end
 22270                                  ;int_0B_first:
 22271                                  	; 25/10/2022
 22272                                  	;pop	ds
 22273                                  
 22274                                  int_0B_end:
 22275                                  	
 22276                                  stkinit_0C:
 22277 000012D7 BE3000                  	mov	si,0Ch*4 ; 48
 22278                                  	
 22279                                  	; 14/12/2022
 22280                                  	; 25/10/2022
 22281 000012DA E8C300                  	call	int_xx_first_check
 22282 000012DD 730C                    	jnc	short int_0C_end ; int_0C_first
 22283                                  
 22284                                  ; 14/12/2022
 22285                                  %if 0	
 22286                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22287                                  	push	ds
 22288                                  	lds	bx,[es:si]
 22289                                  	push	ds
 22290                                  	pop	dx
 22291                                  		
 22292                                  	cmp	dx,0
 22293                                  	je	short int_0C_first
 22294                                  
 22295                                  	cmp	byte [bx],0CFh
 22296                                  	je	short int_0C_first
 22297                                  	
 22298                                  	cmp	word [bx+6],424Bh
 22299                                  	je	short int_0C_not_first
 22300                                  	
 22301                                  	cmp	dx,0F000h
 22302                                  	jne	short int_0C_not_first
 22303                                  
 22304                                  	push	es
 22305                                  	push	dx
 22306                                  	mov	dx,0F000h
 22307                                  	mov	es,dx
 22308                                  	cmp	bx,[es:0FF01h]
 22309                                  	pop	dx
 22310                                  	pop	es
 22311                                  	je	short int_0C_first
 22312                                  %endif
 22313                                  	
 22314                                  int_0C_not_first:
 22315                                  	; 14/12/2022
 22316                                  	; 25/10/2022
 22317                                  	;pop	ds
 22318 000012DF BF[5206]                	mov	di,INT19OLD0C
 22319 000012E2 BB[8900]                	mov	bx,old0C
 22320 000012E5 BA[8700]                	mov	dx,int0C
 22321 000012E8 E8DF00                  	call	new_init_loop
 22322                                  
 22323                                  	; 14/12/2022
 22324                                  	;jmp	short int_0C_end
 22325                                  ;int_0C_first:
 22326                                  	; 25/10/2022
 22327                                  	;pop	ds
 22328                                  
 22329                                  int_0C_end:
 22330                                  
 22331                                  stkinit_0D:
 22332 000012EB BE3400                  	mov	si,0Dh*4 ; 52
 22333                                  
 22334                                  	; 14/12/2022	
 22335                                  	; 25/10/2022
 22336 000012EE E8AF00                  	call	int_xx_first_check
 22337 000012F1 730C                    	jnc	short int_0D_end ; int_0D_first
 22338                                  
 22339                                  ; 14/12/2022
 22340                                  %if 0	
 22341                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22342                                  	push	ds
 22343                                  	lds	bx,[es:si]
 22344                                  	push	ds
 22345                                  	pop	dx
 22346                                  		
 22347                                  	cmp	dx,0
 22348                                  	je	short int_0D_first
 22349                                  
 22350                                  	cmp	byte [bx],0CFh
 22351                                  	je	short int_0D_first
 22352                                  	
 22353                                  	cmp	word [bx+6],424Bh
 22354                                  	je	short int_0D_not_first
 22355                                  	
 22356                                  	cmp	dx,0F000h
 22357                                  	jne	short int_0D_not_first
 22358                                  
 22359                                  	push	es
 22360                                  	push	dx
 22361                                  	mov	dx,0F000h
 22362                                  	mov	es,dx
 22363                                  	cmp	bx,[es:0FF01h]
 22364                                  	pop	dx
 22365                                  	pop	es
 22366                                  	je	short int_0D_first
 22367                                  %endif
 22368                                  	
 22369                                  int_0D_not_first:
 22370                                  	; 14/12/2022
 22371                                  	; 25/10/2022
 22372                                  	;pop	ds
 22373 000012F3 BF[5706]                	mov	di,INT19OLD0D
 22374 000012F6 BB[A100]                	mov	bx,old0D
 22375 000012F9 BA[9F00]                	mov	dx,int0D
 22376 000012FC E8CB00                  	call	new_init_loop
 22377                                  
 22378                                  	; 14/12/2022
 22379                                  	;jmp	short int_0D_end
 22380                                  	; 02/11/2022
 22381                                  ;int_0D_first:
 22382                                  	;pop	ds
 22383                                  
 22384                                  int_0D_end:
 22385                                  
 22386                                  stkinit_0E:
 22387 000012FF BE3800                  	mov	si,0Eh*4 ; 56
 22388                                  
 22389                                  	; 14/12/2022	
 22390                                  	; 25/10/2022
 22391 00001302 E89B00                  	call	int_xx_first_check
 22392 00001305 730C                    	jnc	short int_0E_end ; int_0E_first
 22393                                  
 22394                                  ; 14/12/2022
 22395                                  %if 0	
 22396                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22397                                  	push	ds
 22398                                  	lds	bx,[es:si]
 22399                                  	push	ds
 22400                                  	pop	dx
 22401                                  		
 22402                                  	cmp	dx,0
 22403                                  	je	short int_0E_first
 22404                                  
 22405                                  	cmp	byte [bx],0CFh
 22406                                  	je	short int_0E_first
 22407                                  	
 22408                                  	cmp	word [bx+6],424Bh
 22409                                  	je	short int_0E_not_first
 22410                                  	
 22411                                  	cmp	dx,0F000h
 22412                                  	jne	short int_0E_not_first
 22413                                  
 22414                                  	push	es
 22415                                  	push	dx
 22416                                  	mov	dx,0F000h
 22417                                  	mov	es,dx
 22418                                  	cmp	bx,[es:0FF01h]
 22419                                  	pop	dx
 22420                                  	pop	es
 22421                                  	je	short int_0E_first
 22422                                  %endif
 22423                                  	
 22424                                  int_0E_not_first:
 22425                                  	; 14/12/2022
 22426                                  	; 25/10/2022
 22427                                  	;pop	ds
 22428 00001307 BF[5C06]                	mov	di,INT19OLD0E
 22429 0000130A BB[B900]                	mov	bx,old0E
 22430 0000130D BA[B700]                	mov	dx,int0E
 22431 00001310 E8B700                  	call	new_init_loop
 22432                                  
 22433                                  	; 14/12/2022
 22434                                  	;jmp	short int_0E_end
 22435                                  ;int_0E_first:
 22436                                  	; 25/10/2022
 22437                                  	;pop	ds	
 22438                                  
 22439                                  int_0E_end:
 22440                                  
 22441                                  stkinit_72:
 22442 00001313 BEC801                  	mov	si,72h*4 ; 456
 22443                                  	
 22444                                  	; 14/12/2022
 22445                                  	; 25/10/2022
 22446 00001316 E88700                  	call	int_xx_first_check
 22447 00001319 730C                    	jnc	short int_72_end ; int_72_first
 22448                                  
 22449                                  ; 14/12/2022
 22450                                  %if 0	
 22451                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22452                                  	push	ds
 22453                                  	lds	bx,[es:si]
 22454                                  	push	ds
 22455                                  	pop	dx
 22456                                  		
 22457                                  	cmp	dx,0
 22458                                  	je	short int_72_first
 22459                                  
 22460                                  	cmp	byte [bx],0CFh
 22461                                  	je	short int_72_first
 22462                                  	
 22463                                  	cmp	word [bx+6],424Bh
 22464                                  	je	short int_72_not_first
 22465                                  	
 22466                                  	cmp	dx,0F000h
 22467                                  	jne	short int_72_not_first
 22468                                  
 22469                                  	push	es
 22470                                  	push	dx
 22471                                  	mov	dx,0F000h
 22472                                  	mov	es,dx
 22473                                  	cmp	bx,[es:0FF01h]
 22474                                  	pop	dx
 22475                                  	pop	es
 22476                                  	je	short int_72_first
 22477                                  %endif
 22478                                  	
 22479                                  int_72_not_first:
 22480                                  	; 14/12/2022
 22481                                  	; 25/10/2022
 22482                                  	;pop	ds
 22483 0000131B BF[6606]                	mov	di,INT19OLD72
 22484 0000131E BB[D100]                	mov	bx,old72
 22485 00001321 BA[CF00]                	mov	dx,int72
 22486 00001324 E8A300                  	call	new_init_loop
 22487                                  
 22488                                  	; 14/12/2022
 22489                                  	;jmp	short int_72_end
 22490                                  ;int_72_first:
 22491                                  	; 25/10/2022
 22492                                  	;pop	ds
 22493                                  
 22494                                  int_72_end:
 22495                                  
 22496                                  stkinit_73:
 22497 00001327 BECC01                  	mov	si,73h*4 ; 460
 22498                                  	
 22499                                  	; 14/12/2022
 22500                                  	; 25/10/2022
 22501 0000132A E87300                  	call	int_xx_first_check
 22502 0000132D 730C                    	jnc	short int_73_end ; int_73_first
 22503                                  
 22504                                  ; 14/12/2022
 22505                                  %if 0	
 22506                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22507                                  	push	ds
 22508                                  	lds	bx,[es:si]
 22509                                  	push	ds
 22510                                  	pop	dx
 22511                                  		
 22512                                  	cmp	dx,0
 22513                                  	je	short int_73_first
 22514                                  
 22515                                  	cmp	byte [bx],0CFh
 22516                                  	je	short int_73_first
 22517                                  	
 22518                                  	cmp	word [bx+6],424Bh
 22519                                  	je	short int_73_not_first
 22520                                  	
 22521                                  	cmp	dx,0F000h
 22522                                  	jne	short int_73_not_first
 22523                                  
 22524                                  	push	es
 22525                                  	push	dx
 22526                                  	mov	dx,0F000h
 22527                                  	mov	es,dx
 22528                                  	cmp	bx,[es:0FF01h]
 22529                                  	pop	dx
 22530                                  	pop	es
 22531                                  	je	short int_73_first
 22532                                  %endif	
 22533                                  	
 22534                                  int_73_not_first:
 22535                                  	; 14/12/2022
 22536                                  	; 25/10/2022
 22537                                  	;pop	ds
 22538 0000132F BF[6B06]                	mov	di,INT19OLD73
 22539 00001332 BB[E900]                	mov	bx,old73
 22540 00001335 BA[E700]                	mov	dx,int73
 22541 00001338 E88F00                  	call	new_init_loop
 22542                                  
 22543                                  	; 14/12/2022
 22544                                  	;jmp	short int_73_end
 22545                                  ;int_73_first:
 22546                                  	; 25/10/2022
 22547                                  	;pop	ds
 22548                                  
 22549                                  int_73_end:
 22550                                  
 22551                                  stkinit_74:
 22552 0000133B BED001                  	mov	si,74h*4 ; 464
 22553                                  	
 22554                                  	; 14/12/2022
 22555                                  	; 25/10/2022
 22556 0000133E E85F00                  	call	int_xx_first_check
 22557 00001341 730C                    	jnc	short int_74_end ; int_74_first
 22558                                  
 22559                                  ; 14/12/2022
 22560                                  %if 0		
 22561                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22562                                  	push	ds
 22563                                  	lds	bx,[es:si]
 22564                                  	push	ds
 22565                                  	pop	dx
 22566                                  		
 22567                                  	cmp	dx,0
 22568                                  	je	short int_74_first
 22569                                  
 22570                                  	cmp	byte [bx],0CFh
 22571                                  	je	short int_74_first
 22572                                  	
 22573                                  	cmp	word [bx+6],424Bh
 22574                                  	je	short int_74_not_first
 22575                                  	
 22576                                  	cmp	dx,0F000h
 22577                                  	jne	short int_74_not_first
 22578                                  
 22579                                  	push	es
 22580                                  	push	dx
 22581                                  	mov	dx,0F000h
 22582                                  	mov	es,dx
 22583                                  	cmp	bx,[es:0FF01h]
 22584                                  	pop	dx
 22585                                  	pop	es
 22586                                  	je	short int_74_first
 22587                                  %endif
 22588                                  
 22589                                  int_74_not_first:
 22590                                  	; 14/12/2022
 22591                                  	; 25/10/2022
 22592                                  	;pop	ds
 22593 00001343 BF[7006]                	mov	di,INT19OLD74
 22594 00001346 BB[0101]                	mov	bx,old74
 22595 00001349 BA[FF00]                	mov	dx,int74
 22596 0000134C E87B00                  	call	new_init_loop
 22597                                  	
 22598                                  	; 14/12/2022
 22599                                  	;jmp	short int_74_end
 22600                                  ;int_74_first:
 22601                                  	; 25/10/2022
 22602                                  	;pop	ds
 22603                                  
 22604                                  int_74_end:
 22605                                  
 22606                                  stkinit_76:
 22607 0000134F BED801                  	mov	si,76h*4 ; 472
 22608                                  	
 22609                                  	; 14/12/2022
 22610                                  	; 25/10/2022
 22611 00001352 E84B00                  	call	int_xx_first_check
 22612 00001355 730E                    	jnc	short int_76_end ; int_76_first
 22613                                  
 22614                                  ; 14/12/2022
 22615                                  %if 0	
 22616                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22617                                  	push	ds
 22618                                  	lds	bx,[es:si]
 22619                                  	push	ds
 22620                                  	pop	dx
 22621                                  		
 22622                                  	cmp	dx,0
 22623                                  	je	short int_76_first
 22624                                  
 22625                                  	cmp	byte [bx],0CFh
 22626                                  	je	short int_76_first
 22627                                  	
 22628                                  	cmp	word [bx+6],424Bh
 22629                                  	je	short int_76_not_first
 22630                                  	
 22631                                  	cmp	dx,0F000h
 22632                                  	jne	short int_76_not_first
 22633                                  
 22634                                  	push	es
 22635                                  	push	dx
 22636                                  	mov	dx,0F000h
 22637                                  	mov	es,dx
 22638                                  	cmp	bx,[es:0FF01h]
 22639                                  	pop	dx
 22640                                  	pop	es
 22641                                  	je	short int_76_first
 22642                                  %endif
 22643                                  	
 22644                                  int_76_not_first:
 22645                                  	; 14/12/2022
 22646                                  	; 25/10/2022
 22647                                  	;pop	ds
 22648 00001357 BF[7506]                	mov	di,INT19OLD76
 22649 0000135A BB[1901]                	mov	bx,old76
 22650 0000135D BA[1701]                	mov	dx,int76
 22651 00001360 E86700                  	call	new_init_loop
 22652                                  
 22653                                  	; 14/12/2022
 22654 00001363 EB00                    	jmp	short int_76_end
 22655                                  ;int_76_first:
 22656                                  	; 25/10/2022
 22657                                  	;pop	ds
 22658                                  
 22659                                  int_76_end:
 22660                                  
 22661                                  stkinit_77:
 22662 00001365 BEDC01                  	mov	si,77h*4 ; 476
 22663                                  	
 22664                                  	; 14/12/2022
 22665                                  	; 25/10/2022
 22666 00001368 E83500                  	call	int_xx_first_check
 22667 0000136B 730C                    	jnc	short int_77_end ; int_77_first
 22668                                  
 22669                                  ; 14/12/2022
 22670                                  %if 0	
 22671                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22672                                  	push	ds
 22673                                  	lds	bx,[es:si]
 22674                                  	push	ds
 22675                                  	pop	dx
 22676                                  		
 22677                                  	cmp	dx,0
 22678                                  	je	short int_77_first
 22679                                  
 22680                                  	cmp	byte [bx],0CFh
 22681                                  	je	short int_77_first
 22682                                  	
 22683                                  	cmp	word [bx+6],424Bh
 22684                                  	je	short int_77_not_first
 22685                                  	
 22686                                  	cmp	dx,0F000h
 22687                                  	jne	short int_77_not_first
 22688                                  
 22689                                  	push	es
 22690                                  	push	dx
 22691                                  	mov	dx,0F000h
 22692                                  	mov	es,dx
 22693                                  	cmp	bx,[es:0FF01h]
 22694                                  	pop	dx
 22695                                  	pop	es
 22696                                  	je	short int_77_first
 22697                                  %endif
 22698                                  	
 22699                                  int_77_not_first:
 22700                                  	; 14/12/2022
 22701                                  	; 25/10/2022
 22702                                  	;pop	ds
 22703 0000136D BF[7A06]                	mov	di,INT19OLD77
 22704 00001370 BB[3101]                	mov	bx,old77
 22705 00001373 BA[2F01]                	mov	dx,int77
 22706 00001376 E85100                  	call	new_init_loop
 22707                                  
 22708                                  	; 14/12/2022
 22709                                  	;jmp	short int_77_end
 22710                                  ;int_77_first:
 22711                                  	; 25/10/2022
 22712                                  	;pop	ds
 22713                                  
 22714                                  int_77_end:
 22715 00001379 1E                      	push	ds
 22716 0000137A B800F0                  	mov	ax,0F000h		; look at the model byte
 22717 0000137D 8ED8                    	mov	ds,ax
 22718 0000137F 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 22719 00001384 1F                      	pop	ds
 22720 00001385 7504                    	jne	short skip_enablenmis
 22721                                  
 22722 00001387 B027                    	mov	al,27h			; enable convertible nmis
 22723 00001389 E672                    	out	72h,al
 22724                                  
 22725                                  ; 25/10/2022
 22726                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 22727                                  
 22728                                  skip_enablenmis:
 22729 0000138B FB                      	sti
 22730                                  	;;mov	ax,Bios_Data ; 70h
 22731                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22732                                  	; 21/10/2022
 22733 0000138C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22734 0000138F 8ED8                    	mov	ds,ax
 22735                                  
 22736                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 22737                                  
 22738 00001391 C606[3706]01            	mov	byte [INT19SEM],1	; indicate that int 19
 22739                                  					; initialization is complete
 22740                                  
 22741 00001396 5D                      	pop	bp			; restore all
 22742 00001397 5E                      	pop	si
 22743 00001398 5F                      	pop	di
 22744 00001399 5A                      	pop	dx
 22745 0000139A 59                      	pop	cx
 22746 0000139B 5B                      	pop	bx
 22747 0000139C 07                      	pop	es
 22748 0000139D 1F                      	pop	ds
 22749 0000139E 58                      	pop	ax
 22750 0000139F C3                      	retn
 22751                                  
 22752                                  ; 14/12/2022
 22753                                  ; ----------------------------------------------------------------------
 22754                                  
 22755                                  	; 14/12/2022
 22756                                  	; 25/10/2022
 22757                                  ;%if 0
 22758                                  	; 27/03/2019 - Retro DOS v4.0
 22759                                  int_xx_first_check:
 22760 000013A0 1E                      	push	ds
 22761 000013A1 26C51C                  	lds	bx,[es:si]
 22762 000013A4 1E                      	push	ds
 22763 000013A5 5A                      	pop	dx
 22764                                  		
 22765                                  	;cmp	dx,0
 22766                                  	;je	short int_xx_first
 22767                                  	; 05/09/2023
 22768 000013A6 21D2                    	and	dx,dx
 22769 000013A8 741E                    	jz	short int_xx_first
 22770                                  
 22771 000013AA 803FCF                  	cmp	byte [bx],0CFh
 22772 000013AD 7419                    	je	short int_xx_first
 22773                                  	
 22774 000013AF 817F064B42              	cmp	word [bx+6],424Bh
 22775 000013B4 7411                    	je	short int_xx_not_first
 22776                                  	
 22777 000013B6 81FA00F0                	cmp	dx,0F000h
 22778 000013BA 750B                    	jne	short int_xx_not_first
 22779                                  
 22780 000013BC 06                      	push	es
 22781                                  	;push	dx
 22782                                  	;mov	dx,0F000h
 22783 000013BD 8EC2                    	mov	es,dx
 22784 000013BF 263B1E01FF              	cmp	bx,[es:0FF01h]
 22785                                        	;pop	dx
 22786 000013C4 07                      	pop	es
 22787 000013C5 7401                    	je	short int_xx_first
 22788                                  
 22789                                  int_xx_not_first:
 22790 000013C7 F9                      	stc
 22791                                  int_xx_first:
 22792 000013C8 1F                      	pop	ds
 22793 000013C9 C3                      	retn
 22794                                  
 22795                                  ;%endif
 22796                                  
 22797                                  ; ----------------------------------------------------------------------
 22798                                  ; 27/03/2019 - Retro DOS v4.0
 22799                                  
 22800                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22801                                  ; (SYSINIT:1610h)
 22802                                  
 22803                                  new_init_loop:
 22804                                  
 22805                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22806                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22807                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22808                                  ;	di=offset value of int19old&aa variable in bios.
 22809                                  ;	es=zero, segid of vector table
 22810                                  ;	ds=relocated stack code segment
 22811                                  
 22812 000013CA 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22813 000013CD 8907                    	mov	[bx],ax			; to original owner in ds
 22814 000013CF 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22815 000013D3 894702                  	mov	[bx+2],ax		; to original owner in ds
 22816                                  
 22817 000013D6 1E                      	push	ds
 22818                                  	;;mov	ax,Bios_Data ; 70h
 22819                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22820                                  	; 21/10/2022
 22821 000013D7 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22822 000013DA 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22823 000013DC 268B04                  	mov	ax,[es:si]		;int 19 handler
 22824 000013DF 8905                    	mov	[di],ax
 22825 000013E1 268B4402                	mov	ax,[es:si+2]
 22826 000013E5 894502                  	mov	[di+2],ax
 22827 000013E8 1F                      	pop	ds
 22828                                  
 22829 000013E9 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22830 000013EC 268C5C02                	mov	[es:si+2],ds
 22831 000013F0 C3                      	retn
 22832                                  
 22833                                  ; End of STACK initialization routine
 22834                                  ; ----------------------------------------------------------------------
 22835                                  
 22836                                  ; ----------------------------------------------------------------------
 22837                                  ;set the devmark for mem command.
 22838                                  ;in: [memhi] - the address to place devmark
 22839                                  ;    [memlo] = 0
 22840                                  ;    al = id for devmark_id
 22841                                  ;out: devmark established.
 22842                                  ;     the address saved in cs:[devmark_addr]
 22843                                  ;     [memhi] increase by 1.
 22844                                  ; ----------------------------------------------------------------------
 22845                                  
 22846                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22847                                  ; (SYSINIT:1637h)
 22848                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 22849                                  ; (SYSINIT:176Ch)
 22850                                  
 22851                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 22852                                  
 22853                                  setdevmark:
 22854                                  
 22855                                  	; 04/09/2023
 22856                                  	;push	es
 22857                                  	;push	cx
 22858                                  
 22859 000013F1 2E8B0E[E003]            	mov	cx,[cs:memhi]
 22860 000013F6 2E890E[0E14]            	mov	[cs:devmark_addr],cx
 22861 000013FB 8EC1                    	mov	es,cx
 22862                                  	; 25/10/2022
 22863                                  	;mov	[es:devmark.id],al
 22864 000013FD 26A20000                	mov	[es:0],al
 22865 00001401 41                      	inc	cx
 22866                                  	;mov	[es:devmark.seg],cx
 22867 00001402 26890E0100              	mov	[es:1],cx
 22868                                  
 22869                                  	; 04/09/2023
 22870                                  	;pop	cx
 22871                                  	;pop	es
 22872                                  	
 22873 00001407 2EFF06[E003]            	inc	word [cs:memhi]
 22874 0000140C C3                      	retn
 22875                                  
 22876                                  ; ----------------------------------------------------------------------
 22877                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22878                                  ; ----------------------------------------------------------------------
 22879                                  ; 27/03/2019 - Retro DOS v4.0
 22880                                  
 22881                                  ;MULTI_CONFIG	equ 1
 22882                                  
 22883                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22884                                                                          ; allocation strategy call
 22885                                  
 22886                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22887                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22888                                  
 22889                                  default_filenum equ 8
 22890                                  
 22891                                  ;stacksw	equ true		; include switchable hardware stacks
 22892                                  
 22893                                  ; external variable defined in ibmbio module for multi-track
 22894                                  
 22895                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22896                                  					; it on after handling config.sys file as a
 22897                                  					; default value,if multrk_flag = multrk_off1.
 22898                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22899                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22900                                  
 22901                                  ; if stacksw
 22902                                  
 22903                                  ; internal stack parameters
 22904                                  
 22905                                  ;entrysize	equ 8
 22906                                  
 22907                                  ;mincount	equ 8
 22908                                  ;defaultcount	equ 9
 22909                                  ;maxcount	equ 64
 22910                                  
 22911                                  ;minsize 	equ 32
 22912                                  ;defaultsize	equ 128
 22913                                  ;maxsize 	equ 512
 22914                                  
 22915                                  DOS_FLAG_OFFSET	equ 86h
 22916                                  
 22917                                  ;ifdef MULTI_CONFIG
 22918                                  ;
 22919                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22920                                  ;   may be loaded as a dword ptr
 22921                                  
 22922                                  ; 25/10/2022
 22923                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 22924                                  ;               			;  a scratch env, this is its length
 22925                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 22926                                  ;                   			;  segment of work area
 22927                                  ;
 22928                                  ;config_cmd:	db  0  			; current config cmd
 22929                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 22930                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 22931                                  
 22932                                  ;endif ; MULTI_CONFIG
 22933                                  
 22934 0000140D 00                      multdeviceflag:	db  0
 22935                                  
 22936 0000140E 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22937                                  
 22938 00001410 00                      setdevmarkflag: db  0			;flag used for devmark
 22939                                  
 22940                                  ; 12/12/2022
 22941                                  ;driver_units:	db  0			;total unitcount for driver
 22942                                  
 22943                                  ; 12/12/2022
 22944                                  ;ems_stub_installed:
 22945                                  ;		db  0
 22946                                  
 22947                                  ; 12/12/2022	
 22948                                  ;align 2
 22949                                  
 22950                                  badparm_ptr:	; label	dword
 22951 00001411 0000                    badparm_off:	dw  0
 22952 00001413 0000                    badparm_seg:	dw  0
 22953                                  
 22954                                  ;******************************************************************************
 22955                                  ;take care of config.sys file.
 22956                                  ;system parser data and code.
 22957                                  ;******************************************************************************
 22958                                  
 22959                                  ;*******************************************************************
 22960                                  ; parser options set for msbio sysconf module
 22961                                  ;*******************************************************************
 22962                                  ;
 22963                                  ;**** default assemble swiches definition **************************
 22964                                  
 22965                                  ;farsw	equ 0		; near call expected
 22966                                  ;datesw	equ 0		; check date format
 22967                                  ;timesw	equ 0		; check time format
 22968                                  ;filesw	equ 1		; check file specification
 22969                                  ;capsw	equ 0		; perform caps if specified
 22970                                  ;cmpxsw	equ 0		; check complex list
 22971                                  ;numsw	equ 1		; check numeric value
 22972                                  ;keysw	equ 0		; support keywords
 22973                                  ;swsw	equ 1		; support switches
 22974                                  ;val1sw	equ 1		; support value definition 1
 22975                                  ;val2sw	equ 0		; support value definition 2
 22976                                  ;val3sw	equ 1		; support value definition 3
 22977                                  ;drvsw	equ 1		; support drive only format
 22978                                  ;qussw	equ 0		; support quoted string format
 22979                                  
 22980                                  ; psdata_seg equ cs
 22981                                  
 22982                                  	;.xlist
 22983                                  	;include parse.asm		;together with psdata.inc
 22984                                  	;.list
 22985                                  
 22986                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22987                                  ; ======================================================================
 22988                                  ; 27/03/2019 - Retro DOS v4.0
 22989                                  
 22990                                  ; 30/03/2019
 22991                                  ; VERSION.INC (MSDOS 6.0) 
 22992                                  ; Set DBCS Blank constant
 22993                                  
 22994                                  ; ifndef DBCS
 22995                                  DB_SPACE EQU 2020h
 22996                                  DB_SP_HI EQU 20h
 22997                                  DB_SP_LO EQU 20h
 22998                                  ; else
 22999                                  
 23000                                  ;*******************************************************************
 23001                                  ; Parser include file
 23002                                  ;*******************************************************************
 23003                                  
 23004                                  ;**** Equation field
 23005                                  ;-------- Character code definition
 23006                                  
 23007                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 23008                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 23009                                  _$P_Period	   equ	"."             ;AN020;
 23010                                  _$P_Slash	   equ	"/"             ;AN020;
 23011                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 23012                                  _$P_Comma	   equ	","             ;AN000;
 23013                                  _$P_Switch	   equ	"/"             ;AN000;
 23014                                  _$P_Keyword	   equ	"="             ;AN000;
 23015                                  _$P_Colon	   equ	":"             ;AN000;
 23016                                  _$P_Plus 	   equ	"+"             ;AN000;
 23017                                  _$P_Minus	   equ	"-"             ;AN000;
 23018                                  _$P_Rparen	   equ	")"             ;AN000;
 23019                                  _$P_Lparen	   equ	"("             ;AN000;
 23020                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 23021                                  _$P_DQuote	   equ	'"'             ;AN000;
 23022                                  _$P_NULL 	   equ	0		;AN000;
 23023                                  _$P_TAB		   equ	9		;AN000;
 23024                                  _$P_CR		   equ	0Dh		;AN000;
 23025                                  _$P_LF		   equ	0Ah		;AN000;
 23026                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 23027                                  
 23028                                  ;-------- Masks
 23029                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 23030                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 23031                                  
 23032                                  ;-------- DOS function call related equs
 23033                                  
 23034                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 23035                                  					; by this call, following information
 23036                                  struc _$P_CDI	
 23037 00000000 ????                     .DateF: resw 1
 23038 00000002 ??????????               .Money: resb 5
 23039 00000007 ????                     .1000:	 resb 2
 23040 00000009 ????                     .Dec:	 resb 2
 23041 0000000B ????                     .DateS: resb 2
 23042 0000000D ????                     .TimeS: resb 2
 23043 0000000F ??                          	 resb 1
 23044 00000010 ??                      	 resb 1
 23045 00000011 ??                       .TimeF: resb 1	 
 23046 00000012 ????????                	 resw 2
 23047 00000016 ????                    	 resb 2
 23048 00000018 <res Ah>                	 resw 5
 23049                                   .size:
 23050                                  endstruc
 23051                                  
 23052                                  _$P_Date_MDY	   equ	0		;AN000;
 23053                                  _$P_Date_DMY	   equ	1		;AN000;
 23054                                  _$P_Date_YMD	   equ	2		;AN000;
 23055                                  ;-------------
 23056                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 23057                                  					;AN000; DS:SI will points to DBCS EV
 23058                                  ;-------------
 23059                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 23060                                  					;AN000; following parameters are set
 23061                                  					;AN000; to get casemap table.
 23062                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 23063                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 23064                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 23065                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 23066                                  					; By this call following information
 23067                                  					; is returned.
 23068                                  struc _$P_DOS_TBL
 23069 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 23070 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 23071 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 23072                                  endstruc
 23073                                  
 23074                                  ; ----------------------------------------------------------------------------
 23075                                  ; PARMS 	LABEL	BYTE
 23076                                  ;		DW	PARMSX
 23077                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 23078                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 23079                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 23080                                  ;					; TYPICAL ARE ";", "="
 23081                                  ;					; "," & WHITESPACE ALWAYS
 23082                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 23083                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 23084                                  ; ----------------------------------------------------------------------------
 23085                                  
 23086                                  ;-------------------------------- PARMS block structure
 23087                                  struc _$P_PARMS_Blk
 23088 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 23089 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 23090 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 23091                                  endstruc
 23092                                  
 23093                                  _$P_Len_PARMS	   equ	4		;AN000;
 23094                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 23095                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 23096                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 23097                                  
 23098                                  ; ----------------------------------------------------------------------------
 23099                                  ; PARMSX	LABEL	BYTE
 23100                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 23101                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 23102                                  ;		:			; REPEATS maxp-1 TIMES
 23103                                  ;		DB	maxs		; # OF SWITCHES
 23104                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 23105                                  ;		:			; REPEATS maxs-1 TIMES
 23106                                  ;		DB	maxk		; # OF KEYWORD
 23107                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 23108                                  ;		:			; REPEATS maxk-1 TIMES
 23109                                  ; ----------------------------------------------------------------------------
 23110                                  
 23111                                  ;-------------------------------- PARMSX block structure
 23112                                  struc _$P_PARMSX_Blk		;AN000;
 23113 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 23114 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 23115 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 23116                                  endstruc
 23117                                  
 23118                                  ; ----------------------------------------------------------------------------
 23119                                  ; << Control field definition  >>
 23120                                  ;
 23121                                  ;
 23122                                  ;CONTROL   LABEL   BYTE
 23123                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 23124                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 23125                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 23126                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 23127                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 23128                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 23129                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 23130                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 23131                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 23132                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 23133                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 23134                                  ;				   ; 0002H=REPEATS ALLOWED
 23135                                  ;				   ; 0001H=OPTIONAL
 23136                                  ;	   DW	   FUNCTION_FLAGS
 23137                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 23138                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 23139                                  ;				   ; 0010H=REMOVE ":" AT END
 23140                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 23141                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 23142                                  ;	   DW	   VALUES	   ; VALUE LISTS
 23143                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 23144                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 23145                                  ;	   :
 23146                                  ;
 23147                                  ;Note:
 23148                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 23149                                  ;      DATE bit simalteniously.
 23150                                  ;
 23151                                  ;      The parser examins each bit along with the following priority.
 23152                                  ;
 23153                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 23154                                  ;      FILE SPEC -> SIMPLE STRING.
 23155                                  ;
 23156                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 23157                                  ;      in the result buffer is capitalized.
 23158                                  ;
 23159                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 23160                                  ;
 23161                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 23162                                  ;      switch, for example, '/A', then STRING points to;
 23163                                  ;
 23164                                  ;			DB    1 	; number of following synonyms
 23165                                  ;			DB   '/A',0
 23166                                  ;
 23167                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 23168                                  ;
 23169                                  ;			DB    1 	; number of following synonyms
 23170                                  ;			DB   'CODEPAGE=',0
 23171                                  ;
 23172                                  ;    - "..." must consist of upper case characters only because the parser
 23173                                  ;      performs pattern matching after converting input to upper case (by
 23174                                  ;      using the current country upper case table)
 23175                                  ;
 23176                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 23177                                  ;      example /A and /B, the format will be;
 23178                                  ;
 23179                                  ;			DB    2 	; number of following synonyms
 23180                                  ;			DB    '/A',0
 23181                                  ;			DB    '/B',0
 23182                                  ; ----------------------------------------------------------------------------
 23183                                  
 23184                                  ;**** Match_Flags
 23185                                  
 23186                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 23187                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 23188                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 23189                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 23190                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 23191                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 23192                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 23193                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 23194                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 23195                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 23196                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 23197                                  _$P_Optional	   equ	0001h		;AN000; Optional
 23198                                  
 23199                                  ;**** Function flags
 23200                                  
 23201                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 23202                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 23203                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 23204                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 23205                                  
 23206                                  ;-------------------------------- Control block structure
 23207                                  struc _$P_Control_Blk
 23208 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 23209 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 23210 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 23211 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 23212 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 23213 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 23214                                  endstruc
 23215                                  
 23216                                  ; ----------------------------------------------------------------------------
 23217                                  ; << Value List Definition >>
 23218                                  ;
 23219                                  ;VALUES 	LABEL	BYTE
 23220                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 23221                                  ;	     +-
 23222                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 23223                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 23224                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 23225                                  ;	     |	:
 23226                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 23227                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 23228                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 23229                                  ;	     |	:
 23230                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 23231                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 23232                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 23233                                  ;	     +-	:
 23234                                  ;
 23235                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 23236                                  ;
 23237                                  ;Note:
 23238                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 23239                                  ;      when no choice lists are provided.
 23240                                  ;
 23241                                  ;    - STRING must consist of upper case characters only because the parser
 23242                                  ;      performs pattern matching after converting input to upper case (by
 23243                                  ;      using the current country upper case table)
 23244                                  ; ----------------------------------------------------------------------------
 23245                                  
 23246                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 23247                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 23248                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 23249                                  _$P_nval_String	   equ	3		;AN000; string list ID
 23250                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 23251                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 23252                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 23253                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 23254                                  
 23255                                  struc _$P_Val_List
 23256 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 23257 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 23258 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 23259 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 23260 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 23261                                  endstruc
 23262                                  
 23263                                  ; ----------------------------------------------------------------------------
 23264                                  ; << Result Buffer Definition  >>
 23265                                  ;
 23266                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 23267                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 23268                                  ;						;	1=NUMBER, 2=LIST INDEX,
 23269                                  ;						;	3=STRING, 4=COMPLEX,
 23270                                  ;						;	5=FILESPEC, 6=DRIVE
 23271                                  ;						;	7=DATE, 8=TIME
 23272                                  ;						;	9=QUOTED STRING
 23273                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 23274                                  ;
 23275                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 23276                                  ;
 23277                                  ;            +-
 23278                                  ;	    | DD	n			; VALUE IF NUMBER
 23279                                  ;	    | or
 23280                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 23281                                  ;	    |					; (ES presents Segment address)
 23282                                  ;	    | or
 23283                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 23284                                  ;	    | or
 23285                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 23286                                  ;	    | or
 23287                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 23288                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 23289                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 23290                                  ;	    | or
 23291                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 23292                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 23293                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 23294                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 23295                                  ;	    +-
 23296                                  ;
 23297                                  ;
 23298                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 23299                                  ;      list.
 23300                                  ;
 23301                                  ;      YEAR: If the input value for the year is less than 100, parser
 23302                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 23303                                  ;	     the year value, he returns 1987.
 23304                                  ; ----------------------------------------------------------------------------
 23305                                  
 23306                                  ;-------------------------------- Result block structure
 23307                                  struc _$P_Result_Blk
 23308 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 23309 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 23310 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 23311 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 23312                                  endstruc
 23313                                  
 23314                                  ;--------------------------------
 23315                                  ;**** values for the type field in the result block
 23316                                  
 23317                                  _$P_EOL		   equ	0		;AN000; End of line
 23318                                  _$P_Number	   equ	1		;AN000; Number
 23319                                  _$P_List_Idx	   equ	2		;AN000; List Index
 23320                                  _$P_String	   equ	3		;AN000; String
 23321                                  _$P_Complex	   equ	4		;AN000; Complex
 23322                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 23323                                  _$P_Drive	   equ	6		;AN000; Drive
 23324                                  _$P_Date_F	   equ	7		;AN000; Date
 23325                                  _$P_Time_F	   equ	8		;AN000; Time
 23326                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 23327                                  
 23328                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 23329                                  
 23330                                  ;**** Return code
 23331                                  ;
 23332                                  ; following return code will be returned in the AX register.
 23333                                  
 23334                                  _$P_No_Error	   equ	0		;AN000; No error
 23335                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 23336                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 23337                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 23338                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 23339                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 23340                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 23341                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 23342                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 23343                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 23344                                  
 23345                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 23346                                  
 23347                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 23348                                  
 23349                                  ;********************** Local Data *************************************
 23350 00001415 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 23351 00001417 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 23352 00001419 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 23353 0000141B 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 23354 0000141D 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 23355 0000141E 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 23356 00001420 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 23357 00001422 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 23358                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 23359                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 23360                                  
 23361                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 23362                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 23363                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 23364                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 23365                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 23366                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 23367                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 23368                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 23369                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 23370                                  
 23371                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 23372                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 23373                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 23374                                  
 23375 00001424 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 23376 00001426 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 23377 00001428 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 23378 0000142A 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 23379                                  
 23380 0000142C 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 23381                                  _$P_STRING_BUF_END equ	$		;AN000;
 23382                                  
 23383                                  ; 25/10/2022
 23384                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 23385                                  
 23386 000014AC FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 23387 000014AD 0000                    		   dw	0		;AN000; offset	of char case map table
 23388 000014AF 0000                    		   dw	0		;AN000; segment of char case map table
 23389                                  ; 25/10/2022
 23390                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 23391                                  ;		   dw	0		;AN000; offset	of file case map table
 23392                                  ;		   dw	0		;AN000; segment of file case map table
 23393                                  
 23394                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 23395                                  ;
 23396                                  
 23397                                  ;M029
 23398                                  ;!!!WARNING!!!
 23399                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 23400                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 23401                                  ;changes need to be made in SYSPARSE
 23402                                  
 23403                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 23404                                  
 23405                                  ; 25/10/2022
 23406                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 23407                                  
 23408 000014B1 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 23409                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 23410                                  
 23411                                  ;ENDIF					;AN000;(of FileSW)
 23412                                  
 23413                                  ; delimiter parsing
 23414                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 23415                                  _$P_period_only	   equ	02h		;AN032; check only for period
 23416                                  
 23417                                  ;filespec error flag
 23418 000014BA 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 23419                                  					;AN033;  was detected.
 23420                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 23421                                  
 23422                                  
 23423                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 23424                                  ; ======================================================================
 23425                                  ; 27/03/2019 - Retro DOS v4.0
 23426                                  
 23427                                  ;***********************************************************************
 23428                                  ; SysParse;
 23429                                  ;
 23430                                  ;  Function : Parser Entry
 23431                                  ;
 23432                                  ;  Input: DS:SI -> command line
 23433                                  ;	  ES:DI -> parameter block
 23434                                  ;	  cs -> psdata.inc
 23435                                  ;	  CX = operand ordinal
 23436                                  ;
 23437                                  ;	  Note:  ES is the segment containing all the control blocks defined
 23438                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 23439                                  ;		 is in DS.
 23440                                  ;
 23441                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 23442                                  ;		    invalid value list. But this parser does NOT implement
 23443                                  ;		    this feature. Therefore CY always zero.
 23444                                  ;
 23445                                  ;	   CY = 0   AX = return code
 23446                                  ;		    BL = terminated delimiter code
 23447                                  ;		    CX = new operand ordinal
 23448                                  ;		    SI = set past scaned operand
 23449                                  ;		    DX = selected result buffer
 23450                                  ;
 23451                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 23452                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 23453                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 23454                                  ;
 23455                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 23456                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 23457                                  ;
 23458                                  ;-------- Modification History -----------------------------------------
 23459                                  ;
 23460                                  ;  4/04/87 : Created by K. K,
 23461                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 23462                                  ;	   : JMP SHORT assemble error (tm02)
 23463                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 23464                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 23465                                  ;	     DateSW equ 1)	      (tm04)
 23466                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 23467                                  ;				      (tm05) in PSDATA.INC
 23468                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 23469                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 23470                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 23471                                  ;	     value-list block	      (tm07)
 23472                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 23473                                  ;	     switch (keyword) or not. If there is, backup si for next call
 23474                                  ;	     (tm08)
 23475                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 23476                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 23477                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 23478                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 23479                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 23480                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 23481                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 23482                                  ;					  (tm12)
 23483                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 23484                                  ;					  (tm13)
 23485                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 23486                                  ;					  (tm14)
 23487                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 23488                                  ;					  (tm15)
 23489                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 23490                                  
 23491                                  ;  7/24/87 : Quoted strings being returned with quotes.
 23492                                  
 23493                                  ;  7/28/87 : Kerry S (;AN018;)
 23494                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 23495                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 23496                                  ;	     affected: _$P_Chk_SW_Control.
 23497                                  
 23498                                  ;  7/29/87 : Kerry S (;AN019;)
 23499                                  ;	     Now allow the optional bit in match flags for switches.  This
 23500                                  ;	     allows the switch to be encountered with a value or without a
 23501                                  ;	     value and no error is returned.
 23502                                  ;
 23503                                  
 23504                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 23505                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 23506                                  ;	     within a date response, instead of checking just for the one
 23507                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 23508                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 23509                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 23510                                  
 23511                                  ;  9/1/87  : Kerry S (;AN021)
 23512                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 23513                                  ;	     the command line with the string in the control block the
 23514                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 23515                                  ;	     on the command line and assuming a match.	This allowed a shorter
 23516                                  ;	     string on the command line than in the synonym list in the control
 23517                                  ;	     block.  I put in a test for a null in the control block so the
 23518                                  ;	     string in the control block must be the same length as the string
 23519                                  ;	     preceeding the colon or equal on the command line.
 23520                                  
 23521                                  ;  8/28/87 : Kerry S (;AN022;)
 23522                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 23523                                  ;	     problems for people who included it themselves in a segment other
 23524                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 23525                                  ;	     segment.
 23526                                  
 23527                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 23528                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 23529                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 23530                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 23531                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 23532                                  ;	     BL be used if TIME is being parsed.
 23533                                  
 23534                                  ;  9/24/87 : Ed K
 23535                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 23536                                  ;	     invocations with their normally expanded code; made comments
 23537                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 23538                                  
 23539                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 23540                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 23541                                  ;	     pointed to by non-existant CONTROL.
 23542                                  
 23543                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 23544                                  ;	     A quoted text string can be framed only by double quote.  Remove
 23545                                  ;	     support to frame quoted text string with single quote.
 23546                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 23547                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 23548                                  ;	     single quote in PROC prologues are left as is for history reasons.
 23549                                  
 23550                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 23551                                  ;	     quote chars within a quoted string is supposed to be reported as
 23552                                  ;	     one quote character, but is reported as two quotes.  This changed
 23553                                  ;	     two instructions in PROC _$P_Quoted_Str.
 23554                                  
 23555                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 23556                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 23557                                  
 23558                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 23559                                  
 23560                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 23561                                  ;	     psdata buffer should have cs.
 23562                                  
 23563                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 23564                                  ;	     positional missing.
 23565                                  
 23566                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 23567                                  ;	     as a line delimiter, should use carriage return.
 23568                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 23569                                  
 23570                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 23571                                  
 23572                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 23573                                  ;	     endless loop since SI is returned still pointing to start
 23574                                  ;	     of that parm.
 23575                                  
 23576                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 23577                                  ;	     Vector to returned string has CS instead of cs, but
 23578                                  ;	     when tried to fix it on previous version, changed similar
 23579                                  ;	     but wrong place.
 23580                                  
 23581                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 23582                                  ;	     delimiters between hours, minutes, seconds for time. And period
 23583                                  ;	     and comma are valid delimiters between seconds and 100th second.
 23584                                  
 23585                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 23586                                  ;	     in a filespec, then flag an error.
 23587                                  
 23588                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 23589                                  ;	     indexed off of the cs equate instead of the DS register.
 23590                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 23591                                  ;  -->	     local parser data. Why were some references to local data changed
 23592                                  ;	     to do this before, but not all ?????
 23593                                  
 23594                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 23595                                  
 23596                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 23597                                  ;
 23598                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 23599                                  
 23600                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 23601                                  
 23602                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 23603                                  ;	     separator in TIME before hundredths field.
 23604                                  ;
 23605                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 23606                                  ;			strings as keywords.
 23607                                  ;
 23608                                  ;***********************************************************************
 23609                                  
 23610                                  ;IF FarSW				;AN000;(Check if need far return)
 23611                                  ;SysParse proc far			;AN000;
 23612                                  ;ELSE					;AN000;
 23613                                  ;SysParse proc near			;AN000;
 23614                                  ;ENDIF					;AN000;(of FarSW)
 23615                                  
 23616                                  ; 27/03/2019 - Retro DOS v4.0
 23617                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 23618                                  
 23619                                  ; 25/10/2022 - Retro DOS v4.0
 23620                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 23621                                  
 23622                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 23623                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 23624                                  
 23625                                  SysParse:
 23626                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 23627                                  	; dx = 0
 23628 000014BB 1E                      	push	ds ; *!*
 23629 000014BC 0E                      	push	cs
 23630 000014BD 1F                      	pop	ds 
 23631                                  
 23632                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 23633                                  	;cld				;AN000; confirm forward direction
 23634                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 23635                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 23636                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 23637                                  	;
 23638                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 23639                                  
 23640                                  	; 06/09/2023
 23641 000014BE 8916[2214]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 23642 000014C2 FC                      	cld				;AN000; confirm forward direction
 23643 000014C3 890E[1514]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 23644 000014C7 8916[1714]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 23645 000014CB 8916[2A14]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 23646 000014CF 8916[1B14]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 23647                                  
 23648                                  ;M029 -- Begin changes
 23649                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 23650                                  ;entry to SysParse. This is in the non-checksum region and any program that
 23651                                  ;corrupts this table but does not corrupt the checksum region will leave
 23652                                  ;command.com parsing in an inconsistent state.
 23653                                  ; NB: The special characters string has been hardcoded here. If any change
 23654                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 23655                                  
 23656                                  ;IF FileSW + DrvSW
 23657                                  	;mov	word [cs:_$P_FileSp_Char], ']['
 23658                                  	;mov	word [cs:_$P_FileSp_Char+2], '<|'
 23659                                  	;mov	word [cs:_$P_FileSp_Char+4], '+>'
 23660                                  	;mov 	word [cs:_$P_FileSp_Char+6], ';='
 23661                                  
 23662                                  	; 06/09/2023
 23663 000014D3 C706[B114]5D5B          	mov	word [_$P_FileSp_Char], ']['
 23664 000014D9 C706[B314]3C7C          	mov	word [_$P_FileSp_Char+2], '<|'
 23665 000014DF C706[B514]2B3E          	mov	word [_$P_FileSp_Char+4], '+>'
 23666 000014E5 C706[B714]3B3D          	mov 	word [_$P_FileSp_Char+6], ';='
 23667                                  ;ENDIF
 23668                                  	; 06/09/2023
 23669 000014EB 1F                      	pop	ds ; *!*
 23670                                  
 23671                                  ;M029 -- End of changes
 23672                                  
 23673 000014EC E88106                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 23674 000014EF 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 23675                                  ;--------------------------- End of Line
 23676 000014F1 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 23677 000014F4 53                      	push	bx			;AN000;
 23678                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 23679                                  					;AN000; Get the PARMSX address to
 23680 000014F5 268B1D                  	mov	bx,[es:di]
 23681                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 23682                                  					;AN000; check ORDINAL to see if the minimum
 23683 000014F8 263A0F                  	cmp	cl,[es:bx]	
 23684 000014FB 7303                    	jae	short _$P_Fin		;AN000; positional found.
 23685                                  
 23686 000014FD B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 23687                                  _$P_Fin: 				;AN000;
 23688 00001500 5B                      	pop	bx			;AN000;
 23689 00001501 E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 23690                                  ;---------------------------
 23691                                  _$P_Start:				;AN000;
 23692 00001504 2E8936[2414]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 23693 00001509 53                      	push	bx			;AN000; quoted string or file spec.
 23694 0000150A 57                      	push	di			;AN000;
 23695 0000150B 55                      	push	bp			;AN000;
 23696                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 23697                                  	; 02/11/2022
 23698                                  	;lea	bx,[_$P_STRING_BUF]
 23699                                  	; 07/09/2023
 23700 0000150C BB[2C14]                	mov	bx,_$P_STRING_BUF
 23701 0000150F 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 23702 00001515 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 23703                                  
 23704                                  _$P_Pack_Loop:				;AN000;
 23705 00001517 AC                      	lodsb				;AN000; Pick a operand from buffer
 23706 00001518 E8FA06                  	call	_$P_Chk_Switch		;AN000; Check switch character
 23707 0000151B 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 23708                                  
 23709 0000151D E87206                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 23710 00001520 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 23711                                  
 23712 00001522 E8A206                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 23713 00001525 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 23714                                  
 23715 00001527 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 23716                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 23717 0000152D 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 23718                                  
 23719 0000152F E83E06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 23720 00001532 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 23721                                  
 23722                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 23723 00001534 2EF606[2314]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 23724 0000153A 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 23725                                  
 23726 0000153C 4E                      	dec	si			;AN000; (tm08)
 23727 0000153D EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 23728                                  
 23729                                  _$P_PL01:				;AN000;
 23730 0000153F 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 23731 00001542 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 23732 00001544 7506                    	jne	short _$P_PL00 		;AN000; then
 23733                                  
 23734 00001546 2E800E[2314]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 23735                                  _$P_PL00:				;AN000;
 23736 0000154C 43                      	inc	bx			;AN000; ready to see next byte
 23737 0000154D E8DE06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 23738 00001550 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 23739                                  
 23740 00001552 AC                      	lodsb				;AN000; if yes, store
 23741 00001553 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 23742 00001556 43                      	inc	bx			;AN000; update pointer
 23743 00001557 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 23744                                  
 23745                                  _$P_Pack_End_BY_EOL:			;AN000;
 23746 00001559 4E                      	dec	si			;AN000; backup si pointer
 23747                                  _$P_Pack_End:				;AN000;
 23748 0000155A 2E8936[1914]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 23749                                  	; 07/09/2023
 23750                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 23751 0000155F 30E4                    	xor	ah,ah ; 0 ; *
 23752 00001561 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 23753                                  	;
 23754 00001564 2E891E[2814]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 23755                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 23756 00001569 268B1D                  	mov	bx,[es:di]
 23757                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 23758                                  	; 02/11/2022
 23759                                  	;lea	si,[_$P_STRING_BUF]
 23760                                  	; 07/09/2023
 23761 0000156C BE[2C14]                	mov	si,_$P_STRING_BUF
 23762 0000156F 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 23763 00001573 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 23764                                  
 23765 00001575 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 23766 00001579 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 23767                                  
 23768 0000157B 2EF606[2314]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 23769 00001581 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 23770                                  
 23771                                  _$P_Positional_Manager:			;AN000; else process as positional
 23772 00001583 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23773                                  	; 07/09/2023
 23774                                  	;xor	ah,ah			;AN000; ax = maxp
 23775 00001587 2E3906[1514]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 23776 0000158C 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 23777                                  
 23778 0000158E 2EA1[1514]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 23779 00001592 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 23780 00001594 43                      	inc	bx			;AC035; add '2' to
 23781 00001595 43                      	inc	bx			;AC035;  BX reg
 23782                                  					;AN000; now bx points to 1st CONTROL
 23783 00001596 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 23784 00001598 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 23785 0000159B E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 23786 0000159E EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23787                                  
 23788                                  _$P_Too_Many_Error:			;AN000;
 23789 000015A0 2EC706[1714]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 23790 000015A7 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23791                                  
 23792                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 23793                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 23794                                  get_maxp:
 23795                                  	;mov	al,[es:bx+1]
 23796 000015A9 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23797                                  	; 07/09/2023
 23798                                  	; ah=0 ; *
 23799                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 23800 000015AD 30ED                    	xor	ch,ch ; **
 23801 000015AF 40                      	inc	ax			;AN000;
 23802 000015B0 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23803 000015B2 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23804 000015B4 C3                      	retn
 23805                                  
 23806                                  _$P_SW_Manager:				;AN000;
 23807                                  	; 07/09/2023
 23808                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23809                                  	;xor	ah,ah			;AN000; ax = maxp
 23810                                  	;inc	ax			;AN000;
 23811                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23812                                  	;add	bx,ax			;AN000; now bx points to maxs
 23813 000015B5 E8F1FF                  	call	get_maxp ; 07/09/2023
 23814                                  
 23815 000015B8 268A0F                  	mov	cl,[es:bx]		;AN000;
 23816                                  	; 07/09/2023
 23817                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 23818                                  	;or	cx,cx			;AN000; at least one switch ?
 23819                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 23820                                  	; 07/07/2023
 23821 000015BB E30F                    	jcxz	_$P_SW_Not_Found	; no
 23822                                  
 23823 000015BD 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 23824                                  
 23825                                  _$P_SW_Mgr_Loop: 			;AN000;
 23826 000015BE 53                      	push	bx			;AN000;
 23827 000015BF 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 23828 000015C2 E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 23829 000015C5 5B                      	pop	bx			;AN000;
 23830 000015C6 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 23831                                  
 23832 000015C8 43                      	inc	bx			;AC035; add '2' to
 23833 000015C9 43                      	inc	bx			;AC035;  BX reg
 23834                                  					;AN000; else bx points to the next CONTROL
 23835 000015CA E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 23836                                  
 23837                                  _$P_SW_Not_Found:			;AN000;
 23838 000015CC 2EC706[1714]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 23839 000015D3 EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 23840                                  
 23841                                  _$P_Key_Manager: 			;AN000;
 23842                                  	; 07/09/2023
 23843                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23844                                  	;xor	ah,ah			;AN000; ax = maxp
 23845                                  	;inc	ax			;AN000;
 23846                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23847                                  	;add	bx,ax			;AN000; now bx points to maxs
 23848 000015D5 E8D1FF                  	call	get_maxp ; 07/09/2023
 23849                                  	
 23850 000015D8 268A07                  	mov	al,[es:bx]		;AN000;
 23851 000015DB 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 23852 000015DD D1E0                    	shl	ax,1			;AN000;
 23853 000015DF 40                      	inc	ax			;AN000; ax = ax*2+1
 23854 000015E0 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 23855 000015E2 268A0F                  	mov	cl,[es:bx]		;AN000;
 23856                                  	; 07/09/2023
 23857                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 23858                                  	;or	cx,cx			;AN000; at least one keyword ?
 23859                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23860                                  	; 07/07/2023
 23861 000015E5 E305                    	jcxz	_$P_Key_Not_Found	; no
 23862                                  
 23863 000015E7 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23864                                  
 23865                                  _$P_Key_Mgr_Loop:			;AN000;
 23866                                  	; 07/09/2023
 23867                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 23868                                  	; (always returns with cf=1)
 23869                                  	;push	bx			;AN000;
 23870                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23871                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23872                                  	;pop	bx			;AN000;
 23873                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23874                                  	; 07/09/2023
 23875                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 23876                                  
 23877 000015E8 43                      	inc	bx			;AC035; add '2' to
 23878 000015E9 43                      	inc	bx			;AC035;  BX reg
 23879                                  					;AN000; else bx points to the next CONTROL
 23880 000015EA E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23881                                  
 23882                                  _$P_Key_Not_Found:			;AN000;
 23883 000015EC 2EC706[1714]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23884                                  _$P_Return_to_Caller:			;AN000;
 23885 000015F3 5D                      	pop	bp			;AN000;
 23886 000015F4 5F                      	pop	di			;AN000;
 23887 000015F5 5B                      	pop	bx			;AN000;
 23888 000015F6 2E8B0E[1514]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23889 000015FB 2EA1[1714]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23890 000015FF 2E8B36[1914]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23891 00001604 2E8B16[1B14]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23892 00001609 2E8A1E[1D14]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23893                                  _$P_Single_Exit: 			;AN000;
 23894 0000160E F8                      	clc				;AN000;
 23895 0000160F C3                      	retn				;AN000;
 23896                                  
 23897                                  ;***********************************************************************
 23898                                  ; _$P_Chk_Pos_Control
 23899                                  ;
 23900                                  ; Function: Parse CONTROL block for a positional
 23901                                  ;
 23902                                  ; Input:     ES:BX -> CONTROL block
 23903                                  ;	     cs:SI -> _$P_STRING_BUF
 23904                                  ;
 23905                                  ; Output:    None
 23906                                  ;
 23907                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23908                                  ;
 23909                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23910                                  ;***********************************************************************
 23911                                  
 23912                                  _$P_Chk_Pos_Control:
 23913 00001610 50                      	push	ax			;AN000;
 23914                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23915 00001611 268B07                  	mov	ax,[es:bx]
 23916                                  	; 12/12/2022
 23917 00001614 A802                    	test	al,_$P_Repeat
 23918                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23919 00001616 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23920                                  
 23921 00001618 2EFF06[1514]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23922                                  _$P_CPC00:				;AN000;
 23923 0000161D 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23924 00001621 7517                    	jne	short _$P_CPC01		;AN000;
 23925                                  
 23926                                  	; 12/12/2022
 23927 00001623 A801                    	test	al,_$P_Optional
 23928                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23929 00001625 7509                    	jnz	short _$P_CPC02		;AN000;
 23930                                  
 23931 00001627 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23932 0000162E EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 23933                                  
 23934                                  _$P_CPC02:				;AN000;
 23935 00001630 50                      	push	ax			;AN000;
 23936                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 23937                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23938                                  	; 14/08/2023
 23939 00001631 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23940 00001634 E89600                  	call	_$P_Fill_Result		;AN000;
 23941 00001637 58                      	pop	ax			;AN000;
 23942 00001638 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23943                                  
 23944                                  _$P_CPC01:				;AN000;
 23945 0000163A E81101                  	call	_$P_Check_Match_Flags	;AN000;
 23946                                  _$P_CPC_Exit:				;AN000;
 23947 0000163D 58                      	pop	ax			;AN000;
 23948 0000163E C3                      	retn				;AN000;
 23949                                  
 23950                                  ;***********************************************************************
 23951                                  ; _$P_Chk_Key_Control
 23952                                  ;
 23953                                  ; Function: Parse CONTROL block for a keyword
 23954                                  ;
 23955                                  ; Input:     ES:BX -> CONTROL block
 23956                                  ;	     cs:SI -> _$P_STRING_BUF
 23957                                  ;
 23958                                  ; Output:    CY = 1 : not match
 23959                                  ;
 23960                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23961                                  ;
 23962                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23963                                  ;***********************************************************************
 23964                                  
 23965                                  ; 07/09/2023
 23966                                  ;_$P_Chk_Key_Control:
 23967                                  ;	stc				;AN000; this logic works when the KeySW
 23968                                  ;	retn				;AN000; is reset.
 23969                                  
 23970                                  ;***********************************************************************
 23971                                  ; _$P_Search_KEYorSW:
 23972                                  ;
 23973                                  ; Function: Seach specified keyword or switch from CONTROL
 23974                                  ;
 23975                                  ; Input:     ES:BX -> CONTROL block
 23976                                  ;	     cs:SI -> _$P_STRING_BUF
 23977                                  ;
 23978                                  ; Output:    CY = 1 : not match
 23979                                  ;
 23980                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23981                                  ;***********************************************************************
 23982                                  
 23983                                  	; 25/10/2022 - Retro DOS v4.0
 23984                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23985                                  
 23986                                  _$P_Search_KEYorSW:			;AN000;
 23987 0000163F 55                      	push	bp			;AN000;
 23988 00001640 51                      	push	cx			;AN000;
 23989 00001641 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23990 00001645 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23991                                  	;or	cx,cx			;AN000; No synonyms specified ?
 23992                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23993                                  	; 14/08/2023
 23994 00001647 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 23995                                  
 23996                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23997                                  	; 25/10/2022
 23998 00001649 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23999                                  	;lea	bp,[bx+9]
 24000                                  _$P_KEYorSW_Loop:			;AN000;
 24001 0000164C E8BE03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 24002 0000164F 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 24003                                  
 24004 00001651 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 24005 00001654 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 24006                                  _$P_KEYorSW_Not_Found:			;AN000;
 24007 00001656 F9                      	stc				;AN000; indicate not found in synonym list
 24008 00001657 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 24009                                  
 24010                                  _$P_KEYorSW_Found:			;AN000;
 24011 00001659 2E892E[2A14]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 24012 0000165E F8                      	clc				;AN000; indicate found
 24013                                  _$P_KEYorSW_Exit:			;AN000;
 24014 0000165F 59                      	pop	cx			;AN000;
 24015 00001660 5D                      	pop	bp			;AN000;
 24016 00001661 C3                      	retn				;AN000;
 24017                                   
 24018                                  ;***********************************************************************
 24019                                  ; _$P_MoveBP_NUL
 24020                                  ;***********************************************************************
 24021                                  
 24022                                  _$P_MoveBP_NUL:
 24023                                  _$P_MBP_Loop:				;AN000;
 24024                                  	; 11/12/2022
 24025 00001662 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 24026                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 24027                                  	; (SYSINIT:18DBh)
 24028                                   	;cmp     byte [es:bp+0],0
 24029 00001667 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 24030                                  
 24031 00001669 45                      	inc	bp			;AN000; until
 24032 0000166A EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 24033                                  
 24034                                  _$P_MBP_Exit:				;AN000;
 24035 0000166C 45                      	inc	bp			;AN000; bp points to next to NULL
 24036 0000166D C3                      	retn				;AN000;
 24037                                  
 24038                                  ;***********************************************************************
 24039                                  ; _$P_Chk_SW_Control
 24040                                  ;
 24041                                  ; Function: Parse CONTROL block for a switch
 24042                                  ;
 24043                                  ; Input:     ES:BX -> CONTROL block
 24044                                  ;	     cs:SI -> _$P_STRING_BUF
 24045                                  ;
 24046                                  ; Output:    CY = 1 : not match
 24047                                  ;
 24048                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 24049                                  ;
 24050                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 24051                                  ;***********************************************************************
 24052                                  
 24053                                  _$P_Chk_SW_Control:
 24054                                  
 24055                                  ;IF SwSW				;AN000;(Check if switch is supported)
 24056                                  	;or	byte [cs:_$P_Flags+1],10h
 24057 0000166E 2E800E[2314]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 24058 00001674 E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 24059 00001677 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 24060                                  
 24061                                  	;and	[cs:_$P_Flags+],0EFh
 24062 00001679 2E8026[2314]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 24063                                  					;AC034; reset the indicator previously set
 24064 0000167F 50                      	push	ax			;AN000; 	      /switch:
 24065 00001680 2EA1[2614]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 24066 00001684 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 24067 00001686 2E0106[2414]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 24068 0000168B 58                      	pop	ax			;AN000;
 24069                                  
 24070 0000168C 2E8B36[2614]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 24071 00001691 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 24072 00001695 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 24073                                  
 24074 00001697 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 24075 0000169C 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 24076                                  
 24077 0000169E 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 24078 000016A5 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 24079                                  
 24080                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 24081                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 24082 000016A7 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 24083 000016AB 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 24084                                  
 24085                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 24086                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 24087                                  	;test	word [es:bx],1
 24088                                  	; 12/12/2022
 24089                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 24090 000016AD 26F60701                	test	byte [es:bx],_$P_Optional
 24091 000016B1 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 24092                                  
 24093 000016B3 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 24094 000016BA EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 24095                                  
 24096                                  _$P_CSW00:				;AN000;
 24097 000016BC E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 24098 000016BF F8                      	clc				;AN000; indicate match
 24099                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 24100                                  	; 12/12/2022
 24101 000016C0 C3                      	retn
 24102                                  
 24103                                  _$P_Chk_SW_Err0: 			;AN000;
 24104 000016C1 F9                      	stc				;AN000; not found in switch synonym list
 24105                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 24106                                  	; 12/12/2022
 24107 000016C2 C3                      	retn	
 24108                                  
 24109                                  _$P_Chk_SW_Exit: 			;AN000;
 24110 000016C3 50                      	push	ax			;AN000;
 24111                                  	;mov	al,_$P_String		;AN000;
 24112                                  	;mov	ah,_$P_No_Tag		;AN000;
 24113                                  	; 14/08/2023
 24114 000016C4 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24115 000016C7 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 24116 000016CA 58                      	pop	ax			;AN000;
 24117 000016CB F8                      	clc				;AN000;
 24118                                  _$P_Chk_SW_Single_Exit:			;AN000;
 24119 000016CC C3                      	retn				;AN000;
 24120                                  ;ELSE					;AN000;(of IF SwSW)
 24121                                  ;	stc				;AN000; this logic works when the SwSW
 24122                                  ;	retn				;AN000; is reset.
 24123                                  
 24124                                  ;***********************************************************************
 24125                                  ; _$P_Fill_Result
 24126                                  ;
 24127                                  ; Function: Fill the result buffer
 24128                                  ;
 24129                                  ; Input:    AH = Item tag
 24130                                  ;	    AL = type
 24131                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 24132                                  ;		  AL = 2: DX has index(offset) into value list
 24133                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 24134                                  ;		  AL = 7: DX has year, CL has month and CH has date
 24135                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 24136                                  ;			  amd CH has hundredths
 24137                                  ;		  AL = else: cs:SI points to returned string buffer
 24138                                  ;	    ES:BX -> CONTROL block
 24139                                  ;
 24140                                  ; Output:   None
 24141                                  ;
 24142                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 24143                                  ;
 24144                                  ; Vars: _$P_DX(W)
 24145                                  ;***********************************************************************
 24146                                  
 24147                                  _$P_Fill_Result:
 24148 000016CD 57                      	push	di			;AN000;
 24149 000016CE 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 24150                                  					;AN000; di points to result buffer
 24151 000016D2 2E893E[1B14]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 24152                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 24153                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 24154                                  	; 07/09/2023
 24155                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 24156 000016D7 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 24157                                  
 24158 000016DA 50                      	push	ax			;AN000;
 24159 000016DB 2EA1[2A14]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 24160 000016DF 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 24161                                  					;AN000;   then set it to the result
 24162 000016E3 58                      	pop	ax			;AN000;
 24163                                  _$P_RLT04:				;AN000;
 24164 000016E4 3C01                    	cmp	al,_$P_Number		;AN000; if number
 24165 000016E6 750A                    	jne	short _$P_RLT00		;AN000;
 24166                                  
 24167                                  _$P_RLT02:				;AN000;
 24168 000016E8 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 24169 000016EC 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 24170 000016F0 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 24171                                  
 24172                                  _$P_RLT00:				;AN000;
 24173 000016F2 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 24174 000016F4 7506                    	jne	short _$P_RLT01		;AN000;
 24175                                  
 24176 000016F6 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 24177                                  					;AN000; then store list index
 24178 000016FA EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 24179                                  
 24180                                  _$P_RLT01:				;AN000;
 24181 000016FC 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 24182 000016FE 74E8                    	je	short _$P_RLT02		;AN000;
 24183                                  
 24184 00001700 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 24185 00001702 74E4                    	je	short _$P_RLT02		;AN000;
 24186                                  
 24187 00001704 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 24188 00001706 7506                    	jne	short _$P_RLT03		;AN000;
 24189                                  
 24190 00001708 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 24191 0000170C EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 24192                                  
 24193                                  _$P_RLT03:				;AN000;
 24194 0000170E 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 24195 00001710 750F                    	jne	short _$P_RLT05		;AN000;
 24196                                  
 24197 00001712 2EA1[2414]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 24198 00001716 40                      	inc	ax			;AN000; skip left Parentheses
 24199 00001717 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 24200 0000171B 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 24201 0000171F EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 24202                                  
 24203                                  _$P_RLT05:				;AN000;
 24204                                  ;------------------------  AL = 3, 5, or 9
 24205 00001721 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 24206                                  					;AN000; store offset of STRING_BUF
 24207 00001725 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 24208                                  					;AN031; store segment of STRING_BUF
 24209 00001729 50                      	push	ax			;AN000;
 24210 0000172A 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 24211                                  					;AN000; need CAPS by file table?
 24212 0000172F 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 24213                                  
 24214 00001731 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 24215 00001733 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 24216                                  
 24217                                  _$P_RLT_CAP00:				;AN000;
 24218 00001735 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 24219                                  					;AN000; need CAPS by char table ?
 24220 0000173A 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 24221                                  
 24222 0000173C B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 24223                                  _$P_RLT_CAP02:				;AN000;
 24224 0000173E E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 24225                                  _$P_RLT_CAP01:				;AN000;
 24226 00001741 58                      	pop	ax			;AN000;
 24227 00001742 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 24228                                  					;AN000; removing colon at end ?
 24229 00001747 7403                    	jz	short _$P_RLT_Exit	;AN000;
 24230                                  
 24231 00001749 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 24232                                  _$P_RLT_Exit:				;AN000;
 24233 0000174C 5F                      	pop	di			;AN000;
 24234 0000174D C3                      	retn				;AN000;
 24235                                  
 24236                                  ;***********************************************************************
 24237                                  ; _$P_Check_Match_Flags
 24238                                  ;
 24239                                  ; Function:  Check the mutch_flags and make the exit code and set the
 24240                                  ;	     result buffer
 24241                                  ;
 24242                                  ;	    Check for types in this order:
 24243                                  ;		Complex
 24244                                  ;		Date
 24245                                  ;		Time
 24246                                  ;		Drive
 24247                                  ;		Filespec
 24248                                  ;		Quoted String
 24249                                  ;		Simple String
 24250                                  ;
 24251                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24252                                  ;	     ES:BX -> CONTROL block
 24253                                  ;
 24254                                  ; Output:    None
 24255                                  ;
 24256                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 24257                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 24258                                  ;	     _$P_Drive_Format
 24259                                  ;***********************************************************************
 24260                                  
 24261                                  	; 25/10/2022 - Retro DOS v4.0
 24262                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 24263                                  
 24264                                  	; 12/12/2022
 24265                                  _$P_Check_Match_Flags:
 24266 0000174E 2EC606[BA14]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 24267                                  					;AN033;AC034;; clear filespec error flag.
 24268 00001754 50                      	push	ax			;AN000;
 24269                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 24270 00001755 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 24271 00001758 09C0                    	or	ax,ax			;AC035; test ax for zero
 24272 0000175A 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 24273 0000175C 50                      	push	ax			;AN000; (tm12)
 24274 0000175D 53                      	push	bx			;AN000; (tm12)
 24275 0000175E 52                      	push	dx			;AN000; (tm12)
 24276 0000175F 57                      	push	di			;AN000; (tm12)
 24277 00001760 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 24278                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 24279                                  	;mov	al,_$P_String		;AN000; (tm12)
 24280                                  	; 14/08/2023
 24281 00001767 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24282 0000176A E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 24283 0000176D 5F                      	pop	di			;AN000; (tm12)
 24284 0000176E 5A                      	pop	dx			;AN000; (tm12)
 24285 0000176F 5B                      	pop	bx			;AN000; (tm12)
 24286 00001770 58                      	pop	ax			;AN000; (tm12)
 24287                                  	; 12/12/2022
 24288                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 24289                                  	; 12/12/2022
 24290                                  ;_$P_Mat: 				;AN000; (tm12)
 24291                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 24292                                  _$P_Bridge:
 24293 00001771 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 24294                                  	
 24295                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24296                                  	; (SYSINIT:19F9h)
 24297                                  	; 12/12/2022
 24298                                  	;nop	; db 90h
 24299                                  
 24300                                  ; 12/12/2022
 24301                                  _$P_Mat:
 24302                                  _$P_Match03:				;AN000;
 24303                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 24304                                  	; 14/08/2023
 24305 00001773 F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 24306 00001776 7412                    	jz	short _$P_Match04	;AN000;
 24307                                  
 24308 00001778 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24309 0000177F E81E01                  	call	_$P_Value		;AN000; do process
 24310 00001782 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24311 00001788 7557                    	jne	short _$P_Match_Exit	;AN000;
 24312                                  _$P_Match04:				;AN000;
 24313                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 24314                                  	; 14/08/2023
 24315 0000178A F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 24316 0000178D 7412                    	jz	short _$P_Match05	;AN000;
 24317                                  
 24318 0000178F 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24319 00001796 E8E300                  	call	_$P_SValue		;AN000; do process
 24320 00001799 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24321 0000179F 7540                    	jne	short _$P_Match_Exit	;AN000;
 24322                                  _$P_Match05:				;AN000;
 24323                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 24324                                  	; 14/08/2023
 24325 000017A1 F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 24326 000017A4 7415                    	jz	short _$P_Match06	;AN000;
 24327                                  
 24328 000017A6 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24329 000017AD E8FB02                  	call	_$P_File_Format		;AN000; 1st, call file format
 24330 000017B0 E87B03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 24331 000017B3 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24332 000017B9 7526                    	jne	short _$P_Match_Exit	;AN000;
 24333                                  _$P_Match06:				;AN000;
 24334                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 24335                                  	; 14/08/2023
 24336 000017BB F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24337 000017BE 7412                    	jz	short _$P_Match07	;AN000;
 24338                                  
 24339 000017C0 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24340 000017C7 E8E102                  	call	_$P_File_Format		;AN000; do process
 24341 000017CA 2E833E[1714]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24342 000017D0 750F                    	jne	short _$P_Match_Exit	;AN000;
 24343                                  _$P_Match07:				;AN000;
 24344                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 24345                                  	; 14/08/2023
 24346 000017D2 F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 24347 000017D5 740A                    	jz	short _$P_Match09	;AN000;
 24348                                  
 24349 000017D7 2EC706[1714]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24350 000017DE E8C301                  	call	_$P_Simple_String	;AN000; do process
 24351                                  _$P_Match09:				;AN000;
 24352                                  _$P_Match_Exit:				;AN000;
 24353 000017E1 2E833E[BA14]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 24354 000017E7 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 24355 000017E9 2E833E[1714]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 24356 000017EF 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 24357 000017F1 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 24358                                  _$P_Match2_Exit: 			;AN033;
 24359 000017F8 58                      	pop	ax			;AN000;
 24360 000017F9 C3                      	retn				;AN000;
 24361                                  
 24362                                  ;***********************************************************************
 24363                                  ; _$P_Remove_Colon;
 24364                                  ;
 24365                                  ; Function: Remove colon at end
 24366                                  ;
 24367                                  ; Input:    cs:SI points to string buffer to be examineed
 24368                                  ;
 24369                                  ; Output:   None
 24370                                  ;
 24371                                  ; Use:	_$P_Chk_DBCS
 24372                                  ;***********************************************************************
 24373                                  
 24374                                  _$P_Remove_Colon:
 24375 000017FA 50                      	push	ax			;AN000;
 24376 000017FB 56                      	push	si			;AN000;
 24377                                  _$P_RCOL_Loop:				;AN000;
 24378 000017FC 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24379 000017FF 08C0                    	or	al,al			;AN000; end of string ?
 24380 00001801 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 24381                                  
 24382 00001803 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 24383 00001805 750D                    	jne	short _$P_RCOL00	;AN000;
 24384                                  
 24385 00001807 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 24386 0000180C 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 24387                                  
 24388 0000180E 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 24389 00001812 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 24390                                  
 24391                                  _$P_RCOL00:				;AN000;
 24392 00001814 E81704                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 24393 00001817 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 24394                                  
 24395 00001819 46                      	inc	si			;AN000; if yes, skip trailing byte
 24396                                  _$P_RCOL01:				;AN000;
 24397 0000181A 46                      	inc	si			;AN000; si points to next byte
 24398 0000181B EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 24399                                  
 24400                                  _$P_RCOL_Exit:				;AN000;
 24401 0000181D 5E                      	pop	si			;AN000;
 24402 0000181E 58                      	pop	ax			;AN000;
 24403 0000181F C3                      	retn				;AN000;
 24404                                  
 24405                                  ;***********************************************************************
 24406                                  ; _$P_Do_CAPS_String;
 24407                                  ;
 24408                                  ; Function: Perform capitalization along with the file case map table
 24409                                  ;	    or character case map table.
 24410                                  ;
 24411                                  ; Input:    AL = 2 : Use character table
 24412                                  ;	    AL = 4 : Use file table
 24413                                  ;	    cs:SI points to string buffer to be capitalized
 24414                                  ;
 24415                                  ; Output:   None
 24416                                  ;
 24417                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 24418                                  ;***********************************************************************
 24419                                  
 24420                                  _$P_Do_CAPS_String:
 24421 00001820 56                      	push	si			;AN000;
 24422 00001821 52                      	push	dx			;AN000;
 24423 00001822 88C2                    	mov	dl,al			;AN000; save info id
 24424                                  
 24425                                  _$P_DCS_Loop:				;AN000;
 24426 00001824 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 24427 00001827 E80404                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 24428 0000182A 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 24429                                  
 24430 0000182C 08C0                    	or	al,al			;AN000; end of string ?
 24431 0000182E 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 24432                                  
 24433 00001830 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 24434 00001833 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 24435 00001836 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 24436                                  _$P_DCS00:				;AN000;
 24437 00001838 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 24438                                  _$P_DCS01:				;AN000;
 24439 00001839 46                      	inc	si			;AN000; si point to next byte
 24440 0000183A EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 24441                                  _$P_DCS_Exit:				;AN000;
 24442 0000183C 5A                      	pop	dx			;AN000;
 24443 0000183D 5E                      	pop	si			;AN000;
 24444 0000183E C3                      	retn
 24445                                  
 24446                                  ;***********************************************************************
 24447                                  ; _$P_Do_CAPS_Char;
 24448                                  ;
 24449                                  ; Function: Perform capitalization along with the file case map table
 24450                                  ;	    or character case map table.
 24451                                  ;
 24452                                  ; Input:    DL = 2 : Use character table
 24453                                  ;	    DL = 4 : Use file table
 24454                                  ;	    AL = character to be capitalized
 24455                                  ;
 24456                                  ; Output:   None
 24457                                  ;
 24458                                  ; Use:	INT 21h /w AH=65h
 24459                                  ;***********************************************************************
 24460                                  
 24461                                  _$P_Do_CAPS_Char:
 24462 0000183F 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 24463 00001841 730B                    	jae	short _$P_DCC_Go	;AN000;
 24464                                  
 24465 00001843 3C61                    	cmp	al,"a"                  ;AN000; if no,
 24466 00001845 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 24467                                  
 24468 00001847 3C7A                    	cmp	al,"z"                  ;AN000;
 24469 00001849 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 24470                                  
 24471 0000184B 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 24472                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 24473                                  	; 14/08/2023
 24474 0000184D C3                      	retn
 24475                                  
 24476                                  _$P_DCC_Go:				;AN000;
 24477 0000184E 53                      	push	bx			;AN000;
 24478 0000184F 06                      	push	es			;AN000;
 24479 00001850 57                      	push	di			;AN000;
 24480                                  
 24481                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 24482                                  	;lea	di,[_$P_Char_CAP_Ptr]
 24483                                  	; 07/09/2023
 24484 00001851 BF[AC14]                	mov	di,_$P_Char_CAP_Ptr
 24485                                  _$P_DCC00:				;AN000;
 24486 00001854 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 24487 00001857 7415                    	je	short _$P_DCC01		;AN000; if no,
 24488                                  
 24489                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 24490                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 24491                                  ; call, regardless of what base register is currently be defined as cs.
 24492                                  
 24493 00001859 50                      	push	ax			;AN000; get CAPS table thru DOS call
 24494 0000185A 51                      	push	cx			;AN000;
 24495 0000185B 52                      	push	dx			;AN000;
 24496                                  
 24497 0000185C 0E                      	push	cs			;AC036; pass current base seg into
 24498                                  					;(Note: this used to push CS.  BUG...
 24499 0000185D 07                      	pop	es			;AN000;   ES reg, required for
 24500                                  					;get extended country information
 24501                                  	;mov	al,dl ; function	;AN000; upper case table
 24502                                  	; 14/08/2023
 24503 0000185E 92                      	xchg	ax,dx
 24504 0000185F B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 24505 00001861 BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 24506 00001864 B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 24507                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 24508                                  	; 14/08/2023
 24509 00001867 89DA                    	mov	dx,bx ; 0FFFFh
 24510                                  					;DI already set to point to buffer
 24511 00001869 CD21                    	int	21h			;AN000; es:di point to buffer that
 24512                                  					;now has been filled in with info
 24513 0000186B 5A                      	pop	dx			;AN000;
 24514 0000186C 59                      	pop	cx			;AN000;
 24515 0000186D 58                      	pop	ax			;AN000;
 24516                                  
 24517                                  _$P_DCC01:				;AN000;
 24518                                  
 24519                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 24520                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 24521                                  ; regardless of which base reg is currently the cs reg.
 24522                                  
 24523                                  	; 14/08/2023
 24524                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 24525                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 24526 0000186E 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 24527 00001872 43                      	inc	bx			;AC035; add '2' to
 24528 00001873 43                      	inc	bx			;AC035;  BX reg
 24529                                  					;AN000; skip length field
 24530 00001874 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 24531                                  	;xlat	es:[bx] 		;AN000; perform case map
 24532 00001876 26                      	es
 24533 00001877 D7                      	xlat
 24534 00001878 5F                      	pop	di			;AN000;
 24535 00001879 07                      	pop	es			;AN000;
 24536 0000187A 5B                      	pop	bx			;AN000;
 24537                                  _$P_CAPS_Ret:				;AN000;
 24538 0000187B C3                      	retn				;AN000;
 24539                                  
 24540                                  ;***********************************************************************
 24541                                  ; _$P_Value / _$P_SValue
 24542                                  ;
 24543                                  ; Function:  Make 32bit value from cs:SI and see value list
 24544                                  ;	     and make result buffer.
 24545                                  ;	     _$P_SValue is an entry point for the signed value
 24546                                  ;	     and this will simply call _$P_Value after the handling
 24547                                  ;	     of the sign character, "+" or "-"
 24548                                  ;
 24549                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24550                                  ;	     ES:BX -> CONTROL block
 24551                                  ;
 24552                                  ; Output:    None
 24553                                  ;
 24554                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 24555                                  ;
 24556                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 24557                                  ;***********************************************************************
 24558                                  
 24559                                  	; 26/10/2022 - Retro DOS v4.0
 24560                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 24561                                  
 24562                                  _$P_SValue:				;AN000; when signed value here
 24563 0000187C 50                      	push	ax			;AN000;
 24564 0000187D 2E800E[2314]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 24565 00001883 2E8026[2314]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 24566 00001889 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 24567 0000188C 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 24568 0000188E 740A                    	je	short _$P_SVal00	;AN000;
 24569                                  
 24570 00001890 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 24571 00001892 7507                    	jne	short _$P_Sval01	;AN000; else
 24572                                  
 24573 00001894 2E800E[2314]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 24574                                  _$P_SVal00:				;AN000;
 24575 0000189A 46                      	inc	si			;AN000; skip sign char
 24576                                  _$P_Sval01:				;AN000;
 24577 0000189B E80200                  	call	_$P_Value		;AN000; and process value
 24578 0000189E 58                      	pop	ax			;AN000;
 24579 0000189F C3                      	retn
 24580                                  
 24581                                  ;***********************************************************************
 24582                                  
 24583                                  	; 26/10/2022
 24584                                  _$P_Value:				;AN000;
 24585 000018A0 50                      	push	ax			;AN000;
 24586 000018A1 51                      	push	cx			;AN000;
 24587 000018A2 52                      	push	dx			;AN000;
 24588 000018A3 56                      	push	si			;AN000;
 24589 000018A4 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 24590 000018A6 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 24591 000018A8 53                      	push	bx			;AN000; save control pointer
 24592                                  _$P_Value_Loop:				;AN000;
 24593 000018A9 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24594 000018AC 08C0                    	or	al,al			;AN000; end of line ?
 24595 000018AE 7442                    	jz	short _$P_Value00	;AN000;
 24596                                  
 24597 000018B0 E8E600                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 24598 000018B3 7239                    	jc	short _$P_Value_Err0	;AN000;
 24599                                  
 24600 000018B5 30E4                    	xor	ah,ah			;AN000;
 24601 000018B7 89C5                    	mov	bp,ax			;AN000; save binary number
 24602 000018B9 D1E2                    	shl	dx,1			;AN000; to have 2*x
 24603 000018BB D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24604 000018BD E8C700                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24605 000018C0 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24606                                  
 24607 000018C2 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 24608 000018C4 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 24609 000018C6 D1E2                    	shl	dx,1			;AN000; to have 4*x
 24610 000018C8 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24611 000018CA E8BA00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24612 000018CD 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24613                                  
 24614 000018CF D1E2                    	shl	dx,1			;AN000; to have 8*x
 24615 000018D1 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24616 000018D3 E8B100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24617 000018D6 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24618                                  
 24619 000018D8 01DA                    	add	dx,bx			;AN000; now have 10*x
 24620 000018DA 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 24621 000018DC E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24622 000018DF 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24623                                  
 24624 000018E1 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 24625 000018E3 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 24626 000018E6 E89E00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24627 000018E9 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24628                                  
 24629 000018EB 46                      	inc	si			;AN000; update pointer
 24630 000018EC EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 24631                                  ;
 24632                                  _$P_Value_Err0:				;AN000;
 24633 000018EE 5B                      	pop	bx			;AN000;
 24634 000018EF E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 24635                                  ;
 24636                                  _$P_Value00:				;AN000;
 24637 000018F2 5B                      	pop	bx			;AN000; restore control pointer
 24638 000018F3 2EF606[2314]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 24639 000018F9 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 24640                                  
 24641 000018FB F7D1                    	not	cx			;AN000; +
 24642 000018FD F7D2                    	not	dx			;AN000; |- Make 2's complement
 24643 000018FF 83C201                  	add	dx,1			;AN000; |
 24644 00001902 83D100                  	adc	cx,0			;AN000; +
 24645                                  
 24646                                  _$P_Value01:				;AN000; / nval = 0
 24647 00001905 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 24648 00001909 268A04                  	mov	al,[es:si]		;AN000; get nval
 24649                                  	; 07/09/2023
 24650                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 24651                                  	;;*jne	short _$P_Value02	;AN000;
 24652                                  	;;* 07/07/2023
 24653                                  	;je	short _$P_Value05
 24654                                  	; 07/09/2023
 24655 0000190C 08C0                    	or	al,al
 24656 0000190E 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 24657                                  
 24658                                  	;mov	al,_$P_Number		;AN000; Set type
 24659                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24660                                  	; 07/07/2023
 24661                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24662                                  	;*jmp	short _$P_Value_Exit	;AN000;
 24663                                  
 24664                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 24665                                  	; (SYSINIT:1BA5h)
 24666                                  	; 12/12/2022
 24667                                  	;nop	; db  90h
 24668                                  
 24669                                  _$P_Value02:				;AN000; / nval = 1
 24670                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 24671                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 24672                                  ;(tm07) jne	short _$P_Value03	;AN000;
 24673                                  
 24674 00001910 46                      	inc	si			;AN000;
 24675 00001911 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 24676                                  	
 24677                                  	; 07/09/2023
 24678                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 24679                                  	;je	short _$P_Value03	;AN000; (tm07)
 24680 00001914 08C0                    	or	al,al
 24681 00001916 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 24682                                  
 24683 00001918 46                      	inc	si			;AN000; si points to 1st item_tag
 24684                                  _$P_Val02_Loop:				;AN000;
 24685 00001919 2EF606[2314]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 24686 0000191F 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 24687                                  
 24688 00001921 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 24689 00001925 7234                    	jb	short _$P_Val02_Next	;AN000;
 24690 00001927 7706                    	ja	short _$P_Val_In	;AN000;
 24691                                  
 24692 00001929 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 24693 0000192D 722C                    	jb	short _$P_Val02_Next	;AN000;
 24694                                  
 24695                                  _$P_Val_In:				;AN000;
 24696 0000192F 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 24697 00001933 7726                    	ja	short _$P_Val02_Next	;AN000;
 24698 00001935 7237                    	jb	short _$P_Val_Found	;AN000;
 24699                                  
 24700 00001937 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 24701 0000193B 771E                    	ja	short _$P_Val02_Next	;AN000;
 24702                                  
 24703 0000193D EB2F                    	jmp	short _$P_Val_Found	;AN000;
 24704                                  
 24705                                  _$P_Val02_Sign:				;AN000;
 24706 0000193F 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 24707 00001943 7C16                    	jl	short _$P_Val02_Next	;AN000;
 24708 00001945 7F06                    	jg	short _$P_SVal_In	;AN000;
 24709                                  
 24710 00001947 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 24711 0000194B 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 24712                                  
 24713                                  _$P_SVal_In:				;AN000;
 24714 0000194D 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 24715 00001951 7F08                    	jg	short _$P_Val02_Next	;AN000;
 24716                                  
 24717 00001953 7C19                    	jl	short _$P_Val_Found	;AN000;
 24718                                  
 24719 00001955 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 24720                                  	;jg	short _$P_Val02_Next	;AN000;
 24721                                  	;jmp	short _$P_Val_Found	;AN000;
 24722                                  	; 14/08/2023
 24723 00001959 7E13                    	jng	short _$P_Val_Found
 24724                                  
 24725                                  _$P_Val02_Next:				;AN000;
 24726 0000195B 83C609                  	add	si,_$P_Len_Range 	;AN000;
 24727 0000195E FEC8                    	dec	al			;AN000; loop nrng times in AL
 24728 00001960 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 24729                                  					; / Not found
 24730 00001962 2EC706[1714]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 24731                                  	;mov	al,_$P_Number		;AN000;
 24732                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24733                                  _$P_Value05:		;* 14/08/2023
 24734                                  	; 14/08/2023
 24735 00001969 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24736 0000196C EB11                    	jmp	short _$P_Value_Exit	;AN000;
 24737                                  
 24738                                  _$P_Val_Found:				;AN000;
 24739 0000196E B001                    	mov	al,_$P_Number		;AN000;
 24740 00001970 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 24741 00001973 EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 24742                                  
 24743                                  _$P_Value03:				;AN000; / nval = 2
 24744                                  
 24745                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 24746                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 24747                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 24748                                  ;(tm07) inc	si			;AN000;
 24749                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 24750                                  ;	mov	ah,$P_Len_Range 	;AN000;
 24751                                  ;	mul	ah			;AN000;  Skip nrng field
 24752                                  ;	inc	ax			;AN000;
 24753                                  ;	add	si,ax			;AN000; si points to nnval
 24754                                  ;	mov	al,es:[si]		;AN000; get nnval
 24755                                  ;	inc	si			;AN000; si points to 1st item_tag
 24756                                  ;$P_Val03_Loop:				;AN000;
 24757                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 24758                                  ;	jne	$P_Val03_Next		;AN000;
 24759                                  ;
 24760                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 24761                                  ;	je	$P_Val_Found		;AN000;
 24762                                  ;
 24763                                  ;$P_Val03_Next:				;AN000;
 24764                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 24765                                  ;	dec	al			;AN000; loop nval times in AL
 24766                                  ;	jne	$P_Val03_Loop		;AN000;
 24767                                  ;					;AN000; / Not found
 24768                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 24769                                  ;	mov	al,$P_Number		;AN000;
 24770                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 24771                                  ;	jmp	short $P_Value_Exit	;AN000;
 24772                                  ;
 24773                                  ;ENDIF					;AN000;(of Val2SW)
 24774                                  ;$P_Value04:
 24775                                  
 24776                                  _$P_Value_Err:				;AN000;
 24777 00001975 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24778                                  	;mov	al,_$P_String		;AN000; Set type
 24779                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24780                                  	; 14/08/2023
 24781 0000197C B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24782                                  _$P_Value_Exit:				;AN000;
 24783 0000197F E84BFD                  	call	_$P_Fill_Result		;AN000;
 24784 00001982 5E                      	pop	si			;AN000;
 24785 00001983 5A                      	pop	dx			;AN000;
 24786 00001984 59                      	pop	cx			;AN000;
 24787 00001985 58                      	pop	ax			;AN000;
 24788 00001986 C3                      	retn				;AN000;
 24789                                  
 24790                                  ; 28/03/2019 - Retro DOS v4.0
 24791                                  
 24792                                  ;***********************************************************************
 24793                                  ; _$P_Check_OVF
 24794                                  ;
 24795                                  ; Function:  Check if overflow is occurred with consideration of
 24796                                  ;	     signed or un-signed numeric value
 24797                                  ;
 24798                                  ; Input:     Flag register
 24799                                  ;
 24800                                  ; Output:    CY = 1  :	Overflow
 24801                                  ;
 24802                                  ; Vars:     _$P_Flags(R)
 24803                                  ;***********************************************************************
 24804                                  
 24805                                  	; 26/10/2022
 24806                                  _$P_Check_OVF:
 24807 00001987 9C                      	pushf				;AN000;
 24808 00001988 2EF606[2314]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 24809 0000198E 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 24810                                  
 24811 00001990 9D                      	popf				;AN000; by the CY bit
 24812 00001991 C3                      	retn				;AN000;
 24813                                  
 24814                                  _$P_COVF:				;AN000;
 24815 00001992 9D                      	popf				;AN000; else,
 24816 00001993 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 24817                                  
 24818 00001995 F8                      	clc				;AN000; indicate it with CY bit
 24819 00001996 C3                      	retn				;AN000; CY=0 means no overflow
 24820                                  
 24821                                  _$P_COVF00:				;AN000;
 24822                                  _$P_0099Err: ; 14/08/2023
 24823 00001997 F9                      	stc				;AN000; and CY=1 means overflow
 24824                                  _$P_0099Err2: ; 14/08/2023
 24825 00001998 C3                      	retn				;AN000;
 24826                                  
 24827                                  ;***********************************************************************
 24828                                  ; _$P_0099;
 24829                                  ;
 24830                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 24831                                  ;
 24832                                  ; Input:     AL = character code
 24833                                  ;
 24834                                  ; Output:    CY = 1 : AL is not number
 24835                                  ;	     CY = 0 : AL contains binary value
 24836                                  ;***********************************************************************
 24837                                  
 24838                                  _$P_0099:
 24839 00001999 3C30                    	cmp	al,"0"                  ;AN000;
 24840                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24841                                  	; 12/12/2022
 24842 0000199B 72FB                    	jb	short _$P_0099Err2  ; cf=1
 24843                                  
 24844 0000199D 3C39                    	cmp	al,"9"                  ;AN000;
 24845 0000199F 77F6                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24846                                  
 24847 000019A1 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 24848                                  	; 12/12/2022
 24849                                  	; cf=0	
 24850                                  	;clc				;AN000; indicate no error
 24851 000019A3 C3                      	retn				;AN000;
 24852                                  
 24853                                  	; 14/08/2023
 24854                                  ;_$P_0099Err:				;AN000;
 24855                                  ;	stc				;AN000; indicate error
 24856                                  ;_$P_0099Err2: ; 12/12/2022	
 24857                                  ;	retn				;AN000;
 24858                                  
 24859                                  ;***********************************************************************
 24860                                  ; _$P_Simple_String
 24861                                  ;
 24862                                  ; Function:  See value list for the simple string
 24863                                  ;	     and make result buffer.
 24864                                  ;
 24865                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24866                                  ;	     ES:BX -> CONTROL block
 24867                                  ;
 24868                                  ; Output:    None
 24869                                  ;
 24870                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 24871                                  ;
 24872                                  ; Vars: _$P_RC(W)
 24873                                  ;***********************************************************************
 24874                                  
 24875                                  _$P_Simple_String:
 24876 000019A4 50                      	push	ax			;AN000;
 24877 000019A5 53                      	push	bx			;AN000;
 24878 000019A6 52                      	push	dx			;AN000;
 24879 000019A7 57                      	push	di			;AN000;
 24880 000019A8 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24881 000019AC 268A05                  	mov	al,[es:di]		;AN000; get nval
 24882 000019AF 08C0                    	or	al,al			;AN000; no value list ?
 24883 000019B1 7504                    	jnz	short _$P_Sim00		;AN000; then
 24884                                  
 24885 000019B3 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24886 000019B5 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24887                                  
 24888                                  _$P_Sim00:				;AN000;
 24889                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24890 000019B7 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24891 000019B9 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24892                                  
 24893 000019BB 47                      	inc	di			;AN000;
 24894 000019BC 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24895 000019BF B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24896 000019C1 F6E4                    	mul	ah			;AN000; Skip nrng field
 24897 000019C3 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24898 000019C4 01C7                    	add	di,ax			;AN000; di points to nnval
 24899 000019C6 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24900 000019C9 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24901 000019CB F6E4                    	mul	ah			;AN000; Skip nnval field
 24902 000019CD 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24903 000019CE 01C7                    	add	di,ax			;AN000; di points to nstrval
 24904 000019D0 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24905 000019D3 47                      	inc	di			;AC035; add '2' to
 24906 000019D4 47                      	inc	di			;AC035;  DI reg
 24907                                  					;AN000; di points to 1st string in list
 24908                                  _$P_Sim_Loop:				;AN000;
 24909 000019D5 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24910 000019D8 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24911 000019DB 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24912                                  
 24913 000019DD 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24914 000019E0 FEC8                    	dec	al			;AN000; loop nstval times in AL
 24915 000019E2 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24916                                  					;AN000; / Not found
 24917 000019E4 2EC706[1714]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24918 000019EB B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24919 000019ED EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24920                                  
 24921                                  _$P_Sim_Found:				;AN000;
 24922 000019EF 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24923 000019F3 B002                    	mov	al,_$P_List_Idx		;AN000;
 24924 000019F5 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 24925 000019F8 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 24926                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 24927                                  _$P_Sim01:				;AN000;
 24928 000019FA 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24929 00001A01 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24930                                  _$P_Sim_Exit:				;AN000;
 24931 00001A03 B003                    	mov	al,_$P_String		;AN000; Set type
 24932                                  _$P_Sim_Exit0:				;AN000;
 24933 00001A05 E8C5FC                  	call	_$P_Fill_Result		;AN000;
 24934 00001A08 5F                      	pop	di			;AN000;
 24935 00001A09 5A                      	pop	dx			;AN000;
 24936 00001A0A 5B                      	pop	bx			;AN000;
 24937 00001A0B 58                      	pop	ax			;AN000;
 24938 00001A0C C3                      	retn				;AN000;
 24939                                  
 24940                                  ;***********************************************************************
 24941                                  ; _$P_String_Comp:
 24942                                  ;
 24943                                  ; Function:  Compare two string
 24944                                  ;
 24945                                  ; Input:     cs:SI -> 1st string
 24946                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24947                                  ;	     ES:BX -> CONTROL block
 24948                                  ;
 24949                                  ; Output:    CY = 1 if not match
 24950                                  ;
 24951                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24952                                  ;
 24953                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24954                                  ;***********************************************************************
 24955                                  
 24956                                  _$P_String_Comp:
 24957 00001A0D 50                      	push	ax			;AN000;
 24958 00001A0E 55                      	push	bp			;AN000;
 24959 00001A0F 52                      	push	dx			;AN000;
 24960 00001A10 56                      	push	si			;AN000;
 24961 00001A11 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24962                                  _$P_SCOM_Loop:				;AN000;
 24963 00001A13 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24964 00001A16 E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24965 00001A19 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24966                                  
 24967 00001A1B E821FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24968                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24969 00001A1E 2EF606[2314]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24970 00001A24 740D                    	jz	short _$P_SCOM04	;AN000;
 24971                                  
 24972 00001A26 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24973 00001A28 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24974                                  
 24975 00001A2A 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24976 00001A2F 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24977                                  
 24978 00001A31 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24979                                  
 24980                                  _$P_SCOM04:				;AN000;
 24981 00001A33 2EF606[2314]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24982 00001A39 740E                    	jz	short _$P_SCOM03	;AN000;
 24983                                  
 24984 00001A3B 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24985 00001A3D 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24986                                  
 24987                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24988                                  	;cmp	byte [es:bp+0],_$P_NULL
 24989                                  	; 11/12/2022
 24990 00001A3F 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24991 00001A44 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24992                                  
 24993                                  _$P_SCOM05:				;AN000;   found a match
 24994 00001A46 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24995 00001A47 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24996                                  
 24997                                  _$P_SCOM03:				;AN000;
 24998                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24999                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25000                                  	;cmp	al,[es:bp+0]
 25001                                  	; 11/12/2022
 25002 00001A49 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 25003 00001A4D 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 25004                                  
 25005 00001A4F 08C0                    	or	al,al			;AN000; end of line
 25006 00001A51 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 25007                                  
 25008                                  	; 12/12/2022
 25009                                  	;inc	si			;AN000; update operand pointer
 25010                                  	;inc	bp			;AN000;    and synonym pointer
 25011                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25012 00001A53 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 25013                                  
 25014                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 25015                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25016                                  	;cmp	al,[es:bp+0]
 25017                                  	; 11/12/2022
 25018 00001A55 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 25019 00001A59 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 25020                                  
 25021 00001A5B 46                      	inc	si			;AN000; else, load next byte
 25022 00001A5C 2E8A04                  	mov	al,[cs:si]		;AN000; and
 25023 00001A5F 45                      	inc	bp			;AN000;
 25024                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25025                                  	;cmp	al,[es:bp+0]
 25026                                  	; 11/12/2022
 25027 00001A60 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 25028 00001A64 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 25029                                  
 25030                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25031                                  	; 12/12/2022
 25032                                  _$P_SCOM01:
 25033 00001A66 46                      	inc	si			;AN000; else update operand pointer
 25034 00001A67 45                      	inc	bp			;AN000; 		and synonym pointer
 25035                                  ;_$P_SCOM01:				;AN000;
 25036 00001A68 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 25037                                  
 25038                                  _$P_SCOM_Differ0:			;AN000;
 25039                                  ;IF SwSW				;AN000;(tm10)
 25040 00001A6A 2EF606[2314]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 25041 00001A70 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 25042                                  
 25043                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25044                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 25045                                  	; 12/12/2022
 25046 00001A72 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 25047 00001A77 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 25048                                  
 25049                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25050                                  	;cmp	byte [es:bp+0],_$P_NULL
 25051                                  	; 11/12/2022
 25052 00001A79 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 25053                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 25054 00001A7E 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 25055                                  
 25056                                  _$P_not_applicable:			;AN000;(tm10)
 25057                                  ;ENDIF					;AN000;(tm10)
 25058                                  
 25059                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 25060                                  					;AN000; ignore colon option specified ?
 25061                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 25062                                  	; 12/12/2022
 25063 00001A80 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 25064                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25065                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 25066 00001A84 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 25067                                  
 25068 00001A86 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 25069 00001A88 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 25070                                  
 25071                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25072                                  	;cmp	byte [es:bp+0],_$P_NULL
 25073                                  	; 11/12/2022
 25074 00001A8A 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 25075 00001A8F 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 25076                                  
 25077 00001A91 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 25078                                  
 25079                                  _$P_SCOM02:				;AN000;
 25080 00001A93 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 25081 00001A95 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 25082                                  
 25083                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25084                                  	;cmp	byte [es:bp+0],_$P_Colon
 25085                                  	; 11/12/2022
 25086 00001A97 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 25087 00001A9C 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 25088                                  
 25089                                  _$P_SCOM_Differ: 			;AN000;
 25090 00001A9E F9                      	stc				;AN000; indicate not found
 25091 00001A9F EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 25092                                  
 25093                                  _$P_SCOM_Same:				;AN000;
 25094                                  	; 12/12/2022
 25095                                  	; cf=0
 25096 00001AA1 2E8936[2614]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 25097                                  	; 12/12/2022
 25098                                  	;clc				;AN000; indicate found
 25099                                  _$P_SCOM_Exit:				;AN000;
 25100 00001AA6 5E                      	pop	si			;AN000;
 25101 00001AA7 5A                      	pop	dx			;AN000;
 25102 00001AA8 5D                      	pop	bp			;AN000;
 25103 00001AA9 58                      	pop	ax			;AN000;
 25104 00001AAA C3                      	retn
 25105                                  
 25106                                  ; 30/03/2019
 25107                                  
 25108                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 25109                                  
 25110                                  ;***********************************************************************
 25111                                  ; _$P_File_Format;
 25112                                  ;
 25113                                  ; Function:  Check if the input string is valid file spec format.
 25114                                  ;	     And set the result buffer.
 25115                                  ;
 25116                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25117                                  ;	     ES:BX -> CONTROL block
 25118                                  ;
 25119                                  ; Output:    None
 25120                                  ;
 25121                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 25122                                  ;
 25123                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 25124                                  ;	_$P_SaveSI_Cmpx(R)
 25125                                  ;***********************************************************************
 25126                                  
 25127                                  _$P_File_Format:
 25128 00001AAB 50                      	push	ax			;AN000;
 25129 00001AAC 57                      	push	di			;AN000;
 25130 00001AAD 56                      	push	si			;AN000;
 25131 00001AAE 2E8B3E[2414]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 25132                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 25133 00001AB3 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 25134 00001AB6 08C0                    	or	al,al			;AN000; end of line ?
 25135 00001AB8 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 25136                                  
 25137 00001ABA E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 25138 00001ABD 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 25139                                  
 25140 00001ABF 2EC606[BA14]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 25141                                  					;AN033;AC034;; set error flag- bad char.
 25142 00001AC5 5E                      	pop	si			;AN033;
 25143 00001AC6 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 25144 00001ACA 5F                      	pop	di			;AN033;
 25145 00001ACB EB3E                    	jmp	short _$P_FileF02	;AN033;
 25146                                  
 25147                                  _$P_FileF_Err:				;AN000;
 25148 00001ACD 5E                      	pop	si			;AN000;
 25149 00001ACE 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 25150 00001AD2 5F                      	pop	di			;AN000;
 25151                                  
 25152                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 25153                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 25154                                  	; 12/12/2022
 25155 00001AD3 26F60701                	test	byte [es:bx],_$P_Optional
 25156                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25157                                  	;test	word [es:bx],_$P_Optional
 25158 00001AD7 7532                    	jnz	short _$P_FileF02	;AN000;
 25159                                  
 25160 00001AD9 2EC706[1714]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 25161 00001AE0 EB29                    	jmp	short _$P_FileF02	;AN000;
 25162                                  
 25163                                  _$P_FileF03:				;AN000;
 25164 00001AE2 58                      	pop	ax			;AN000; discard save si
 25165 00001AE3 56                      	push	si			;AN000; save new si
 25166                                  _$P_FileF_Loop1: 			;AN000;
 25167 00001AE4 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 25168 00001AE7 08C0                    	or	al,al			;AN000; end of line ?
 25169 00001AE9 741E                    	jz	short _$P_FileF_RLT	;AN000;
 25170                                  
 25171 00001AEB E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 25172 00001AEE 740B                    	je	short _$P_FileF00	;AN000;
 25173                                  
 25174 00001AF0 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 25175 00001AF3 7302                    	jnc	short _$P_FileF01	;AN000;
 25176 00001AF5 47                      	inc	di			;AN000; if yes, skip next byte
 25177 00001AF6 46                      	inc	si			;AN000;
 25178                                  _$P_FileF01:				;AN000;
 25179 00001AF7 47                      	inc	di			;AN000;
 25180 00001AF8 46                      	inc	si			;AN000;
 25181 00001AF9 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 25182                                  ;
 25183                                  _$P_FileF00:				;AN000;
 25184 00001AFB 2EA2[1D14]              	mov	[cs:_$P_Terminator],al	;AC034;
 25185 00001AFF 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 25186 00001B03 47                      	inc	di			;AN000;
 25187 00001B04 2E893E[1914]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 25188                                  _$P_FileF_RLT:				;AN000;
 25189 00001B09 5E                      	pop	si			;AN000;
 25190 00001B0A 5F                      	pop	di			;AN000;
 25191                                  _$P_FileF02:				;AN000;
 25192 00001B0B 58                      	pop	ax			;AN000; (tm14)
 25193                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 25194                                  	; 14/08/2023
 25195 00001B0C F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 25196 00001B0F 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 25197                                  
 25198 00001B11 50                      	push	ax			;AN000;  (tm14)
 25199                                  	;mov	ah,_$P_No_Tag		;AN000; set
 25200                                  	;mov	al,_$P_File_Spec 	;AN000; result
 25201                                  	; 14/08/2023
 25202 00001B12 B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 25203                                  					      ; set result
 25204 00001B15 E8B5FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 25205 00001B18 58                      	pop	ax			;AN000;
 25206                                  
 25207                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 25208 00001B19 C3                      	retn				;AN000;
 25209                                  
 25210                                  ;***********************************************************************
 25211                                  ; _$P_FileSp_Chk
 25212                                  ;
 25213                                  ; Function:  Check if the input byte is one of file special characters
 25214                                  ;
 25215                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25216                                  ;	     AL = character code to be examineed
 25217                                  ;
 25218                                  ; Output:    ZF = 1 , AL is one of special characters
 25219                                  ;***********************************************************************
 25220                                  
 25221                                  _$P_FileSp_Chk:
 25222 00001B1A 53                      	push	bx			;AN000;
 25223 00001B1B 51                      	push	cx			;AN000;
 25224                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 25225                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 25226                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 25227                                  	; 07/09/2023
 25228 00001B1C BB[B114]                	mov	bx,_$P_FileSp_Char
 25229 00001B1F B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 25230                                  _$P_FileSp_Loop: 			;AN000;
 25231 00001B22 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 25232 00001B25 7404                    	je	short _$P_FileSp_Exit	;AN000;
 25233                                  
 25234 00001B27 43                      	inc	bx			;AN000;
 25235 00001B28 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 25236                                  
 25237 00001B2A 41                      	inc	cx			;AN000; reset ZF
 25238                                  _$P_FileSp_Exit: 			;AN000;
 25239 00001B2B 59                      	pop	cx			;AN000;
 25240 00001B2C 5B                      	pop	bx			;AN000;
 25241 00001B2D C3                      	retn
 25242                                  
 25243                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 25244                                  
 25245                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 25246                                  
 25247                                  ;***********************************************************************
 25248                                  ; _$P_Drive_Format;
 25249                                  ;
 25250                                  ; Function:  Check if the input string is valid drive only format.
 25251                                  ;	     And set the result buffer.
 25252                                  ;
 25253                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25254                                  ;	     ES:BX -> CONTROL block
 25255                                  ;
 25256                                  ; Output:    None
 25257                                  ;
 25258                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 25259                                  ;
 25260                                  ; Vars: _$P_RC(W)
 25261                                  ;***********************************************************************
 25262                                  
 25263                                  _$P_Drive_Format:
 25264 00001B2E 50                      	push	ax			;AN000;
 25265 00001B2F 52                      	push	dx			;AN000;
 25266 00001B30 2E8A04                  	mov	al,[cs:si]		;AN000;
 25267 00001B33 08C0                    	or	al,al			;AN000; if null string
 25268 00001B35 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 25269                                  
 25270 00001B37 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 25271 00001B3A 722A                    	jc	short _$P_Drv_Err	;AN000;
 25272                                  
 25273 00001B3C 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 25274 00001B41 740D                    	je	short _$P_DrvF00	;AN000;
 25275                                  
 25276                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 25277                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 25278                                  	; 12/12/2022
 25279 00001B43 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 25280                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25281                                  	;test	word [es:bx],_$P_Ig_Colon
 25282 00001B47 741D                    	jz	short _$P_Drv_Err	;AN000;
 25283                                  
 25284 00001B49 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 25285 00001B4E 7516                    	jne	short _$P_Drv_Err	;AN000;
 25286                                  
 25287                                  _$P_DrvF00:				;AN000;
 25288 00001B50 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 25289 00001B52 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 25290 00001B54 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 25291                                  
 25292 00001B56 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 25293 00001B58 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 25294                                  
 25295 00001B5A 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 25296 00001B5C 88C2                    	mov	dl,al			;AN000; set
 25297                                  	;mov	ah,_$P_No_Tag		;AN000; result
 25298                                  	;mov	al,_$P_Drive		;AN000; buffer
 25299                                  	; 08/07/2023
 25300 00001B5E B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 25301                                  					      ; set result buffer
 25302 00001B61 E869FB                  	call	_$P_Fill_Result		;AN000; to drive
 25303 00001B64 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 25304                                  
 25305                                  _$P_Drv_Err:				;AN000;
 25306 00001B66 2EC706[1714]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 25307                                  _$P_Drv_Exit:				;AN000;
 25308 00001B6D 5A                      	pop	dx			;AN000;
 25309 00001B6E 58                      	pop	ax			;AN000;
 25310 00001B6F C3                      	retn				;AN000;
 25311                                  
 25312                                  ;ENDIF					;AN000;(of DrvSW)
 25313                                  
 25314                                  ;***********************************************************************
 25315                                  ; _$P_Skip_Delim;
 25316                                  ;
 25317                                  ; Function: Skip delimiters specified in the PARMS list, white space
 25318                                  ;	    and comma.
 25319                                  ;
 25320                                  ; Input:    DS:SI -> Command String
 25321                                  ;	    ES:DI -> Parameter List
 25322                                  ;
 25323                                  ; Output:   CY = 1 if the end of line encounterd
 25324                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 25325                                  ;	    AL = Last examineed character
 25326                                  ;
 25327                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 25328                                  ;
 25329                                  ; Vars:     _$P_Flags(R)
 25330                                  ;***********************************************************************
 25331                                  
 25332                                  _$P_Skip_Delim:
 25333                                  _$P_Skip_Delim_Loop:			;AN000;
 25334 00001B70 AC                      	lodsb				;AN000;
 25335 00001B71 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 25336 00001B74 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 25337                                  
 25338 00001B76 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 25339 00001B79 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 25340                                  
 25341 00001B7B 2EF606[2314]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 25342 00001B81 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 25343                                  
 25344 00001B83 2EF606[2314]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 25345                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 25346                                  	; 14/08/2023
 25347                                  	; cf=0
 25348 00001B89 7505                    	jnz	short _$P_Skip_Delim_Exit
 25349 00001B8B C3                      	retn
 25350                                  
 25351                                  	;dec	si			;AN000; backup si for next call (tm08)
 25352                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 25353                                  	; 12/12/2022
 25354                                  	; cf=0
 25355                                  	; 14/08/2023
 25356                                  	;jmp	short _$P_Skip_Delim_Exit
 25357                                  
 25358                                  _$P_Skip_Delim_CY:			;AN000;
 25359 00001B8C F9                      	stc				;AN000; indicate EOL
 25360 00001B8D EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 25361                                  
 25362                                  _$P_Skip_Delim_NCY:			;AN000;
 25363 00001B8F F8                      	clc				;AN000; indicate non delim
 25364                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 25365 00001B90 4E                      	dec	si			;AN000;  backup index pointer
 25366                                  	; 14/08/2023
 25367                                  	; 12/12/2022
 25368                                  ;_$P_Exit_At_Extra:	 ; cf=0
 25369 00001B91 C3                      	retn				;AN000;
 25370                                  
 25371                                  	; 12/12/2022
 25372                                  ;_$P_Exit_At_Extra:			;AN000;
 25373                                  	;clc				;AN000; indicate extra delim
 25374                                  	;retn				;AN000;
 25375                                  
 25376                                  ;***********************************************************************
 25377                                  ; _$P_Chk_EOL;
 25378                                  ;
 25379                                  ; Function: Check if AL is one of End of Line characters.
 25380                                  ;
 25381                                  ; Input:    AL = character code
 25382                                  ;	    ES:DI -> Parameter List
 25383                                  ;
 25384                                  ; Output:   ZF = 1 if one of End of Line characters
 25385                                  ;**********************************************************************
 25386                                  
 25387                                  _$P_Chk_EOL:
 25388 00001B92 53                      	push	bx			;AN000;
 25389 00001B93 51                      	push	cx			;AN000;
 25390 00001B94 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 25391 00001B96 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25392                                  
 25393 00001B98 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 25394 00001B9A 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25395                                  
 25396                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 25397 00001B9C 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 25398 00001B9E 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25399                                  ;ENDIF					;AN028;
 25400                                  
 25401 00001BA0 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 25402                                  					;AN000; EOL character specified ?
 25403 00001BA5 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 25404                                  
 25405 00001BA7 31DB                    	xor	bx,bx			;AN000;
 25406 00001BA9 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 25407                                  					;AN000; get length of delimiter list
 25408 00001BAD 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 25409                                  	; 14/08/2023
 25410 00001BB0 31C9                    	xor	cx,cx ; *
 25411 00001BB2 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 25412 00001BB6 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 25413                                  	; 14/08/2023
 25414                                  	;;xor	cx,cx			;AN000; Get number of extra character
 25415                                  	;xor	ch,ch ; *
 25416 00001BB8 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 25417                                  _$P_Chk_EOL_Loop:			;AN000;
 25418 00001BBB 43                      	inc	bx			;AN000;
 25419 00001BBC 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 25420 00001BBF 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25421 00001BC1 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 25422                                  	; 14/08/2023
 25423                                  	; cx=0
 25424                                  _$P_Chk_EOL_NZ:				;AN000;
 25425                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 25426                                  	; 14/08/2023
 25427 00001BC3 41                      	inc	cx  ; zf=0 (cx=1) ; *
 25428                                  _$P_Chk_EOL_Exit:			;AN000;
 25429 00001BC4 59                      	pop	cx			;AN000;
 25430 00001BC5 5B                      	pop	bx			;AN000;
 25431 00001BC6 C3                      	retn
 25432                                  
 25433                                  ;***********************************************************************
 25434                                  ; _$P_Chk_Delim;
 25435                                  ;
 25436                                  ; Function: Check if AL is one of delimiter characters.
 25437                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 25438                                  ;	    blanks.
 25439                                  ;
 25440                                  ; Input:    AL = character code
 25441                                  ;	    DS:SI -> Next Character
 25442                                  ;	    ES:DI -> Parameter List
 25443                                  ;
 25444                                  ; Output:   ZF = 1 if one of delimiter characters
 25445                                  ;	    SI points to the next character
 25446                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 25447                                  ;***********************************************************************
 25448                                  
 25449                                  _$P_Chk_Delim:
 25450 00001BC7 53                      	push	bx			;AN000;
 25451 00001BC8 51                      	push	cx			;AN000;
 25452 00001BC9 2EC606[1D14]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 25453                                  					;AC034; Assume terminated by space
 25454                                  	;and	byte [cs:_$P_Flags20,0DFh
 25455 00001BCF 2E8026[2314]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 25456 00001BD5 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 25457 00001BD7 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25458                                  
 25459 00001BD9 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 25460 00001BDB 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25461                                  
 25462 00001BDD 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 25463 00001BDF 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25464                                  
 25465                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 25466                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 25467                                  ;        Erdogan Tan - 14/08/2023
 25468                                  ;_$P_Chk_Delim00:
 25469                                  %if 0
 25470                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25471                                  _$P_Chk_Delim00: 			;AN000;
 25472                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 25473                                  	jne	short _$P_Chk_Delim01	;AN000;
 25474                                  
 25475                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 25476                                  	jne	short _$P_Chk_Delim01	;AN000;
 25477                                  
 25478                                  	mov	al,_$P_Space		;AN000;
 25479                                  	inc	si			;AN000; make si point to next character
 25480                                  	cmp	al,al			;AN000; Set ZF
 25481                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25482                                  %endif
 25483                                  
 25484                                  _$P_Chk_Delim01: 			;AN000;
 25485 00001BE1 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 25486                                  					;AN000; delimiter character specified ?
 25487 00001BE6 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 25488                                  
 25489                                  	;xor	cx,cx			;AN000;
 25490 00001BE8 30ED                    	xor	ch,ch
 25491                                  	;mov	cl,[es:di+3]
 25492 00001BEA 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 25493                                  					;AN000; get length of delimiter list
 25494                                  	;or	cx,cx			;AN000; No extra Delim character ?
 25495                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 25496                                  	; 14/08/2023
 25497 00001BEE E30B                    	jcxz	_$P_Chk_Delim_NZ
 25498                                  
 25499 00001BF0 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 25500                                  _$P_Chk_Delim_Loop:			;AN000;
 25501 00001BF3 43                      	inc	bx			;AN000;
 25502 00001BF4 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 25503 00001BF7 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25504                                  
 25505 00001BF9 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 25506                                  
 25507                                  _$P_Chk_Delim_NZ:			;AN000;
 25508                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 25509                                  	; 14/08/2023
 25510                                  	; cx=0 here
 25511 00001BFB 41                      	inc	cx ; cx=1, zf=0
 25512                                  _$P_Chk_Delim_Exit:			;AN000;
 25513                                  _$P_ChkDfin:				;AN000;
 25514 00001BFC 59                      	pop	cx			;AN000;
 25515 00001BFD 5B                      	pop	bx			;AN000;
 25516 00001BFE C3                      	retn				;AN000;
 25517                                  
 25518                                  _$P_Chk_Delim_Exit0:			;AN000;
 25519 00001BFF 2EA2[1D14]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 25520 00001C03 2EF606[2314]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 25521 00001C09 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 25522                                  
 25523 00001C0B 2E800E[2314]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 25524                                  					;AC034; flag terminated extra delimiter or comma
 25525                                  _$P_No_Set_Extra:			;AN027;
 25526 00001C11 38C0                    	cmp	al,al			;AN000; set ZF
 25527 00001C13 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25528                                  
 25529                                  
 25530                                  ;***********************************************************************
 25531                                  ; _$P_Chk_Switch;
 25532                                  ;
 25533                                  ; Function: Check if AL is the switch character not in first position of
 25534                                  ;	    _$P_STRING_BUF
 25535                                  ;
 25536                                  ; Input:    AL = character code
 25537                                  ;	    BX = current pointer within _$P_String_Buf
 25538                                  ;	    SI =>next char on command line (following the one in AL)
 25539                                  ;
 25540                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 25541                                  ;		 position, and has no chance of being part of a date string,
 25542                                  ;		 i.e. should be treated as a delimiter.
 25543                                  
 25544                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 25545                                  ;		 position, or is a slash but may be part of a date string, i.e.
 25546                                  ;		 should not be treated as a delimiter.
 25547                                  ;
 25548                                  ; Vars:  _$P_Terminator(W)
 25549                                  
 25550                                  ; Use:	 _$P_0099
 25551                                  ;***********************************************************************
 25552                                  
 25553                                  _$P_Chk_Switch:
 25554                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 25555                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 25556                                  	; 14/08/2023
 25557 00001C15 BD[2C14]                	mov	bp,_$P_STRING_BUF
 25558                                  
 25559                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 25560 00001C18 39EB                    	cmp	bx,bp			;AN000;
 25561 00001C1A 7406                    	je	short _$P_STRUC_L2	;AN000;
 25562                                  
 25563                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 25564 00001C1C 3C2F                    	cmp	al,_$P_Switch		;AN000;
 25565 00001C1E 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 25566                                  
 25567 00001C20 F9                      	stc				;AN020;not in first position and is slash
 25568                                  	;jmp     short _$P_STRUC_L1	;AN000;
 25569                                  	; 12/12/2022
 25570 00001C21 C3                      	retn
 25571                                  
 25572                                  ; 12/12/2022
 25573                                  ;_$P_STRUC_L5:				;AN000;
 25574                                  ;	CLC				;AN020;not a slash
 25575                                  ;;	    .ENDIF			;AN020;
 25576                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 25577                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 25578                                  
 25579                                  _$P_STRUC_L2:				;AN000;
 25580                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 25581 00001C22 3C2F                    	cmp     al,_$P_Switch		;AN000;
 25582 00001C24 7506                    	jne	short _$P_STRUC_L12	;AN000;
 25583                                  
 25584 00001C26 2E800E[2314]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 25585                                  ;	    .ENDIF			;AN020;
 25586                                  
 25587                                  	; 12/12/2022
 25588                                  	; cf=0
 25589                                  	;retn
 25590                                  
 25591                                  _$P_STRUC_L5:
 25592                                  	; 12/12/2022
 25593                                  _$P_STRUC_L12:				;AN000;
 25594 00001C2C F8                      	clc				;AN020;CF=0 indicating first char
 25595                                  ;	.ENDIF				;AN020;
 25596                                  _$P_STRUC_L1:				;AN000;
 25597 00001C2D C3                      	retn				;AN000;
 25598                                  
 25599                                  ;**************************************************************************
 25600                                  ; _$P_Chk_DBCS:
 25601                                  ;
 25602                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 25603                                  ;
 25604                                  ;  Input:
 25605                                  ;	  AL	= Code to be examineed
 25606                                  ;
 25607                                  ;  Output:
 25608                                  ;	  If CF is on then a lead byte of DBCS
 25609                                  ;
 25610                                  ; Use: INT 21h w/AH=63
 25611                                  ;
 25612                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 25613                                  ;***************************************************************************
 25614                                  
 25615                                  _$P_Chk_DBCS:
 25616 00001C2E 1E                      	push	ds			;AN000;
 25617 00001C2F 56                      	push	si			;AN000;
 25618 00001C30 53                      	push	bx			;AN000; (tm11)
 25619                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 25620                                  	;jne	short _$P_DBCS00	;AN000;
 25621                                  	; 14/08/2023
 25622 00001C31 2E8B36[2014]            	mov	si,[cs:_$P_DBCSEV_SEG]
 25623 00001C36 21F6                    	and	si,si ; 0 ?
 25624 00001C38 7525                    	jnz	short _$P_DBCS00 ; already set
 25625 00001C3A 50                      	push	ax			;AN000;
 25626 00001C3B 1E                      	push	ds			;AN000; (tm11)
 25627 00001C3C 51                      	push	cx			;AN000;
 25628 00001C3D 52                      	push	dx			;AN000;
 25629 00001C3E 57                      	push	di			;AN000;
 25630 00001C3F 55                      	push	bp			;AN000;
 25631 00001C40 06                      	push	es			;AN000;
 25632                                  	; si = 0 ; 14/08/2023
 25633                                  	;xor	si,si			;AN000;
 25634 00001C41 8EDE                    	mov	ds,si ; 0		;AN000;
 25635 00001C43 B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 25636 00001C46 CD21                    	int	21h			;AN000;
 25637                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 25638 00001C48 8CDB                    	mov	bx,ds			;AN000; (tm11)
 25639 00001C4A 09DB                    	or	bx,bx			;AN000; (tm11)
 25640 00001C4C 07                      	pop	es			;AN000;
 25641 00001C4D 5D                      	pop	bp			;AN000;
 25642 00001C4E 5F                      	pop	di			;AN000;
 25643 00001C4F 5A                      	pop	dx			;AN000;
 25644 00001C50 59                      	pop	cx			;AN000;
 25645 00001C51 1F                      	pop	ds			;AN000; (tm11)
 25646 00001C52 58                      	pop	ax			;AN000;
 25647 00001C53 7424                    	jz	short _$P_NON_DBCS	;AN000;
 25648                                  _$P_DBCS02:				;AN000;
 25649 00001C55 2E8936[1E14]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 25650 00001C5A 2E891E[2014]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 25651                                  _$P_DBCS00:				;AN000;
 25652                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 25653                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 25654                                  	; 14/08/2023
 25655 00001C5F 2EC536[1E14]            	lds	si,[cs:_$P_DBCSEV_OFF]
 25656                                  _$P_DBCS_LOOP:				;AN000;
 25657 00001C64 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 25658 00001C67 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 25659 00001C69 3A04                    	cmp	al,[si] 		;AN000;
 25660 00001C6B 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 25661 00001C6D 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 25662 00001C70 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 25663 00001C72 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 25664 00001C73 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 25665                                  _$P_DBCS01:				;AN000;
 25666 00001C75 46                      	inc	si			;AC035; add '2' to
 25667 00001C76 46                      	inc	si			;AC035;  SI reg
 25668                                  					;AN000; get next vector
 25669 00001C77 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 25670                                  _$P_NON_DBCS:				;AN000;
 25671                                  	; 12/12/2022
 25672                                  	; cf=0
 25673                                  	;clc				;AN000; indicate SBCS
 25674                                  _$P_DBCS_EXIT:				;AN000;
 25675 00001C79 5B                      	pop	bx			;AN000; (tm11)
 25676 00001C7A 5E                      	pop	si			;AN000;
 25677 00001C7B 1F                      	pop	ds			;AN000;
 25678 00001C7C C3                      	retn				;AN000;
 25679                                  
 25680                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 25681                                  ; ======================================================================
 25682                                  ; 27/03/2019 - Retro DOS v4.0
 25683                                  
 25684                                  ;control block definitions for parser.
 25685                                  ;-----------------------------------------------------------------------
 25686                                  ; buffer = [n | n,m] {/e}
 25687                                  
 25688                                  ; 30/03/2019
 25689                                  
 25690                                  struc p_parms
 25691 00000000 ????                    	resw	1	; dw ?
 25692 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 25693 00000003 ??                      	resb	1	; db 1	; length is 1
 25694 00000004 ??                      	resb 	1	; db ';' ; delimiter
 25695                                  .size:
 25696                                  endstruc
 25697                                  
 25698                                  struc p_pos
 25699 00000000 ????                    	resw	1	; dw ?	; numeric value??
 25700 00000002 ????                    	resw	1	; dw ?	; function
 25701 00000004 ????                    	resw	1	; dw ?	; result value buffer
 25702                                  
 25703                                  ; note: by defining result_val before this structure, we could remove
 25704                                  ;  the "result_val" from every structure invocation
 25705                                  
 25706 00000006 ????                    	resw	1	; dw ?	; value list
 25707 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 25708                                  .size:
 25709                                  endstruc
 25710                                  
 25711                                  struc	p_range
 25712 00000000 ??                      	resb	1	; db 1	; range definition
 25713 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 25714 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 25715 00000003 ????????                	resd	1	; dd ?	; numeric min
 25716 00000007 ????????                	resd	1	; dd ?	; numeric max
 25717                                  .size:
 25718                                  endstruc
 25719                                  
 25720                                  ;-----------------------------------------------------------------------
 25721                                  
 25722                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25723                                  	; (SYSINIT:1F48h)
 25724                                  
 25725                                  ; buffer = [n | n,m] {/e}
 25726                                  
 25727                                  ;buf_parms p_parms <buf_parmsx>
 25728                                  buf_parms: 
 25729 00001C7D [821C]                  	dw	buf_parmsx
 25730 00001C7F 01                      	db	1	; an extra delimiter list
 25731 00001C80 01                      	db	1	; length is 1
 25732 00001C81 3B                      	db	';'	; delimiter
 25733                                  
 25734                                  buf_parmsx:
 25735 00001C82 0102[8C1C][A01C]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 25736 00001C88 01                      	db	1			; one switch
 25737 00001C89 [B41C]                  	dw	sw_x_ctrl
 25738 00001C8B 00                      	db	0			; no keywords
 25739                                  
 25740                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 25741                                  buf_pos1:
 25742 00001C8C 0080                    	dw	8000h	; numeric value??
 25743 00001C8E 0000                    	dw	0	; function
 25744 00001C90 [C61C]                  	dw	result_val ; result value buffer	
 25745 00001C92 [951C]                  	dw	buf_range_1 ; value list
 25746 00001C94 00                      	db	0  	; no switches/keywords
 25747                                  
 25748                                  ;buf_range_1 p_range <,,,1,99>		; M050
 25749                                  buf_range_1:
 25750 00001C95 01                      	db	1	; range definition
 25751 00001C96 01                      	db	1	; 1 definition of range
 25752 00001C97 01                      	db	1	; item tag for this range
 25753 00001C98 01000000                	dd	1	; numeric min
 25754 00001C9C 63000000                	dd	99	; numeric max
 25755                                  
 25756                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 25757                                  buf_pos2:
 25758 00001CA0 0180                    	dw	8001h
 25759 00001CA2 0000                    	dw	0
 25760 00001CA4 [C61C]                  	dw	result_val	
 25761 00001CA6 [A91C]                  	dw	buf_range_2
 25762 00001CA8 00                      	db	0
 25763                                  
 25764                                  ;buf_range_2 p_range <,,,0,8>
 25765                                  buf_range_2:
 25766 00001CA9 01                      	db	1
 25767 00001CAA 01                      	db	1
 25768 00001CAB 01                      	db	1
 25769 00001CAC 00000000                	dd	0
 25770 00001CB0 08000000                	dd	8
 25771                                  
 25772                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 25773                                  sw_x_ctrl:
 25774 00001CB4 0000                    	dw	0
 25775 00001CB6 0000                    	dw	0
 25776 00001CB8 [C61C]                  	dw	result_val	
 25777 00001CBA [C51C]                  	dw	noval
 25778 00001CBC 01                      	db	1	; 1 switch
 25779                                  	
 25780                                  switch_x:
 25781 00001CBD 2F5800                  	db	'/X',0		; M016
 25782                                  
 25783                                  p_buffers:
 25784 00001CC0 0000                    	dw	0	; local variables
 25785                                  p_h_buffers:
 25786 00001CC2 0000                    	dw	0
 25787                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25788                                  p_buffer_slash_x:
 25789 00001CC4 00                      	db	0 ; 31/03/2019
 25790                                  
 25791                                  ;-- common definitions -------------------------------------------------
 25792                                  
 25793 00001CC5 00                      noval:	db	0
 25794                                  
 25795                                  result_val: 	;label	byte
 25796 00001CC6 00                      	db	0		; type returned
 25797                                  result_val_itag:
 25798 00001CC7 00                      	db	0		; item tag returned
 25799                                  result_val_swoff:
 25800 00001CC8 0000                    	dw	0		; es:offset of the switch defined
 25801                                  rv_byte:	;label	byte
 25802 00001CCA 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 25803                                  
 25804                                  ;-----------------------------------------------------------------------
 25805                                  
 25806                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25807                                  	; (SYSINIT:1F99h)
 25808                                  
 25809                                  ; break = [ on | off ]
 25810                                  
 25811                                  ;brk_parms p_parms  <brk_parmsx>
 25812                                  brk_parms:
 25813 00001CCE [D31C]                  	dw	brk_parmsx
 25814 00001CD0 01                      	db	1	; an extra delimiter list
 25815 00001CD1 01                      	db	1	; length is 1
 25816 00001CD2 3B                      	db	';'	; delimiter
 25817                                  
 25818                                  brk_parmsx:
 25819 00001CD3 0101[D91C]              	dw	101h,brk_pos	; min,max = 1 positional
 25820 00001CD7 00                      	db	0		; no switches
 25821 00001CD8 00                      	db	0		; no keywords
 25822                                  
 25823                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25824                                  brk_pos:
 25825 00001CD9 0020                    	dw	2000h
 25826 00001CDB 0000                    	dw	0
 25827 00001CDD [C61C]                  	dw	result_val	
 25828 00001CDF [E21C]                  	dw	on_off_string
 25829 00001CE1 00                      	db	0
 25830                                  
 25831                                  on_off_string:	;label	byte
 25832 00001CE2 03                      	db	3		; signals that there is a string choice
 25833 00001CE3 00                      	db	0		; no range definition
 25834 00001CE4 00                      	db	0		; no numeric values choice
 25835 00001CE5 02                      	db	2		; 2 strings for choice
 25836 00001CE6 01                      	db	1		; the 1st string tag
 25837 00001CE7 [EC1C]                  	dw	on_string
 25838 00001CE9 02                      	db	2		; the 2nd string tag
 25839 00001CEA [EF1C]                  	dw	off_string
 25840                                  
 25841                                  on_string:
 25842 00001CEC 4F4E00                  	db	"ON",0
 25843                                  off_string:
 25844 00001CEF 4F464600                	db	"OFF",0
 25845                                  
 25846                                  p_ctrl_break:
 25847 00001CF3 00                      	db	0	; local variable
 25848                                  
 25849                                  ;-----------------------------------------------------------------------
 25850                                  
 25851                                  	; 27/10/2022
 25852                                  
 25853                                  ; country = n {m {path}}
 25854                                  ; or
 25855                                  ; country = n,,path
 25856                                  
 25857                                  ;cntry_parms p_parms <cntry_parmsx>
 25858                                  cntry_parms:
 25859 00001CF4 [F91C]                  	dw	cntry_parmsx
 25860 00001CF6 01                      	db	1
 25861 00001CF7 01                      	db	1
 25862 00001CF8 3B                      	db	';'
 25863                                  	
 25864                                  cntry_parmsx:
 25865 00001CF9 0103[031D][171D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 25865 00001CFF [201D]             
 25866 00001D01 00                      	db	0		; no switches
 25867 00001D02 00                      	db	0		; no keywords
 25868                                  
 25869                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 25870                                  cntry_pos1:
 25871 00001D03 0080                    	dw	8000h
 25872 00001D05 0000                    	dw	0
 25873 00001D07 [C61C]                  	dw	result_val	
 25874 00001D09 [0C1D]                  	dw	cc_range
 25875 00001D0B 00                      	db	0
 25876                                  
 25877                                  ;cc_range p_range <,,,1,999>
 25878                                  cc_range:
 25879 00001D0C 01                      	db	1
 25880 00001D0D 01                      	db	1
 25881 00001D0E 01                      	db	1
 25882 00001D0F 01000000                	dd	1
 25883 00001D13 E7030000                	dd	999
 25884                                  
 25885                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25886                                  cntry_pos2:
 25887 00001D17 0180                    	dw	8001h
 25888 00001D19 0000                    	dw	0
 25889 00001D1B [C61C]                  	dw	result_val	
 25890 00001D1D [0C1D]                  	dw	cc_range
 25891 00001D1F 00                      	db	0
 25892                                  
 25893                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25894                                  cntry_pos3:
 25895 00001D20 0102                    	dw	201h
 25896 00001D22 0000                    	dw	0
 25897 00001D24 [C61C]                  	dw	result_val	
 25898 00001D26 [C51C]                  	dw	noval
 25899 00001D28 00                      	db	0	
 25900                                  
 25901                                  p_cntry_code:
 25902 00001D29 0000                    	dw	0	; local variable
 25903                                  p_code_page:
 25904 00001D2B 0000                    	dw	0	; local variable
 25905                                  
 25906                                  ;-----------------------------------------------------------------------
 25907                                  
 25908                                  	; 27/10/2022
 25909                                  
 25910                                  ; files = n
 25911                                  
 25912                                  ;files_parms p_parms <files_parmsx>
 25913                                  files_parms:
 25914 00001D2D [321D]                  	dw	files_parmsx
 25915 00001D2F 01                      	db	1
 25916 00001D30 01                      	db	1
 25917 00001D31 3B                      	db	';'
 25918                                  
 25919                                  files_parmsx:
 25920 00001D32 0101[381D]              	dw	101h,files_pos	; min,max 1 positional
 25921 00001D36 00                      	db	0		; no switches
 25922 00001D37 00                      	db	0		; no keywords
 25923                                  
 25924                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 25925                                  files_pos:
 25926 00001D38 0080                    	dw	8000h
 25927 00001D3A 0000                    	dw	0
 25928 00001D3C [C61C]                  	dw	result_val	
 25929 00001D3E [411D]                  	dw	files_range
 25930 00001D40 00                      	db	0
 25931                                  
 25932                                  ;files_range p_range <,,,8,255>
 25933                                  files_range:
 25934 00001D41 01                      	db	1
 25935 00001D42 01                      	db	1
 25936 00001D43 01                      	db	1
 25937 00001D44 08000000                	dd	8
 25938 00001D48 FF000000                	dd	255
 25939                                  
 25940                                  p_files:
 25941 00001D4C 00                      	db	0		; local variable
 25942                                  
 25943                                  ;-----------------------------------------------------------------------
 25944                                  
 25945                                  	; 27/10/2022
 25946                                  
 25947                                  ; fcbs = n,m
 25948                                  
 25949                                  ;fcbs_parms p_parms <fcbs_parmsx>
 25950                                  fcbs_parms:
 25951 00001D4D [521D]                  	dw	fcbs_parmsx
 25952 00001D4F 01                      	db	1
 25953 00001D50 01                      	db	1
 25954 00001D51 3B                      	db	';'
 25955                                  
 25956                                  fcbs_parmsx:
 25957 00001D52 0102[5A1D][6E1D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 25958 00001D58 00                      	db	0		; no switches
 25959 00001D59 00                      	db	0		; no keywords
 25960                                  
 25961                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25962                                  fcbs_pos_1:
 25963 00001D5A 0080                    	dw	8000h
 25964 00001D5C 0000                    	dw	0
 25965 00001D5E [C61C]                  	dw	result_val	
 25966 00001D60 [631D]                  	dw	fcbs_range
 25967 00001D62 00                      	db	0
 25968                                  
 25969                                  ;fcbs_range p_range <,,,1,255>
 25970                                  fcbs_range:
 25971 00001D63 01                      	db	1
 25972 00001D64 01                      	db	1
 25973 00001D65 01                      	db	1
 25974 00001D66 01000000                	dd	1
 25975 00001D6A FF000000                	dd	255
 25976                                  
 25977                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 25978                                  fcbs_pos_2:
 25979 00001D6E 0080                    	dw	8000h
 25980 00001D70 0000                    	dw	0
 25981 00001D72 [C61C]                  	dw	result_val	
 25982 00001D74 [771D]                  	dw	fcbs_keep_range
 25983 00001D76 00                      	db	0
 25984                                  
 25985                                  ;fcbs_keep_range p_range <,,,0,255>
 25986                                  fcbs_keep_range:
 25987 00001D77 01                      	db	1
 25988 00001D78 01                      	db	1
 25989 00001D79 01                      	db	1
 25990 00001D7A 00000000                	dd	0
 25991 00001D7E FF000000                	dd	255
 25992                                  
 25993 00001D82 00                      p_fcbs:	db	0		; local variable
 25994 00001D83 00                      p_keep:	db	0		; local variable
 25995                                  
 25996                                  ;-----------------------------------------------------------------------
 25997                                  
 25998                                  	; 27/10/2022
 25999                                  
 26000                                  ; lastdrive = x
 26001                                  
 26002                                  ;ldrv_parms p_parms <ldrv_parmsx>
 26003                                  ldrv_parms:
 26004 00001D84 [891D]                  	dw	ldrv_parmsx
 26005 00001D86 01                      	db	1
 26006 00001D87 01                      	db	1
 26007 00001D88 3B                      	db	';'
 26008                                  
 26009                                  ldrv_parmsx:
 26010 00001D89 0101[8F1D]              	dw	101h,ldrv_pos	; min,max = 1 positional
 26011 00001D8D 00                      	db	0		; no switches
 26012 00001D8E 00                      	db	0		; no keywords
 26013                                  
 26014                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 26015                                  ldrv_pos:				    ; remove colon at end
 26016 00001D8F 1001                    	dw	110h
 26017 00001D91 1000                    	dw	10h
 26018 00001D93 [C61C]                  	dw	result_val	
 26019 00001D95 [C51C]                  	dw	noval
 26020 00001D97 00                      	db	0
 26021                                  	
 26022 00001D98 00                      p_ldrv:	db	0		; local variable
 26023                                  
 26024                                  ;-----------------------------------------------------------------------
 26025                                  
 26026                                  	; 27/10/2022
 26027                                  
 26028                                  ; stacks = n,m
 26029                                  
 26030                                  ;stks_parms p_parms <stks_parmsx>
 26031                                  stks_parms:
 26032 00001D99 [9E1D]                  	dw	stks_parmsx
 26033 00001D9B 01                      	db	1
 26034 00001D9C 01                      	db	1
 26035 00001D9D 3B                      	db	';'
 26036                                  
 26037                                  stks_parmsx:
 26038 00001D9E 0202[A61D][BA1D]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 26039 00001DA4 00                      	db	0		; no switches
 26040 00001DA5 00                      	db	0		; no keywords
 26041                                  
 26042                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 26043                                  stks_pos_1:
 26044 00001DA6 0080                    	dw	8000h
 26045 00001DA8 0000                    	dw	0
 26046 00001DAA [C61C]                  	dw	result_val	
 26047 00001DAC [AF1D]                  	dw	stks_range
 26048 00001DAE 00                      	db	0
 26049                                  
 26050                                  ;stks_range p_range <,,,0,64>
 26051                                  stks_range:
 26052 00001DAF 01                      	db	1
 26053 00001DB0 01                      	db	1
 26054 00001DB1 01                      	db	1
 26055 00001DB2 00000000                	dd	0
 26056 00001DB6 40000000                	dd	64
 26057                                  
 26058                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 26059                                  stks_pos_2:
 26060 00001DBA 0080                    	dw	8000h
 26061 00001DBC 0000                    	dw	0
 26062 00001DBE [C61C]                  	dw	result_val	
 26063 00001DC0 [C31D]                  	dw	stk_size_range
 26064 00001DC2 00                      	db	0
 26065                                  
 26066                                  ;stk_size_range p_range <,,,0,512>
 26067                                  stk_size_range:
 26068 00001DC3 01                      	db	1
 26069 00001DC4 01                      	db	1
 26070 00001DC5 01                      	db	1
 26071 00001DC6 00000000                	dd	0
 26072 00001DCA 00020000                	dd	512	
 26073                                  
 26074                                  p_stack_count:
 26075 00001DCE 0000                    	dw	0	; local variable
 26076                                  p_stack_size:
 26077 00001DD0 0000                    	dw	0	; local variable
 26078                                  
 26079                                  ;-----------------------------------------------------------------------
 26080                                  
 26081                                  	; 27/10/2022
 26082                                  
 26083                                  ; multitrack = [ on | off ]
 26084                                  
 26085                                  ;mtrk_parms p_parms <mtrk_parmsx>
 26086                                  mtrk_parms:
 26087 00001DD2 [D71D]                  	dw	mtrk_parmsx
 26088 00001DD4 01                      	db	1
 26089 00001DD5 01                      	db	1
 26090 00001DD6 3B                      	db	';'
 26091                                  
 26092                                  mtrk_parmsx:
 26093 00001DD7 0101[DD1D]              	dw	101h,mtrk_pos	; min,max = 1 positional
 26094 00001DDB 00                      	db	0		; no switches
 26095 00001DDC 00                      	db	0		; no keywords
 26096                                  
 26097                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 26098                                  mtrk_pos:
 26099 00001DDD 0020                    	dw	2000h
 26100 00001DDF 0000                    	dw	0
 26101 00001DE1 [C61C]                  	dw	result_val	
 26102 00001DE3 [E21C]                  	dw	on_off_string
 26103 00001DE5 00                      	db	0
 26104                                  
 26105 00001DE6 00                      p_mtrk:	db	0		; local variable
 26106                                  
 26107                                  ;-----------------------------------------------------------------------
 26108                                  
 26109                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26110                                  	; (SYSINIT:20B2h)
 26111                                  
 26112                                  ; switches=/k
 26113                                  
 26114                                  ;swit_parms p_parms <swit_parmsx>
 26115                                  swit_parms:
 26116 00001DE7 [EC1D]                  	dw	swit_parmsx
 26117 00001DE9 01                      	db	1
 26118 00001DEA 01                      	db	1
 26119 00001DEB 3B                      	db	';'
 26120                                  
 26121                                  swit_parmsx:
 26122 00001DEC 0000                    	dw	0		; no positionals
 26123                                  	;db	5               ; # of switches
 26124                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26125 00001DEE 03                      	db	3
 26126 00001DEF [F61D]                  	dw	swit_k_ctrl	; /k control
 26127                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 26128                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 26129 00001DF1 [021E]                  	dw	swit_t_ctrl     ; /t control
 26130 00001DF3 [0E1E]                  	dw	swit_w_ctrl     ; /w control
 26131 00001DF5 00                      	db	0		; no keywords
 26132                                  
 26133                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 26134                                  swit_k_ctrl:
 26135 00001DF6 00000000[C61C]-         	dw	0,0,result_val,noval
 26135 00001DFC [C51C]             
 26136 00001DFE 01                      	db	1
 26137 00001DFF 2F4B00                  swit_k:	db	'/K',0
 26138                                  
 26139                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26140                                  ;
 26141                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 26142                                  ;swit_n_ctrl:
 26143                                  ;	dw	0,0,result_val,noval
 26144                                  ;	db	1
 26145                                  ;swit_n: db	'/N',0
 26146                                  ;
 26147                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 26148                                  ;swit_f_ctrl:
 26149                                  ;	dw	0,0,result_val,noval
 26150                                  ;	db	1
 26151                                  ;swit_f: db 	'/F',0
 26152                                  
 26153                                  	; 27/10/2022
 26154                                  
 26155                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 26156                                  swit_t_ctrl:
 26157 00001E02 00000000[C61C]-         	dw	0,0,result_val,noval
 26157 00001E08 [C51C]             
 26158 00001E0A 01                      	db	1
 26159 00001E0B 2F5400                  swit_t:	db	'/T',0			   ;				M059
 26160                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 26161                                  swit_w_ctrl:
 26162 00001E0E 00000000[C61C]-         	dw	0,0,result_val,noval
 26162 00001E14 [C51C]             
 26163 00001E16 01                      	db	1
 26164 00001E17 2F5700                  swit_w:	db	'/W',0			   ;				M063
 26165                                  
 26166                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 26167                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 26168                                  ;   in the above table to prevent the parsing code from complaining about them
 26169                                  
 26170 00001E1A 00                      p_swit_k:	db     0	; local variable
 26171 00001E1B 00                      p_swit_t:	db     0	; local variable			M059
 26172 00001E1C 00                      p_swit_w:	db     0	; local variable			M063
 26173                                  
 26174                                  ;-----------------------------------------------------------------------
 26175                                  
 26176                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26177                                  	; (SYSINIT:20E8h)
 26178                                  
 26179                                  ; DOS = [ high | low ]
 26180                                  
 26181                                  ;dos_parms p_parms  <dos_parmsx>
 26182                                  dos_parms:
 26183 00001E1D [221E]                  	dw	dos_parmsx
 26184 00001E1F 01                      	db	1
 26185 00001E20 01                      	db	1
 26186 00001E21 3B                      	db	';'
 26187                                  dos_parmsx:
 26188 00001E22 01                      	db	1		; min parameters
 26189 00001E23 02                      	db	2		; max parameters
 26190 00001E24 [2A1E]                  	dw	dos_pos		; 
 26191 00001E26 [2A1E]                  	dw	dos_pos		; 
 26192 00001E28 00                      	db	0		; no switches
 26193 00001E29 00                      	db	0		; no keywords
 26194                                  
 26195                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 26196                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 26197                                  dos_pos:
 26198 00001E2A 00200000[C61C]-         	dw	2000h,0,result_val,dos_strings
 26198 00001E30 [3C1E]             
 26199 00001E32 00                      	db	0
 26200 00001E33 00200000[C61C]-         	dw	2000h,0,result_val,dos_strings
 26200 00001E39 [3C1E]             
 26201 00001E3B 00                      	db	0	
 26202                                  
 26203                                  dos_strings:	;label	byte
 26204 00001E3C 03                      	db	3		; signals that there is a string choice
 26205 00001E3D 00                      	db	0		; no range definition
 26206 00001E3E 00                      	db	0		; no numeric values choice
 26207 00001E3F 04                      	db	4		; 4 strings for choice
 26208 00001E40 01                      	db	1		; the 1st string tag
 26209 00001E41 [4C1E]                  	dw	hi_string
 26210 00001E43 02                      	db	2		; the 2nd string tag
 26211 00001E44 [511E]                  	dw	lo_string
 26212 00001E46 03                      	db	3
 26213 00001E47 [551E]                  	dw	umb_string
 26214 00001E49 04                      	db	4
 26215 00001E4A [591E]                  	dw	noumb_string
 26216                                  
 26217 00001E4C 4849474800              hi_string:	db	"HIGH",0
 26218 00001E51 4C4F5700                lo_string:	db	"LOW",0
 26219 00001E55 554D4200                umb_string:	db	"UMB",0
 26220 00001E59 4E4F554D4200            noumb_string:	db	"NOUMB",0
 26221                                  
 26222 00001E5F 00                      p_dos_hi:	db	0	; local variable
 26223                                  				; BUGBUG : I dont know whether PARSER uses
 26224                                  				;          this variable or not
 26225                                  
 26226                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26227                                  
 26228                                  %if 0
 26229                                  
 26230                                  ;****************************************************************** RICHID ****
 26231                                  
 26232                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 26233                                  
 26234                                  ; 30/03/2019 - Retro DOS v4.0
 26235                                  ;------------------------------------------------------------------------------
 26236                                  
 26237                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 26238                                  ;
 26239                                  ;   Date:     May 14, 1992
 26240                                  ;
 26241                                  ;******************************************************************************
 26242                                  ;
 26243                                  ;   Modification log:
 26244                                  ;
 26245                                  ;     DATE    WHO      DESCRIPTION
 26246                                  ;   --------  -------  --------------------------------------------------------
 26247                                  ;   05/14/92  t-richj  Original
 26248                                  ;   06/21/92  t-richj  Final revisions before check-in
 26249                                  ;
 26250                                  ;******************************************************************************
 26251                                  ;
 26252                                  ; There are two primary definitions which need to be made, selectively, before
 26253                                  ; this include file should be used.  These are:
 26254                                  ;    HV_Extern - If this has been defined, variables for this module will be
 26255                                  ;                declared as external.  Otherwise, variables will be declared
 26256                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 26257                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 26258                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 26259                                  ;                (as only one module, sysconf.asm, includes this file).
 26260                                  ;    HV_LoadHigh - This should be defined when this module is going into
 26261                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 26262                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 26263                                  ;
 26264                                  ;******************************************************************************
 26265                                  
 26266                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 26267                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 26268                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 26269                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 26270                                  ; space problem (it's just such a nice round number, eh?).
 26271                                  
 26272                                  MAXUMB	equ	16
 26273                                  
 26274                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 26275                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 26276                                  
 26277                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 26278                                  SystemPSPOwner	equ	8
 26279                                  ;JapanPSPOwner	equ	9
 26280                                  
 26281                                  ; for LoadHigh and DeviceHigh:
 26282                                  ;
 26283                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 26284                                  ;	          UnHideUMBs().
 26285                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 26286                                  ;	           line.
 26287                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 26288                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 26289                                  ;	          given a command-line like "/L:3,500;4"
 26290                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 26291                                  ;	          matching its index number was specified on the command-line;
 26292                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 26293                                  ;	          will be set to 1.  All others will be set to 0.
 26294                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 26295                                  ;	          specified by the user for a UMB (in the above example, all
 26296                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 26297                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 26298                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 26299                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 26300                                  ;	           for details).
 26301                                  
 26302                                  fInHigh:  db	0
 26303                                  fUmbTiny: db	0
 26304                                  SegLoad:  dw	0
 26305                                  UmbLoad:  db	0
 26306                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 26307                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 26308                                  fm_umb:   db	0
 26309                                  fm_strat: db	0
 26310                                  fm_argc:  db	0	
 26311                                  
 26312                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 26313                                  ; UmbLoad is set to the UMB number given.
 26314                                  
 26315                                  UNSPECIFIED	equ	-1
 26316                                  
 26317                                  %endif
 26318                                  
 26319                                  ;****************************************************************** RICHID ****
 26320                                  
 26321                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 26322                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 26323                                  
 26324                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26325                                  ; (SYSINIT:212Bh)	
 26326                                  
 26327                                  		;public	DevEntry
 26328                                  
 26329 00001E60 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 26330 00001E62 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 26331 00001E64 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 26332 00001E66 00000000                DevEntry:	dd	0	; Entry point to the device driver
 26333 00001E6A 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 26334                                  ; 27/10/2022 
 26335                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 26336                                  ;
 26337 00001E6E 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 26338 00001E6F 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 26339 00001E71 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 26340 00001E73 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 26341                                  ;
 26342 00001E75 00000000                DevXMSAddr:	dd	0
 26343                                  ;
 26344 00001E79 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 26345 00001E7B 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 26346                                  ;
 26347 00001E7D 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 26348                                  				;  is being loaded into UMB
 26349 00001E7E 0000                    DevSizeOption:	dw	0	; SIZE= option
 26350                                  ;
 26351 00001E80 00                      Int12Lied:	db	0	; did we trap int 12 ?
 26352 00001E81 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 26353 00001E83 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 26354                                  ;
 26355 00001E8B 00                      FirstUMBLinked:	db	0
 26356 00001E8C 0000                    DevDOSData:	dw	0	; segment of DOS Data
 26357 00001E8E 00000000                DevCmdLine:	dd	0	; Current Command line
 26358 00001E92 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 26359                                  				; to use the file name in the command line
 26360                                  ;
 26361                                  ;	ifdef	dblspace_hooks
 26362                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 26363                                  ;	endif
 26364                                  
 26365                                  ; ===========================================================================
 26366                                  
 26367                                  ; 31/03/2019 - Retro DOS v4.0
 26368                                  
 26369                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26370                                  ; (SYSINIT:215Eh)
 26371                                  
 26372                                  ;----------------------------------------------------------------------------
 26373                                  ;
 26374                                  ; procedure : doconf
 26375                                  ;
 26376                                  ;             Config file is parsed initially with this routine. For the
 26377                                  ;             Subsequent passes 'multi_pass' entry is used .
 26378                                  ;
 26379                                  ;----------------------------------------------------------------------------
 26380                                  
 26381                                  	; 27/10/2022
 26382                                  doconf:
 26383 00001E93 0E                      	push	cs
 26384 00001E94 1F                      	pop	ds
 26385                                  
 26386 00001E95 B80037                  	mov	ax,3700h
 26387                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 26388 00001E98 CD21                    	int	21h
 26389 00001E9A 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 26390                                  
 26391                                  ; 27/10/2022
 26392                                  ;;ifdef	MULTI_CONFIG
 26393                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 26394                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 26395                                  ;;endif	;MULTI_CONFIG
 26396                                  
 26397 00001E9E BA[0A33]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 26398 00001EA1 B8003D                  	mov	ax,3D00h
 26399                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 26400 00001EA4 F9                      	stc				;in case of int 24
 26401 00001EA5 CD21                    	int	21h			;function request
 26402 00001EA7 7306                    	jnc	short noprob		; brif opened okay
 26403                                  
 26404                                  ; 27/10/2022
 26405                                  ;;ifdef	MULTI_CONFIG
 26406                                  ;      	call	kbd_read		; we still want to give the guy
 26407                                  ;					; a chance to select clean boot!
 26408                                  ;;endif					; (ie, no autoexec.bat processing)
 26409 00001EA9 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 26410 00001EAE C3                      	retn
 26411                                  noprob: 				;get file size (note < 64k!!)
 26412 00001EAF 89C3                    	mov	bx,ax  ; File handle
 26413 00001EB1 31C9                    	xor	cx,cx
 26414 00001EB3 31D2                    	xor	dx,dx
 26415                                  	;mov	ax,4202h
 26416 00001EB5 B80242                  	mov	ax,(LSEEK<<8)|2
 26417 00001EB8 CD21                    	int	21h
 26418 00001EBA A3[D203]                	mov	[count],ax
 26419                                  
 26420 00001EBD 31D2                    	xor	dx,dx
 26421                                  	;mov	ax,4200h
 26422 00001EBF B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 26423 00001EC2 CD21                    	int	21h
 26424                                  
 26425                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 26426                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26427 00001EC4 8B16[A102]              	mov	dx,[top_of_cdss] 
 26428                                  
 26429 00001EC8 A1[D203]                	mov	ax,[count]
 26430 00001ECB A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 26431 00001ECE E8D3F1                  	call	ParaRound
 26432 00001ED1 29C2                    	sub	dx,ax
 26433                                  
 26434                                  ; 27/10/2022
 26435                                  ;;ifdef	MULTI_CONFIG
 26436                                  ;;
 26437                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 26438                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 26439                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 26440                                  ;;  we (may) add a variable to the environment that does not explicity appear
 26441                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 26442                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 26443                                  ;;  of extra space, so here we account for it (the worst case of course is
 26444                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 26445                                  ;;
 26446                                  ;       dec     dx                      ;reserve 1 additional paragraph
 26447                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 26448                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 26449                                  ;;endif	;MULTI_CONFIG
 26450                                  
 26451 00001ED3 83EA11                  	sub	dx,11h			;room for header
 26452                                  	
 26453                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 26454                                  	;mov	[CONFBOT],dx
 26455                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26456 00001ED6 8916[A102]              	mov	[top_of_cdss],dx
 26457 00001EDA E8E8EC                  	call    TempCDS 
 26458                                  	; 11/12/2022
 26459                                  	; ds <> cs 
 26460 00001EDD 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 26461                                   
 26462 00001EE2 8EDA                    	mov	ds,dx
 26463 00001EE4 8EC2                    	mov	es,dx
 26464                                  
 26465 00001EE6 31D2                    	xor	dx,dx
 26466 00001EE8 2E8B0E[D203]            	mov	cx,[cs:count]
 26467 00001EED B43F                    	mov	ah,3Fh
 26468                                  	;mov	ah,READ  ; 3Fh
 26469 00001EEF F9                      	stc				;in case of int 24
 26470 00001EF0 CD21                    	int	21h			;function request
 26471 00001EF2 9C                      	pushf
 26472                                  
 26473                                  ; find the eof mark in the file. if present,then trim length.
 26474                                  
 26475 00001EF3 50                      	push	ax
 26476 00001EF4 57                      	push	di
 26477 00001EF5 51                      	push	cx
 26478 00001EF6 B01A                    	mov	al,1Ah			; eof mark
 26479 00001EF8 89D7                    	mov	di,dx			; point to buffer
 26480 00001EFA E305                    	jcxz	puteol			; no chars
 26481 00001EFC F2AE                    	repnz	scasb			; find end
 26482 00001EFE 7501                    	jnz	short puteol		; none found and count exhausted
 26483                                  
 26484                                  ; we found a 1a. back up
 26485                                  
 26486 00001F00 4F                      	dec	di			; backup past 1Ah
 26487                                  
 26488                                  ;  just for the halibut, stick in an extra eol
 26489                                  
 26490                                  puteol:
 26491 00001F01 B00D                    	mov	al,cr ; 0Dh
 26492 00001F03 AA                      	stosb
 26493 00001F04 B00A                    	mov	al,lf  ;0Ah
 26494 00001F06 AA                      	stosb
 26495 00001F07 29D7                    	sub	di,dx			; difference moved
 26496                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26497                                  	;mov	[cs:count],di		; new count
 26498                                  
 26499                                  	; 11/12/2022	
 26500                                  	; 31/03/2019 - Retro DOS v4.0
 26501 00001F09 0E                      	push	cs
 26502 00001F0A 1F                      	pop	ds
 26503                                  
 26504 00001F0B 893E[D203]              	mov	[count],di		; new count
 26505                                  
 26506 00001F0F 59                      	pop	cx
 26507 00001F10 5F                      	pop	di
 26508 00001F11 58                      	pop	ax
 26509                                  
 26510                                  	; 11/12/2022
 26511                                  	; 27/10/2022
 26512                                  	;push	cs
 26513                                  	;pop	ds
 26514                                  
 26515 00001F12 50                      	push	ax
 26516                                  	;mov	ah,CLOSE
 26517 00001F13 B43E                    	mov	ah,3Eh
 26518 00001F15 CD21                    	int	21h
 26519 00001F17 58                      	pop	ax
 26520 00001F18 9D                      	popf
 26521 00001F19 7204                    	jc	short conferr 		;if not we've got a problem
 26522 00001F1B 39C1                    	cmp	cx,ax
 26523 00001F1D 742C                    	jz	short getcom		;couldn't read the file
 26524                                  conferr:
 26525 00001F1F BA[0A33]                	mov	dx,config		;want to print config error
 26526 00001F22 E83C13                  	call	badfil
 26527                                  endconv:
 26528 00001F25 C3                      	retn
 26529                                  
 26530                                  ;----------------------------------------------------------------------------
 26531                                  ;
 26532                                  ; entry : multi_pass
 26533                                  ;
 26534                                  ;             called to execute device=,install= commands
 26535                                  ;
 26536                                  ;----------------------------------------------------------------------------
 26537                                  
 26538                                  	; 27/10/2022
 26539                                  multi_pass:
 26540 00001F26 0E                      	push	cs
 26541 00001F27 1F                      	pop	ds
 26542                                  
 26543 00001F28 803E[4903]0A            	cmp	byte [multi_pass_id],10
 26544                                  ;jae_endconv:
 26545 00001F2D 73F6                    	jae	short endconv 		; do nothing. just return.
 26546                                  
 26547                                  	;push	word [CONFBOT]
 26548                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26549 00001F2F FF36[A102]              	push	word [top_of_cdss]
 26550 00001F33 07                      	pop	es			; es -> confbot
 26551                                  
 26552 00001F34 8B36[D403]              	mov	si,[org_count]
 26553 00001F38 8936[D203]              	mov	[count],si		; set count
 26554 00001F3C 31F6                    	xor	si,si ; 0
 26555 00001F3E 8936[D603]                      mov     [chrptr],si		; reset chrptr
 26556 00001F42 8936[2B03]                      mov     [linecount],si		; reset linecount
 26557                                  
 26558 00001F46 E89C10                  	call	getchr
 26559 00001F49 EB06                    	jmp	short conflp
 26560                                  
 26561                                  getcom:
 26562 00001F4B E8800E                          call    organize                ; organize the file
 26563 00001F4E E89410                  	call	getchr
 26564                                  conflp: 
 26565 00001F51 72D2                    	jc	short endconv
 26566                                  
 26567 00001F53 FF06[2B03]                      inc     word [linecount]	; increase linecount
 26568                                  
 26569 00001F57 C606[0D14]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 26570 00001F5C C606[1014]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 26571 00001F61 3C0A                    	cmp	al,lf			; linefeed?
 26572 00001F63 7416                    	je	short blank_line	;  then ignore this line.
 26573                                  
 26574                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26575                                  %if 0
 26576                                  
 26577                                  ;ifdef	MULTI_CONFIG
 26578                                  
 26579                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 26580                                  ;   number immediately following it....
 26581                                  
 26582                                          mov     [config_cmd],al         ; save original command code
 26583                                  	;and	al,NOT CONFIG_OPTION_QUERY
 26584                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 26585                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 26586                                          je      short not_final		; no, line number is not embedded
 26587                                  
 26588                                          push    ax                      ;
 26589                                          call    getchr                  ; ignore end-of-image errors,
 26590                                          mov     ah,al                   ; because if there's an error
 26591                                          call    getchr                  ; fetching the line number that's
 26592                                          xchg    al,ah                   ; supposed to be there, the next
 26593                                          mov     [linecount],ax          ; getchr call will get the same error
 26594                                          pop     ax
 26595                                  ;
 26596                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 26597                                  ;   which to obtain its original program name, it grovels through all of
 26598                                  ;   memory to find the filename that was used to exec it; it wants to find
 26599                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 26600                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 26601                                  ;   immediately before the filename, but since we are now storing line # info
 26602                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 26603                                  ;   spot.
 26604                                  ;
 26605                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 26606                                  ;   over the line number info, since we no longer need that info anyway. This
 26607                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 26608                                  ;   retrieved.
 26609                                  ;
 26610                                          cmp	byte [multi_pass_id],2	; final pass?
 26611                                          jb	short not_final		; no
 26612                                          ;test	word [install_flag],have_install_cmd
 26613                                  	test	byte [install_flag],have_install_cmd ; 1
 26614                                          jz	short final		; no install cmds, so yes it is
 26615                                          cmp	byte [multi_pass_id],3	; final pass?
 26616                                          jb	short not_final		; no
 26617                                  final:                                  ;
 26618                                  	mov	[es:si],al		; save backward-compatible command code
 26619                                  not_final:                              ;
 26620                                  ;endif
 26621                                  
 26622                                  %endif
 26623 00001F65 88C4                    	mov	ah,al
 26624 00001F67 E87B10                  	call	getchr
 26625 00001F6A 7314                    	jnc	short tryi
 26626                                  
 26627 00001F6C 803E[4903]02            	cmp	byte [multi_pass_id],2
 26628                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 26629                                  	; 27/10/2022
 26630 00001F71 73B2                    	jnb	short endconv	
 26631 00001F73 E90107                  	jmp	badop
 26632                                  	
 26633                                  coff:	
 26634                                  	; 11/12/2022
 26635                                  	; ds = cs
 26636                                  	;push	cs
 26637                                  	;pop	ds
 26638 00001F76 E86310                  	call	newline
 26639 00001F79 EBD6                    	jmp	short conflp	; 13/05/2019
 26640                                  
 26641                                  blank_line:
 26642 00001F7B E86710                  	call	getchr
 26643 00001F7E EBD1                    	jmp	short conflp
 26644                                  
 26645                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26646                                  ; 11/12/2022
 26647                                  ; (there is not a jump or call to here from anywhere!)
 26648                                  ;coff_p:
 26649                                  	;push	cs
 26650                                  	;pop	ds
 26651                                  
 26652                                  ;to handle install= commands,we are going to use multi-pass.
 26653                                  ;the first pass handles the other commands and only set install_flag when
 26654                                  ;it finds any install command. the second pass will only handle the
 26655                                  ;install= command.
 26656                                  
 26657                                  ;------------------------------------------------------------------------------
 26658                                  ;install command
 26659                                  ;------------------------------------------------------------------------------
 26660                                  
 26661                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26662                                  	; (SYSINIT:2250h)
 26663                                  tryi:
 26664 00001F80 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 26665 00001F85 7503                    	jne	short not_init_pass
 26666 00001F87 E92301                  	jmp	multi_try_doshi
 26667                                  not_init_pass:
 26668 00001F8A 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 26669                                          ; 11/12/2022
 26670                                  	;je	short multi_pass_coff2	; now it is NOPs
 26671 00001F8F 74E5                    	je	short coff
 26672                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26673                                  	;je	short multi_pass_coff	
 26674                                  					; This pass can be made use of if
 26675                                  					; we want do some config.sys process
 26676                                  					; after device drivers are loaded
 26677                                  					; and before install= commands
 26678                                  					; are processed
 26679                                  
 26680 00001F91 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 26681 00001F96 7411                    	je	short multi_try_i
 26682 00001F98 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 26683                                  	; 11/12/2022
 26684                                  	;je	short multi_pass_coff2
 26685 00001F9B 74D9                    	je	short coff
 26686                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26687                                  	;je	short multi_pass_coff	
 26688                                  
 26689                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 26690                                  ;       but don't process them now.        
 26691                                          
 26692 00001F9D 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 26693                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 26694                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26695 00001FA0 752A                    	jne	short tryb	
 26696                                  	
 26697                                  	;or	word [install_flag],have_install_cmd ; set the flag
 26698 00001FA2 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 26699                                  multi_pass_coff2:
 26700 00001FA7 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 26701                                  
 26702                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26703                                  ;precheck_installhigh:
 26704                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 26705                                  ;       jne     short tryb		; carry on with normal processing
 26706                                  ;	;or	word [install_flag],have_install_cmd
 26707                                  ;	or	byte [install_flag],have_install_cmd ; 1
 26708                                  ;       jmp	short coff
 26709                                  
 26710                                  multi_try_i:
 26711 00001FA9 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 26712                                  	;jne	short multi_try_n	; no, check for installhigh
 26713                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26714 00001FAC 7505                    	jne	short multi_pass_filter
 26715                                  
 26716                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26717                                  ;;ifdef	MULTI_CONFIG
 26718                                  ;       call    query_user              ; query the user if config_cmd
 26719                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26720                                  ;;endif
 26721                                  
 26722 00001FAE E873F0                  	call	do_install_exec 	;install it.
 26723 00001FB1 EBC3                    	jmp	short coff		;to handle next install= command.
 26724                                  
 26725                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26726                                  %if 0
 26727                                  
 26728                                  multi_try_n:
 26729                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 26730                                          jne	short multi_pass_filter	; no. ignore this.
 26731                                  ;ifdef	MULTI_CONFIG
 26732                                          call    query_user              ; query the user if config_cmd
 26733                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26734                                  ;endif
 26735                                  
 26736                                  ;       The memory environment is in its normal DOS state, so do
 26737                                  ;       the standard calls to set the alloc strategy for loading high
 26738                                  
 26739                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 26740                                  	int	21h			;get alloc strategy
 26741                                  	mov	bx,ax
 26742                                          push    bx                      ; save for the return
 26743                                  
 26744                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 26745                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 26746                                  	int	21h			;set alloc strategy
 26747                                  
 26748                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 26749                                          int     21h                     ; get link state
 26750                                          xor     ah,ah                   ; clear top byte
 26751                                          push    ax                      ; save for return
 26752                                  
 26753                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 26754                                  	mov	bx,1
 26755                                  	int	21h			;link in UMBs
 26756                                  
 26757                                  	call	do_install_exec 	;install it.
 26758                                  
 26759                                          mov     ax,(ALLOCOPER<<8)|3
 26760                                          pop     bx                      ; recover original link state
 26761                                          int     21h
 26762                                          pop     bx                      ; recover original alloc strategy
 26763                                          mov     ax,(ALLOCOPER<<8)|1
 26764                                          int     21h
 26765                                  
 26766                                  	jmp	coff			;to handle next install= command.
 26767                                  
 26768                                  %endif
 26769                                  
 26770                                  multi_pass_filter:
 26771 00001FB3 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 26772 00001FB6 740A                    	je	short multi_pass_adjust
 26773 00001FB8 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 26774 00001FBB 7405                    	je	short multi_pass_adjust
 26775 00001FBD 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 26776 00001FC0 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 26777                                  
 26778                                  multi_pass_adjust:			; these commands need to
 26779 00001FC2 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 26780 00001FC6 FF06[D203]              	inc	word [count]		;  for newline proc.
 26781                                  
 26782                                  multi_pass_coff:
 26783                                  	; 11/12/2022
 26784 00001FCA EBAA                    	jmp	short coff		; to handle next install= commands.
 26785                                  
 26786                                  ;------------------------------------------------------------------------------
 26787                                  ; buffer command
 26788                                  ;------------------------------------------------------------------------------
 26789                                  
 26790                                  ;******************************************************************************
 26791                                  ;									      *
 26792                                  ; function: parse the parameters of buffers= command.			      *
 26793                                  ;									      *
 26794                                  ; input :								      *
 26795                                  ;	es:si -> parameters in command line.				      *
 26796                                  ; output:								      *
 26797                                  ;	buffers set							      *
 26798                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 26799                                  ;	h_buffers set if secondary buffer cache specified.		      *
 26800                                  ;									      *
 26801                                  ; subroutines to be called:						      *
 26802                                  ;	sysinit_parse							      *
 26803                                  ; logic:								      *
 26804                                  ; {									      *
 26805                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 26806                                  ;	set dx,cx to 0; 						      *
 26807                                  ;	reset buffer_slash_x;						      *
 26808                                  ;	while (end of command line)					      *
 26809                                  ;	{ sysinit_parse;						      *
 26810                                  ;	  if (no error) then						      *
 26811                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 26812                                  ;		    buffer_slash_x = 1					      *
 26813                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 26814                                  ;			  buffers = result_val._$P_picked_val;		      *
 26815                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 26816                                  ;	  else	{show error message;error exit} 			      *
 26817                                  ;	};								      *
 26818                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 26819                                  ; };									      *
 26820                                  ;									      *
 26821                                  ;******************************************************************************
 26822                                  
 26823                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26824                                  	; (SYSINIT:229Ch)
 26825                                  tryb:
 26826 00001FCC 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 26827 00001FCF 7557                    	jne	short tryc
 26828                                  
 26829                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26830                                  ;;ifdef	MULTI_CONFIG
 26831                                  ;       call    query_user              ; query the user if config_cmd
 26832                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 26833                                  ;;endif
 26834                                  
 26835                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26836                                  	; 18/12/2022
 26837 00001FD1 31C9                    	xor	cx,cx
 26838                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 26839 00001FD3 880E[C41C]              	mov	[p_buffer_slash_x],cl ; 0
 26840                                  
 26841 00001FD7 BF[7D1C]                	mov	di,buf_parms
 26842                                  	;xor	cx,cx	; 18/12/2022
 26843                                  	; 04/01/2023
 26844                                  	;mov	dx,cx
 26845                                  do7:
 26846 00001FDA E87B06                  	call	sysinit_parse
 26847 00001FDD 7303                    	jnc	short if7		; parse error,
 26848                                  	; 04/01/2023
 26849                                  	;call	badparm_p		;  and show messages and end the search loop.
 26850                                  	;;jmp	short sr7
 26851                                  	; 31/12/2022
 26852                                  ;sr7:
 26853                                  	;jmp	coff
 26854                                  	; 04/01/2023
 26855 00001FDF E9F405                  	jmp	badparm_p_coff
 26856                                  if7:
 26857 00001FE2 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26858 00001FE5 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 26859                                  	;cmp	word [result_val_swoff],switch_x
 26860 00001FE7 813E[C81C][BD1C]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 26861                                  	;jne	short if11
 26862                                  	; 31/12/2022
 26863 00001FED 74EB                    	je	short do7 ;je short en11
 26864                                  
 26865                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 26866                                  	;jmp	short en11 ; 31/12/2022
 26867                                  if11:
 26868                                  	;mov	ax,[rv_dword]
 26869 00001FEF A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26870 00001FF2 83F901                  	cmp	cx,1
 26871 00001FF5 7505                    	jne	short if13
 26872                                  
 26873 00001FF7 A3[C01C]                	mov	[p_buffers],ax
 26874                                  	;jmp	short en11
 26875                                  	; 31/12/2022
 26876 00001FFA EBDE                    	jmp	short do7
 26877                                  if13:
 26878 00001FFC A3[C21C]                	mov	[p_h_buffers],ax
 26879                                  en11:
 26880 00001FFF EBD9                    	jmp	short do7
 26881                                  en7:
 26882 00002001 833E[C01C]63            	cmp	word [p_buffers],99
 26883 00002006 760B                    	jbe	short if18
 26884                                  
 26885                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26886                                  ;	jne	short if18
 26887                                  
 26888 00002008 E87806                  	call	badparm_p
 26889 0000200B C706[C21C]0000          	mov	word [p_h_buffers],0
 26890 00002011 EB12                    	jmp	short sr7
 26891                                  if18:
 26892 00002013 A1[C01C]                	mov	ax,[p_buffers]	; we don't have any problem.
 26893 00002016 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26894                                  
 26895 00002019 A1[C21C]                	mov	ax,[p_h_buffers]
 26896 0000201C A3[9902]                	mov	[h_buffers],ax
 26897                                  
 26898                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26899                                  ;	mov	[buffer_slash_x],al
 26900                                  
 26901 0000201F A1[2B03]                	mov	ax,[linecount]
 26902 00002022 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26903                                  	; 31/12/2022
 26904                                  	;jmp	short sr7
 26905                                  	; 04/01/2023
 26906                                  sr7:
 26907 00002025 E94EFF                  	jmp	coff
 26908                                  
 26909                                  ;------------------------------------------------------------------------------
 26910                                  ; break command
 26911                                  ;------------------------------------------------------------------------------
 26912                                  
 26913                                  ;****************************************************************************
 26914                                  ;									    *
 26915                                  ; function: parse the parameters of break = command.			    *
 26916                                  ;									    *
 26917                                  ; input :								    *
 26918                                  ;	es:si -> parameters in command line.				    *
 26919                                  ; output:								    *
 26920                                  ;	turn the control-c check on or off.				    *
 26921                                  ;									    *
 26922                                  ; subroutines to be called:						    *
 26923                                  ;	sysinit_parse							    *
 26924                                  ; logic:								    *
 26925                                  ; {									    *
 26926                                  ;	set di to brk_parms;						    *
 26927                                  ;	set dx,cx to 0; 						    *
 26928                                  ;	while (end of command line)					    *
 26929                                  ;	{ sysinit_parse;						    *
 26930                                  ;	  if (no error) then						    *
 26931                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 26932                                  ;		   set p_ctrl_break,on;					    *
 26933                                  ;	       else					  /*off 	 */ *
 26934                                  ;		   set p_ctrl_break,off;				    *
 26935                                  ;	  else {show message;error_exit};				    *
 26936                                  ;	};								    *
 26937                                  ;	if (no error) then						    *
 26938                                  ;	   dos function call to set ctrl_break check according to	    *
 26939                                  ; };									    *
 26940                                  ;									    *
 26941                                  ;****************************************************************************
 26942                                  
 26943                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26944                                  	; (SYSINIT:22FFh)
 26945                                  tryc:
 26946 00002028 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 26947 0000202B 7534                    	jne	short trym
 26948                                  
 26949                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26950                                  ;;ifdef MULTI_CONFIG
 26951                                  ;       call    query_user              ; query the user if config_cmd
 26952                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 26953                                  ;;endif
 26954 0000202D BF[CE1C]                	mov	di,brk_parms
 26955 00002030 31C9                    	xor	cx,cx
 26956                                  	; 04/01/2023
 26957                                  	;mov	dx,cx
 26958                                  do22:
 26959 00002032 E82306                  	call	sysinit_parse
 26960 00002035 7303                    	jnc	short if22		; parse error
 26961                                  	;call	badparm_p		;  show message and end the search loop.
 26962                                  	;;jmp	short sr22
 26963                                  	; 31/12/2022
 26964                                  ;sr22:
 26965                                  	;jmp	coff
 26966                                  	; 04/01/2023
 26967 00002037 E99C05                  	jmp	badparm_p_coff
 26968                                  if22:
 26969 0000203A 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26970 0000203D 7415                    	je	short en22		; then end the $endloop
 26971                                  
 26972                                  	;cmp	byte [result_val_itag],1
 26973 0000203F 803E[C71C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26974 00002044 7507                    	jne	short if26
 26975                                  
 26976 00002046 C606[F31C]01            	mov	byte [p_ctrl_break],1	; turn it on
 26977                                  	;jmp	short en26
 26978                                  	; 31/12/2022
 26979 0000204B EBE5                    	jmp	short do22
 26980                                  if26:
 26981 0000204D C606[F31C]00            	mov	byte [p_ctrl_break],0	; turn it off
 26982                                  en26:
 26983 00002052 EBDE                    	jmp	short do22		; we actually set the ctrl break
 26984                                  en22:
 26985 00002054 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 26986 00002056 B001                    	mov	al,1
 26987 00002058 8A16[F31C]              	mov	dl,[p_ctrl_break]
 26988 0000205C CD21                    	int	21h
 26989                                  	; 31/12/2022
 26990                                  	;jmp	short sr22
 26991                                  	; 04/01/2023
 26992                                  sr22:
 26993 0000205E E915FF                  	jmp	coff
 26994                                  
 26995                                  ;------------------------------------------------------------------------------
 26996                                  ; multitrack command
 26997                                  ;------------------------------------------------------------------------------
 26998                                  
 26999                                  ;******************************************************************************
 27000                                  ;									      *
 27001                                  ; function: parse the parameters of multitrack= command.		      *
 27002                                  ;									      *
 27003                                  ; input :								      *
 27004                                  ;	es:si -> parameters in command line.				      *
 27005                                  ; output:								      *
 27006                                  ;	turn multrk_flag on or off.					      *
 27007                                  ;									      *
 27008                                  ; subroutines to be called:						      *
 27009                                  ;	sysinit_parse							      *
 27010                                  ; logic:								      *
 27011                                  ; {									      *
 27012                                  ;	set di to brk_parms;						      *
 27013                                  ;	set dx,cx to 0; 						      *
 27014                                  ;	while (end of command line)					      *
 27015                                  ;	{ sysinit_parse;						      *
 27016                                  ;	  if (no error) then						      *
 27017                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 27018                                  ;		   set p_mtrk,on;					      *
 27019                                  ;	       else					  /*off 	 */   *
 27020                                  ;		   set p_mtrk,off;					      *
 27021                                  ;	  else {show message;error_exit};				      *
 27022                                  ;	};								      *
 27023                                  ;	if (no error) then						      *
 27024                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 27025                                  ;									      *
 27026                                  ; };									      *
 27027                                  ;									      *
 27028                                  ;******************************************************************************
 27029                                  
 27030                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27031                                  trym:
 27032 00002061 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 27033 00002064 7569                    	jne	short tryu
 27034                                  
 27035                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27036                                  ;;ifdef	MULTI_CONFIG
 27037                                  ;       call    query_user      ; query the user if config_cmd
 27038                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 27039                                  ;;endif
 27040 00002066 BF[D21D]                	mov	di,mtrk_parms
 27041 00002069 31C9                    	xor	cx,cx
 27042                                  	; 04/01/2023
 27043                                  	;mov	dx,cx
 27044                                  do31:
 27045 0000206B E8EA05                  	call	sysinit_parse
 27046 0000206E 7303                    	jnc	short if31	; parse error
 27047                                  	;call	badparm_p	;  show message and end the search loop.
 27048                                  	;;jmp	short sr31
 27049                                  	; 31/12/2022
 27050                                  ;sr31:
 27051                                  	;jmp	coff
 27052                                  	; 04/01/2023
 27053 00002070 E96305                  	jmp	badparm_p_coff
 27054                                  if31:
 27055 00002073 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27056 00002076 7415                    	je	short en31	; then end the $endloop
 27057                                  
 27058                                  	;cmp	byte [result_val_itag],1
 27059 00002078 803E[C71C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 27060 0000207D 7507                    	jne	short if35
 27061                                  
 27062 0000207F C606[E61D]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 27063                                  	;jmp	short en35
 27064                                  	; 31/12/2022
 27065 00002084 EBE5                    	jmp	short do31
 27066                                  if35:
 27067 00002086 C606[E61D]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 27068                                  en35:
 27069 0000208B EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 27070                                  en31:
 27071 0000208D 1E                      	push	ds
 27072                                  	;;mov	ax,Bios_Data ; 70h
 27073                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27074                                  	; 21/10/2022
 27075 0000208E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27076 00002091 8ED8                    	mov	ds,ax
 27077                                  
 27078 00002093 2E803E[E61D]00          	cmp	byte [cs:p_mtrk],0
 27079 00002099 7508                    	jne	short if39
 27080                                  
 27081 0000209B C706[2605]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 27082 000020A1 EB06                    	jmp	short en39
 27083                                  if39:
 27084 000020A3 C706[2605]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 27085                                  en39:
 27086 000020A9 1F                      	pop	ds
 27087                                  	; 31/12/2022
 27088                                  	;jmp	short sr31
 27089                                  	; 04/01/2023
 27090                                  sr31:
 27091 000020AA E9C9FE                  	jmp	coff
 27092                                  
 27093                                  ;----------------------------------------------------------------------------
 27094                                  ; DOS=HIGH/LOW command
 27095                                  ;----------------------------------------------------------------------------
 27096                                  
 27097                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27098                                  multi_try_doshi:
 27099 000020AD 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 27100 000020B0 7403                    	je	short it_is_h
 27101                                  skip_it:
 27102 000020B2 E9FEFE                  	jmp	multi_pass_filter
 27103                                  it_is_h:				; M003 - removed initing DevUMB
 27104                                  					;	 & runhigh
 27105                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27106                                  ;;ifdef	MULTI_CONFIG
 27107                                  ;       call    query_user              ; query the user if config_cmd
 27108                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 27109                                  ;;endif
 27110 000020B5 BF[1D1E]                	mov	di,dos_parms
 27111 000020B8 31C9                    	xor	cx,cx
 27112                                  	; 04/01/2023
 27113                                  	;mov	dx,cx
 27114                                  h_do_parse:
 27115 000020BA E89B05                  	call	sysinit_parse
 27116 000020BD 7303                    	jnc	short h_parse_ok	; parse error
 27117                                  h_badparm:
 27118                                  	; 04/01/2023
 27119                                  	;call	badparm_p		; show message and end the search loop.
 27120                                  	;;jmp	short h_end
 27121                                  	; 11/12/2022
 27122                                  ;h_end:
 27123                                  	;jmp	coff
 27124                                  	; 04/01/2023
 27125 000020BF E91405                  	jmp	badparm_p_coff	
 27126                                  h_parse_ok:
 27127 000020C2 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27128 000020C5 7405                    	je	short h_end		; then end the $endloop
 27129 000020C7 E81006                  	call	ProcDOS
 27130 000020CA EBEE                    	jmp	short h_do_parse
 27131                                  	; 11/12/2022
 27132                                  	; 04/01/2023
 27133                                  h_end:
 27134 000020CC E9A7FE                  	jmp	coff
 27135                                  
 27136                                  ;-----------------------------------------------------------------------------
 27137                                  ; devicehigh command
 27138                                  ;-----------------------------------------------------------------------------
 27139                                  
 27140                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27141                                  tryu:
 27142 000020CF 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 27143 000020D2 7539                    	jne	short tryd
 27144                                  
 27145                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27146                                  ;;ifdef	MULTI_CONFIG
 27147                                  ;       call    query_user              ; query the user if config_cmd
 27148                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 27149                                  ;;endif
 27150                                  
 27151                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27152                                  ;	call	InitVar
 27153                                  ;	call	ParseSize		; process the size= option
 27154                                  ;	;jnc	short tryu_0
 27155                                  	
 27156                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 27157                                  
 27158                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27159                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 27160                                  	;mov	[cs:badparm_seg], es
 27161                                  	; 11/12/2022
 27162                                  	; ds = cs
 27163 000020D4 8936[1114]              	mov	[badparm_off], si
 27164 000020D8 8C06[1314]              	mov	[badparm_seg], es
 27165                                  	;
 27166 000020DC E86608                  	call	ParseSize
 27167 000020DF 7303                    	jnc	short tryu_2	; 28/10/2022
 27168                                  
 27169                                  	;call	badparm_p
 27170                                  	;jmp	coff
 27171                                  	; 04/01/2023
 27172 000020E1 E9F204                  	jmp	badparm_p_coff
 27173                                  
 27174                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27175                                  ;tryu_0:
 27176                                  ;	mov	ax,[cs:DevSizeOption]
 27177                                  ;	or	ax,ax
 27178                                  ;	jnz	short tryu_2
 27179                                  ;
 27180                                  ;	call	ParseVar
 27181                                  ;	jnc	short tryu_2
 27182                                  ;tryu_1:
 27183                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 27184                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 27185                                  ;	call	badparm_p		; so all we have to do is choke and
 27186                                  ;	jmp	coff			; die, rather verbosely.
 27187                                  
 27188                                  tryu_2:	
 27189 000020E4 56                      	push	si
 27190 000020E5 06                      	push	es
 27191                                  tryu_3:
 27192 000020E6 268A04                  	mov	al,[es:si]
 27193 000020E9 3C0D                    	cmp	al,cr
 27194 000020EB 740C                    	je	short tryu_4
 27195 000020ED 3C0A                    	cmp	al,lf
 27196 000020EF 7408                    	je	short tryu_4
 27197 000020F1 E8CC0E                  	call	delim
 27198 000020F4 7403                    	jz	short tryu_4
 27199 000020F6 46                      	inc	si
 27200 000020F7 EBED                    	jmp	short tryu_3
 27201                                  tryu_4:	
 27202                                  	; 11/12/2022
 27203                                  	; ds = cs
 27204 000020F9 A2[921E]                	mov	[DevSavedDelim],al
 27205                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 27206                                  					;  it with null
 27207                                  	; 18/12/2022
 27208 000020FC 29DB                    	sub	bx,bx
 27209 000020FE 26881C                  	mov	[es:si],bl ; 0
 27210                                   	;mov	byte [es:si],0
 27211                                  
 27212 00002101 07                      	pop	es
 27213 00002102 5E                      	pop	si
 27214                                  
 27215                                  ;------------------------------------------------------------------------------
 27216                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 27217                                  ;------------------------------------------------------------------------------
 27218                                  
 27219                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27220                                  ;
 27221                                  ;	call	UmbTest			; See if UMBs are around...
 27222                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 27223                                  ;
 27224                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 27225                                  ;	jmp	short LoadDevice
 27226                                  
 27227                                  ;------------------------------------------------------------------------------
 27228                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 27229                                  ;------------------------------------------------------------------------------
 27230                                  
 27231                                  NrmTst:
 27232                                  	; 11/12/2022
 27233                                  	; ds = cs
 27234                                  	;;mov	byte [cs:DeviceHi],0
 27235                                  	;mov	byte [DeviceHi],0
 27236                                  	; 18/12/2022
 27237                                  	; bx = 0
 27238 00002103 381E[6E1E]              	cmp	[DevUMB],bl ; 0
 27239                                  	;cmp	byte [DevUMB],0
 27240                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 27241 00002107 7417                    	je	short LoadDevice	; no, we don't
 27242                                  	;mov	byte [cs:DeviceHi],1
 27243                                  	; 11/12/2022
 27244                                  	;mov	byte [DeviceHi],1
 27245                                  	; 18/12/2022
 27246 00002109 FEC3                    	inc	bl ; mov bl,1 ; (*)
 27247                                  	; 11/12/2022
 27248                                  	;jmp	short LoadDevice2	; 11/12/2022
 27249 0000210B EB13                    	jmp	short LoadDevice
 27250                                  
 27251                                  ;------------------------------------------------------------------------------
 27252                                  ; device command
 27253                                  ;------------------------------------------------------------------------------
 27254                                  
 27255                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27256                                  	; (SYSINIT:2401h)
 27257                                  tryd:
 27258                                  	; 11/12/2022
 27259 0000210D 31DB                    	xor 	bx, bx
 27260                                  	;
 27261 0000210F 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 27262 00002112 7403                    	je	short gotd
 27263                                  skip_it2:
 27264 00002114 E93302                  	jmp	tryq
 27265                                  gotd:
 27266                                  
 27267                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27268                                  ;;ifdef	MULTI_CONFIG
 27269                                  ;       call    query_user              ; query the user if config_cmd
 27270                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 27271                                  ;;endif
 27272                                  	; 11/12/2022
 27273                                  	; ds = cs
 27274                                  	;mov	byte [DeviceHi],0
 27275                                  	;mov	word [DevSizeOption],0
 27276 00002117 891E[7E1E]              	mov	[DevSizeOption],bx ; 0
 27277 0000211B C606[921E]20            	mov	byte [DevSavedDelim],' '
 27278                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 27279                                  	;mov	word [cs:DevSizeOption],0
 27280                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 27281                                  					;  be replaced with a ' '
 27282                                  LoadDevice:                             ; device= or devicehigh= command.
 27283                                  	; 11/12/2022
 27284                                  	;mov	byte [DeviceHi],0
 27285 00002120 881E[7D1E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 27286                                  LoadDevice2:
 27287                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 27288                                  	;
 27289                                  	;push    cs
 27290                                          ;pop     ds
 27291                                  	;
 27292                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 27293                                  	;mov	[bpb_addr+2],es
 27294                                  	;
 27295                                  	;mov	[DevCmdLine],si		; save it for ourself
 27296                                  	;mov	[DevCmdLine+2],es
 27297                                  	;
 27298                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 27299                                  
 27300                                  	; 11/12/2022
 27301                                  	; ds = cs
 27302                                  	;mov	bx,cs
 27303                                  	;mov	ds,bx
 27304                                  
 27305                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 27306 00002124 8936[F803]              	mov	[bpb_addr],si
 27307                                  	;mov	[cs:bpb_addr+2],es
 27308 00002128 8C06[FA03]              	mov	[bpb_addr+2],es
 27309                                  
 27310                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 27311 0000212C 8936[8E1E]              	mov	[DevCmdLine],si
 27312                                  	;mov	[cs:DevCmdLine+2],es	
 27313 00002130 8C06[901E]              	mov	[DevCmdLine+2],es	
 27314                                  
 27315 00002134 E8E00E                  	call	round
 27316                                  	
 27317 00002137 E81B07                  	call	SizeDevice
 27318 0000213A 7215                    	jc	short BadFile
 27319                                  
 27320                                  	; 11/12/2022
 27321                                  	; ds = cs
 27322                                  
 27323                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 27324                                  
 27325                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27326                                  ;
 27327                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 27328                                  ;
 27329                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 27330                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 27331                                  ;	jz	short DevConvLoad	; the actual load.
 27332                                  ;
 27333                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 27334                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 27335                                  ;
 27336                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 27337                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 27338                                  ;
 27339                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 27340                                  ;
 27341                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 27342                                  ;	or	ax,ax
 27343                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 27344                                  ;
 27345                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 27346                                  ;	jge	short DevConvLoad
 27347                                  ;
 27348                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 27349                                  ;	call	StoLoadSize		; minsize for load UMB.
 27350                                  
 27351                                  ; - End DeviceHigh primary logic changes --------------------------------------
 27352                                  
 27353                                  DevConvLoad:
 27354                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27355 0000213C E83206                  	call	InitDevLoad
 27356                                  
 27357                                  	; 11/12/2022
 27358                                  	; ds = cs
 27359 0000213F A1[621E]                	mov	ax,[DevLoadAddr]
 27360 00002142 0306[601E]              	add	ax,[DevSize]
 27361 00002146 7206                    	jc	short NoMem
 27362 00002148 3906[641E]              	cmp	[DevLoadEnd],ax
 27363 0000214C 7312                    	jae	short LoadDev
 27364                                  	
 27365                                  	; 11/12/2022
 27366                                  	;mov	ax,[cs:DevLoadAddr]
 27367                                  	;add	ax,[cs:DevSize]
 27368                                  	;jc	short NoMem
 27369                                  	;cmp	[cs:DevLoadEnd],ax
 27370                                  	;jae	short LoadDev
 27371                                  NoMem:
 27372                                  	; 11/12/2022
 27373                                  	; ds = cs
 27374                                  	;jmp	mem_err
 27375 0000214E E9050F                  	jmp	mem_err2
 27376                                  
 27377                                  BadFile:
 27378                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27379                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 27380                                  	;cmp    byte [es:si],' '
 27381                                          ;jae	short tryd_2
 27382 00002151 26803C0D                	cmp	byte [es:si],0Dh	; cr
 27383 00002155 7503                            jne	short tryd_2
 27384 00002157 E91D05                  	jmp	badop
 27385                                  tryd_2:
 27386 0000215A E80811                  	call	badload
 27387 0000215D E916FE                  	jmp	coff
 27388                                  
 27389                                  LoadDev:
 27390 00002160 06                      	push	es
 27391 00002161 1F                      	pop	ds
 27392                                  
 27393 00002162 89F2                    	mov	dx,si			;ds:dx points to file name
 27394 00002164 E83F07                  	call	ExecDev			; load device driver using exec call
 27395                                  badldreset:
 27396 00002167 1E                      	push	ds
 27397 00002168 07                      	pop	es			;es:si back to config.sys
 27398 00002169 0E                      	push	cs
 27399 0000216A 1F                      	pop	ds			;ds back to sysinit
 27400 0000216B 72E4                    	jc	short BadFile
 27401                                  goodld:
 27402                                  	; 11/12/2022
 27403                                  	; ds = cs
 27404                                  
 27405 0000216D 06                      	push	es
 27406 0000216E 56                      	push	si
 27407 0000216F E85107                  	call	RemoveNull
 27408 00002172 06                      	push	es
 27409 00002173 56                      	push	si
 27410                                  
 27411 00002174 0E                      	push	cs
 27412 00002175 07                      	pop	es
 27413                                  
 27414 00002176 1E                      	push	ds
 27415 00002177 56                      	push	si
 27416                                  
 27417                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 27418                                  	; 31/12/2022
 27419                                  	; ds = cs
 27420 00002178 C536[661E]              	lds	si,[DevEntry]
 27421                                  	
 27422                                  	;test	word [si+4],8000h
 27423                                  	; 11/12/2022
 27424 0000217C F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 27425                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 27426 00002180 7511                    	jnz	short got_device_com_cont   ; no.
 27427                                  
 27428 00002182 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 27429                                  	;cmp	byte [si+32],26
 27430 00002187 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 27431 0000218B 7206                    	jb	short got_device_com_cont
 27432                                  
 27433 0000218D 5E                      	pop	si
 27434 0000218E 1F                      	pop	ds
 27435                                  
 27436 0000218F 5E                      	pop	si			; clear the stack
 27437 00002190 07                      	pop	es
 27438                                  
 27439                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27440                                  	;call	RetFromUM		; Do this before we leave
 27441                                  
 27442 00002191 EB55                    	jmp	short badnumblock
 27443                                  
 27444                                  got_device_com_cont:
 27445 00002193 5E                      	pop	si
 27446 00002194 1F                      	pop	ds
 27447                                  
 27448                                  	; 11/12/2022
 27449                                  	; ds = cs
 27450                                  
 27451 00002195 E86505                  	call	LieInt12Mem
 27452 00002198 E8C405                  	call	UpdatePDB		; update the PSP:2 value M020
 27453                                  
 27454                                  	; 11/12/2022
 27455                                  	; ds = cs
 27456                                  	; 08/09/2023
 27457 0000219B 31C0                    	xor	ax, ax ; 0
 27458 0000219D 3806[0D14]              	cmp	byte [multdeviceflag],al ; 0
 27459                                  	;cmp	byte [multdeviceflag],0
 27460                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 27461                                  					;  driver in the file ; M027
 27462 000021A1 750B                    	jne	short skip_pass_limit	;		      ; M027
 27463                                  
 27464                                  	; 11/12/2022
 27465                                  	; ds = cs
 27466                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 27467                                  	;mov	bx,[cs:DevLoadEnd]
 27468                                  	;mov	[cs:break_addr+2],bx
 27469                                  
 27470                                  	;mov	word [break_addr],0
 27471                                  	; 08/09/2023
 27472 000021A3 A3[F403]                	mov	[break_addr],ax ; 0
 27473 000021A6 8B1E[641E]              	mov	bx,[DevLoadEnd]
 27474 000021AA 891E[F603]              	mov	[break_addr+2],bx
 27475                                  
 27476                                  skip_pass_limit:
 27477                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 27478                                  ;	number of installed devices (including DblSpace drives) where
 27479                                  ;	"drivenumber" is the number that the next block device will
 27480                                  ;	be assigned to. Because some naughty device drivers (like
 27481                                  ;	interlnk) look at the internal DOS variable instead of the
 27482                                  ;	value we pass it, we'll temporarily stick our value into
 27483                                  ;	DOS DATA while we're initializing the device drivers.
 27484                                  ;
 27485                                  ;	Note that this will make it impossible for this device
 27486                                  ;	driver to access the DblSpace drive letters, whether
 27487                                  ;	they are swapped-hosts or unswapped compressed drives,
 27488                                  ;	during its initialization phase.
 27489                                  
 27490                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27491                                  	;push	ds
 27492                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27493                                  	;
 27494                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 27495                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 27496                                  	;mov	ah,al
 27497                                  	;
 27498                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 27499                                  	;pop	ds
 27500                                  	;
 27501                                  	;push	ax			; save real sysi_numio/ncds in ax
 27502                                  
 27503                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27504                                  	; (SYSINIT:24B9h)
 27505                                  
 27506 000021AE BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 27507 000021B1 E8AB0E                  	call	calldev 		; calldev (sdevstrat);
 27508 000021B4 BB0800                  	mov	bx,SYSDEV.INT ; 8
 27509 000021B7 E8A50E                  	call	calldev 		; calldev (sdevint);
 27510                                  
 27511                                  	; 11/12/2022
 27512                                  	; ds <> cs
 27513                                  
 27514                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27515                                  	;pop	ax			; get real sysi_numio value
 27516                                  	;push	ds
 27517                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27518                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 27519                                  	;pop	ds
 27520                                  
 27521                                  	; 11/12/2022
 27522 000021BA 0E                      	push	cs
 27523 000021BB 1F                      	pop	ds
 27524                                  
 27525 000021BC E86E05                  	call	TrueInt12Mem
 27526                                  
 27527                                  	; 11/12/2022
 27528                                  	; ds = cs
 27529                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 27530                                  	;mov	[cs:DevBrkAddr],ax
 27531                                  	;mov	ax,[cs:break_addr+2]
 27532                                  	;mov	[cs:DevBrkAddr+2],ax
 27533 000021BF A1[F403]                	mov	ax,[break_addr]	
 27534 000021C2 A3[6A1E]                	mov	[DevBrkAddr],ax
 27535 000021C5 A1[F603]                	mov	ax,[break_addr+2]
 27536 000021C8 A3[6C1E]                	mov	[DevBrkAddr+2],ax
 27537                                  
 27538                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27539                                  	;call	RetFromUM		; There we go... all done.
 27540                                  
 27541                                  	; 11/12/2022
 27542 000021CB 803E[6E1E]00            	cmp	byte [DevUMB],0	
 27543                                  	;cmp	byte [cs:DevUMB],0
 27544 000021D0 7403                    	je	short tryd_3
 27545 000021D2 E8D208                  	call	AllocUMB
 27546                                  	; 31/12/2022
 27547                                  	; ds= cs
 27548                                  tryd_3:
 27549                                  
 27550                                  ;ifndef ROMDOS
 27551                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 27552                                  
 27553                                  	; 11/12/2022
 27554                                  	; ds = cs
 27555                                  	
 27556                                  	;cmp	byte [cs:runhigh],0FFh
 27557 000021D5 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 27558 000021DA 7503                    	jne	short tryd_4
 27559                                  	
 27560                                  	; 11/12/2022
 27561                                  	; ds = cs
 27562 000021DC E8F4E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 27563                                  tryd_4:
 27564                                  ;endif ; ROMDOS
 27565                                  
 27566 000021DF 5E                      	pop	si
 27567 000021E0 1F                      	pop	ds
 27568 000021E1 C60400                  	mov	byte [si],0		; *p = 0;
 27569                                  
 27570 000021E4 0E                      	push	cs
 27571 000021E5 1F                      	pop	ds
 27572                                  
 27573 000021E6 EB1F                    	jmp	short was_device_com
 27574                                  
 27575                                  ;----------------------------------------------------------------------------
 27576                                  
 27577                                  ;02/04/2019 - Retro DOS v4.0
 27578                                  
 27579                                  badnumblock:
 27580 000021E8 0E                      	push	cs
 27581 000021E9 1F                      	pop	ds
 27582 000021EA BA[5E37]                	mov	dx,badblock
 27583 000021ED E89D10                  	call	print
 27584                                  
 27585                                  ;------ fall thru -----------------------------------------------------------
 27586                                  
 27587                                  erase_dev_do:				; modified to show message "error in config.sys..."
 27588                                  	
 27589                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 27590                                  	
 27591 000021F0 5E                      	pop	si
 27592 000021F1 07                      	pop	es
 27593                                  
 27594 000021F2 0E                      	push	cs
 27595 000021F3 1F                      	pop	ds
 27596                                  
 27597                                  skip1_resetmemhi:
 27598                                  	; 11/12/2022
 27599                                  	; ds = cs
 27600 000021F4 833E[FD03]00            	cmp	word [configmsgflag],0
 27601                                  	;cmp	word [cs:configmsgflag],0
 27602 000021F9 7409                    	je	short no_error_line_msg
 27603                                  
 27604 000021FB E8AD04                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 27605                                  	; 11/12/2022
 27606                                  	; ds = cs
 27607                                  	;mov	word [cs:configmsgflag],0
 27608 000021FE C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 27609                                  
 27610                                  no_error_line_msg:
 27611 00002204 E96FFD                  	jmp	coff
 27612                                  
 27613                                  ;----------------------------------------------------------------------------
 27614                                  
 27615                                  was_device_com:
 27616                                  	; 14/12/2022
 27617                                  	; ds = cs
 27618 00002207 A1[6C1E]                	mov	ax,[DevBrkAddr+2]
 27619                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 27620 0000220A 3B06[641E]              	cmp	ax,[DevLoadEnd]
 27621                                  	;cmp	ax,[cs:DevLoadEnd]
 27622 0000220E 7605                    	jbe	short breakok
 27623                                  
 27624 00002210 5E                      	pop	si
 27625 00002211 07                      	pop	es
 27626 00002212 E93CFF                  	jmp	BadFile
 27627                                  
 27628                                  breakok:
 27629                                  	; 14/12/2022
 27630                                  	; ds = cs
 27631 00002215 C43E[6B02]              	les	di,[DOSINFO] 
 27632 00002219 C516[661E]              	lds	dx,[DevEntry]
 27633                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 27634 0000221D 89D6                    	mov	si,dx
 27635                                  
 27636                                  	; 14/11/2022
 27637                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 27638                                  
 27639                                  	; 14/12/2022
 27640                                  	; ds <> cs
 27641                                  	
 27642                                  	;mov	ax,[si+4]
 27643 0000221F 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 27644                                  	; 12/12/2022
 27645 00002222 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 27646                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 27647 00002225 7426                    	jz	short isblock
 27648                                  
 27649                                  ;------ lets deal with character devices
 27650                                  
 27651 00002227 2E800E[1014]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27652 0000222D E8C606                  	call	DevSetBreak		;go ahead and alloc mem for device
 27653                                  jc_edd:
 27654 00002230 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 27655                                  
 27656                                  	; 12/12/2022
 27657 00002232 A801                    	test	al,ISCIN
 27658                                  	;test	ax,ISCIN ; 1		;is it a console in?
 27659 00002234 7408                    	jz	short tryclk
 27660                                  
 27661 00002236 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 27662 0000223A 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 27663                                  tryclk: 
 27664                                  	; 12/12/2022
 27665 0000223E A808                    	test	al,ISCLOCK
 27666                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 27667 00002240 7408                    	jz	short golink
 27668                                  
 27669 00002242 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 27670 00002246 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 27671                                  golink: 
 27672 0000224A E9B000                  	jmp	linkit
 27673                                  
 27674                                  ;------ deal with block device drivers
 27675                                  
 27676                                  isblock:
 27677 0000224D 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 27678 00002251 08C0                    	or	al,al
 27679 00002253 749B                    	jz	short erase_dev_do
 27680                                  	;mov	[si+10],al
 27681 00002255 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 27682                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27683                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 27684                                  perdrv:
 27685 00002258 98                      	cbw				; warning no device > 127 units
 27686 00002259 89C1                    	mov	cx,ax
 27687 0000225B 88E6                    	mov	dh,ah
 27688                                  	;mov	dl,[es:di+32]
 27689 0000225D 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 27690 00002261 88D4                    	mov	ah,dl
 27691 00002263 00C4                    	add	ah,al			; check for too many devices
 27692 00002265 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 27693 00002268 7603                    	jbe	short ok_block
 27694 0000226A E97BFF                  	jmp	badnumblock
 27695                                  
 27696                                  ok_block:
 27697 0000226D 2E800E[1014]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27698 00002273 E88006                  	call	DevSetBreak		; alloc the device
 27699 00002276 72B8                    	jc	short jc_edd
 27700 00002278 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 27701                                  
 27702 0000227C 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 27703 00002281 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 27704                                  perunit:
 27705 00002286 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 27706                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27707                                  	; 11/12/2022
 27708 0000228B 26C46E00                	les	bp,[es:bp]
 27709                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27710                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 27711                                  scandpb:
 27712                                  	;cmp	word [es:bp+25],-1
 27713 0000228F 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 27714 00002294 7406                    	je	short foundpb
 27715                                  	;les	bp,[es:bp+25]
 27716 00002296 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 27717 0000229A EBF3                    	jmp	short scandpb
 27718                                  foundpb:
 27719 0000229C 2EA1[6A1E]              	mov	ax,[cs:DevBrkAddr]
 27720 000022A0 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 27721 000022A4 2EA1[6C1E]              	mov	ax,[cs:DevBrkAddr+2]
 27722 000022A8 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 27723                                  
 27724 000022AC 2EC42E[6A1E]            	les	bp,[cs:DevBrkAddr]
 27725 000022B1 2E8306[6A1E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 27726                                  
 27727 000022B7 E81B06                  	call	RoundBreakAddr
 27728                                  
 27729 000022BA 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 27730 000022C0 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 27731                                  
 27732 000022C5 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 27733 000022C7 43                      	inc	bx
 27734 000022C8 43                      	inc	bx			;point to next guy
 27735                                  	;mov	[es:bp+DPB.DRIVE],dx
 27736                                  	; 11/12/2022
 27737 000022C9 26895600                	mov	[es:bp],dx ; 13/05/2019
 27738                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27739                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 27740                                  	
 27741 000022CD B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 27742 000022CF CD21                    	int	21h
 27743                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 27744                                  			; DS:SI -> BPB (BIOS Parameter Block)
 27745                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 27746                                  
 27747                                  	;mov	ax,[es:bp+2]
 27748 000022D1 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 27749 000022D5 06                      	push	es
 27750 000022D6 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 27751                                  	;cmp	ax,[es:di+10h]
 27752 000022DB 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 27753 000022DF 07                      	pop	es
 27754                                  	;jna	short iblk_1
 27755                                  	;jmp	short bad_bpb_size_sector
 27756                                  	; 29/10/2022
 27757 000022E0 775A                    	ja	short bad_bpb_size_sector
 27758                                  iblk_1:
 27759 000022E2 1E                      	push	ds
 27760 000022E3 52                      	push	dx
 27761                                  
 27762 000022E4 2EC516[661E]            	lds	dx,[cs:DevEntry]
 27763                                  	;mov	[es:bp+13h],dx
 27764 000022E9 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 27765                                  	;mov	[es:bp+15h],ds
 27766 000022ED 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 27767                                  
 27768 000022F1 5A                      	pop	dx
 27769 000022F2 1F                      	pop	ds
 27770                                  
 27771 000022F3 42                      	inc	dx
 27772 000022F4 FEC6                    	inc	dh
 27773 000022F6 E28E                    	loop	perunit
 27774                                  
 27775 000022F8 0E                      	push	cs
 27776 000022F9 1F                      	pop	ds
 27777                                  
 27778 000022FA E8C8E8                  	call	TempCDS 		; set cds for new drives
 27779                                  linkit:
 27780 000022FD 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 27781 00002302 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 27782 00002306 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 27783                                  
 27784 0000230A 2EC536[661E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 27785 0000230F 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 27786 00002313 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 27787 00002317 8B04                    	mov	ax,[si]			;get pointer to next device
 27788 00002319 2EA3[661E]              	mov	[cs:DevEntry],ax	;and save it
 27789                                  
 27790 0000231D 890C                    	mov	[si],cx			;link in the driver
 27791 0000231F 895402                  	mov	[si+2],dx
 27792                                  enddev:
 27793 00002322 5E                      	pop	si
 27794 00002323 07                      	pop	es
 27795 00002324 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 27796 00002325 740B                    	jz	short coffj3
 27797                                  
 27798 00002327 2EFE06[0D14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 27799 0000232C E8E905                  	call	DevBreak		; M009
 27800                                  	; 11/12/2022
 27801                                  	; ds = cs (DevBreak)
 27802                                  
 27803                                  	; 03/04/2019 - Retro DOS v4.0
 27804                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 27805 0000232F E93BFE                  	jmp	goodld			; otherwise pretend we loaded it in
 27806                                  coffj3: 
 27807                                  	; 18/12/2022
 27808                                  	; ax = 0
 27809 00002332 2EA2[0D14]              	mov	[cs:multdeviceflag],al ; 0
 27810                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 27811 00002336 E8DF05                  	call	DevBreak
 27812                                  	; 11/12/2022
 27813                                  	; ds = cs (DevBreak)
 27814                                  	
 27815                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 27816                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 27817                                  ;					;  created a bogus arena to try
 27818                                  ;					;  to protect some of its resident-
 27819                                  ;					;  init code.
 27820                                  	;call	CheckDoubleSpace
 27821 00002339 E93AFC                  	jmp	coff
 27822                                  
 27823                                  ;----------------------------------------------------------------------------
 27824                                  
 27825                                  ;CheckDoubleSpace:
 27826                                  ;;;;	ifdef	dblspace_hooks
 27827                                  ;
 27828                                  ;;	Now check for two special MagicDrv cases:
 27829                                  ;;
 27830                                  ;;       a) the last driver load was MagicDrv final placement:
 27831                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 27832                                  ;;
 27833                                  ;;       b) MagicDrv is currently in temporary home:
 27834                                  ;;          -> call it to give it a chance to mount and shuffle drives
 27835                                  ;
 27836                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 27837                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 27838                                  ;
 27839                                  ;;	Now inquire of driver whether it is present, and final located
 27840                                  ;
 27841                                  ;	mov	ax,multMagicdrv ; 4A11h
 27842                                  ;	mov	bx,MD_VERSION ; 0
 27843                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 27844                                  ;	or	ax,ax			; is it there?
 27845                                  ;	jnz	short no_more_magic_calls ; done if not
 27846                                  ;
 27847                                  ;	test	dx,8000h		; is it final placed?
 27848                                  ;	jnz	short magic_not_yet_home ;  skip if not
 27849                                  ;
 27850                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 27851                                  ;;	don't keep checking it, and add its number of drive letters
 27852                                  ;;	to drivenumber.
 27853                                  ;
 27854                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 27855                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 27856                                  ;;					;  the drive number we'll pass to the
 27857                                  ;;					;  next loadable block device.
 27858                                  ;
 27859                                  ;	jmp	short no_more_magic_calls ; and finished.
 27860                                  ;
 27861                                  ;magic_not_yet_home:
 27862                                  ;	push	es
 27863                                  ;	push	si
 27864                                  ;
 27865                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 27866                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 27867                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 27868                                  ;
 27869                                  ;	mov	bx,2
 27870                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 27871                                  ;;					;   by this many units
 27872                                  ;
 27873                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 27874                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 27875                                  ;;					;  sees this, to prevent bad things
 27876                                  ;;					;  from happening if people run the
 27877                                  ;;					;  new driver with an old BIOS
 27878                                  ;	call	far [cs:MagicBackdoor]
 27879                                  ;
 27880                                  ;	pop	si
 27881                                  ;	pop	es
 27882                                  ;
 27883                                  ;no_more_magic_calls:
 27884                                  ;
 27885                                  ;;;;	endif
 27886                                  ;	retn
 27887                                  
 27888                                  ; 03/04/2019 - Retro DOS v4.0
 27889                                  
 27890                                  bad_bpb_size_sector:
 27891 0000233C 5E                      	pop	si
 27892 0000233D 07                      	pop	es
 27893 0000233E BA[8036]                	mov	dx,badsiz_pre
 27894 00002341 BB[5E36]                	mov	bx,crlfm
 27895 00002344 E8240F                  	call	prnerr
 27896                                  
 27897 00002347 E92CFC                  	jmp	coff
 27898                                  
 27899                                  ;------------------------------------------------------------------------------
 27900                                  ; country command
 27901                                  ;      the syntax is:
 27902                                  ;	country=country id {,codepage {,path}}
 27903                                  ;	country=country id {,,path}	:default codepage id in dos
 27904                                  ;------------------------------------------------------------------------------
 27905                                  
 27906                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27907                                  	; (SYSINIT:2663h)
 27908                                  tryq:
 27909 0000234A 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27910 0000234D 7403                    	je	short tryq_cont
 27911                                  skip_it3:
 27912 0000234F E90801                  	jmp	tryf
 27913                                  tryq_cont:
 27914                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27915                                  ;;ifdef	MULTI_CONFIG
 27916                                  ;       call    query_user		; query the user if config_cmd
 27917                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27918                                  ;;endif
 27919                                  	; 14/12/2022
 27920                                  	; ds = cs
 27921                                  	; bx = 0
 27922                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27923                                  	;mov	word [cs:p_code_page],0
 27924 00002352 881E[1633]              	mov	[cntry_drv],bl ; 0
 27925 00002356 891E[2B1D]              	mov	[p_code_page],bx ; 0
 27926                                  	
 27927 0000235A BF[F41C]                	mov	di,cntry_parms
 27928 0000235D 31C9                    	xor	cx,cx
 27929                                  	; 04/01/2023
 27930                                  	;mov	dx,cx
 27931                                  do52:
 27932 0000235F E8F602                  	call	sysinit_parse
 27933 00002362 730B                    	jnc	short if52		; parse error,check error code and
 27934                                  
 27935 00002364 E8E000                  	call	cntry_error		; show message and end the search loop.
 27936                                  	; 14/12/2022
 27937                                  	; ds = cs
 27938 00002367 C706[291D]FFFF          	mov	word [p_cntry_code],-1
 27939                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27940 0000236D EB34                    	jmp	short sr52
 27941                                  if52:
 27942 0000236F 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27943 00002372 742F                    	jz	short sr52		; then end the search loop
 27944                                  
 27945                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27946                                  	; 14/12/2022
 27947                                  	; ds = cs
 27948 00002374 803E[C61C]01            	cmp	byte [result_val],_$P_Number	
 27949                                  	;cmp	byte [cs:result_val],_$P_Number
 27950 00002379 7512                    	jnz	short if56
 27951                                  
 27952                                  	;;mov	ax,[cs:rw_dword]
 27953                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27954                                  	; 14/12/2022
 27955 0000237B A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27956 0000237E 83F901                  	cmp	cx,1
 27957 00002381 7505                    	jne	short if57
 27958                                  
 27959                                  	;mov	[cs:p_cntry_code],ax
 27960                                  	; 14/12/2022
 27961 00002383 A3[291D]                	mov	[p_cntry_code],ax
 27962                                  
 27963                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27964                                  	;jmp	short en57
 27965                                  	; 12/12/2022
 27966                                  	;jmp	short en56
 27967 00002386 EBD7                    	jmp	short do52
 27968                                  
 27969                                  if57:
 27970                                  	;mov	[cs:p_code_page],ax
 27971                                  	; 14/12/2022
 27972                                  	; ds = cs
 27973 00002388 A3[2B1D]                	mov	[p_code_page],ax
 27974                                  en57:
 27975                                  	;jmp	short en56		; path entered
 27976                                  	; 12/12/2022
 27977 0000238B EBD2                    	jmp	short do52
 27978                                  
 27979                                  if56:
 27980 0000238D 1E                      	push	ds
 27981 0000238E 06                      	push	es
 27982 0000238F 56                      	push	si
 27983 00002390 57                      	push	di
 27984                                  
 27985 00002391 0E                      	push	cs
 27986 00002392 07                      	pop	es
 27987                                  
 27988                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 27989                                  	; 14/12/2022
 27990 00002393 C536[CA1C]              	lds	si,[rv_dword]
 27991 00002397 BF[1633]                	mov	di,cntry_drv
 27992 0000239A E8BD0E                  	call	move_asciiz
 27993                                  
 27994 0000239D 5F                      	pop	di
 27995 0000239E 5E                      	pop	si
 27996 0000239F 07                      	pop	es
 27997 000023A0 1F                      	pop	ds
 27998                                  
 27999                                  en56:
 28000 000023A1 EBBC                    	jmp	short do52
 28001                                  
 28002                                  sr52:
 28003                                  	; 14/12/2022
 28004                                  	; ds = cs
 28005 000023A3 833E[291D]FF            	cmp	word [p_cntry_code],-1
 28006                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 28007 000023A8 7509                    	jne	short tryq_open
 28008 000023AA E9C9FB                  	jmp	coff
 28009                                  
 28010                                  tryqbad:				;"invalid country code or code page"
 28011 000023AD F9                      	stc
 28012 000023AE BA[C736]                	mov     dx,badcountry
 28013 000023B1 EB79                    	jmp     tryqchkerr
 28014                                  
 28015                                  tryq_open:
 28016                                  	; 14/12/2022
 28017                                  	; ds = cs
 28018 000023B3 803E[1633]00            	cmp	byte [cntry_drv],0
 28019                                  	;cmp	byte [cs:cntry_drv],0
 28020 000023B8 7405                    	je	short tryq_def
 28021 000023BA BA[1633]                	mov	dx,cntry_drv
 28022 000023BD EB03                    	jmp	short tryq_openit
 28023                                  
 28024                                  tryq_def:
 28025 000023BF BA[1833]                	mov	dx,cntry_root
 28026                                  tryq_openit:
 28027 000023C2 B8003D                  	mov	ax,3D00h		;open a file
 28028 000023C5 F9                      	stc
 28029 000023C6 CD21                    	int	21h
 28030 000023C8 7242                    	jc	short tryqfilebad	;open failure
 28031                                  
 28032                                  	; 14/12/2022
 28033                                  	; ds = cs
 28034 000023CA A3[D803]                	mov	[cntryfilehandle],ax
 28035                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 28036 000023CD 89C3                    	mov	bx,ax
 28037 000023CF A1[291D]                	mov	ax,[p_cntry_code]
 28038 000023D2 8B16[2B1D]              	mov	dx,[p_code_page]
 28039                                  	;mov	ax,[cs:p_cntry_code]
 28040                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 28041                                  	;mov	cx,[cs:memhi]
 28042 000023D6 8B0E[E003]              	mov	cx,[memhi]
 28043 000023DA 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 28044                                  					; M023
 28045                                  	; 14/12/2022
 28046                                  	; ds = cs
 28047 000023DE 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 28048                                  	;cmp	cx,[cs:ALLOCLIM]
 28049 000023E2 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 28050                                  
 28051 000023E4 BE[1633]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 28052 000023E7 803C00                  	cmp	byte [si],0 		;default path?
 28053 000023EA 7502                    	jne	short tryq_set_for_dos
 28054                                  
 28055 000023EC 46                      	inc	si
 28056 000023ED 46                      	inc	si			;ds:si -> cntry_root
 28057                                  
 28058                                  tryq_set_for_dos:
 28059                                  	; 14/12/2022
 28060                                  	; ds = cs
 28061 000023EE C43E[7702]              	les	di,[sysi_country]
 28062                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 28063 000023F2 57                      	push	di			;save di
 28064                                  	;add	di,8
 28065 000023F3 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 28066 000023F6 E8610E                  	call	move_asciiz		;set the path to country.sys in dos.
 28067 000023F9 5F                      	pop	di			;es:di -> country info tab again.
 28068                                  
 28069                                  	; 14/12/2022	
 28070 000023FA 8B0E[E003]              	mov	cx,[memhi]
 28071                                  	;mov	cx,[cs:memhi]
 28072 000023FE 8ED9                    	mov	ds,cx
 28073 00002400 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 28074 00002402 E8DD0C                  	call	setdoscountryinfo	;now do the job!!!
 28075                                  	; ds <> cs ; 14/12/2022
 28076 00002405 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 28077                                  
 28078 00002407 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 28079 0000240A 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 28080                                  
 28081                                  tryqfilebad:
 28082 0000240C 0E                      	push	cs
 28083 0000240D 07                      	pop	es
 28084 0000240E 2E803E[1633]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 28085 00002414 7405                    	je	short tryqdefbad
 28086                                  
 28087 00002416 BE[1633]                	mov	si,cntry_drv
 28088 00002419 EB03                    	jmp	short tryqbadload
 28089                                  
 28090                                  tryqdefbad:				;default file has been used.
 28091 0000241B BE[1833]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 28092                                  tryqbadload:
 28093 0000241E E8440E                  	call	badload 		;ds will be restored to sysinit_seg
 28094                                  	;mov	cx,[cs:CONFBOT]
 28095                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28096                                  	;mov	cx,[cs:top_of_cdss]
 28097                                  	; 11/12/2022
 28098                                  	; ds = cs
 28099 00002421 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 28100 00002425 8EC1                    	mov	es,cx			;restore es -> confbot.
 28101 00002427 EB13                    	jmp	short coffj4
 28102                                  
 28103                                  tryqmemory:
 28104 00002429 BA[0A37]                	mov	dx,insufmemory
 28105                                  tryqchkerr:
 28106                                  	;mov	cx,[cs:CONFBOT]
 28107                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28108                                  	;mov	cx,[cs:top_of_cdss]
 28109                                  	; 12/12/2022
 28110 0000242C 0E                      	push	cs
 28111 0000242D 1F                      	pop	ds
 28112 0000242E 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 28113 00002432 8EC1                    	mov	es,cx			;restore es -> confbot seg
 28114                                  	;push	cs
 28115                                  	;pop	ds			;restore ds to sysinit_seg
 28116 00002434 7306                    	jnc	short coffj4		;if no error,then exit
 28117                                  
 28118 00002436 E8540E                  	call	print			;else show error message
 28119 00002439 E86F02                  	call	error_line
 28120                                  coffj4:
 28121                                  	;mov	bx,[cs:cntryfilehandle]
 28122                                  	; 11/12/2022
 28123                                  	; ds = cs
 28124 0000243C 8B1E[D803]              	mov	bx,[cntryfilehandle]
 28125 00002440 B43E                    	mov	ah,3Eh
 28126 00002442 CD21                    	int	21h			;close a file. don't care even if it fails.
 28127 00002444 E92FFB                  	jmp	coff
 28128                                  
 28129                                  ;--------------------------------------------
 28130                                  
 28131                                  cntry_error:
 28132                                  
 28133                                  ;function: show "invalid country code or code page" messages,or
 28134                                  ;		"error in country command" depending on the error code
 28135                                  ;		in ax returned by sysparse;
 28136                                  ;in:	ax - error code
 28137                                  ;	ds - sysinitseg
 28138                                  ;	es - confbot
 28139                                  ;out:	show message.  dx destroyed.
 28140                                  
 28141 00002447 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 28142 0000244A 7505                    	jne	short if64
 28143 0000244C BA[C736]                	mov	dx,badcountry		;"invalid country code or code page"
 28144 0000244F EB03                    	jmp	short en64
 28145                                  if64:
 28146 00002451 BA[ED36]                	mov	dx,badcountrycom	;"error in contry command"
 28147                                  en64:
 28148 00002454 E8360E                  	call	print
 28149                                  	;call	error_line
 28150                                  	;retn
 28151                                  	; 11/12/2022
 28152 00002457 E95102                  	jmp	error_line
 28153                                  
 28154                                  ;------------------------------------------------------------------------------
 28155                                  ; files command
 28156                                  ;------------------------------------------------------------------------------
 28157                                  
 28158                                  ;******************************************************************************
 28159                                  ; function: parse the parameters of files= command.			      *
 28160                                  ;									      *
 28161                                  ; input :								      *
 28162                                  ;	es:si -> parameters in command line.				      *
 28163                                  ; output:								      *
 28164                                  ;	variable files set.						      *
 28165                                  ;									      *
 28166                                  ; subroutines to be called:						      *
 28167                                  ;	sysinit_parse							      *
 28168                                  ; logic:								      *
 28169                                  ; {									      *
 28170                                  ;	set di points to files_parms;					      *
 28171                                  ;	set dx,cx to 0; 						      *
 28172                                  ;	while (end of command line)					      *
 28173                                  ;	{ sysinit_parse;						      *
 28174                                  ;	  if (no error) then						      *
 28175                                  ;	     files = result_val._$P_picked_val				      *
 28176                                  ;	  else								      *
 28177                                  ;	     error exit;						      *
 28178                                  ;	};								      *
 28179                                  ; };									      *
 28180                                  ;									      *
 28181                                  ;******************************************************************************
 28182                                  
 28183                                  tryf:
 28184 0000245A 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 28185 0000245D 7523                    	jne	short tryl
 28186                                  
 28187                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28188                                  ;;ifdef	MULTI_CONFIG
 28189                                  ;       call    query_user              ; query the user if config_cmd
 28190                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 28191                                  ;;endif
 28192                                  
 28193                                  	; 14/12/2022
 28194                                  	; ds = cs
 28195                                  
 28196 0000245F BF[2D1D]                	mov	di,files_parms
 28197 00002462 31C9                    	xor	cx,cx
 28198                                  	; 04/01/2023
 28199                                  	;mov	dx,cx
 28200                                  do67:
 28201 00002464 E8F101                  	call	sysinit_parse
 28202 00002467 7303                    	jnc	short if67		; parse error
 28203                                  	;call	badparm_p		;  and show messages and end the search loop.
 28204                                  	;jmp	short sr67
 28205                                  	; 04/01/2023
 28206 00002469 E96A01                  	jmp	badparm_p_coff
 28207                                  if67:
 28208 0000246C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28209 0000246F 7408                    	je	short en67		; then end the $endloop
 28210                                  
 28211                                  	; 14/12/2022
 28212                                  	; ds = cs
 28213                                  	;;mov	al,[cs:rv_dword]
 28214                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28215                                  	;mov	[cs:p_files],al		; save it temporarily
 28216                                  	;mov	al,[rv_dword]
 28217 00002471 A0[CA1C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28218 00002474 A2[4C1D]                	mov	[p_files],al
 28219                                  
 28220 00002477 EBEB                    	jmp	short do67
 28221                                  en67:
 28222                                  	; 14/12/2022
 28223                                  	; ds = cs
 28224 00002479 A0[4C1D]                	mov	al,[p_files]
 28225 0000247C A2[9D02]                	mov	[FILES],al	
 28226                                  	;mov	al,[cs:p_files]
 28227                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 28228                                  sr67:
 28229 0000247F E9F4FA                  	jmp	coff
 28230                                  
 28231                                  ; 04/04/2019 - Retro DOS v4.0
 28232                                  
 28233                                  ;------------------------------------------------------------------------------
 28234                                  ; lastdrive command
 28235                                  ;------------------------------------------------------------------------------
 28236                                  
 28237                                  ;******************************************************************************
 28238                                  ; function: parse the parameters of lastdrive= command. 		      *
 28239                                  ;									      *
 28240                                  ; input :								      *
 28241                                  ;	es:si -> parameters in command line.				      *
 28242                                  ; output:								      *
 28243                                  ;	set the variable num_cds.					      *
 28244                                  ;									      *
 28245                                  ; subroutines to be called:						      *
 28246                                  ;	sysinit_parse							      *
 28247                                  ; logic:								      *
 28248                                  ; {									      *
 28249                                  ;	set di points to ldrv_parms;					      *
 28250                                  ;	set dx,cx to 0; 						      *
 28251                                  ;	while (end of command line)					      *
 28252                                  ;	{ sysinit_parse;						      *
 28253                                  ;	  if (no error) then						      *
 28254                                  ;	     set num_cds to the returned value; 			      *
 28255                                  ;	  else	/*error exit*/						      *
 28256                                  ;	     error exit;						      *
 28257                                  ;	};								      *
 28258                                  ; };									      *
 28259                                  ;									      *
 28260                                  ;******************************************************************************
 28261                                  
 28262                                  tryl:
 28263 00002482 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 28264 00002485 7523                    	jne	short tryp
 28265                                  
 28266                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28267                                  ;;ifdef	MULTI_CONFIG
 28268                                  ;       call    query_user      ; query the user if config_cmd
 28269                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 28270                                  ;;endif
 28271                                  	; 14/12/2022
 28272                                  	; ds = cs
 28273                                  
 28274 00002487 BF[841D]                	mov	di,ldrv_parms
 28275 0000248A 31C9                    	xor	cx,cx
 28276                                  	; 04/01/2023
 28277                                  	;mov	dx,cx
 28278                                  do73:
 28279 0000248C E8C901                  	call	sysinit_parse
 28280 0000248F 7303                    	jnc	short if73	; parse error
 28281                                  	;call	badparm_p	;  and show messages and end the search loop.
 28282                                  	;jmp	short sr73
 28283                                  	; 04/01/2023
 28284 00002491 E94201                  	jmp	badparm_p_coff
 28285                                  if73:
 28286 00002494 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28287 00002497 7408                    	je	short en73	; then end the $endloop
 28288                                  
 28289                                  	; 14/12/2022
 28290                                  	; ds = cs
 28291                                  	;;mov	al,[cs:rv_dword]
 28292                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 28293                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 28294                                  
 28295                                  	;mov	al,[rv_dword]
 28296 00002499 A0[CA1C]                	mov	al,[rv_byte]
 28297 0000249C A2[981D]                	mov	[p_ldrv],al
 28298                                  
 28299 0000249F EBEB                    	jmp	short do73
 28300                                  en73:
 28301                                  	; 14/12/2022
 28302                                  	; ds = cs
 28303 000024A1 A0[981D]                	mov	al,[p_ldrv]
 28304 000024A4 A2[A002]                	mov	[NUM_CDS],al
 28305                                  	;mov	al,[cs:p_ldrv]
 28306                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 28307                                  sr73:
 28308 000024A7 E9CCFA                  	jmp	coff
 28309                                  
 28310                                  ;--------------------------------------------------------------------------
 28311                                  ; setting drive parameters
 28312                                  ;--------------------------------------------------------------------------
 28313                                  
 28314                                  tryp:
 28315 000024AA 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 28316 000024AD 7511                    	jne	short tryk
 28317                                  
 28318                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28319                                  ;;ifdef	MULTI_CONFIG
 28320                                  ;       call    query_user      ; query the user if config_cmd
 28321                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 28322                                  ;;endif
 28323                                  
 28324 000024AF E83508                  	call	parseline
 28325 000024B2 7209                    	jc	short trypbad
 28326 000024B4 E85C07                  	call	setparms
 28327 000024B7 E89007                  	call	diddleback
 28328                                  
 28329                                  ; No error check here, because setparms and diddleback have no error 
 28330                                  ; returns, and setparms as coded now can return with carry set. 
 28331                                  ;       jc	short trypbad
 28332                                  
 28333                                  	; 12/12/2022
 28334                                  	; cf = 0
 28335                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28336                                  	;jc	short trypbad
 28337                                  	
 28338 000024BA E9B9FA                  	jmp	coff
 28339                                  trypbad:
 28340 000024BD E9B701                  	jmp	badop
 28341                                  
 28342                                  ;--------------------------------------------------------------------------
 28343                                  ; setting internal stack parameters
 28344                                  ; stacks=m,n where
 28345                                  ;	m is the number of stacks (range 8 to 64,default 9)
 28346                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 28347                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 28348                                  ;	any combinations that are not within the specified limits will
 28349                                  ;	result in "unrecognized command" error.
 28350                                  ;--------------------------------------------------------------------------
 28351                                  
 28352                                  ;**************************************************************************
 28353                                  ;									  *
 28354                                  ; function: parse the parameters of stacks= command.			  *
 28355                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 28356                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 28357                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 28358                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 28359                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 28360                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 28361                                  ;	    (or if "0,0" pair has been entered.)			  *
 28362                                  ; input :								  *
 28363                                  ;	es:si -> parameters in command line.				  *
 28364                                  ; output:								  *
 28365                                  ;	set the variables stack_count,stack_size.			  *
 28366                                  ;									  *
 28367                                  ; subroutines to be called:						  *
 28368                                  ;	sysinit_parse							  *
 28369                                  ; logic:								  *
 28370                                  ; {									  *
 28371                                  ;	set di points to stks_parms;					  *
 28372                                  ;	set dx,cx to 0; 						  *
 28373                                  ;	while (end of command line)					  *
 28374                                  ;	{ sysinit_parse;						  *
 28375                                  ;	  if (no error) then						  *
 28376                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 28377                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 28378                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 28379                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 28380                                  ;	     }								  *
 28381                                  ;	  else	/*error exit*/						  *
 28382                                  ;	     error exit;						  *
 28383                                  ;	};								  *
 28384                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 28385                                  ;	if o.k.,then set stack_count,stack_size;			  *
 28386                                  ;	 else error_exit;						  *
 28387                                  ; };									  *
 28388                                  ;**************************************************************************
 28389                                  
 28390                                  tryk:
 28391                                          ;if      stacksw
 28392                                  
 28393 000024C0 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 28394 000024C3 7402                    	je	short do_tryk
 28395                                  skip_it4:
 28396 000024C5 EB74                    	jmp	short trys	; 15/12/2022
 28397                                  do_tryk:
 28398                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28399                                  ;;ifdef	MULTI_CONFIG
 28400                                  ;       call    query_user              ; query the user if config_cmd
 28401                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 28402                                  ;;endif
 28403                                  	; 14/12/2022
 28404                                  	; ds = cs
 28405                                  
 28406 000024C7 BF[991D]                	mov	di,stks_parms
 28407 000024CA 31C9                    	xor	cx,cx
 28408                                  	; 04/01/2023
 28409                                  	;mov	dx,cx
 28410                                  do79:
 28411 000024CC E88901                  	call	sysinit_parse
 28412 000024CF 730B                    	jnc	short if79		; parse error
 28413                                  
 28414 000024D1 BA[7937]                	mov	dx,badstack		; "invalid stack parameter"
 28415 000024D4 E8B60D                  	call	print			;  and show messages and end the search loop.
 28416 000024D7 E8D101                  	call	error_line
 28417                                  	;jmp	sr79
 28418                                  	; 11/12/2022
 28419 000024DA EB39                    	jmp	short sr79
 28420                                  if79:
 28421 000024DC 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28422 000024DF 7412                    	je	short en79		; then end the $endloop
 28423                                  
 28424                                  	; 14/12/2022
 28425                                  	; ds = cs
 28426                                  
 28427                                  	;;mov	ax,[cs:rv_dword]
 28428                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28429                                  	;mov	ax,[rv_dword]
 28430 000024E1 A1[CA1C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 28431                                  
 28432 000024E4 83F901                  	cmp	cx,1
 28433 000024E7 7505                    	jne	short if83
 28434                                  
 28435                                  	; 14/12/2022
 28436                                  	;mov	[cs:p_stack_count],ax
 28437                                  	;jmp	short en83
 28438 000024E9 A3[CE1D]                	mov	[p_stack_count],ax
 28439 000024EC EBDE                    	jmp	short do79
 28440                                  if83:
 28441                                  	; 14/12/2022
 28442                                  	;mov	[cs:p_stack_size],ax
 28443 000024EE A3[D01D]                	mov	[p_stack_size],ax
 28444                                  en83:
 28445 000024F1 EBD9                    	jmp	short do79
 28446                                  en79:
 28447                                  	; 14/12/2022
 28448                                  	; ds = cs
 28449 000024F3 A1[CE1D]                	mov	ax,[p_stack_count]
 28450 000024F6 09C0                    	or	ax,ax
 28451 000024F8 741E                    	jz	short if87		
 28452                                  
 28453                                  	; 14/12/2022
 28454                                  	;cmp	word [p_stack_count],0
 28455                                  	;;cmp	word [cs:p_stack_count],0
 28456                                  	;je	short if87
 28457                                  
 28458                                  	; 14/12/2022
 28459 000024FA 83F808                  	cmp	ax, mincount ; 8
 28460                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 28461                                  	; 15/12/2022
 28462 000024FD 721F                    	jb	short en87
 28463 000024FF 833E[D01D]20            	cmp	word [p_stack_size],minsize ; 32
 28464                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 28465                                  	; 15/12/2022
 28466 00002504 7218                    	jb	short en87
 28467                                  if94:
 28468                                  	; 14/12/2022
 28469                                  	; ds = cs
 28470                                  	; ax = [p_stack_count]
 28471                                  	;mov	ax,[p_stack_count]
 28472                                  	;;mov	ax,[cs:p_stack_count]
 28473 00002506 A3[8A02]                	mov	[stack_count],ax
 28474                                  	;mov	[cs:stack_count],ax
 28475                                  	;mov	ax,[cs:p_stack_size]
 28476 00002509 A1[D01D]                	mov	ax,[p_stack_size]
 28477                                  	;mov	[cs:stack_size],ax
 28478 0000250C A3[8C02]                	mov	[stack_size],ax
 28479                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28480 0000250F C706[8E02]FFFF          	mov	word [stack_addr],-1
 28481                                  sr79:
 28482 00002515 E95EFA                  	jmp	coff
 28483                                  
 28484                                  if87:
 28485                                  	; 14/12/2022
 28486 00002518 3906[D01D]              	cmp	[p_stack_size],ax ; 0
 28487 0000251C 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 28488                                  	;cmp	word [cs:p_stack_size],0
 28489                                  	;je	short if94
 28490                                  en87:
 28491                                  	; 15/12/2022
 28492                                  	; ([p_stack_count] is invalid, use default values)
 28493                                  	; 14/12/2022
 28494                                  	; ds = cs
 28495 0000251E C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 28496 00002524 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 28497 0000252A C706[8E02]0000          	mov	word [stack_addr],0
 28498                                  	;mov	word [cs:stack_count],defaultcount ; 9
 28499                                  	;				; reset to default value.
 28500                                  	;mov	word [cs:stack_size],defaultsize ; 128
 28501                                  	;mov	word [cs:stack_addr],0
 28502                                  
 28503 00002530 BA[7937]                	mov	dx,badstack
 28504 00002533 E8570D                  	call	print
 28505 00002536 E87201                  	call	error_line
 28506 00002539 EBDA                    	jmp	short sr79
 28507                                  
 28508                                  ; 15/12/2022
 28509                                  %if 0
 28510                                  	mov	di,stks_parms
 28511                                  	xor	cx,cx
 28512                                  	; 04/01/2023
 28513                                  	;mov	dx,cx
 28514                                  do79:
 28515                                  	call	sysinit_parse
 28516                                  	jnc	short if79		; parse error
 28517                                  
 28518                                  	mov	dx,badstack		; "invalid stack parameter"
 28519                                  	call	print			;  and show messages and end the search loop.
 28520                                  	call	error_line
 28521                                  	;jmp	sr79
 28522                                  	; 11/12/2022
 28523                                  	jmp	short sr79
 28524                                  if79:
 28525                                  	cmp	ax,_$P_RC_EOL		; end of line?
 28526                                  	je	short en79		; then end the $endloop
 28527                                  
 28528                                  	;mov	ax,[cs:rv_dword]
 28529                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28530                                  	cmp	cx,1
 28531                                  	jne	short if83
 28532                                  
 28533                                  	mov	[cs:p_stack_count],ax
 28534                                  	jmp	short en83
 28535                                  if83:
 28536                                  	mov	[cs:p_stack_size],ax
 28537                                  en83:
 28538                                  	jmp	short do79
 28539                                  en79:
 28540                                  	cmp	word [cs:p_stack_count],0
 28541                                  	je	short if87
 28542                                  
 28543                                  	cmp	word [cs:p_stack_count],mincount ; 8
 28544                                  	jb	short ll88
 28545                                  	cmp	word [cs:p_stack_size],minsize ; 32
 28546                                  	jnb	short if88
 28547                                  ll88:
 28548                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28549                                  if88:
 28550                                  	jmp	short en87
 28551                                  
 28552                                  	; 11/12/2022
 28553                                  if94:
 28554                                  	mov	ax,[cs:p_stack_count]
 28555                                  	mov	[cs:stack_count],ax
 28556                                  	mov	ax,[cs:p_stack_size]
 28557                                  	mov	[cs:stack_size],ax
 28558                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28559                                  sr79:
 28560                                  	jmp	coff
 28561                                  
 28562                                  if87:
 28563                                  	cmp	word [cs:p_stack_size],0
 28564                                  	je	short en87
 28565                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28566                                  en87:
 28567                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 28568                                  	jne	short if94
 28569                                  
 28570                                  	mov	word [cs:stack_count],defaultcount ; 9
 28571                                  					; reset to default value.
 28572                                  	mov	word [cs:stack_size],defaultsize ; 128
 28573                                  	mov	word [cs:stack_addr],0
 28574                                  
 28575                                  	mov	dx,badstack
 28576                                  	call	print
 28577                                  	call	error_line
 28578                                  	jmp	short sr79
 28579                                  
 28580                                  %endif
 28581                                  
 28582                                  ; 11/12/2022
 28583                                  %if 0 
 28584                                  
 28585                                  if94:
 28586                                  	mov	ax,[cs:p_stack_count]
 28587                                  	mov	[cs:stack_count],ax
 28588                                  	mov	ax,[cs:p_stack_size]
 28589                                  	mov	[cs:stack_size],ax
 28590                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28591                                  sr79:
 28592                                  	jmp	coff
 28593                                  
 28594                                  %endif
 28595                                  
 28596                                  	;endif
 28597                                  
 28598                                  ;------------------------------------------------------------------------
 28599                                  ; shell command
 28600                                  ;------------------------------------------------------------------------
 28601                                  
 28602                                  trys:
 28603 0000253B 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 28604 0000253E 753C                    	jne	short tryx
 28605                                  
 28606                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28607                                  ;;ifdef	MULTI_CONFIG
 28608                                  ;       call    query_user              ; query the user if config_cmd
 28609                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 28610                                  ;       mov	byte [cs:newcmd],1
 28611                                  ;;endif
 28612                                  
 28613                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 28614                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28615                                  	;mov	byte [cs:command_line+1],0
 28616                                  	; 15/12/2022
 28617                                  	; ds = cs
 28618 00002540 C606[AA02]00            	mov	byte [command_line+1],0
 28619                                  
 28620 00002545 BF[6433]                        mov     di,commnd+1		; we already have the first char
 28621 00002548 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 28622                                  storeshell:
 28623 0000254B E8970A                  	call	getchr
 28624 0000254E 08C0                            or      al,al                   ; this is the normal case: "organize"
 28625 00002550 7419                            jz	short getshparms	; put a ZERO right after the filename
 28626                                  
 28627 00002552 3C20                            cmp     al," "                  ; this may happen if there are no args
 28628 00002554 7205                            jb	short endofshell	; I suppose...
 28629 00002556 8805                    	mov	[di],al
 28630 00002558 47                      	inc	di
 28631                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 28632                                          ;jb	short storeshell	; commnd (the filename)
 28633                                          ;jmp	short endofshell
 28634                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28635 00002559 EBF0                    	jmp	short storeshell
 28636                                  
 28637                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28638                                  ;getshparms:
 28639                                  ;	mov     byte [di],0		; zero-terminate the filename
 28640                                  ;	mov     di,command_line+1	; prepare to process the command-line
 28641                                  ;
 28642                                  ;parmloop:
 28643                                  ;	call	getchr
 28644                                  ;	cmp	al," "
 28645                                  ;	jb	short endofparms
 28646                                  ;	mov	[di],al
 28647                                  ;	inc	di
 28648                                  ;	cmp     di,command_line+126
 28649                                  ;	jb	short parmloop
 28650                                  ;endofparms:
 28651                                  ;	mov     cx,di
 28652                                  ;	sub     cx,command_line+1
 28653                                  ;	mov     [cs:command_line],cl
 28654                                  ;
 28655                                  ;endofshell:
 28656                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 28657                                  ;					; the command-line as the case may be)
 28658                                  ;skipline:
 28659                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28660                                  ;       je	short endofline		; the line: watch for ever-present LF
 28661                                  ;call	getchr
 28662                                  ;       jnc	short skipline		; keep it up as long as there are chars
 28663                                  ;
 28664                                  ;endofline:
 28665                                  ;       jmp     conflp
 28666                                  
 28667                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28668                                  endofshell:
 28669 0000255B C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 28670                                  					; the command-line as the case may be)
 28671 0000255E E8840A                  	call	getchr
 28672                                  skipline:
 28673 00002561 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28674 00002563 7403                    	je	short endofline		; the line: watch for ever-present LF
 28675 00002565 E87D0A                  	call	getchr
 28676                                  endofline:
 28677 00002568 E9E6F9                  	jmp     conflp
 28678                                  
 28679                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28680                                  getshparms:
 28681                                  	; 18/12/2022
 28682                                  	; al = 0
 28683 0000256B 8805                    	mov	[di],al ; 0
 28684                                  	;mov	byte [di],0		; zero-terminate the filename
 28685 0000256D BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 28686                                  parmloop:
 28687 00002570 E8720A                  	call	getchr
 28688 00002573 3C20                    	cmp	al," " ; 20h
 28689 00002575 72E4                    	jb	short endofshell
 28690 00002577 8805                    	mov	[di],al
 28691 00002579 47                      	inc	di
 28692 0000257A EBF4                    	jmp	short parmloop
 28693                                  
 28694                                  ;------------------------------------------------------------------------
 28695                                  ; fcbs command
 28696                                  ;------------------------------------------------------------------------
 28697                                  
 28698                                  ;************************************************************************
 28699                                  ; function: parse the parameters of fcbs= command.			*
 28700                                  ;									*
 28701                                  ; input :								*
 28702                                  ;	es:si -> parameters in command line.				*
 28703                                  ; output:								*
 28704                                  ;	set the variables fcbs,keep.					*
 28705                                  ;									*
 28706                                  ; subroutines to be called:						*
 28707                                  ;	sysinit_parse							*
 28708                                  ; logic:								*
 28709                                  ; {									*
 28710                                  ;	set di points to fcbs_parms;					*
 28711                                  ;	set dx,cx to 0; 						*
 28712                                  ;	while (end of command line)					*
 28713                                  ;	{ sysparse;							*
 28714                                  ;	  if (no error) then						*
 28715                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 28716                                  ;		   fcbs = result_val._$P_picked_val;			*
 28717                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 28718                                  ;		   keep = result_val._$P_picked_val;			*
 28719                                  ;	     }								*
 28720                                  ;	  else	/*error exit*/						*
 28721                                  ;	     error exit;						*
 28722                                  ;	};								*
 28723                                  ; };									*
 28724                                  ;************************************************************************
 28725                                  
 28726                                  tryx:
 28727 0000257C 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 28728                                          ;jne	short try1
 28729                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28730 0000257F 752F                    	jne	short tryy	; comment command
 28731                                  
 28732                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28733                                  ;;ifdef	MULTI_CONFIG
 28734                                  ;       call    query_user      ; query the user if config_cmd
 28735                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 28736                                  ;;endif
 28737                                  
 28738 00002581 BF[4D1D]                	mov	di,fcbs_parms
 28739 00002584 31C9                    	xor	cx,cx
 28740                                  	; 04/01/2023
 28741                                  	;mov	dx,cx
 28742                                  do98:
 28743 00002586 E8CF00                  	call	sysinit_parse
 28744                                          ; 04/01/2023
 28745                                  	;jnc	short if98	; parse error
 28746                                          ;call	badparm_p	;  and show messages and end the search loop.
 28747                                  	;jmp	short sr98
 28748                                  	;------------------------
 28749                                  	; 04/01/2023
 28750 00002589 724B                    	jc	short badparm_p_coff
 28751                                  if98:
 28752 0000258B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28753 0000258E 7412                    	je	short en98	; then end the $endloop
 28754                                  
 28755                                  	;;mov	al,[cs:rv_dword]
 28756                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28757                                  	; 15/12/2022
 28758                                  	; ds = cs
 28759 00002590 A0[CA1C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28760 00002593 83F901                  	cmp	cx,1		; the first positional?
 28761 00002596 7505                    	jne	short if102
 28762                                  	;mov	[cs:p_fcbs],al
 28763                                  	; 15/12/2022
 28764 00002598 A2[821D]                	mov	[p_fcbs],al
 28765                                  	;jmp	short en102
 28766 0000259B EBE9                    	jmp	short do98
 28767                                  if102:
 28768                                  	;mov	[cs:p_keep],al
 28769                                  	; 15/12/2022
 28770 0000259D A2[831D]                	mov	[p_keep],al
 28771                                  en102:
 28772 000025A0 EBE4                    	jmp	short do98
 28773                                  en98:
 28774                                  	; 15/12/2022
 28775                                  	; ds = cs
 28776 000025A2 A0[821D]                	mov	al,[p_fcbs]
 28777 000025A5 A2[9E02]                	mov	[FCBS],al
 28778 000025A8 C606[9F02]00            	mov	byte [KEEP],0
 28779                                  	;mov	al,[cs:p_fcbs]	 ; M017
 28780                                  	;mov	[cs:FCBS],al	 ; M017
 28781                                  	;mov	byte [cs:KEEP],0 ; M017
 28782                                  sr98:
 28783 000025AD E9C6F9                  	jmp	coff
 28784                                  
 28785                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28786                                  ;-------------------------------------------------------------------------
 28787                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28788                                  ;		line number
 28789                                  ;-------------------------------------------------------------------------
 28790                                  
 28791                                  tryy:
 28792 000025B0 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28793 000025B3 750B                    	jne	short try0
 28794                                  
 28795                                  donothing:
 28796                                  	; 15/12/2022
 28797                                  	; ds = cs
 28798 000025B5 FF0E[D603]              	dec	word [chrptr]
 28799 000025B9 FF06[D203]              	inc	word [count]
 28800                                  	; 02/11/2022
 28801                                  	;dec	word [cs:chrptr]
 28802                                  	;inc	word [cs:count]
 28803                                  
 28804 000025BD E9B6F9                  	jmp	coff
 28805                                  
 28806                                  ;------------------------------------------------------------------------
 28807                                  ; rem command
 28808                                  ;------------------------------------------------------------------------
 28809                                  
 28810                                  try0:				; do nothing with this line.
 28811 000025C0 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 28812 000025C3 74F0                    	je	short donothing
 28813                                  
 28814                                  ; 07/04/2019 - Retro DOS v4.0
 28815                                  
 28816                                  ;-----------------------------------------------------------------------
 28817                                  ; switches command
 28818                                  ;-----------------------------------------------------------------------
 28819                                  
 28820                                  ;***********************************************************************
 28821                                  ;								       *
 28822                                  ; function: parse the option switches specified.		       *
 28823                                  ; note - this command is intended for the future use also.	       *
 28824                                  ; when we need to set system data flag,use this command.	       *
 28825                                  ;								       *
 28826                                  ; input :							       *
 28827                                  ;	es:si -> parameters in command line.			       *
 28828                                  ; output:							       *
 28829                                  ;	p_swit_k set if /k option chosen.			       *
 28830                                  ;								       *
 28831                                  ; subroutines to be called:					       *
 28832                                  ;	sysinit_parse						       *
 28833                                  ; logic:							       *
 28834                                  ; {								       *
 28835                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 28836                                  ;	set dx,cx to 0; 					       *
 28837                                  ;	while (end of command line)				       *
 28838                                  ;	{ sysinit_parse;					       *
 28839                                  ;	  if (no error) then					       *
 28840                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28841                                  ;		    p_swit_k = 1				       *
 28842                                  ;	       endif						       *
 28843                                  ;	  else {show error message;error exit}			       *
 28844                                  ;	};							       *
 28845                                  ; };								       *
 28846                                  ;								       *
 28847                                  ;***********************************************************************
 28848                                  
 28849                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28850                                  
 28851                                  try1:
 28852 000025C5 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28853 000025C8 7402                    	je	short do_try1	; switches= command entered?
 28854                                  skip_it5:
 28855                                  	;jmp	tryv
 28856                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28857 000025CA EB7A                    	jmp	tryz
 28858                                  
 28859                                  do_try1:
 28860                                  
 28861                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28862                                  ;;ifdef	MULTI_CONFIG
 28863                                  ;       call    query_user      ; query the user if config_cmd
 28864                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28865                                  ;;endif
 28866                                  
 28867 000025CC BF[E71D]                	mov	di,swit_parms
 28868 000025CF 31C9                    	xor	cx,cx
 28869                                  	; 04/01/2023
 28870                                  	;mov	dx,cx
 28871                                  do110:
 28872 000025D1 E88400                  	call	sysinit_parse
 28873 000025D4 7306                    	jnc	short if110	; parse error
 28874                                  	;call	badparm_p	;  and show messages and end the search loop.
 28875                                  	;jmp	short sr110
 28876                                  	; -----------------------
 28877                                  	; 04/01/2023
 28878                                  badparm_p_coff:
 28879 000025D6 E8AA00                  	call	badparm_p
 28880 000025D9 E99AF9                  	jmp	coff
 28881                                  	;------------------------
 28882                                  if110:
 28883 000025DC 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28884 000025DF 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28885                                  
 28886                                  	; 15/12/2022
 28887                                  	; ds = cs
 28888                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28889                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28890 000025E1 813E[C81C][FF1D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28891 000025E7 7507                    	jne	short if115	;				;M059
 28892                                  	; 15/12/2022
 28893 000025E9 C606[1A1E]01            	mov	byte [p_swit_k],1
 28894                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28895 000025EE EBE1                    	jmp	short do110
 28896                                  if115:	
 28897                                  	; 15/12/2022							;M059
 28898                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28899                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28900 000025F0 813E[C81C][0B1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28901 000025F6 7507                    	jne	short if116					;M059 M063
 28902                                  	; 15/12/2022
 28903 000025F8 C606[1B1E]01            	mov	byte [p_swit_t],1
 28904                                  	;mov	byte [cs:p_swit_t],1				;M059
 28905 000025FD EBD2                    	jmp	short do110					;M059
 28906                                  if116:
 28907                                  	; 15/12/2022
 28908                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28909                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28910 000025FF 813E[C81C][171E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28911 00002605 75CA                    	jne	short do110					;M063
 28912                                  	; 15/12/2022
 28913 00002607 C606[1C1E]01            	mov	byte [p_swit_w],1
 28914                                  	;mov	byte [cs:p_swit_w],1				;M063
 28915 0000260C EBC3                    	jmp	short do110					;M063
 28916                                  en110:
 28917                                  	; 15/12/2022
 28918                                  	; ds = cs
 28919 0000260E 803E[1A1E]01            	cmp	byte [p_swit_k],1
 28920                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28921 00002613 1E                      	push	ds
 28922                                  	;;mov	ax,Bios_Data
 28923                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28924                                  	; 21/10/2022
 28925 00002614 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28926 00002617 8ED8                    	mov	ds,ax
 28927 00002619 750A                    	jne	short if117
 28928 0000261B C606[DE04]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 28929 00002620 C606[DF04]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 28930                                  if117:
 28931                                  	; 15/12/2022
 28932                                  	; ds <> cs
 28933 00002625 2EA0[1B1E]              	mov	al,[cs:p_swit_t]				;M059
 28934 00002629 A2[EB04]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 28935                                  
 28936 0000262C 2E803E[1C1E]00          	cmp	byte [cs:p_swit_w],0				;M063
 28937 00002632 740E                    	je	short skip_dos_flag				;M063
 28938 00002634 06                      	push	es
 28939 00002635 53                      	push	bx
 28940 00002636 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 28941 00002638 CD21                    	int	21h						;M063
 28942                                  			; DOS - 2+ internal - GET LIST OF LISTS
 28943                                  			; Return: ES:BX -> DOS list of lists
 28944                                  	;or	bytes [es:86h],2
 28945 0000263A 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 28946 00002640 5B                      	pop	bx
 28947 00002641 07                      	pop	es
 28948                                  skip_dos_flag:							;M063
 28949 00002642 1F                      	pop	ds
 28950                                  sr110:
 28951 00002643 E930F9                  	jmp	coff
 28952                                  
 28953                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28954                                  ;
 28955                                  ;tryv:
 28956                                  ;
 28957                                  ;;ifdef	MULTI_CONFIG
 28958                                  ;;------------------------------------------------------------------------
 28959                                  ;; set command (as in "set var=value<cr/lf>")
 28960                                  ;;------------------------------------------------------------------------
 28961                                  ;
 28962                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 28963                                  ;       jne	short tryn
 28964                                  ;       call    query_user      ; query the user if config_cmd
 28965                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 28966                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28967                                  ;       jnc	short sr110	; no error
 28968                                  ;err:    
 28969                                  ;	call    error_line      ; whoops, display error in line XXX
 28970                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 28971                                  ;
 28972                                  ;;------------------------------------------------------------------------
 28973                                  ;; numlock command (as in "numlock=on|off")
 28974                                  ;;------------------------------------------------------------------------
 28975                                  ;tryn:
 28976                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 28977                                  ;       jne	short tryy            ;
 28978                                  ;       call    query_user      ; query thye user if config_cmd
 28979                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 28980                                  ;       call    set_numlock
 28981                                  ;       jc	short err
 28982                                  ;       jmp	short sr110	; all done
 28983                                  ;
 28984                                  ;;endif	;MULTI_CONFIG
 28985                                  
 28986                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28987                                  ;;-------------------------------------------------------------------------
 28988                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 28989                                  ;;		line number
 28990                                  ;;-------------------------------------------------------------------------
 28991                                  ;
 28992                                  ;tryy:
 28993                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 28994                                  ;	jne	short try0
 28995                                  ;donothing:
 28996                                  ;	dec	word [chrptr]
 28997                                  ;	inc	word [count]
 28998                                  ;	jmp	coff
 28999                                  ;
 29000                                  ;;------------------------------------------------------------------------
 29001                                  ;; rem command
 29002                                  ;;------------------------------------------------------------------------
 29003                                  ;
 29004                                  ;try0:				;do nothing with this line.
 29005                                  ;	cmp     ah,CONFIG_REM ; '0'
 29006                                  ;	je	short donothing
 29007                                  
 29008                                  ; 30/10/2022
 29009                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 29010                                  
 29011                                  ;------------------------------------------------------------------------
 29012                                  ; bogus command
 29013                                  ;------------------------------------------------------------------------
 29014                                  
 29015                                  tryz:
 29016 00002646 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 29017                                  	;je	short donothing
 29018                                  	; 02/11/2022
 29019 00002649 740A                    	je	short tryz_donothing
 29020                                  
 29021 0000264B FF0E[D603]              	dec	word [chrptr]
 29022 0000264F FF06[D203]              	inc	word [count]
 29023 00002653 EB22                    	jmp	short badop
 29024                                  
 29025                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 29026                                  tryz_donothing:
 29027 00002655 E95DFF                  	jmp	donothing
 29028                                  
 29029                                  ; 07/04/2019 - Retro DOS v4.0
 29030                                  
 29031                                  ;------------------------------------------------------------------------------
 29032                                  
 29033                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29034                                  ;
 29035                                  ;
 29036                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 29037                                  ;;
 29038                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 29039                                  ;
 29040                                  ;CheckProtmanArena:
 29041                                  ;	push	es
 29042                                  ;	mov	ax,[cs:area]	; get our arena header
 29043                                  ;	dec	ax
 29044                                  ;	mov	es,ax
 29045                                  ;	add	ax,[es:3]	; find end of arena
 29046                                  ;	inc	ax
 29047                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 29048                                  ;	ja	short CheckProtmanDone
 29049                                  ;
 29050                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 29051                                  ;CheckProtmanDone:
 29052                                  ;	pop	es
 29053                                  ;	retn
 29054                                  
 29055                                  ;------------------------------------------------------------------------------
 29056                                  
 29057                                  sysinit_parse:
 29058                                  
 29059                                  ;------------------------------------------------------------------------------
 29060                                  ;set up registers for sysparse
 29061                                  ;in)	es:si -> command line in confbot
 29062                                  ;	di -> offset of the parse control definition.
 29063                                  ;
 29064                                  ;out)	calls sysparse.
 29065                                  ;	carry will set if parse error.
 29066                                  ;	*** the caller should check the eol condition by looking at ax
 29067                                  ;	*** after each call.
 29068                                  ;	*** if no parameters are found,then ax will contain a error code.
 29069                                  ;	*** if the caller needs to look at the synomym@ of the result,
 29070                                  ;	***  the caller should use cs:@ instead of es:@.
 29071                                  ;	cx register should be set to 0 at the first time the caller calls this
 29072                                  ;	 procedure.
 29073                                  ;	ax - exit code
 29074                                  ;	bl - terminated delimeter code
 29075                                  ;	cx - new positional ordinal
 29076                                  ;	si - set to pase scanned operand
 29077                                  ;	dx - selected result buffer
 29078                                  ;------------------------------------------------------------------------------
 29079                                  
 29080                                  	; 24/10/2022
 29081 00002658 06                      	push	es			;save es,ds
 29082 00002659 1E                      	push	ds
 29083                                  
 29084                                  	; 09/09/2023
 29085                                  	; ds = cs
 29086 0000265A 8C06[1314]              	mov	[badparm_seg],es	;save the pointer to the parm
 29087 0000265E 8936[1114]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 29088                                  
 29089 00002662 06                      	push	es
 29090 00002663 1F                      	pop	ds			;now ds:si -> command line
 29091                                  
 29092 00002664 0E                      	push	cs
 29093 00002665 07                      	pop	es			;now es:di -> control definition
 29094                                  
 29095                                  	; 09/09/2023
 29096                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 29097                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 29098                                  
 29099                                  	;mov	dx,0
 29100                                  	; 04/01/2023
 29101 00002666 29D2                    	sub	dx,dx ; 0
 29102 00002668 E850EE                  	call	SysParse
 29103                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 29104                                  	; 06/09/2023
 29105 0000266B 21C0                    	and	ax,ax
 29106                                  
 29107                                  ;**cas note: when zero true after cmp, carry clear
 29108                                  
 29109                                  	;je	short ll4
 29110                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 29111                                  	; 12/12/2022
 29112 0000266D 7405                    	je	short en4 ; cf=0
 29113 0000266F 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 29114                                  	;jne	short if4
 29115                                  	; 12/12/2022
 29116 00002672 7400                    	je	short en4 ; cf=0
 29117                                  	; 06/09/2023
 29118                                  	; cf=1
 29119                                  
 29120                                  ; 12/12/2022
 29121                                  ;ll4:
 29122                                  ;	; 12/12/2022
 29123                                  ;	; cf=0
 29124                                  ;	;clc
 29125                                  ;	jmp	short en4
 29126                                  
 29127                                  if4:
 29128                                  	; 24/10/2022
 29129                                  	; 06/09/2023 (cf=1)
 29130                                  	;stc
 29131                                  en4:
 29132 00002674 1F                      	pop	ds
 29133 00002675 07                      	pop	es
 29134 00002676 C3                      	retn
 29135                                  
 29136                                  ; 11/12/2022
 29137                                  %if 0
 29138                                  
 29139                                  ;----------------------------------------------------------------------------
 29140                                  ;
 29141                                  ; procedure : badop_p
 29142                                  ;
 29143                                  ;             same thing as badop,but will make sure to set ds register back
 29144                                  ;             to sysinitseg and return back to the caller.
 29145                                  ;
 29146                                  ;----------------------------------------------------------------------------
 29147                                  
 29148                                  badop_p:
 29149                                  	push	cs
 29150                                  	pop	ds		;set ds to configsys seg.
 29151                                  	mov	dx,badopm
 29152                                  	call	print
 29153                                          ;call	error_line
 29154                                  	;retn
 29155                                  	; 11/12/2022
 29156                                  	jmp	error_line
 29157                                  
 29158                                  %endif
 29159                                  
 29160                                  ;----------------------------------------------------------------------------
 29161                                  ;
 29162                                  ; label : badop
 29163                                  ;
 29164                                  ;----------------------------------------------------------------------------
 29165                                  
 29166                                  badop:	
 29167 00002677 BA[3A36]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 29168 0000267A E8100C                  	call	print
 29169 0000267D E82B00                  	call	error_line	;show "error in config.sys ..." .
 29170 00002680 E9F3F8                  	jmp	coff
 29171                                  
 29172                                  ;----------------------------------------------------------------------------
 29173                                  ;
 29174                                  ; procedure : badparm_p
 29175                                  ;
 29176                                  ;             show "bad command or parameters - xxxxxx"
 29177                                  ;             in badparm_seg,badparm_off -> xxxxx
 29178                                  ;
 29179                                  ;----------------------------------------------------------------------------
 29180                                  
 29181                                  	; 24/10/2022
 29182                                  badparm_p:
 29183                                  	; 11/12/2022
 29184                                  	; ds = cs
 29185                                  	; 11/12/2022
 29186                                  	;push	ds ; *
 29187 00002683 52                      	push	dx
 29188 00002684 56                      	push	si
 29189                                  
 29190                                  	; 11/12/2022
 29191                                  	; ds = cs
 29192                                  	;push	cs
 29193                                  	;pop	ds
 29194                                  
 29195 00002685 BA[6136]                	mov	dx,badparm
 29196 00002688 E8020C                  	call	print			; "bad command or parameters - "
 29197 0000268B C536[1114]              	lds	si,[badparm_ptr]
 29198                                  
 29199                                  ;	print "xxxx" until cr.
 29200                                  
 29201                                  do1:
 29202 0000268F 8A14                    	mov	dl,[si]			; get next character
 29203 00002691 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 29204 00002694 7407                    	je	short en1		; exit loop if so
 29205                                  
 29206 00002696 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 29207 00002698 CD21                    	int	21h			; display character
 29208 0000269A 46                      	inc	si			; next character
 29209 0000269B EBF2                    	jmp	short do1
 29210                                  en1:
 29211 0000269D 0E                      	push	cs
 29212 0000269E 1F                      	pop	ds
 29213                                  
 29214 0000269F BA[5E36]                	mov	dx,crlfm
 29215 000026A2 E8E80B                  	call	print
 29216 000026A5 E80300                  	call	error_line
 29217                                  
 29218 000026A8 5E                      	pop	si
 29219 000026A9 5A                      	pop	dx
 29220                                  	; 11/12/2022
 29221                                  	;pop	ds ; *
 29222                                  badparmp_ret:
 29223 000026AA C3                      	retn
 29224                                  
 29225                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 29226                                  %if 0
 29227                                  
 29228                                  ;----------------------------------------------------------------------------
 29229                                  ;
 29230                                  ; procedure : getchr
 29231                                  ;
 29232                                  ;----------------------------------------------------------------------------
 29233                                  
 29234                                  	; 24/10/2022
 29235                                  getchr:
 29236                                  	; 12/12/2022
 29237                                  	;push	cx
 29238                                  	;mov	cx,[count]
 29239                                  	;jcxz	nochar
 29240                                  	; 12/12/2022
 29241                                  	cmp	word [count],1 
 29242                                  	jb	short nochar ; cf=1 ([count] = 0)
 29243                                  	
 29244                                  	mov	si,[chrptr]
 29245                                  	mov	al,[es:si]
 29246                                  	dec	word [count]
 29247                                  	inc	word [chrptr]
 29248                                  	; 12/12/202
 29249                                  	; cf=0
 29250                                  	;clc
 29251                                  ;get_ret:
 29252                                  	;pop	cx
 29253                                  	;retn
 29254                                  nochar: 
 29255                                  	; 12/12/2022
 29256                                  	; cf=1
 29257                                  	;stc
 29258                                  	;jmp	short get_ret
 29259                                  	
 29260                                  	retn
 29261                                  %endif
 29262                                  
 29263                                  ; 11/12/2022
 29264                                  %if 0
 29265                                  
 29266                                  ;----------------------------------------------------------------------------
 29267                                  ;
 29268                                  ; procedure : incorrect_order
 29269                                  ;
 29270                                  ;             show "incorrect order in config.sys ..." message.
 29271                                  ;
 29272                                  ;----------------------------------------------------------------------------
 29273                                  
 29274                                  incorrect_order:
 29275                                  	mov	dx,badorder
 29276                                  	call	print
 29277                                  	call	showlinenum
 29278                                  	retn
 29279                                  
 29280                                  %endif
 29281                                  
 29282                                  ;----------------------------------------------------------------------------
 29283                                  ;
 29284                                  ; procedure : error_line
 29285                                  ;
 29286                                  ;             show "error in config.sys ..." message.
 29287                                  ;
 29288                                  ;----------------------------------------------------------------------------
 29289                                  
 29290                                  	; 11/12/2022
 29291                                  	; 24/10/2022
 29292                                  error_line:
 29293                                  	; 11/12/2022
 29294                                  	; ds = cs
 29295                                  	;push	cs
 29296                                  	;pop	ds
 29297                                  
 29298 000026AB BA[9637]                	mov	dx,errorcmd
 29299 000026AE E8DC0B                  	call	print
 29300                                  	;call	showlinenum
 29301                                  	;retn
 29302                                  	; 11/12/2022
 29303                                  	;jmp	short shortlinemum
 29304                                  
 29305                                  ;----------------------------------------------------------------------------
 29306                                  ;
 29307                                  ; procedure : showlinenum
 29308                                  ;
 29309                                  ; convert the binary linecount to decimal ascii string in showcount
 29310                                  ; and display showcount at the current curser position.
 29311                                  ; in.) linecount
 29312                                  ;
 29313                                  ; out) the number is printed.
 29314                                  ;
 29315                                  ;----------------------------------------------------------------------------
 29316                                  
 29317                                  	; 11/12/2022
 29318                                  	; ds = cs
 29319                                  	; 24/10/2022
 29320                                  showlinenum:
 29321 000026B1 06                      	push	es
 29322                                  	; 11/12/2022
 29323                                  	;push	ds
 29324 000026B2 57                      	push	di
 29325                                  
 29326 000026B3 0E                      	push	cs
 29327 000026B4 07                      	pop	es		; es=cs
 29328                                  
 29329                                  	; 11/12/2022
 29330                                  	;push	cs
 29331                                  	;pop	ds
 29332                                  
 29333 000026B5 BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 29334 000026B8 B90A00                  	mov	cx,10		; decimal divide factor
 29335                                  	;mov	ax,[cs:linecount]
 29336                                  	; 11/12/2022
 29337 000026BB A1[2B03]                	mov	ax,[linecount]
 29338                                  sln_loop:
 29339                                  	; 11/12/2022
 29340 000026BE 39C8                    	cmp	ax,cx ; < 10 ?
 29341                                  	;cmp	ax,10		; < 10?
 29342 000026C0 720C                    	jb	short sln_last
 29343                                  
 29344 000026C2 31D2                    	xor	dx,dx
 29345 000026C4 F7F1                    	div	cx	; cx = 10
 29346 000026C6 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 29347 000026C9 8815                    	mov	[di],dl
 29348 000026CB 4F                      	dec	di
 29349 000026CC EBF0                    	jmp	short sln_loop
 29350                                  
 29351                                  sln_last:
 29352 000026CE 0C30                    	or	al,30h	; "0"
 29353 000026D0 8805                    	mov	[di],al
 29354 000026D2 89FA                    	mov	dx,di
 29355 000026D4 E8B60B                  	call	print		; show it.
 29356 000026D7 5F                      	pop	di
 29357                                  	; 11/12/2022
 29358                                  	;pop	ds
 29359 000026D8 07                      	pop	es
 29360 000026D9 C3                      	retn
 29361                                  
 29362                                  ; 07/04/2019 - Retro DOS v4.0
 29363                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 29364                                  
 29365                                  ;----------------------------------------------------------------------------
 29366                                  ;
 29367                                  ; procedure : ProcDOS
 29368                                  ;
 29369                                  ;	Process the result of DOS= parsing
 29370                                  ;
 29371                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 29372                                  ;				= 2 for DOS=LOW
 29373                                  ;				= 3 for DOS=UMB
 29374                                  ;				= 4 for DOS=NOUMB
 29375                                  ;----------------------------------------------------------------------------
 29376                                  
 29377                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 29378                                  	; (SYTSINIT:2AB5h)
 29379                                  ProcDOS:
 29380                                  	; 01/01/2023
 29381                                  	; ds = cs
 29382 000026DA 30E4                    	xor	ah,ah
 29383                                  	;;mov	al,[cs:result_val_itag]
 29384                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 29385                                  	; 04/01/2023
 29386 000026DC A0[C71C]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 29387 000026DF 48                      	dec	ax
 29388 000026E0 7415                    	jz	short pd_hi
 29389 000026E2 48                      	dec	ax
 29390 000026E3 740E                    	jz	short pd_lo
 29391 000026E5 48                      	dec	ax
 29392 000026E6 7405                    	jz	short pd_umb
 29393                                  	;;mov	byte [cs:DevUMB],0
 29394                                  	; 18/12/2022
 29395                                  	;mov	byte [cs:DevUMB],ah ; 0
 29396                                  	; 01/01/2023
 29397 000026E8 8826[6E1E]              	mov	byte [DevUMB],ah ; 0
 29398 000026EC C3                      	retn
 29399                                  pd_umb:
 29400                                  	; 04/01/2023
 29401 000026ED C606[6E1E]FF            	mov	byte [DevUMB],0FFh
 29402                                  	;mov	byte [cs:DevUMB],0FFh
 29403 000026F2 C3                      	retn
 29404                                  pd_lo:
 29405                                  	; 04/01/2023
 29406 000026F3 A2[6A02]                	mov	[runhigh],al ; 0
 29407                                  	; 18/12/2022
 29408                                  	;mov	[cs:runhigh],al ; 0
 29409                                  	;;mov	byte [cs:runhigh],0
 29410 000026F6 C3                      	retn
 29411                                  pd_hi:
 29412                                  	; 04/01/2023
 29413 000026F7 C606[6A02]FF            	mov	byte [runhigh],0FFh
 29414                                  	;mov	byte [cs:runhigh],0FFh
 29415                                  limx:	; 11/12/2022
 29416 000026FC C3                      	retn
 29417                                  
 29418                                  ;----------------------------------------------------------------------------
 29419                                  ;
 29420                                  ; procedure : LieInt12Mem
 29421                                  ;
 29422                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 29423                                  ;		alloclim set to the limit of low memory.
 29424                                  ;
 29425                                  ;	Output : none
 29426                                  ;
 29427                                  ;	Changes the ROM BIOS variable which stores the total low memory
 29428                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 29429                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 29430                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 29431                                  ;	converted into Ks and stored in 40:13h
 29432                                  ;
 29433                                  ;----------------------------------------------------------------------------
 29434                                  
 29435                                  LieInt12Mem:
 29436                                  	; 11/12/2022
 29437                                  	; ds = cs
 29438 000026FD A1[A302]                	mov	ax,[ALLOCLIM]
 29439                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 29440                                  					; assuming that it is 3Com
 29441 00002700 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 29442 00002703 740A                    	jz	short lim_set		; yes, lie to him differently
 29443                                  	; 13/05/2019
 29444                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 29445                                  	;je	short limx		; no, don't lie
 29446                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 29447                                  	; 11/12/2022
 29448                                  	; ds = cs
 29449 00002705 803E[7D1E]00            	cmp	byte [DeviceHi],0
 29450 0000270A 74F0                    	je	short limx
 29451 0000270C A1[641E]                	mov	ax,[DevLoadEnd]
 29452                                  lim_set:
 29453                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29454                                  	; 11/12/2022
 29455                                  	;call	SetInt12Mem
 29456                                  ;limx:
 29457                                  	;retn
 29458                                  	
 29459                                  	;jmp	short SetInt12Mem 
 29460                                  
 29461                                  ;----------------------------------------------------------------------------
 29462                                  ;
 29463                                  ; procedure : SetInt12Mem
 29464                                  ;
 29465                                  ;	Input : AX = Memory size to be set (in paras)
 29466                                  ;	Output : none
 29467                                  ;
 29468                                  ;	Sets the variable 40:13 to the memory size passed in AX
 29469                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 29470                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 29471                                  ;	restoring the value of 40:13
 29472                                  ;
 29473                                  ;----------------------------------------------------------------------------
 29474                                  
 29475                                  	; 01/11/2022
 29476                                  SetInt12Mem:
 29477 0000270F 1E                      	push	ds
 29478 00002710 BB4000                  	mov	bx,40h
 29479 00002713 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 29480 00002715 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 29481 00002719 2E891E[811E]            	mov	[cs:OldInt12Mem],bx	; save it
 29482 0000271E B106                    	mov	cl,6
 29483 00002720 D3E8                    	shr	ax,cl			; convert paras into Ks
 29484 00002722 A31300                  	mov	[13h],ax		; Lie
 29485 00002725 2EC606[801E]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 29486 0000272B 1F                      	pop	ds
 29487                                  ;limx:
 29488 0000272C C3                      	retn
 29489                                  
 29490                                  ;----------------------------------------------------------------------------
 29491                                  ;
 29492                                  ; procedure : TrueInt12Mem
 29493                                  ;
 29494                                  ;	Input : Int12Lied = 0 if we are not lying currently
 29495                                  ;			  = 0ffh if we are lying
 29496                                  ;		OldInt12Mem = Saved value of 40:13h
 29497                                  ;
 29498                                  ;	Output : none
 29499                                  ;
 29500                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 29501                                  ;	and resets the flag which indicates that we were lying
 29502                                  ;
 29503                                  ;----------------------------------------------------------------------------
 29504                                  
 29505                                  TrueInt12Mem:
 29506                                  	; 11/12/2022
 29507                                  	; ds = cs
 29508 0000272D 803E[801E]00            	cmp	byte [Int12Lied],0
 29509                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 29510                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 29511                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 29512 00002732 7412                    	je	short timx		; no, we weren't
 29513                                  	; 18/12/2022
 29514 00002734 B84000                  	mov	ax,40h
 29515 00002737 8826[801E]              	mov	[Int12Lied],ah ; 0
 29516                                  	;mov	byte [Int12Lied],0
 29517                                  	;mov	byte [cs:Int12Lied],0
 29518 0000273B 1E                      	push	ds
 29519                                  	;mov	ax,40h
 29520 0000273C 8ED8                    	mov	ds,ax
 29521 0000273E 2EA1[811E]              	mov	ax,[cs:OldInt12Mem]
 29522 00002742 A31300                  	mov	[13h],ax		; restore INT 12 memory
 29523 00002745 1F                      	pop	ds
 29524                                  timx:
 29525 00002746 C3                      	retn
 29526                                  
 29527                                  ;----------------------------------------------------------------------------
 29528                                  ;
 29529                                  ; procedure : IsIt3Com?
 29530                                  ;
 29531                                  ;	Input : DevEntry = Seg:0 of device driver
 29532                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 29533                                  ;		 else Zero flag is reset
 29534                                  ;
 29535                                  ;----------------------------------------------------------------------------
 29536                                  
 29537                                  IsIt3Com:
 29538                                  	; 11/12/2022
 29539                                  	; ds = cs
 29540 00002747 1E                      	push	ds
 29541 00002748 06                      	push	es
 29542 00002749 56                      	push	si
 29543                                  	; 11/12/2022
 29544 0000274A C536[661E]              	lds	si,[DevEntry]
 29545                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 29546 0000274E 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 29547 00002751 0E                      	push	cs
 29548 00002752 07                      	pop	es
 29549 00002753 BF[831E]                	mov	di,ThreeComName
 29550 00002756 B90800                  	mov	cx,8			; name length
 29551 00002759 F3A6                    	rep	cmpsb
 29552 0000275B 5E                      	pop	si
 29553 0000275C 07                      	pop	es
 29554 0000275D 1F                      	pop	ds
 29555 0000275E C3                      	retn
 29556                                  
 29557                                  ;M020 : BEGIN
 29558                                  ;----------------------------------------------------------------------------
 29559                                  
 29560                                  UpdatePDB:
 29561 0000275F 1E                      	push	ds
 29562 00002760 B462                    	mov	ah,62h
 29563 00002762 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 29564 00002764 8EDB                    	mov	ds,bx
 29565 00002766 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 29566                                  	;mov	[2],bx
 29567 0000276B 891E0200                	mov	[PDB.BLOCK_LEN],bx
 29568 0000276F 1F                      	pop	ds
 29569 00002770 C3                      	retn
 29570                                  
 29571                                  ; M020 : END
 29572                                  
 29573                                  ;----------------------------------------------------------------------------
 29574                                  
 29575                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29576                                  
 29577                                  %if 0
 29578                                  
 29579                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 29580                                  ;include highexit.inc	; umb's, etc
 29581                                  
 29582                                  ; ----------------------------------------------------------------------
 29583                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 29584                                  ; ----------------------------------------------------------------------
 29585                                  ; 07/04/2019 - Retro DOS v4.0
 29586                                  
 29587                                  ;******************************************************************************
 29588                                  ;
 29589                                  ; This file contains routines needed to parse and implement user-given
 29590                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 29591                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 29592                                  ; the variables in highvar.inc, for use by the rest of the routines.
 29593                                  ;
 29594                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 29595                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 29596                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 29597                                  ;    DH/LH module opts
 29598                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 29599                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 29600                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 29601                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 29602                                  ; available during the load.
 29603                                  ;
 29604                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 29605                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 29606                                  ; upper-memory block which was not specified by the user... in addition, if
 29607                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 29608                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 29609                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 29610                                  ; free any UMBs so allocated.
 29611                                  ;
 29612                                  ; When a device driver loads, there is the additional problem of allocating its
 29613                                  ; initial load site; this should be restricted to the first UMB specified on
 29614                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 29615                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 29616                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 29617                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 29618                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 29619                                  ;
 29620                                  ;******************************************************************************
 29621                                  
 29622                                  SWTCH	equ	'/'		; Switch character
 29623                                  
 29624                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 29625                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 29626                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 29627                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 29628                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 29629                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 29630                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 29631                                  
 29632                                  CR	equ	0Dh		; Carriage Return
 29633                                  LF	equ	0Ah		; Line Feed
 29634                                  TAB	equ	09h		; Tab character (^I)
 29635                                  
 29636                                  ; -----------------------------------------------------------------------------
 29637                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 29638                                  ; -----------------------------------------------------------------------------
 29639                                  ; ENTRY:       None
 29640                                  ; EXIT:        Variables listed in highvar.inc are initialized
 29641                                  ; ERROR EXIT:  None
 29642                                  ; USES:        Flags, variables in highvar.inc
 29643                                  ; -----------------------------------------------------------------------------
 29644                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 29645                                  ; are largely ignored, but it is initialized nonetheless.
 29646                                  ; -----------------------------------------------------------------------------
 29647                                  
 29648                                  InitVar:
 29649                                  	;pushreg <ax, cx, di, es>
 29650                                  	push	ax
 29651                                  	push	cx
 29652                                  	push	di
 29653                                  	push	es
 29654                                  
 29655                                  	;dataseg es			;Point ES into appropriate data segment
 29656                                  	push	cs
 29657                                  	pop	es
 29658                                  
 29659                                  	xor	ax,ax
 29660                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 29661                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 29662                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 29663                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 29664                                  					;Later is the # of the 1st spec'd UMB
 29665                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 29666                                  
 29667                                  	cld
 29668                                  
 29669                                  	mov	cx,MAXUMB ; 16		;For each entry
 29670                                  	mov	di,UmbUsed		;on the UmbUsed array,
 29671                                  	rep	stosb			;	Store 0
 29672                                  
 29673                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 29674                                  	mov	di,UmbSize		;on the UmbSize array,
 29675                                  	rep	stosw			;	Store 0
 29676                                  
 29677                                  	;normseg es			; Return ES
 29678                                  
 29679                                  	;popreg	<es, di, cx, ax>
 29680                                  	pop	es
 29681                                  	pop	di
 29682                                  	pop	cx
 29683                                  	pop	ax	 	
 29684                                  
 29685                                  	retn
 29686                                  
 29687                                  ; -----------------------------------------------------------------------------
 29688                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 29689                                  ; -----------------------------------------------------------------------------
 29690                                  ; ENTRY   : None
 29691                                  ; EXIT    : None
 29692                                  ; ERROR   : None
 29693                                  ; USES    : Flags, fm_umb, fm_strat
 29694                                  ; -----------------------------------------------------------------------------
 29695                                  
 29696                                  FixMem:
 29697                                  	push	ax
 29698                                  	push	bx
 29699                                  	push	cx
 29700                                  	push	dx
 29701                                  	push	es
 29702                                  
 29703                                  	call	fm_link		; Link in UMBs
 29704                                  
 29705                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 29706                                  	jc	short fmX	; (if couldn't get it, leave now).
 29707                                  
 29708                                  	mov	es,ax		; It returns in AX, so move it to ES.
 29709                                  
 29710                                  ; - Walk MCB Chain ------------------------------------------------------------
 29711                                  
 29712                                  	xor	dx,dx		; We're keeping the address of the last MCB
 29713                                  	mov 	cx,dx		; in CX... and the last owner
 29714                                  	inc	dx		; in dx as we go through the loop:
 29715                                  
 29716                                  ; ------------------------------------------
 29717                                  ; FM10--DX  = last MCB's owner's PSP address
 29718                                  ;       CX  = last MCB's address (segment)
 29719                                  ; ------------------------------------------
 29720                                  
 29721                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 29722                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 29723                                  	or	bx,dx			; dx was owner of previous MCB
 29724                                  	jnz	short fm30		; If not both zero, don't cat.
 29725                                  
 29726                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 29727                                  
 29728                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 29729                                  	mov	es,cx			; Go back to prev MCB's address
 29730                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 29731                                  
 29732                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 29733                                  	;add	bx,1			; And add one for the header
 29734                                  	; 14/08/2023
 29735                                  	inc	bx
 29736                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 29737                                  
 29738                                  	; ---------------------------------------------------------------------
 29739                                  
 29740                                  fm30:	mov	cx,es			; Put this address on the stack
 29741                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 29742                                  
 29743                                  	mov	bx,es			; Move to the next MCB
 29744                                  	add	bx,[es:ARENA.SIZE]
 29745                                  	inc	bx
 29746                                  	mov	es,bx
 29747                                  
 29748                                  	;cmp	al,'Z'
 29749                                  	cmp	al,arena_signature_end
 29750                                  	jne	short fm10		; If signature != 'Z', there are more.
 29751                                  fmX:	
 29752                                  	call	fm_unlink		; Unlink UMBs
 29753                                  
 29754                                  	pop	es
 29755                                  	pop	dx
 29756                                  	pop	cx
 29757                                  	pop	bx
 29758                                  	pop	ax
 29759                                  
 29760                                  	retn
 29761                                  
 29762                                  ; -----------------------------------------------------------------------------
 29763                                  ;*** fm_link - links UMBs not already linked in
 29764                                  ; -----------------------------------------------------------------------------
 29765                                  ; ENTRY:    None
 29766                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 29767                                  ; ERROR:    None
 29768                                  ; USES:     AX, BX, fm_umb
 29769                                  ; -----------------------------------------------------------------------------
 29770                                  
 29771                                  fm_link:
 29772                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 29773                                  	int	21h			; Current link-state is now in al
 29774                                  
 29775                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 29776                                  	;
 29777                                  	;push	es
 29778                                  	;push	cs
 29779                                  	;pop	es
 29780                                  	;mov	[es:fm_umb],al
 29781                                  	;pop	es
 29782                                  	
 29783                                  	mov	[cs:fm_umb],al
 29784                                  
 29785                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29786                                  	mov	bx,1
 29787                                  	int	21h
 29788                                  	retn
 29789                                  
 29790                                  ; -----------------------------------------------------------------------------
 29791                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 29792                                  ; -----------------------------------------------------------------------------
 29793                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 29794                                  ; EXIT:     None
 29795                                  ; ERROR:    None
 29796                                  ; USES:     AX, BX
 29797                                  ; -----------------------------------------------------------------------------
 29798                                  
 29799                                  fm_unlink:
 29800                                  	xor	bx,bx
 29801                                  	
 29802                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29803                                  	;
 29804                                  	;push	ds
 29805                                  	;push	cs
 29806                                  	;pop	ds
 29807                                  	;mov	bl,[fm_umb]	
 29808                                  	;pop	ds
 29809                                  	
 29810                                  	mov	bl,[cs:fm_umb]
 29811                                  
 29812                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29813                                  	int	21h			; so just use that, and call int 21h
 29814                                  	retn
 29815                                  
 29816                                  ; 08/04/2019 - Retro DOS v4.0
 29817                                  
 29818                                  ; -----------------------------------------------------------------------------
 29819                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29820                                  ; laid out in highvar.inc
 29821                                  ; -----------------------------------------------------------------------------
 29822                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29823                                  ; EXIT:     ES:SI points to first character in child program name
 29824                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29825                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29826                                  ; -----------------------------------------------------------------------------
 29827                                  ; Error codes (in AX if carry set on return):
 29828                                  ;
 29829                                  PV_InvArg	equ	1	; Invalid argument passed
 29830                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29831                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29832                                  ;
 29833                                  ; This routine exects ES:SI to point to a string much like the following:
 29834                                  ;    "/S/L:1,200;2 module options"
 29835                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29836                                  ; required, though that's what this routine is supposed to parse.
 29837                                  ;
 29838                                  optS		equ	'S'	; /S
 29839                                  optL		equ	'L'	; /L:...
 29840                                  ;
 29841                                  ; -----------------------------------------------------------------------------
 29842                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29843                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29844                                  ;     lh /l:1,1000;2 print/d:lpt2
 29845                                  ; the arguments would look like (one per line):
 29846                                  ;     lh
 29847                                  ;     /l
 29848                                  ;     1
 29849                                  ;     1000
 29850                                  ;     2
 29851                                  ;     print
 29852                                  ;     /d
 29853                                  ;     :lpt2
 29854                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29855                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29856                                  ; of the number of arguments LH will need to skip in order to get to the
 29857                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29858                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29859                                  ; for:
 29860                                  ;    Each /L
 29861                                  ;    Each /S (there should be only one)
 29862                                  ;    Each UMB number (they follow ":" or ";")
 29863                                  ;    Each UMB size   (they follow ",")
 29864                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29865                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29866                                  ; -----------------------------------------------------------------------------
 29867                                  
 29868                                  ParseVar:
 29869                                  	;pushreg <di, ds, es>
 29870                                  	push	di
 29871                                  	push	ds
 29872                                  	push	es
 29873                                  
 29874                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 29875                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 29876                                  	cld
 29877                                  
 29878                                  ; ------------------------------------------------
 29879                                  ; PV10--ES:SI = any whitespace on the command-line
 29880                                  ; ------------------------------------------------
 29881                                  
 29882                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 29883                                  	call	isWhite
 29884                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 29885                                  	;cmp	al,'/'
 29886                                  	cmp	al,SWTCH
 29887                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 29888                                  
 29889                                  	dec	si		; Backup--it's now "odule options", and we need
 29890                                  	clc			; that "m" we just read (or whatever it is).
 29891                                  	jmp	short pvX	; Then return with carry clear == we're done.
 29892                                  
 29893                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 29894                                  	;toUpper al		; So we make it upper-case, and...
 29895                                  	and	al,0DFh
 29896                                  	;cmp	al,'S'
 29897                                  	cmp	al,optS		; just read 'S'?
 29898                                  	jne	short pv30
 29899                                  
 29900                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 29901                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29902                                  
 29903                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29904                                  	;
 29905                                  	;push	es
 29906                                  	;push	cs
 29907                                  	;pop	es
 29908                                  	;mov	[es:fUmbTiny],1	
 29909                                  	;pop	es
 29910                                  
 29911                                  	mov	byte [cs:fUmbTiny],1
 29912                                  
 29913                                  	jmp	short pv10	; possibly even "/L...".
 29914                                  
 29915                                  pv30:	;cmp	al,'L'
 29916                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 29917                                  	jne	short pvE1		; switch!
 29918                                  
 29919                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29920                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29921                                  
 29922                                  	call	parseL
 29923                                  	jnc	short pv10	; If no carry, go back and look for more
 29924                                  
 29925                                  	dec	si		; Else, back up and exit.
 29926                                  	jmp	short pvErr	; AX has already been set by parseL
 29927                                  
 29928                                  pvE1:	;mov	ax,3
 29929                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 29930                                  pvErr:	dec	si
 29931                                  	dec	si
 29932                                  	stc
 29933                                  pvX:	;popreg	<es, ds, di>
 29934                                  	pop	es
 29935                                  	pop	ds
 29936                                  	pop	di
 29937                                  	retn
 29938                                  
 29939                                  ; -----------------------------------------------------------------------------
 29940                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 29941                                  ; -----------------------------------------------------------------------------
 29942                                  ; ENTRY:    ES:SI points to colon
 29943                                  ; EXIT:     ES:SI points to first character not parsed
 29944                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 29945                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 29946                                  ; -----------------------------------------------------------------------------
 29947                                  ; If the string here is terminated with anything other than whitespace or a
 29948                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 29949                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 29950                                  ; makes sure the app /L: is reported as being the culprit.
 29951                                  ; -----------------------------------------------------------------------------
 29952                                  
 29953                                  parseL:
 29954                                  	lodsb
 29955                                  	cmp	al,':'		; Make sure they did /L:
 29956                                  	jne	short plE1	; If they didn't, return with carry set.
 29957                                  
 29958                                  ; ------------------------------------------
 29959                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 29960                                  ; ------------------------------------------
 29961                                  
 29962                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 29963                                  	jc	short plE2	; And error if it's a bad number.
 29964                                  	call	convUMB		; Convert any address to a UMB number
 29965                                  
 29966                                  	mov	cl,al		; Remember the UMB number
 29967                                  	call	stowUMB		; Mark this UMB # as used;
 29968                                  	jc	short plE2	; If it was already marked, it'll error
 29969                                  
 29970                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 29971                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29972                                  
 29973                                  	lodsb
 29974                                  	cmp	al,';'		; Did "umb;" ?
 29975                                  	je	short pl10	; Yep: go back and get another UMB.
 29976                                  
 29977                                  	call	isWhite		; Did "umb " ?
 29978                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 29979                                  
 29980                                  	call	isEOL		; Did "umb" ?
 29981                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29982                                  
 29983                                  	;cmp	al,'/'
 29984                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 29985                                  	je	short plSwX	; If so, back up ES:SI one character and return
 29986                                  
 29987                                  	cmp	al,','		; Did "umb," ?
 29988                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 29989                                  
 29990                                  ; --- Read a size -------------------------------------------------------------
 29991                                  
 29992                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 29993                                  	jc	short plE1	; And error if it's a bad size.
 29994                                  
 29995                                  	call	toPara		; Convert from bytes to paragraphs
 29996                                  
 29997                                  	call	stowSiz		; CL still has the UMB number for this routine
 29998                                  
 29999                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 30000                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 30001                                  
 30002                                  	lodsb
 30003                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 30004                                  	je	short pl10	;
 30005                                  
 30006                                  	call	isWhite		; Did it end with whitespace?
 30007                                  	jz	short plX	; If so, we're done here--go back.
 30008                                  
 30009                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 30010                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 30011                                  
 30012                                  	;cmp	al,'/'
 30013                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 30014                                  	je	short plSwX	; If so, again, we're done here.
 30015                                  plE1:	
 30016                                  	;mov	ax,1
 30017                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 30018                                  	dec	si
 30019                                  	stc
 30020                                  	retn
 30021                                  
 30022                                  plE2:	;mov	ax,2
 30023                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 30024                                  	; 12/12/2022
 30025                                  	; cf=1
 30026                                  	;stc
 30027                                  	retn
 30028                                  plSwX:	
 30029                                  	dec	si		; If we hit a '/' character, back up one char
 30030                                  				; so the whitespace checker will see it too.
 30031                                  plX:	; 12/12/2022
 30032                                  	; cf=0
 30033                                  	;clc			; Then just return with carry clear, so
 30034                                  	retn			; ParseVar will go about its business.
 30035                                  
 30036                                  ; -----------------------------------------------------------------------------
 30037                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 30038                                  ; -----------------------------------------------------------------------------
 30039                                  ; ENTRY:    None
 30040                                  ; EXIT:     None
 30041                                  ; ERROR:    None
 30042                                  ; USES:     fm_argc, flags
 30043                                  ; -----------------------------------------------------------------------------
 30044                                  
 30045                                  ;incArgc:
 30046                                  	;push	ax
 30047                                  
 30048                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 30049                                  
 30050                                  	;mov	al,[cs:fm_argc]
 30051                                  
 30052                                  	;inc	al		; Increment it,
 30053                                  
 30054                                  	;;putdata fm_argc, al	; And store it right back.
 30055                                  
 30056                                  	;mov	[cs:fm_argc],al
 30057                                  
 30058                                  	;pop	ax
 30059                                  	;retn
 30060                                  
 30061                                  ; -----------------------------------------------------------------------------
 30062                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 30063                                  ; -----------------------------------------------------------------------------
 30064                                  ; ENTRY:    AL contains character to test
 30065                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 30066                                  ; ERROR:    None
 30067                                  ; USES:     ZF
 30068                                  ; -----------------------------------------------------------------------------
 30069                                  
 30070                                  isEOL:
 30071                                  	cmp	al,0		; Null-terminator
 30072                                  	je	short ieX
 30073                                  	cmp	al,CR ; 0Dh	; Carriage Return
 30074                                  	je	short ieX
 30075                                  	cmp	al,LF ; 0Ah	; LineFeed
 30076                                  ieX:	
 30077                                  	retn
 30078                                  
 30079                                  ; -----------------------------------------------------------------------------
 30080                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 30081                                  ; -----------------------------------------------------------------------------
 30082                                  ; ENTRY:    AL contains character to test
 30083                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 30084                                  ; ERROR:    None
 30085                                  ; USES:     ZF
 30086                                  ; -----------------------------------------------------------------------------
 30087                                  
 30088                                  isWhite:
 30089                                  	cmp	al,' '		; Space
 30090                                  	je	short iwX
 30091                                  	cmp	al,'='		; Equals (treat as whitespace)
 30092                                  	je	short iwX
 30093                                  	cmp	al,tab ; 9	; Tab
 30094                                  iwX:	
 30095                                  	retn
 30096                                  
 30097                                  ; -----------------------------------------------------------------------------
 30098                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 30099                                  ; -----------------------------------------------------------------------------
 30100                                  ; ENTRY:    AL contains UMB number
 30101                                  ; EXIT:     None
 30102                                  ; ERROR:    None
 30103                                  ; USES:     Flags, variables in highvar.inc
 30104                                  ; -----------------------------------------------------------------------------
 30105                                  
 30106                                  unMarkUMB:
 30107                                  	push	ax
 30108                                  	push	bx
 30109                                  	push	di
 30110                                  	push	es
 30111                                  
 30112                                  	push	cs
 30113                                  	pop	es
 30114                                  
 30115                                  	xor	ah,ah
 30116                                  	mov	bx,ax
 30117                                  
 30118                                  	; 19/04/2019
 30119                                  	
 30120                                  	;mov	byte [es:bx+UmbUsed],0
 30121                                  	mov	[es:bx+UmbUsed],ah ; 0
 30122                                  
 30123                                  	cmp	[es:UmbLoad],al
 30124                                  	jne	short umu10
 30125                                  
 30126                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 30127                                  	mov	[es:UmbLoad],ah ; 0
 30128                                  umu10:	
 30129                                  	pop	es
 30130                                  	pop	di
 30131                                  	pop	bx
 30132                                  	pop	ax
 30133                                  	retn
 30134                                  
 30135                                  ; -----------------------------------------------------------------------------
 30136                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 30137                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 30138                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 30139                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 30140                                  ; -----------------------------------------------------------------------------
 30141                                  ; ENTRY:    AL contains UMB number, as specified by the user
 30142                                  ; EXIT:     None
 30143                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 30144                                  ; USES:     AX, Flags, variables in highvar.inc
 30145                                  ; -----------------------------------------------------------------------------
 30146                                  
 30147                                  stowUMB:
 30148                                  	cmp	al,MAXUMB ; 16
 30149                                  	jb	short su10
 30150                                  	stc
 30151                                  	retn			; Ooops-- UMB>=MAXUMB
 30152                                  su10:	
 30153                                  	push	bx
 30154                                  	push	di
 30155                                  	push	si
 30156                                  	push	ds
 30157                                  	push	es
 30158                                  	push	cs
 30159                                  	pop	es
 30160                                  	push	cs
 30161                                  	pop	ds
 30162                                  	
 30163                                  	;cmp	byte [UmbLoad],0FFh
 30164                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 30165                                  	jne	short su20
 30166                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 30167                                  su20:	
 30168                                  	or	al,al		; If they gave UMB 0, there's really nothing
 30169                                  	jz	short su30	; that we should do here.
 30170                                  
 30171                                  	mov	bl,al
 30172                                  	xor	bh,bh
 30173                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 30174                                  
 30175                                  	xchg	[es:bx+UmbUsed],al
 30176                                  
 30177                                  	or	al,al		; If it was already 1, then al==1... and that
 30178                                  	jz	short su30	; means an error.
 30179                                  
 30180                                  	stc			; OOOPS!  This one's been used before.  :(
 30181                                  su30:	
 30182                                  	pop	es
 30183                                  	pop	ds
 30184                                  	pop	si
 30185                                  	pop	di
 30186                                  	pop	bx
 30187                                  	retn
 30188                                  
 30189                                  ; -----------------------------------------------------------------------------
 30190                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 30191                                  ; -----------------------------------------------------------------------------
 30192                                  ; ENTRY:    CL contains UMB number, AX contains size
 30193                                  ; EXIT:     None
 30194                                  ; ERROR:    None
 30195                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 30196                                  ; -----------------------------------------------------------------------------
 30197                                  
 30198                                  ; 13/05/2019
 30199                                  
 30200                                  stowSiz:
 30201                                  	push	bx
 30202                                  	;push	di ; ?
 30203                                  	push	es
 30204                                  
 30205                                  	push	cs
 30206                                  	pop	es	
 30207                                  
 30208                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 30209                                  	mov	bh,0			;     bx==UMB number, AX==size
 30210                                  	shl	bl,1			;     bx==offset into array, AX=size
 30211                                  	mov	[es:bx+UmbSize],ax	; Store the size
 30212                                  	
 30213                                  	pop	es
 30214                                  	;pop	di ; ?
 30215                                  	pop	bx
 30216                                  
 30217                                  	retn
 30218                                  
 30219                                  ; -----------------------------------------------------------------------------
 30220                                  ;*** toDigit - converts a character-digit to its binary counterpart
 30221                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 30222                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 30223                                  ; A-F are considered valid iff gnradix is 16.
 30224                                  ; -----------------------------------------------------------------------------
 30225                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 30226                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 30227                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 30228                                  ; USES:     CL, Flags
 30229                                  ; -----------------------------------------------------------------------------
 30230                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30231                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30232                                  ; will be 10 or 16.
 30233                                  ; -----------------------------------------------------------------------------
 30234                                  
 30235                                  gnradix:
 30236                                  	dw	0		; Must be a word--16x16 multiplication
 30237                                  
 30238                                  toDigit:
 30239                                  	cmp	word [cs:gnradix],16
 30240                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 30241                                  
 30242                                  toDigit_hex:
 30243                                  	cmp	cl,'a'	; 61h
 30244                                  	jb	short td10
 30245                                  	cmp	cl,'f'	; 66h
 30246                                  	ja	short tdE	; Nothing valid above 'z' at all...
 30247                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 30248                                  	;clc			; <- CLC is implicit from last SUB
 30249                                  	retn
 30250                                  td10:	
 30251                                  	cmp	cl,'A'  ; 41h
 30252                                  	jb	short td20	; Below 'A'?  Not a letter...
 30253                                  	cmp	cl,'F'	; 46h
 30254                                  	ja	short tdE	; Above 'F'?  Not a digit.
 30255                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 30256                                  	;clc			; <- CLC is implicit from last SUB
 30257                                  	retn
 30258                                  toDigit_dec:
 30259                                  td20:	
 30260                                  	cmp	cl,'0'		; If less than zero,
 30261                                  	;jb	short tdE	; Done.
 30262                                  	jb	short tdEr ; 08/04/2019
 30263                                  	cmp	cl,'9'		; Or, if greater than nine,
 30264                                  	ja	short tdE	; Done.
 30265                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 30266                                  	;clc			; <- CLC is implicit from last SUB
 30267                                  	retn
 30268                                  tdE:	
 30269                                  	stc
 30270                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 30271                                  	retn
 30272                                  
 30273                                  ; -----------------------------------------------------------------------------
 30274                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 30275                                  ; -----------------------------------------------------------------------------
 30276                                  ; ENTRY:    ES:SI points to an ascii string to scan
 30277                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 30278                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 30279                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 30280                                  ; -----------------------------------------------------------------------------
 30281                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30282                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30283                                  ; will be 10 or 16.
 30284                                  ; -----------------------------------------------------------------------------
 30285                                  
 30286                                  ; 08/04/2019 - Retro DOS v4.0
 30287                                  
 30288                                  GetXNum:
 30289                                  	;pushreg <bx, cx, ds>
 30290                                  	push	bx
 30291                                  	push	cx
 30292                                  	push	ds
 30293                                  
 30294                                  	cld
 30295                                  	xor	ax,ax
 30296                                  	xor	bx,bx
 30297                                  	xor	cx,cx
 30298                                  	xor	dx,dx			; Start with 0 (makes sense)
 30299                                  
 30300                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 30301                                  
 30302                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 30303                                  	;call	toDigit
 30304                                  	call	toDigit_dec
 30305                                  	jc	short gxnE		; If it's not a digit, leave now.
 30306                                  
 30307                                  	or	cl,cl
 30308                                  	jnz	short gxn20		; Doesn't have '0x'
 30309                                  	mov	cl,[es:si+1]
 30310                                  	cmp	cl,'x'			; Either 'x'...
 30311                                  	je	short gxn10
 30312                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 30313                                  	jne	short gxn20
 30314                                  
 30315                                  gxn10:	
 30316                                  	mov	word [cs:gnradix], 16
 30317                                  	inc	si			; Since we read "0x", march over it.
 30318                                  	inc	si
 30319                                  
 30320                                  ; ------------------------------------------------------
 30321                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 30322                                  ;        DX:AX = current total
 30323                                  ;        BX    = 0
 30324                                  ;        CH    = 0
 30325                                  ; ------------------------------------------------------
 30326                                  
 30327                                  gxn20:	
 30328                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 30329                                  	inc	si
 30330                                  
 30331                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 30332                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 30333                                  
 30334                                  	call	mul32		; Multiply DX:AX by gnradix
 30335                                  	jc	short gxnX	; (if it's too big, error out)
 30336                                  
 30337                                  	add	ax,cx		; Add the digit
 30338                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 30339                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 30340                                  	;jmp	short gxn20
 30341                                  	jnc	short gxn20
 30342                                  gxnE:	
 30343                                  	;stc			; In this case, we need to set the carry
 30344                                  	jmp	short gxnX	; and leave--there were no digits given.
 30345                                  gxnQ:	
 30346                                  	dec	si		; Don't read in the offensive character.
 30347                                  	clc			; And clear carry, so they know it's okay.
 30348                                  gxnX:	
 30349                                  	pop	ds
 30350                                  	pop	cx
 30351                                  	pop	bx
 30352                                  	retn
 30353                                  
 30354                                  ; -----------------------------------------------------------------------------
 30355                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 30356                                  ; -----------------------------------------------------------------------------
 30357                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 30358                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 30359                                  ; ERROR:   Carry set if number was too large
 30360                                  ; USES:    Flags, AX, DX
 30361                                  ; -----------------------------------------------------------------------------
 30362                                  
 30363                                  mul32:
 30364                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 30365                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 30366                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 30367                                  	jc	short m32E	; Too big?
 30368                                  
 30369                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 30370                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 30371                                  
 30372                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 30373                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 30374                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30375                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30376                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 30377                                  	retn
 30378                                  m32E:	
 30379                                  	pop	ax
 30380                                  	retn
 30381                                  
 30382                                  ; -----------------------------------------------------------------------------
 30383                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 30384                                  ; -----------------------------------------------------------------------------
 30385                                  ; ENTRY:   DX:AX = the number to be divided
 30386                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 30387                                  ; ERROR:   None
 30388                                  ; USES:    Flags, AX, DX
 30389                                  ; -----------------------------------------------------------------------------
 30390                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 30391                                  ;       can't ensure a 386 host machine. Sorry.
 30392                                  ; -----------------------------------------------------------------------------
 30393                                  
 30394                                  toPara:
 30395                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 30396                                  
 30397                                  	mov	cl,4		;
 30398                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 30399                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 30400                                  	mov	cl,12
 30401                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 30402                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 30403                                  
 30404                                  	pop	cx
 30405                                  	retn
 30406                                  
 30407                                  ; -----------------------------------------------------------------------------
 30408                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 30409                                  ; -----------------------------------------------------------------------------
 30410                                  ; ENTRY:  Nothing
 30411                                  ; EXIT:   AX contains 0x9FFF for most systems
 30412                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30413                                  ; USES:   Flags, AX
 30414                                  ; -----------------------------------------------------------------------------
 30415                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 30416                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 30417                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 30418                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 30419                                  ; -----------------------------------------------------------------------------
 30420                                  
 30421                                  UmbHead:
 30422                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 30423                                  
 30424                                  	;push	si ; ?
 30425                                  	;push	ds ; ? 
 30426                                  	;push	es
 30427                                  	;push	bx ; *	
 30428                                  
 30429                                  	; 09/04/2019
 30430                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30431                                  
 30432                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30433                                  	int	21h
 30434                                  
 30435                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 30436                                  	cmp	ax,0FFFFh
 30437                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 30438                                  
 30439                                  	clc				; Else, it isn't (CLC done by prev cmp)
 30440                                  	;jmp	short uhX
 30441                                  	; 12/12/2022
 30442                                  	retn
 30443                                  uhE:	
 30444                                  	stc
 30445                                  uhX:	
 30446                                  	;pop	bx ; *
 30447                                  	;pop	es
 30448                                  	;pop	ds ; ?
 30449                                  	;pop	si ; ?
 30450                                  	retn
 30451                                  
 30452                                  ; -----------------------------------------------------------------------------
 30453                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 30454                                  ; -----------------------------------------------------------------------------
 30455                                  ; ENTRY:  ES:0 should point to a valid MCB
 30456                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 30457                                  ; USES:   Flags
 30458                                  ; -----------------------------------------------------------------------------
 30459                                  
 30460                                  isSysMCB:
 30461                                  	;push	ax
 30462                                  
 30463                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30464                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30465                                  	;je	short ism10
 30466                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 30467                                  	;;je	short ism10
 30468                                  	;;jmp	short ismX		; Anything else isn't.
 30469                                  	;jne	short ismX
 30470                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 30471                                  	jne	short ismX 
 30472                                  ism10:	
 30473                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 30474                                  	;cmp	ax,'SC' ; 4353h
 30475                                  	cmp	word [es:ARENA.NAME],'SC'
 30476                                  ismX:	
 30477                                  	;pop	ax
 30478                                  	retn
 30479                                  
 30480                                  ; 09/04/2019 - Retro DOS v4.0
 30481                                  
 30482                                  ; -----------------------------------------------------------------------------
 30483                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 30484                                  ; -----------------------------------------------------------------------------
 30485                                  ; ENTRY:  AX contains a segment address
 30486                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 30487                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 30488                                  ; USES:   Flags, AX
 30489                                  ; -----------------------------------------------------------------------------
 30490                                  ; An address in the following areas is treated as:
 30491                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 30492                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 30493                                  ;      ...
 30494                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 30495                                  ; -----------------------------------------------------------------------------
 30496                                  
 30497                                  AddrToUmb:
 30498                                  	push	cx
 30499                                  	push	dx
 30500                                  	push	es
 30501                                  
 30502                                  	mov	dx,ax		; DX = address to search for
 30503                                  
 30504                                  	call	UmbHead		; AX = first segment
 30505                                  	jc	short atuE	; If it couldn't get it, error out.
 30506                                  
 30507                                  	; 14/08/2023
 30508                                  	;mov	es,ax ; *	; ES = first UMB segment
 30509                                  	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 30510                                  
 30511                                  	; 22/07/2023
 30512                                  atu10:
 30513                                  	mov	es,ax ; * ; ** ; 14/08/2023
 30514                                  ; ----------------------------------------
 30515                                  ; ATU10--ES - Current MCB address
 30516                                  ;        DX - Address given for conversion
 30517                                  ;        CX - Current UMB #
 30518                                  ; ----------------------------------------
 30519                                  
 30520                                  ;atu10:	
 30521                                  	;mov	ax,es ; * ; 14/08/2023
 30522                                          cmp	ax,dx		; Present segment >= given segment?
 30523                                  	jae	short atuX	; Yep--done.
 30524                                  
 30525                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 30526                                  	jnz	short atu20
 30527                                  
 30528                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 30529                                  atu20:	
 30530                                  	;mov	al,[es:ARENA.SIGNATURE]
 30531                                  	;cmp	al,arena_signature_end  ; 'Z'
 30532                                  	; 14/08/2023
 30533                                  	; ax = es
 30534                                  	;mov	ax,es ; **
 30535                                  	add	ax,[es:ARENA.SIZE]
 30536                                  	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 30537                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 30538                                  
 30539                                  	;NextMCB es,ax
 30540                                  
 30541                                  	;mov	ax,es ; **
 30542                                  	;;add	ax,[es:3]
 30543                                  	;add	ax,[es:ARENA.SIZE]
 30544                                  	inc	ax
 30545                                  	; 14/08/2023
 30546                                  	;mov	es,ax ; *
 30547                                  	jmp	short atu10
 30548                                  
 30549                                  ; -----------------------------------------------------------------------------
 30550                                  ; if we get to atu30, they specified a number that was past the last MCB.
 30551                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 30552                                  ; -----------------------------------------------------------------------------
 30553                                  
 30554                                  atu30:	
 30555                                  	; 14/08/2023
 30556                                  	; ax = es + [es:ARENA.SIZE] 
 30557                                  	;mov	ax,es ; **
 30558                                  	;add	ax,[es:ARENA.SIZE] ; **
 30559                                  	cmp	ax,dx		; Present >= given?
 30560                                  	jae	short atuX	; Yep! It _was_ inside.
 30561                                  atuE:	
 30562                                  	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 30563                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 30564                                  atuX:	
 30565                                  	mov	ax,cx		; Return the UMB number in AX
 30566                                  	
 30567                                  	pop	es	
 30568                                  	pop	dx
 30569                                  	pop	cx
 30570                                  	retn
 30571                                  
 30572                                  ; -----------------------------------------------------------------------------
 30573                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 30574                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 30575                                  ; address rather than a UMB number... and use that address to look up a UMB.
 30576                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 30577                                  ; -----------------------------------------------------------------------------
 30578                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 30579                                  ; EXIT:   AX will contain a UMB number
 30580                                  ; ERROR:  None
 30581                                  ; USES:   Flags, AX
 30582                                  ; -----------------------------------------------------------------------------
 30583                                  
 30584                                  convUMB:
 30585                                  	cmp	word [cs:gnradix],16
 30586                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 30587                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 30588                                  ;cmp	ax,0FFFFh
 30589                                  	;jne	short cu10
 30590                                  	;inc	ax		; If too high, ignore it (make it conventional)
 30591                                  	; 14/08/2023
 30592                                  	inc	ax
 30593                                  	jz	short cu10	; If too high, ignore it (make it conventional)
 30594                                  	dec	ax
 30595                                  cu10:	
 30596                                  	retn
 30597                                  
 30598                                  ; -----------------------------------------------------------------------------
 30599                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 30600                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 30601                                  ; of the usual HIGH_FIRST.  See the code.
 30602                                  ; -----------------------------------------------------------------------------
 30603                                  ; ENTRY:  None
 30604                                  ; EXIT:   None
 30605                                  ; ERROR:  None
 30606                                  ; USES:   Flags, fm_umb, fm_strat
 30607                                  ; -----------------------------------------------------------------------------
 30608                                  
 30609                                  setUMBs:
 30610                                  	push	ax
 30611                                  	push	bx
 30612                                  	call	fm_link
 30613                                  	pop	bx
 30614                                  	pop	ax
 30615                                  	retn
 30616                                  
 30617                                  ; -----------------------------------------------------------------------------
 30618                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 30619                                  ; -----------------------------------------------------------------------------
 30620                                  ; ENTRY:  None
 30621                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 30622                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 30623                                  ; ERROR:  None
 30624                                  ; USES:   Flags, fm_strat, fm_umb
 30625                                  ; -----------------------------------------------------------------------------
 30626                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 30627                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 30628                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 30629                                  ; such that the load UMB is too small, and shouldn't be used.
 30630                                  ; -----------------------------------------------------------------------------
 30631                                  
 30632                                  loadLow:
 30633                                  	;push	ds
 30634                                  	;push	cs		; Point DS into appropriate data segment
 30635                                  	;pop	ds	
 30636                                  
 30637                                  	;mov	al,[UmbLoad]
 30638                                  	mov	al,[cs:UmbLoad]
 30639                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 30640                                  	jne	short ll10
 30641                                  
 30642                                  	stc
 30643                                  ll15:
 30644                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 30645                                  	;stc
 30646                                  	;jmp	short llX
 30647                                  	retn
 30648                                  ll10:	
 30649                                  	or	al,al		; AL=the load UMB: Is it == 0?
 30650                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 30651                                  
 30652                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 30653                                  	retn
 30654                                  
 30655                                  	;mov	al,1
 30656                                  	;clc
 30657                                  ;llX:
 30658                                  	;pop	ds		; Return DS to where it was
 30659                                  	;retn
 30660                                  
 30661                                  ; -----------------------------------------------------------------------------
 30662                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 30663                                  ; -----------------------------------------------------------------------------
 30664                                  ; ENTRY:  None
 30665                                  ; EXIT:   None
 30666                                  ; ERROR:  None
 30667                                  ; USES:   Flags, fm_strat, fm_umb
 30668                                  ; -----------------------------------------------------------------------------
 30669                                  
 30670                                  HideUMBs:
 30671                                  	push	ax
 30672                                  	push	cx
 30673                                  	push	ds
 30674                                  	push	es
 30675                                  
 30676                                  	call	UmbTest		; See if we REALLY linked in anything...
 30677                                  	jc	short husX	; ...if not, there's nothing for us to do.
 30678                                  
 30679                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 30680                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 30681                                  
 30682                                  	;putdata fInHigh,1	; Remember that we're now running high
 30683                                  	mov	byte [cs:fInHigh],1
 30684                                  
 30685                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 30686                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 30687                                  
 30688                                  	cmp	al,UNSPECIFIED	; If they didn't,
 30689                                  	je	short husX	; then we shouldn't do this loop:
 30690                                  
 30691                                  	xor	cx,cx
 30692                                  
 30693                                  ; -----------------------------------------------
 30694                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 30695                                  ; -----------------------------------------------
 30696                                  
 30697                                  hus10:	inc	cx		; For each UMB:
 30698                                  	cmp	cx,MAXUMB ; 16
 30699                                  	jae	short hus20
 30700                                  
 30701                                  	mov	al,cl		; (stopping as soon as we're outside of the
 30702                                  	push	es
 30703                                  	call	findUMB		; valid range of UMBs)
 30704                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 30705                                  	jc	short hus20
 30706                                  
 30707                                  	call	_hideUMB_	; hide what we need to hide.
 30708                                  
 30709                                  	jmp	short hus10
 30710                                  hus20:	
 30711                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 30712                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 30713                                  
 30714                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 30715                                  	jnz	short husX	; If not, we're done.
 30716                                  
 30717                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30718                                  husX:	
 30719                                  	pop	es
 30720                                  	pop	ds
 30721                                  	pop	cx
 30722                                  	pop	ax
 30723                                  	retn
 30724                                  
 30725                                  ; -----------------------------------------------------------------------------
 30726                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30727                                  ; -----------------------------------------------------------------------------
 30728                                  ; ENTRY:  None
 30729                                  ; EXIT:   AL == load UMB
 30730                                  ; ERROR:  None
 30731                                  ; USES:   Flags, AX
 30732                                  ; -----------------------------------------------------------------------------
 30733                                  
 30734                                  ;GetLoadUMB:
 30735                                  ;	;getdata al, UmbLoad
 30736                                  ;	push	ds
 30737                                  ;	push	cs
 30738                                  ;	pop	ds
 30739                                  ;	mov	al,[UmLoad]
 30740                                  ;	pop	ds
 30741                                  ;	retn
 30742                                  
 30743                                  ; -----------------------------------------------------------------------------
 30744                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30745                                  ; -----------------------------------------------------------------------------
 30746                                  ; ENTRY:  None
 30747                                  ; EXIT:   AX == load UMB minimum size
 30748                                  ; ERROR:  None
 30749                                  ; USES:   Flags, AX
 30750                                  ; -----------------------------------------------------------------------------
 30751                                  
 30752                                  GetLoadSize:
 30753                                  	; 09/04/2019 - Retro DOS v4.0
 30754                                  	mov	al,[cs:UmbLoad]
 30755                                  	jmp	short GetSize
 30756                                  
 30757                                  	;push	bx
 30758                                  	;;push	si
 30759                                  	;push	ds
 30760                                  	;push	cs
 30761                                  	;pop	ds
 30762                                  
 30763                                  	;mov	al,[UmbLoad]
 30764                                  
 30765                                  	;xor	ah,ah			;    ax==UMB
 30766                                  	;mov	bx,UmbSize		;    bx==array
 30767                                  	;shl	al,1	                ;    ax==offset
 30768                                  	;;add	ax,bx			;    ax==element index
 30769                                  	;;mov	si,ax			; ds:si==element index
 30770                                  
 30771                                  	;;lodsw				;    ax==size
 30772                                  
 30773                                  	;add	bx,ax
 30774                                  	;mov	ax,[bx]
 30775                                  
 30776                                  	;pop	ds
 30777                                  	;;pop	si
 30778                                  	;pop	bx
 30779                                  	;retn
 30780                                  
 30781                                  ; -----------------------------------------------------------------------------
 30782                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 30783                                  ; -----------------------------------------------------------------------------
 30784                                  ; ENTRY:  AL == a UMB number
 30785                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 30786                                  ; ERROR:  None
 30787                                  ; USES:   Flags, AX
 30788                                  ; -----------------------------------------------------------------------------
 30789                                  
 30790                                  GetSize:
 30791                                  	; 09/04/2019 - Retro DOS v4.0
 30792                                  
 30793                                  	push	bx
 30794                                  	;push	si
 30795                                  	;push	ds
 30796                                  	;push	cs
 30797                                  	;pop	ds
 30798                                  
 30799                                  	xor	ah,ah			;    ax==UMB
 30800                                  	mov	bx,UmbSize		;    bx==array
 30801                                  	shl	al,1	                ;    ax==offset
 30802                                  	;add	ax,bx			;    ax==element index
 30803                                  	;mov	si,ax			; ds:si==element index
 30804                                  
 30805                                  	;lodsw				;    ax==size
 30806                                  
 30807                                  	add	bx,ax
 30808                                  	;mov	ax,[bx]
 30809                                  	mov	ax,[cs:bx]
 30810                                  
 30811                                  	;pop	ds
 30812                                  	;pop	si
 30813                                  	pop	bx
 30814                                  	retn
 30815                                  
 30816                                  ; -----------------------------------------------------------------------------
 30817                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 30818                                  ; -----------------------------------------------------------------------------
 30819                                  ; ENTRY:   AL == new load UMB
 30820                                  ; EXIT:    None
 30821                                  ; ERROR:   None
 30822                                  ; USES:    Flags, AX
 30823                                  ; -----------------------------------------------------------------------------
 30824                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 30825                                  ;          time you would ever need this, so that's okay.
 30826                                  ; -----------------------------------------------------------------------------
 30827                                  
 30828                                  ;StoLoadUMB:
 30829                                  ;	;putdata UmbLoad, al
 30830                                  ;	push	es
 30831                                  ;	push	cs
 30832                                  ;	pop	es
 30833                                  ;	mov	[es:UmbLoad],al
 30834                                  ;	pop	es
 30835                                  ;	retn
 30836                                  
 30837                                  ; -----------------------------------------------------------------------------
 30838                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 30839                                  ; -----------------------------------------------------------------------------
 30840                                  ; ENTRY:  AL == new load size
 30841                                  ; EXIT:   None
 30842                                  ; ERROR:  None
 30843                                  ; USES:   Flags, AX
 30844                                  ; -----------------------------------------------------------------------------
 30845                                  
 30846                                  StoLoadSize:
 30847                                  	push	dx
 30848                                  
 30849                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 30850                                  	;
 30851                                  	;push	ds
 30852                                  	;push	cs
 30853                                  	;pop	ds
 30854                                  	;mov	dl,[UmbLoad]
 30855                                  	;pop	ds	
 30856                                  
 30857                                  	mov	dl,[cs:UmbLoad]
 30858                                  
 30859                                  	cmp	dl,UNSPECIFIED ; 0FFh
 30860                                  	je	short sls10
 30861                                  
 30862                                  	call	stowSiz			; We've got a function to do just this
 30863                                  sls10:	
 30864                                  	pop	dx
 30865                                  	retn
 30866                                  
 30867                                  ; -----------------------------------------------------------------------------
 30868                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 30869                                  ; -----------------------------------------------------------------------------
 30870                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 30871                                  ; EXIT:     None; free elements in UMB marked as hidden
 30872                                  ; ERROR:    None
 30873                                  ; USES:     Flags
 30874                                  ; -----------------------------------------------------------------------------
 30875                                  
 30876                                  hideUMB:
 30877                                  	push	ax
 30878                                  	push	es
 30879                                  
 30880                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 30881                                  	jc	short huX
 30882                                  
 30883                                  ; ------------------------------------------------
 30884                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 30885                                  ;            we're not in the same UMB, so exit.
 30886                                  ; ------------------------------------------------
 30887                                  
 30888                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30889                                  	jz	short huX	; If it is, we've finished the UMB.
 30890                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 30891                                  	or	word [es:ARENA.OWNER],0
 30892                                  	jnz	short hu20
 30893                                  
 30894                                  	call	hideMCB
 30895                                  hu20:	
 30896                                  	mov	al,[es:ARENA.SIGNATURE]
 30897                                  	cmp	al,arena_signature_end  ;'Z'
 30898                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 30899                                  
 30900                                  	;NextMCB es, ax		; Go on forward.
 30901                                  	mov     ax,es
 30902                                  	;add	ax,[es:3]
 30903                                  	add     ax,[es:ARENA.SIZE]
 30904                                  	inc     ax
 30905                                  	mov     es,ax
 30906                                  
 30907                                  	jmp	short hu10
 30908                                  huX:	
 30909                                  	pop	es
 30910                                  	pop	ax
 30911                                  	retn
 30912                                  
 30913                                  ; -----------------------------------------------------------------------------
 30914                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30915                                  ; -----------------------------------------------------------------------------
 30916                                  ; ENTRY:    None
 30917                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30918                                  ; ERROR:    None
 30919                                  ; USES:     Flags
 30920                                  ; -----------------------------------------------------------------------------
 30921                                  
 30922                                  isTiny:
 30923                                  	push	ax
 30924                                  
 30925                                  	;getdata al, fUmbTiny
 30926                                  	;
 30927                                  	;push	ds
 30928                                  	;push	cs
 30929                                  	;pop	ds
 30930                                  	;mov	al,[fUmbTiny]
 30931                                  	;pop	ds
 30932                                  
 30933                                  	mov	al,[cs:fUmbTiny]		
 30934                                  
 30935                                  	or	al,al
 30936                                  	pop	ax
 30937                                  	retn
 30938                                  
 30939                                  ; -----------------------------------------------------------------------------
 30940                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 30941                                  ; -----------------------------------------------------------------------------
 30942                                  ; ENTRY:    ES:0 should point to an MCB
 30943                                  ; EXIT:     ZF set if MCB is free, else !ZF
 30944                                  ; ERROR:    None
 30945                                  ; USES:     Flags
 30946                                  ; -----------------------------------------------------------------------------
 30947                                  
 30948                                  ;isFreeMCB:
 30949                                  ;	or	word [es:ARENA.OWNER],0
 30950                                  ;	retn
 30951                                  
 30952                                  ; -----------------------------------------------------------------------------
 30953                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 30954                                  ; -----------------------------------------------------------------------------
 30955                                  ; ENTRY:    ES:0 should point to an MCB
 30956                                  ; EXIT:     None; MCB marked as HIDDEN
 30957                                  ; ERROR:    None
 30958                                  ; USES:     None
 30959                                  ; -----------------------------------------------------------------------------
 30960                                  
 30961                                  hideMCB:
 30962                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30963                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 30964                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 30965                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 30966                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 30967                                  	retn
 30968                                  
 30969                                  ; -----------------------------------------------------------------------------
 30970                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 30971                                  ; -----------------------------------------------------------------------------
 30972                                  ; ENTRY:    ES:0 should point to an MCB
 30973                                  ; EXIT:     None; MCB marked as FREE
 30974                                  ; ERROR:    None
 30975                                  ; USES:     None
 30976                                  ; -----------------------------------------------------------------------------
 30977                                  
 30978                                  unHideMCB:
 30979                                  	push	ax
 30980                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 30981                                  	mov	ax,'  ' ; 2020h
 30982                                  	mov	[es:ARENA.NAME+0],ax
 30983                                  	mov	[es:ARENA.NAME+2],ax
 30984                                  	mov	[es:ARENA.NAME+4],ax
 30985                                  	mov	[es:ARENA.NAME+6],ax
 30986                                  	pop	ax
 30987                                  	retn
 30988                                  
 30989                                  ; -----------------------------------------------------------------------------
 30990                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 30991                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 30992                                  ; -----------------------------------------------------------------------------
 30993                                  ; ENTRY:    AL should be to a valid UMB number
 30994                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 30995                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 30996                                  ; USES:     Flags, ES
 30997                                  ; -----------------------------------------------------------------------------
 30998                                  
 30999                                  findUMB:
 31000                                  	push	ax
 31001                                  	push	cx
 31002                                  	push	dx
 31003                                  
 31004                                  	xor	ah,ah		; Zap ah, so al==ax
 31005                                  
 31006                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 31007                                  
 31008                                  	call	UmbHead		; Returns first UMB segment in AX
 31009                                  	mov	es,ax
 31010                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31011                                  
 31012                                  ; ---------------------------------------------
 31013                                  ; FU10--CX - This UMB number; 0 == conventional
 31014                                  ;       DX - The UMB number they're looking for
 31015                                  ;       ES - The current MCB address
 31016                                  ; ---------------------------------------------
 31017                                  
 31018                                  fu10:	
 31019                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 31020                                  	je	short fuX	; searching for--so exit.
 31021                                  
 31022                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31023                                  	jnz	short fu20
 31024                                  
 31025                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31026                                  fu20:	
 31027                                  	mov	al,[es:ARENA.SIGNATURE]
 31028                                  	cmp	al,arena_signature_end ; 'Z'
 31029                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 31030                                  
 31031                                  	;NextMCB es, ax		; Go on forward.
 31032                                  	mov     ax,es
 31033                                  	;add	ax,[es:3]
 31034                                  	add     ax,[es:ARENA.SIZE]
 31035                                  	inc     ax
 31036                                  	mov     es,ax
 31037                                  
 31038                                  	jmp	short fu10
 31039                                  fuE:	
 31040                                  	stc
 31041                                  fuX:
 31042                                  	pop	dx
 31043                                  	pop	cx
 31044                                  	pop	ax		; The address is already in ES.
 31045                                  	retn
 31046                                  
 31047                                  ; -----------------------------------------------------------------------------
 31048                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 31049                                  ; -----------------------------------------------------------------------------
 31050                                  ; ENTRY:    AL should be to a valid UMB number
 31051                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 31052                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 31053                                  ; USES:     Flags, ES
 31054                                  ; -----------------------------------------------------------------------------
 31055                                  
 31056                                  BigFree:
 31057                                  	push	bx
 31058                                  	push	cx
 31059                                  
 31060                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 31061                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 31062                                  
 31063                                  	xor	bx,bx			; Segment address of largest free MCB
 31064                                  	xor	cx,cx			; Size of largest free MCB
 31065                                  
 31066                                  ; ---------------------------------------------
 31067                                  ; BF10--ES - Current MCB address
 31068                                  ;       BX - Address of largest free MCB so far
 31069                                  ;       CX - Size of largest free MCB so far
 31070                                  ; ---------------------------------------------
 31071                                  
 31072                                  bf10:	
 31073                                  	call	isSysMCB		; If we've left the MCB, we're done.
 31074                                  	jz	short bf30
 31075                                  
 31076                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 31077                                  	or	word [es:ARENA.OWNER],0
 31078                                  	jnz	short bf20
 31079                                  
 31080                                  	mov	ax,[es:ARENA.SIZE]
 31081                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 31082                                  	cmp	cx,ax
 31083                                  	jg	short bf20		; Unless we're bigger,
 31084                                  
 31085                                  	mov	bx,es			; Store this new element's address,
 31086                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 31087                                  	mov	cx,ax
 31088                                  
 31089                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 31090                                  	cmp	al,arena_signature_end	; 'Z'
 31091                                  	jz	short bf30		; 'Z' means this was the last MCB.
 31092                                  
 31093                                  	;NextMCB es,ax		; Go on forward.
 31094                                  	mov     ax,es
 31095                                  	;add	ax,[es:3]
 31096                                  	add     ax,[es:ARENA.SIZE]
 31097                                  	inc     ax
 31098                                  	mov     es,ax
 31099                                  
 31100                                  	jmp	short bf10
 31101                                  
 31102                                  bf30:	mov	es,bx			; Return the address
 31103                                  	mov	ax,cx			; Return the size
 31104                                  	or	bx,bx
 31105                                  	jnz	short bfX		; (if size==0, there's nothing free)
 31106                                  bfE:	
 31107                                  	stc
 31108                                  bfX:
 31109                                  	pop	cx
 31110                                  	pop	bx
 31111                                  	retn
 31112                                  
 31113                                  ; -----------------------------------------------------------------------------
 31114                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 31115                                  ; -----------------------------------------------------------------------------
 31116                                  ; ENTRY:    AL should be to a valid UMB number
 31117                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 31118                                  ; ERROR:    None
 31119                                  ; USES:     Flags
 31120                                  ; -----------------------------------------------------------------------------
 31121                                  
 31122                                  isSpecified:
 31123                                  	push	ax
 31124                                  
 31125                                  	xor	bh,bh
 31126                                  	mov	bl,al
 31127                                  
 31128                                  	;getdata al, DS:UmbUsed[bx]
 31129                                  	;
 31130                                  	;push	ds
 31131                                  	;push	cs
 31132                                  	;pop	ds
 31133                                  	;mov	al,[bx+UmbUsed]
 31134                                  	;pop	ds
 31135                                  	
 31136                                  	mov	al,[cs:bx+UmbUsed]
 31137                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 31138                                  
 31139                                  	pop	ax
 31140                                  	retn
 31141                                  
 31142                                  ; -----------------------------------------------------------------------------
 31143                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 31144                                  ; -----------------------------------------------------------------------------
 31145                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 31146                                  ; EXIT:     None; MCB broken if carry clear
 31147                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 31148                                  ; USES:     Flags
 31149                                  ; -----------------------------------------------------------------------------
 31150                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 31151                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 31152                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 31153                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 31154                                  ; minimum for performing a split.
 31155                                  ; -----------------------------------------------------------------------------
 31156                                  
 31157                                  MIN_SPLIT_SIZE	equ	20h
 31158                                  
 31159                                  shrinkMCB:
 31160                                  	;pushreg <bx, cx, es>
 31161                                  	push	bx
 31162                                  	push	cx
 31163                                  	push	es
 31164                                  
 31165                                  	mov	bx,ax			; Move things around... and
 31166                                  	mov	ax,es			; save this one for later.
 31167                                  
 31168                                  	mov	cx,[es:ARENA.SIZE]
 31169                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 31170                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 31171                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 31172                                  	; 18/12/2022
 31173                                  	cmp	cx,bx
 31174                                  	jb	short smE ; (*)
 31175                                  
 31176                                  	mov	dl,[es:ARENA.SIGNATURE]
 31177                                  	mov	cx,[es:ARENA.SIZE]
 31178                                  
 31179                                  	mov	[es:ARENA.SIZE],bx
 31180                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 31181                                  
 31182                                  	add	ax,bx
 31183                                  	inc	ax
 31184                                  	mov	es,ax			; Move to new arena area
 31185                                  
 31186                                  	mov	ax,cx
 31187                                  	sub	ax,bx
 31188                                  	; 12/12/2022
 31189                                  	; ax > 0
 31190                                  	dec	ax			; And prepare the new size
 31191                                  
 31192                                  	; 18/12/2022
 31193                                  	mov	[es:ARENA.SIGNATURE],dl
 31194                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 31195                                  	mov	[es:ARENA.SIZE],ax
 31196                                  	;mov	ax,'  ' ; 2020h
 31197                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 31198                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 31199                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 31200                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 31201                                  
 31202                                  	; 18/12/2022
 31203                                  	call	freeMCB	; (**)
 31204                                  
 31205                                  	; 12/12/2022
 31206                                  	; cf=0
 31207                                  	;clc
 31208                                  	; 18/12/2022
 31209                                  	;jmp	short smX
 31210                                  smE:	
 31211                                  	; 18/12/2022
 31212                                  	; cf=1 (*)
 31213                                  	;stc
 31214                                  smX:	
 31215                                  	;popreg	<es, cx, bx>
 31216                                  	pop	es
 31217                                  	pop	cx
 31218                                  	pop	bx
 31219                                  	retn
 31220                                  
 31221                                  ; -----------------------------------------------------------------------------
 31222                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 31223                                  ; -----------------------------------------------------------------------------
 31224                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 31225                                  ; EXIT:     None; UMB is hidden as necessary
 31226                                  ; ERROR:    None
 31227                                  ; USES:     Flags, AX, CX
 31228                                  ; -----------------------------------------------------------------------------
 31229                                  ; PRIMARY LOGIC:
 31230                                  ;
 31231                                  ; If the UMB is specified in the DH/LH statement, then:
 31232                                  ;    If the largest free segment is too small (check specified size), then:
 31233                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 31234                                  ;    Else, if largest free segment is LARGER than specified size, then:
 31235                                  ;       If /S was given on the command-line, then:
 31236                                  ;          Break that element into two pieces
 31237                                  ;          Set a flag that we're shrinking
 31238                                  ;       Endif
 31239                                  ;    Endif
 31240                                  ; Endif
 31241                                  ; If the UMB is NOT specified (or was removed by the above):
 31242                                  ;    Hide all free elements in the UMB
 31243                                  ;    If the flag that we're shrinking was set, then:
 31244                                  ;       UN-hide the lower portion of the shrunken UMB
 31245                                  ;    ENDIF
 31246                                  ; ENDIF
 31247                                  ; -----------------------------------------------------------------------------
 31248                                  
 31249                                  _hideUMB_:
 31250                                  	push	bx
 31251                                  	push	dx
 31252                                  	push	es
 31253                                  
 31254                                  	mov	al,cl
 31255                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 31256                                  	jz	short hu_20
 31257                                  
 31258                                  	mov	al,cl		; Retrieve the size of the largest
 31259                                  	call	BigFree		; free element in AX; put its address in ES
 31260                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 31261                                  
 31262                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 31263                                  	mov	al,cl		; Retrieve the user's specified
 31264                                  	call	GetSize		; minimum size for this umb (into AX)
 31265                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 31266                                  
 31267                                  	or	ax,ax		; If they didn't specify one,
 31268                                  	jz	short hu_20	; Skip over all this.
 31269                                  
 31270                                  	cmp	ax,bx		; Ah... if (specified > max free)
 31271                                  	jbe	short hu_10
 31272                                  
 31273                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 31274                                  	call	unMarkUMB
 31275                                  	jmp	short hu_20
 31276                                  hu_10:	
 31277                                  	call	isTiny		; Returns ZF clear if user specified /S
 31278                                  	jz	short hu_20
 31279                                  
 31280                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 31281                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 31282                                  
 31283                                  	mov	dx,es
 31284                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 31285                                  
 31286                                  hu_20:	mov	ax,cx
 31287                                  	call	isSpecified	; If they specified this UMB, we're done...
 31288                                  	jnz	short hu_X	; so leave.
 31289                                  
 31290                                  	xor	dx,dx
 31291                                  hu_30:	
 31292                                  	mov	al,cl
 31293                                  
 31294                                  	call	hideUMB		; Hides everything in UMB #al
 31295                                  
 31296                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 31297                                  	jz	short hu_X	; So we should leave.
 31298                                  
 31299                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 31300                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 31301                                  hu_X:	
 31302                                  	pop	es
 31303                                  	pop	dx
 31304                                  	pop	bx
 31305                                  	retn
 31306                                  
 31307                                  ; -----------------------------------------------------------------------------
 31308                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 31309                                  ; -----------------------------------------------------------------------------
 31310                                  ; Entry:  None
 31311                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 31312                                  ; Error:  None
 31313                                  ; Uses:   Flags
 31314                                  ; -----------------------------------------------------------------------------
 31315                                  
 31316                                  UnFreeze:
 31317                                  	push	ax
 31318                                  	push	es
 31319                                  
 31320                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 31321                                  	jc	short ufX
 31322                                  
 31323                                  	mov	es,ax
 31324                                  
 31325                                  ; ------------------------------
 31326                                  ; UF10--ES - Current MCB address
 31327                                  ; ------------------------------
 31328                                  
 31329                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 31330                                  	jnz	short uf20
 31331                                  	call	unHideMCB
 31332                                  uf20:	
 31333                                  	mov	al,[es:ARENA.SIGNATURE]
 31334                                  
 31335                                  	cmp	al,arena_signature_end ; 'Z'
 31336                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 31337                                  
 31338                                  	;NextMCB es, ax		; Go on forward.
 31339                                  	mov     ax,es
 31340                                  	;add	ax,[es:3]
 31341                                  	add     ax,[es:ARENA.SIZE]
 31342                                  	inc     ax
 31343                                  	mov     es,ax
 31344                                  
 31345                                  	jmp	short uf10
 31346                                  ufX:	
 31347                                  	pop	es
 31348                                  	pop	ax
 31349                                  	retn
 31350                                  
 31351                                  ; -----------------------------------------------------------------------------
 31352                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 31353                                  ; -----------------------------------------------------------------------------
 31354                                  ; ENTRY:    ES:0 should point to an MCB
 31355                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 31356                                  ; ERROR:    None
 31357                                  ; USES:     Flags
 31358                                  ; -----------------------------------------------------------------------------
 31359                                  
 31360                                  isFrozMCB:
 31361                                  	;push	ax
 31362                                  
 31363                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 31364                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 31365                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 31366                                  	jne	short ifmX
 31367                                  
 31368                                  	;mov	ax,[es:ARENA.NAME+0]
 31369                                  	;cmp	ax,'FR' ; 5246h
 31370                                  	cmp	word [es:ARENA.NAME+0],'FR'
 31371                                  	jne	short ifmX
 31372                                  	;mov	ax,[es:ARENA.NAME+2]
 31373                                  	;cmp	ax,'OZ' ; 5A4Fh
 31374                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 31375                                  	jne	short ifmX
 31376                                  	;mov	ax,[es:ARENA.NAME+4]
 31377                                  	;cmp	ax,'EN' ; 4E45h
 31378                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31379                                  	jne	short ifmX
 31380                                  	;mov	ax,[es:ARENA.NAME+6]
 31381                                  	;cmp	ax,'  ' ; 2020h
 31382                                  	cmp	word [es:ARENA.NAME+6],'  '
 31383                                  ifmX:	
 31384                                  	;pop	ax
 31385                                  	retn
 31386                                  
 31387                                  ; -----------------------------------------------------------------------------
 31388                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 31389                                  ; -----------------------------------------------------------------------------
 31390                                  ; ENTRY:    ES:0 should point to an MCB
 31391                                  ; EXIT:     None; MCB frozen
 31392                                  ; ERROR:    None
 31393                                  ; USES:     None
 31394                                  ; -----------------------------------------------------------------------------
 31395                                  
 31396                                  frezMCB:
 31397                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 31398                                  	mov	word [es:ARENA.NAME+0],'FR'
 31399                                  	mov	word [es:ARENA.NAME+2],'OZ'
 31400                                  	mov	word [es:ARENA.NAME+4],'EN'
 31401                                  	mov	word [es:ARENA.NAME+6],'  '
 31402                                  	retn
 31403                                  
 31404                                  ; -----------------------------------------------------------------------------
 31405                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 31406                                  ; -----------------------------------------------------------------------------
 31407                                  ; Entry:  None
 31408                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 31409                                  ; Error:  None
 31410                                  ; Uses:   Flags
 31411                                  ; -----------------------------------------------------------------------------
 31412                                  
 31413                                  FreezeUM:
 31414                                  	push	ax
 31415                                  	push	cx
 31416                                  	push	dx
 31417                                  	push	es
 31418                                  
 31419                                  	;call	GetLoadUMB
 31420                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 31421                                  
 31422                                  	xor	ah,ah		; Zap ah, so al==ax
 31423                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 31424                                  
 31425                                  	call	UmbHead		; Returns first UMB segment in AX
 31426                                  	mov	es,ax
 31427                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31428                                  
 31429                                  ; -----------------------------------------
 31430                                  ; FUM10--ES - Current MCB address
 31431                                  ;        CX - Current UMB number
 31432                                  ;        DX - UMB number to skip (load UMB)
 31433                                  ; -----------------------------------------
 31434                                  
 31435                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31436                                  	jnz	short fum20
 31437                                  
 31438                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31439                                  fum20:	
 31440                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 31441                                  	je	short fum30	; freeze anything... so skip that section.
 31442                                  
 31443                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 31444                                  	or	word [es:ARENA.OWNER],0
 31445                                  	jnz	short fum30	; either.
 31446                                  
 31447                                  	call	frezMCB
 31448                                  fum30:	
 31449                                  	mov	al,[es:ARENA.SIGNATURE]
 31450                                  	cmp	al,arena_signature_end ; 'Z'
 31451                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 31452                                  
 31453                                  	;NextMCB es, ax		; Go on forward.
 31454                                  	mov     ax,es
 31455                                  	;add	ax,[es:3]
 31456                                  	add     ax,[es:ARENA.SIZE]
 31457                                  	inc     ax
 31458                                  	mov     es,ax
 31459                                  	
 31460                                  	jmp	short fum10
 31461                                  
 31462                                  fumX:	pop	es
 31463                                  	pop	dx
 31464                                  	pop	cx
 31465                                  	pop	ax
 31466                                  	retn
 31467                                  
 31468                                  ; -----------------------------------------------------------------------------
 31469                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 31470                                  ; -----------------------------------------------------------------------------
 31471                                  ; ENTRY:    None
 31472                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 31473                                  ; ERROR:    None
 31474                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 31475                                  ; -----------------------------------------------------------------------------
 31476                                  
 31477                                  UmbTest:
 31478                                  	push	ax
 31479                                  	push	bx
 31480                                  	push	ds
 31481                                  	push	es
 31482                                  
 31483                                  	call	fm_link			; Link in UMBs (if not already linked)
 31484                                  	call	WalkMem			; Check to see if they're really linked
 31485                                  	pushf				; And remember what we found out
 31486                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 31487                                  	popf				; And restore what we found out.
 31488                                  
 31489                                  	pop	es
 31490                                  	pop	ds
 31491                                  	pop	bx
 31492                                  	pop	ax
 31493                                  	retn
 31494                                  
 31495                                  ; -----------------------------------------------------------------------------
 31496                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 31497                                  ; -----------------------------------------------------------------------------
 31498                                  ; ENTRY:    None
 31499                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 31500                                  ; ERROR:    None
 31501                                  ; USES:     Flags
 31502                                  ; -----------------------------------------------------------------------------
 31503                                  
 31504                                  WalkMem:
 31505                                  	push	ax ; ?
 31506                                  	push	bx ; ?
 31507                                  	push	es ; ? no need to save contents of these registers ?
 31508                                  		   	
 31509                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31510                                  	int	21h
 31511                                  
 31512                                  	mov	ax,[es:bx-2]
 31513                                  	mov	es,ax
 31514                                  
 31515                                  ; ------------------------------
 31516                                  ; UM10: ES = Current MCB pointer
 31517                                  ; ------------------------------
 31518                                  
 31519                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 31520                                  	cmp	al,arena_signature_end ;  'Z'
 31521                                  	je	short um20		; If signature == 'Z', hay no more.
 31522                                  
 31523                                  	;NextMCB es, bx			; Move to the next MCB
 31524                                  
 31525                                  	mov     bx,es
 31526                                  	;add	bx,[es:3]
 31527                                  	add     bx,[es:ARENA.SIZE]
 31528                                  	inc     bx
 31529                                  	mov     es,bx
 31530                                  		
 31531                                  	jmp	short um10		; And restart the loop.
 31532                                  um20:	
 31533                                  	mov	ax,es
 31534                                  
 31535                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 31536                                  
 31537                                  	pop	es ; ?
 31538                                  	pop	bx ; ?
 31539                                  	pop	ax ; ?
 31540                                  	retn
 31541                                  
 31542                                  ; -----------------------------------------------------------------------------
 31543                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 31544                                  ; -----------------------------------------------------------------------------
 31545                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31546                                  ; EXIT:     None
 31547                                  ; ERROR:    None
 31548                                  ; USES:     AX, BX
 31549                                  ; -----------------------------------------------------------------------------
 31550                                  
 31551                                  hl_unlink:
 31552                                  	xor	bh,bh
 31553                                  
 31554                                  	;getdata bl,fm_umb		; Restore original link-state
 31555                                  	;
 31556                                  	;push	ds
 31557                                  	;push	cs
 31558                                  	;pop	ds
 31559                                  	;mov	bl,[fm_umb]
 31560                                  	;pop	ds
 31561                                  
 31562                                  	mov	bl,[cs:fm_umb]
 31563                                  
 31564                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31565                                  	int	21h
 31566                                  	retn
 31567                                  
 31568                                  ; ----------------------------------------------------------------------
 31569                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 31570                                  ; ----------------------------------------------------------------------
 31571                                  ; 09/04/2019 - Retro DOS v4.0
 31572                                  
 31573                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 31574                                  ;   Date:     May 14, 1992
 31575                                  
 31576                                  ;   Modification log:
 31577                                  ;
 31578                                  ;     DATE    WHO      DESCRIPTION
 31579                                  ;   --------  -------  --------------------------------------------------------
 31580                                  ;   05/14/92  t-richj  Original
 31581                                  ;   06/21/92  t-richj  Final revisions before check-in
 31582                                  
 31583                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 31584                                  
 31585                                  ; -----------------------------------------------------------------------------
 31586                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 31587                                  ; -----------------------------------------------------------------------------
 31588                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 31589                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 31590                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 31591                                  ; ERROR:  None
 31592                                  ; USES:   fInHigh (from highvar.inc), carry flag
 31593                                  ; -----------------------------------------------------------------------------
 31594                                  
 31595                                  UnHideUMBs:
 31596                                  	push	ax		; Save ax for what we're about to do
 31597                                  
 31598                                  ; -----------------------------------------------------------------------------
 31599                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 31600                                  ;    length of time. Those six constitute a check of whether or not we should
 31601                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 31602                                  ;    will destroy the current link-state and memory-allocation strategy after
 31603                                  ;    every command execution.
 31604                                  ; -----------------------------------------------------------------------------
 31605                                  
 31606                                  	;getdata al,fInHigh	; Get InHigh from data segment
 31607                                  	;
 31608                                  	;push	ds
 31609                                  	;push	cs
 31610                                  	;pop	ds
 31611                                  	;mov	al,[fInHigh]
 31612                                  	;pop	ds	
 31613                                  
 31614                                  	mov	al,[cs:fInHigh]
 31615                                  
 31616                                  	or	al,al
 31617                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 31618                                  
 31619                                  	pop	ax		; then there's nothing to do here... so
 31620                                  	stc			; restore everything and return. Just like
 31621                                  	retn			; that.
 31622                                  uhu10:	
 31623                                  	call	linkumb		; Make sure UMBs are linked in.
 31624                                  	call	FreeUMBs
 31625                                  
 31626                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 31627                                  	;
 31628                                  	;push	es
 31629                                  	;push	cs
 31630                                  	;pop	es
 31631                                  	;mov	byte [es:fInHigh],0
 31632                                  	;pop	ds	
 31633                                  
 31634                                  	mov	byte [cs:fInHigh],0	
 31635                                  
 31636                                  	call	he_unlink	; Unlink UMBs
 31637                                  
 31638                                  	pop	ax
 31639                                  	; 12/12/2022
 31640                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 31641                                  	retn
 31642                                  
 31643                                  ; -----------------------------------------------------------------------------
 31644                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 31645                                  ; -----------------------------------------------------------------------------
 31646                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31647                                  ; EXIT:     None
 31648                                  ; ERROR:    None
 31649                                  ; USES:     AX, BX
 31650                                  ; -----------------------------------------------------------------------------
 31651                                  
 31652                                  he_unlink:
 31653                                  	xor	bh, bh
 31654                                  
 31655                                  	;getdata bl, fm_umb	; Restore original link-state
 31656                                  	mov	bl,[cs:fm_umb]	
 31657                                  
 31658                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31659                                  	int	21h
 31660                                  	retn
 31661                                  
 31662                                  ; -----------------------------------------------------------------------------
 31663                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 31664                                  ; -----------------------------------------------------------------------------
 31665                                  ; ENTRY:    None
 31666                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 31667                                  ; ERROR:    None (ignore CF)
 31668                                  ; USES:     Flags
 31669                                  ; -----------------------------------------------------------------------------
 31670                                  
 31671                                  FreeUMBs:
 31672                                  	push	ax
 31673                                  	push	es
 31674                                  
 31675                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 31676                                  	jc	short fusX
 31677                                  
 31678                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 31679                                  fus10:	
 31680                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 31681                                  	jnz	short fus20
 31682                                  	call	freeMCB
 31683                                  fus20:	   
 31684                                  	mov	al,[es:ARENA.SIGNATURE]
 31685                                  	cmp	al,arena_signature_end ; 'Z'
 31686                                  	jz	short fusX	; That means this was the last MCB--that's it.
 31687                                  
 31688                                  	mov	ax,es
 31689                                  	add	ax,[es:ARENA.SIZE]
 31690                                  	inc	ax
 31691                                  	mov	es,ax		; Go on forward.
 31692                                  
 31693                                  	jmp	short fus10
 31694                                  fusX:	
 31695                                  	pop	es
 31696                                  	pop	ax
 31697                                  	retn
 31698                                  
 31699                                  ; -----------------------------------------------------------------------------
 31700                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 31701                                  ; -----------------------------------------------------------------------------
 31702                                  ; ENTRY:    ES:0 should point to an MCB
 31703                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 31704                                  ; ERROR:    None
 31705                                  ; USES:     Flags
 31706                                  ; -----------------------------------------------------------------------------
 31707                                  
 31708                                  isHideMCB:
 31709                                  	;push	ax
 31710                                  
 31711                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 31712                                  	jne	short ihm_x				; then check for HIDDEN
 31713                                  
 31714                                  	;mov	ax,[es:ARENA.NAME]
 31715                                  	;cmp	ax,'HI' ; 4948h
 31716                                  	cmp	word [es:ARENA.NAME+0],'HI'
 31717                                  	jne	short ihm_x
 31718                                  	;mov	ax,[es:ARENA.NAME+2]
 31719                                  	;cmp	ax,'DD' ; 4444h
 31720                                  	cmp	word [es:ARENA.NAME+2],'DD'
 31721                                  	jne	short ihm_x
 31722                                  	;mov	ax,[es:ARENA.NAME+4]
 31723                                  	;cmp	ax,'EN' ; 4E45h
 31724                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31725                                  	jne	short ihm_x
 31726                                  	;mov	ax,[es:ARENA.NAME+6]
 31727                                  	;cmp	ax,'  ' ; 2020h
 31728                                  	cmp	word [es:ARENA.NAME+6],'  '
 31729                                  ihm_x:	
 31730                                  	;pop	ax
 31731                                  	retn
 31732                                  
 31733                                  ; -----------------------------------------------------------------------------
 31734                                  ;*** freeMCB - marks as free the MCB at ES:0
 31735                                  ; -----------------------------------------------------------------------------
 31736                                  ; ENTRY:    ES:0 should point to an MCB
 31737                                  ; EXIT:     None; MCB free'd
 31738                                  ; ERROR:    None
 31739                                  ; USES:     AX
 31740                                  ; -----------------------------------------------------------------------------
 31741                                  
 31742                                  freeMCB:
 31743                                  	mov	word [es:ARENA.OWNER],0
 31744                                  	mov	ax,'  '
 31745                                  	mov	[es:ARENA.NAME+0],ax
 31746                                  	mov	[es:ARENA.NAME+2],ax
 31747                                  	mov	[es:ARENA.NAME+4],ax
 31748                                  	mov	[es:ARENA.NAME+6],ax
 31749                                  	retn
 31750                                  
 31751                                  ; -----------------------------------------------------------------------------
 31752                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 31753                                  ; -----------------------------------------------------------------------------
 31754                                  ; ENTRY:  Nothing
 31755                                  ; EXIT:   AX contains 0x9FFF for most systems
 31756                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 31757                                  ; USES:   Flags, AX
 31758                                  ; -----------------------------------------------------------------------------
 31759                                  
 31760                                  HeadUmb:
 31761                                  	; 13/05/2019
 31762                                  
 31763                                  	;push	si ; ?
 31764                                  	;push	ds ; ?
 31765                                  	;push	es
 31766                                  	;push	bx ; *
 31767                                  
 31768                                  	; 09/04/2019
 31769                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 31770                                  
 31771                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31772                                  	int	21h
 31773                                  			; DOS - 2+ internal - GET LIST OF LISTS
 31774                                  			; Return: ES:BX -> DOS list of lists
 31775                                  	;mov	ax,[es:8Ch]
 31776                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 31777                                  	cmp	ax,0FFFFh
 31778                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 31779                                  
 31780                                  	;clc				; Else, it isn't.
 31781                                  	;jmp	short xhu_x
 31782                                  xhu_e:	
 31783                                  	;stc
 31784                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 31785                                  xhu_x:	
 31786                                  	;pop	bx ; *
 31787                                  	;pop	es	
 31788                                  	;pop	ds ; ?
 31789                                  	;pop	si ; ?
 31790                                  	retn
 31791                                  
 31792                                  ; -----------------------------------------------------------------------------
 31793                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 31794                                  ; -----------------------------------------------------------------------------
 31795                                  ; ENTRY:    None
 31796                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 31797                                  ; ERROR:    None
 31798                                  ; USES:     AX, BX, fm_umb
 31799                                  ; -----------------------------------------------------------------------------
 31800                                  
 31801                                  linkumb:
 31802                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 31803                                  	int	21h			; Current link-state is now in al
 31804                                  
 31805                                  	or	al,al			; BUGBUG: proper check?
 31806                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 31807                                  
 31808                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31809                                  	mov	bx,1
 31810                                  	int	21h
 31811                                  lumbX:
 31812                                  	retn
 31813                                  
 31814                                  %endif
 31815                                  
 31816                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31817                                  ; (SYSINIT:2B5Fh)
 31818                                  
 31819                                  ; ----------------------------------------------------------------------
 31820                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 31821                                  ; ----------------------------------------------------------------------
 31822                                  ; 09/04/2019 - Retro DOS v4.0
 31823                                  
 31824                                  ;----------------------------------------------------------------------------
 31825                                  ;
 31826                                  ; procedure : InitDevLoad
 31827                                  ;
 31828                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 31829                                  ;			 = 1 indicates load in UMB:
 31830                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 31831                                  ;		                    = 1 indicates a DOS 5-style load
 31832                                  ;		DevSize  = Size of the device driver file in paras
 31833                                  ;
 31834                                  ;	Output : none
 31835                                  ;
 31836                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 31837                                  ;	Also sets up a header for the Device driver entry for mem utility
 31838                                  ;
 31839                                  ;----------------------------------------------------------------------------
 31840                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 31841                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 31842                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 31843                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 31844                                  ;----------------------------------------------------------------------------
 31845                                  
 31846                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31847                                  InitDevLoad:
 31848                                  	; 11/12/2022
 31849                                  	; ds = cs
 31850 00002771 803E[7D1E]00            	cmp	byte [DeviceHi],0
 31851                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 31852                                  	;je	short InitForLo		; no, init for lo mem
 31853 00002776 741F                    	je	short initforlo_x ; 09/04/2019
 31854                                  
 31855                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31856                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 31857                                  ;	je	short InitForConv
 31858                                  ;
 31859                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 31860                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 31861                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 31862                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 31863                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 31864                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 31865                                  ;
 31866                                  ;	call	ShrinkUMB		; Stop using the old device arena
 31867                                  ;
 31868                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 31869                                  ;	call	FreezeUM		; Hide everything BUT the load area
 31870                                  ;	call	GetUMBForDev		; And grab that load area as needed
 31871                                  ;	pushf
 31872                                  ;	call	UnFreeze		; Then unhide everything frozen
 31873                                  ;	popf
 31874                                  ;
 31875                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 31876                                  ;
 31877                                  ;	jmp	short InitForHi
 31878                                  
 31879                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31880                                  	; (SYSINIT:2B67h)
 31881                                  InitForConv:
 31882                                  	; 11/12/2022
 31883                                  	; ds = cs
 31884 00002778 E83700                  	call	SpaceInUMB		; Do we have space left in the
 31885                                  					;  current UMB ?
 31886 0000277B 7308                    	jnc	short InitForHi		; yes, we have
 31887 0000277D E83D04                  	call	ShrinkUMB		; shrink the current UMB in use
 31888 00002780 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 31889 00002783 720D                    	jc	short InitForLo		; we didn't succeed, so load
 31890                                  					;  in low memory
 31891                                  InitForHi:
 31892                                  	; 11/12/2022
 31893                                  	; ds = cs
 31894                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 31895                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 31896                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 31897 00002785 A1[731E]                	mov	ax,[DevUMBFree]
 31898 00002788 8B16[6F1E]              	mov	dx,[DevUMBAddr]
 31899 0000278C 0316[711E]              	add	dx,[DevUMBSize]
 31900 00002790 EB0C                    	jmp	short idl1
 31901                                  
 31902                                  InitForLo:
 31903                                  	; 11/12/2022
 31904                                  	; ds = cs
 31905                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 31906 00002792 C606[7D1E]00            	mov	byte [DeviceHi],0
 31907                                  initforlo_x:
 31908                                  	; 11/12/2022
 31909                                  	; ds = cs
 31910                                  					;  into UMB indicate that
 31911                                  					;  we are loading low
 31912                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 31913                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 31914 00002797 A1[E003]                	mov	ax,[memhi]
 31915 0000279A 8B16[A302]              	mov	dx,[ALLOCLIM]
 31916                                  idl1:
 31917 0000279E E86600                  	call	DevSetMark		; setup a sub-arena for DD
 31918                                  	; 11/12/2022
 31919                                  	; ds = cs
 31920                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 31921                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 31922                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 31923                                  	;mov	[cs:DevEntry+2],ax
 31924 000027A1 A3[621E]                	mov	[DevLoadAddr],ax
 31925 000027A4 8916[641E]              	mov	[DevLoadEnd],dx
 31926 000027A8 C706[661E]0000          	mov	word [DevEntry],0
 31927 000027AE A3[681E]                	mov	[DevEntry+2],ax
 31928 000027B1 C3                      	retn
 31929                                  
 31930                                  ;----------------------------------------------------------------------------
 31931                                  ;
 31932                                  ; procedure : SpaceInUMB?
 31933                                  ;
 31934                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 31935                                  ;	Output : Carry set if no space in UMB
 31936                                  ;		 Carry clear if Space is available for the device in
 31937                                  ;		   current UMB
 31938                                  ;
 31939                                  ;----------------------------------------------------------------------------
 31940                                  
 31941                                  SpaceInUMB:
 31942                                  	; 11/12/2022
 31943                                  	; ds = cs
 31944                                  	;mov	ax,[cs:DevUMBSize]
 31945                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 31946                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 31947 000027B2 A1[711E]                	mov	ax,[DevUMBSize]
 31948 000027B5 0306[6F1E]              	add	ax,[DevUMBAddr]		; End of UMB
 31949 000027B9 2B06[731E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 31950                                  	; 11/12/2022
 31951                                  	;or	ax,ax			; Nospace ?
 31952                                  	;jnz	short spcinumb1
 31953                                  	;stc
 31954                                  	;retn
 31955                                  	; 11/12/2022
 31956 000027BD 83F801                  	cmp	ax,1
 31957 000027C0 7205                    	jb	short spcinumb2	; cf=1
 31958                                  spcinumb1:
 31959 000027C2 48                      	dec	ax			; space for sub-arena
 31960                                  	; 11/12/2022
 31961                                  	; ds = cs
 31962 000027C3 3B06[601E]              	cmp	ax,[DevSize]
 31963                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 31964                                  spcinumb2:
 31965 000027C7 C3                      	retn
 31966                                  
 31967                                  ;----------------------------------------------------------------------------
 31968                                  ;
 31969                                  ; procedure : PrepareMark
 31970                                  ;
 31971                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 31972                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 31973                                  ;
 31974                                  ;----------------------------------------------------------------------------
 31975                                  
 31976                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31977                                  ;
 31978                                  ;PrepareMark:
 31979                                  ;	push	ds
 31980                                  ;	mov	ds,ax
 31981                                  ;	mov	word [ARENA.OWNER],8
 31982                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 31983                                  ;	pop	ds
 31984                                  ;
 31985                                  ;	inc	ax
 31986                                  ;	mov	[cs:DevUMBAddr],ax
 31987                                  ;	mov	[cs:DevUMBFree],ax
 31988                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31989                                  ;	retn
 31990                                  
 31991                                  ;----------------------------------------------------------------------------
 31992                                  ;
 31993                                  ; procedure : GetUMBForDev
 31994                                  ;
 31995                                  ;	Input : DevSize
 31996                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 31997                                  ;		 the device.
 31998                                  ;		 If success carry clear
 31999                                  ;
 32000                                  ;	Allocates the biggest UMB for loading devices and updates
 32001                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 32002                                  ;	UMB.
 32003                                  ;
 32004                                  ;	This routine relies on the fact that all of the low memory
 32005                                  ;	is allocated, and any DOS alloc calls should return memory
 32006                                  ;	from the UMB pool.
 32007                                  ;
 32008                                  ;----------------------------------------------------------------------------
 32009                                  
 32010                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32011                                  	; (SYSINIT:2BC6h)
 32012                                  
 32013                                  GetUMBForDev:
 32014                                  	; 11/12/2022
 32015                                  	; ds = cs
 32016 000027C8 BBFFFF                  	mov	bx,0FFFFh
 32017 000027CB B80048                  	mov	ax,4800h
 32018 000027CE CD21                    	int	21h
 32019                                  		; DOS - 2+ - ALLOCATE MEMORY
 32020                                  		; BX = number of 16-byte paragraphs desired
 32021                                  
 32022 000027D0 09DB                    	or	bx,bx
 32023                                  	;jz	short gufd_err
 32024                                  	; 09/09/2023
 32025 000027D2 742E                    	jz	short gufd_error ; bx = 0
 32026                                  
 32027 000027D4 4B                      	dec	bx
 32028                                  	; 11/12/2022
 32029                                  	; ds = cs
 32030 000027D5 391E[601E]              	cmp	[DevSize],bx
 32031                                  	;cmp	[cs:DevSize],bx
 32032 000027D9 7725                    	ja	short gufd_err
 32033                                  
 32034 000027DB 43                      	inc	bx
 32035                                  
 32036 000027DC B80048                  	mov	ax,4800h
 32037 000027DF CD21                    	int	21h
 32038 000027E1 721D                    	jc	short gufd_err
 32039                                  
 32040                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32041                                  	;dec	ax
 32042                                  	;call	PrepareMark
 32043                                  	;
 32044                                  PrepareMark:
 32045 000027E3 1E                      	push	ds
 32046 000027E4 48                      	dec	ax
 32047 000027E5 8ED8                    	mov	ds,ax
 32048 000027E7 C70601000800            	mov	word [ARENA.OWNER],8
 32049 000027ED C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 32050 000027F3 40                      	inc	ax
 32051 000027F4 1F                      	pop	ds
 32052                                  	; 11/12/2022
 32053                                  	; ds = cs
 32054                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32055                                  	;mov	[cs:DevUMBAddr],ax
 32056                                  	;mov	[cs:DevUMBFree],ax
 32057                                  gufd_x:		; 09/09/2023
 32058 000027F5 891E[711E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 32059 000027F9 A3[6F1E]                	mov	[DevUMBAddr],ax
 32060 000027FC A3[731E]                	mov	[DevUMBFree],ax
 32061                                  	;
 32062                                  	; 11/12/2022
 32063                                  	; cf=0
 32064                                  	;clc				; mark no error
 32065 000027FF C3                      	retn
 32066                                  
 32067                                  	; 09/09/2023
 32068                                  %if 1
 32069                                  gufd_err:
 32070 00002800 31DB                    	xor	bx,bx ; 0
 32071                                  gufd_error:
 32072 00002802 31C0                    	xor	ax,ax ; 0
 32073 00002804 F9                      	stc	; cf=1
 32074 00002805 EBEE                    	jmp	short gufd_x	
 32075                                  %endif
 32076                                  
 32077                                  ; 09/09/2023
 32078                                  %if 0
 32079                                  gufd_err:
 32080                                  	xor	ax,ax ; 0
 32081                                  	; 11/12/2022
 32082                                  	; ds = cs
 32083                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 32084                                  	;mov	[cs:DevUMBAddr],ax
 32085                                  	;mov	[cs:DevUMBFree],ax
 32086                                  	mov	[DevUMBSize],ax		; erase the previous values
 32087                                  	mov	[DevUMBAddr],ax
 32088                                  	mov	[DevUMBFree],ax
 32089                                  	stc
 32090                                  	retn
 32091                                  %endif
 32092                                  
 32093                                  ;----------------------------------------------------------------------------
 32094                                  ;
 32095                                  ; procedure : DevSetMark
 32096                                  ;
 32097                                  ;	Input : AX - Free segment were device is going to be loaded
 32098                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 32099                                  ;
 32100                                  ;	Creates a sub-arena for the device driver
 32101                                  ;	puts 'D' marker in the sub-arena
 32102                                  ;	Put the owner of the sub-arena as (AX+1)
 32103                                  ;	Copies the file name into sub-arena name field
 32104                                  ;
 32105                                  ;	Size field of the sub-arena will be set only at succesful
 32106                                  ;	completion of Device load.
 32107                                  ;
 32108                                  ;----------------------------------------------------------------------------
 32109                                  
 32110                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32111                                  	; (SYSINIT:2C13h)
 32112                                  
 32113                                  DevSetMark:
 32114 00002807 06                      	push	es
 32115 00002808 57                      	push	di
 32116 00002809 1E                      	push	ds
 32117 0000280A 56                      	push	si
 32118 0000280B 8EC0                    	mov	es,ax
 32119 0000280D 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 32120 00002813 40                      	inc	ax
 32121 00002814 26A30100                	mov	[es:devmark.seg],ax
 32122                                  
 32123                                  ;-------------- Copy file name
 32124                                  
 32125 00002818 50                      	push	ax			; save load addr
 32126                                  
 32127                                  	; 09/09/2023
 32128                                  	; ds = cs
 32129                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 32130 00002819 C536[F803]              	lds	si,[bpb_addr]
 32131                                  
 32132 0000281D 89F7                    	mov	di,si
 32133 0000281F FC                      	cld
 32134                                  dsm_again:
 32135 00002820 AC                      	lodsb
 32136 00002821 3C3A                    	cmp	al,':'
 32137 00002823 7504                    	jne	short isit_slash
 32138 00002825 89F7                    	mov	di,si
 32139 00002827 EBF7                    	jmp	short dsm_again
 32140                                  isit_slash:
 32141 00002829 3C5C                    	cmp	al, '\'
 32142 0000282B 7504                    	jne	short isit_null
 32143 0000282D 89F7                    	mov	di,si
 32144 0000282F EBEF                    	jmp	short dsm_again
 32145                                  isit_null:
 32146 00002831 08C0                    	or	al,al
 32147 00002833 75EB                    	jnz	short dsm_again
 32148 00002835 89FE                    	mov	si,di
 32149                                  
 32150 00002837 BF0800                  	mov	di,devmark.filename ; 8
 32151 0000283A B90800                  	mov	cx,8			; maximum 8 characters
 32152                                  dsm_next_char:
 32153 0000283D AC                      	lodsb
 32154 0000283E 08C0                    	or	al, al
 32155 00002840 7407                    	jz	short blankout
 32156 00002842 3C2E                    	cmp	al, '.'
 32157 00002844 7403                    	je	short blankout
 32158 00002846 AA                      	stosb
 32159 00002847 E2F4                    	loop	dsm_next_char
 32160                                  blankout:
 32161 00002849 E304                    	jcxz	dsm_exit
 32162 0000284B B020                    	mov	al, ' '
 32163 0000284D F3AA                    	rep	stosb			; blank out the rest
 32164                                  dsm_exit:
 32165 0000284F 58                      	pop	ax			; restore load addr
 32166 00002850 5E                      	pop	si
 32167 00002851 1F                      	pop	ds
 32168 00002852 5F                      	pop	di
 32169 00002853 07                      	pop	es
 32170 00002854 C3                      	retn
 32171                                  
 32172                                  ;----------------------------------------------------------------------------
 32173                                  ;
 32174                                  ; procedure : SizeDevice
 32175                                  ;
 32176                                  ;	Input : ES:SI - points to device file to be sized
 32177                                  ;
 32178                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 32179                                  ;
 32180                                  ;	Calculates the size of the device file in paras and stores it
 32181                                  ;	in DevSize
 32182                                  ;
 32183                                  ;----------------------------------------------------------------------------
 32184                                  
 32185                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32186                                  SizeDevice:
 32187                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32188                                  	; 11/12/2022 ; *
 32189 00002855 1E                      	push	ds ; *
 32190 00002856 06                      	push	es
 32191 00002857 1F                      	pop	ds
 32192 00002858 89F2                    	mov	dx,si			; ds:dx -> file name
 32193 0000285A B8003D                  	mov	ax,3D00h		; open
 32194 0000285D CD21                    	int	21h
 32195 0000285F 7243                    	jc	short sd_err		; open failed
 32196                                  
 32197 00002861 89C3                    	mov	bx,ax			; BX - file handle
 32198 00002863 B80242                  	mov	ax,4202h		; seek
 32199 00002866 31C9                    	xor	cx,cx
 32200 00002868 89CA                    	mov	dx,cx			; to end of file
 32201 0000286A CD21                    	int	21h
 32202 0000286C 722F                    	jc	short sd_close		; did seek fail (impossible)
 32203 0000286E 83C00F                  	add	ax,15			; para convert
 32204 00002871 83D200                  	adc	dx,0
 32205 00002874 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 32206 00002878 7409                    	jz	short szdev1		; no
 32207 0000287A 2EC706[601E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 32208                                  					; assuming that we fail later
 32209 00002881 EB1A                    	jmp	short sd_close
 32210                                  szdev1:
 32211 00002883 B104                    	mov	cl,4			; convert it to paras
 32212 00002885 D3E8                    	shr	ax,cl
 32213 00002887 B10C                    	mov	cl,12
 32214 00002889 D3E2                    	shl	dx,cl
 32215 0000288B 09D0                    	or	ax,dx
 32216                                  	;
 32217                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32218 0000288D 2E3B06[7E1E]            	cmp     ax,[cs:DevSizeOption]
 32219                                  	;ja	short szdev2
 32220                                  	; 14/08/2023
 32221 00002892 7305                    	jnb	short szdev2
 32222                                  
 32223 00002894 2EA1[7E1E]              	mov     ax,[cs:DevSizeOption]
 32224                                  	; 12/12/2022
 32225 00002898 F8                      	clc
 32226                                  szdev2:
 32227 00002899 2EA3[601E]              	mov	[cs:DevSize],ax		; save file size
 32228                                  
 32229                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32230                                  	; 12/12/2022
 32231                                  	; cf=0
 32232                                  	;clc
 32233                                  sd_close:
 32234 0000289D 9C                      	pushf				; let close not spoil our
 32235                                  					;  carry flag
 32236 0000289E B8003E                  	mov	ax,3E00h		; close
 32237 000028A1 CD21                    	int	21h			; we are not checking for err
 32238 000028A3 9D                      	popf
 32239                                  sd_err:
 32240                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32241                                  	; 11/12/2022 ; *
 32242 000028A4 1F                      	pop     ds ; *
 32243 000028A5 C3                      	retn
 32244                                  
 32245                                  ;----------------------------------------------------------------------------
 32246                                  ;
 32247                                  ; procedure : ExecDev
 32248                                  ;
 32249                                  ;	Input : ds:dx -> device to be executed
 32250                                  ;		DevLoadAddr - contains where device has to be loaded
 32251                                  ;
 32252                                  ;	Output : Carry if error
 32253                                  ;		 Carry clear if no error
 32254                                  ;
 32255                                  ;	Loads a device driver using the 4b03h function call
 32256                                  ;
 32257                                  ;----------------------------------------------------------------------------
 32258                                  
 32259                                  	; 01/11/2022
 32260                                  ExecDev:
 32261 000028A6 2E8B1E[621E]            	mov	bx,[cs:DevLoadAddr]
 32262 000028AB 2E891E[791E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 32263                                  					;  block for exec with
 32264                                  					;  Load address
 32265 000028B0 2E891E[7B1E]            	mov	[cs:DevExecReloc],bx
 32266 000028B5 8CCB                    	mov	bx,cs
 32267 000028B7 8EC3                    	mov	es,bx
 32268 000028B9 BB[791E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 32269 000028BC B003                    	mov	al,3	; (load program only)
 32270 000028BE B44B                    	mov	ah,EXEC ; 4Bh
 32271 000028C0 CD21                    	int	21h			;load in the device driver
 32272                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 32273                                  		; DS:DX -> ASCIZ filename
 32274                                  		; ES:BX -> parameter block
 32275                                  		; AL = subfunction 
 32276 000028C2 C3                      	retn
 32277                                  
 32278                                  ;----------------------------------------------------------------------------
 32279                                  ;
 32280                                  ; procedure : RetFromUM
 32281                                  ;
 32282                                  ;	Input : None
 32283                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 32284                                  ;		 ConvLoad clear if did.
 32285                                  ;
 32286                                  ;	Prepares memory for more devices after returning from loading one
 32287                                  ;	using the DOS 6 options (/L:... etc).
 32288                                  ;
 32289                                  ;----------------------------------------------------------------------------
 32290                                  
 32291                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32292                                  ;RetFromUM:
 32293                                  ;	pushf
 32294                                  ;	mov	byte [cs:ConvLoad],1
 32295                                  ;	call	UnHideUMBs
 32296                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 32297                                  ;	mov	byte [cs:ConvLoad],0
 32298                                  ;rfUM1:	
 32299                                  ;	popf
 32300                                  ;	retn
 32301                                  
 32302                                  ;----------------------------------------------------------------------------
 32303                                  ;
 32304                                  ; procedure : RemoveNull
 32305                                  ;
 32306                                  ;	Input : ES:SI points to a null terminated string
 32307                                  ;
 32308                                  ;	Output : none
 32309                                  ;
 32310                                  ;	Replaces the null at the end of a string with blank
 32311                                  ;
 32312                                  ;----------------------------------------------------------------------------
 32313                                  
 32314                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32315                                  	; (SYSINIT:2CCEh)
 32316                                  RemoveNull:
 32317                                  	; 11/12/2022
 32318                                  	; ds = cs
 32319                                  rn_next:
 32320 000028C3 268A1C                  	mov	bl,[es:si]
 32321 000028C6 08DB                    	or	bl,bl			; null ?
 32322 000028C8 7403                    	jz	short rn_gotnull
 32323 000028CA 46                      	inc	si			; advance the pointer
 32324 000028CB EBF6                    	jmp	short rn_next
 32325                                  rn_gotnull:
 32326                                  	; 11/12/2022
 32327 000028CD 8A1E[921E]              	mov	bl,[DevSavedDelim]
 32328                                  	;mov	bl,[cs:DevSavedDelim]
 32329 000028D1 26881C                  	mov	[es:si],bl		; replace null with blank
 32330                                  	; 02/11/2022
 32331                                  ; 11/12/2022
 32332                                  rba_ok:		; 10/04/2019
 32333 000028D4 C3                      	retn
 32334                                  
 32335                                  ;----------------------------------------------------------------------------
 32336                                  ;
 32337                                  ; procedure : RoundBreakAddr
 32338                                  ;
 32339                                  ;	Input : DevBrkAddr
 32340                                  ;	Output : DevBrkAddr
 32341                                  ;
 32342                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 32343                                  ;
 32344                                  ;----------------------------------------------------------------------------
 32345                                  
 32346                                  RoundBreakAddr:
 32347 000028D5 2EA1[6A1E]              	mov	ax,[cs:DevBrkAddr]
 32348 000028D9 E8C8E7                  	call	ParaRound
 32349 000028DC 2E0106[6C1E]            	add	[cs:DevBrkAddr+2],ax
 32350 000028E1 2EC706[6A1E]0000        	mov	word [cs:DevBrkAddr],0
 32351 000028E8 2EA1[641E]              	mov	ax,[cs:DevLoadEnd]
 32352 000028EC 2E3906[6C1E]            	cmp	[cs:DevBrkAddr+2],ax
 32353 000028F1 76E1                    	jbe	short rba_ok
 32354 000028F3 E95E07                  	jmp	mem_err
 32355                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32356                                  	; 11/12/2022
 32357                                  ;rba_ok:
 32358                                  ;	retn
 32359                                  
 32360                                  ;----------------------------------------------------------------------------
 32361                                  ;
 32362                                  ; procedure : DevSetBreak
 32363                                  ;
 32364                                  ;	Input : DevBrkAddr
 32365                                  ;	Output : Carry set if Device returned Init failed
 32366                                  ;		 Else carry clear
 32367                                  ;
 32368                                  ;----------------------------------------------------------------------------
 32369                                  
 32370                                  DevSetBreak:
 32371 000028F6 50                      	push	ax
 32372                                  
 32373 000028F7 2EA1[6C1E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 32374 000028FB 2E803E[0D14]00          	cmp	byte [cs:multdeviceflag],0
 32375 00002901 750F                    	jne	short set_break_continue ;do not check it.
 32376 00002903 2E3B06[621E]            	cmp	ax,[cs:DevLoadAddr]
 32377 00002908 7508                    	jne	short set_break_continue ;if not same, then o.k.
 32378                                  
 32379                                  	;cmp	word [cs:DevBrkAddr],0
 32380                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 32381                                  	; 12/12/2022
 32382 0000290A 2E833E[6A1E]01          	cmp	word [cs:DevBrkAddr],1
 32383 00002910 7204                    	jb	short break_failed
 32384                                  
 32385                                  set_break_continue:
 32386 00002912 E8C0FF                  	call	RoundBreakAddr
 32387                                  	; 12/12/2022
 32388 00002915 F8                      	clc
 32389                                  break_failed:
 32390 00002916 58                      	pop	ax
 32391                                  	;clc
 32392 00002917 C3                      	retn
 32393                                  
 32394                                  	; 12/12/2022
 32395                                  ;break_failed:
 32396                                  	;pop	ax
 32397                                  	;stc
 32398                                  	;retn
 32399                                  
 32400                                  ;----------------------------------------------------------------------------
 32401                                  ;
 32402                                  ; procedure : DevBreak
 32403                                  ;
 32404                                  ;	Input : DevLoadAddr & DevBrkAddr
 32405                                  ;	Output : none
 32406                                  ;
 32407                                  ;	Marks a succesful install of a device driver
 32408                                  ;	Sets device size field in sub-arena &
 32409                                  ;	Updates Free ptr in UMB or adjusts memhi
 32410                                  ;
 32411                                  ;----------------------------------------------------------------------------
 32412                                  
 32413                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32414                                  DevBreak:
 32415                                  	;push	ds ; 11/12/2022
 32416                                  
 32417                                  	; 11/12/2022
 32418 00002918 0E                      	push	cs
 32419 00002919 1F                      	pop	ds
 32420                                  	;mov	ax,[cs:DevLoadAddr]
 32421                                  	;mov	bx,[cs:DevBrkAddr+2]
 32422 0000291A A1[621E]                	mov	ax,[DevLoadAddr]
 32423 0000291D 8B1E[6C1E]              	mov	bx,[DevBrkAddr+2]
 32424                                  	; 11/12/2022
 32425 00002921 1E                      	push	ds
 32426                                  
 32427 00002922 48                      	dec	ax			; seg of sub-arena
 32428 00002923 8ED8                    	mov	ds,ax
 32429 00002925 40                      	inc	ax			; Back to Device segment
 32430 00002926 29D8                    	sub	ax,bx
 32431 00002928 F7D8                    	neg	ax			; size of device in paras
 32432 0000292A A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 32433                                  	
 32434                                  	; 11/12/2022
 32435 0000292D 1F                      	pop	ds
 32436                                  	; ds = cs
 32437                                   	
 32438 0000292E 803E[7D1E]00            	cmp	byte [DeviceHi],0
 32439                                  	;cmp	byte [cs:DeviceHi],0
 32440 00002933 7405                    	je	short db_lo
 32441                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 32442                                  	;jmp	short db_exit
 32443                                  	; 11/12/2022
 32444 00002935 891E[731E]              	mov	[DevUMBFree],bx
 32445 00002939 C3                      	retn	
 32446                                  db_lo:
 32447                                  	; 11/12/2022
 32448                                  	; ds = cs
 32449                                  	;mov	[cs:memhi],bx
 32450                                  	;mov	word [cs:memlo],0
 32451 0000293A 891E[E003]              	mov	[memhi],bx
 32452 0000293E C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 32453                                  db_exit:
 32454                                  	;pop	ds ; 11/12/2022
 32455                                  	; 17/09/2023
 32456                                  ;sd_ret:	; 09/09/2023
 32457 00002944 C3                      	retn
 32458                                  
 32459                                  ; 10/04/2019 - Retro DOS v4.0
 32460                                  
 32461                                  ;----------------------------------------------------------------------------
 32462                                  ;
 32463                                  ; procedure : ParseSize
 32464                                  ;
 32465                                  ;	Parses the command line for SIZE= command
 32466                                  ;
 32467                                  ;	ES:SI = command line to parsed
 32468                                  ;
 32469                                  ;	returns ptr to command line after SIZE= option in ES:SI
 32470                                  ;	updates the DevSizeOption variable with value supplied
 32471                                  ;	in SIZE=option
 32472                                  ;	Returns carry if the SIZE option was invalid
 32473                                  ;
 32474                                  ;----------------------------------------------------------------------------
 32475                                  
 32476                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32477                                  	; (SYSINIT:2D5Ah)
 32478                                  
 32479                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization & BugFix)
 32480                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 32481                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 32482                                  ParseSize:
 32483                                  	;push	bx
 32484                                  	;mov	bx,si
 32485                                  
 32486                                  	; 09/09/2023
 32487 00002945 56                      	push	si ; * ; mov bx,si
 32488                                  
 32489                                  	; 11/12/2022
 32490                                  	; ds = cs
 32491                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 32492                                  	;mov	[cs:DevCmdLine],si
 32493                                  	;mov	[cs:DevCmdLine+2],es
 32494 00002946 C706[7E1E]0000          	mov	word [DevSizeOption],0 ; init the value
 32495 0000294C 8936[8E1E]              	mov	[DevCmdLine],si
 32496 00002950 8C06[901E]              	mov	[DevCmdLine+2],es	
 32497 00002954 E82400                  	call	SkipDelim
 32498 00002957 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 32499 0000295C 7528                    	jne	short ps_no_size
 32500 0000295E 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 32501 00002964 7520                    	jne	short ps_no_size
 32502 00002966 268A4404                	mov	al,[es:si+4]
 32503 0000296A E85306                  	call	delim
 32504                                  	;jne	short ps_no_size
 32505                                  	; 22/07/2023 - 09/09/2023 (cf=0)
 32506 0000296D 7518                    	jne	short ps_no_size_2 ; cf=0 here
 32507 0000296F 83C605                  	add	si,5
 32508 00002972 E81400                  	call	GetHexNum
 32509 00002975 7210                    	jc	short ps_err
 32510                                  	; 11/12/2022
 32511                                  	; ds = cs
 32512                                  	;mov	[cs:DevSizeOption],ax
 32513 00002977 A3[7E1E]                	mov	[DevSizeOption],ax
 32514                                  	
 32515                                  	; 09/09/2023
 32516 0000297A 58                      	pop	ax  ; * (discard previous si value on top of stack)
 32517                                  
 32518                                  ;	call	SkipDelim ; **
 32519                                  ;	
 32520                                  ;	; 22/07/2023
 32521                                  ;;ps_no_size_2:
 32522                                  ;	; cf = 0
 32523                                  ;	retn
 32524                                  
 32525                                  	; 09/09/2023
 32526                                  	;jmp	short SkipDelim
 32527                                  
 32528                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 32529                                  %if 1
 32530                                  	; 01/11/2022
 32531                                  SkipDelim:
 32532                                  sd_next_char:
 32533 0000297B 268A04                  	mov	al,[es:si]
 32534 0000297E E83F06                  	call	delim
 32535 00002981 7505                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 32536 00002983 46                      	inc	si
 32537 00002984 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 32538                                  	; 11/12/2022
 32539                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32540                                  ;sd_ret:
 32541                                  	;retn
 32542                                  %endif
 32543                                  
 32544                                  	;;;call	SkipDelim ; **
 32545                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32546                                  	;mov	bx,si
 32547                                  ps_no_size:
 32548                                  	;mov	si,bx
 32549                                  	;pop	bx
 32550 00002986 F8                      	clc	; cf=0
 32551                                  	;retn
 32552                                  	; 11/12/2022
 32553                                  ps_err:		; cf=1
 32554                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 32555                                  	; 09/09/2023
 32556 00002987 5E                      	pop	si ; * ; mov si,bx
 32557                                  	; 17/09/2023
 32558                                  sd_ret:	; cf=?
 32559 00002988 C3                      	retn
 32560                                  
 32561                                  ;ps_err:
 32562                                  	; 02/11/2022
 32563                                  	;pop	bx
 32564                                  	;stc
 32565                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32566                                  	; 11/12/2022
 32567                                  	; cf=1
 32568                                  	;stc
 32569                                  	; 11/12/2022
 32570                                  ;sd_ret: 
 32571                                  	; 22/07/2023
 32572                                  	; 12/04/2019
 32573                                  	;retn
 32574                                  
 32575                                  ; 12/04/2019 - Retro DOS v4.0
 32576                                  
 32577                                  ;----------------------------------------------------------------------------
 32578                                  ;
 32579                                  ; procedure : SkipDelim
 32580                                  ;
 32581                                  ;	Skips delimiters in the string pointed to by ES:SI
 32582                                  ;	Returns ptr to first non-delimiter character in ES:SI
 32583                                  ;
 32584                                  ;----------------------------------------------------------------------------
 32585                                  
 32586                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 32587                                  %if 0
 32588                                  	; 01/11/2022
 32589                                  SkipDelim:
 32590                                  sd_next_char:
 32591                                  	mov	al,[es:si]
 32592                                  	call	delim
 32593                                  	jnz	short sd_ret
 32594                                  	inc	si
 32595                                  	jmp	short sd_next_char ; 01/11/2022
 32596                                  	; 11/12/2022
 32597                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32598                                  ;sd_ret:
 32599                                  	;retn
 32600                                  %endif
 32601                                  
 32602                                  ;----------------------------------------------------------------------------
 32603                                  ;
 32604                                  ; procedure : GetHexNum
 32605                                  ;
 32606                                  ;	Converts an ascii string terminated by a delimiter into binary.
 32607                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 32608                                  ;
 32609                                  ;	Returns in AX the number number of paras equivalent to the
 32610                                  ;	hex number of bytes specified by the hexadecimal string.
 32611                                  ;
 32612                                  ;	Returns carry in case it encountered a non-hex character or
 32613                                  ;	if it encountered crlf
 32614                                  ;
 32615                                  ;----------------------------------------------------------------------------
 32616                                  
 32617                                  ; 13/05/2019
 32618                                  
 32619                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32620                                  	; (SYSINIT:2DA5h)
 32621                                  GetHexNum:
 32622 00002989 31C0                    	xor	ax,ax
 32623 0000298B 31D2                    	xor	dx,dx
 32624                                  ghn_next:
 32625 0000298D 268A1C                  	mov	bl,[es:si]
 32626 00002990 80FB0D                  	cmp	bl,cr  ; 0Dh
 32627 00002993 7436                    	je	short ghn_err
 32628 00002995 80FB0A                  	cmp	bl,lf  ; 0Ah
 32629 00002998 7431                    	je	short ghn_err
 32630 0000299A 50                      	push	ax
 32631 0000299B 88D8                    	mov	al,bl
 32632 0000299D E82006                  	call	delim
 32633 000029A0 58                      	pop	ax
 32634                                  	; 04/01/2023
 32635 000029A1 B90400                  	mov	cx,4
 32636 000029A4 7410                    	jz	short ghn_into_paras
 32637 000029A6 E82400                  	call	GetNibble
 32638                                  	;jc	short ghn_err
 32639                                  	; 11/12/2022
 32640 000029A9 7221                    	jc	short ghn_ret ; cf=1
 32641                                  	; 04/01/2023
 32642                                  	;mov	cx,4
 32643                                  ghn_shift1:
 32644 000029AB D1E0                    	shl	ax,1
 32645 000029AD D1D2                    	rcl	dx,1
 32646 000029AF E2FA                    	loop	ghn_shift1
 32647 000029B1 08D8                    	or	al,bl
 32648 000029B3 46                      	inc	si
 32649 000029B4 EBD7                    	jmp	short ghn_next
 32650                                  ghn_into_paras:
 32651 000029B6 83C00F                  	add	ax,15
 32652 000029B9 83D200                  	adc	dx,0
 32653 000029BC F7C2F0FF                	test	dx,0FFF0h
 32654 000029C0 7509                    	jnz	short ghn_err
 32655                                  	; 04/01/2023
 32656                                  	;mov	cx,4
 32657                                  ghn_shift2:
 32658 000029C2 F8                      	clc
 32659 000029C3 D1DA                    	rcr	dx,1
 32660 000029C5 D1D8                    	rcr	ax,1
 32661 000029C7 E2F9                    	loop	ghn_shift2
 32662 000029C9 F8                      	clc
 32663 000029CA C3                      	retn
 32664                                  	; 11/12/2022
 32665                                  ghn_err:
 32666                                  gnib_err:
 32667 000029CB F9                      	stc
 32668                                  ghn_ret:
 32669                                  gnib_ret:
 32670 000029CC C3                      	retn
 32671                                  
 32672                                  ;----------------------------------------------------------------------------
 32673                                  ;
 32674                                  ; procedure : GetNibble
 32675                                  ;
 32676                                  ;	Convert one nibble (hex digit) in BL into binary
 32677                                  ;
 32678                                  ;	Retruns binary value in BL
 32679                                  ;
 32680                                  ;	Returns carry if BL contains non-hex digit
 32681                                  ;
 32682                                  ;----------------------------------------------------------------------------
 32683                                  
 32684                                  GetNibble:
 32685 000029CD 80FB30                  	cmp	bl,'0'
 32686                                  	;jb	short gnib_err
 32687                                  	; 11/12/2022
 32688 000029D0 72FA                    	jb	short gnib_ret ; cf=1
 32689 000029D2 80FB39                  	cmp	bl,'9'
 32690 000029D5 7704                    	ja	short is_it_hex
 32691 000029D7 80EB30                  	sub	bl,'0'		; clc
 32692 000029DA C3                      	retn
 32693                                  is_it_hex:
 32694 000029DB 80FB41                  	cmp	bl,'A'
 32695                                  	;jb	short gnib_err
 32696                                  	; 11/12/2022
 32697 000029DE 72EC                    	jb	short gnib_ret ; cf=1
 32698 000029E0 80FB46                  	cmp	bl,'F'
 32699 000029E3 77E6                    	ja	short gnib_err ; 11/12/2022
 32700 000029E5 80EB37                  	sub	bl,'A'- 10	; clc
 32701 000029E8 C3                      	retn
 32702                                  
 32703                                  	; 11/12/2022
 32704                                  ;gnib_err:
 32705                                  ;	stc
 32706                                  ;gnib_ret:
 32707                                  ;	retn
 32708                                  
 32709                                  ;============================================================================
 32710                                  
 32711                                  ; 12/04/2019 - Retro DOS v4.0
 32712                                  
 32713                                  ; umb.inc (MSDOS 6.0, 1991)
 32714                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 32715                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 32716                                  
 32717                                  XMM_REQUEST_UMB	equ 10h
 32718                                  XMM_RELEASE_UMB	equ 11h
 32719                                  
 32720                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32721                                  
 32722                                  ;---------------------------------------------------------------------------
 32723                                  ;
 32724                                  ; Procedure Name	: umb_insert
 32725                                  ;
 32726                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 32727                                  ;			: BX = seg address of UMB to be linked in
 32728                                  ;			: DX = size of UMB to be linked in paras
 32729                                  ;			; DS = data
 32730                                  ;
 32731                                  ; Outputs		: links the UMB into the arena chain
 32732                                  ;
 32733                                  ; Uses			: AX, CX, ES, DX, BX
 32734                                  ;
 32735                                  ;---------------------------------------------------------------------------
 32736                                  
 32737                                  umb_insert:
 32738 000029E9 1E                      	push	ds
 32739                                  
 32740                                  	; 31/12/2022
 32741                                  	; ds = cs
 32742                                  
 32743                                  	;mov	ds,[cs:DevDOSData]
 32744 000029EA 8E1E[8C1E]              	mov	ds,[DevDOSData] ; 31/12/2022 
 32745                                  	;mov	ds,[8Ch]
 32746 000029EE 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 32747 000029F2 8CD8                    	mov	ax,ds
 32748 000029F4 8EC0                    	mov	es,ax
 32749                                  ui_next:
 32750 000029F6 39D8                    	cmp	ax,bx			; Q: is current block above
 32751                                  					;    new block
 32752 000029F8 770F                    	ja	short ui_insert		; Y: insert it
 32753                                  					; Q: is current block the
 32754                                  					;    last
 32755 000029FA 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32756 00002A00 745C                    	je	short ui_append		; Y: append new block to chain
 32757                                  					; N: get next block
 32758 00002A02 8ED8                    	mov	ds,ax			; M005
 32759                                  	;call	get_next		; ax = es = next block
 32760 00002A04 E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 32761 00002A07 EBED                    	jmp	short ui_next
 32762                                  
 32763                                  ui_insert:
 32764 00002A09 8CD9                    	mov	cx,ds			; ds = previous arena
 32765 00002A0B 41                      	inc	cx			; top of previous block
 32766                                  
 32767 00002A0C 29D9                    	sub	cx,bx
 32768 00002A0E F7D9                    	neg	cx			; cx = size of used block
 32769                                  	;mov	byte [0],'M'
 32770 00002A10 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32771                                  	;mov	word [1],8
 32772 00002A15 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 32773                                  	;mov	[3],cx
 32774 00002A1B 890E0300                	mov	[ARENA.SIZE],cx	
 32775                                  	;mov	word [8],4353h ; 'SC'
 32776 00002A1F C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 32777                                  
 32778                                  ; prepare the arena at start of new block
 32779                                  
 32780 00002A25 8EC3                    	mov	es,bx
 32781 00002A27 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32782 00002A2D 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 32783                                  					; mark as free
 32784 00002A34 83EA02                  	sub	dx,2			; make room for arena at
 32785                                  					; start & end of new block
 32786 00002A37 2689160300              	mov	[es:ARENA.SIZE],dx
 32787                                  
 32788                                  ; prepare arena at end of new block
 32789                                  	
 32790 00002A3C 01D3                    	add	bx,dx
 32791 00002A3E 43                      	inc	bx
 32792 00002A3F 8EC3                    	mov	es,bx			; es=arena at top of new block
 32793 00002A41 43                      	inc	bx			; bx=top of new block
 32794                                  
 32795                                  					; ax contains arena just above
 32796                                  					; this block
 32797 00002A42 29D8                    	sub	ax,bx			; ax = size of used block
 32798                                  	
 32799 00002A44 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32800 00002A4A 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32801 00002A51 26A30300                	mov	[es:ARENA.SIZE],ax	
 32802 00002A55 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32803                                  
 32804 00002A5C EB47                    	jmp	short ui_done
 32805                                  
 32806                                  ui_append:
 32807                                  					; es = arena of last block	
 32808 00002A5E 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 32809 00002A63 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 32810                                  					; going to rsrv on top of this 
 32811                                  					; block for the next arena.
 32812                                  	; 13/05/2019
 32813 00002A69 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32814                                  
 32815 00002A6F 89C1                    	mov	cx,ax			; cx=top of prev block-1
 32816 00002A71 40                      	inc	ax
 32817 00002A72 29D8                    	sub	ax,bx			; ax=top of prev block - 
 32818                                  					;    seg. address of new block
 32819 00002A74 F7D8                    	neg	ax
 32820                                  
 32821 00002A76 8EC1                    	mov	es,cx			; ds = arena of unused block
 32822                                  
 32823 00002A78 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32824 00002A7E 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32825 00002A85 26A30300                	mov	[es:ARENA.SIZE],ax	
 32826 00002A89 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 32827                                  
 32828                                  ; prepare the arena at start of new block
 32829 00002A90 8EC3                    	mov	es,bx
 32830 00002A92 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 32831 00002A98 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 32832                                  					; mark as free
 32833 00002A9F 4A                      	dec	dx			; make room for arena
 32834 00002AA0 2689160300              	mov	[es:ARENA.SIZE],dx	
 32835                                  ui_done:
 32836                                  uc_done: ; 31/12/2022 ; *!
 32837 00002AA5 1F                      	pop	ds
 32838                                  	; ds = cs ; 31/12/2022
 32839                                  ;uc_done:	; 18/12/2022
 32840                                  au_exit:	; 09/09/2023
 32841 00002AA6 C3                      	retn
 32842                                  
 32843                                  ;----------------------------------------------------------------------------
 32844                                  ;
 32845                                  ; procedure : AllocUMB
 32846                                  ;
 32847                                  ;	Allocate all UMBs and link it to DOS arena chain
 32848                                  ;
 32849                                  ;----------------------------------------------------------------------------
 32850                                  
 32851                                  AllocUMB:
 32852                                  	; 31/12/2022
 32853                                  	; ds = cs
 32854 00002AA7 E84700                  	call	InitAllocUMB		; link in the first UMB
 32855 00002AAA 72FA                    	jc	short au_exit		; quit on error
 32856                                  au_next:
 32857 00002AAC E87000                  	call	umb_allocate		; allocate
 32858 00002AAF 7205                    	jc	short au_coalesce
 32859 00002AB1 E835FF                  	call	umb_insert		; & insert till no UMBs
 32860 00002AB4 EBF6                    	jmp	short au_next
 32861                                  au_coalesce:
 32862                                  	; 09/09/2023
 32863                                  ;	call	umb_coalesce		; coalesce all UMBs
 32864                                  ;au_exit:
 32865                                  ;	; 31/12/2022
 32866                                  ;	; ds = cs
 32867                                  ;	retn
 32868                                  
 32869                                  	; 09/09/2023
 32870                                  	;jmp	short umb_coalesce
 32871                                  
 32872                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32873                                  
 32874                                  ;----------------------------------------------------------------------------
 32875                                  ;
 32876                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 32877                                  ;
 32878                                  ;	Coalesce adds the block following the argument to the argument block,
 32879                                  ;	iff it's free. Coalesce is usually used to join free blocks, but
 32880                                  ;	some callers (such as $setblock) use it to join a free block to it's
 32881                                  ;	preceeding allocated block.
 32882                                  ;
 32883                                  ;	EXIT	'C' clear if OK
 32884                                  ;		  (ds) unchanged, this block updated
 32885                                  ;		  (ax) = address of next block, IFF not at end
 32886                                  ;		'C' set if arena trashed
 32887                                  ;	USES	cx, di, ds, es
 32888                                  ;
 32889                                  ;----------------------------------------------------------------------------
 32890                                  
 32891                                  umb_coalesce:
 32892                                  	; 31/12/2022
 32893                                  	; ds = cs
 32894 00002AB6 1E                      	push	ds ; *!
 32895                                  
 32896 00002AB7 31FF                    	xor	di, di
 32897                                  
 32898                                  	;mov	es,[cs:DevDOSData]
 32899                                  	; 31/12/2022
 32900 00002AB9 8E06[8C1E]              	mov	es,[DevDOSData]
 32901 00002ABD 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 32902                                  uc_nextfree:
 32903 00002AC2 8CC0                    	mov	ax,es
 32904 00002AC4 8ED8                    	mov	ds,ax
 32905                                  	;cmp	[es:1],di
 32906 00002AC6 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 32907 00002ACB 7407                    	je	short uc_again		; Y: try to coalesce with next block
 32908                                  					; N: get next arena
 32909 00002ACD E86B00                  	call	get_next		; es, ax = next arena
 32910 00002AD0 72D3                    	jc	short uc_done	; *!
 32911 00002AD2 EBEE                    	jmp	short uc_nextfree
 32912                                  uc_again:
 32913 00002AD4 E86400                  	call	get_next		; ES, AX <- next block
 32914 00002AD7 72CC                    	jc	short uc_done	; *!
 32915                                  uc_check:
 32916 00002AD9 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 32917 00002ADE 75E2                    	jne	short uc_nextfree	; N: get next free arena
 32918                                  					; Y: coalesce
 32919 00002AE0 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 32920 00002AE5 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 32921                                  	;add	[3],cx
 32922 00002AE6 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 32923 00002AEA 268A0D                  	mov     cl,[es:di]              ; move up signature
 32924 00002AED 880D                    	mov     [di],cl
 32925 00002AEF EBE3                    	jmp     short uc_again		; try again
 32926                                  
 32927                                  	; 18/12/2022
 32928                                  ;uc_done:
 32929                                  	;retn
 32930                                  
 32931                                  ;----------------------------------------------------------------------------
 32932                                  ;
 32933                                  ; procedure : InitAllocUMB
 32934                                  ;
 32935                                  ;----------------------------------------------------------------------------
 32936                                  
 32937                                  InitAllocUMB:
 32938                                  	; 31/12/2022
 32939                                  	; ds = cs
 32940 00002AF1 E820DF                  	call	IsXMSLoaded
 32941 00002AF4 7527                    	jnz	short iau_err		; quit on no XMS driver
 32942 00002AF6 B452                    	mov	ah,52h
 32943 00002AF8 CD21                    	int	21h			; get DOS DATA seg
 32944                                  	; 31/12/2022
 32945                                  	; ds = cs
 32946                                  	;mov	[cs:DevDOSData],es	; & save it for later
 32947 00002AFA 8C06[8C1E]              	mov	[DevDOSData],es		; & save it for later
 32948 00002AFE B81043                  	mov	ax,4310h
 32949 00002B01 CD2F                    	int	2Fh
 32950                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 32951                                  	;mov	[cs:DevXMSAddr+2],es
 32952 00002B03 891E[751E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 32953 00002B07 8C06[771E]              	mov	[DevXMSAddr+2],es	
 32954                                  	; 31/12/2022
 32955 00002B0B 803E[8B1E]00            	cmp	byte [FirstUMBLinked],0 
 32956                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 32957                                  	;jne	short ia_1		; quit if we already did it
 32958                                  	; 12/12/2022
 32959 00002B10 770A                    	ja	short ia_1 ; cf=0
 32960 00002B12 E83900                  	call	LinkFirstUMB		; else link the first UMB
 32961                                  	;jc	short iau_err
 32962                                  	; 12/12/2022
 32963 00002B15 7207                    	jc	short iau_err2  ; cf=1
 32964                                  	; 31/12/2022
 32965                                  	; ds = cs
 32966 00002B17 C606[8B1E]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32967                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32968                                  ia_1:
 32969                                  	; 12/12/2022
 32970                                  	; cf=0
 32971                                  	;clc
 32972 00002B1C C3                      	retn
 32973                                  iau_err:
 32974 00002B1D F9                      	stc
 32975                                  iau_err2:
 32976 00002B1E C3                      	retn
 32977                                  
 32978                                  ;-------------------------------------------------------------------------
 32979                                  ;
 32980                                  ; Procedure Name	: umb_allocate
 32981                                  ;
 32982                                  ; Inputs		: DS = data
 32983                                  ;
 32984                                  ; Outputs		: if UMB available
 32985                                  ;				Allocates the largest available UMB and 
 32986                                  ;			  	BX = segment of allocated block
 32987                                  ;				DX = size of allocated block
 32988                                  ;				NC
 32989                                  ;			  else 
 32990                                  ;				CY
 32991                                  ;
 32992                                  ; Uses			: BX, DX
 32993                                  ;
 32994                                  ;-------------------------------------------------------------------------
 32995                                  
 32996                                  umb_allocate:
 32997                                  	; 31/12/2022
 32998                                  	; ds = cs
 32999 00002B1F 50                      	push	ax
 33000 00002B20 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 33001 00002B22 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 33002                                  					;   possible
 33003                                  	; 31/12/2022
 33004 00002B25 FF1E[751E]              	call	far [DevXMSAddr]
 33005                                  	;call	far [cs:DevXMSAddr]
 33006                                  					; dx now contains the size of
 33007                                  					; the largest UMB
 33008 00002B29 09D2                    	or	dx,dx
 33009 00002B2B 740B                    	jz	short ua_err
 33010                                  	
 33011 00002B2D B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 33012                                  
 33013                                  	; 31/12/2022
 33014 00002B2F FF1E[751E]              	call	far [DevXMSAddr]
 33015                                  	;call	far [cs:DevXMSAddr]
 33016                                  
 33017 00002B33 83F801                  	cmp	ax,1			; Q: was the reqst successful
 33018                                  	;jne	short ua_err		; N: error
 33019                                  	; 14/08/2023
 33020 00002B36 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 33021                                  ua_err:
 33022 00002B38 F9                      	stc	
 33023                                  
 33024                                  	;clc
 33025                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33026                                  	; 12/12/2022
 33027                                  	; cf=0
 33028                                  	;clc 
 33029                                  ua_done:
 33030 00002B39 58                      	pop	ax
 33031 00002B3A C3                      	retn
 33032                                  	; 14/08/2023
 33033                                  ;ua_err:
 33034                                  	;stc
 33035                                  	;jmp	short ua_done
 33036                                  
 33037                                  ; 13/04/2019 - Retro DOS v4.0
 33038                                  
 33039                                  ;----------------------------------------------------------------------------
 33040                                  ;
 33041                                  ;**	get_next - Find Next item in Arena
 33042                                  ;
 33043                                  ;	ENTRY	dS - pointer to block head
 33044                                  ;	EXIT	AX,ES - pointers to next head
 33045                                  ;		'C' set if arena damaged
 33046                                  ;
 33047                                  ;----------------------------------------------------------------------------
 33048                                  
 33049                                  	; 01/11/2022
 33050                                  get_next:
 33051 00002B3B 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 33052 00002B40 740A                    	je	short gn_err
 33053                                  _get_next_:
 33054 00002B42 8CD8                    	mov     ax,ds                   ; ax=current block
 33055 00002B44 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 33056 00002B48 40                      	inc     ax                      ; remember that header!
 33057 00002B49 8EC0                    	mov	es,ax
 33058                                  	;clc
 33059                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33060                                  	; 11/12/2022
 33061                                  	; cf=0
 33062                                  	;clc
 33063 00002B4B C3                      	retn
 33064                                  gn_err:
 33065 00002B4C F9                      	stc
 33066                                  	; 11/12/2022	
 33067                                  lfu_err:	 ; cf=1
 33068 00002B4D C3                      	retn
 33069                                  
 33070                                  ;----------------------------------------------------------------------------
 33071                                  ;
 33072                                  ; procedure : LinkFirstUMB
 33073                                  ;
 33074                                  ;----------------------------------------------------------------------------
 33075                                  
 33076                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33077                                  	; (SYSINIT:2F81h)
 33078                                  LinkFirstUMB:
 33079                                  	; 31/12/2022
 33080                                  	; ds = cs
 33081 00002B4E E8CEFF                  	call	umb_allocate
 33082 00002B51 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 33083                                  
 33084                                  ; bx = segment of allocated UMB
 33085                                  ; dx = size of UMB
 33086                                  
 33087                                  	; 31/12/2022
 33088                                  	; ds = cs
 33089                                  
 33090 00002B53 CD12                    	int	12h			; ax = size of memory
 33091 00002B55 B106                    	mov	cl,6
 33092 00002B57 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 33093                                  
 33094 00002B59 89C1                    	mov	cx,ax			; cx = size in paras
 33095 00002B5B 29D8                    	sub	ax,bx			; ax = - size of unused block
 33096                                  
 33097 00002B5D F7D8                    	neg	ax
 33098                                  
 33099                                  	;sub	cx,1			; cx = first umb_arena
 33100                                  	; 09/09/2023
 33101 00002B5F 49                      	dec	cx
 33102 00002B60 8EC1                    	mov	es,cx			; es = first umb_arena
 33103                                  	
 33104 00002B62 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33105 00002B68 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33106                                  					
 33107 00002B6F 26A30300                	mov	[es:ARENA.SIZE],ax	
 33108 00002B73 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 33109                                  
 33110                                  ; put in the arena for the first UMB
 33111                                  
 33112 00002B7A 8EC3                    	mov	es,bx			; es has first free umb seg
 33113 00002B7C 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33114 00002B82 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 33115                                  					; mark as free 
 33116 00002B89 4A                      	dec	dx			; make room for arena
 33117 00002B8A 2689160300              	mov	[es:ARENA.SIZE],dx	
 33118                                  
 33119                                  	;mov	es,[cs:DevDOSData]
 33120                                  	; 31/12/2022
 33121 00002B8F 8E06[8C1E]              	mov	es,[DevDOSData] ; ds = cs
 33122                                  	; 18/09/2023
 33123 00002B93 26890E8C00              	mov	[es:UMB_ARENA],cx
 33124                                  	;mov	di,UMB_ARENA ; 8Ch
 33125                                  	;mov	[es:di],cx		; initialize umb_head in DOS
 33126                                  					;  data segment with the arena
 33127                                  					;  just below Top of Mem
 33128                                  
 33129                                  ; we must now scan the arena chain and update the size of the last arena
 33130                                  
 33131                                  	;mov	di,DOS_ARENA ; 24h
 33132                                  	;mov	es,[es:di]		; es = start arena
 33133                                  	; 18/09/2023
 33134 00002B98 268E062400              	mov	es,[es:DOS_ARENA]
 33135 00002B9D 31FF                    	xor	di,di
 33136                                  ;scan_next
 33137                                  ; 09/12/2022
 33138                                  scannext:
 33139 00002B9F 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 33140 00002BA3 740C                    	je	short got_last
 33141                                  	
 33142 00002BA5 8CC0                    	mov	ax,es
 33143 00002BA7 2603060300              	add	ax,[es:ARENA.SIZE]
 33144 00002BAC 40                      	inc	ax
 33145 00002BAD 8EC0                    	mov	es,ax
 33146                                  	;jmp	short scan_next
 33147                                  	; 09/12/2022
 33148 00002BAF EBEE                    	jmp	short scannext
 33149                                  got_last:
 33150                                  	;sub	word [es:ARENA.SIZE],1
 33151                                  	; 09/09/2023
 33152 00002BB1 26FF0E0300              	dec	word [es:ARENA.SIZE]
 33153                                  
 33154 00002BB6 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33155                                  	;clc
 33156                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33157                                  	; 11/12/2022
 33158                                  	; cf=0
 33159                                  	;clc
 33160 00002BBC C3                      	retn
 33161                                  
 33162                                  ; 11/12/2022
 33163                                  ;;lfu_err:
 33164                                  ;	;stc
 33165                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33166                                  ;	; 11/12/2022
 33167                                  ;	; cf=1
 33168                                  ;	;stc
 33169                                  ;	retn
 33170                                  
 33171                                  ;----------------------------------------------------------------------------
 33172                                  ;
 33173                                  ; procedure : ShrinkUMB
 33174                                  ;
 33175                                  ;	Shrinks the current UMB in use, so that the unused portions
 33176                                  ;	of the UMB is given back to the DOS free mem pool
 33177                                  ;
 33178                                  ;----------------------------------------------------------------------------
 33179                                  
 33180                                  ShrinkUMB:
 33181                                  	; 12/12/2022
 33182                                  	; ds = cs
 33183 00002BBD 833E[6F1E]00            	cmp	word [DevUMBAddr],0
 33184                                  	;cmp	word [cs:DevUMBAddr],0
 33185 00002BC2 7421                    	je	short su_exit
 33186 00002BC4 06                      	push	es
 33187 00002BC5 53                      	push	bx
 33188                                  	; 12/12/2022
 33189                                  	;mov	bx,[cs:DevUMBFree]
 33190                                  	;sub	bx,[cs:DevUMBAddr]
 33191                                  	;mov	es,[cs:DevUMBAddr]
 33192 00002BC6 8B1E[731E]              	mov	bx,[DevUMBFree]
 33193 00002BCA 2B1E[6F1E]              	sub	bx,[DevUMBAddr]
 33194 00002BCE 8E06[6F1E]              	mov	es,[DevUMBAddr]
 33195                                  	
 33196 00002BD2 B8004A                  	mov	ax,4A00h
 33197 00002BD5 CD21                    	int	21h
 33198                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 33199                                  		; ES = segment address of block to change
 33200                                  		; BX = new size in paragraphs
 33201 00002BD7 8CC0                    	mov	ax,es
 33202 00002BD9 48                      	dec	ax
 33203 00002BDA 8EC0                    	mov	es,ax
 33204 00002BDC 26C70601000800          	mov	word [es:ARENA.OWNER],8
 33205 00002BE3 5B                      	pop	bx
 33206 00002BE4 07                      	pop	es
 33207                                  su_exit:
 33208 00002BE5 C3                      	retn
 33209                                  
 33210                                  ;----------------------------------------------------------------------------
 33211                                  ;
 33212                                  ; procedure : UnlinkUMB
 33213                                  ;
 33214                                  ;	Unlinks the UMBs from the DOS arena chain
 33215                                  ;
 33216                                  ;----------------------------------------------------------------------------
 33217                                  
 33218                                  UnlinkUMB:
 33219                                  	; 12/12/2022
 33220                                  	; ds = cs
 33221 00002BE6 1E                      	push	ds
 33222 00002BE7 06                      	push	es
 33223                                  	; 12/12/2022
 33224 00002BE8 803E[8B1E]00            	cmp	byte [FirstUMBLinked],0
 33225                                  	;cmp	byte [cs:FirstUMBLinked],0
 33226 00002BED 7420                    	je	short ulu_x		; nothing to unlink
 33227                                  	; 12/12/2022
 33228 00002BEF 8E06[8C1E]              	mov	es,[DevDOSData]
 33229                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 33230 00002BF3 268E1E2400              	mov	ds,[es:DOS_ARENA]
 33231 00002BF8 268B3E8C00              	mov	di,[es:UMB_ARENA]
 33232                                  ulu_next:
 33233 00002BFD E83BFF                  	call	get_next
 33234 00002C00 720D                    	jc	short ulu_x
 33235 00002C02 39C7                    	cmp	di,ax			; is the next one UMB ?
 33236 00002C04 7404                    	je	short ulu_found
 33237 00002C06 8ED8                    	mov	ds,ax
 33238 00002C08 EBF3                    	jmp	short ulu_next
 33239                                  ulu_found:
 33240                                  	;mov	byte [0],'Z'
 33241 00002C0A C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33242                                  ulu_x:
 33243 00002C0F 07                      	pop	es
 33244 00002C10 1F                      	pop	ds
 33245 00002C11 C3                      	retn
 33246                                  
 33247                                  ; ----------------------------------------------------------------------
 33248                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 33249                                  ; ----------------------------------------------------------------------
 33250                                  ; 14/04/2019 - Retro DOS v4.0
 33251                                  
 33252                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 33253                                  ;
 33254                                  ; Summary:
 33255                                  ;
 33256                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 33257                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 33258                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 33259                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 33260                                  ;   and/or config.inc for the full list.
 33261                                  ;
 33262                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 33263                                  ;   configuration support. blockname is either MENU, which contains one
 33264                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 33265                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 33266                                  ;   INCLUDE allows the current block to name another block for inclusion
 33267                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 33268                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 33269                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 33270                                  ;
 33271                                  ; Example:
 33272                                  ;
 33273                                  ;   [menu]
 33274                                  ;   menuitem=misc,Miscellaneous
 33275                                  ;   menuitem=network,Network Configuration
 33276                                  ;   menudefault=network,15
 33277                                  ;
 33278                                  ;   [network]
 33279                                  ;   include misc
 33280                                  ;   device=foo
 33281                                  ;
 33282                                  ;   [misc]
 33283                                  ;   device=bar
 33284                                  ;   include alternate
 33285                                  ;
 33286                                  ;   [alternate]
 33287                                  ;   device=tar
 33288                                  ;
 33289                                  ;
 33290                                  ;   When the menu is displayed
 33291                                  ;
 33292                                  ;    1. Miscellaneous
 33293                                  ;    2. Network Configuration
 33294                                  ;
 33295                                  ;   #2 is highlighted as the default option, and will be automatically
 33296                                  ;   selected after 15 seconds. It will invoke the following lines in the
 33297                                  ;   following order:
 33298                                  ;
 33299                                  ;       DEVICE=BAR
 33300                                  ;       DEVICE=TAR
 33301                                  ;       DEVICE=FOO
 33302                                  ;
 33303                                  
 33304                                  ;MULTI_CONFIG equ 1
 33305                                  
 33306                                  ; the following depend on the positions of the various letters in switchlist
 33307                                  
 33308                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 33309                                  
 33310                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 33311                                  flagdrive	equ 00001000b ; 8 
 33312                                  flagcyln	equ 00010000b ; 16
 33313                                  flagseclim	equ 00100000b ; 32
 33314                                  flagheads	equ 01000000b ; 64
 33315                                  flagff		equ 10000000b ; 128
 33316                                  
 33317                                  ;----------------------------------------------------------------------------
 33318                                  ; 19/04/2019 - Retro DOS v4.0
 33319                                  
 33320                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 33321                                  
 33322                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33323                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 33324                                  
 33325 00002C12 00                      insert_blank:	db 	0
 33326                                  
 33327                                  ;----------------------------------------------------------------------------
 33328                                  ;
 33329                                  ; procedure : setparms
 33330                                  ;
 33331                                  ; the following set of routines is used to parse the drivparm = command in
 33332                                  ; the config.sys file to change the default drive parameters.
 33333                                  ;
 33334                                  ;----------------------------------------------------------------------------
 33335                                  
 33336                                  setparms:
 33337 00002C13 1E                      	push	ds
 33338 00002C14 50                      	push	ax
 33339 00002C15 53                      	push	bx
 33340 00002C16 51                      	push	cx
 33341 00002C17 52                      	push	dx
 33342                                  
 33343 00002C18 0E                      	push	cs
 33344 00002C19 1F                      	pop	ds
 33345                                  
 33346 00002C1A 31DB                    	xor	bx,bx
 33347 00002C1C 8A1E[9C35]              	mov	bl,[drive]
 33348                                  	; 18/12/2022
 33349 00002C20 43                      	inc	bx
 33350                                  	;inc	bl			; get it correct for ioctl call
 33351                                  					; (1=a,2=b...)
 33352 00002C21 BA[7434]                	mov	dx,deviceparameters
 33353                                  	;mov	ah,IOCTL ; 44h
 33354                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 33355                                  	; 14/08/2023
 33356 00002C24 B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 33357                                  	;mov	ch,RAWIO ; 8
 33358                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 33359                                  	; 14/08/2023
 33360 00002C27 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 33361 00002C2A CD21                    	int	21h
 33362                                  
 33363                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33364                                  ;
 33365                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 33366                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 33367                                  ;	; 21/10/2022
 33368                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 33369                                  ;	mov	ds,ax			; set Bios_Data segment
 33370                                  ;
 33371                                  ;	test	word [cs:switches],flagec35 ; 4
 33372                                  ;	jz	short not_ec35
 33373                                  
 33374                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33375                                  	;test	word [switches],flagec35 ; 4
 33376                                  	; 12/12/2022
 33377 00002C2C F606[9D35]04            	test	byte [switches],flagec35 ; 4
 33378 00002C31 7411                    	jz	short eot_ok
 33379                                  
 33380                                  	;mov	cl,[cs:drive]		; which drive was this for?
 33381                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33382 00002C33 8A0E[9C35]              	mov	cl,[drive]
 33383 00002C37 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 33384 00002C3A 8ED8                    	mov	ds,ax	
 33385                                  
 33386 00002C3C B001                    	mov	al,1			; assume drive 0
 33387 00002C3E D2E0                    	shl	al,cl			; set proper bit depending on drive
 33388                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 33389 00002C40 0806[2805]              	or	[ec35_flag],al		; set the bit in the permanent flags
 33390                                  
 33391                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33392                                  ;
 33393                                  ;not_ec35:
 33394                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 33395                                  ;;	sectors per track than any old ones.
 33396                                  ;
 33397                                  ;	;mov	al,[cs:deviceparameters+20]
 33398                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33399                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 33400                                  ;	cmp	al,[EOT]
 33401                                  ;	jbe	short eot_ok
 33402                                  ;	mov	[EOT],al
 33403                                  
 33404                                  eot_ok:
 33405 00002C44 5A                      	pop	dx			; fix up all the registers
 33406 00002C45 59                      	pop	cx
 33407 00002C46 5B                      	pop	bx
 33408 00002C47 58                      	pop	ax
 33409 00002C48 1F                      	pop	ds ; 13/05/2019
 33410 00002C49 C3                      	retn
 33411                                  
 33412                                  ;----------------------------------------------------------------------------
 33413                                  ;
 33414                                  ; procedure : diddleback
 33415                                  ;
 33416                                  ; replace default values for further drivparm commands
 33417                                  ;
 33418                                  ;----------------------------------------------------------------------------
 33419                                  
 33420                                  diddleback:
 33421 00002C4A 1E                      	push	ds
 33422 00002C4B 0E                      	push	cs
 33423 00002C4C 1F                      	pop	ds
 33424                                  	;mov	word [deviceparameters+4],80
 33425 00002C4D C706[7834]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33426                                  	;mov	byte [deviceparameters+1],2
 33427 00002C53 C606[7534]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 33428                                  	;mov	word [deviceparameters+2],0
 33429 00002C58 C706[7634]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 33430 00002C5E C706[9D35]0000          	mov	word [switches],0	    ; zero all switches
 33431 00002C64 1F                      	pop	ds
 33432 00002C65 C3                      	retn
 33433                                  
 33434                                  ; 04/01/2023
 33435                                  %if 0
 33436                                  
 33437                                  ; 15/04/2019 - Retro DOS v4.0
 33438                                  
 33439                                  ;----------------------------------------------------------------------------
 33440                                  ;
 33441                                  ; procedure : parseline
 33442                                  ;
 33443                                  ; entry point is parseline. al contains the first character in command line.
 33444                                  ;
 33445                                  ;----------------------------------------------------------------------------
 33446                                  
 33447                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33448                                  	; (SYSINIT:30ACh)
 33449                                  
 33450                                  parseline:
 33451                                  	push	ds
 33452                                  
 33453                                  	push	cs
 33454                                  	pop	ds
 33455                                  
 33456                                  nextswtch:
 33457                                  	cmp	al,cr			; carriage return?
 33458                                  	je	short done_line
 33459                                  	cmp	al,lf			; linefeed?
 33460                                  	je	short put_back		; put it back and done
 33461                                  
 33462                                  ; anything less or equal to a space is ignored.
 33463                                  
 33464                                  	cmp	al,' '                  ; space?
 33465                                  	jbe	short getnext		; skip over space
 33466                                  	cmp	al,'/'
 33467                                  	je	short getparm
 33468                                  	stc				; mark error invalid-character-in-input
 33469                                  	jmp	short exitpl
 33470                                  
 33471                                  getparm:
 33472                                  	call	check_switch
 33473                                  	mov	[switches],bx		; save switches read so far
 33474                                  	jc	short swterr
 33475                                  getnext:
 33476                                  	call	getchr
 33477                                  	jc	short done_line
 33478                                  	jmp	short nextswtch
 33479                                  swterr:
 33480                                  	jmp	short exitpl		; exit if error
 33481                                  
 33482                                  done_line:
 33483                                  	; 12/12/2022
 33484                                  	test	byte [switches],flagdrive ; 8
 33485                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33486                                  	jnz	short okay
 33487                                  	stc				; mark error no-drive-specified
 33488                                  	jmp	short exitpl
 33489                                  
 33490                                  okay:
 33491                                  	mov	ax,[switches]
 33492                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33493                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33494                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33495                                  	;clc			    ; everything is fine
 33496                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33497                                  	; 12/12/2022
 33498                                  	; cf=0
 33499                                  	;clc
 33500                                  	call	setdeviceparameters
 33501                                  exitpl:
 33502                                  	pop	ds
 33503                                  	retn
 33504                                  put_back:
 33505                                  	inc	word [count]		; one more char to scan
 33506                                  	dec	word [chrptr]		; back up over linefeed
 33507                                  	jmp	short done_line
 33508                                  
 33509                                  %endif
 33510                                  
 33511                                  ;----------------------------------------------------------------------------
 33512                                  ;
 33513                                  ; procedure : check_switch
 33514                                  ;
 33515                                  ; processes a switch in the input. it ensures that the switch is valid, and
 33516                                  ; gets the number, if any required, following the switch. the switch and the
 33517                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 33518                                  ; error.
 33519                                  ;
 33520                                  ;----------------------------------------------------------------------------
 33521                                  
 33522                                  ; 09/09/2023
 33523                                  
 33524                                  err_swtch:
 33525 00002C66 31CB                    	xor	bx,cx			; remove this switch from the records
 33526                                  err_check:
 33527 00002C68 F9                      	stc
 33528                                  err_chk:
 33529                                  done_swtch:	; 09/09/2023 (cf=0)
 33530 00002C69 C3                      	retn
 33531                                  
 33532                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 33533                                  
 33534                                  check_switch:
 33535 00002C6A E87803                  	call	getchr
 33536                                  	;jc	short err_check
 33537 00002C6D 72FA                    	jc	short err_chk
 33538 00002C6F 24DF                            and     al,0DFh                 ; convert it to upper case
 33539 00002C71 3C41                    	cmp	al,'A'
 33540                                  	;jb	short err_check
 33541 00002C73 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 33542 00002C75 3C5A                    	cmp	al,'Z'
 33543 00002C77 77EF                    	ja	short err_check
 33544                                  
 33545 00002C79 06                      	push	es
 33546                                  
 33547 00002C7A 0E                      	push	cs
 33548 00002C7B 07                      	pop	es
 33549                                  
 33550                                  	;mov	cl,[switchlist]		; get number of valid switches
 33551                                  	;mov	ch,0
 33552                                  	;mov	di,1+switchlist		; point to string of valid switches
 33553                                  	; 09/09/2023
 33554 00002C7C BF[3036]                	mov	di,switchlist
 33555 00002C7F 8A0D                    	mov	cl,[di]
 33556 00002C81 B500                    	mov	ch,0
 33557 00002C83 47                      	inc	di	; 1+switchlist
 33558                                  
 33559 00002C84 F2AE                    	repne	scasb
 33560                                  
 33561 00002C86 07                      	pop	es
 33562 00002C87 75DF                    	jnz	short err_check
 33563                                  
 33564 00002C89 B80100                  	mov	ax,1
 33565 00002C8C D3E0                    	shl	ax,cl			; set bit to indicate switch
 33566 00002C8E 8B1E[9D35]              	mov	bx,[switches]		; get switches so far
 33567 00002C92 09C3                    	or	bx,ax			; save this with other switches
 33568 00002C94 89C1                    	mov	cx,ax
 33569                                  	; 12/12/2022
 33570 00002C96 A8F8                    	test	al,switchnum ; 0F8h
 33571                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 33572 00002C98 74CF                    	jz	short done_swtch
 33573                                  
 33574 00002C9A E84803                  	call	getchr
 33575 00002C9D 72C7                    	jc	short err_swtch
 33576                                  
 33577 00002C9F 3C3A                    	cmp	al,':'
 33578 00002CA1 75C3                    	jne	short err_swtch
 33579                                  
 33580 00002CA3 E83F03                  	call	getchr
 33581 00002CA6 53                      	push	bx			; preserve switches
 33582                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33583                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 33584                                  	; 12/12/2022
 33585                                  	; ds = cs
 33586 00002CA7 C606[2A03]20            	mov	byte [sepchr],' '
 33587 00002CAC E8DB03                  	call	getnum
 33588                                  	;mov	byte [cs:sepchr],0
 33589                                  	; 12/12/2022
 33590 00002CAF C606[2A03]00            	mov	byte [sepchr],0
 33591 00002CB4 5B                      	pop	bx			; restore switches
 33592                                  
 33593                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 33594                                  ; not check for carry set here. if there is an error, it will be detected
 33595                                  ; further on (hopefully).
 33596                                  
 33597                                  	; 09/09/2023
 33598                                  	;call	process_num
 33599                                  	;jmp	short process_num
 33600                                  
 33601                                  ;done_swtch:
 33602                                  ;	;clc
 33603                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33604                                  ;	; 12/12/2022
 33605                                  ;	; cf=0
 33606                                  ;	;clc
 33607                                  ;	retn
 33608                                  
 33609                                  ;----------------------------------------------------------------------------
 33610                                  ;
 33611                                  ; procedure : process_num
 33612                                  ;
 33613                                  ; this routine takes the switch just input, and the number following (if any),
 33614                                  ; and sets the value in the appropriate variable. if the number input is zero
 33615                                  ; then it does nothing - it assumes the default value that is present in the
 33616                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 33617                                  ;
 33618                                  ;----------------------------------------------------------------------------
 33619                                  
 33620                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33621                                  	; (SYSINIT:3156h)
 33622                                  process_num:
 33623 00002CB5 850E[9D35]              	test	[switches],cx		; if this switch has been done before,
 33624 00002CB9 752B                    	jnz	short done_ret		; ignore this one.
 33625                                  	; 12/12/2022
 33626 00002CBB F6C108                  	test	cl,flagdrive ; 8
 33627                                  	;test	cx,flagdrive ; 8
 33628 00002CBE 7404                    	jz	short try_f
 33629 00002CC0 A2[9C35]                	mov	byte [drive],al
 33630                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33631                                  	;jmp	short done_ret
 33632                                  	; 12/12/2022
 33633                                  	; cf=0
 33634 00002CC3 C3                      	retn	; 13/05/2019
 33635                                  try_f:
 33636                                  	; 12/12/2022
 33637 00002CC4 F6C180                  	test	cl,flagff ; 80h
 33638                                  	;test	cx,flagff ; 80h
 33639 00002CC7 7404                    	jz	short try_t
 33640                                  
 33641                                  ; ensure that we do not get bogus form factors that are not supported
 33642                                  
 33643                                  	;mov	[deviceparameters+1],al
 33644 00002CC9 A2[7534]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 33645                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33646                                  	;jmp	short done_ret
 33647                                  	; 12/12/2022
 33648                                  	; cf=0
 33649 00002CCC C3                      	retn	; 13/05/2019
 33650                                  try_t:
 33651 00002CCD 09C0                    	or	ax,ax
 33652 00002CCF 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 33653                                  	; 12/12/2022
 33654 00002CD1 F6C110                  	test	cl,flagcyln ; 10h
 33655                                  	;test	cx,flagcyln ; 10h
 33656 00002CD4 7404                    	jz	short try_s
 33657                                  
 33658                                  	;mov	[deviceparameters+4],ax
 33659 00002CD6 A3[7834]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 33660                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33661                                  	;jmp	short done_ret
 33662                                  	; 12/12/2022
 33663                                  	; cf=0
 33664 00002CD9 C3                      	retn	; 13/05/2019
 33665                                  try_s:
 33666                                  	; 12/12/2022
 33667 00002CDA F6C120                  	test	cl,flagseclim ; 20h
 33668                                  	;test	cx,flagseclim ; 20h
 33669 00002CDD 7404                    	jz	short try_h
 33670 00002CDF A3[9A35]                	mov	[slim],ax
 33671                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33672                                  	;jmp	short done_ret
 33673                                  	; 12/12/2022
 33674                                  	; cf=0
 33675 00002CE2 C3                      	retn	; 13/05/2019
 33676                                  
 33677                                  ; must be for number of heads
 33678                                  
 33679                                  try_h:
 33680 00002CE3 A3[9835]                	mov	[hlim],ax
 33681                                  done_ret:
 33682                                  	;clc
 33683                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33684                                  	; 12/12/2022
 33685                                  	; cf=0 (test instruction resets cf)
 33686                                  	;clc
 33687 00002CE6 C3                      	retn
 33688                                  
 33689                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33690                                  %if 1
 33691                                  
 33692                                  ; 15/04/2019 - Retro DOS v4.0
 33693                                  
 33694                                  ;----------------------------------------------------------------------------
 33695                                  ;
 33696                                  ; procedure : parseline
 33697                                  ;
 33698                                  ; entry point is parseline. al contains the first character in command line.
 33699                                  ;
 33700                                  ;----------------------------------------------------------------------------
 33701                                  
 33702                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33703                                  	; (SYSINIT:30ACh)
 33704                                  parseline:
 33705                                  	; 04/01/2023
 33706                                  	; ds = cs ; *
 33707                                  
 33708                                  	;push	ds ; *
 33709                                  
 33710                                  	;push	cs ; *
 33711                                  	;pop	ds ; *
 33712                                  
 33713                                  nextswtch:
 33714 00002CE7 3C0D                    	cmp	al,cr			; carriage return?
 33715 00002CE9 741C                    	je	short done_line
 33716 00002CEB 3C0A                    	cmp	al,lf			; linefeed?
 33717 00002CED 7421                    	je	short put_back		; put it back and done
 33718                                  
 33719                                  ; anything less or equal to a space is ignored.
 33720                                  
 33721 00002CEF 3C20                    	cmp	al,' '                  ; space?
 33722 00002CF1 760F                    	jbe	short getnext		; skip over space
 33723 00002CF3 3C2F                    	cmp	al,'/'
 33724 00002CF5 7402                    	je	short getparm
 33725 00002CF7 F9                      	stc				; mark error invalid-character-in-input
 33726                                  	;jmp	short exitpl
 33727                                  	; 04/01/2023
 33728                                  swterr:
 33729 00002CF8 C3                      	retn
 33730                                  
 33731                                  getparm:
 33732 00002CF9 E86EFF                  	call	check_switch
 33733 00002CFC 891E[9D35]              	mov	[switches],bx		; save switches read so far
 33734 00002D00 72F6                    	jc	short swterr
 33735                                  getnext:
 33736 00002D02 E8E002                  	call	getchr
 33737                                  	;jc	short done_line
 33738                                  	;jmp	short nextswtch
 33739                                  	; 04/01/2023
 33740 00002D05 73E0                    	jnc	short nextswtch
 33741                                  ;swterr:
 33742                                  	;jmp	short exitpl		; exit if error
 33743                                  
 33744                                  done_line:
 33745                                  	; 12/12/2022
 33746 00002D07 F606[9D35]08            	test	byte [switches],flagdrive ; 8
 33747                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33748 00002D0C 750C                    	jnz	short okay
 33749 00002D0E F9                      	stc				; mark error no-drive-specified
 33750                                  	;jmp	short exitpl
 33751                                  	; 04/01/2023
 33752 00002D0F C3                      	retn
 33753                                  
 33754                                  ;exitpl:
 33755                                  	; 04/01/2023
 33756                                  	; ds = cs
 33757                                  	;;pop	ds ; *
 33758                                  	;retn
 33759                                  
 33760                                  put_back:
 33761 00002D10 FF06[D203]              	inc	word [count]		; one more char to scan
 33762 00002D14 FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 33763 00002D18 EBED                    	jmp	short done_line
 33764                                  
 33765                                  okay:
 33766 00002D1A A1[9D35]                	mov	ax,[switches]
 33767 00002D1D 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33768 00002D20 A3[7634]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33769 00002D23 C706[9A34]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33770                                  	;clc			    ; everything is fine
 33771                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33772                                  	; 12/12/2022
 33773                                  	; cf=0
 33774                                  	;clc
 33775                                  	;call	setdeviceparameters
 33776                                  	; 04/01/2023
 33777                                  	;jmp	short setdeviceparameters
 33778                                  
 33779                                  %endif
 33780                                  
 33781                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 33782                                  
 33783                                  ;----------------------------------------------------------------------------
 33784                                  ;
 33785                                  ; procedure : setdeviceparameters
 33786                                  ;
 33787                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 33788                                  ; system based on the form factor. it is assumed that the bpbs for the
 33789                                  ; various form factors are present in the bpbtable. for hard files,
 33790                                  ; the recommended bpb is the same as the bpb on the drive.
 33791                                  ; no attempt is made to preserve registers since we are going to jump to
 33792                                  ; sysinit straight after this routine.
 33793                                  ;
 33794                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 33795                                  ;	  we always return no carry
 33796                                  ;
 33797                                  ;	note:  there is a routine by the same name in msdioctl.asm
 33798                                  ;
 33799                                  ;----------------------------------------------------------------------------
 33800                                  
 33801                                  ; 15/04/2019 - Retro DOS v4.0
 33802                                  
 33803                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33804                                  setdeviceparameters:
 33805                                  	; 04/01/2023
 33806                                  	; ds = cs
 33807                                  	
 33808 00002D29 06                      	push	es
 33809                                  
 33810 00002D2A 0E                      	push	cs
 33811 00002D2B 07                      	pop	es
 33812                                  
 33813 00002D2C 31DB                    	xor	bx,bx
 33814 00002D2E 8A1E[7534]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 33815 00002D32 80FB00                  	cmp	bl,DEV_5INCH ; 0
 33816 00002D35 7506                    	jne	short got_80
 33817                                  
 33818 00002D37 C706[7834]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33819                                  							; 48 tpi=40 cyl
 33820                                  got_80:
 33821 00002D3D D1E3                    	shl	bx,1			; get index into bpb table
 33822 00002D3F 8BB7[1C36]              	mov	si,[bpbtable+bx]	; get address of bpb
 33823                                  
 33824                                  	;mov	di,deviceparameters+7	
 33825                                  	; 02/11/2022
 33826 00002D43 BF[7B34]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 33827 00002D46 B91F00                  	mov	cx,A_BPB.size ; 31
 33828 00002D49 FC                      	cld
 33829                                  	;repe	movsb
 33830                                  	; 02/11/2022
 33831 00002D4A F3A4                    	rep	movsb
 33832                                  
 33833 00002D4C 07                      	pop	es
 33834                                  
 33835                                  	; 12/12/2022
 33836 00002D4D F606[9D35]20            	test	byte [switches],flagseclim ; 20h
 33837                                  	;test	word [switches],flagseclim ; 20h
 33838 00002D52 7406                    	jz	short see_heads
 33839                                  
 33840 00002D54 A1[9A35]                	mov	ax,[slim]
 33841                                  	;mov	[deviceparameters+20],ax
 33842 00002D57 A3[8834]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 33843                                  
 33844                                  see_heads:
 33845                                  	; 12/12/2022
 33846 00002D5A F606[9D35]40            	test	byte [switches],flagheads ; 40h
 33847                                  	;test	word [switches],flagheads ; 40h
 33848 00002D5F 7406                    	jz	short heads_not_altered
 33849                                  
 33850 00002D61 A1[9835]                	mov	ax,[hlim]
 33851                                  	;mov	[deviceparameters+22],ax	
 33852 00002D64 A3[8A34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 33853                                  
 33854                                  heads_not_altered:
 33855                                  
 33856                                  ; set up correct media descriptor byte and sectors/cluster
 33857                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 33858                                  
 33859                                  	;mov	byte [deviceparameters+9],2
 33860                                  	; 02/11/2022
 33861                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 33862                                  	; 04/01/2023
 33863 00002D67 B80200                  	mov	ax,2	
 33864 00002D6A A2[7D34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 33865                                  
 33866 00002D6D B3F0                    	mov	bl,0F0h			; get default mediabyte
 33867                                  
 33868                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 33869                                  
 33870                                  	;mov	bh,[deviceparameters+17]
 33871                                  	; 02/11/2022
 33872 00002D6F 8A3E[8534]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 33873                                  
 33874                                  	; 04/01/2023
 33875                                  	; ax = 2
 33876 00002D73 3906[8A34]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 33877                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 33878 00002D77 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 33879                                  
 33880 00002D79 7524                    	jne	short only_one_head	; one head, do one head stuff
 33881                                  
 33882                                  ;	two head drives will use the mediadescriptor from the bpb
 33883                                  
 33884 00002D7B 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 33885                                  
 33886                                  ;	two sided drives have two special cases to look for. One is
 33887                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 33888                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 33889                                  ;	   one sector/cluster.
 33890                                  
 33891                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 33892                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 33893                                  ;	   type of 2 headed drive is all set.
 33894                                  
 33895 00002D7D 833E[8834]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 33896 00002D82 7509                    	jne	short not_144m
 33897 00002D84 833E[7834]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33898 00002D89 7502                    	jne	short not_144m
 33899                                  
 33900                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 33901                                  
 33902 00002D8B EB24                    	jmp	short got_one_secperclus_drive
 33903                                  
 33904                                  ;	check for 320K
 33905                                  
 33906                                  not_144m:
 33907 00002D8D 833E[7834]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33908 00002D92 7521                    	jne	short got_correct_mediad
 33909 00002D94 833E[8834]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33910 00002D99 751A                    	jne	short got_correct_mediad
 33911                                  
 33912 00002D9B B3FC                    	mov	bl,0FCh
 33913 00002D9D EB16                    	jmp	short got_correct_mediad
 33914                                  
 33915                                  only_one_head:
 33916                                  
 33917                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 33918                                  
 33919 00002D9F 803E[7534]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 33920 00002DA4 740B                    	je	short got_one_secperclus_drive
 33921                                  
 33922                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 33923                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 33924                                  ;	  besides 8 will be considered 0fch
 33925                                  
 33926 00002DA6 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 33927 00002DA8 833E[8834]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33928                                  	; 12/12/2022
 33929 00002DAD 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 33930                                  
 33931 00002DAF B3FE                    	mov	bl,0FEh			; 160K mediaid
 33932                                  
 33933                                  ;	we've either got a one sided drive, or a 1.44M drive
 33934                                  ;	  either case we'll use 1 sector per cluster instead of 2
 33935                                  
 33936                                  got_one_secperclus_drive:
 33937                                  	; 04/01/2023
 33938                                  	; ax = 2
 33939 00002DB1 48                      	dec	ax  ; ax = 1
 33940 00002DB2 A2[7D34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 33941                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 33942                                  
 33943                                  got_correct_mediad:
 33944 00002DB5 881E[8534]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 33945                                  
 33946                                  ;	 Calculate the correct number of Total Sectors on medium
 33947                                  
 33948 00002DB9 A1[7834]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 33949 00002DBC F726[8A34]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 33950 00002DC0 F726[8834]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33951 00002DC4 A3[8334]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 33952 00002DC7 F8                      	clc				; we currently return no errors
 33953                                  
 33954 00002DC8 C3                      	retn
 33955                                  
 33956                                  ;	M047 -- end rewritten routine
 33957                                  
 33958                                  ;----------------------------------------------------------------------------
 33959                                  ;
 33960                                  ; procedure : organize
 33961                                  ;
 33962                                  ;----------------------------------------------------------------------------
 33963                                  
 33964                                  ; 09/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 33965                                  %if 1
 33966                                  end_commd_line:
 33967 00002DC9 AA                      	stosb				; store line feed char in buffer for the linecount.
 33968                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33969                                  	; 03/01/2023
 33970                                  	; ds = cs
 33971                                  	;mov	byte [com_level],0
 33972                                  	;jmp	short org1
 33973                                  	; 09/09/2023
 33974 00002DCA EB11                    	jmp	short org0
 33975                                  nochar1:
 33976 00002DCC F9                      	stc
 33977 00002DCD C3                      	retn
 33978                                  %endif
 33979                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33980                                  	; (SYSINIT:3234h)
 33981                                  
 33982                                  organize:
 33983                                  	; 04/01/2023
 33984                                  	; ds = cs
 33985 00002DCE 8B0E[D203]              	mov	cx,[count]
 33986                                  	;mov	cx,[cs:count]
 33987 00002DD2 E3F8                    	jcxz	nochar1
 33988                                  
 33989                                  ;ifndef	MULTI_CONFIG
 33990                                  ;
 33991                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 33992                                  ;;   because we the case of values in SET commands preserved
 33993                                  ;
 33994                                  ;	call	mapcase
 33995                                  ;endif
 33996                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33997 00002DD4 E82502                  	call	mapcase
 33998                                  
 33999 00002DD7 31F6                    	xor	si,si
 34000 00002DD9 89F7                    	mov	di,si
 34001 00002DDB 31C0                    	xor	ax,ax
 34002                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 34003                                  	;;mov	byte [cs:com_level],0
 34004                                  	; 12/12/2022
 34005                                  	;mov	[cs:com_level],al ; 0
 34006                                  	; 04/01/2023
 34007                                  	; ds = cs
 34008                                  	; 09/09/2023
 34009                                  	;mov	[com_level],al ; 0
 34010                                  org0:
 34011 00002DDD C606[CC03]00            	mov	byte [com_level],0 ; 09/09/2023
 34012                                  org1:
 34013 00002DE2 E8A501                  	call	skip_comment
 34014 00002DE5 74E2                    	jz	short end_commd_line	; found a comment string and skipped.
 34015 00002DE7 E88A01                  	call	get2			; not a comment string. then get a char.
 34016 00002DEA 3C0A                    	cmp	al,lf ; 0Ah
 34017 00002DEC 74DB                    	je	short end_commd_line	; starts with a blank line.
 34018 00002DEE 3C20                    	cmp	al,' ' ; 20h
 34019 00002DF0 76F0                    	jbe	short org1		; skip leading control characters
 34020                                  	; 09/09/2023
 34021                                  	;jmp	short findit
 34022                                  
 34023                                  ; 09/09/2023
 34024                                  %if 0
 34025                                  end_commd_line:
 34026                                  	stosb				; store line feed char in buffer for the linecount.
 34027                                  	;mov	byte [cs:com_level],0	; reset the command level.
 34028                                  	; 03/01/2023
 34029                                  	; ds = cs
 34030                                  	mov	byte [com_level],0
 34031                                  	jmp	short org1
 34032                                  
 34033                                  nochar1:
 34034                                  	stc
 34035                                  	retn
 34036                                  %endif
 34037                                  
 34038                                  findit:
 34039 00002DF2 51                      	push	cx
 34040 00002DF3 56                      	push	si
 34041 00002DF4 57                      	push	di
 34042 00002DF5 89F5                    	mov	bp,si
 34043 00002DF7 4D                      	dec	bp
 34044 00002DF8 BE[E333]                        mov     si,comtab		; prepare to search command table
 34045 00002DFB B500                    	mov	ch,0
 34046                                  findcom:
 34047 00002DFD 89EF                    	mov	di,bp
 34048 00002DFF 8A0C                    	mov	cl,[si]
 34049 00002E01 46                      	inc	si
 34050 00002E02 E324                    	jcxz	nocom
 34051                                  
 34052                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34053                                  
 34054                                  ;ifdef	MULTI_CONFIG
 34055                                  ;
 34056                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 34057                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 34058                                  ;;   anything in particular)
 34059                                  ;
 34060                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 34061                                  ;       je	short semicolon
 34062                                  ;loopcom:
 34063                                  ;       mov     al,[es:di]
 34064                                  ;       inc     di
 34065                                  ;       and     al,~20h ; 0DFh		; force upper case
 34066                                  ;       inc     si                      ; compare to byte @es:di
 34067                                  ;       cmp     al,[si-1]
 34068                                  ;       loope   loopcom
 34069                                  ;;else
 34070                                  ;;	repe	cmpsb
 34071                                  ;endif
 34072                                  	; 02/11/2022
 34073 00002E04 F3A6                    	repe	cmpsb
 34074                                  
 34075 00002E06 9F                      	lahf
 34076 00002E07 01CE                            add     si,cx                   ; bump to next position without affecting flags
 34077 00002E09 9E                      	sahf
 34078 00002E0A AC                              lodsb                           ; get indicator letter
 34079 00002E0B 75F0                    	jnz	short findcom
 34080 00002E0D 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 34081 00002E11 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 34082 00002E13 26803D0A                	cmp	byte [es:di],lf
 34083 00002E17 740A                    	je	short gotcom0
 34084                                  
 34085                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34086                                  ;
 34087                                  ;;ifdef	MULTI_CONFIG
 34088                                  ;
 34089                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 34090                                  ;
 34091                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 34092                                  ;       je	short gotcom0
 34093                                  ;;endif
 34094                                  ;	push	ax
 34095                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 34096                                  ;
 34097                                  ;;ifdef	MULTI_CONFIG
 34098                                  ;
 34099                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 34100                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 34101                                  ;;   stored in the CONFIG.SYS memory image.
 34102                                  ;
 34103                                  ;       cmp     al,'?'                  ; explicit interactive command?
 34104                                  ;       jne	short no_query		; no
 34105                                  ;       pop     ax                      ; yes, so retrieve the original code
 34106                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 34107                                  ;       jmp     short gotcom0           ;
 34108                                  ;semicolon:
 34109                                  ;       mov     al,CONFIG_REM
 34110                                  ;       jmp     short gotcom0
 34111                                  ;no_query:
 34112                                  ;;endif  ;MULTI_CONFIG
 34113                                  
 34114                                  	; 02/11/2022
 34115 00002E19 50                      	push	ax
 34116 00002E1A 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 34117                                  
 34118 00002E1D E8A001                  	call	delim
 34119                                  no_delim:
 34120 00002E20 58                      	pop	ax
 34121 00002E21 75DA                    	jnz	short findcom
 34122                                  gotcom0:
 34123 00002E23 5F                      	pop	di
 34124 00002E24 5E                      	pop	si
 34125 00002E25 59                      	pop	cx
 34126 00002E26 EB0F                    	jmp	short gotcom
 34127                                  nocom:
 34128 00002E28 5F                      	pop	di
 34129 00002E29 5E                      	pop	si
 34130 00002E2A 59                      	pop	cx
 34131 00002E2B B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 34132 00002E2D AA                      	stosb				; save indicator char.
 34133                                  _skipline:
 34134 00002E2E E84301                  	call	get2
 34135 00002E31 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 34136 00002E33 75F9                            jne     short _skipline
 34137 00002E35 EB92                    	jmp	short end_commd_line	; handle next command line
 34138                                  gotcom:
 34139 00002E37 AA                              stosb                           ; save indicator char in buffer
 34140                                  
 34141                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34142                                  ;;ifdef	MULTI_CONFIG
 34143                                  ;
 34144                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 34145                                  ;;   it screws up the direct comparisons below.
 34146                                  ;
 34147                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34148                                  ;;endif
 34149                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 34150                                  ;
 34151                                  ;;ifdef	MULTI_CONFIG
 34152                                  ;
 34153                                  ;;   There is no whitespace/delimiter between the "begin block" character
 34154                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 34155                                  ;;   skipping code
 34156                                  ;
 34157                                  ;       cmp     al,CONFIG_BEGIN
 34158                                  ;       je	short org31
 34159                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 34160                                  ;       je      short no_mapcase
 34161                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 34162                                  ;       je      short no_mapcase
 34163                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 34164                                  ;       je      short no_mapcase
 34165                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 34166                                  ;       je      short no_mapcase
 34167                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 34168                                  ;no_mapcase:
 34169                                  ;;endif
 34170                                  
 34171                                  	; 02/11/2022
 34172                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 34173                                  	; 04/01/2023
 34174                                  	; ds = cs
 34175 00002E38 A2[D003]                	mov	[cmd_indicator],al
 34176                                  org2:	
 34177 00002E3B E83601                  	call    get2                    ; skip the command name until delimiter
 34178 00002E3E 3C0A                            cmp     al,lf
 34179 00002E40 740B                    	je	short org21
 34180 00002E42 3C0D                    	cmp	al,cr
 34181 00002E44 7407                    	je	short org21
 34182                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34183                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 34184                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 34185                                  
 34186 00002E46 E87701                  	call	delim
 34187 00002E49 75F0                            jnz	short org2
 34188 00002E4B EB02                    	jmp	short org3
 34189                                  org21:					;if cr or lf then
 34190 00002E4D 4E                      	dec	si			; undo si, cx register
 34191 00002E4E 41                      	inc	cx			;  and continue
 34192                                  org3:	
 34193                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 34194                                  	;je	short get_cmt_token
 34195                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34196                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34197                                  	;;je	short org_file
 34198                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 34199                                  	;je	short org_file
 34200                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34201                                          ;;je	short org_file
 34202                                  	;; 02/11/2022
 34203                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34204                                  	;je	short org_file
 34205                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 34206                                  	;je	short org_file
 34207                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 34208                                  	;je	short org_switch
 34209                                  
 34210                                  	; 04/01/2023
 34211                                  	; ds = cs
 34212                                  
 34213 00002E4F 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 34214 00002E54 7456                    	je	short get_cmt_token
 34215                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34216                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34217                                  	;je	short org_file
 34218 00002E56 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 34219 00002E5B 7429                    	je	short org_file
 34220                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34221                                          ;je	short org_file
 34222                                  	; 02/11/2022
 34223 00002E5D 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34224 00002E62 7422                    	je	short org_file
 34225 00002E64 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 34226 00002E69 741B                    	je	short org_file
 34227 00002E6B 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 34228 00002E70 7403                    	je	short org_switch
 34229                                  	
 34230                                  org31:
 34231 00002E72 E99500                  	jmp	org4
 34232                                  
 34233                                  org_switch:
 34234 00002E75 E81201                  	call	skip_comment
 34235 00002E78 7472                    	jz	short end_commd_line_brdg
 34236                                  
 34237 00002E7A E8F700                  	call	get2
 34238 00002E7D E84801                  	call	org_delim
 34239 00002E80 74F3                    	jz	short org_switch
 34240                                  
 34241 00002E82 AA                      	stosb
 34242 00002E83 E99300                  	jmp	org5
 34243                                  
 34244                                  org_file:			; get the filename and put 0 at end
 34245 00002E86 E80101                  	call	skip_comment
 34246 00002E89 7464                    	jz	short org_put_zero
 34247                                  
 34248 00002E8B E8E600                  	call	get2		; not a comment
 34249 00002E8E E82F01                  	call	delim
 34250 00002E91 74F3                    	jz	short org_file	; skip the possible delimiters
 34251                                  
 34252 00002E93 AA                      	stosb			; copy the first non delim char found in buffer
 34253                                  
 34254                                  org_copy_file:
 34255 00002E94 E8F300                  	call	skip_comment	; comment char in the filename?
 34256 00002E97 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 34257                                  
 34258 00002E99 E8D800                  	call	get2
 34259 00002E9C 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 34260 00002E9E 7457                    	je	short end_file_slash ; this will be the special case.
 34261                                  
 34262 00002EA0 AA                      	stosb			; save the char. in buffer
 34263 00002EA1 E81C01                  	call	delim
 34264 00002EA4 7459                    	jz	short end_copy_file
 34265                                  
 34266 00002EA6 3C20                    	cmp	al, ' '
 34267 00002EA8 77EA                    	ja	short org_copy_file ; keep copying
 34268 00002EAA EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 34269                                  
 34270                                  get_cmt_token:			; get the token. just max. 2 char.
 34271 00002EAC E8C500                  	call	get2
 34272 00002EAF 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 34273 00002EB1 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 34274 00002EB3 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 34275 00002EB5 74F5                    	je	short get_cmt_token ;  character.)
 34276 00002EB7 3C3D                    	cmp	al,'='		; = is special in this case.
 34277 00002EB9 74F1                    	je	short get_cmt_token
 34278 00002EBB 3C0D                    	cmp	al,cr
 34279 00002EBD 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 34280 00002EBF 3C0A                    	cmp	al,lf
 34281 00002EC1 7422                    	je	short get_cmt_end
 34282                                  
 34283                                  	; 04/01/2023
 34284                                  	; ds = cs
 34285                                  	;mov	[cs:cmmt1],al	; store it
 34286                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 34287 00002EC3 A2[CE03]                	mov	[cmmt1],al	; store it
 34288 00002EC6 C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 34289 00002ECB E8A600                  	call	get2
 34290 00002ECE 3C20                    	cmp	al,' ' ; 20h
 34291 00002ED0 7413                    	je	short get_cmt_end
 34292 00002ED2 3C09                    	cmp	al,tab ; 9
 34293 00002ED4 740F                    	je	short get_cmt_end
 34294 00002ED6 3C0D                    	cmp	al,cr  ; 0Dh
 34295 00002ED8 740B                    	je	short get_cmt_end
 34296 00002EDA 3C0A                    	cmp	al,lf  ; 0Ah
 34297 00002EDC 740E                    	je	short end_commd_line_brdg
 34298                                  
 34299                                  	;mov	[cs:cmmt2],al
 34300                                  	;inc	byte [cs:cmmt]
 34301                                  	; 04/01/2023
 34302 00002EDE A2[CF03]                	mov	[cmmt2],al
 34303 00002EE1 FE06[CD03]              	inc	byte [cmmt]
 34304                                  
 34305                                  get_cmt_end:
 34306 00002EE5 E88C00                  	call	get2
 34307 00002EE8 3C0A                    	cmp	al,lf
 34308 00002EEA 75F9                    	jne	short get_cmt_end	; skip it.
 34309                                  end_commd_line_brdg: 
 34310 00002EEC E9DAFE                  	jmp	end_commd_line		; else jmp to end_commd_line
 34311                                  
 34312                                  org_put_zero:				; make the filename in front of
 34313 00002EEF 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 34314 00002EF3 47                      	inc	di
 34315 00002EF4 E9D2FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 34316                                  
 34317                                  end_file_slash: 			; al = "/" option char.
 34318 00002EF7 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 34319 00002EFB 47                      	inc	di			; and
 34320 00002EFC AA                      	stosb				; store "/" after that.
 34321 00002EFD EB1A                    	jmp	short org5		; continue with the rest of the line
 34322                                  
 34323                                  end_copy_file:
 34324 00002EFF 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 34325 00002F04 3C0A                    	cmp	al,lf
 34326 00002F06 74E4                    	je	short end_commd_line_brdg
 34327 00002F08 EB0F                    	jmp	short org5
 34328                                  
 34329                                  org4:					; org4 skips all delimiters after the command name except for '/'
 34330 00002F0A E87D00                  	call	skip_comment
 34331 00002F0D 74DD                    	jz	short end_commd_line_brdg
 34332                                  
 34333 00002F0F E86200                  	call	get2
 34334 00002F12 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 34335 00002F15 74F3                    	jz	short org4
 34336 00002F17 EB08                    	jmp	short org51
 34337                                  
 34338                                  org5:					; rest of the line
 34339 00002F19 E86E00                  	call	skip_comment		; comment?
 34340 00002F1C 74CE                    	jz	short end_commd_line_brdg
 34341 00002F1E E85300                  	call	get2			; not a comment.
 34342                                  
 34343                                  org51:
 34344 00002F21 AA                      	stosb				; copy the character
 34345 00002F22 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 34346 00002F24 743A                    	je	short at_quote
 34347 00002F26 3C20                    	cmp	al,' '  ; 20h
 34348 00002F28 77EF                    	ja	short org5
 34349                                  					; M051 - Start
 34350                                  	; 04/01/2023
 34351                                  	; ds = cs
 34352 00002F2A 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 34353                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 34354 00002F2F 7514                    	jne	short not_dh		; N: 
 34355 00002F31 3C0A                    	cmp	al,lf			; Q: is this line feed
 34356 00002F33 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 34357 00002F35 3C0D                    	cmp	al,cr			; Q: is this a cr
 34358 00002F37 75E0                    	jne	short org5		; N: 
 34359 00002F39 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 34360 00002F3E AA                      	stosb				; put cr after blank
 34361 00002F3F FE06[122C]              	inc	byte [insert_blank]
 34362                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 34363                                  					; inserted
 34364 00002F43 EBD4                    	jmp	short org5
 34365                                  not_dh:					; M051 - End
 34366                                  
 34367 00002F45 3C0A                    	cmp	al,lf			; line feed?
 34368 00002F47 740F                    	je	short org1_brdg		; handles the next command line.
 34369 00002F49 EBCE                    	jmp	short org5		; handles next char in this line.
 34370                                  
 34371                                  org_dhlf:				; M051 - Start
 34372                                  	; 04/01/2023
 34373                                  	; ds = cs
 34374 00002F4B 803E[122C]01            	cmp	byte [insert_blank],1
 34375                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 34376 00002F50 7406                    	je	short org1_brdg		; Y:
 34377 00002F52 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 34378 00002F57 AA                      	stosb				; put lf after blank
 34379                                  					; M051 - End
 34380                                  org1_brdg:
 34381 00002F58 C606[122C]00            	mov	byte [insert_blank],0 
 34382                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 34383                                  					; M051: devicehigh
 34384 00002F5D E982FE                  	jmp	org1
 34385                                  
 34386                                  at_quote:
 34387 00002F60 803E[CC03]00            	cmp	byte [com_level],0
 34388                                  	;cmp	byte [cs:com_level],0
 34389 00002F65 7407                    	je	short up_level
 34390                                  	;mov	byte [cs:com_level],0	; reset it.
 34391 00002F67 C606[CC03]00            	mov	byte [com_level],0
 34392 00002F6C EBAB                    	jmp	short org5
 34393                                  
 34394                                  up_level:
 34395                                  	;inc	byte [cs:com_level]	; set it.
 34396 00002F6E FE06[CC03]              	inc	byte [com_level]
 34397 00002F72 EBA5                    	jmp	short org5
 34398                                  
 34399                                  ;----------------------------------------------------------------------------
 34400                                  ;
 34401                                  ; procedure : get2
 34402                                  ;
 34403                                  ;----------------------------------------------------------------------------
 34404                                  
 34405                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34406                                  	; (SYSINIT:33FAh)
 34407                                  	; 04/01/2023
 34408                                  get2:
 34409 00002F74 E304                    	jcxz	noget
 34410                                  	;
 34411                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34412                                  	;;lods	byte ptr es:[si]
 34413                                  	; 12/12/2022
 34414 00002F76 26                      	es	
 34415 00002F77 AC                      	lodsb
 34416                                  	;mov	al, [es:si]
 34417                                  	;inc	si
 34418                                  	;
 34419 00002F78 49                      	dec	cx
 34420 00002F79 C3                      	retn
 34421                                  noget:
 34422 00002F7A 59                      	pop	cx
 34423                                  	; 04/01/2023
 34424                                  	; ds = cs
 34425                                  	;mov	[cs:count],di ; 13/05/2019
 34426                                  	;mov	[cs:org_count],di
 34427 00002F7B 893E[D203]              	mov	[count],di
 34428 00002F7F 893E[D403]              	mov	[org_count],di
 34429 00002F83 31F6                    	xor	si,si
 34430                                  	;mov	[cs:chrptr],si
 34431 00002F85 8936[D603]              	mov	[chrptr],si
 34432                                  
 34433                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34434                                  ;;ifndef MULTI_CONFIG
 34435                                  ;;	retn
 34436                                  ;;else
 34437                                  ;
 34438                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 34439                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 34440                                  ;;   and the new boot menu stuff...
 34441                                  ;
 34442                                  ;	mov     cx,di
 34443                                  ;	jmp     menu_check
 34444                                  ;;endif
 34445                                  
 34446                                  	; 02/11/2022
 34447 00002F89 C3                      	retn
 34448                                  
 34449                                  ;----------------------------------------------------------------------------
 34450                                  ;
 34451                                  ; procedure : skip_comment
 34452                                  ;
 34453                                  ;skip the commented string until lf, if current es:si-> a comment string.
 34454                                  ;in) es:si-> string
 34455                                  ;	 cx -> length.
 34456                                  ;out) zero flag not set if not found a comment string.
 34457                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 34458                                  ;	  the line feed character at this moment when return.
 34459                                  ;	  ax register destroyed.
 34460                                  ;	  if found, si, cx register adjusted accordingly.
 34461                                  ;
 34462                                  ;----------------------------------------------------------------------------
 34463                                  
 34464                                  	; 04/01/2023 - Retro DOS v4.0
 34465                                  
 34466                                  skip_comment:
 34467 00002F8A E3EE                    	jcxz	noget		; get out of the organize routine.
 34468                                  
 34469                                  	; 04/01/2023
 34470                                  	; ds = cs	
 34471                                  
 34472 00002F8C 803E[CC03]00            	cmp	byte [com_level],0
 34473                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 34474 00002F91 752C                    	jne	short no_commt	 ; (not inside quotations)
 34475                                  
 34476 00002F93 803E[CD03]01            	cmp	byte [cmmt],1
 34477                                  	;cmp	byte [cs:cmmt],1
 34478 00002F98 7225                    	jb	short no_commt
 34479                                  
 34480 00002F9A 268A04                  	mov	al,[es:si]
 34481                                  	
 34482 00002F9D 3806[CE03]              	cmp	[cmmt1],al
 34483                                  	;cmp	[cs:cmmt1],al
 34484 00002FA1 751C                    	jne	short no_commt
 34485                                  
 34486 00002FA3 803E[CD03]02            	cmp	byte [cmmt],2
 34487                                  	;cmp	byte [cs:cmmt],2
 34488 00002FA8 750A                    	jne	short skip_cmmt
 34489                                  
 34490 00002FAA 268A4401                	mov	al,[es:si+1]
 34491                                  	
 34492 00002FAE 3806[CF03]              	cmp	[cmmt2],al
 34493                                  	;cmp	[cs:cmmt2],al
 34494 00002FB2 750B                    	jne	short no_commt
 34495                                  skip_cmmt:
 34496 00002FB4 E3C4                    	jcxz	noget		; get out of organize routine.
 34497 00002FB6 268A04                  	mov	al,[es:si]
 34498 00002FB9 46                      	inc	si
 34499 00002FBA 49                      	dec	cx
 34500 00002FBB 3C0A                    	cmp	al,lf		; line feed?
 34501 00002FBD 75F5                    	jne	short skip_cmmt
 34502                                  no_commt:
 34503 00002FBF C3                      	retn
 34504                                  
 34505                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34506                                  %if 0
 34507                                  
 34508                                  ;ifdef	MULTI_CONFIG
 34509                                  
 34510                                  ;----------------------------------------------------------------------------
 34511                                  ;
 34512                                  ;   kbd_read: wait for keystroke
 34513                                  ;
 34514                                  ;   INPUT
 34515                                  ;       DS == CS == sysinitseg
 34516                                  ;
 34517                                  ;   OUTPUT
 34518                                  ;       Carry SET to clean boot, CLEAR otherwise
 34519                                  ;
 34520                                  ;   OTHER REGS USED
 34521                                  ;       All
 34522                                  ;
 34523                                  ;   HISTORY
 34524                                  ;       Created 16-Nov-1992 by JeffPar
 34525                                  ;
 34526                                  ;----------------------------------------------------------------------------
 34527                                  
 34528                                  kbd_read:
 34529                                          test    byte [bDisableUI],2
 34530                                          jnz     short kbd_nodelay
 34531                                  
 34532                                          push    ds              ; the bios timer tick count is incremented
 34533                                          sub     ax,ax           ; 18.2 times per second;
 34534                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 34535                                  	;mov	dx,[046Ch]	; get initial value
 34536                                  kbd_loop:
 34537                                          mov     ah,1            ;
 34538                                          int     16h             ; peek the keyboard
 34539                                          jnz	short kbd_loopdone ; something's there, get out
 34540                                          mov     ah,2            ; peek the shift states
 34541                                          int     16h             ;
 34542                                          test    al,03h          ; either right or left shift key bits set?
 34543                                          jnz	short kbd_loopdone ; yes
 34544                                          mov     ax,[046Ch]	;
 34545                                  	;sub	ax,dx           ; get difference
 34546                                  	; 15/04/2019 - Retro DOS v4.0
 34547                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 34548                                  
 34549                                  	cmp     al,37           ; reached limit?
 34550                                          jb	short kbd_loop	; not yet
 34551                                  kbd_loopdone:
 34552                                          pop     ds              ; delay complete!
 34553                                  kbd_nodelay:
 34554                                          sub     bx,bx           ; assume clean boot
 34555                                          mov     ah,2            ; peek the shift states
 34556                                          int     16h             ;
 34557                                          test    al,03h          ; either right or left shift key bits set?
 34558                                          jz      short kbd_notshift ; no
 34559                                          inc     bx              ; yes
 34560                                          inc     bx
 34561                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 34562                                  	or	byte [bQueryOpt],4
 34563                                  kbd_notshift:                   ;
 34564                                          mov     ah,1            ; peek the keyboard
 34565                                          int     16h             ;
 34566                                          jz	short kbd_test	; no key present
 34567                                          or      al,al           ; is it a function key?
 34568                                          jnz	short kbd_test	; no
 34569                                  
 34570                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 34571                                          cmp     ah,62h          ; CTRL F5
 34572                                          je	short kbd_cfg_bypass
 34573                                  	
 34574                                          cmp     ah,3Fh          ; F5 function key?
 34575                                          jne	short kbd_notf5	; no
 34576                                  kbd_cfg_bypass:
 34577                                          mov     dx,_$CleanMsg
 34578                                          call    print
 34579                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 34580                                  	or	byte [bQueryOpt],4           ;
 34581                                          jmp     short kbd_eat   ; yes, clean boot selected
 34582                                  kbd_notf5:
 34583                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 34584                                          cmp     ah,65h          ; CTRL F8
 34585                                          je	short kbd_cfg_confirm
 34586                                  
 34587                                          cmp     ah,42h          ; F8 function key?
 34588                                          jne	short kbd_exit	; no
 34589                                  kbd_cfg_confirm:
 34590                                          mov     dx,_$InterMsg
 34591                                          call    print           ;
 34592                                          mov     bl,1            ; yes, interactive-boot option enabled
 34593                                          mov     [bQueryOpt],bl  ; change default setting
 34594                                  kbd_eat:                        ;
 34595                                          mov     ah,0            ;
 34596                                          int     16h             ; eat the key we assumed was a signal
 34597                                          mov	byte [secElapsed],-1
 34598                                          or      bx,bx           ;
 34599                                          jz	short kbd_clean	;
 34600                                  kbd_test:                       ;
 34601                                          cmp     bl,2            ;
 34602                                          jb	short kbd_exit	;
 34603                                  kbd_clean:                      ;
 34604                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 34605                                          stc                     ; set carry to indicate abort
 34606                                          retn			;
 34607                                  kbd_exit:                       ;
 34608                                          clc                     ; clear carry to indicate success
 34609                                          retn			;
 34610                                  
 34611                                  ;----------------------------------------------------------------------------
 34612                                  ;
 34613                                  ;   set_numlock: set numlock LED
 34614                                  ;
 34615                                  ;   INPUT
 34616                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 34617                                  ;
 34618                                  ;   OUTPUT
 34619                                  ;       None
 34620                                  ;
 34621                                  ;   OTHER REGS USED
 34622                                  ;       None
 34623                                  ;
 34624                                  ;   HISTORY
 34625                                  ;       Created 16-Nov-1992 by JeffPar
 34626                                  ;
 34627                                  ;----------------------------------------------------------------------------
 34628                                  
 34629                                  set_numlock:
 34630                                          push    ax
 34631                                          push    ds
 34632                                          sub     ax,ax
 34633                                          mov     ds,ax
 34634                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 34635                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 34636                                          jne	short not_off	; no
 34637                                          and     byte [0417h],~20h ; 0DFh
 34638                                          jmp     short set_done
 34639                                  not_off:
 34640                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 34641                                          stc
 34642                                          jne	short set_done	; no
 34643                                          or      byte [0417h],20h
 34644                                  set_done:
 34645                                          pop     ds
 34646                                          pop     ax
 34647                                          retn
 34648                                  
 34649                                  ; 16/04/2019 - Retro DOS v4.0
 34650                                  
 34651                                  ;----------------------------------------------------------------------------
 34652                                  ;
 34653                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 34654                                  ;
 34655                                  ;   INPUT
 34656                                  ;       CX == "organized" config.sys memory image length
 34657                                  ;    ES:SI -> "organized" config.sys memory image
 34658                                  ;       DS == CS == sysinitseg
 34659                                  ;
 34660                                  ;   OUTPUT
 34661                                  ;       Same as above;  the idea is that menu_check simply transforms
 34662                                  ;       a block-structured config.sys image into a conventional image,
 34663                                  ;       based on the user's block selection and any other boot-time options
 34664                                  ;       the user may have employed...
 34665                                  ;
 34666                                  ;   OTHER REGS USED
 34667                                  ;       All
 34668                                  ;
 34669                                  ;   NOTES
 34670                                  ;       [count] and [org_count] are set to the new config.sys image length
 34671                                  ;
 34672                                  ;   HISTORY
 34673                                  ;       Created 16-Mar-1992 by JeffPar
 34674                                  ;
 34675                                  ;----------------------------------------------------------------------------
 34676                                  
 34677                                  menu_check:
 34678                                  
 34679                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 34680                                  ;   disable clean/interactive boot options
 34681                                  
 34682                                          push    cx              ;
 34683                                          push    si              ;
 34684                                          sub     bx,bx           ; remains ZERO until first block
 34685                                  swchk_loop:                     ;
 34686                                          call    get_char        ; get first char of current line
 34687                                          jc	short swchk_end	; hit eof
 34688                                          cmp     al,CONFIG_BEGIN ;
 34689                                          jne	short swchk_next1 ;
 34690                                          inc     bx              ; remember that we've seen a block
 34691                                          jmp     short swchk_nextline
 34692                                  swchk_next1:                    ;
 34693                                          cmp     al,CONFIG_NUMLOCK
 34694                                          jne	short swchk_next2 ;
 34695                                          or      bx,bx           ; only do NUMLOCK commands that exist
 34696                                          jnz	short swchk_nextline ; before the first block
 34697                                          call    set_numlock     ; REM it out so we don't act on it later, too
 34698                                          mov     byte [es:si-1],CONFIG_REM
 34699                                          jmp     short swchk_nextline
 34700                                  swchk_next2:                    ;
 34701                                          cmp     al,CONFIG_SWITCHES
 34702                                          jne	short swchk_nextline ; this line ain't it
 34703                                  swchk_scan:                     ;
 34704                                          call    get_char        ; look for /N or /F
 34705                                  swchk_scan1:                    ;
 34706                                          cmp     al,LF           ; end of line?
 34707                                          je	short swchk_nextline ; yes
 34708                                          cmp     al,'/'          ; switch-char?
 34709                                          jne	short swchk_scan ; no
 34710                                          call    get_char        ;
 34711                                          and     al,~20h ; 0DFh	; convert to upper case
 34712                                          cmp     al,[swit_n+1]
 34713                                          jne	short swchk_scan2 ; no
 34714                                          or      byte [bDisableUI],1
 34715                                          jmp	short swchk_scan ; continue looking for switches of interest
 34716                                  swchk_scan2:                    ;
 34717                                          cmp     al,[swit_f+1]
 34718                                          jne	short swchk_scan1 ; no
 34719                                          or      byte [bDisableUI],2
 34720                                          jmp     short swchk_scan ; continue looking for switches of interest
 34721                                  swchk_nextline:                 ;
 34722                                          call    skip_opt_line   ;
 34723                                          jmp     short swchk_loop ;
 34724                                  swchk_end:                      ;
 34725                                          pop     si              ;
 34726                                          pop     cx              ;
 34727                                  
 34728                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 34729                                  ;   the DisableUI flag is still clear
 34730                                  
 34731                                          test    byte [bDisableUI],1
 34732                                          jnz	short menu_search
 34733                                  ;
 34734                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 34735                                  ;   there is anything at all in the keyboard buffer
 34736                                  ;
 34737                                          call    kbd_read
 34738                                          jnc	short menu_search
 34739                                          jmp	menu_abort
 34740                                  
 34741                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 34742                                  
 34743                                  menu_search:
 34744                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 34745                                          mov     di,szMenu	;
 34746                                          call    find_block      ; find the MENU block
 34747                                          jnc	short menu_found ;
 34748                                          mov     byte [szBoot],0
 34749                                          jmp	no_selection ; not found
 34750                                  
 34751                                  ;   Process the requested menu color(s)
 34752                                  
 34753                                  menu_color:
 34754                                          push    cx              ;
 34755                                          push    dx              ;
 34756                                          mov     dx,0007h        ; default color setting
 34757                                          call    get_number	; get first number
 34758                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 34759                                          mov     ch,bl           ; save it in CH
 34760                                          and     dl,0F0h         ;
 34761                                          or      dl,bl           ;
 34762                                          call    delim           ; did we hit a delimiter
 34763                                          jne	short check_color ; no, all done
 34764                                          call    get_number	; get next number
 34765                                          and     bl,0Fh		; second # is background color (for high nibble)
 34766                                          mov     dh,bl           ; save it in DH
 34767                                          and     dl,0Fh		;
 34768                                          mov     cl,4            ;
 34769                                          shl     bl,cl           ;
 34770                                          or      dl,bl           ;
 34771                                  check_color:                    ;
 34772                                          cmp     ch,dh           ; are foreground/background the same?
 34773                                          jne	short set_color	; no
 34774                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 34775                                  set_color:
 34776                                          mov     [bMenuColor],dl ;
 34777                                          pop     dx              ;
 34778                                          pop     cx              ;
 34779                                          jmp	menu_nextitem
 34780                                  
 34781                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 34782                                  ;   above is there simply to alleviate short jump problems)
 34783                                  
 34784                                  menu_found:
 34785                                          mov     byte [bDefBlock],1
 34786                                          mov     word [offDefBlock],0
 34787                                          mov     byte [secTimeOut],-1
 34788                                          and     byte [bQueryOpt],~2 ; 0FDh
 34789                                  
 34790                                          call    skip_opt_line   ; skip to next line
 34791                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 34792                                  
 34793                                  ;   Process the menu block now
 34794                                  
 34795                                  menu_process:
 34796                                          call    get_char        ; get first char of current line
 34797                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 34798                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34799                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 34800                                          je	short to_menu_getdefault
 34801                                          cmp     al,CONFIG_SUBMENU
 34802                                          je	short menu_item	; go process sub-menu
 34803                                          cmp     al,CONFIG_MENUITEM
 34804                                          je	short menu_item	; go process menu item
 34805                                          cmp     al,CONFIG_MENUDEFAULT
 34806                                          je	short menu_default ; go process menu default
 34807                                          cmp     al,CONFIG_MENUCOLOR
 34808                                          je	short menu_color ; go process menu color
 34809                                          cmp     al,CONFIG_NUMLOCK
 34810                                          je	short menu_numlock ;
 34811                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 34812                                          je	short menu_nextitem ;
 34813                                          call    any_delim       ; allow blank lines and such
 34814                                          je	short menu_nextitem ;
 34815                                          stc                     ;
 34816                                          call    print_error     ; non-MENU command!
 34817                                          jmp     short menu_nextitem
 34818                                  menu_numlock:
 34819                                          call    set_numlock
 34820                                          jmp     short menu_nextitem
 34821                                  to_menu_getdefault:
 34822                                          jmp     short menu_getdefault
 34823                                  
 34824                                  ;   Save the offset of the default block name, we'll need it later
 34825                                  
 34826                                  menu_default:
 34827                                          mov     [offDefBlock],si; save address of default block name
 34828                                          cmp     byte [secElapsed],0
 34829                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 34830                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 34831                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 34832                                          call    skip_delim      ; something is typed
 34833                                          jc	short menu_nextitem ;
 34834                                          mov     si,bx           ;
 34835                                          call    get_number      ; get number (of seconds for timeout)
 34836                                          cmp     bl,90           ; limit it to a reasonable number
 34837                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 34838                                          mov     bl,90           ;  display function can handle)
 34839                                  timeout_ok:                     ;
 34840                                          mov     [secTimeOut],bl ;
 34841                                  timeout_skip:
 34842                                          jmp     short menu_nextitem
 34843                                  
 34844                                  ;   Verify that this is a valid menu item by searching for the named block
 34845                                  
 34846                                  menu_item:
 34847                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 34848                                          jae	short menu_nextitem ;
 34849                                          mov     di,si           ; DS:DI -> block name to search for
 34850                                          call    srch_block      ;
 34851                                          je	short menu_itemfound ;
 34852                                          stc                     ;
 34853                                          call    print_error     ; print error and pause
 34854                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 34855                                  
 34856                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 34857                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 34858                                  ;   and CX are unmodified
 34859                                  
 34860                                  menu_itemfound:
 34861                                          inc     dx              ; otherwise, increment total block count
 34862                                          mov     bx,dx           ; and use it to index the arrays of offsets
 34863                                          mov	[abBlockType+bx],al
 34864                                          add     bx,bx           ; of recorded block names and descriptions
 34865                                  
 34866                                  ;   There should be a description immediately following the block name on
 34867                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 34868                                  ;   description...
 34869                                  
 34870                                          mov     [aoffBlockName+bx],si
 34871                                          mov     [aoffBlockDesc+bx],si
 34872                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 34873                                          call    skip_token      ;
 34874                                          jc	short menu_nextitem ; hit eol/eof
 34875                                          call    skip_delim      ;
 34876                                          jc	short menu_nextitem ; hit eol/eof
 34877                                          xchg    bx,di           ;
 34878                                          mov     [aoffBlockDesc+bx],di
 34879                                  
 34880                                  menu_nextitem:
 34881                                          call    skip_opt_line   ;
 34882                                          jmp     menu_process    ; go back for more lines
 34883                                  
 34884                                  ;   Display menu items now, after determining which one is default
 34885                                  
 34886                                  menu_getdefault:
 34887                                          or      dl,dl           ; where there any valid blocks at all?
 34888                                          jnz	short menu_valid ; yes
 34889                                          sub     bx,bx           ; no, so force autoselect of 0
 34890                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 34891                                  menu_valid:
 34892                                          sub     bx,bx           ;
 34893                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 34894                                          mov     di,[offDefBlock];
 34895                                          or      di,di           ; does a default block exist?
 34896                                          jz	short menu_nodefault ; no
 34897                                          inc     bx              ; yes, walk name table, looking for default
 34898                                  menu_chkdefault:
 34899                                          push    bx              ;
 34900                                          add     bx,bx           ;
 34901                                          mov     si,[aoffBlockName+bx]
 34902                                          mov     cx,128          ; arbitrary maximum length of a name
 34903                                          push    ds              ;
 34904                                          push    es              ;
 34905                                          pop     ds              ;
 34906                                          call    comp_names      ; is this block the same as the default?
 34907                                          pop     ds              ;
 34908                                          pop     bx              ;
 34909                                          je	short menu_setdefault ; yes
 34910                                          inc     bx              ;
 34911                                          cmp     bl,[bMaxBlock]  ; all done searching?
 34912                                          jbe	short menu_chkdefault ; not yet
 34913                                  menu_nodefault:
 34914                                          mov     bl,1            ; if no default, force default to #1
 34915                                  menu_setdefault:
 34916                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 34917                                  
 34918                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 34919                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 34920                                  ;   supposed to skip menu display and run with the specified default block;
 34921                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 34922                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 34923                                  ;   with no timeout)
 34924                                  
 34925                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 34926                                          jne	short menu_display ; no
 34927                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 34928                                          jnz	short menu_display ; yes, so *don't* assume default after all
 34929                                          jmp     not_topmenu	;
 34930                                  
 34931                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 34932                                  
 34933                                  menu_display:
 34934                                          mov     ah,0Fh          ; get current video mode
 34935                                          int     10h             ;
 34936                                          mov     ah,00h          ; just re-select that mode
 34937                                          int     10h             ;
 34938                                          push    es              ;
 34939                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 34940                                          mov     es,ax           ; and save the current (default) video page
 34941                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 34942                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 34943                                          mov     al,[es:0062h]   ;
 34944                                          mov     [bCRTPage],al   ;
 34945                                          mov     ax,[bMenuPage]	; select new page for menu
 34946                                          int     10h             ;
 34947                                          mov     ax,0600h        ; clear entire screen
 34948                                          mov     bh,[bMenuColor] ; using this color
 34949                                          sub     cx,cx           ; upper left row/col
 34950                                          ;mov	dl,[es:CRT_Cols] 
 34951                                          mov	dl,[es:4Ah]
 34952                                  	dec     dl              ;
 34953                                          ;mov	dh,[es:CRT_Rows];
 34954                                          mov	dh,[es:84h]
 34955                                  	or      dh,dh           ; # of rows valid?
 34956                                          jnz	short menu_clear ; hopefully
 34957                                          mov     dh,[bLastRow]   ; no, use a default
 34958                                  menu_clear:
 34959                                          int     10h             ; clear the screen using the req. attribute
 34960                                          pop     es              ;
 34961                                          mov     [bLastRow],dh   ; save DH
 34962                                          mov     dx,_$MenuHeader
 34963                                          call    print           ; cursor now on row 3 (numbered from 0)
 34964                                  
 34965                                          test    byte [bDisableUI],1
 34966                                          jnz     short menu_nostatus
 34967                                          mov     bh,[bMenuPage]  ;
 34968                                          mov     dh,[bLastRow]   ; restore DH
 34969                                          mov     dl,0            ; print the status line on row DH, col 0,
 34970                                          mov     ah,02h          ; now that we can trash the cursor position
 34971                                          int     10h             ;
 34972                                          mov     dx,_$StatusLine
 34973                                          call    print           ;
 34974                                          mov     ah,3            ; get cursor position
 34975                                          int     10h             ;
 34976                                          sub     dl,2            ;
 34977                                          mov     [bLastCol],dl   ; save column where status char will go
 34978                                  
 34979                                  menu_nostatus:
 34980                                          mov     bx,1            ; now prepare to display all the menu items
 34981                                  menu_disploop:
 34982                                          call    print_item	; print item #BL
 34983                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 34984                                          cmp     bl,[bMaxBlock]  ; all done?
 34985                                          jbe	short menu_disploop ; not yet
 34986                                  
 34987                                  ;   Set cursor position to just below the menu items
 34988                                  
 34989                                          mov     dl,0            ; select column
 34990                                          mov     dh,bl           ;
 34991                                          add     dh,4            ; select row below menu
 34992                                          mov     bh,[bMenuPage]  ;
 34993                                          mov     ah,02h          ; set cursor position beneath the block list
 34994                                          int     10h             ;
 34995                                  
 34996                                          mov     dx,_$MenuPrmpt
 34997                                          call    print           ;
 34998                                          call    select_item     ; make a selection, return # in BX
 34999                                          mov     dx,crlfm	
 35000                                          call    print           ;
 35001                                          push    word [bDisableUI]
 35002                                          or      byte [bDisableUI],1
 35003                                          call    show_status     ; clear the status line now
 35004                                          pop     word [bDisableUI]
 35005                                  
 35006                                  ;   Now begins the "re-organization" process...
 35007                                  
 35008                                  menu_autoselect:
 35009                                          cmp     bx,-1           ; clean boot requested?
 35010                                          jne	short normal_boot ; no
 35011                                          call    disable_autoexec; basically, add a /D to the command.com line
 35012                                  menu_abort:
 35013                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 35014                                          jmp	menu_exit	;
 35015                                  
 35016                                  normal_boot:
 35017                                          cmp     bx,-2           ; back to top-level menu?
 35018                                          jne	short not_topmenu ; no
 35019                                          mov     cx,[count]      ; yes, start all over
 35020                                          sub     si,si           ;
 35021                                          jmp     menu_search
 35022                                  
 35023                                  not_topmenu:
 35024                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 35025                                          jne	short not_submenu
 35026                                          add     bx,bx           ;
 35027                                          mov     di,[aoffBlockName+bx]
 35028                                          call    srch_block      ; THIS CANNOT FAIL!
 35029                                          mov     si,di           ;
 35030                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 35031                                          jmp     menu_found
 35032                                  
 35033                                  not_submenu:
 35034                                          add     bx,bx           ; get BX -> name of selected block
 35035                                          mov     bx,[aoffBlockName+bx]
 35036                                  
 35037                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 35038                                  ;   the offset relative to ES of the block name to be processed (along with
 35039                                  ;   all the "common" lines of course)
 35040                                  
 35041                                  no_selection:
 35042                                          mov     [offDefBlock],bx; save selection
 35043                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 35044                                          sub     si,si           ;
 35045                                          push    ds              ;
 35046                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 35047                                          sub     di,di           ;
 35048                                  
 35049                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 35050                                  ;
 35051                                  ;   Work our way through the config.sys image again, this time copying
 35052                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 35053                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 35054                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 35055                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 35056                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 35057                                  ;
 35058                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 35059                                  ;   stack we're running on, then we should check it inside copy_block
 35060                                  
 35061                                  copyblock_loop:
 35062                                          push    bx              ; save selected block name
 35063                                          call    copy_block      ; process (named or common) block
 35064                                          pop     bx              ;
 35065                                          jc	short move_config ; hit eof
 35066                                  
 35067                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 35068                                  
 35069                                  copyblock_begin:
 35070                                          push    ax              ;
 35071                                          push    cx              ;
 35072                                          push    si              ;
 35073                                          push    di              ; always do "common" blocks
 35074                                          mov     di,szCommon
 35075                                          push    ds              ;
 35076                                          push    cs              ;
 35077                                          pop     ds              ;
 35078                                          call    comp_names      ;
 35079                                          pop     ds              ;
 35080                                          pop     di              ;
 35081                                          pop     si              ;
 35082                                          pop     cx              ;
 35083                                          pop     ax              ;
 35084                                          je	short copyblock_check
 35085                                          or      bx,bx           ; is there a block name to check?
 35086                                          jz	short copyblock_skip ; no
 35087                                          push    di              ;
 35088                                          mov     di,bx           ; check block against given block name
 35089                                          push    ds              ;
 35090                                          push    es              ;
 35091                                          pop     ds              ;
 35092                                          call    comp_names      ; is this the block we really want to do?
 35093                                          pop     ds              ;
 35094                                          pop     di              ;
 35095                                  copyblock_check:
 35096                                          jc	short move_config ; hit eof
 35097                                          jne	short copyblock_skip  ;
 35098                                          call    skip_opt_line   ;
 35099                                          jmp	short copyblock_loop 
 35100                                  
 35101                                  copyblock_skip:                 ;
 35102                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 35103                                          call    get_char        ;
 35104                                          jc	short move_config ; hit eof
 35105                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35106                                          cmp     al,CONFIG_BEGIN ;
 35107                                          je	short copyblock_begin
 35108                                          jmp     short copyblock_skip ; anything else is just skipped
 35109                                  ;
 35110                                  ;   To create as little risk to the rest of SysInit as little as possible,
 35111                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 35112                                  ;   copy the new config.sys image to "confbot"
 35113                                  ;
 35114                                  move_config:
 35115                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 35116                                          push    cx              ;
 35117                                  ;
 35118                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 35119                                  ;   since the configuration name only currently exists in the "confbot" area
 35120                                  ;
 35121                                   	;mov	cx,7
 35122                                  	mov     cx,szMenu-szBoot-1
 35123                                          mov     si,szBoot	; first copy the CONFIG= part
 35124                                          inc     di              ; skip a byte, in case absolutely nothing
 35125                                                                  ; was copied to the workspace, because we always
 35126                                                                  ; zero the first byte of the workspace (below)
 35127                                  copy_boot: 
 35128                                  	;lods    byte ptr cs:[si];
 35129                                          cs
 35130                                  	lodsb
 35131                                  	mov     [di],al         ;
 35132                                          inc     di              ;
 35133                                          loop    copy_boot       ;
 35134                                  
 35135                                          push    es              ; then copy the configuration name
 35136                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 35137                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 35138                                          or      si,si           ; valid?
 35139                                          jnz	short l1	; yes
 35140                                          push    cs              ;
 35141                                          pop     es              ;
 35142                                          mov     si,szCommon
 35143                                  l1:     mov     al,[es:si]      ;
 35144                                          call    any_delim       ;
 35145                                          je	short l2	;
 35146                                          mov     [di],al         ;
 35147                                          inc     si              ;
 35148                                          inc     di              ;
 35149                                          loop    l1              ;
 35150                                  l2:     mov     byte [di],lf	; terminate the configuration string
 35151                                          pop     es              ;
 35152                                  
 35153                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 35154                                  
 35155                                          sub     di,di           ;
 35156                                          mov     [cs:config_envlen],di
 35157                                          sub     si,si           ;
 35158                                          pop     cx              ; recover the size of "config_wrkseg"
 35159                                  
 35160                                          push    cx              ;
 35161                                          rep     movsb           ; moved!
 35162                                          pop     cx              ;
 35163                                          mov     ax,ds           ;
 35164                                          pop     ds              ;
 35165                                  
 35166                                  ;   Now that the config_wrkseg is available once again, we shall
 35167                                  ;   use it to create an environment. The first thing to go in will be
 35168                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 35169                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 35170                                  ;   is empty.
 35171                                  
 35172                                          push    es              ;
 35173                                          mov     es,ax           ;
 35174                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 35175                                          mov     byte [es:0],0	;empty the environment block
 35176                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 35177                                          pop     es
 35178                                  
 35179                                  ;   Before returning, restore the default video page setting but do NOT
 35180                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 35181                                  ;   displayed on a different page, then it's because we don't want to see
 35182                                  ;   all the device driver/TSR goop (which goes to the default page)
 35183                                  
 35184                                  menu_done:
 35185                                          cmp     byte [bMenuPage],0
 35186                                          je	short menu_exit	;
 35187                                          push    es              ;
 35188                                          mov     ax,40h          ;
 35189                                          mov     es,ax           ;
 35190                                          mov     ax,[wCRTStart]  ;
 35191                                          mov     [es:004Eh],ax   ;
 35192                                          mov     al,[bCRTPage]   ;
 35193                                          mov     [es:0062h],al   ;
 35194                                          pop     es              ;
 35195                                  menu_exit:
 35196                                          mov     [count],cx      ; set new counts
 35197                                          mov     [org_count],cx  ;
 35198                                          sub     si,si           ; always return ES:SI pointing to config.sys
 35199                                          retn
 35200                                  
 35201                                  ;----------------------------------------------------------------------------
 35202                                  ;
 35203                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 35204                                  ;
 35205                                  ;   INPUT
 35206                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 35207                                  ;
 35208                                  ;   OUTPUT
 35209                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 35210                                  ;       carry set if error (eg, missing =); clear otherwise
 35211                                  ;
 35212                                  ;   OTHER REGS USED
 35213                                  ;       None
 35214                                  ;
 35215                                  ;   NOTES
 35216                                  ;       None
 35217                                  ;
 35218                                  ;   HISTORY
 35219                                  ;       Created 29-Mar-1992 by JeffPar
 35220                                  ;
 35221                                  ;----------------------------------------------------------------------------
 35222                                  
 35223                                  copy_envvar:
 35224                                          push    cx              ;
 35225                                          push    si              ;
 35226                                          push    ds              ;
 35227                                          push    es              ;
 35228                                          push    es              ;
 35229                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 35230                                          pop     ds                 ; DS:SI to point to envvar
 35231                                  
 35232                                  ;   Have to calculate the length of the variable name (and if we hit
 35233                                  ;   the end of the line before we hit '=', then it's curtains for this
 35234                                  ;   config.sys line)
 35235                                  ;
 35236                                  ;   The check for NULL is important because copy_envvar is also used to copy
 35237                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 35238                                  ;   menu block existed (in order to prevent the creation of an environment)
 35239                                  
 35240                                          sub     cx,cx           ;
 35241                                  copy_varlen:                    ;
 35242                                          lodsb                   ;
 35243                                          or      al,al           ; NULL?
 35244                                          stc                     ;
 35245                                          jz	short copy_envexit ; yes, abort
 35246                                          cmp     al,cr          ;
 35247                                          stc                     ;
 35248                                          je	short copy_envexit
 35249                                          cmp     al,lf          ;
 35250                                          stc                     ;
 35251                                          je	short copy_envexit
 35252                                          inc     cx              ;
 35253                                          cmp     al,'='          ;
 35254                                          jne	short copy_varlen
 35255                                          mov     al,0            ;
 35256                                          mov     ah,[si]         ; save char after '='
 35257                                          sub     si,cx           ; back up to given varname
 35258                                          dec     cx              ; CX == # of bytes in varname
 35259                                          sub     di,di           ; start looking for DS:SI at ES:0
 35260                                  copy_varsrch:
 35261                                          cmp     byte [es:di],al
 35262                                          je	short copy_envprep ; search failed, just copy var
 35263                                          mov     bx,di           ; ES:BX -> start of this varname
 35264                                          push    cx              ;
 35265                                          push    si              ;
 35266                                          repe    cmpsb           ;
 35267                                          pop     si              ;
 35268                                          pop     cx              ;
 35269                                          jne	short copy_varnext ; no match, skip to next varname
 35270                                          cmp     byte [es:di],'='
 35271                                          jne     short copy_varnext ; no match, there's more characters
 35272                                  
 35273                                  ;   Previous occurrence of variable has been found; determine the
 35274                                  ;   entire length and then destroy it
 35275                                  
 35276                                          mov     cx,-1           ;
 35277                                          repne   scasb           ; guaranteed to get null (since we put it there)
 35278                                          push    si              ;
 35279                                          mov     si,di           ;
 35280                                          mov     di,bx           ;
 35281                                          mov     cx,[cs:config_envlen]
 35282                                          sub     cx,si           ; destroy variable now
 35283                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 35284                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 35285                                  
 35286                                  	rep	; 0F3h
 35287                                  	es	; 26h
 35288                                  	movsb	; 0A4h
 35289                                  
 35290                                  	pop     si
 35291                                  copy_envprep:
 35292                                          cmp     ah,cr          ; if there is nothing after the '='
 35293                                          je	short copy_envdel ; then just exit with variable deleted
 35294                                          cmp     ah,lf           ;
 35295                                          je	short copy_envdel
 35296                                          jmp     short copy_envloop
 35297                                  
 35298                                  copy_varnext:                   ;
 35299                                          push    cx              ;
 35300                                          mov     cx,-1           ;
 35301                                          repne   scasb           ;
 35302                                          pop     cx              ;
 35303                                          jmp	short copy_varsrch
 35304                                  
 35305                                  copy_envloop:                   ;
 35306                                          lodsb                   ;
 35307                                          cmp     al,cr           ;
 35308                                          je	short copy_envdone
 35309                                          cmp     al,lf           ;
 35310                                          je	short copy_envdone
 35311                                          stosb                   ;
 35312                                          jmp     short copy_envloop
 35313                                  
 35314                                  copy_envdone:                   ;
 35315                                          sub     al,al           ; do SUB to clear carry as well
 35316                                          stosb                   ; always null-terminate these puppies
 35317                                  copy_envdel:                    ;
 35318                                          mov     [es:di],al      ; and stick another null to terminate the env.
 35319                                          mov     [cs:config_envlen],di
 35320                                  
 35321                                  copy_envexit:                   ;
 35322                                          pop     es              ;
 35323                                          pop     ds              ;
 35324                                          pop     si              ;
 35325                                          pop     cx              ;
 35326                                  
 35327                                  copy_done:	; 18/12/2022
 35328                                          retn
 35329                                  
 35330                                  ;----------------------------------------------------------------------------
 35331                                  ;
 35332                                  ;   copy_block:  copy the current block to the new config.sys workspace
 35333                                  ;
 35334                                  ;   INPUT
 35335                                  ;       CX == remaining bytes in "organized" config.sys memory image
 35336                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 35337                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 35338                                  ;             config.sys image) where the current block is to be copied
 35339                                  ;
 35340                                  ;   OUTPUT
 35341                                  ;       Same as above
 35342                                  ;       AL also equals the last character read from the organized image
 35343                                  ;
 35344                                  ;   OTHER REGS USED
 35345                                  ;       All
 35346                                  ;
 35347                                  ;   NOTES
 35348                                  ;       None
 35349                                  ;
 35350                                  ;   HISTORY
 35351                                  ;       Created 16-Mar-1992 by JeffPar
 35352                                  ;
 35353                                  ;----------------------------------------------------------------------------
 35354                                  
 35355                                  copy_block:
 35356                                          call    get_char        ; check for include
 35357                                          jc	short copy_done	;
 35358                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35359                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 35360                                          je	short copy_done ;
 35361                                  
 35362                                          cmp     al,CONFIG_INCLUDE ; 'J'
 35363                                          mov     al,ah           ; AL == the original line code
 35364                                          jne	short copy_line	; not an "include" line
 35365                                  
 35366                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 35367                                  ;   never try to include the block again (no infinite include loops please),
 35368                                  ;   then search for the named block and call copy_block again.
 35369                                  
 35370                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 35371                                          push    di              ;
 35372                                  
 35373                                          mov     di,szMenu
 35374                                          call    comp_names_safe ; don't allow INCLUDE MENU
 35375                                          je	short copy_skip	;
 35376                                  
 35377                                          mov     di,szCommon
 35378                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 35379                                          je	short copy_skip	;
 35380                                  
 35381                                          mov     di,si           ; try to find the block
 35382                                          call    srch_block      ;
 35383                                          mov     dx,di           ;
 35384                                          pop     di              ;
 35385                                          jne	short copy_error ; no such block
 35386                                          push    cx              ;
 35387                                          mov     cx,bx           ;
 35388                                          push    si              ;
 35389                                          dec     dx              ;
 35390                                          mov     si,dx           ;
 35391                                          call    skip_line       ; skip the rest of the "block name" line
 35392                                          call    copy_block      ; and copy in the rest of that block
 35393                                          pop     si              ;
 35394                                          pop     cx              ;
 35395                                          sub     al,al           ; force skip_opt_line to skip...
 35396                                          jmp     short copy_nextline
 35397                                  
 35398                                  copy_skip:
 35399                                          pop     di
 35400                                  copy_error:
 35401                                          clc                     ;
 35402                                          call    print_error     ; note that carry is clear, no pause
 35403                                          jmp     short copy_nextline
 35404                                  
 35405                                  ;   Copy the line at ES:SI to the current location at DS:DI
 35406                                  
 35407                                  copy_line:
 35408                                          mov     [di],al         ;
 35409                                          inc     di              ;
 35410                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 35411                                          jb	short copy_nextline ; no
 35412                                          cmp     byte [cs:config_multi],0
 35413                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 35414                                          call    get_linenum	; BX == line # of line @ES:SI
 35415                                          mov     [di],bx         ; stash it immediately following the line code
 35416                                          inc     di              ;
 35417                                          inc     di              ;
 35418                                          jmp     short copy_next ;
 35419                                  copy_loop:                      ;
 35420                                          call    get_char        ;
 35421                                          jc	short copy_done ; end of file
 35422                                          mov     [di],al         ;
 35423                                          inc     di              ;
 35424                                  copy_next:
 35425                                          cmp     al,lf ; 0Ah	; done with line?
 35426                                          jne	short copy_loop	; nope
 35427                                  
 35428                                  copy_nextline:
 35429                                          call    skip_opt_line   ;
 35430                                          jmp     short copy_block
 35431                                  
 35432                                  	; 18/12/2022
 35433                                  ;copy_done:
 35434                                          ;retn
 35435                                  
 35436                                  ;----------------------------------------------------------------------------
 35437                                  ;
 35438                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 35439                                  ;
 35440                                  ;   INPUT
 35441                                  ;    ES:SI -> some line in the config.sys memory image
 35442                                  ;
 35443                                  ;   OUTPUT
 35444                                  ;       BX == line # (relative to 1)
 35445                                  ;
 35446                                  ;   OTHER REGS USED
 35447                                  ;       DX
 35448                                  ;
 35449                                  ;   NOTES
 35450                                  ;       None
 35451                                  ;
 35452                                  ;   HISTORY
 35453                                  ;       Created 16-Mar-1992 by JeffPar
 35454                                  ;
 35455                                  ;----------------------------------------------------------------------------
 35456                                  
 35457                                  get_linenum:
 35458                                          push    ax              ;
 35459                                          sub     bx,bx           ; BX == line # (to be returned)
 35460                                          push    cx              ;
 35461                                          mov     dx,si           ; DX == the offset we're looking for
 35462                                          push    si              ;
 35463                                          mov     cx,[cs:count]   ;
 35464                                          sub     si,si           ; prepare to scan entire file
 35465                                  get_linenum_loop:               ;
 35466                                          call    skip_line       ;
 35467                                          jc	short get_linenum_done
 35468                                          inc     bx              ;
 35469                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 35470                                          jb	short get_linenum_loop ; no
 35471                                  get_linenum_done:               ;
 35472                                          pop     si              ;
 35473                                          pop     cx              ;
 35474                                          pop     ax              ;
 35475                                          retn
 35476                                  
 35477                                  ;----------------------------------------------------------------------------
 35478                                  ;
 35479                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 35480                                  ;
 35481                                  ;   INPUT
 35482                                  ;       ES -> config.sys image
 35483                                  ;    ES:DI -> block name to find
 35484                                  ;
 35485                                  ;   OUTPUT
 35486                                  ;       ZF flag set, if found
 35487                                  ;    ES:DI -> just past the name in the block heading, if found
 35488                                  ;       BX == # bytes remaining from that point, if found
 35489                                  ;
 35490                                  ;   OTHER REGS USED
 35491                                  ;       None
 35492                                  ;
 35493                                  ;   NOTES
 35494                                  ;       This differs from "find_block" in that it searches the ENTIRE
 35495                                  ;       config.sys image, not merely the remaining portion, and that it
 35496                                  ;       takes a pointer to block name that is *elsewhere* in the image
 35497                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 35498                                  ;
 35499                                  ;   HISTORY
 35500                                  ;       Created 16-Mar-1992 by JeffPar
 35501                                  ;
 35502                                  ;----------------------------------------------------------------------------
 35503                                  
 35504                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 35505                                          push    ax              ;
 35506                                          push    cx              ;
 35507                                          mov     cx,[cs:count]   ;
 35508                                          push    si              ;
 35509                                          sub     si,si           ;
 35510                                          push    ds              ;
 35511                                          push    es              ;
 35512                                          pop     ds              ;
 35513                                          call    find_block      ;
 35514                                          mov     di,si           ;
 35515                                          mov     bx,cx           ;
 35516                                          pop     ds              ;
 35517                                          pop     si              ;
 35518                                          pop     cx              ;
 35519                                          pop     ax              ;
 35520                                  find_exit: ; 16/04/2019
 35521                                          retn			;
 35522                                  
 35523                                  ;----------------------------------------------------------------------------
 35524                                  ;
 35525                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 35526                                  ;
 35527                                  ;   INPUT
 35528                                  ;    DS:DI -> block name to find
 35529                                  ;    ES:SI -> remainder of config.sys image
 35530                                  ;       CX == remaining size of config.sys image
 35531                                  ;
 35532                                  ;   OUTPUT
 35533                                  ;       ZF flag set, if found (also, CF set if EOF)
 35534                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 35535                                  ;       CX == # bytes remaining from that point
 35536                                  ;
 35537                                  ;   OTHER REGS USED
 35538                                  ;       AX
 35539                                  ;
 35540                                  ;   NOTES
 35541                                  ;       This differs from "srch_block" in that it searches only the
 35542                                  ;       remaining portion of the config.sys image and leaves SI and CX
 35543                                  ;       pointing to where the search left off, and that it takes a pointer
 35544                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 35545                                  ;
 35546                                  ;   HISTORY
 35547                                  ;       Created 16-Mar-1992 by JeffPar
 35548                                  ;
 35549                                  ;----------------------------------------------------------------------------
 35550                                  
 35551                                  find_block:
 35552                                          call    get_char        ; get line code
 35553                                          jc	short find_exit	; end of file
 35554                                          and     al,~CONFIG_OPTION_QUERY
 35555                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 35556                                          je	short check_line ; no
 35557                                          cmp     al,CONFIG_INCLUDE
 35558                                          jne	short next_line	;
 35559                                          or	byte [cs:config_multi],1
 35560                                          jmp     short next_line ;
 35561                                  check_line:
 35562                                          or      byte [cs:config_multi],1
 35563                                          call    comp_names      ; compare block names
 35564                                          jbe	short find_exit	; end of file, or names matched
 35565                                  next_line:
 35566                                          call    skip_opt_line   ; no, so skip to next line
 35567                                          jmp	short find_block  ;
 35568                                  ;find_exit:
 35569                                  ;	retn
 35570                                  
 35571                                  ;----------------------------------------------------------------------------
 35572                                  ;
 35573                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 35574                                  ;
 35575                                  ;   INPUT
 35576                                  ;    DS:DI -> keyword to compare
 35577                                  ;    ES:SI -> position in config.sys
 35578                                  ;       CX == remaining bytes in config.sys
 35579                                  ;
 35580                                  ;   OUTPUT
 35581                                  ;       ZF flag set, if match (also, CF set if EOF)
 35582                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 35583                                  ;       CX == # bytes remaining from that point
 35584                                  ;
 35585                                  ;   OTHER REGS USED
 35586                                  ;       AX
 35587                                  ;
 35588                                  ;   NOTES
 35589                                  ;       None
 35590                                  ;
 35591                                  ;   HISTORY
 35592                                  ;       Created 16-Mar-1992 by JeffPar
 35593                                  ;
 35594                                  ;----------------------------------------------------------------------------
 35595                                  
 35596                                  comp_names:
 35597                                          push    di              ;
 35598                                  comp_loop:                      ;
 35599                                          call    get_char        ;
 35600                                          jc	short comp_exit	;
 35601                                          call    any_delim       ; is next character a delimiter?
 35602                                          mov     ah,[di]         ; (get next character we're supposed to match)
 35603                                          je	short comp_almost ; yes, it *could* be a match
 35604                                          inc     di              ;
 35605                                          and     ax,~2020h ; 0DFDFh 
 35606                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 35607                                          cmp     al,ah           ; match?
 35608                                          je	short comp_loop ; yes, keep looking at the characters
 35609                                          clc                     ; prevent erroneous eof indication: clear carry
 35610                                  comp_exit:                      ;
 35611                                          pop     di              ;
 35612                                          retn			;
 35613                                  comp_almost:                    ;
 35614                                          xchg    al,ah           ; we don't know for sure if it's a match
 35615                                          call    any_delim       ; until we verify that the second string has
 35616                                          xchg    al,ah           ; been exhausted also...
 35617                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 35618                                  
 35619                                  ;----------------------------------------------------------------------------
 35620                                  
 35621                                  comp_names_safe:
 35622                                          push    ax
 35623                                          push    cx
 35624                                          push	si
 35625                                          push    ds
 35626                                          push    cs
 35627                                          pop     ds
 35628                                          call    comp_names
 35629                                          pop     ds
 35630                                  	pop	si
 35631                                          pop     cx
 35632                                          pop     ax
 35633                                          retn
 35634                                  
 35635                                  ;----------------------------------------------------------------------------
 35636                                  ;
 35637                                  ;   print_item:  display menu item #BL
 35638                                  ;
 35639                                  ;   INPUT
 35640                                  ;       BL == menu item # to display
 35641                                  ;
 35642                                  ;   OUTPUT
 35643                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 35644                                  ;
 35645                                  ;   OTHER REGS USED
 35646                                  ;       None
 35647                                  ;
 35648                                  ;   NOTES
 35649                                  ;       This function saves/restores the current cursor position, so you
 35650                                  ;       needn't worry about it.
 35651                                  ;
 35652                                  ;   HISTORY
 35653                                  ;       Created 16-Mar-1992 by JeffPar
 35654                                  ;
 35655                                  ;----------------------------------------------------------------------------
 35656                                  
 35657                                  print_item:		; prints menu item #BL (1 to N)
 35658                                          push    ax              ;
 35659                                          push    bx              ;
 35660                                          push    cx              ;
 35661                                          push    dx              ;
 35662                                          push    si              ;
 35663                                          mov     ah,03h          ; get cursor position
 35664                                          mov     bh,[bMenuPage]  ; always page zero
 35665                                          int     10h             ; DH/DL = row/column
 35666                                          push    dx              ; save it
 35667                                          mov     ah,02h          ; set cursor position
 35668                                          mov     dh,bl           ;
 35669                                          add     dh,3            ;
 35670                                          mov     dl,5            ;
 35671                                          int     10h             ; set cursor position for correct row/col
 35672                                          mov     al,bl           ;
 35673                                          add     al,'0'          ; convert menu item # to ASCII digit
 35674                                          mov     ah,[bMenuColor] ; normal attribute
 35675                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 35676                                          jne	short print_other ; no
 35677                                          or      ah,70h          ; yes, set bgnd color to white
 35678                                          mov     ch,ah           ;
 35679                                          mov     cl,4            ;
 35680                                          rol     ch,cl           ;
 35681                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 35682                                          jne	short print_other ; no
 35683                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 35684                                  print_other:                    ;
 35685                                          mov     bh,0            ;
 35686                                          add     bx,bx           ;
 35687                                          mov     di,[aoffBlockDesc+bx]
 35688                                          mov     bl,ah           ; put the attribute in the correct register now
 35689                                          mov     bh,[bMenuPage]  ; get correct video page #
 35690                                          mov     ah,09h          ; write char/attr
 35691                                          mov     cx,1            ;
 35692                                          int     10h             ;
 35693                                          inc     dl              ; increment column
 35694                                          mov     ah,02h          ;
 35695                                          int     10h             ;
 35696                                          ;mov	ax,0900h+'.'    ;
 35697                                          mov	ax,092Eh
 35698                                  	int     10h             ; display '.'
 35699                                          inc     dl              ; increment column
 35700                                          mov     ah,02h          ;
 35701                                          int     10h             ;
 35702                                          ;mov	ax,0900h+' '    ;
 35703                                          mov	ax,0920h
 35704                                  	int     10h             ; display ' '
 35705                                          inc     dl              ; increment column
 35706                                          mov     ah,02h          ;
 35707                                          int     10h             ;
 35708                                          push    es              ;
 35709                                  print_loop:                     ;
 35710                                          mov     al,[es:di]	; get a character of the description
 35711                                          inc     di              ;
 35712                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 35713                                          jne	short print_nontab ;
 35714                                          mov     al,' '          ;
 35715                                  print_nontab:                   ;
 35716                                          cmp     al,' '          ;
 35717                                          jb	short print_done ; stop at the 1st character < space
 35718                                          cmp     al,'$'          ;
 35719                                          je	short print_done ; also stop on $
 35720                                          mov     ah,09h          ; display function #
 35721                                          int     10h             ;
 35722                                          inc     dl              ; increment column
 35723                                          cmp     dl,78           ; far enough?
 35724                                          jae	short print_done ; yes
 35725                                          mov     ah,02h          ;
 35726                                          int     10h             ;
 35727                                          jmp     print_loop      ;
 35728                                  print_done:                     ;
 35729                                          pop     es              ;
 35730                                          pop     dx              ;
 35731                                          mov     ah,02h          ;
 35732                                          int     10h             ; restore previous row/col
 35733                                          pop     si              ;
 35734                                          pop     dx              ;
 35735                                          pop     cx              ;
 35736                                          pop     bx              ;
 35737                                          pop     ax              ;
 35738                                          retn			;
 35739                                  
 35740                                  ;----------------------------------------------------------------------------
 35741                                  ;
 35742                                  ;   select_item:  wait for user to select menu item, with time-out
 35743                                  ;
 35744                                  ;   INPUT
 35745                                  ;       None
 35746                                  ;
 35747                                  ;   OUTPUT
 35748                                  ;       BX == menu item # (1-N), or -1 for clean boot
 35749                                  ;       Selected menu item highlighted
 35750                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 35751                                  ;
 35752                                  ;   OTHER REGS USED
 35753                                  ;       None
 35754                                  ;
 35755                                  ;   NOTES
 35756                                  ;       None
 35757                                  ;
 35758                                  ;   HISTORY
 35759                                  ;       Created 16-Mar-1992 by JeffPar
 35760                                  ;
 35761                                  ;----------------------------------------------------------------------------
 35762                                  
 35763                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 35764                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 35765                                          mov     al,bl           ;
 35766                                          call    disp_num        ;
 35767                                          call    show_status     ; display current interactive status
 35768                                          cmp     byte [secTimeOut],-1
 35769                                          je	short input_key	; no time-out, just go to input
 35770                                          mov     ah,GET_TIME ; 2Ch
 35771                                          int     21h             ;
 35772                                          mov     bh,dh           ; BH = initial # of seconds
 35773                                  check_time:
 35774                                          mov     al,[secTimeOut] ;
 35775                                          sub     al,[secElapsed] ;
 35776                                          jae	short show_time	;
 35777                                          or      byte [bQueryOpt],2  ; disable all further prompting
 35778                                          mov     byte [secElapsed],0
 35779                                          jmp	select_done	; time's up!
 35780                                  show_time:
 35781                                          push    bx              ;
 35782                                          mov     bl,al           ; save # in BL
 35783                                          mov     bh,[bMenuPage]  ;
 35784                                          mov     ah,03h          ; get cursor position
 35785                                          int     10h             ;
 35786                                          push    dx              ;
 35787                                  	add	dl,8		; move cursor to the right
 35788                                          mov     ah,02h          ; set cursor position
 35789                                          int     10h             ;
 35790                                          mov     dx,_$TimeOut
 35791                                          call    print           ; print the "Time remaining: " prompt
 35792                                          mov     al,bl           ; recover # from BL
 35793                                          cbw                     ; this works because AL is always <= 90
 35794                                          mov     cl,10           ;
 35795                                          div     cl              ; AL = tens digit, AH = ones digit
 35796                                          mov     cl,ah           ;
 35797                                          add     al,'0'          ;
 35798                                          mov     ah,0Eh          ;
 35799                                          int     10h             ; write TTY tens digit
 35800                                          mov     al,cl           ;
 35801                                          add     al,'0'          ;
 35802                                          mov     ah,0Eh          ;
 35803                                          int     10h             ; write TTY ones digit
 35804                                          pop     dx
 35805                                          mov     ah,02h          ; set cursor position back to where it was
 35806                                          int     10h             ;
 35807                                          pop     bx              ;
 35808                                  input_key:
 35809                                          mov     ah,RAW_CON_IO ; 6
 35810                                          mov     dl,0FFh         ; input request
 35811                                          int     21h             ;
 35812                                          jnz	short got_key	;
 35813                                          cmp     byte [secTimeOut],-1; is there a time-out?
 35814                                          je	short input_key	; no, just go back to input
 35815                                          mov     ah,GET_TIME     ;
 35816                                          int     21h             ; DH = seconds
 35817                                          mov     ah,dh           ;
 35818                                          sub     dh,bh           ; should generally be zero or one
 35819                                          mov     bh,ah           ;
 35820                                          jnc	short got_time	;
 35821                                          mov     dh,1            ; it wrapped back to zero, so assume one
 35822                                  got_time:
 35823                                          or      dh,dh           ; any change?
 35824                                          jz	short input_key	; no
 35825                                          add     [secElapsed],dh ;
 35826                                          jmp	short check_time ;
 35827                                  got_key:
 35828                                          push    ax              ;
 35829                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 35830                                          xchg    [secTimeOut],ax
 35831                                          cmp     al,-1           ; was time-out already disabled?
 35832                                          je	short timeout_disabled ; yes
 35833                                          push    bx              ; let's disable # seconds display
 35834                                          mov     ax,0A20h        ; write multiple spaces
 35835                                          mov     bx,[bMenuColor]
 35836                                          mov     cx,80           ; 80 of them, to be safe
 35837                                          int     10h             ; to completely obliterate # seconds display
 35838                                          pop     bx   		;
 35839                                  
 35840                                  timeout_disabled:
 35841                                          pop     ax              ;
 35842                                          or      al,al           ; extended key pressed?
 35843                                          jnz	short normal_key ; no
 35844                                          int     21h             ; get the next part of the key then
 35845                                          jz	short input_key	; hmmm, what happened to the second part?
 35846                                  
 35847                                          cmp     al,48h          ; up arrow?
 35848                                          jne	short not_up	; no
 35849                                          cmp     bl,1            ; are we as up as up can get?
 35850                                          jbe	short input_key	; yes, ignore it
 35851                                          dec     byte [bDefBlock] ;
 35852                                          call    print_item      ; re-print the current item
 35853                                          dec     bl              ; and then print the new current item
 35854                                          jmp     short print1
 35855                                  not_up:
 35856                                          cmp     al,50h          ; down arrow?
 35857                                          jne	short not_down	; no
 35858                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 35859                                          jae	short to_input_key ; yes, ignore it
 35860                                          inc     byte [bDefBlock] ;
 35861                                          call    print_item      ; re-print the current item
 35862                                          inc     bx              ; and then print the new current item
 35863                                  print1: 
 35864                                  	mov     al,bl           ;
 35865                                  print2: 
 35866                                  	call    print_item      ;
 35867                                          call    disp_num        ;
 35868                                  to_input_key:
 35869                                          jmp     input_key       ;
 35870                                  not_down:
 35871                                          test    byte [bDisableUI],1
 35872                                          jnz	short to_input_key ; don't allow F8 or F5
 35873                                          cmp     al,42h          ; F8 function key?
 35874                                          jne	short not_f8	; no
 35875                                          xor     byte [bQueryOpt],1
 35876                                          call    show_status     ;
 35877                                          jmp     input_key	;
 35878                                  not_f8:
 35879                                          cmp     al,3Fh          ; F5 function key?
 35880                                          jne	short to_input_key ; no
 35881                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 35882                                          mov     al,' '          ; don't want to display anything really;
 35883                                          jmp     short disp_input; just want to display the cr/lf sequence...
 35884                                  
 35885                                  normal_key:
 35886                                          cmp     al,0Dh          ; Enter?
 35887                                          je	short select_done ; yes
 35888                                          cmp     al,08h          ; backspace?
 35889                                          jne	short not_backspace ; no
 35890                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 35891                                          retn			;
 35892                                  not_backspace:
 35893                                          sub     al,'0'          ; is greater than '0'?
 35894                                          jbe	short to_input_key ; no
 35895                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 35896                                          ja	short to_input_key ; no
 35897                                          mov	[bDefBlock],al  ;
 35898                                          call    print_item      ; redisplay the current selection
 35899                                          mov     bl,al           ; set new selection
 35900                                          jmp	short print2
 35901                                  
 35902                                  select_done:
 35903                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 35904                                          mov     al,bl           ;
 35905                                          add     al,'0'          ; convert it into a digit, then display it
 35906                                  
 35907                                  	; fall into disp_input
 35908                                  
 35909                                  ; 16/04/2019 - Retro DOS v4.0
 35910                                  
 35911                                  ;----------------------------------------------------------------------------
 35912                                  ;
 35913                                  ;   disp_input:  display a single character + cr/lf
 35914                                  ;
 35915                                  ;   INPUT
 35916                                  ;       AL == character to display
 35917                                  ;
 35918                                  ;   OUTPUT
 35919                                  ;       None
 35920                                  ;
 35921                                  ;   OTHER REGS USED
 35922                                  ;       None
 35923                                  ;
 35924                                  ;   NOTES
 35925                                  ;       This function is used not only for the menu input selection but
 35926                                  ;       also for the interactive line prompting (the y/n/a thing).
 35927                                  ;
 35928                                  ;   HISTORY
 35929                                  ;       Created 16-Mar-1992 by JeffPar
 35930                                  ;
 35931                                  ;----------------------------------------------------------------------------
 35932                                  
 35933                                  disp_input:
 35934                                          push    ax
 35935                                          cmp     al,' '
 35936                                          jae	short disp_ok
 35937                                          mov     al,' '
 35938                                  disp_ok:
 35939                                          mov     dl,al
 35940                                          mov     ah,STD_CON_OUTPUT ; 2
 35941                                          int     21h
 35942                                          mov     dx,crlfm
 35943                                          call    print
 35944                                          pop     ax
 35945                                          retn
 35946                                  
 35947                                  ;----------------------------------------------------------------------------
 35948                                  
 35949                                  disp_num:
 35950                                          push    bx
 35951                                          add     al,'0'
 35952                                          mov     ah,0Ah
 35953                                          mov     bx,[bMenuColor]
 35954                                          mov     cx,1
 35955                                          int     10h
 35956                                          pop     bx
 35957                                          retn
 35958                                  
 35959                                  ;----------------------------------------------------------------------------
 35960                                  ;
 35961                                  ;   show_status:  display current interactive mode setting (on/off/none)
 35962                                  ;
 35963                                  ;   INPUT
 35964                                  ;       None
 35965                                  ;
 35966                                  ;   OUTPUT
 35967                                  ;       None
 35968                                  ;
 35969                                  ;   OTHER REGS USED
 35970                                  ;       None
 35971                                  ;
 35972                                  ;   NOTES
 35973                                  ;       None
 35974                                  ;
 35975                                  ;   HISTORY
 35976                                  ;       Created 16-Mar-1992 by JeffPar
 35977                                  ;
 35978                                  ;----------------------------------------------------------------------------
 35979                                  
 35980                                  show_status:
 35981                                          push    bx              ; BL = video page #
 35982                                          mov     bx,[bMenuColor]
 35983                                          mov     ah,03h          ; get cursor position
 35984                                          int     10h             ;
 35985                                          push    dx              ; save it
 35986                                          mov     ah,02h          ; set cursor position
 35987                                          mov     dx,[bLastCol]   ; set correct row/col
 35988                                          test    byte [bDisableUI],1
 35989                                          jz	short show_onoff ; just show on/off
 35990                                          mov     dl,0            ;
 35991                                          int     10h             ;
 35992                                          mov     ax,0A20h        ; write multiple spaces
 35993                                          mov     cx,80           ; 80 of them, to be exact
 35994                                          int     10h             ; to obliterate the status line
 35995                                          jmp     short show_done ;
 35996                                  show_onoff: 
 35997                                          int     10h
 35998                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 35999                                  		; AL = character, BH = display page - alpha mode
 36000                                  		; BL = color of character (graphics mode, PCjr only)
 36001                                  		; CX = number of times to write character
 36002                                  
 36003                                          mov     al,[_$NO]	; assume OFF
 36004                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 36005                                          jne	short show_noton ; no
 36006                                          mov     al,[_$YES]	; yes
 36007                                  show_noton:                     ;
 36008                                          mov     ah,0Eh          ; write TTY
 36009                                          int     10h             ;
 36010                                  show_done:                      ;
 36011                                          pop     dx              ;
 36012                                          mov     ah,02h          ;
 36013                                          int     10h             ; restore original cursor position
 36014                                          pop     bx              ;
 36015                                          retn			;
 36016                                  
 36017                                  ; 16/04/2019 - Retro DOS v4.0
 36018                                  
 36019                                  ;----------------------------------------------------------------------------
 36020                                  ;
 36021                                  ;   skip_token: advances ES:SI/CX past the current token
 36022                                  ;
 36023                                  ;   INPUT
 36024                                  ;    ES:SI -> position in config.sys
 36025                                  ;       CX == remaining bytes in config.sys
 36026                                  ;
 36027                                  ;   OUTPUT
 36028                                  ;       CF set if EOL/EOF hit
 36029                                  ;       AL == 1st char of delimiter
 36030                                  ;    ES:SI -> just past the delimiter
 36031                                  ;       CX == # bytes remaining from that point
 36032                                  ;
 36033                                  ;   OTHER REGS USED
 36034                                  ;       AX
 36035                                  ;
 36036                                  ;   NOTES
 36037                                  ;       None
 36038                                  ;
 36039                                  ;   HISTORY
 36040                                  ;       Created 16-Mar-1992 by JeffPar
 36041                                  ;
 36042                                  ;----------------------------------------------------------------------------
 36043                                  
 36044                                  skip_token:
 36045                                          call    get_char
 36046                                          jc	short skip_token_done
 36047                                          call    any_delim
 36048                                          jne	short skip_token
 36049                                  skip_check_eol:
 36050                                          cmp     al,cr ; 0Dh
 36051                                          je	short skip_token_eol
 36052                                          cmp     al,lf ; 0Ah
 36053                                          je	short skip_token_eol
 36054                                          clc
 36055                                          ;jmp	short skip_token_done
 36056                                  	retn
 36057                                  skip_token_eol:
 36058                                          stc
 36059                                  skip_token_done:
 36060                                          retn
 36061                                  
 36062                                  ;----------------------------------------------------------------------------
 36063                                  ;
 36064                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 36065                                  ;
 36066                                  ;   INPUT
 36067                                  ;    ES:SI -> position in config.sys
 36068                                  ;       CX == remaining bytes in config.sys
 36069                                  ;
 36070                                  ;   OUTPUT
 36071                                  ;       CF set if EOF hit
 36072                                  ;       AL == 1st char of token
 36073                                  ;    ES:SI -> just past the token
 36074                                  ;       CX == # bytes remaining from that point
 36075                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 36076                                  ;
 36077                                  ;   OTHER REGS USED
 36078                                  ;       AX
 36079                                  ;
 36080                                  ;   NOTES
 36081                                  ;       None
 36082                                  ;
 36083                                  ;   HISTORY
 36084                                  ;       Created 16-Mar-1992 by JeffPar
 36085                                  ;
 36086                                  ;----------------------------------------------------------------------------
 36087                                  
 36088                                  skip_delim:       ; returns carry set if eol/eof
 36089                                          call    get_char        ;
 36090                                          lea     bx,[si-1]       ; also returns BX -> next token
 36091                                          jc	short skip_token_done ;
 36092                                          call    delim           ;
 36093                                          je	short skip_delim ;
 36094                                          jmp	short skip_check_eol  ; 13/05/2019
 36095                                  
 36096                                  ;----------------------------------------------------------------------------
 36097                                  ;
 36098                                  ;   skip_opt_line: same as skip_line provided AL != LF
 36099                                  ;
 36100                                  ;   INPUT
 36101                                  ;       AL == last character read
 36102                                  ;    ES:SI -> position in config.sys
 36103                                  ;       CX == remaining bytes in config.sys
 36104                                  ;
 36105                                  ;   OUTPUT
 36106                                  ;       CF set if EOF hit
 36107                                  ;       AL == 1st char of new line
 36108                                  ;    ES:SI -> just past 1st char of new line
 36109                                  ;       CX == # bytes remaining from that point
 36110                                  ;
 36111                                  ;   OTHER REGS USED
 36112                                  ;       AX
 36113                                  ;
 36114                                  ;   NOTES
 36115                                  ;       In other words, the purpose here is to skip to the next line,
 36116                                  ;       unless ES:SI is already sitting at the front of the next line (which
 36117                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 36118                                  ;
 36119                                  ;   HISTORY
 36120                                  ;       Created 16-Mar-1992 by JeffPar
 36121                                  ;
 36122                                  ;----------------------------------------------------------------------------
 36123                                  
 36124                                  skip_opt_line:
 36125                                          cmp     al,lf ; 0Ah
 36126                                          je	short skip_line_done
 36127                                       
 36128                                  	; fall into skip_line
 36129                                  
 36130                                  ;----------------------------------------------------------------------------
 36131                                  ;
 36132                                  ;   skip_line: skip to the next line
 36133                                  ;
 36134                                  ;   INPUT
 36135                                  ;    ES:SI -> position in config.sys
 36136                                  ;       CX == remaining bytes in config.sys
 36137                                  ;
 36138                                  ;   OUTPUT
 36139                                  ;       CF set if EOF hit
 36140                                  ;    ES:SI -> just past 1st char of new line
 36141                                  ;       CX == # bytes remaining from that point
 36142                                  ;
 36143                                  ;   OTHER REGS USED
 36144                                  ;       AX
 36145                                  ;
 36146                                  ;   NOTES
 36147                                  ;       None
 36148                                  ;
 36149                                  ;   HISTORY
 36150                                  ;       Created 16-Mar-1992 by JeffPar
 36151                                  ;
 36152                                  ;----------------------------------------------------------------------------
 36153                                  
 36154                                  skip_line:
 36155                                          call    get_char
 36156                                          jc	short skip_line_done
 36157                                          cmp     al,lf ; 0Ah
 36158                                          jne	short skip_line
 36159                                  skip_line_done:
 36160                                  num_done:	; 18/12/2022
 36161                                          retn
 36162                                  
 36163                                  ;----------------------------------------------------------------------------
 36164                                  ;
 36165                                  ;   get_number: return binary equivalent of numeric string
 36166                                  ;
 36167                                  ;   INPUT
 36168                                  ;    ES:SI -> position in config.sys
 36169                                  ;       CX == remaining bytes in config.sys
 36170                                  ;
 36171                                  ;   OUTPUT
 36172                                  ;       AL == non-digit encountered
 36173                                  ;       BX == binary #
 36174                                  ;    ES:SI -> just past 1st non-digit
 36175                                  ;       CX == # bytes remaining from that point
 36176                                  ;
 36177                                  ;   OTHER REGS USED
 36178                                  ;       AX
 36179                                  ;
 36180                                  ;   NOTES
 36181                                  ;       None
 36182                                  ;
 36183                                  ;   HISTORY
 36184                                  ;       Created 16-Mar-1992 by JeffPar
 36185                                  ;
 36186                                  ;----------------------------------------------------------------------------
 36187                                  
 36188                                  ; 13/05/2019
 36189                                  
 36190                                  get_number:
 36191                                          sub     bx,bx           ; BX = result
 36192                                  num_loop:
 36193                                          call    get_char        ;
 36194                                          jc	short num_done	;
 36195                                          cmp     al,'0'          ; convert to value
 36196                                          jb	short num_done	; no more number
 36197                                          cmp     al,'9'          ;
 36198                                          ja	short num_done	;
 36199                                          push    ax              ;
 36200                                          mov     ax,10           ;
 36201                                          push    dx              ;
 36202                                          mul     bx              ;
 36203                                          pop     dx              ;
 36204                                          mov     bx,ax           ;
 36205                                          pop     ax              ;
 36206                                          sub     al,'0'          ;
 36207                                          cbw                     ;
 36208                                          add     bx,ax           ;
 36209                                          jmp	short num_loop	;
 36210                                  
 36211                                  	; 18/12/2022
 36212                                  ;num_done:
 36213                                          ;retn
 36214                                  
 36215                                  ;----------------------------------------------------------------------------
 36216                                  ;
 36217                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 36218                                  ;
 36219                                  ;   INPUT
 36220                                  ;    ES:SI -> position in config.sys
 36221                                  ;       CX == remaining bytes in config.sys
 36222                                  ;
 36223                                  ;   OUTPUT
 36224                                  ;       AL == next character
 36225                                  ;    ES:SI -> just past next character
 36226                                  ;       CX == # bytes remaining from that point
 36227                                  ;
 36228                                  ;   OTHER REGS USED
 36229                                  ;       AX
 36230                                  ;
 36231                                  ;   NOTES
 36232                                  ;       None
 36233                                  ;
 36234                                  ;   HISTORY
 36235                                  ;       Created 16-Mar-1992 by JeffPar
 36236                                  ;
 36237                                  ;----------------------------------------------------------------------------
 36238                                  
 36239                                  get_char:
 36240                                          sub     cx,1            ; use SUB to set carry,zero
 36241                                          jb	short get_fail	; out of data
 36242                                          ;lods	byte ptr es:[si] ;
 36243                                  	es	
 36244                                  	lodsb
 36245                                          mov     ah,al           ;
 36246                                          retn			;
 36247                                  get_fail:                       ; restore CX to zero
 36248                                          mov     cx,0            ; leave carry set, zero not set
 36249                                  nearby_ret:
 36250                                          retn
 36251                                  
 36252                                  ;----------------------------------------------------------------------------
 36253                                  ;
 36254                                  ;   query_user: ask user whether to execute current config.sys command
 36255                                  ;
 36256                                  ;   INPUT
 36257                                  ;       AL == current command code
 36258                                  ;    ES:SI -> current command line in config.sys
 36259                                  ;    config_cmd == current command code, but with QUERY bit intact
 36260                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 36261                                  ;
 36262                                  ;   OUTPUT
 36263                                  ;       CF set if command should be ignored (it is also REM'ed out)
 36264                                  ;
 36265                                  ;   OTHER REGS USED
 36266                                  ;       BX, CX, DX, DI
 36267                                  ;
 36268                                  ;   NOTES
 36269                                  ;       None
 36270                                  ;
 36271                                  ;   HISTORY
 36272                                  ;       Created 16-Mar-1992 by JeffPar
 36273                                  ;
 36274                                  ;----------------------------------------------------------------------------
 36275                                  
 36276                                  	; 12/12/2022
 36277                                  query_user:
 36278                                          test    byte [bQueryOpt],4	; answer no to everything?
 36279                                          ;jz	short qu_1		;
 36280                                          ; 12/12/2022
 36281                                  	;jmp	short skip_all		;
 36282                                  	jnz	short skip_all
 36283                                  qu_1:
 36284                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 36285                                          jnz	short nearby_ret	; yes (and return carry clear!)
 36286                                          push    ax                      ;
 36287                                          mov     al,[config_cmd]         ;
 36288                                          test    byte [bQueryOpt],1	; query every command?
 36289                                          jnz	short query_all		; yes
 36290                                          test    al,CONFIG_OPTION_QUERY  ;
 36291                                          ;jnz	short query_all		;
 36292                                          ; 12/12/2022
 36293                                  	;jmp	short do_cmd		;
 36294                                  	jz	short do_cmd ; cf=0
 36295                                  query_all:
 36296                                  
 36297                                  ;   Search for the command code (AL) in "comtab", and then print
 36298                                  ;   out the corresponding keyword, followed by the rest of the actual
 36299                                  ;   line pointed to by ES:SI
 36300                                  
 36301                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 36302                                          mov     dx,_$AutoPrmpt    	;
 36303                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 36304                                          jz	short generic_prompt	; config_cmd must have been 0
 36305                                  
 36306                                          mov     dh,al                   ; save config_cmd in DH
 36307                                          sub     bx,bx                   ;
 36308                                          mov     di,comtab		;
 36309                                  find_match:                             ;
 36310                                          mov     bl,[di]                 ; get size of current keyword
 36311                                          or      bl,bl                   ;
 36312                                          jz	short line_print	; end of table
 36313                                          inc     di                      ;
 36314                                          cmp     al,[di+bx]              ; match?
 36315                                          je	short cmd_match		; yes
 36316                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 36317                                  	; 13/05/2019	
 36318                                          jmp	short find_match	; loop
 36319                                  cmd_match:                              ;
 36320                                          mov     cl,[di-1]               ;
 36321                                          mov     ch,0                    ;
 36322                                          mov     ah,STD_CON_OUTPUT ; 2
 36323                                  cmd_print:                              ;
 36324                                          mov     al,[di]                 ;
 36325                                          inc     di                      ;
 36326                                          mov     dl,al                   ;
 36327                                          int     21h                     ;
 36328                                          loop    cmd_print               ;
 36329                                          mov     dl,'='                  ;
 36330                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 36331                                          jne	short cmd_notset	;
 36332                                          mov     dl,' '                  ;
 36333                                  cmd_notset:
 36334                                          int     21h                     ; '=' looks funny on SET commands
 36335                                  line_print:                             ;
 36336                                  	;lods	byte ptr es:[si]        ;
 36337                                          es
 36338                                  	lodsb
 36339                                  	or      al,al                   ;
 36340                                          jnz	short non_null		;
 36341                                          mov     al,' '                  ;
 36342                                  non_null:                               ;
 36343                                          cmp     al,' '                  ; control code?
 36344                                          jb	short prompt_user	; yes, assume end of line
 36345                                          jne	short non_space		;
 36346                                          cmp     byte [es:si],' '	;
 36347                                          jb	short prompt_user	;
 36348                                  non_space:                              ;
 36349                                          mov     dl,al                   ;
 36350                                          mov     ah,STD_CON_OUTPUT ; 2	;
 36351                                          int     21h                     ;
 36352                                          jmp	short line_print	;
 36353                                  prompt_user:                            ;
 36354                                          mov     dx,_$InterPrmpt		;
 36355                                  
 36356                                  generic_prompt:
 36357                                          call    print                   ;
 36358                                  input_loop:                             ;
 36359                                          mov     ah,0                    ; read a key
 36360                                          int     16h                     ;
 36361                                          or      al,al                   ; is it a function key?
 36362                                          jnz	short not_func		; no
 36363                                          cmp     ah,3Fh                  ; F5 function key?
 36364                                          jne	short input_loop	; no
 36365                                          mov     al,[_$NO]                  ;
 36366                                          or      byte [bQueryOpt],4	; no more queries
 36367                                          jmp     short legal_char        ;
 36368                                  not_func:
 36369                                          and     al,~20h ; 0DFh		; converting to upper case
 36370                                          cmp     al,[_$NO]		; verify character is legal
 36371                                          je	short legal_char	;
 36372                                          cmp     al,[_$YES]		;
 36373                                          je	short legal_char	;
 36374                                          cmp     byte [config_cmd],0	;
 36375                                          je	short input_loop	; don't allow Esc on this query
 36376                                          cmp     al,1Bh                  ; Esc?
 36377                                          jne	short input_loop	;
 36378                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 36379                                          mov     al,[_$YES]
 36380                                  legal_char:                             ;
 36381                                          call    disp_input              ;
 36382                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 36383                                  
 36384                                          cmp     al,[_$NO]		; process line?
 36385                                          je	short skip_cmd		; no
 36386                                  	; 12/12/2022
 36387                                  	clc
 36388                                  do_cmd:
 36389                                  	pop     ax			;
 36390                                  	; 12/12/2022
 36391                                  	; cf=0
 36392                                  	;clc				; just do the command
 36393                                  	retn
 36394                                  
 36395                                  skip_cmd:
 36396                                  	pop     ax			;
 36397                                  skip_all:
 36398                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 36399                                  	stc
 36400                                  	retn
 36401                                  
 36402                                  ;----------------------------------------------------------------------------
 36403                                  ;
 36404                                  ;   print_error: displays multi-config error conditions
 36405                                  ;
 36406                                  ;   INPUT
 36407                                  ;    Carry set to pause, clear to not
 36408                                  ;    ES:SI -> current command line in config.sys
 36409                                  ;
 36410                                  ;   OUTPUT
 36411                                  ;       None
 36412                                  ;
 36413                                  ;   OTHER REGS USED
 36414                                  ;       None
 36415                                  ;
 36416                                  ;   NOTES
 36417                                  ;       None
 36418                                  ;
 36419                                  ;   HISTORY
 36420                                  ;       Created 16-Mar-1992 by JeffPar
 36421                                  ;
 36422                                  ;----------------------------------------------------------------------------
 36423                                  
 36424                                  print_error:
 36425                                          push    ax
 36426                                          push    bx
 36427                                          push    cx
 36428                                          push    dx
 36429                                          push    ds
 36430                                          push    cs
 36431                                          pop     ds
 36432                                          pushf
 36433                                          call    get_linenum
 36434                                          mov     [linecount],bx
 36435                                          call    error_line
 36436                                          popf
 36437                                          jnc	short pe_ret
 36438                                          mov     dx,_$PauseMsg
 36439                                          call    print
 36440                                          mov     ax,0C07h		; flush input buffer, then wait for key
 36441                                          int     21h			; wait for a key
 36442                                          or      al,al			; extended key?
 36443                                          jnz	short pe_1		; no
 36444                                          mov     ah,07h			; yes
 36445                                          int     21h			; eat it too
 36446                                  pe_1:     
 36447                                  	mov     dx,crlfm
 36448                                          call    print
 36449                                  pe_ret: 
 36450                                  	pop     ds
 36451                                          pop     dx
 36452                                          pop     cx
 36453                                          pop     bx
 36454                                          pop     ax
 36455                                  	retn
 36456                                  
 36457                                  ;----------------------------------------------------------------------------
 36458                                  
 36459                                  ;   This function is very simple:  it merely prepends a "/D" to the
 36460                                  ;   command-line for the shell;  this (undocumented) switch disables
 36461                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 36462                                  ;   displayed when there's no AUTOEXEC.BAT.
 36463                                  
 36464                                  disable_autoexec:
 36465                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 36466                                  	; 17/04/2019 - Retro DOS v4.0
 36467                                  
 36468                                  	test	byte [bQueryOpt],4
 36469                                  	jz	short disable_exit
 36470                                  	test	byte [dae_flag],1
 36471                                  	jnz	short disable_exit
 36472                                  	or	byte [dae_flag],1
 36473                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 36474                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 36475                                  	mov     dx,'D ' ; 2044h
 36476                                  dae_1:
 36477                                          ;mov	al,[def_swchr]
 36478                                  	mov     al,[command_line-1]     ; get default switchchar
 36479                                          or      al,al                   ; anything there?
 36480                                          jz	short disable_exit	; no, disable_autoexec already called
 36481                                          mov     bl,[command_line]       ;
 36482                                          mov     bh,0                    ; BX == command-line length
 36483                                          mov     cx,bx                   ;
 36484                                          add     bl,3                    ;
 36485                                          cmp     bl,126                  ;
 36486                                          ja	short disable_exit	;
 36487                                          mov     [command_line],bl       ; update length
 36488                                          add     bx,command_line+1	; make sure we move the NULL too
 36489                                          inc     cx                      ; (just for consistency sake)
 36490                                  disable_loop:                           ;
 36491                                          mov     ah,[bx-3]               ;
 36492                                          mov     [bx],ah                 ;
 36493                                          dec     bx                      ;
 36494                                          loop    disable_loop            ;
 36495                                          mov     [bx-2],al               ;
 36496                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 36497                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 36498                                          ;mov	byte [command_line-1],0 ;
 36499                                  disable_exit:                           ;
 36500                                          retn
 36501                                  
 36502                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 36503                                  	cmp     byte [bQueryOpt],1
 36504                                  	jnz     short disable_exit
 36505                                  	test	byte [dae_flag],2
 36506                                  	jnz     short disable_exit
 36507                                  	or      byte [dae_flag],2
 36508                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 36509                                  	jmp     short dae_1
 36510                                  
 36511                                  ;endif  ;MULTI_CONFIG
 36512                                  
 36513                                  %endif	; 02/11/2022
 36514                                  
 36515                                  
 36516                                  ; 19/04/2019 - Retro DOS v4.0
 36517                                  
 36518                                  ;----------------------------------------------------------------------------
 36519                                  ;
 36520                                  ; procedure : delim
 36521                                  ;
 36522                                  ;----------------------------------------------------------------------------
 36523                                  
 36524                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36525                                  ;
 36526                                  ;;ifdef	MULTI_CONFIG
 36527                                  ;
 36528                                  ;any_delim:
 36529                                  ;       cmp     al,cr
 36530                                  ;       je	short delim_ret
 36531                                  ;       cmp     al,lf
 36532                                  ;       je	short delim_ret
 36533                                  ;       cmp     al,'['
 36534                                  ;       je	short delim_ret
 36535                                  ;       cmp     al,']'
 36536                                  ;       je	short delim_ret
 36537                                  ;
 36538                                  ;;endif  ;MULTI_CONFIG
 36539                                  
 36540                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36541                                  	; (SYSINIT:3450h)	
 36542                                  delim:
 36543 00002FC0 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 36544 00002FC2 7417                    	je	short delim_ret
 36545                                  
 36546 00002FC4 3C00                    	cmp	al,0		; special case for sysinit!!!
 36547 00002FC6 7413                    	je	short delim_ret
 36548                                  
 36549                                  org_delim:			; used by organize routine except for getting
 36550 00002FC8 3C20                    	cmp	al,' '          ; the filename.
 36551 00002FCA 740F                    	je	short delim_ret
 36552 00002FCC 3C09                            cmp     al,tab ; 9
 36553 00002FCE 740B                    	je	short delim_ret
 36554 00002FD0 3C3D                    	cmp	al,'='
 36555 00002FD2 7407                    	je	short delim_ret
 36556 00002FD4 3C2C                    	cmp	al,','
 36557 00002FD6 7403                    	je	short delim_ret
 36558 00002FD8 3C3B                    	cmp	al,';'
 36559                                  
 36560                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36561                                  ;ifdef	MULTI_CONFIG
 36562                                  ;   Make sure there's no chance of a false EOF indication
 36563 00002FDA F8                      	clc	; 09/09/2023 ('SkipDelim' must not be return with cf=1)
 36564                                  ;endif
 36565                                  	; 02/11/2022
 36566                                  delim_ret:
 36567                                  nl_ret:	; 10/09/2023
 36568 00002FDB C3                      	retn
 36569                                  
 36570                                  ;----------------------------------------------------------------------------
 36571                                  ;
 36572                                  ; procedure : newline
 36573                                  ;
 36574                                  ;  newline returns with first character of next line
 36575                                  ;
 36576                                  ;----------------------------------------------------------------------------
 36577                                  
 36578                                  newline:
 36579 00002FDC E80600                  	call	getchr			;skip non-control characters
 36580 00002FDF 72FA                    	jc	short nl_ret
 36581 00002FE1 3C0A                    	cmp	al,lf			;look for line feed
 36582 00002FE3 75F7                    	jne	short newline
 36583                                  
 36584                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36585                                  	;call	getchr
 36586                                  ;nl_ret:
 36587                                  	;retn
 36588                                  	; 10/09/2023
 36589                                  	;jmp	short getchr
 36590                                  
 36591                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36592                                  %if 1
 36593                                  
 36594                                  ;----------------------------------------------------------------------------
 36595                                  ;
 36596                                  ; procedure : getchr
 36597                                  ;
 36598                                  ;----------------------------------------------------------------------------
 36599                                  
 36600                                  	; 24/10/2022
 36601                                  getchr:
 36602                                  	; 12/12/2022
 36603                                  	;push	cx
 36604                                  	;mov	cx,[count]
 36605                                  	;jcxz	nochar
 36606                                  	; 12/12/2022
 36607 00002FE5 833E[D203]01            	cmp	word [count],1 
 36608 00002FEA 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 36609                                  	
 36610 00002FEC 8B36[D603]              	mov	si,[chrptr]
 36611 00002FF0 268A04                  	mov	al,[es:si]
 36612 00002FF3 FF0E[D203]              	dec	word [count]
 36613 00002FF7 FF06[D603]              	inc	word [chrptr]
 36614                                  	; 12/12/202
 36615                                  	; cf=0
 36616                                  	;clc
 36617                                  ;get_ret:
 36618                                  	;pop	cx
 36619                                  	;retn
 36620                                  nochar: 
 36621                                  	; 12/12/2022
 36622                                  	; cf=1
 36623                                  	;stc
 36624                                  	;jmp	short get_ret
 36625                                  	
 36626 00002FFB C3                      	retn
 36627                                  %endif
 36628                                  
 36629                                  ;----------------------------------------------------------------------------
 36630                                  ; 
 36631                                  ; procedure : mapcase
 36632                                  ;
 36633                                  ;----------------------------------------------------------------------------
 36634                                  
 36635                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 36636                                  mapcase:
 36637 00002FFC 51                      	push	cx
 36638 00002FFD 56                      	push	si
 36639 00002FFE 1E                      	push	ds
 36640                                  
 36641 00002FFF 06                      	push	es
 36642 00003000 1F                      	pop	ds
 36643                                  
 36644                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36645                                  ;;ifdef	MULTI_CONFIG
 36646                                  ;
 36647                                  ;	mov	bl,al                   ; same cmd code this line
 36648                                  ;;else
 36649                                  ;;	xor	si,si
 36650                                  ;;endif
 36651                                  	; 02/11/2022
 36652 00003001 31F6                    	xor	si, si
 36653                                  
 36654                                  convloop:
 36655 00003003 AC                      	lodsb
 36656 00003004 3C61                    	cmp	al,'a'
 36657 00003006 7209                    	jb	short noconv
 36658 00003008 3C7A                    	cmp	al,'z'
 36659 0000300A 7705                    	ja	short noconv
 36660 0000300C 2C20                    	sub	al,20h
 36661 0000300E 8844FF                  	mov	[si-1],al
 36662                                  noconv:
 36663                                  
 36664                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36665                                  ;;ifdef	MULTI_CONFIG
 36666                                  ;;
 36667                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 36668                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 36669                                  ;;   the line is a SET command or not (since we don't want to upper-case
 36670                                  ;;   anything after the "=" in a SET)
 36671                                  ;;
 36672                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 36673                                  ;       jne	short check_eol		; no, just check for end-of-line
 36674                                  ;       cmp     al,'='                  ; separator between SET var and value?
 36675                                  ;       je	short convdone		; yes
 36676                                  ;check_eol:
 36677                                  ;       cmp     al,cr
 36678                                  ;       je	short convdone
 36679                                  ;       cmp     al,lf
 36680                                  ;       je	short convdone
 36681                                  ;;endif
 36682                                  	
 36683                                  	; 02/11/2022
 36684 00003011 E2F0                    	loop	convloop
 36685                                  convdone:
 36686 00003013 1F                      	pop	ds
 36687 00003014 5E                      	pop	si
 36688 00003015 59                      	pop	cx
 36689 00003016 C3                      	retn
 36690                                  
 36691                                  ;----------------------------------------------------------------------------
 36692                                  ;
 36693                                  ; procedure : round
 36694                                  ;
 36695                                  ; round the values in memlo and memhi to paragraph boundary.
 36696                                  ; perform bounds check.
 36697                                  ;
 36698                                  ;----------------------------------------------------------------------------
 36699                                  
 36700                                  round:
 36701                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36702 00003017 1E                      	push	ds
 36703 00003018 0E                      	push	cs
 36704 00003019 1F                      	pop	ds
 36705                                  
 36706 0000301A 50                      	push	ax
 36707                                  	;mov	ax,[cs:memlo]
 36708 0000301B A1[DE03]                	mov	ax,[memlo]
 36709                                  
 36710 0000301E E883E0                  	call	ParaRound		; para round up
 36711                                  
 36712                                  	;add	[cs:memhi],ax
 36713 00003021 0106[E003]              	add	[memhi],ax
 36714                                  	;mov	word [cs:memlo],0
 36715 00003025 C706[DE03]0000          	mov	word [memlo],0
 36716                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 36717 0000302B A1[E003]                	mov	ax,[memhi]
 36718                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 36719 0000302E 3B06[A302]              	cmp	ax,[ALLOCLIM]
 36720                                  	;jae	short mem_err
 36721                                  	; 17/09/2023
 36722 00003032 7322                    	jae	short mem_err2 ; ds = cs
 36723                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 36724 00003034 F606[1014]02            	test	byte [setdevmarkflag],for_devmark ; 2
 36725 00003039 7416                    	jz	short skip_set_devmarksize
 36726 0000303B 06                      	push	es
 36727 0000303C 56                      	push	si
 36728                                  	;mov	si,[cs:devmark_addr]
 36729 0000303D 8B36[0E14]              	mov	si,[devmark_addr]
 36730 00003041 8EC6                    	mov	es,si
 36731 00003043 29F0                    	sub	ax,si
 36732 00003045 48                      	dec	ax
 36733                                  	;mov	[es:3],ax
 36734 00003046 26A30300                	mov	[es:devmark.size],ax	; paragraph
 36735                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 36736 0000304A 8026[1014]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 36737 0000304F 5E                      	pop	si
 36738 00003050 07                      	pop	es
 36739                                  skip_set_devmarksize:
 36740 00003051 58                      	pop	ax
 36741                                  
 36742                                  	; 10/09/2023
 36743 00003052 1F                      	pop	ds
 36744                                  
 36745                                  	; 11/12/2022
 36746                                  	; cf = 0
 36747                                  	; 02/11/2022
 36748                                  	;clc	; ? (not needed here)	; clear carry
 36749 00003053 C3                      	retn
 36750                                  
 36751                                  ;----------------------------------------------------------------------------
 36752                                  
 36753                                  mem_err:
 36754                                  	; 11/12/2022
 36755 00003054 0E                      	push	cs
 36756 00003055 1F                      	pop	ds
 36757                                  mem_err2:
 36758 00003056 BA[3737]                	mov	dx,badmem
 36759                                  	;push	cs
 36760                                  	;pop	ds
 36761 00003059 E83102                  	call	print
 36762 0000305C E9EBD7                  	jmp	stall
 36763                                  
 36764                                  ;----------------------------------------------------------------------------
 36765                                  ;
 36766                                  ; procedure : calldev
 36767                                  ;
 36768                                  ;----------------------------------------------------------------------------
 36769                                  
 36770                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36771                                  	; (SYSINIT:34E0h)
 36772                                  calldev:
 36773 0000305F 2E8E1E[681E]            	mov	ds,[cs:DevEntry+2]
 36774 00003064 2E031E[661E]            	add	bx,[cs:DevEntry]	; do a little relocation
 36775 00003069 8B07                    	mov	ax,[bx]
 36776                                  
 36777 0000306B 2EFF36[661E]            	push	word [cs:DevEntry]
 36778 00003070 2EA3[661E]              	mov	[cs:DevEntry],ax
 36779 00003074 BB[E603]                	mov	bx,packet
 36780 00003077 2EFF1E[661E]            	call	far [cs:DevEntry]
 36781 0000307C 2E8F06[661E]            	pop	word [cs:DevEntry]
 36782 00003081 C3                      	retn
 36783                                  
 36784                                  ;----------------------------------------------------------------------------
 36785                                  ;
 36786                                  ; procedure : todigit
 36787                                  ;
 36788                                  ;----------------------------------------------------------------------------
 36789                                  
 36790                                  todigit:
 36791 00003082 2C30                    	sub	al,'0'
 36792                                  	;jb	short notdig  ; 02/11/2022
 36793                                  	; 12/12/2022
 36794 00003084 7203                    	jb	short notdig2
 36795                                  	;cmp	al,9
 36796                                  	;ja	short notdig
 36797                                  	;clc
 36798                                  	;retn
 36799                                  	; 12/12/2022
 36800 00003086 3C0A                    	cmp	al,10
 36801 00003088 F5                      	cmc
 36802                                  notdig:
 36803                                  	;stc
 36804                                  notdig2:
 36805 00003089 C3                      	retn
 36806                                  
 36807                                  ;----------------------------------------------------------------------------
 36808                                  ;
 36809                                  ; procedure : getnum
 36810                                  ;
 36811                                  ; getnum parses a decimal number.
 36812                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 36813                                  ; error), if number is bad carry is set, zero is set, ax=0.
 36814                                  ;
 36815                                  ;----------------------------------------------------------------------------
 36816                                  
 36817                                  getnum:
 36818 0000308A 53                      	push	bx
 36819 0000308B 31DB                    	xor	bx,bx			; running count is zero
 36820                                  b2:
 36821 0000308D E8F2FF                  	call	todigit 		; do we have a digit ?
 36822 00003090 7247                    	jc	short badnum		; no, bomb
 36823                                  
 36824 00003092 93                      	xchg	ax,bx			; put total in ax
 36825 00003093 53                      	push	bx			; save digit (0 to 9)
 36826                                  	;mov	bx,10			; base of arithmetic
 36827                                  	; 12/12/2022
 36828 00003094 B30A                    	mov	bl,10
 36829 00003096 F7E3                    	mul	bx			; shift by one decimal digit
 36830 00003098 5B                      	pop	bx			; get back digit (0 to 9)
 36831 00003099 00D8                    	add	al,bl			; get total
 36832 0000309B 80D400                  	adc	ah,0			; make that 16 bits
 36833 0000309E 7239                    	jc	short badnum		; too big a number
 36834                                  
 36835 000030A0 93                      	xchg	ax,bx			; stash total
 36836                                  
 36837 000030A1 E841FF                  	call	getchr			;get next digit
 36838 000030A4 722D                    	jc	short b1		; no more characters
 36839 000030A6 3C20                    	cmp	al,' ' 			; space?
 36840 000030A8 741F                    	je	short b15		; then end of digits
 36841 000030AA 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 36842 000030AC 741B                    	je	short b15		; then end of digits.
 36843 000030AE 3C09                    	cmp	al, tab ; 9		; tab
 36844 000030B0 7417                    	je	short b15
 36845 000030B2 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 36846 000030B7 7410                    	je	short b15
 36847 000030B9 3C2F                    	cmp	al,'/'			; see if another switch follows
 36848                                  	;nop				; cas - remnant of old bad code
 36849                                  	;nop
 36850                                  	; 12/12/2022
 36851                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36852                                  	;nop
 36853                                  	;nop
 36854 000030BB 740C                    	je	short b15
 36855 000030BD 3C0A                    	cmp	al,lf			; line-feed?
 36856 000030BF 7408                    	je	short b15
 36857 000030C1 3C0D                    	cmp	al,cr			; carriage return?
 36858 000030C3 7404                    	je	short b15
 36859 000030C5 08C0                    	or	al,al			; end of line separator?
 36860 000030C7 75C4                    	jnz	short b2		; no, try as a valid char...
 36861                                  b15:
 36862 000030C9 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 36863 000030CE 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 36864                                  b1:
 36865 000030D3 89D8                    	mov	ax,bx			; get proper count
 36866 000030D5 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 36867 000030D7 5B                      	pop	bx
 36868 000030D8 C3                      	retn
 36869                                  badnum:
 36870                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36871                                  	;mov	byte [cs:sepchr],0
 36872 000030D9 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 36873                                  	; 12 /12/2022
 36874 000030DB 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 36875 000030DF 5B                      	pop	bx
 36876 000030E0 F9                      	stc				; and carry set
 36877 000030E1 C3                      	retn
 36878                                  
 36879                                  ;****************************************************************************
 36880                                  
 36881                                  setdoscountryinfo:
 36882                                  
 36883                                  ;----------------------------------------------------------------------------
 36884                                  ;input: es:di -> pointer to dos_country_cdpg_info
 36885                                  ;	ds:0  -> buffer.
 36886                                  ;	si = 0
 36887                                  ;	ax = country id
 36888                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 36889                                  ;	bx = file handle
 36890                                  ;	this routine can handle maximum 438 country_data entries.
 36891                                  ;
 36892                                  ;output: dos_country_cdpg_info set.
 36893                                  ;	 carry set if any file read failure or wrong information in the file.
 36894                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 36895                                  ;	 codepage_id in the file.
 36896                                  ;----------------------------------------------------------------------------
 36897                                  
 36898                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36899                                  
 36900 000030E2 57                      	push	di
 36901 000030E3 50                      	push	ax
 36902 000030E4 52                      	push	dx
 36903                                  
 36904 000030E5 31C9                    	xor	cx,cx
 36905 000030E7 31D2                    	xor	dx,dx
 36906 000030E9 B80002                  	mov	ax,512			;read 512 bytes
 36907 000030EC E84301                  	call	readincontrolbuffer	;read the file header
 36908 000030EF 724A                    	jc	short setdosdata_fail
 36909                                  
 36910 000030F1 06                      	push	es
 36911 000030F2 56                      	push	si
 36912                                  
 36913 000030F3 0E                      	push	cs
 36914 000030F4 07                      	pop	es
 36915                                  
 36916 000030F5 BF[5933]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 36917 000030F8 B90800                  	mov	cx,8			;length of the signature
 36918 000030FB F3A6                    	repz	cmpsb
 36919                                  
 36920 000030FD 5E                      	pop	si
 36921 000030FE 07                      	pop	es
 36922 000030FF 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 36923                                  
 36924 00003101 83C612                  	add	si,18			;si -> county info type
 36925 00003104 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 36926 00003107 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 36927                                  
 36928 00003109 46                      	inc	si			;si -> file offset
 36929 0000310A 8B14                    	mov	dx,[si]			;get the info file offset.
 36930 0000310C 8B4C02                  	mov	cx,[si+2]
 36931 0000310F B80018                  	mov	ax,6144			;read 6144 bytes.
 36932 00003112 E81D01                  	call	readincontrolbuffer	;read info
 36933 00003115 7224                    	jc	short setdosdata_fail
 36934                                  
 36935 00003117 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 36936 00003119 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 36937 0000311D 771C                    	ja	short setdosdata_fail
 36938                                  
 36939 0000311F 46                      	inc	si
 36940 00003120 46                      	inc	si			;si -> entry information packet
 36941 00003121 5A                      	pop	dx			;restore code page id
 36942 00003122 58                      	pop	ax			;restore country id
 36943 00003123 5F                      	pop	di
 36944                                  
 36945                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 36946 00003124 3B4402                  	cmp	ax,[si+2]		;compare country_id
 36947 00003127 7509                    	jne	short setdoscntry_next
 36948                                  
 36949                                  	;cmp	dx,0			;no user specified code page ?
 36950                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 36951                                  	; 10/09/2023
 36952 00003129 09D2                    	or	dx,dx ; cmp dx,0
 36953 0000312B 7413                    	jz	short setdoscntry_any_codepage
 36954 0000312D 3B5404                  	cmp	dx,[si+4]		;compare code page id
 36955 00003130 7411                    	je	short setdoscntry_got_it
 36956                                  
 36957                                  setdoscntry_next:
 36958 00003132 0334                    	add	si,[si]			;next entry
 36959 00003134 46                      	inc	si
 36960 00003135 46                      	inc	si			;take a word for size of entry itself
 36961 00003136 E2EC                    	loop	setdoscntry_find
 36962                                  
 36963                                  	;mov	cx,-1			;signals that bad country id entered.
 36964                                  	; 10/09/2023
 36965 00003138 49                      	dec	cx ; 0 -> -1
 36966                                  setdoscntry_fail:
 36967 00003139 F9                      	stc
 36968 0000313A C3                      	retn
 36969                                  
 36970                                  setdosdata_fail:
 36971 0000313B 5E                      	pop	si
 36972 0000313C 59                      	pop	cx
 36973 0000313D 5F                      	pop	di
 36974 0000313E EBF9                    	jmp	short setdoscntry_fail
 36975                                  
 36976                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 36977 00003140 8B5404                  	mov	dx,[si+4]
 36978                                  
 36979                                  setdoscntry_got_it:			;found the matching entry
 36980 00003143 2E8916[6133]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 36981 00003148 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 36982 0000314B 8B4C0C                  	mov	cx,[si+12]
 36983 0000314E B80002                  	mov	ax,512 			;read 512 bytes
 36984 00003151 E8DE00                  	call	readincontrolbuffer
 36985 00003154 72E3                    	jc	short setdoscntry_fail
 36986                                  
 36987 00003156 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 36988 00003158 46                      	inc	si
 36989 00003159 46                      	inc	si			;si -> first entry
 36990                                  
 36991                                  setdoscntry_data:
 36992 0000315A 57                      	push	di			;es:di -> dos_country_cdpg_info
 36993 0000315B 51                      	push	cx			;save # of entry left
 36994 0000315C 56                      	push	si			;si -> current entry in control buffer
 36995                                  
 36996 0000315D 8A4402                  	mov	al,[si+2]		;get data entry id
 36997 00003160 E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 36998 00003163 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 36999                                  
 37000 00003165 8B5404                  	mov	dx,[si+4]		;get offset of data
 37001 00003168 8B4C06                  	mov	cx,[si+6]
 37002 0000316B B80042                  	mov	ax,4200h
 37003 0000316E F9                      	stc
 37004 0000316F CD21                    	int	21h			;move pointer
 37005 00003171 72C8                    	jc	short setdosdata_fail
 37006                                  
 37007 00003173 BA0002                  	mov	dx,512			;start of data buffer
 37008 00003176 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 37009 00003179 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 37010 0000317B F9                      	stc
 37011 0000317C CD21                    	int	21h			;read the country.sys data
 37012 0000317E 72BB                    	jc	short setdosdata_fail 	;read failure
 37013                                  
 37014 00003180 39C8                    	cmp	ax,cx
 37015 00003182 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 37016                                  
 37017 00003184 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 37018 00003187 8B4C06                  	mov	cx,[si+6]
 37019 0000318A B80042                  	mov	ax,4200h
 37020 0000318D F9                      	stc
 37021 0000318E CD21                    	int	21h			;move pointer back again
 37022 00003190 72A9                    	jc	short setdosdata_fail
 37023                                  
 37024 00003192 56                      	push	si
 37025 00003193 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 37026 00003196 8B0C                    	mov	cx,[si]
 37027 00003198 5E                      	pop	si
 37028 00003199 BA0002                  	mov	dx,512			;start of data buffer
 37029 0000319C 83C10A                  	add	cx,10			;signature + a word for the length itself
 37030 0000319F B43F                    	mov	ah,3Fh			;read the data from the file.
 37031 000031A1 F9                      	stc
 37032 000031A2 CD21                    	int	21h
 37033 000031A4 7295                    	jc	short setdosdata_fail
 37034                                  
 37035 000031A6 39C8                    	cmp	ax,cx
 37036 000031A8 7591                    	jne	short setdosdata_fail
 37037                                  
 37038 000031AA 8A4402                  	mov	al,[si+2]		;save data id for future use.
 37039 000031AD BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 37040 000031B0 8B0C                    	mov	cx,[si]			;get the length of the file
 37041 000031B2 41                      	inc	cx			;take care of a word for lenght of tab
 37042 000031B3 41                      	inc	cx			;itself.
 37043 000031B4 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 37044 000031B8 7781                    	ja	short setdosdata_fail
 37045                                  
 37046                                  	;if	bugfix
 37047 000031BA E83100                  	call	setdbcs_before_copy
 37048                                  	;endif
 37049                                  
 37050 000031BD 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 37051 000031BF 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 37052                                  
 37053 000031C1 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 37054                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 37055 000031C5 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 37056                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 37057                                  	
 37058 000031C9 57                      	push	di			;save di
 37059                                  
 37060                                  	;push	ax
 37061                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 37062                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 37063                                  	;pop	ax
 37064                                  	; 10/09/2023
 37065 000031CA 2EFF36[6133]            	push	word [cs:cntrycodepage_id]
 37066 000031CF 8F4404                  	pop	word [si+4]
 37067                                  
 37068                                  setdoscntry_mov:
 37069 000031D2 F3A4                    	rep	movsb			;copy the table into dos
 37070 000031D4 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 37071 000031D6 7509                    	jne	short setdoscntry_data_next
 37072                                  
 37073 000031D8 5F                      	pop	di			;restore di
 37074 000031D9 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 37075                                  	;pop	word [es:di+26]		;restore
 37076 000031DD 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 37077                                  	;pop	word [es:di+24]
 37078                                  
 37079                                  setdoscntry_data_next:
 37080 000031E1 5E                      	pop	si			;restore control buffer pointer
 37081 000031E2 59                      	pop	cx			;restore # of entries left
 37082 000031E3 5F                      	pop	di			;restore pointer to dso_country_cdpg
 37083 000031E4 0334                    	add	si,[si]			;try to get the next entry
 37084 000031E6 46                      	inc	si
 37085 000031E7 46                      	inc	si			;take a word of entry length itself
 37086 000031E8 49                      	dec	cx
 37087                                  	; 10/09/2023
 37088 000031E9 741B                    	jz	short setdoscntry_ok 
 37089                                  	;cmp	cx,0
 37090                                  	;je	short setdoscntry_ok
 37091 000031EB E96CFF                  	jmp	setdoscntry_data
 37092                                  
 37093                                  	; 18/12/2022
 37094                                  ;setdoscntry_ok:
 37095                                  	;retn
 37096                                  
 37097                                  ;----------------------------------------------------------------------------
 37098                                  
 37099                                  	;if	bugfix
 37100                                  
 37101                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 37102                                  
 37103                                  setdbcs_before_copy:
 37104 000031EE 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 37105 000031F0 7514                    	jne	short sdbcsbc		; jump if not
 37106                                  	
 37107                                  	; 10/09/2023
 37108 000031F2 50                      	push	ax
 37109 000031F3 31C0                    	xor	ax,ax
 37110 000031F5 263905                  	cmp	[es:di],ax ; 0
 37111 000031F8 740B                    	je	short sdbcsbc_pop
 37112                                  	
 37113                                  	;cmp	word [es:di],0		; zero byte data block?
 37114                                  	;je	short sdbcsbc		; jump if so
 37115                                  
 37116 000031FA 57                      	push	di
 37117                                  	; 10/09/2023
 37118                                  	;push	ax
 37119 000031FB 51                      	push	cx
 37120 000031FC 268B0D                  	mov	cx,[es:di]		; load block length
 37121                                  	;add	di,2			; points actual data
 37122 000031FF 47                      	inc	di
 37123 00003200 47                      	inc	di
 37124                                  	;xor	al,al			; fill bytes
 37125 00003201 F3AA                    	rep	stosb			; clear data block
 37126 00003203 59                      	pop	cx
 37127                                  	;pop	ax
 37128 00003204 5F                      	pop	di
 37129                                  
 37130                                  sdbcsbc_pop:	; 10/09/2023
 37131 00003205 58                      	pop	ax
 37132                                  sdbcsbc:
 37133                                  setdoscntry_ok:	; 18/12/2022
 37134 00003206 C3                      	retn
 37135                                  
 37136                                  	;endif
 37137                                  
 37138                                  ;----------------------------------------------------------------------------
 37139                                  
 37140                                  getcountrydestination:
 37141                                  
 37142                                  ;----------------------------------------------------------------------------
 37143                                  ;get the destination address in the dos country info table.
 37144                                  ;
 37145                                  ;input: al - data id
 37146                                  ;	es:di -> dos_country_cdpg_info
 37147                                  ;on return:
 37148                                  ;	es:di -> destination address of the matching data id
 37149                                  ;	carry set if no matching data id found in dos.
 37150                                  ;----------------------------------------------------------------------------
 37151                                  
 37152                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 37153                                  
 37154 00003207 51                      	push	cx
 37155                                  	;add	di,74
 37156 00003208 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 37157                                  					;skip the reserved area, syscodepage etc.
 37158 0000320B 268B0D                  	mov	cx,[es:di]		;get the number of entries
 37159 0000320E 47                      	inc	di
 37160 0000320F 47                      	inc	di			;si -> the first start entry id
 37161                                  
 37162                                  getcntrydest:
 37163 00003210 263805                  	cmp	byte [es:di],al
 37164 00003213 7413                    	je	short getcntrydest_ok
 37165                                  
 37166 00003215 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 37167 00003219 7405                    	je	short getcntrydest_1
 37168                                  
 37169 0000321B 83C705                  	add	di,5			;next data id
 37170 0000321E EB03                    	jmp	short getcntrydest_loop
 37171                                  
 37172                                  getcntrydest_1:
 37173                                  	;add	di,41
 37174 00003220 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 37175                                  getcntrydest_loop:
 37176 00003223 E2EB                    	loop	getcntrydest
 37177 00003225 F9                      	stc
 37178                                  	;jmp	short getcntrydest_exit
 37179                                  getcntrydest_exit:
 37180                                  	; 10/09/2023
 37181 00003226 59                      	pop	cx
 37182 00003227 C3                      	retn
 37183                                  
 37184                                  getcntrydest_ok:
 37185                                  	; 10/09/2023
 37186 00003228 47                      	inc	di
 37187                                  
 37188                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 37189                                  ;	jne	short getcntrydest_ok1
 37190                                  ;
 37191                                  ;	;inc	di			;now di -> cccountryinfolen
 37192                                  ;	jmp	short getcntrydest_exit
 37193                                  
 37194                                  	; 10/09/2023
 37195 00003229 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 37196 0000322B 74F9                    	je	short getcntrydest_exit
 37197                                  
 37198                                  getcntrydest_ok1:
 37199                                  	;les	di,[es:di+1]		;get the destination in es:di
 37200                                  	; 10/09/2023
 37201 0000322D 26C43D                  	les	di,[es:di]
 37202                                  ;getcntrydest_exit:
 37203 00003230 59                      	pop	cx
 37204 00003231 C3                      	retn
 37205                                  
 37206                                  ;----------------------------------------------------------------------------
 37207                                  
 37208                                  readincontrolbuffer:
 37209                                  
 37210                                  ;----------------------------------------------------------------------------
 37211                                  ;move file pointer to cx:dx
 37212                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 37213                                  ;si will be set to 0 hence ds:si points to the control buffer.
 37214                                  ;
 37215                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 37216                                  ;	 be moved.
 37217                                  ;	 ax - # of bytes to read
 37218                                  ;	 bx - file handle
 37219                                  ;	 ds - buffer seg.
 37220                                  ;return: the control data information is read into ds:0 - ds:0200.
 37221                                  ;	 cx,dx value destroyed.
 37222                                  ;	 carry set if error in reading file.
 37223                                  ;----------------------------------------------------------------------------
 37224                                  
 37225 00003232 50                      	push	ax			;# of bytes to read
 37226 00003233 B80042                  	mov	ax,4200h
 37227 00003236 F9                      	stc
 37228 00003237 CD21                    	int	21h			;move pointer
 37229 00003239 59                      	pop	cx			;# of bytes to read
 37230 0000323A 7209                    	jc	short ricb_exit
 37231                                  
 37232 0000323C 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 37233 0000323E 31F6                    	xor	si,si
 37234 00003240 B43F                    	mov	ah,3Fh			;read into the buffer
 37235 00003242 F9                      	stc
 37236 00003243 CD21                    	int	21h			;should be less than 1024 bytes.
 37237                                  ricb_exit:
 37238 00003245 C3                      	retn
 37239                                  
 37240                                  ;----------------------------------------------------------------------------
 37241                                  
 37242                                  ;! set_country_path procedure is not called from anywhere !
 37243                                  ; Erdogan Tan - 04/08/2023 (Retro DOS v4.2)
 37244                                  %if 0
 37245                                  
 37246                                  set_country_path:
 37247                                  
 37248                                  ;----------------------------------------------------------------------------
 37249                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 37250                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 37251                                  ;     assumes current directory is the root directory.
 37252                                  ;out: ds:di -> full path (cntry_drv).
 37253                                  ;     set the cntry_drv string from the country=,,path command.
 37254                                  ;     ds, es, si value saved.
 37255                                  ;----------------------------------------------------------------------------
 37256                                  
 37257                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37258                                  	; (SYSINIT:4EF4h)
 37259                                  
 37260                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37261                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:36DDh)
 37262                                  
 37263                                  	push	si
 37264                                  
 37265                                  	push	ds			;switch ds, es
 37266                                  	push	es
 37267                                  	pop	ds
 37268                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 37269                                  
 37270                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 37271                                  	jc	short scp_default_drv 	;no, use current default drive.
 37272                                  
 37273                                  	mov	al,[si]
 37274                                  	inc	si
 37275                                  	inc	si			;si -> next char after ":"
 37276                                  	jmp	short scp_setdrv
 37277                                  
 37278                                  scp_default_drv:
 37279                                  	mov	ah,19h
 37280                                  	int	21h
 37281                                  	add	al,"A"			;convert it to a character.
 37282                                  
 37283                                  scp_setdrv:
 37284                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 37285                                  	mov	di,cntry_path
 37286                                  	mov	al,[si]
 37287                                  	cmp	al, "\"
 37288                                  	je	short scp_root_dir
 37289                                  
 37290                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 37291                                  	;je	short scp_root_dir
 37292                                  	;jmp	short scp_path
 37293                                  	; 04/01/2023
 37294                                  	jne	short scp_path
 37295                                  
 37296                                  scp_root_dir:
 37297                                  	dec	di			;di -> cntry_root
 37298                                  scp_path:
 37299                                  	call	move_asciiz		;copy it
 37300                                  
 37301                                  	mov	di,cntry_drv
 37302                                  scpath_exit:
 37303                                  
 37304                                  	push	ds			;switch ds, es
 37305                                  	push	es
 37306                                  	pop	ds
 37307                                  	pop	es			;ds, es value restored
 37308                                  
 37309                                  	pop	si
 37310                                  	retn
 37311                                  
 37312                                  %endif
 37313                                  
 37314                                  ;----------------------------------------------------------------------------
 37315                                  
 37316                                  chk_drive_letter:
 37317                                  
 37318                                  ;check if ds:[si] is a drive letter followed by ":".
 37319                                  ;assume that every alpha character is already converted to upper case.
 37320                                  ;carry set if not.
 37321                                  
 37322                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37323                                  
 37324 00003246 50                      	push	ax
 37325 00003247 803C41                  	cmp	byte [si],"A"
 37326                                  	;jb	short cdletter_no
 37327 0000324A 720C                    	jb	short cdletter_exit
 37328 0000324C 803C5A                  	cmp	byte [si],"Z"
 37329 0000324F 7706                    	ja	short cdletter_no
 37330 00003251 807C013A                	cmp	byte [si+1],":"
 37331                                  	;jne	short cdletter_no
 37332                                  	;jmp	short cdletter_exit
 37333                                  	; 10/09/2023
 37334 00003255 7401                    	je	short cdletter_exit
 37335                                  
 37336                                  cdletter_no:
 37337 00003257 F9                      	stc
 37338                                  cdletter_exit:
 37339 00003258 58                      	pop	ax
 37340 00003259 C3                      	retn
 37341                                  
 37342                                  ;----------------------------------------------------------------------------
 37343                                  
 37344                                  move_asciiz:
 37345                                  
 37346                                  ;in: ds:si -> source es:di -> target
 37347                                  ;out: copy the string until 0.
 37348                                  ;assumes there exists a 0.
 37349                                  
 37350                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37351                                  
 37352                                  masciiz_loop:
 37353                                  	; 10/09/2023
 37354 0000325A F604FF                  	test	byte [si],0FFh
 37355 0000325D A4                      	movsb
 37356                                  	;cmp	byte [si-1],0	; was it 0?
 37357                                  	;jne	short masciiz_loop
 37358 0000325E 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 37359 00003260 C3                      	retn
 37360                                  
 37361                                  
 37362                                  ;----------------------------------------------------------------------------
 37363                                  
 37364                                  ;	ds:dx points to string to output (asciz)
 37365                                  ;
 37366                                  ;	prints <badld_pre> <string> <badld_post>
 37367                                  
 37368                                  badfil:
 37369 00003261 0E                      	push	cs
 37370 00003262 07                      	pop	es
 37371                                  
 37372 00003263 89D6                    	mov	si,dx
 37373                                  badload:
 37374 00003265 BA[A136]                	mov	dx,badld_pre	; want to print config error
 37375 00003268 BB[5E36]                	mov	bx,crlfm
 37376                                  prnerr:
 37377 0000326B 0E                      	push	cs
 37378 0000326C 1F                      	pop	ds ; *
 37379 0000326D E81D00                  	call	print
 37380                                  prn1:
 37381 00003270 268A14                  	mov	dl,[es:si]
 37382 00003273 08D2                    	or	dl,dl
 37383 00003275 7407                    	jz	short prn2
 37384 00003277 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 37385 00003279 CD21                    	int	21h
 37386 0000327B 46                      	inc	si
 37387 0000327C EBF2                    	jmp	short prn1
 37388                                  prn2:
 37389 0000327E 89DA                    	mov	dx,bx
 37390 00003280 E80A00                  	call	print
 37391                                  	; 11/12/2022
 37392                                  	; ds = cs ; *
 37393 00003283 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 37394                                  	;cmp	byte [cs:donotshownum],1 
 37395 00003288 7407                    	je	short prnexit
 37396                                  	
 37397                                  	; 18/12/2022
 37398                                  	;call	error_line
 37399 0000328A E91EF4                  	jmp	error_line
 37400                                  ;prnexit:
 37401                                  	;retn
 37402                                  
 37403                                  ;----------------------------------------------------------------------------
 37404                                  
 37405                                  print:
 37406 0000328D B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 37407 0000328F CD21                    	int	21h
 37408                                  prnexit:	; 18/12/2022
 37409 00003291 C3                      	retn
 37410                                  
 37411                                  ;----------------------------------------------------------------------------
 37412                                  
 37413                                  ;  open device pointed to by dx, al has access code
 37414                                  ;   if unable to open do a device open null device instead
 37415                                  
 37416                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 37417                                  	; (SYSINIT:3764h)
 37418                                  open_dev:
 37419 00003292 E80500                  	call	open_file
 37420 00003295 7309                    	jnc	short open_dev3
 37421                                  
 37422                                  open_dev1:
 37423 00003297 BA[FA32]                	mov	dx,nuldev
 37424                                  	; 18/12/2022
 37425                                  	;call	open_file
 37426                                  ;of_retn:
 37427                                  	;retn
 37428                                  	; 18/12/2022
 37429                                  	;jmp	short open_file
 37430                                  open_file:
 37431 0000329A B43D                    	mov	ah,OPEN	; 3Dh
 37432 0000329C F9                      	stc
 37433 0000329D CD21                    	int	21h
 37434                                  of_retn:	; 18/12/2022
 37435 0000329F C3                      	retn
 37436                                  
 37437                                  open_dev3:
 37438 000032A0 89C3                    	mov	bx,ax			; handle from open to bx
 37439                                  	;;xor	ax,ax			; get device info
 37440                                  	;;mov	ah,IOCTL ; 44h
 37441                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 37442                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37443                                  	;xor	ax,ax
 37444                                  	;mov	ah,44h	; IOCTL
 37445                                  	; 11/12/2022
 37446 000032A2 B80044                  	mov	ax,4400h ; IOCTL<<8 
 37447                                  
 37448 000032A5 CD21                    	int	21h
 37449                                  
 37450 000032A7 F6C280                  	test	dl,10000000b ; 80h
 37451 000032AA 75F3                    	jnz	short of_retn
 37452                                  
 37453 000032AC B43E                    	mov	ah,CLOSE ; 3Eh
 37454 000032AE CD21                    	int	21h
 37455 000032B0 EBE5                    	jmp	short open_dev1
 37456                                  
 37457                                  ;----------------------------------------------------------------------------
 37458                                  
 37459                                  ; 18/12/2022
 37460                                  %if 0
 37461                                  open_file:
 37462                                  	mov	ah,OPEN	; 3Dh
 37463                                  	stc
 37464                                  	int	21h
 37465                                  	retn
 37466                                  %endif
 37467                                  
 37468                                  ;----------------------------------------------------------------------------
 37469                                  
 37470                                  ; test int24. return back to dos with the fake user response of "fail"
 37471                                  
 37472                                  int24:
 37473 000032B2 B003                    	mov	al,3			; fail the system call
 37474 000032B4 CF                      	iret				; return back to dos.
 37475                                  
 37476                                  ; 19/04/2019 - Retro DOS v4.0
 37477                                  
 37478                                  ;----------------------------------------------------------------------------
 37479                                  ; DATA
 37480                                  ;----------------------------------------------------------------------------
 37481                                  
 37482                                  ;include copyrigh.inc			; copyright statement
 37483                                  
 37484                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 37485                                  
 37486                                  ;MsDosVersion6Copyr:
 37487                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 37488                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 37489                                  
 37490                                  ; 22/10/2022
 37491                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 37492                                  
 37493                                  ; 28/12/2022
 37494                                  %if 0
 37495                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37496                                  MsDosVersion5Copyr:
 37497                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 37498                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 37499                                  %endif
 37500                                  
 37501                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37502                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37503                                  ; 20/04/2019 - Retro DOS v4.0
 37504                                  ;BOOTMES:
 37505                                  ;	db      13
 37506                                  ;	db      10
 37507                                  ;	db      "MS-DOS version "
 37508                                  ;	db      MAJOR_VERSION + "0"
 37509                                  ;	db      "."
 37510                                  ;	db      (MINOR_VERSION / 10) + "0"
 37511                                  ;	db      (MINOR_VERSION % 10) + "0"
 37512                                  ;	db      13,10
 37513                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 37514                                  ;	; 22/10/2022
 37515                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 37516                                  ;	;
 37517                                  ;	db	0
 37518                                  
 37519                                  	; 12/12/2022
 37520 000032B5 00                      	db	0
 37521                                  ; 12/12/2022
 37522                                  BOOTMES:
 37523 000032B6 0D0A                    	db	13,10
 37524                                  	;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 37525                                  	; 28/12/2022
 37526 000032B8 526574726F20444F53-     	db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 37526 000032C1 2076342E3120284D6F-
 37526 000032CA 646966696564204D53-
 37526 000032D3 444F5320352E302920 
 37527 000032DC 0D0A                    	db	13,10
 37528                                  	;db	"by Erdogan Tan [2022] "
 37529 000032DE 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 37529 000032E7 6E2054616E205B3230-
 37529 000032F0 32335D20           
 37530 000032F4 0D0A                    	db	13,10
 37531 000032F6 0D0A2400                	db	13,10,"$",0
 37532                                  
 37533 000032FA 4E554C00                nuldev:	db	"NUL",0
 37534 000032FE 434F4E00                condev:	db	"CON",0
 37535 00003302 41555800                auxdev:	db	"AUX",0
 37536 00003306 50524E00                prndev:	db	"PRN",0
 37537                                  
 37538                                  ;IFDEF	CONFIGPROC
 37539 0000330A 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 37539 00003313 595300             
 37540                                  
 37541 00003316 413A                    cntry_drv:  db	"A:"
 37542 00003318 5C                      cntry_root: db	"\"
 37543 00003319 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 37543 00003322 595300             
 37544                                  	    ;db	52 dup (0)
 37545 00003325 00<rep 34h>             	    times 52 db 0	
 37546                                  
 37547                                  country_file_signature:
 37548 00003359 FF434F554E545259        	db	0FFh,'COUNTRY'
 37549                                  
 37550                                  cntrycodepage_id: 
 37551 00003361 0000                    	dw	0 	
 37552                                  
 37553                                  ;ENDIF ; CONFIGPROC
 37554                                  
 37555                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37556                                  ;;ifdef	MULTI_CONFIG
 37557                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 37558                                  ;tmplate: db	64                      ; must precede commnd
 37559                                  ;;endif
 37560                                  	; 02/11/2022
 37561                                  	;db	12                      ; size of commnd line (excl. null)
 37562                                  
 37563 00003363 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 37563 0000336C 434F4D00           
 37564                                  	;db	51 dup (0)
 37565 00003370 00<rep 33h>             	times	51 db 0
 37566                                  ;endif
 37567                                  
 37568                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37569                                  ;;ifdef	MULTI_CONFIG
 37570                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 37571                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 37572                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 37573                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 37574                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 37575                                  ;	 db	9,"A:\DOS /P",0		;
 37576                                  ;def_swchr:	
 37577                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 37578                                  ;;endif
 37579                                  
 37580                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37581                                  ;command_line:
 37582                                  ;	db	2,"/P"			; default command.com args
 37583                                  ;	;db	125 dup (0)
 37584                                  ;	times	125 db 0
 37585                                  
 37586                                  pathstring:
 37587                                  	;db	64 dup (0)
 37588 000033A3 00<rep 40h>             	times	64 db 0
 37589                                  
 37590                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37591                                  %if 0
 37592                                  
 37593                                  dae_flag:
 37594                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 37595                                  
 37596                                  ;ifdef	MULTI_CONFIG
 37597                                  
 37598                                  MAX_MULTI_CONFIG equ 10
 37599                                  
 37600                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 37601                                  
 37602                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 37603                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 37604                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 37605                                  bLastCol:	db      0               ; ending column on status line
 37606                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 37607                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 37608                                                                          ; 2=disable default 2-second delay
 37609                                  bCRTPage:	db      0               ; value saved from BIOS data area
 37610                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 37611                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 37612                                  bDefBlock:	db      1               ; default block #
 37613                                  bMaxBlock:	db      0               ; maxmimum block #
 37614                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 37615                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 37616                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 37617                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 37618                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 37619                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 37620                                  
 37621                                  szBoot:		db      "CONFIG=",0
 37622                                  szMenu:		db      "MENU",0
 37623                                  szCommon:	db      "COMMON",0
 37624                                  
 37625                                  ;endif	;MULTI_CONFIG
 37626                                  
 37627                                  comtab:	 ; label byte
 37628                                  
 37629                                  ;            cmd len    command         cmd code
 37630                                  ;            -------    -------         --------
 37631                                  
 37632                                  ;ifdef MULTI_CONFIG
 37633                                          db      1,      "[",            CONFIG_BEGIN
 37634                                  ;endif
 37635                                          db      5,      "BREAK",        CONFIG_BREAK
 37636                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 37637                                          db      7,      "COMMENT",      CONFIG_COMMENT
 37638                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 37639                                          db      6,      "DEVICE",       CONFIG_DEVICE
 37640                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37641                                          db      3,      "DOS",          CONFIG_DOS
 37642                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37643                                          db      4,      "FCBS",         CONFIG_FCBS
 37644                                          db      5,      "FILES",        CONFIG_FILES
 37645                                  ;ifdef MULTI_CONFIG
 37646                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 37647                                  ;endif
 37648                                          db      7,      "INSTALL",      CONFIG_INSTALL
 37649                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 37650                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37651                                  ;ifdef MULTI_CONFIG
 37652                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 37653                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 37654                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 37655                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 37656                                  ;endif
 37657                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37658                                  ;ifdef MULTI_CONFIG
 37659                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 37660                                  ;endif
 37661                                          db      3,      "REM",          CONFIG_REM
 37662                                  ;ifdef MULTI_CONFIG
 37663                                          db      3,      "SET",          CONFIG_SET
 37664                                  ;endif
 37665                                          db      5,      "SHELL",        CONFIG_SHELL
 37666                                  ;if    STACKSW
 37667                                          db      6,      "STACKS",       CONFIG_STACKS
 37668                                  ;endif
 37669                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 37670                                  	db	0
 37671                                  %endif
 37672                                  
 37673                                  comtab:
 37674                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37675                                  	; (SYSINIT:38EDh)
 37676 000033E3 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 37677 000033EC 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 37678 000033F3 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 37679 000033FB 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37679 00003404 474855             
 37680 00003407 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 37681 0000340E 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 37682 00003414 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37682 0000341D 454C               
 37683 0000341F 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37683 00003428 434B4D             
 37684 0000342B 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37684 00003434 50                 
 37685 00003435 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 37686 0000343D 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 37687 00003446 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 37688 0000344D 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 37689 00003456 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 37690 0000345F 0352454D30              	db      3,      "REM",          CONFIG_REM
 37691 00003464 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 37691 0000346D 31                 
 37692 0000346E 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 37693 00003473 00                      	db	0
 37694                                  
 37695                                  deviceparameters:	
 37696                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 37697                                  devp.specialfunc:	; deviceparameters +
 37698 00003474 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 37699                                  devp.devtype:
 37700 00003475 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 37701                                  devp.devattr:
 37702 00003476 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 37703                                  devp.cylinders:
 37704 00003478 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 37705                                  
 37706 0000347A 00<rep 11Eh>            	times	286	db 0
 37707                                  	
 37708 00003598 0200                    hlim:	dw	2
 37709 0000359A 0900                    slim:	dw	9
 37710                                  
 37711 0000359C 00                      drive:	db	0
 37712                                  
 37713                                  switches:
 37714 0000359D 0000                    	dw	0
 37715                                  
 37716                                  ; the following are the recommended bpbs for the media that
 37717                                  ; we know of so far.
 37718                                  
 37719                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37720                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 37721                                  
 37722                                  ; 48 tpi diskettes
 37723                                  
 37724 0000359F 0002                    bpb48t	dw	512
 37725 000035A1 02                      	db	2
 37726 000035A2 0100                    	dw	1
 37727 000035A4 02                      	db	2
 37728 000035A5 7000                    	dw	112
 37729 000035A7 D002                    	dw	2*9*40 ; 720
 37730 000035A9 FD                      	db	0FDh
 37731 000035AA 0200                    	dw	2
 37732 000035AC 0900                    	dw	9
 37733 000035AE 0200                    	dw	2
 37734 000035B0 00000000                	dd	0
 37735 000035B4 00000000                        dd      0
 37736                                  
 37737                                  ; 96tpi diskettes
 37738                                  
 37739 000035B8 0002                    bpb96t:	dw	512
 37740 000035BA 01                      	db	1
 37741 000035BB 0100                    	dw	1
 37742 000035BD 02                      	db	2
 37743 000035BE E000                    	dw	224
 37744 000035C0 6009                    	dw	2*15*80 ; 2400
 37745 000035C2 F9                      	db	0F9h
 37746 000035C3 0700                    	dw	7
 37747 000035C5 0F00                    	dw	15
 37748 000035C7 0200                    	dw	2
 37749 000035C9 00000000                	dd	0
 37750 000035CD 00000000                        dd      0
 37751                                  
 37752                                  ; 3 1/2 inch diskette bpb
 37753                                  
 37754 000035D1 0002                    bpb35:	dw	512
 37755 000035D3 02                      	db	2
 37756 000035D4 0100                    	dw	1
 37757 000035D6 02                      	db	2
 37758 000035D7 7000                    	dw	112
 37759 000035D9 A005                    	dw	2*9*80 ; 1440
 37760 000035DB F9                      	db	0F9h
 37761 000035DC 0300                    	dw	3
 37762 000035DE 0900                    	dw	9
 37763 000035E0 0200                    	dw	2
 37764 000035E2 00000000                	dd	0
 37765 000035E6 00000000                        dd      0
 37766                                        
 37767 000035EA 0002                    bpb35h:	dw	512
 37768 000035EC 01                      	db	1
 37769 000035ED 0100                    	dw	1
 37770 000035EF 02                      	db	2
 37771 000035F0 E000                    	dw	224
 37772 000035F2 400B                    	dw	2*18*80 ; 2880
 37773 000035F4 F0                      	db	0F0h
 37774 000035F5 0900                    	dw	9
 37775 000035F7 1200                    	dw	18
 37776 000035F9 0200                    	dw	2
 37777 000035FB 00000000                	dd	0
 37778 000035FF 00000000                        dd      0
 37779                                  
 37780                                  ; m037 - BEGIN
 37781                                  
 37782 00003603 0002                    bpb288:	dw	512
 37783 00003605 02                      	db	2
 37784 00003606 0100                    	dw	1
 37785 00003608 02                      	db	2
 37786 00003609 F000                    	dw	240
 37787 0000360B 8016                    	dw	2*36*80 ; 5760
 37788 0000360D F0                      	db	0F0h
 37789 0000360E 0900                    	dw	9
 37790 00003610 2400                    	dw	36
 37791 00003612 0200                    	dw	2
 37792 00003614 00000000                	dd	0
 37793 00003618 00000000                        dd      0
 37794                                  
 37795                                  ; m037 - END
 37796                                  
 37797                                  ; 12/05/2019
 37798                                  
 37799                                  align 2
 37800                                  
 37801                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37802                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 37803                                  
 37804 0000361C [9F35]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 37805 0000361E [B835]                  	    dw	    bpb96t		; 96tpi drives
 37806 00003620 [D135]                  	    dw	    bpb35		; 3.5" drives
 37807                                  ; the following are not supported, so default to 3.5" media layout
 37808 00003622 [D135]                  	    dw	    bpb35		; not used - 8" drives
 37809 00003624 [D135]                  	    dw	    bpb35		; not used - 8" drives
 37810 00003626 [D135]                  	    dw	    bpb35		; not used - hard files
 37811 00003628 [D135]                  	    dw	    bpb35		; not used - tape drives
 37812 0000362A [EA35]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 37813 0000362C [D135]                  	    dw	    bpb35		; ERIMO				m037
 37814 0000362E [0336]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 37815                                  
 37816                                  switchlist: 
 37817 00003630 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 37818                                  
 37819                                  ;----------------------------------------------------------------------------
 37820                                  ; Messages
 37821                                  ;----------------------------------------------------------------------------
 37822                                  
 37823                                  ; 19/04/2019 - Retro DOS v4.0
 37824                                  
 37825                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 37826                                  
 37827 00003639 00                      	db 	0
 37828                                  
 37829                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37830                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 37831                                  
 37832                                  badopm:
 37833 0000363A 0D0A                    	db	0Dh,0Ah 
 37834 0000363C 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 37834 00003645 7A656420636F6D6D61-
 37834 0000364E 6E6420696E20434F4E-
 37834 00003657 4649472E535953     
 37835                                  crlfm:
 37836 0000365E 0D0A24                  	db	0Dh,0Ah,'$'
 37837                                  badparm:
 37838 00003661 0D0A                    	db	0Dh,0Ah
 37839 00003663 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 37839 0000366C 6E64206F7220706172-
 37839 00003675 616D6574657273202D-
 37839 0000367E 2024               
 37840                                  badsiz_pre:
 37841 00003680 0D0A                    	db	0Dh,0Ah
 37842 00003682 536563746F72207369-     	db	'Sector size too large in file $'
 37842 0000368B 7A6520746F6F206C61-
 37842 00003694 72676520696E206669-
 37842 0000369D 6C652024           
 37843                                  badld_pre:
 37844 000036A1 0D0A                    	db	0Dh,0Ah
 37845 000036A3 426164206F72206D69-     	db	'Bad or missing $'
 37845 000036AC 7373696E672024     
 37846                                  badcom:
 37847 000036B3 436F6D6D616E642049-     	db	'Command Interpreter',0
 37847 000036BC 6E7465727072657465-
 37847 000036C5 7200               
 37848                                  badcountry:
 37849 000036C7 0D0A                    	db	0Dh,0Ah
 37850 000036C9 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 37850 000036D2 6F756E74727920636F-
 37850 000036DB 6465206F7220636F64-
 37850 000036E4 6520706167650D0A24 
 37851                                  badcountrycom:
 37852 000036ED 0D0A                    	db	0Dh,0Ah
 37853 000036EF 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 37853 000036F8 434F554E5452592063-
 37853 00003701 6F6D6D616E640D0A24 
 37854                                  insufmemory:
 37855 0000370A 0D0A                    	db	0Dh,0Ah
 37856 0000370C 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 37856 00003715 656E74206D656D6F72-
 37856 0000371E 7920666F7220434F55-
 37856 00003727 4E5452592E53595320-
 37856 00003730 66696C650D0A24     
 37857                                  badmem:
 37858 00003737 0D0A                    	db	0Dh,0Ah
 37859 00003739 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 37859 00003742 74696F6E20746F6F20-
 37859 0000374B 6C6172676520666F72-
 37859 00003754 206D656D6F72790D0A-
 37859 0000375D 24                 
 37860                                  badblock:
 37861 0000375E 0D0A                    	db	0Dh,0Ah
 37862 00003760 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 37862 00003769 626C6F636B20646576-
 37862 00003772 696365730D0A24     
 37863                                  badstack:
 37864 00003779 0D0A                    	db	0Dh,0Ah
 37865 0000377B 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 37865 00003784 5441434B2070617261-
 37865 0000378D 6D65746572730D0A24 
 37866                                  	; 18/12/2022
 37867                                  ;badorder:
 37868                                  	;db	0Dh,0Ah
 37869                                  	;db	'Incorrect order in CONFIG.SYS line $'
 37870                                  errorcmd:
 37871 00003796 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 37871 0000379F 434F4E4649472E5359-
 37871 000037A8 53206C696E652024   
 37872                                  
 37873                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37874                                  %if 0
 37875                                  
 37876                                  OnOff:	db	'ON'
 37877                                  OnOff2:	db	'OFF'
 37878                                  
 37879                                  StartMsg:
 37880                                  	db	'Starting MS-DOS...',0Dh,0Ah
 37881                                  	db	0Ah,0
 37882                                  _$PauseMsg:
 37883                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 37884                                  _$CleanMsg:
 37885                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 37886                                  _$InterMsg:
 37887                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 37888                                  _$MenuHeader:
 37889                                  	db	0Dh,0Ah
 37890                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 37891                                  	db	'  =======================',0Dh,0Ah,'$'
 37892                                  _$MenuPrmpt:
 37893                                  	db	'  Enter a choice: $'
 37894                                  _$StatusLine:
 37895                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 37896                                  	db	'and AUTOEXEC.BAT [ ]$'
 37897                                  _$InterPrmpt:
 37898                                  	db	' [Y,N]?$'
 37899                                  _$YES:	db	'YES$'
 37900                                  _$NO:	db	'NO $'
 37901                                  _$TimeOut:
 37902                                  	db	'Time remaining: $'
 37903                                  badcomprmpt:
 37904                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 37905                                  	db	0Dh,0Ah,'$'
 37906                                  _$AutoPrmpt:
 37907                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 37908                                  
 37909                                  %endif
 37910                                  
 37911                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37912                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 37913                                  
 37914                                  TooManyDrivesMsg:
 37915 000037B0 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 37915 000037B9 4C6F676963616C2064-
 37915 000037C2 726976657320706173-
 37915 000037CB 74205A3A2065786973-
 37915 000037D4 7420616E642077696C-
 37915 000037DD 6C2062652069676E6F-
 37915 000037E6 7265640D0A24       
 37916                                  
 37917                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 37918                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 37919                                  	;db	7 dup(0)
 37920                                  
 37921                                  	;times	7 db 0
 37922                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37923                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 37924                                  	; 09/12/2022
 37925                                  	;times 4 db 0
 37926                                  
 37927                                  ;----------------------------------------------------------------------------
 37928                                  		; 09/12/2022
 37929                                  		;db 0
 37930                                  
 37931                                  number3div	equ ($-SYSINIT$)
 37932                                  number3mod	equ (number3div % 16)
 37933                                  
 37934                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 37935 000037EC 00<rep 4h>              		times (16-number3mod) db 0
 37936                                  %endif
 37937                                  
 37938                                  ;----------------------------------------------------------------------------
 37939                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37940                                  ;----------------------------------------------------------------------------
 37941                                  
 37942                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 37943                                  
 37944                                  ;----------------------------------------------------------------------------
 37945                                  ; 20/04/2019 - Retro DOS v4.0
 37946                                  
 37947                                  ; 09/12/2022
 37948                                  ;
 37949                                  ;bss_start:
 37950                                  ;
 37951                                  ;ABSOLUTE bss_start
 37952                                  ;
 37953                                  ;alignb 16
 37954                                  
 37955                                  SI_end:  ; SI_end equ $
 37956                                  
 37957                                  ;----------------------------------------------------------------------------
 37958                                  
 37959                                  ;sysinitseg	ends
 37960                                  
 37961                                  ; ***************************************************************************
 37962                                  
 37963                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37964                                  
 37965                                  SYSINITSIZE	equ SI_end - SYSINIT$
 37966                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 37967                                  
 37968                                  ;----------------------------------------------------------------------------
 37969                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 37970                                  ;----------------------------------------------------------------------------
 37971                                  
 37972                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 37973                                  ;----------------------------------------------------------------------------
 37974                                  ;----------------------------------------------------------------------------
 37975                                  
 37976                                  ; ----------------------------------------------------------------------------
 37977                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 37978                                  ; ----------------------------------------------------------------------------
 37979                                  ; 18/03/2019 - Retro DOS v4.0 
 37980                                  ; 11/06/2018 - Retro DOS v3.0 
 37981                                  
 37982                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 37983                                  		;; 28/06/2019 ('msdos6.s') 
 37984                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 37985                                  		
 37986                                  		; 27/09/2023 (BugFix)
 37987                                  		; 25/09/2023
 37988                                  		; 29/12/2022
 37989 000037F0 <bin 8E5Ah>             		incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 37990                                  		
 37991                                  		;; 28/12/2022 (BugFix)
 37992                                  		;; 22/12/2022
 37993                                  		;; 21/12/2022 ('msdos5.s')
 37994                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 37995                                  	
 37996                                  ; 28/09/2023	
 37997                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 37998                                  
 37999                                  align 2
 38000                                  
 38001                                  ; 21/12/2022
 38002                                  ;;END_OF_KERNEL:
 38003                                  ;END_OF_KERNEL equ $
 38004                                  
 38005                                  ; 28/09/2023
 38006                                  S3SIZE equ $-$$
 38007                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 38008                                  
 38009                                  ;=============================================================================
 38010                                  ;	END
 38011                                  ;=============================================================================
 38012                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 38013                                  ; ------------------------------
 38014                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
