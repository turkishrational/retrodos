     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 11/09/2023 - Retro DOS v4.1 (Previous: 28/08/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]9D02              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]9D02              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [A512]9D02              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [D014]9D02              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [240A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 3A04                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  	
  3632                                  ; 20/12/2022
  3633                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3634                                  %if 0	
  3635                                  		cli
  3636                                  
  3637                                  		push	ax
  3638                                  		xor	ax, ax
  3639                                  		mov	ds, ax
  3640                                  		pop	ax
  3641                                  %endif
  3642                                  
  3643                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3644                                  
  3645                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3646                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3647                                  
  3648                                  ;-----------------------------------------------------------------------------
  3649                                  ; initialization - stage 1
  3650                                  ;-----------------------------------------------------------------------------
  3651                                  ; 02/06/2018 - Retro DOS v3.0
  3652                                  		
  3653                                  		; 21/12/2022
  3654                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3655                                  		;mov	bx, 60h
  3656                                  		;mov	es, bx
  3657                                  		;mov	si, bp
  3658                                  		;sub	di, di
  3659                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3660                                  		;;mov	cl, 35
  3661                                  		;rep	movsw
  3662                                  
  3663 00001763 0E                      		push	cs
  3664 00001764 1F                      		pop	ds
  3665                                  
  3666                                  		; 20/03/2019 - Retro DOS v4.0
  3667                                  		;cli		; turn interrupts off while manupulating stack
  3668                                  		;mov	ss, cx	; set stack segment register
  3669 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3670                                  		;sti		; turn interrupts on
  3671                                  
  3672                                  		; 27/03/2018
  3673                                  		;mov	cx, KERNEL_SIZE	; words !
  3674                                  
  3675                                  		; 20/03/2019
  3676 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3677                                  
  3678                                  		; 21/12/2022
  3679                                  		; 07/04/2018
  3680 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3681                                  		;mov	bl, KERNEL_SEGMENT
  3682 0000176E 8EC3                    		mov	es, bx
  3683 00001770 31FF                    		xor	di, di
  3684 00001772 89FE                    		mov	si, di
  3685                                  		
  3686                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3687                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3688 00001774 F3A5                    		rep	movsw
  3689                                  
  3690                                  		; 20/03/2019 - Retro DOS v4.0
  3691 00001776 53                      		push	bx
  3692 00001777 68[7B17]                		push	init0
  3693 0000177A CB                      		retf
  3694                                  init0:	
  3695                                  		; 20/12/2022
  3696                                  		; (combined kernel file > 64KB)
  3697                                  
  3698                                  		; 20/03/2019
  3699 0000177B B520                    		mov	ch, 20h
  3700 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3701                                  		;mov	cx, 1070h
  3702 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3703 00001782 8EC1                    		mov	es, cx
  3704                                  		
  3705                                  		; 21/12/2022
  3706                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3707                                  
  3708 00001784 B9[FA46]                		mov	cx, KERNEL_SIZE - 32768
  3709                                  		;xor	si, si
  3710                                  		;xor	di, di
  3711 00001787 F3A5                    		rep	movsw
  3712                                  
  3713                                  		; 17/06/2018 
  3714 00001789 8EDB                    		mov	ds, bx
  3715                                  		; 21/03/2019
  3716 0000178B 8EC3                    		mov	es, bx
  3717                                  ;init0:
  3718                                  ;		;push	es
  3719                                  ;		push	bx ; 20/03/2019
  3720                                  ;		push	init1 ; 07/04/2018
  3721                                  ;		retf	; jump to 0070h:init1
  3722                                  ;init:
  3723                                  init1:
  3724                                  		; 20/12/2022
  3725                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3726                                  		; for full MSDOS compatibility.
  3727                                  
  3728 0000178D 8EC1                    		mov	es, cx ; 0
  3729 0000178F 8ED9                    		mov	ds, cx ; 0
  3730                                  
  3731 00001791 B82205                  		mov	ax, SEC9
  3732                                  
  3733                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3734 00001794 B378                    		mov	bl, 1Eh*4
  3735                                  				; INT 1Eh points to diskette parms table
  3736                                  
  3737                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3738                                   		; (do not move the DPT if is not original ROMBIOS table)
  3739                                  
  3740                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3741                                  		;;jnz	short mov_dpt
  3742                                  
  3743                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3744                                  		;je	short dont_mov_dpt
  3745                                  
  3746                                  		;mov	si, [bx] ; [1Eh*4]		
  3747                                  ;mov_dpt:
  3748                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3749 00001796 C537                    		lds	si, [bx]
  3750 00001798 89C7                    		mov	di, ax  ; SEC9
  3751 0000179A B10B                    		mov	cl, 11
  3752                                  		;cld
  3753 0000179C F3A4                    		rep	movsb
  3754                                  
  3755                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3756 0000179E 8ED9                    		mov	ds, cx ; 0
  3757 000017A0 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3758 000017A2 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3759                                  ;dont_mov_dpt:
  3760                                  
  3761                                  ; 20/12/2022 - Retro DOS v4.0
  3762                                  %if 0
  3763                                  		; 27/12/2018 - Retro DOS v4.0
  3764                                  		; 'Starting MS-DOS...' message
  3765                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3766                                  		; (0070h:96A3h)
  3767                                  
  3768                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3769                                  		mov     ah, 0Eh
  3770                                  		;bh = 0
  3771                                          	mov     bl, 7		; "normal" attribute and page
  3772                                  startmsg_nxt_chr:  
  3773                                  		lodsb
  3774                                  		or	al, al
  3775                                          	jz	short startmsg_ok
  3776                                         
  3777                                  		int	10h		; video write
  3778                                          	jmp	short startmsg_nxt_chr
  3779                                  
  3780                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3781                                  
  3782                                  startmsg_ok:
  3783                                  
  3784                                  %endif
  3785                                  
  3786                                  ;-----------------------------------------------------------------------------
  3787                                  ; initialization - stage 2
  3788                                  ;-----------------------------------------------------------------------------
  3789                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3790                                  
  3791                                  
  3792                                  ; 19/03/2018
  3793                                  ; Retro DOS v2.0 (24/02/2018)
  3794                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3795                                  
  3796                                  ;------------------------------------------------------------------------
  3797                                  ;									:
  3798                                  ;	System initialization						:
  3799                                  ;									:
  3800                                  ;	The entry conditions are established by the bootstrap		:
  3801                                  ;	loader and are considered unknown. The following jobs		:
  3802                                  ;	will be performed by this module:				:
  3803                                  ;									:
  3804                                  ;	1.	All device initialization is performed			:
  3805                                  ;	2.	A local stack is set up and DS:SI are set		:
  3806                                  ;		to point to an initialization table. Then		:
  3807                                  ;		an inter-segment call is made to the first		:
  3808                                  ;		byte of the dos 					:
  3809                                  ;	3.	Once the dos returns from this call the ds		:
  3810                                  ;		register has been set up to point to the start		:
  3811                                  ;		of free memory. The initialization will then		:
  3812                                  ;		load the command program into this area 		:
  3813                                  ;		beginning at 100 hex and transfer control to		:
  3814                                  ;		this program.						:
  3815                                  ;									:
  3816                                  ;------------------------------------------------------------------------
  3817                                  		
  3818                                  		; 20/12/2022
  3819                                  		; ----------------------
  3820                                  		; Registers
  3821                                  		; ----------------------
  3822                                  		; DL = [bsDriveNumber]
  3823                                  		; DH = [bsMedia]
  3824                                  		; DS = 0, ES = 0, SS = 0
  3825                                  		; BP = 7C00h
  3826                                  		; SP = 700h
  3827                                  		; ----------------------
  3828                                  		; CX = 0				
  3829                                  
  3830                                  ; 02/10/2022 - 20/12/2022
  3831                                  ; ------------------------------------------------------------------------------
  3832                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3833                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3834                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3835                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3836                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3837                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3838                                  ; ------------------------------------------------------------------------------
  3839                                  
  3840                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3841                                  ;
  3842                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3843                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3844                                  ;;	data sector of the bios.
  3845                                  ;
  3846                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3847                                  ;		mov	[cs:bios_l], bx
  3848                                  
  3849                                  ; with the following information from msload, we don't need the
  3850                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3851                                  ;     limitation of msbio.com file.
  3852                                  
  3853                                  		; 21/12/2022
  3854 000017A5 FA                      		cli
  3855                                  
  3856 000017A6 0E                      		push	cs		; Save a peck of interrupt vectors...
  3857 000017A7 07                      		pop	es
  3858                                  		;push	cx
  3859                                  		;push	di
  3860                                  		; 20/12/2022
  3861 000017A8 B105                    		mov	cl, 5
  3862                                  		;mov	cx, 5		; NUMROMVECTORS
  3863                                  					; no. of rom vectors to	be saved
  3864                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3865 000017AA BE[0001]                		mov	si, RomVectors
  3866                                  next_int_:		
  3867 000017AD 2E                      		cs	; 16/10/2022
  3868 000017AE AC                      		lodsb		
  3869                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3870 000017AF 98                      		cbw			; ax = interrupt number
  3871 000017B0 D1E0                    		shl	ax, 1
  3872 000017B2 D1E0                    		shl	ax, 1		; int no * 4
  3873 000017B4 89C7                    		mov	di, ax		; interrupt vector address
  3874 000017B6 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3875                                  					; saving address in di
  3876                                  		;lodsw			; movsw
  3877                                  		;stosw
  3878                                  		;lodsw			; movsw
  3879                                  		;stosw			; save the vector
  3880                                  		; 20/12/2022
  3881 000017B8 A5                      		movsw
  3882 000017B9 A5                      		movsw		
  3883                                  
  3884 000017BA 87F7                    		xchg	si, di
  3885 000017BC E2EF                    		loop	next_int_
  3886                                  		
  3887                                  		;pop	di
  3888                                  		;pop	cx
  3889                                  
  3890                                  ; we need to save int13 in two places in case we are running on an at.
  3891                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3892                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3893                                  ; rom int13 routine, we must have that rom address also stored away.
  3894                                  
  3895                                  		; 20/12/2022
  3896                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3897                                  		;mov	[cs:Orig13], ax
  3898                                  		;mov	ax, [cs:Old13+2]
  3899                                  		;mov	[cs:Orig13+2], ax
  3900                                  
  3901                                  		; 16/10/2022
  3902 000017BE C7064C00[7407]          		mov	word [13h*4], block13
  3903                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3904                                  					; set up int 13	for new	action
  3905 000017C4 8C0E4E00                		mov	[13h*4+2], cs
  3906                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3907 000017C8 C7065400[4808]          		mov	word [15h*4], Int15
  3908                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3909                                  					; set up int 15	for new	action
  3910 000017CE 8C0E5600                		mov	[15h*4+2], cs
  3911                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3912 000017D2 C7066400[F907]          		mov	word [19h*4], int19
  3913                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3914                                  					; set up int 19	for new	action
  3915 000017D8 8C0E6600                		mov	[19h*4+2], cs
  3916                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3917                                  
  3918                                  		; 20/12/2022
  3919 000017DC 0E                      		push	cs
  3920 000017DD 1F                      		pop	ds
  3921                                  		
  3922 000017DE A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3923 000017E1 A3[B400]                		mov	[Orig13], ax
  3924 000017E4 A1[0801]                		mov	ax, [Old13+2]
  3925 000017E7 A3[B600]                		mov	[Orig13+2], ax
  3926                                  					; ;
  3927 000017EA FB                      		sti
  3928 000017EB CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3929                                  					; Return: AX = equipment flag bits
  3930                                  
  3931                                  ; we have to support a system that does not have any diskette
  3932                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3933                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3934                                  ; otherwise, the system has only hardfiles.
  3935                                  ;
  3936                                  ; important thing is that still, for compatibility reason, the drive letter
  3937                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3938                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3939                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3940                                  ; drives will get "invalid drive letter ..." message. we are going to
  3941                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3942                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3943                                  
  3944                                  ; check the register returned by the equipment determination interrupt
  3945                                  ; we have to handle the case of no diskettes in the system by faking
  3946                                  ; two dummy drives.
  3947                                  ;
  3948                                  ; if the register indicates that we do have floppy drives we don't need
  3949                                  ; to do anything special.
  3950                                  ;
  3951                                  ; if the register indicates that we don't have any floppy drives then
  3952                                  ; what we need to do is set the fakefloppydrv variable, change the
  3953                                  ; register to say that we do have floppy drives and then go to execute
  3954                                  ; the code which starts at notsingle. this is because we can skip the
  3955                                  ; code given below which tries to find if there are one or two drives
  3956                                  ; since we already know about this.
  3957                                  
  3958                                  		; 06/05/2019 - Retro DOS v4.0
  3959 000017ED 88C1                    		mov	cl, al
  3960                                  
  3961                                  		; 12/12/2022
  3962 000017EF A801                    		test	al, 1
  3963                                  		;test	ax, 1		; floppy drives	present	?
  3964 000017F1 751F                    		jnz	short normalfloppydrv ;	yes.
  3965                                  
  3966                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3967                                  ; whether it is an old ROM BIOS or a new one
  3968                                  ;
  3969                                  ; WARNING !!!
  3970                                  ;
  3971                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3972                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3973                                  
  3974                                  		; 20/12/2022
  3975                                  		;push	ax
  3976                                  		;push	bx
  3977                                  		;push	cx
  3978 000017F3 52                      		push	dx
  3979                                  		;push	di
  3980 000017F4 06                      		push	es
  3981 000017F5 B408                    		mov	ah, 8
  3982 000017F7 B200                    		mov	dl, 0
  3983 000017F9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3984                                  					; DL = drive number
  3985                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3986                                  					; DL = number of consecutive drives
  3987                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3988 000017FB 7202                    		jc	short _gdskp_error
  3989                                  		;;mov	[cs:flp_drvs], dl
  3990                                  		; 20/12/2022
  3991                                  		; ds = cs
  3992                                  		;mov	[flp_drvs], dl
  3993 000017FD 88D1                    		mov	cl, dl
  3994                                  _gdskp_error:	
  3995                                  		; 20/12/2022			
  3996 000017FF 07                      		pop	es
  3997                                  		;pop	di
  3998 00001800 5A                      		pop	dx
  3999                                  		;pop	cx
  4000                                  		;pop	bx
  4001                                  		;pop	ax
  4002                                  		
  4003 00001801 720F                    		jc	short normalfloppydrv
  4004                                  					; if error it is an old ROM BIOS
  4005                                  					; so, lets assume that ROM BIOS lied
  4006                                  		; 20/12/2022
  4007                                  		; ds = cs
  4008                                  		;cmp	byte [flp_drvs], 0
  4009                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4010                                  		;jz	short _set_fake_flpdrv
  4011                                  		;;mov	al, [cs:flp_drvs]
  4012                                  		;mov	al, [flp_drvs]
  4013                                  		;;dec	al		; make it zero based
  4014                                  		;; 18/12/2022
  4015                                  		;dec	ax
  4016                                  		;jmp	short got_num_flp_drvs
  4017                                  		
  4018                                  		; 20/12/2022
  4019 00001803 08C9                    		or	cl, cl ; [flp_drvs]
  4020 00001805 7403                    		jz	short _set_fake_flpdrv		
  4021 00001807 49                      		dec	cx	
  4022 00001808 EB0C                    		jmp	short got_num_flp_drvs
  4023                                  ; ----------------------------------------------------------------------------
  4024                                  
  4025                                  _set_fake_flpdrv:
  4026                                  		;20/12/2022
  4027                                  		; ds = cs
  4028 0000180A FEC1                    		inc	cl	; cl = 1
  4029 0000180C 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4030                                  		;mov	byte [fakefloppydrv], 1		
  4031                                  		;;mov	byte [cs:fakefloppydrv], 1
  4032                                  					; we don't have any floppy drives.
  4033                                  		; 20/12/2022
  4034                                  		;mov	ax, 1
  4035 00001810 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4036                                  ; ----------------------------------------------------------------------------
  4037                                  
  4038                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4039                                  		; 20/12/2022
  4040                                  		;rol	al, 1		; there	exist floppy drives.
  4041                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4042 00001812 D0C1                    		rol	cl, 1
  4043 00001814 D0C1                    		rol	cl, 1
  4044                                  got_num_flp_drvs:			
  4045                                  		;;and	ax, 3		; only look at bits 0 &	1
  4046                                  		; 18/12/2022
  4047                                  		;and	al, 3
  4048                                  		; 20/12/2022
  4049 00001816 80E103                  		and	cl, 3
  4050 00001819 7505                    		jnz	short notsingle	; zero means single drive system
  4051                                  		; 20/12/2022
  4052 0000181B 41                      		inc	cx
  4053                                  		;inc	ax		; pretend it's a two drive system
  4054                                  settwodrive:				; set this to two fakedrives
  4055                                  		; 20/12/2022
  4056                                  		; ds = cs
  4057 0000181C FE06[7800]              		inc	byte [single]
  4058                                  		;inc	byte [cs:single] ; remember this
  4059                                  notsingle:	
  4060                                  		; 20/12/2022			
  4061                                  		;inc	ax		; ax has number	of drives, 2-4
  4062                                  		;			; is also 0 indexed boot drive if we
  4063                                  		;			; booted off hard file
  4064                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4065                                  		; 20/12/2022
  4066 00001820 FEC1                    		inc	cl	; cl >= 2
  4067                                  
  4068                                  ; 16/10/2022
  4069                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4070                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4071                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4072                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4073                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4074                                  SEC9	EQU	522h	; address of disk parameters
  4075                                  CHROUT	EQU	29h
  4076                                  LSTDRV	EQU     504h
  4077                                  
  4078                                  ; determine whether we booted from floppy or hard disk...
  4079                                  
  4080                                  		; 20/12/2022
  4081 00001822 88C8                    		mov	al, cl	; 26/05/2019
  4082                                  
  4083 00001824 F6C280                  		test	dl, 80h		; boot from floppy ?
  4084 00001827 7502                    		jnz	short gothrd	; no.
  4085 00001829 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4086                                  gothrd:					
  4087                                  
  4088                                  ; MSDOS 6.0
  4089                                  ;   ax = 0-based drive we booted from
  4090                                  ;   bios_l, bios_h set.
  4091                                  ;   cl = number of floppies including fake one
  4092                                  ;   ch = media byte
  4093                                  
  4094                                  ; Retro DOS 4.0 - 27/12/2018 
  4095                                  ;  (from Retro DOS v2.0 boot sector)
  4096                                  ;   dl = int 13 drive number we booted from
  4097                                  ;   dh = media byte
  4098                                  
  4099                                  		; 20/12/2022
  4100 0000182B 88F5                    		mov	ch, dh		; 01/07/2018
  4101                                  
  4102                                  		; cl = number of floppies
  4103                                  		; ch = media byte
  4104                                  
  4105                                  		; set up local stack
  4106                                  
  4107                                  		; 20/12/2022
  4108                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4109                                  					; bios_l, bios_h set.
  4110                                  					; cl = number of floppies including fake one
  4111                                  					; ch = media byte
  4112                                  		; 20/12/2022
  4113                                  		; es = ds = cs
  4114                                  		; ss = 0
  4115                                  		; sp = 700h
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;cli
  4119                                  		;mov	ss, dx		; set stack segment and stack pointer
  4120                                  		;mov	sp, 700h
  4121                                  		;sti
  4122                                  
  4123 0000182D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4124                                  		
  4125 0000182E 88EC                    		mov	ah, ch		; FAT ID to AH
  4126 00001830 50                      		push	ax ; (**)	; save boot drive number and media byte
  4127                                  		
  4128                                  ; let model_byte, secondary_model_byte be set here!!!
  4129                                  
  4130 00001831 B4C0                    		mov	ah, 0C0h
  4131 00001833 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4132 00001835 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4133 00001837 80FC00                  		cmp	ah, 0
  4134 0000183A 7510                    		jnz	short no_rom_system_conf
  4135                                  
  4136                                  ;		; 20/12/2022
  4137                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4138                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4139                                  ;
  4140                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4141                                  ;
  4142                                  ;		on return:
  4143                                  ;		CF = 0 if successful
  4144                                  ;		   = 1 if error
  4145                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4146                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4147                                  ;
  4148                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4149                                  ;
  4150                                  ;		Offset Size	     Description
  4151                                  ;
  4152                                  ;		  00   word   length of descriptor (8 minimum)
  4153                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4154                                  ;		  03   byte   secondary model byte
  4155                                  ;		  04   byte   BIOS revision level (zero based)
  4156                                  ;		  05   byte   feature information, see below
  4157                                  ;		  06   dword  reserved
  4158                                  
  4159                                  		; 20/12/2022
  4160                                  		; ds = cs
  4161 0000183C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4162 00001840 A2[3E06]                		mov	[model_byte], al
  4163                                  		;mov	[cs:model_byte], al
  4164                                  					; get/save model byte
  4165 00001843 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4166 00001847 A2[3F06]                		mov	[secondary_model_byte], al
  4167                                  		;mov	[cs:secondary_model_byte], al
  4168                                  					; get/save secondary model byte
  4169 0000184A EB0C                    		jmp	short turn_timer_on
  4170                                  ;-----------------------------------------------------------------------------
  4171                                  
  4172                                  no_rom_system_conf:			
  4173 0000184C BEFFFF                  		mov	si, 0FFFFh
  4174 0000184F 8EC6                    		mov	es, si
  4175                                  		; 20/12/2022
  4176 00001851 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4177 00001855 A2[3E06]                		mov	[model_byte], al
  4178                                  		;mov	[cs:model_byte], al ; save model byte
  4179                                  turn_timer_on:				
  4180 00001858 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4181 0000185A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4182                                  					; AKPORT
  4183                                  
  4184                                  ; some olivetti m24 machines have an 8530 serial communications
  4185                                  ; chip installed at io address 50h and 52h. if we're running
  4186                                  ; on one of those, we must inhibit the normal aux port initialization
  4187                                  
  4188                                  		; 20/12/2022
  4189                                  		; ds = cs
  4190 0000185C 803E[3E06]00            		cmp	byte [model_byte], 0
  4191                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4192 00001861 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4193                                  					; (except olivetti m24)
  4194 00001863 E466                    		in	al, 66h		; is 8530 installed?
  4195 00001865 A820                    		test	al, 20h
  4196 00001867 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4197 00001869 B00F                    		mov	al, 0Fh		; double check
  4198 0000186B E650                    		out	50h, al
  4199 0000186D E450                    		in	al, 50h
  4200 0000186F A801                    		test	al, 1		; this test was	copied from olivetti
  4201 00001871 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4202                                  
  4203                                  not_olivetti_m24:
  4204 00001873 B003                    		mov	al, 3		; init com4
  4205 00001875 E85C08                  		call	aux_init
  4206 00001878 B002                    		mov	al, 2		; init com3
  4207 0000187A E85708                  		call	aux_init
  4208 0000187D B001                    		mov	al, 1		; init com2
  4209 0000187F E85208                  		call	aux_init
  4210 00001882 30C0                    		xor	al, al		; init com1
  4211 00001884 E84D08                  		call	aux_init
  4212                                  
  4213                                  skip_aux_port_init:			
  4214 00001887 B002                    		mov	al, 2		; init lpt3
  4215 00001889 E84008                  		call	print_init
  4216 0000188C B001                    		mov	al, 1		; init lpt2
  4217 0000188E E83B08                  		call	print_init
  4218 00001891 30C0                    		xor	al, al		; init lpt1
  4219 00001893 E83608                  		call	print_init
  4220                                  
  4221 00001896 31D2                    		xor	dx, dx	; 0
  4222 00001898 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4223 0000189A 8EC2                    		mov	es, dx
  4224 0000189C 31C0                    		xor	ax, ax
  4225                                  		; 16/10/2022
  4226 0000189E BF3405                  		mov	di, INITSPOT	; 0534h
  4227                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4228                                  					; IBM wants 4 zeros here
  4229 000018A1 AB                      		stosw
  4230 000018A2 AB                      		stosw
  4231 000018A3 8CC8                    		mov	ax, cs		; fetch	segment
  4232 000018A5 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4233                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4234                                  					; break	entry point
  4235 000018AB A36E00                  		mov	[BRKADR+2], ax		
  4236                                  		;mov	ds:6Eh,	ax	; vector for break
  4237 000018AE C706A400[6207]          		mov	word [CHROUT*4], outchr
  4238                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4239 000018B4 A3A600                  		mov	[CHROUT*4+2], ax
  4240                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4241                                  
  4242 000018B7 BF0400                  		mov	di, 4
  4243 000018BA BB[F406]                		mov	bx, intret ; 19/10/2022
  4244                                  		;mov	bx, offset intret ; intret (cs:intret)
  4245                                  					; will initialize rest of interrupts
  4246 000018BD 93                      		xchg	ax, bx
  4247 000018BE AB                      		stosw			; location 4
  4248 000018BF 93                      		xchg	ax, bx		; cs:
  4249 000018C0 AB                      		stosw			; int 1	; location 6
  4250 000018C1 83C704                  		add	di, 4
  4251 000018C4 93                      		xchg	ax, bx
  4252 000018C5 AB                      		stosw			; location 12
  4253 000018C6 93                      		xchg	ax, bx		; cs:
  4254 000018C7 AB                      		stosw			; int 3	; location 14
  4255 000018C8 93                      		xchg	ax, bx
  4256 000018C9 AB                      		stosw			; location 16
  4257 000018CA 93                      		xchg	ax, bx		; cs:
  4258 000018CB AB                      		stosw			; int 4	; location 18
  4259                                  
  4260                                  
  4261                                  ;		; 20/12/2022
  4262                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4263                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4264                                  ;	
  4265                                  ;		50:00	byte	Print screen status byte
  4266                                  ;				 00 = PrtSc not active,
  4267                                  ;				 01 = PrtSc in progress
  4268                                  ;				 FF = error
  4269                                  ;		50:01  3 bytes	Used by BASIC
  4270                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4271                                  ;		50:05  10bytes	POST work area
  4272                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4273                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4274                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4275                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4276                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4277                                  ;		50:20	word	DOS dynamic storage
  4278                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4279                                  ;		50:30	4bytes	MODE command
  4280                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4281                                  
  4282 000018CC 89160005                		mov	[0500h], dx ; 0
  4283                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4284 000018D0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4285                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4286                                  
  4287                                  ; we need to initialize the cs:motorstartup variable from the disk
  4288                                  ; parameter table at sec9. the offsets in this table are defined in
  4289                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4290                                  
  4291 000018D4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4292                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4293                                  					; [522h+0Ah]
  4294                                  		; 20/12/2022
  4295                                  		; ds = 0
  4296                                  
  4297 000018D7 2EA2[2601]              		mov	[cs:motorstartup], al
  4298 000018DB 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4299 000018E1 720B                    		jb	short no_diddle	; no
  4300 000018E3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4301                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4302                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4303 000018E9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4304                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4305                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4306                                  no_diddle:				
  4307 000018EE CD12                    		int	12h		; MEMORY SIZE -
  4308                                  					; Return: AX = number of contiguous 1K blocks of memory
  4309 000018F0 B106                    		mov	cl, 6
  4310 000018F2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4311                                  		
  4312                                  		; 20/12/2022
  4313                                  		; 03/07/2018 - 27/12/2018
  4314                                  		;pop	cx ; (**)
  4315                                  		;mov	[cs:drvfat], cx
  4316                                  		
  4317 000018F4 50                      		push	ax ; (*)	; save real top	of memory
  4318                                  
  4319                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4320                                  
  4321                                  ;M068 - BEGIN
  4322                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4323                                  
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327                                  		;push	ds
  4328                                  		;push	bx		; pushes not required but since this
  4329                                  					; happens to be a last minute change
  4330                                  					; & since it is only init code.
  4331                                  		;xor	bx, bx
  4332                                  		;mov	ds, bx
  4333                                  		
  4334                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4335 000018F5 8B1EBC00                		mov	bx, [2Fh*4]
  4336                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4337 000018F9 8E1EBE00                		mov	ds, [2Fh*4+2]
  4338 000018FD 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4339                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4340 00001902 750F                    		jnz	short SkipRPL
  4341 00001904 807F054C                		cmp	byte [bx+5], 'L'
  4342                                  		;cmp	byte ptr [bx+5], 'L'
  4343 00001908 7509                    		jnz	short SkipRPL
  4344 0000190A 89C2                    		mov	dx, ax		; get TOM into DX
  4345 0000190C B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4346 0000190F CD2F                    		int	2Fh		; Get new TOM from any RPL
  4347 00001911 89D0                    		mov	ax, dx
  4348                                  SkipRPL:	
  4349                                  		; 20/12/2022		
  4350                                  		;pop	bx
  4351                                  		;pop	ds
  4352                                  
  4353                                  ;M068 - END
  4354                                  		; 20/12/2022
  4355                                  		; 27/12/2018
  4356 00001913 0E                      		push	cs
  4357 00001914 1F                      		pop	ds
  4358                                  
  4359                                  		; 18/03/2019 - Retro DOS v4.0
  4360                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4361                                  		;mov	[cs:fatloc], ax	; location to read fat
  4362                                  
  4363                                  		; 01/07/2018
  4364                                  		; 08/04/2018
  4365                                  		; 28/03/2018
  4366                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4367 00001915 83E840                  		sub	ax, 64
  4368 00001918 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4369                                  		;mov	[cs:init_bootseg], ax
  4370                                  
  4371                                  		; 27/12/2018 - Retro DOS v4.0
  4372                                  		;pop	ax ; (*)	; get back real top of memory
  4373 0000191B 5A                      		pop	dx ; (*)
  4374                                  
  4375                                  		; 20/12/2022
  4376                                  		; 27/12/2018
  4377 0000191C 59                      		pop	cx ; (**)
  4378 0000191D 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4379                                  
  4380                                  		; 20/12/2022
  4381                                  
  4382                                  		;mov	dx, 46Dh	; SYSINIT segment
  4383 00001921 BA3A04                  		mov	dx, SYSINITSEG	; 17/10/2022
  4384 00001924 8EDA                    		mov	ds, dx
  4385                                  
  4386                                  ; set pointer to resident device driver chain
  4387                                  
  4388                                  		; 17/10/2022
  4389 00001926 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4390                                  		;mov	word [273h], res_dev_list
  4391                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4392                                  					; [SYSINIT+DEVICE_LIST]
  4393 0000192C 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4394                                  		;mov	[275h], cs
  4395                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4396                                  
  4397 00001930 A3[9202]                		mov	[MEMORYSIZE], ax
  4398                                  		;mov	[292h], ax
  4399                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4400                                  
  4401 00001933 FEC1                    		inc	cl
  4402 00001935 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4403                                  		;mov	[296h], cl
  4404                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4405                                  
  4406 00001939 C706[7102]BA07          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4407                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4408                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4409                                  					; dos_load_seg
  4410                                  
  4411                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4412                                  ; printer cards. we initialize this value to point to an iret only if
  4413                                  ;
  4414                                  ; 1) the original segment points to storage inside valid ram.
  4415                                  ;
  4416                                  ; 2) the original segment is 0F000:xxxx
  4417                                  
  4418                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4419                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4420                                  		;mov	es, ax
  4421                                  		; 20/12/2022
  4422                                  		;push	ds ; SYSINITSEG
  4423                                  		;pop	es
  4424 0000193F 8EC2                    		mov	es, dx ; SYSINITSEG
  4425 00001941 31C0                    		xor	ax, ax ; 0
  4426 00001943 8ED8                    		mov	ds, ax		; segment 0
  4427                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4428 00001945 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4429                                  		; 18/10/2022
  4430 00001948 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4431                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4432 0000194D 7605                    		jbe	short resetintf
  4433 0000194F 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4434 00001952 750A                    		jnz	short keepintf
  4435                                  resetintf:	
  4436 00001954 C7063C00[F406]          		mov	word [0Fh*4], intret			
  4437                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4438 0000195A 8C0E3E00                		mov	word [0Fh*4+2], cs
  4439                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4440                                  keepintf:				
  4441                                  ; end important
  4442                                  
  4443                                  ; 17/10/2022
  4444                                  ; 28/12/2018 - Retro DOS v4.0
  4445                                  
  4446                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4447                                  ;
  4448                                  ; we will check if the system has ibm extended keyboard by
  4449                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4450                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4451                                  ; for the extended keyboard function. use cx as the temporary register.
  4452                                  
  4453                                  		; 20/12/2022
  4454                                  		; ds = 0
  4455                                  		;xor	cx, cx
  4456                                  		;mov	ds, cx
  4457                                  
  4458 0000195E 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4459                                  
  4460                                  		; 20/12/2022
  4461                                  		; 20/03/2019
  4462 00001962 0E                      		push	cs
  4463 00001963 1F                      		pop	ds
  4464                                  
  4465                                  		;test	cl, 00010000b ; 10h
  4466 00001964 F6C110                  		test	cl, 10h		; extended keyboard ?
  4467 00001967 740A                    		jz	short org_key	; no, original keyboard
  4468                                  
  4469                                  		; 20/12/2022
  4470                                  		;  ds = cs
  4471 00001969 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4472 0000196E C606[E604]11            		mov	byte [keysts_func], 11h
  4473                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4474                                  		;mov	byte [cs:keysts_func], 11h
  4475                                  					; change for extended keyboard functions
  4476                                  org_key:
  4477                                  
  4478                                  ; 02/06/2018 - Retro DOS v3.0
  4479                                  
  4480                                  ;**************************************************************
  4481                                  ;	will initialize the number of drives
  4482                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4483                                  ;	the indications are as follows:
  4484                                  ;
  4485                                  ;	bits	7	6	drives
  4486                                  ;		0	0	1
  4487                                  ;		0	1	2
  4488                                  ;		1	0	3
  4489                                  ;		1	1	4
  4490                                  ;**************************************************************
  4491                                  		
  4492                                  		; 20/12/2022
  4493                                  		; ds = cs		
  4494                                  		;push	cs
  4495                                  		;pop	ds
  4496                                  		; 21/12/2022
  4497                                  		;push	cs
  4498                                  		;pop	es
  4499                                  
  4500 00001973 E89F08                  		call	cmos_clock_read	; If cmos clock	exists,
  4501                                  					; then set the system time according to	that.
  4502                                  					; also,	reset the cmos clock rate.
  4503                                  		; 18/10/2022
  4504                                  		;mov	word ptr BData_start, offset harddrv ;
  4505                                  					; set up pointer to hdrive
  4506                                  		; 02/10/2022
  4507 00001976 C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4508                                  		
  4509                                  		; 20/12/2022
  4510                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4511 0000197C 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4512 0000197D 30E4                    		xor	ah, ah		; chuck	fat id byte
  4513 0000197F A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4514 00001982 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4515 00001985 D1E0                    		shl	ax, 1
  4516 00001987 0106[4417]              		add	[last_dskdrv_table], ax
  4517                                  
  4518 0000198B B280                    		mov	dl, 80h
  4519 0000198D B408                    		mov	ah, 8
  4520 0000198F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4521                                  					; DL = drive number
  4522                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4523                                  					; DL = number of consecutive drives
  4524                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4525 00001991 7204                    		jc	short enddrv
  4526 00001993 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4527                                  enddrv:
  4528                                  		; 21/12/2022
  4529 00001997 0E                      		push	cs
  4530 00001998 07                      		pop	es
  4531                                  
  4532                                  ; scan the list of drives to determine their type. we have three flavors of
  4533                                  ; diskette drives:
  4534                                  ;
  4535                                  ;   48tpi drives    we do nothing special for them
  4536                                  ;   96tpi drives    mark the fact that they have changeline support.
  4537                                  ;   3.5"  drives    mark changeline support and small.
  4538                                  ;
  4539                                  ; the following code uses registers for certain values:
  4540                                  ;
  4541                                  ;   dl - physical drive
  4542                                  ;   ds:di - points to current bds
  4543                                  ;   cx - flag bits for bds
  4544                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4545                                  					
  4546 00001999 30D2                    		xor	dl, dl
  4547                                  
  4548                                  		; 20/12/2022
  4549                                  		; ds = cs
  4550                                  		; 17/06/2018		 
  4551                                  		;push	cs
  4552                                  		;pop	ds
  4553                                  
  4554 0000199B C606[2C01]09            		mov	byte [eot], 9
  4555 000019A0 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4556                                  					; to set aside two bdss	for the	two fake floppy	drives
  4557                                  
  4558                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4559                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4560                                  
  4561                                  ; check to see if we are faking floppy drives. if not we don't
  4562                                  ; do anything special. if we are faking floppy drives we need
  4563                                  ; to set aside two bdss for the two fake floppy drives. we
  4564                                  ; don't need to initalise any fields though. so starting at start_bds
  4565                                  ; use the link field in the bds structure to go to the second bds
  4566                                  ; in the list and initalise it's link field to -1 to set the end of
  4567                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4568                                  ; the bds for harddrives.
  4569                                  
  4570 000019A3 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4571 000019A8 750B                    		jnz	short loop_drive
  4572 000019AA 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4573                                  					; di <-	first bds link
  4574 000019AC 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4575                                  					; di <-	second bds link
  4576 000019AE C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4577 000019B2 E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4578                                  ;-----------------------------------------------------------------------------
  4579                                  
  4580                                  loop_drive:				
  4581 000019B5 3A16[7500]              		cmp	dl, [drvmax]
  4582 000019B9 7203                    		jb	short got_more
  4583 000019BB E90201                  		jmp	done_drives
  4584                                  ;-----------------------------------------------------------------------------
  4585                                  
  4586                                  got_more:				
  4587 000019BE 31C9                    		xor	cx, cx		; zero all flags
  4588 000019C0 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4589                                  					; get next bds
  4590 000019C2 B600                    		mov	dh, 0 ; ff48tpi
  4591                                  					; set form factor to 48	tpi
  4592 000019C4 C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4593                                  		
  4594                                  		; 20/12/2022
  4595                                  		;push	ds ; 11/05/2019	
  4596 000019C9 57                      		push	di
  4597 000019CA 52                      		push	dx
  4598 000019CB 51                      		push	cx
  4599 000019CC 06                      		push	es ; ((*)) ; 20/12/2022	
  4600                                  		
  4601 000019CD B408                    		mov	ah, 8
  4602 000019CF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4603                                  					; DL = drive number
  4604                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4605                                  					; DL = number of consecutive drives
  4606                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4607 000019D1 7276                    		jc	short noparmsfromrom
  4608                                  
  4609                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4610                                  ; in this case, we are going to put bogus informations to bds table.
  4611                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4612                                  ; they are calculated at the later time. this is just for the diagnostic
  4613                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4614                                  ; this should only happen with drive b.
  4615                                  
  4616 000019D3 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4617 000019D6 7505                    		jnz	short pfr_ok
  4618                                  
  4619                                  		;mov	ch, 39		; rom gave wrong info.
  4620                                  		;mov	cl, 9		; let's default to 360k.
  4621                                  		; 20/12/2022
  4622 000019D8 B90927                  		mov	cx, 2709h
  4623                                  
  4624 000019DB B601                    		mov	dh, 1
  4625                                  pfr_ok:					
  4626 000019DD FEC6                    		inc	dh		; make number of heads 1-based
  4627 000019DF FEC5                    		inc	ch		; make number of cylinders 1-based
  4628 000019E1 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4629 000019E5 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4630 000019E8 880E[D116]              		mov	[sec_trk], cl
  4631 000019EC 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4632                                  
  4633                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4634                                  
  4635 000019F0 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4636                                  		;jbe	short eot_ok
  4637                                  		; 09/12/2022
  4638                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4639                                  		; 14/08/2023
  4640 000019F4 7604                    		jbe	short eotok
  4641 000019F6 880E[2C01]              		mov	[eot], cl
  4642                                  ;eot_ok:					
  4643                                  eotok:
  4644                                  		; 20/12/2022
  4645 000019FA 07                      		pop	es ; ((*)) es = cs = ds		
  4646 000019FB 59                      		pop	cx
  4647 000019FC 5A                      		pop	dx
  4648 000019FD 5F                      		pop	di
  4649                                  		;pop	ds ; 20/12/2022
  4650                                  
  4651                                  ; Check	for presence of	changeline
  4652                                  
  4653 000019FE B415                    		mov	ah, 15h
  4654 00001A00 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4655                                  					; DL = drive ID
  4656                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4657                                  					; CX:DX	= number of sectors on the media
  4658 00001A02 720D                    		jc	short changeline_done
  4659 00001A04 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4660 00001A07 7508                    		jnz	short changeline_done
  4661                                  
  4662                                  ; we have a drive with change line support.
  4663                                  
  4664 00001A09 80C902                  		or	cl, 2		; fchangeline
  4665                                  					; signal type
  4666 00001A0C C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4667                                  
  4668                                  ; we now try to set up the form factor for the types of media that we know
  4669                                  ; and can recognise. for the rest, we set the form factor as "other".
  4670                                  
  4671                                  changeline_done:
  4672                                  
  4673                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4674                                  			
  4675 00001A11 803E[D216]28            		cmp	byte [num_cyln], 40
  4676 00001A16 750B                    		jnz	short try_80
  4677 00001A18 803E[D116]09            		cmp	byte [sec_trk], 9
  4678 00001A1D 7653                    		jbe	short nextdrive
  4679                                  gotother:				
  4680 00001A1F B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4681 00001A21 EB4F                    		jmp	short nextdrive
  4682                                  ;-----------------------------------------------------------------------------
  4683                                  
  4684                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4685                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4686                                  
  4687                                  try_80:					
  4688 00001A23 803E[D216]50            		cmp	byte [num_cyln], 80
  4689 00001A28 75F5                    		jnz	short gotother
  4690 00001A2A B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4691 00001A2C 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4692 00001A31 743F                    		jz	short nextdrive	; yeah,	go update
  4693                                  
  4694                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4695                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4696                                  		;mov	dh, ff144
  4697                                  		;cmp	byte [sec_trk], 18
  4698                                  		;je	short nextdrive
  4699                                  
  4700 00001A33 803E[D116]0F            		cmp	byte [sec_trk], 15
  4701 00001A38 740B                    		jz	short got96
  4702                                  		
  4703 00001A3A 803E[D116]09            		cmp	byte [sec_trk], 9
  4704 00001A3F 75DE                    		jnz	short gotother
  4705                                  		
  4706 00001A41 B602                    		mov	dh, 2 ; ffSmall
  4707 00001A43 EB2D                    		jmp	short nextdrive
  4708                                  ; ----------------------------------------------------------------------------
  4709                                  
  4710                                  got96:					
  4711 00001A45 B601                    		mov	dh, 1 ; ff96tpi
  4712 00001A47 EB29                    		jmp	short nextdrive
  4713                                  ; ----------------------------------------------------------------------------
  4714                                  
  4715                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4716                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4717                                  
  4718                                  noparmsfromrom:				
  4719                                  		; 20/12/2022
  4720 00001A49 07                      		pop	es ; ((*)) 
  4721 00001A4A 59                      		pop	cx
  4722 00001A4B 5A                      		pop	dx
  4723 00001A4C 5F                      		pop	di
  4724                                  		;pop	ds ; 20/12/2022
  4725                                  		
  4726 00001A4D B415                    		mov	ah, 15h
  4727 00001A4F CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4728                                  					; DL = drive ID
  4729                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4730                                  					; CX:DX	= number of sectors on the media
  4731 00001A51 721F                    		jc	short nextdrive
  4732                                  		
  4733 00001A53 80FC02                  		cmp	ah, 2		; is there changeline?
  4734 00001A56 751A                    		jnz	short nextdrive
  4735                                  
  4736 00001A58 80C902                  		or	cl, 2 ; fchangeline
  4737 00001A5B C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4738 00001A60 C606[D216]50            		mov	byte [num_cyln], 80
  4739 00001A65 B601                    		mov	dh, 1 ; ff96tpi 
  4740 00001A67 B00F                    		mov	al, 15
  4741 00001A69 3A06[2C01]              		cmp	al, [eot]
  4742 00001A6D 7603                    		jbe	short nextdrive ; eot_ok2
  4743 00001A6F A2[2C01]                		mov	[eot], al
  4744                                  ; ----------------------------------------------------------------------------
  4745                                  
  4746                                  ;eot_ok2:
  4747                                  nextdrive:				
  4748 00001A72 80C920                  		or	cl, 20h	; fi_own_physical
  4749                                  					; set this true	for all	drives
  4750 00001A75 88D7                    		mov	bh, dl		; save int13 drive number
  4751                                  
  4752                                  ; we need to do special things if we have a single drive system and are setting
  4753                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4754                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4755                                  ; we detect the presence of this situation by examining the flag single for the
  4756                                  ; value 2.
  4757 00001A77 803E[7800]02            		cmp	byte [single], 2
  4758 00001A7C 7505                    		jnz	short not_special
  4759 00001A7E FECF                    		dec	bh		; int13	drive number same for logical drive
  4760 00001A80 80F120                  		xor	cl, 20h	; fi_own_physical
  4761                                  					; reset	ownership flag for logical drive
  4762                                  not_special:
  4763                                  
  4764                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4765                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4766                                  ; form factor is of type "ffother".
  4767                                  				
  4768 00001A83 31C0                    		xor	ax, ax		; fill BDS for drive
  4769 00001A85 A0[D016]                		mov	al, [num_heads]
  4770 00001A88 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4771 00001A8B A0[D116]                		mov	al, [sec_trk]
  4772 00001A8E 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4773 00001A91 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4774 00001A94 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4775 00001A97 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4776 00001A9A 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4777 00001A9D 8A1E[D216]              		mov	bl, [num_cyln]
  4778 00001AA1 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4779 00001AA4 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4780 00001AA9 7511                    		jnz	short no_single
  4781 00001AAB C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4782                                  					; single drive system
  4783                                  		; 18/12/2022
  4784 00001AB0 80C910                  		or	cl, 10h
  4785                                  		;or	cx, 10h	; fi_am_mult
  4786                                  					; set that this	is one of several drives
  4787 00001AB3 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4788                                  					; save flags
  4789 00001AB6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4790                                  					; move to next BDS in list
  4791 00001AB8 FEC2                    		inc	dl		; add a	number
  4792 00001ABA EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4793                                  ; ----------------------------------------------------------------------------
  4794                                  
  4795                                  no_single:				
  4796                                  		;inc	dl
  4797                                  		; 18/12/2022
  4798 00001ABC 42                      		inc	dx
  4799 00001ABD E9F5FE                  		jmp	loop_drive
  4800                                  ; ----------------------------------------------------------------------------
  4801                                  
  4802                                  done_drives:	
  4803                                  		;mov	word [di+BDS.link], -1			
  4804 00001AC0 C705FFFF                		mov	word [di], -1	; set link to null
  4805                                  
  4806                                  ; set up all the hard drives in	the system
  4807                                  
  4808                                  		; 20/12/2022
  4809                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4810                                  dohard:					
  4811 00001AC4 8A36[4317]              		mov	dh, [hnum]
  4812 00001AC8 08F6                    		or	dh, dh		; done if no hardfiles
  4813 00001ACA 745B                    		jz	short static_configure
  4814 00001ACC B280                    		mov	dl, 80h
  4815                                  dohard1:				
  4816 00001ACE 52                      		push	dx
  4817 00001ACF 8B3E[4617]              		mov	di, [end_of_bdss]
  4818 00001AD3 8A1E[7500]              		mov	bl, [drvmax]
  4819 00001AD7 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4820 00001AD9 E8C801                  		call	sethard
  4821 00001ADC 7208                    		jb	short hardfile_err
  4822 00001ADE E8EA06                  		call	dmax_check	; error	if already 26 drives
  4823 00001AE1 7303                    		jnb	short hardfile_err
  4824 00001AE3 E8FA06                  		call	xinstall_bds	; insert new bds into linked list
  4825                                  hardfile_err:				
  4826 00001AE6 5A                      		pop	dx
  4827 00001AE7 FEC2                    		inc	dl		; next hard drive
  4828 00001AE9 FECE                    		dec	dh
  4829 00001AEB 75E1                    		jnz	short dohard1
  4830                                  
  4831                                  ; end of physical drive	initialization
  4832                                  
  4833                                  ; *** do not change the position of the following statement.
  4834                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4835                                  ; *** drive number of mini disk(s).
  4836                                  					
  4837 00001AED E8ED05                  		call	domini		; for setting up mini disks, if found
  4838                                  
  4839                                  ; -- begin added section
  4840                                  
  4841 00001AF0 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4842 00001AF4 B280                    		mov	dl, 80h
  4843                                  dohardx1:				
  4844 00001AF6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4845                                  dohardx2:				
  4846 00001AF8 52                      		push	dx
  4847 00001AF9 53                      		push	bx
  4848 00001AFA 8B3E[4617]              		mov	di, [end_of_bdss]
  4849 00001AFE 8A1E[7500]              		mov	bl, [drvmax]
  4850 00001B02 E89F01                  		call	sethard
  4851 00001B05 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4852 00001B07 E8C106                  		call	dmax_check	; make sure <=26 drives
  4853 00001B0A 7309                    		jnb	short dohardx4	; skip if error
  4854 00001B0C E8D106                  		call	xinstall_bds	; insert new bds into linked list
  4855 00001B0F 5B                      		pop	bx		; get partition	number
  4856 00001B10 5A                      		pop	dx		; restore physical drive counts
  4857 00001B11 FEC7                    		inc	bh
  4858 00001B13 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4859                                  ; ----------------------------------------------------------------------------
  4860                                  
  4861                                  dohardx4:				
  4862 00001B15 5B                      		pop	bx		; unjunk partition number from stack
  4863 00001B16 5A                      		pop	dx		; restore physical drive counts
  4864 00001B17 FEC2                    		inc	dl		; next hard drive
  4865 00001B19 FECE                    		dec	dh
  4866 00001B1B 75D9                    		jnz	short dohardx1
  4867                                  
  4868                                  ; -- end changed section
  4869                                  
  4870                                  ;******************************************************************************
  4871                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4872                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4873                                  ; than two diskette drives
  4874                                  ;
  4875                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4876                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4877                                  ;		letters. to do this, scan for disk drives and assign logical
  4878                                  ;		drive number starting from 2 and then rescan diskette drives
  4879                                  ;		and assign next to the last logical drive number of last disk
  4880                                  ;		drive to the 3rd and 4th diskette drives.
  4881                                  ;******************************************************************************
  4882                                  
  4883 00001B1D 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4884                                  		;jbe	short static_configure ; no - no need for remapping
  4885 00001B22 7603                    		jbe	short no_remap
  4886 00001B24 E8F900                  		call	remap		; remap	bds chain to adjust driver letters
  4887                                  no_remap:
  4888                                  
  4889                                  ; End of drive initialization.
  4890                                  
  4891                                  ; ----------------------------------------------------------------------------
  4892                                  
  4893                                  ;we now decide, based on the configurations available so far, what
  4894                                  ;code or data we need to keep as a stay resident code. the following table
  4895                                  ;shows the configurations under consideration. they are listed in the order
  4896                                  ;of their current position memory.
  4897                                  ;
  4898                                  ;configuration will be done in two ways:
  4899                                  ;
  4900                                  ;first, we are going to set "static configuration". static configuration will
  4901                                  ;consider from basic configuration to endof96tpi configuration. the result
  4902                                  ;of static configuration will be the address the dynamic configuration will
  4903                                  ;use to start with.
  4904                                  ;
  4905                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4906                                  ;involves possible relocation of code or data. dynamic configuration routine
  4907                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4908                                  ;code individually. after these operation, [dosdatasg] will be set.
  4909                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4910                                  
  4911                                  ; -- begin changed section
  4912                                  ;
  4913                                  ;   1.	 basic configuration for msbio (endfloppy)
  4914                                  ;   2.   end96tpi	; a system that supports "change line error"
  4915                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4916                                  ;   4.	 endatrom	;some of at rom fix module.
  4917                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4918                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4919                                  ;
  4920                                  
  4921                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4922                                  
  4923                                  static_configure:			
  4924 00001B27 8B3E[4617]              		mov	di, [end_of_bdss]
  4925 00001B2B 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4926                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4927 00001B2F 750D                    		jnz	short dynamic_configure	; that's the end, then
  4928                                  		; 18/10/2022
  4929 00001B31 BF[1709]                		mov	di, end96tpi
  4930                                  		;mov	di, offset harddrv ; end96tpi
  4931                                  					; keep everything up to	end96tpi
  4932 00001B34 803E[7700]00            		cmp	byte [fhave96], 0
  4933 00001B39 7503                    		jnz	short dynamic_configure
  4934                                  		
  4935 00001B3B BF[FC08]                		mov	di, endfloppy
  4936                                  dynamic_configure:
  4937                                  		; 20/12/2022
  4938                                  		;push	cs
  4939                                  		;pop	es
  4940                                  		
  4941 00001B3E FC                      		cld			; clear direction
  4942                                  
  4943                                  ; -- end changed section
  4944                                  
  4945                                  		; 20/12/2022
  4946                                  		; ds = cs <> es
  4947                                  		; ss = 0
  4948                                  		; sp = 700h
  4949                                  
  4950 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4951 00001B44 7577                    		jnz	short checkcmosclock
  4952 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4953 00001B4B 7470                    		jz	short checkcmosclock
  4954 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  4955 00001B4E BE00F0                  		mov	si, 0F000h
  4956 00001B51 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4957 00001B53 BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4958 00001B56 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4959 00001B59 B90900                  		mov	cx, 9		; bdate_l
  4960                                  					; Only patch ROM for bios 01/10/84
  4961 00001B5C F3A6                    		repe cmpsb		; check	for date + zero	on end
  4962 00001B5E 97                      		xchg	ax, di		; restore allocation pointer
  4963                                  
  4964                                  ; M015 -- begin changes
  4965                                  
  4966                                  		;jnz	short checkcmosclock
  4967                                  		; 02/10/2022
  4968 00001B5F 7508                    		jnz	short checkcompaqbug
  4969                                  
  4970                                  ; install at rom fix
  4971                                  
  4972                                  		; 19/10/2022
  4973                                  		;mov	cx, offset endatrom
  4974 00001B61 B9[0A14]                		mov	cx, endatrom
  4975                                  		;mov	si, offset ibm_disk_io
  4976 00001B64 BE[DC12]                		mov	si, ibm_disk_io
  4977 00001B67 EB46                    		jmp	short install_int13_patch
  4978                                  ; ----------------------------------------------------------------------------
  4979                                  
  4980                                  ; M065 -- begin changes
  4981                                  ;
  4982                                  ; On certain systems with Western Digital disk controllers, the
  4983                                  ; following detection scheme caused an unpredictable and serious
  4984                                  ; failure. In particular, they've implemented a nonstandard
  4985                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  4986                                  ; what happens to be at es:[bx] and other memory locations indexed
  4987                                  ; off of it.
  4988                                  ;
  4989                                  ; Compaq was unable to tell us exactly which kind of systems have
  4990                                  ; the bug, except that they guarantee that the bug was fixed in
  4991                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  4992                                  ; string, and then look for date codes before 08/04/86 to decide
  4993                                  ; when to install the hook.
  4994                                  
  4995                                  ;checkcmosclock:
  4996                                  ; 02/10/2022				
  4997                                  checkcompaqbug:
  4998                                  		; 20/12/2022
  4999                                  		; es = 0F000h
  5000                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5001                                  		;mov	es, ax
  5002                                  
  5003                                  		; 19/10/2022
  5004 00001B69 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5005                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5006 00001B70 754B                    		jnz	short not_compaq_patch
  5007 00001B72 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5008                                  		;cmp	word ptr es:0FFECh, 'PM'
  5009 00001B79 7542                    		jnz	short not_compaq_patch
  5010 00001B7B 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5011                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5012 00001B82 7539                    		jnz	short not_compaq_patch
  5013                                  
  5014                                  ; We're running on a COMPAQ. Now look at the date code.
  5015                                  
  5016 00001B84 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5017 00001B88 86E0                    		xchg	ah, al
  5018 00001B8A 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5019                                  		;cmp	ax, '86'        ; 3836h
  5020                                  					; is it	86?
  5021 00001B8D 772E                    		ja	short not_compaq_patch
  5022 00001B8F 7218                    		jb	short do_compaq_patch
  5023 00001B91 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5024 00001B95 86E0                    		xchg	ah, al
  5025 00001B97 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5026                                  		;cmp	ax, '08'        ; 3038h
  5027                                  					; is it	08?
  5028 00001B9A 7721                    		ja	short not_compaq_patch
  5029 00001B9C 720B                    		jb	short do_compaq_patch
  5030 00001B9E 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5031 00001BA2 86E0                    		xchg	ah, al
  5032 00001BA4 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5033                                  		;cmp	ax, '04'        ; 3034h
  5034                                  					; is it	04?
  5035 00001BA7 7314                    		jnb	short not_compaq_patch
  5036                                  
  5037                                  do_compaq_patch:			
  5038 00001BA9 B9[2B14]                		mov	cx, end_compaq_i13hook
  5039 00001BAC BE[0A14]                		mov	si, endatrom
  5040                                  
  5041                                  install_int13_patch:			
  5042 00001BAF 0E                      		push	cs
  5043 00001BB0 07                      		pop	es
  5044                                  		; 18/10/2022
  5045 00001BB1 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5046 00001BB5 8C0E[B600]              		mov	[Orig13+2], cs
  5047 00001BB9 29F1                    		sub	cx, si		; size of rom fix module
  5048 00001BBB F3A4                    		rep movsb		; relocate it
  5049                                  
  5050                                  ; M065 -- end changes
  5051                                  
  5052                                  ; ----------------------------------------------------------------------------
  5053                                  not_compaq_patch:			; M065
  5054                                  		; 17/10/2022
  5055                                  checkcmosclock:	
  5056                                  		; 18/10/2022		
  5057 00001BBD 0E                      		push	cs
  5058 00001BBE 07                      		pop	es
  5059                                  
  5060                                  		; 20/12/2022
  5061                                  		; ds = cs = es
  5062                                  		; ss = 0
  5063                                  		; sp = 700h
  5064                                  
  5065 00001BBF 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5066 00001BC4 7518                    		jnz	short checkk09	; no
  5067                                  
  5068 00001BC6 893E[0605]              		mov	word [daycnttoday], di
  5069                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5070 00001BCA B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5071 00001BCD BE[2C14]                		mov	si, daycnt_to_day
  5072 00001BD0 F3A4                    		rep movsb
  5073 00001BD2 893E[0205]              		mov	word [bintobcd], di
  5074                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5075                                  					; let original segment stay
  5076 00001BD6 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5077 00001BD9 BE[FD14]                		mov	si, bin_to_bcd
  5078 00001BDC F3A4                    		rep movsb
  5079                                  checkk09:				
  5080 00001BDE 57                      		push	di ; ? ; save ? ; 20/12/2022
  5081 00001BDF B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5082 00001BE2 B301                    		mov	bl, 1		; wait for 1 clock tick
  5083 00001BE4 268A3D                  		mov	bh, [es:di]
  5084 00001BE7 F9                      		stc			; Assume we will fail
  5085 00001BE8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5086                                  					; AL = condition type, BH = condition compare or mask value
  5087                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5088                                  					; DX = I/O port	address	if AL bit 4 set
  5089 00001BEA 5F                      		pop	di ; ?
  5090 00001BEB 721B                    		jc	short configdone ; 20/12/2022
  5091                                  
  5092 00001BED C606[7900]01            		mov	byte [fhavek09], 1
  5093                                  					; remember we have a k09 type
  5094 00001BF2 1E                      		push	ds
  5095 00001BF3 31C0                    		xor	ax, ax
  5096 00001BF5 8ED8                    		mov	ds, ax
  5097                                  		
  5098 00001BF7 893EB001                		mov	[6Ch*4], di
  5099                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5100                                  					; new int 6ch handler
  5101                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5102 00001BFB 8C0EB201                		mov	word [6Ch*4+2], cs
  5103 00001BFF 1F                      		pop	ds
  5104                                  		; 20/12/2022
  5105                                  		; ds = cs = es
  5106 00001C00 BE[0815]                		mov	si, int6c
  5107 00001C03 B9C201                  		mov	cx, endk09-int6c ; 459
  5108                                  		;mov	cx, 459		; endk09 - int6c
  5109                                  					; size of k09 routine
  5110 00001C06 F3A4                    		rep movsb		;
  5111                                  					; set up config	stuff for sysinit
  5112                                  ; ----------------------------------------------------------------------------
  5113                                  ; Set up config stuff for SYSINIT
  5114                                  
  5115                                  ; 17/10/2022
  5116                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5117                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5118                                  ; 09/12/2022
  5119                                  SETDRIVE equ SetDrive
  5120                                  GETBP equ GetBp
  5121                                  		
  5122                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5123                                  configdone:				
  5124 00001C08 0E                      		push	cs		; di is	final ending address of	msbio.
  5125 00001C09 1F                      		pop	ds
  5126 00001C0A 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5127                                  		; 10/12/2022
  5128                                  		;shr	di, 1
  5129                                  		;shr	di, 1
  5130                                  		;shr	di, 1
  5131                                  		;shr	di, 1
  5132 00001C0D B104                    		mov	cl, 4
  5133 00001C0F D3EF                    		shr	di, cl		
  5134                                  		; 10/12/2022
  5135                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5136                                  		; 19/10/2022 - Temporary !
  5137                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5138                                  		; 14/08/2023
  5139 00001C11 83C770                  		add	di, 70h
  5140 00001C14 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5141                                  
  5142                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5143                                  
  5144                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5145                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5146                                  	     
  5147                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5148                                  
  5149                                  ; ----------------------------------------------------------------------------
  5150                                  ; ----------------------------------------------------------------------------
  5151                                  %if 0
  5152                                  		mov	ax, [drvfat]	; get drive and	fat id
  5153                                  		; 22/12/2022
  5154                                  		; Note: SETDRIVES uses AL (drive number) only
  5155                                  		mov	bp, SETDRIVE
  5156                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5157                                  					; at 2C7h:4D7h = 70h:2A47h
  5158                                  		push	cs		; simulate far call
  5159                                  		call	call_bios_code	; get bds for drive
  5160                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5161                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5162                                  		push	cs
  5163                                  		call	call_bios_code
  5164                                  
  5165                                  	; resort to funky old segment definitions for now
  5166                                  
  5167                                  		; 22/12/2022
  5168                                  		;push	es		; copy bds to ds:di
  5169                                  		;pop	ds
  5170                                  
  5171                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5172                                  	;
  5173                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5174                                  	;	  back. Apparently it was what actually setup es: for the following
  5175                                  	; cas----
  5176                                  
  5177                                  		; 22/12/2022
  5178                                  		;xor	di, di
  5179                                  		;mov	al, [es:di]	; get fat id byte
  5180                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5181                                  		;mov	[es:drvfat+1], al
  5182                                  		;mov	ax, [es:drvfat]
  5183                                  		
  5184                                  		; 22/12/2022
  5185                                  		; ds = cs
  5186                                  	;;;	mov	al, [drvfat]
  5187                                  
  5188                                  	; cas -- why do a SECOND setdrive here???
  5189                                  
  5190                                  		; 22/12/2022
  5191                                  		;push	es		; save whatever's in es
  5192                                  		;push	ds		; copy bds to es:di
  5193                                  		;pop	es
  5194                                  		;push	cs		; copy Bios_Data to ds
  5195                                  		;pop	ds
  5196                                  	
  5197                                  	; 22/12/2022
  5198                                  	;;;	mov	bp, SETDRIVE
  5199                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5200                                  	;;;	push	cs		; simulate far call
  5201                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5202                                  	
  5203                                  		; 22/12/2022
  5204                                  		;push	es		; copy bds back to ds:di
  5205                                  		;pop	ds
  5206                                  		;pop	es		; pop whatever was in es
  5207                                  
  5208                                  	; Now we load in the MSDOS.SYS file
  5209                                  
  5210                                  	; 22/12/2022
  5211                                  	; -----
  5212                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5213                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5214                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5215                                  	;				; get size of fat on media
  5216                                  	;	;mov	es:16DEh, bl
  5217                                  	;	mov	[es:fbigfat], bl
  5218                                  	;	mov	cl, [di+8]
  5219                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5220                                  	;	;sub	es:16D8h, ax
  5221                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5222                                  	;				; need a logical sector number that will
  5223                                  	;				; be used by getclus(diskrd procedure)
  5224                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5225                                  	;	;sbb	es:16DAh, ax
  5226                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5227                                  	; -----
  5228                                  		
  5229                                  	; -----	; 22/12/2022
  5230                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5231                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5232                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5233                                  					; get size of fat on media
  5234                                  		mov	[fbigfat], bl
  5235                                  		mov	cl, [es:di+8]
  5236                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5237                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5238                                  					; need a logical sector number that will
  5239                                  					; be used by getclus(diskrd procedure)
  5240                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5241                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5242                                  	; ------
  5243                                  
  5244                                  		xor	ch, ch	 ; cx = sectors/cluster
  5245                                  
  5246                                  	; the boot program has left the directory at 0:500h
  5247                                  
  5248                                  		push	ds
  5249                                  		xor	di, di
  5250                                  		mov	ds, di
  5251                                  		mov	bx, [53Ah]
  5252                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5253                                  					; (First cluster field of 2nd dir entry
  5254                                  					; of root directory in the buffer at 500h)
  5255                                  		pop	ds
  5256                                  loadit:
  5257                                  		mov	ax, SYSINITSEG	; 46Dh
  5258                                  		;mov	ax, 46Dh	; sysinit segment
  5259                                  		mov	es, ax
  5260                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5261                                  		;mov	es, [es:271h]
  5262                                  
  5263                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5264                                  ; ----------------------------------------------------------------------------
  5265                                  
  5266                                  		;test	byte [cs:fbigfat], fbig
  5267                                  		test	byte [cs:fbigfat], 40h ; fbig
  5268                                  		jnz	short eofbig
  5269                                  		cmp	bx, 0FF7h
  5270                                  		jmp	short iseofx
  5271                                  ; ----------------------------------------------------------------------------
  5272                                  
  5273                                  eofbig:
  5274                                  		cmp	bx, 0FFF7h
  5275                                  iseofx:
  5276                                  		jb	short loadit	; keep loading until cluster = eof
  5277                                  
  5278                                  %endif
  5279                                  ; ----------------------------------------------------------------------------
  5280                                  ; ----------------------------------------------------------------------------
  5281                                  
  5282 00001C18 E8F803                  		call	setdrvparms	; 
  5283                                  
  5284                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5285                                  		;jmp	far 46Dh:267h
  5286 00001C1B EA[6702]3A04            		jmp	SYSINITSEG:SYSINITSTART
  5287                                  
  5288                                  ; =============== S U B	R O U T	I N E ========================================
  5289                                  
  5290                                  ; Following are subroutines to support resident device driver initialization
  5291                                  ;
  5292                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5293                                  
  5294                                  ;	M035 -- begin changed section
  5295                                  
  5296                                  ;******************************************************************************
  5297                                  ; module name: remap
  5298                                  ;
  5299                                  ; descriptive name: all the code for himem that could be separated from msbio
  5300                                  ;
  5301                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5302                                  ;	     letters) if more than two diskette drives on the system.
  5303                                  ;
  5304                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5305                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5306                                  ;	       letters. to do this, scan for disk drives and assign logical
  5307                                  ;	       drive number starting from 2 and then rescan diskette drives
  5308                                  ;	       and assign next to the last logical drive number of last disk
  5309                                  ;	       drive to the 3rd and 4th diskette drives.
  5310                                  
  5311                                  ; input:       none
  5312                                  ; exit:	drive letters have been remapped in bds chain
  5313                                  ; exit error:  none
  5314                                  ; called from: msinit
  5315                                  ;
  5316                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5317                                  ;	  found in the system
  5318                                  ;	  this function assumes that there are no more than 26 drives assigned
  5319                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5320                                  ;	  this function assumes that the first entries in the chain are
  5321                                  ;	   floppy drives, and all the rest are hard drives
  5322                                  ;	  will alter the boot drive if necessary to reflect remapping
  5323                                  ;
  5324                                  ;******************************************************************************
  5325                                  
  5326                                  ; 17/10/2022
  5327                                  ; 02/10/2022
  5328                                  
  5329                                  remap:		; proc near		
  5330 00001C20 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5331                                  
  5332                                  ; search for 1st fixed disk physical drive num
  5333                                  
  5334                                  drive_loop:				
  5335 00001C25 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5336                                  					; first	hard disk??
  5337 00001C29 7409                    		jz	short fdrv_found ; yes,	continue
  5338 00001C2B 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5339                                  					; get next bds,	assume segment
  5340 00001C2D 83FFFF                  		cmp	di, -1		; last bds?
  5341 00001C30 75F3                    		jnz	short drive_loop ; loop	if not
  5342 00001C32 EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5343                                  
  5344                                  ;------------------------------------------------------------------------------
  5345                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5346                                  ;logical drive nums to 3, 4, 5 etc.
  5347                                  ;------------------------------------------------------------------------------
  5348                                  
  5349                                  fdrv_found:				
  5350 00001C34 B002                    		mov	al, 2		; start	with logical drv num=2
  5351                                  fdrv_loop:				
  5352 00001C36 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5353                                  					; found	??
  5354 00001C39 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5355                                  					; ds:di--> next	bds
  5356                                  		;inc	al		; set num for next drive
  5357                                  		; 18/12/2022
  5358 00001C3B 40                      		inc	ax
  5359 00001C3C 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5360 00001C3F 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5361                                  
  5362                                  ;------------------------------------------------------------------------------
  5363                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5364                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5365                                  ; any more.
  5366                                  ;------------------------------------------------------------------------------
  5367                                  
  5368 00001C41 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5369                                  					; get first bds
  5370 00001C46 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5371                                  					; ds:di-->bds2
  5372 00001C48 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5373 00001C4D 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5374                                  remap_loop1:				
  5375 00001C50 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5376                                  					; set new num to next floppy
  5377 00001C52 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5378 00001C55 FEC0                    		inc	al		; new number for next floppy
  5379 00001C57 FECC                    		dec	ah		; count	down extra floppies
  5380 00001C59 75F5                    		jnz	short remap_loop1
  5381                                  
  5382                                  ; now we've got to adjust the boot drive if we reassigned it
  5383                                  
  5384 00001C5B 2EA0[CA16]              		mov	al, [cs:drvfat]
  5385 00001C5F 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5386 00001C61 7220                    		jb	short rmap_exit
  5387 00001C63 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5388 00001C68 7204                    		jb	short remap_boot_flop ;	brif so
  5389                                  
  5390                                  ; we've got to remap the boot hard drive
  5391                                  ; subtract the number of EXTRA floppies from it
  5392                                  
  5393 00001C6A 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5394 00001C6C EB05                    		jmp	short remap_change_boot_drv
  5395                                  ; ---------------------------------------------------------------------------
  5396                                  
  5397                                  ; we've got to remap the boot floppy.
  5398                                  ; add the number of hard drive partitions to it
  5399                                  
  5400                                  remap_boot_flop:			
  5401 00001C6E 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5402                                  remap_change_boot_drv:			
  5403 00001C73 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5404 00001C77 FEC0                    		inc	al
  5405 00001C79 1E                      		push	ds
  5406 00001C7A BF3A04                  		mov	di, SYSINITSEG	; 46Dh
  5407                                  		;mov	di, 46Dh	; SYSINIT segment
  5408 00001C7D 8EDF                    		mov	ds, di
  5409 00001C7F A2[9602]                		mov	[DEFAULTDRIVE], al
  5410                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5411                                  					; pass it to sysinit as	well
  5412 00001C82 1F                      		pop	ds
  5413                                  rmap_exit:				
  5414 00001C83 C3                      		retn
  5415                                  
  5416                                  ; =============== S U B	R O U T	I N E =======================================
  5417                                  
  5418                                  ; 17/10/2022
  5419                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5420                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5421                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5422                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5423                                  ;**************************************************
  5424                                  ; getboot - get the boot sector for a hard disk
  5425                                  ;
  5426                                  ; Reads the boot sector from a specified drive into
  5427                                  ; a buffer at the top of memory.
  5428                                  ;
  5429                                  ; dl = int13 drive number to read boot sector for
  5430                                  ;**************************************************
  5431                                  
  5432                                  ; 17/10/2022
  5433                                  bootbias equ 200h
  5434                                  
  5435                                  getboot:	; proc near		
  5436                                  		
  5437                                  		; 08/04/2018
  5438                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5439                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5440                                  		; 02/10/2022 - Retro DOS v4.0
  5441                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5442                                  
  5443 00001C84 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5444 00001C88 8EC0                    		mov	es, ax
  5445                                  		; 17/10/2022
  5446 00001C8A BB0002                  		mov	bx, bootbias ; 200h
  5447                                  		;mov	bx, 200h	; bootbias
  5448                                  					; load BX, ES:BX is where sector goes
  5449 00001C8D B80102                  		mov	ax, 201h
  5450 00001C90 30F6                    		xor	dh, dh
  5451 00001C92 B90100                  		mov	cx, 1
  5452 00001C95 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5453                                  					; AL = number of sectors to read, CH = track, CL = sector
  5454                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5455                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5456 00001C97 7209                    		jb	short erret
  5457                                  		; 17/10/2022
  5458 00001C99 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5459                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5460                                  					; Dave Litton magic word?
  5461 00001CA0 7401                    		jz	short norm_ret	; yes
  5462                                  erret:					
  5463 00001CA2 F9                      		stc
  5464                                  norm_ret:				
  5465 00001CA3 C3                      		retn
  5466                                  
  5467                                  ; =============== S U B	R O U T	I N E =======================================
  5468                                  
  5469                                  ; 28/12/2018 - Retro DOS v4.0 
  5470                                  
  5471                                  ;***************************************************************************
  5472                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5473                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5474                                  ;   our own logical sectors start. we also read in our boot sector to
  5475                                  ;   determine version number
  5476                                  ;
  5477                                  ;   inputs:	dl is rom drive number (80...)
  5478                                  ;		bh is partition number (0....) 
  5479                                  ;		ds:di points to bds
  5480                                  ;   outputs:	carry clear -> bpb is filled in
  5481                                  ;		carry set   -> bpb is left uninitialized due to error
  5482                                  ;	trashes (at least) si, cx
  5483                                  ;	MUST PRESERVE ES:!!!!
  5484                                  ;***************************************************************************
  5485                                  
  5486                                  sethard:	; proc near		
  5487                                  		; 14/08/2023
  5488                                  		; ds = cs = BIOSDATA
  5489 00001CA4 57                      		push	di
  5490 00001CA5 53                      		push	bx
  5491                                  		;push	ds  ; ds = cs = BIOSDATA ; 14/08/2023
  5492 00001CA6 06                      		push	es
  5493 00001CA7 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5494 00001CAA 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5495 00001CAD 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5496                                  					; fnon_removable
  5497 00001CB1 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5498                                  					; ffHardFile
  5499 00001CB5 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5500 00001CBA 88FE                    		mov	dh, bh		; partition number
  5501 00001CBC 52                      		push	dx
  5502 00001CBD B408                    		mov	ah, 8
  5503 00001CBF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5504                                  					; DL = drive number
  5505                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5506                                  					; DL = number of consecutive drives
  5507                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5508 00001CC1 FEC6                    		inc	dh
  5509 00001CC3 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5510 00001CC6 5A                      		pop	dx
  5511 00001CC7 7263                    		jb	short setret	; error	if no hard disk
  5512 00001CC9 80E13F                  		and	cl, 3Fh
  5513 00001CCC 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5514 00001CCF 52                      		push	dx		; save partition number
  5515 00001CD0 E8B1FF                  		call	getboot
  5516 00001CD3 5A                      		pop	dx		; restore partition number
  5517 00001CD4 7256                    		jb	short setret
  5518 00001CD6 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5519                                  
  5520                                  ; The first 'active' partition is 00, the second is 01....
  5521                                  ;   then the remainder of the 'primary' but non-active partitions
  5522                                  
  5523                                  act_part:				
  5524 00001CD9 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5525 00001CDE 7418                    		jz	short no_act	; no
  5526 00001CE0 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5527 00001CE4 740C                    		jz	short got_good_act
  5528 00001CE6 26803F04                		cmp	byte [es:bx], 4
  5529 00001CEA 7406                    		jz	short got_good_act
  5530 00001CEC 26803F06                		cmp	byte [es:bx], 6
  5531 00001CF0 7506                    		jnz	short no_act
  5532                                  got_good_act:				
  5533 00001CF2 08F6                    		or	dh, dh		; is this our target partition #?
  5534 00001CF4 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5535 00001CF6 FECE                    		dec	dh		; count	down
  5536                                  no_act:					
  5537 00001CF8 83C310                  		add	bx, 16
  5538 00001CFB 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5539                                  					; last entry done?
  5540 00001CFF 75D8                    		jnz	short act_part	; no, process next entry
  5541 00001D01 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5542                                  					; restore original value of bx
  5543                                  
  5544                                  ; Now scan the non-active partitions
  5545                                  
  5546                                  get_primary:				
  5547 00001D04 26F647FC80              		test	byte [es:bx-4], 80h
  5548 00001D09 7518                    		jnz	short not_prim	; we've already scanned
  5549                                  					; the ACTIVE ones
  5550 00001D0B 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5551 00001D0F 740C                    		jz	short got_prim
  5552 00001D11 26803F04                		cmp	byte [es:bx], 4
  5553 00001D15 7406                    		jz	short got_prim
  5554 00001D17 26803F06                		cmp	byte [es:bx], 6
  5555 00001D1B 7506                    		jnz	short not_prim
  5556                                  got_prim:				
  5557 00001D1D 08F6                    		or	dh, dh		; is this our target partition?
  5558 00001D1F 740F                    		jz	short set2
  5559 00001D21 FECE                    		dec	dh
  5560                                  not_prim:				
  5561 00001D23 83C310                  		add	bx, 16
  5562 00001D26 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5563 00001D2A 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5564                                  setret:					
  5565 00001D2C F9                      		stc			; error	return
  5566 00001D2D E9A002                  		jmp	ret_hard_err
  5567                                  
  5568                                  ; ---------------------------------------------------------------------------
  5569                                  
  5570                                  ;  until we get the real logical boot record and get the bpb,
  5571                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5572                                  ;  for the convenience of the computation.
  5573                                  ;
  5574                                  ;  at the end of this procedure, if a bpb information is gotten from
  5575                                  ;  the valid boot record, then we are going to use those bpb information
  5576                                  ;  without change.
  5577                                  ;
  5578                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5579                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5580                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5581                                  
  5582                                  set2:					
  5583                                  		; 14/08/2023
  5584                                  		; ds = cs = BIOSDATA segment (0070h)
  5585 00001D30 8816[CF16]              		mov	[rom_drv_num], dl
  5586                                  		;mov	[cs:rom_drv_num], dl
  5587                                  			; save the rom bios drive number we are handling now.
  5588 00001D34 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5589 00001D38 268B5706                		mov	dx, [es:bx+6]
  5590                                  
  5591                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5592                                  ; sectors should be allowed	
  5593                                  
  5594 00001D3C 83E801                  		sub	ax, 1
  5595 00001D3F 83DA00                  		sbb	dx, 0
  5596 00001D42 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5597 00001D46 2613570A                		adc	dx, [es:bx+10]
  5598 00001D4A 7305                    		jnb	short okdrive
  5599 00001D4C 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5600                                  okdrive:				
  5601 00001D51 268B4704                		mov	ax, [es:bx+4]
  5602 00001D55 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5603                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5604 00001D58 268B4706                		mov	ax, [es:bx+6]
  5605 00001D5C 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5606 00001D5F 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5607 00001D63 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5608 00001D67 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5609 00001D6A 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5610                                  					; bpb->maxsec =	p->partitionlength
  5611 00001D6D 83FA00                  		cmp	dx, 0
  5612 00001D70 7705                    		ja	short okdrive_1
  5613 00001D72 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5614 00001D75 72B5                    		jb	short setret	; return -1;
  5615                                  okdrive_1:				
  5616 00001D77 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5617 00001D7A 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5618 00001D7D 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5619                                  					; usually equal	to the # of sec/trk.
  5620 00001D7F 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5621 00001D82 50                      		push	ax
  5622 00001D83 89D0                    		mov	ax, dx
  5623 00001D85 31D2                    		xor	dx, dx
  5624 00001D87 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5625                                  					; (track)temp_h:ax + (sector)dx
  5626                                  		; 17/10/2022
  5627                                  		;mov	[cs:temp_h], ax
  5628                                  		; 14/08/2023 (ds=cs)
  5629 00001D89 A3[2905]                		mov	[temp_h], ax
  5630 00001D8C 58                      		pop	ax
  5631 00001D8D F7F3                    		div	bx
  5632 00001D8F 88D1                    		mov	cl, dl
  5633 00001D91 FEC1                    		inc	cl
  5634 00001D93 31DB                    		xor	bx, bx
  5635 00001D95 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5636 00001D98 50                      		push	ax
  5637 00001D99 31D2                    		xor	dx, dx
  5638                                  		;mov	ax, [cs:temp_h]
  5639 00001D9B A1[2905]                		mov	ax, [temp_h] ; 14/08/2023
  5640 00001D9E F7F3                    		div	bx
  5641                                  		;mov	[cs:temp_h], ax
  5642 00001DA0 A3[2905]                		mov	[temp_h], ax ; 14/08/2023
  5643 00001DA3 58                      		pop	ax
  5644 00001DA4 F7F3                    		div	bx		; dl is head, ax is cylinder
  5645                                  		; 14/08/2023 (ds=cs)
  5646 00001DA6 833E[2905]00            		cmp	word [temp_h], 0
  5647                                  		;cmp	word [cs:temp_h], 0
  5648 00001DAB 775F                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5649 00001DAD 3D0004                  		cmp	ax, 1024
  5650 00001DB0 775A                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5651                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5652                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5653                                  			; ('ja' must be 'jnb')
  5654                                  okdrive_2:
  5655                                   		; 28/07/2019
  5656                                  ; dl is head.
  5657                                  ; ax is cylinder
  5658                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5659                                  
  5660                                  ;*** for mini disks ***
  5661                                  
  5662 00001DB2 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5663                                  					; check	for mini disk
  5664 00001DB6 7503                    		jnz	short oknotmini	; not mini disk.
  5665 00001DB8 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5666                                  					; set the physical track number
  5667                                  oknotmini:
  5668                                  ;*** end of added logic for mini disk
  5669                                  				
  5670 00001DBB D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5671 00001DBD D0CC                    		ror	ah, 1		; two bits of upper byte
  5672 00001DBF 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5673 00001DC2 08E1                    		or	cl, ah		; move two bits	to correct spot
  5674 00001DC4 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5675                                  					; cl is	sector + 2 high	bits of	cylinder
  5676 00001DC6 88D6                    		mov	dh, dl		; dh is	head
  5677                                  		
  5678                                  		; 14/08/2023 (ds=cs)
  5679 00001DC8 8A16[CF16]              		mov	dl, [rom_drv_num]
  5680                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5681                                  
  5682                                  
  5683                                  ; cl is sector + 2 high bits of cylinder
  5684                                  ; ch is low 8 bits of cylinder
  5685                                  ; dh is head
  5686                                  ; dl is drive
  5687                                  
  5688                                  ; for convenience, we are going to read the logical boot sector
  5689                                  ; into cs:disksector area.
  5690                                  
  5691                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5692                                  ; is to be read in is cs:disksector.
  5693                                  
  5694 00001DCC 0E                      		push	cs
  5695 00001DCD 07                      		pop	es
  5696 00001DCE BB[4E01]                		mov	bx, disksector	; for convenience,
  5697                                  					; we are going to read the logical boot	sector
  5698                                  					; into cs:disksector area.
  5699 00001DD1 B80102                  		mov	ax, 201h
  5700 00001DD4 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5701                                  					; AL = number of sectors to read, CH = track, CL = sector
  5702                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5703                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5704                                  
  5705                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5706                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5707                                  ; media if we recognize the version number.
  5708                                  
  5709                                  		; 14/08/2023
  5710                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  5711                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  5712 00001DD6 53                      		push	bx
  5713 00001DD7 50                      		push	ax
  5714                                  		; 14/08/2023
  5715                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  5716 00001DD8 803FE9                  		cmp	byte [bx], 0E9h
  5717                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5718 00001DDB 740B                    		jz	short check_1_ok ; yes
  5719 00001DDD 803FEB                  		cmp	byte [bx], 0EBh
  5720                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5721 00001DE0 7525                    		jnz	short invalid_boot_record ; no
  5722 00001DE2 807F0290                		cmp	byte [bx+2], 90h
  5723                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5724 00001DE6 751F                    		jnz	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  5725                                  check_1_ok:	
  5726                                  		; 14/08/2023			
  5727 00001DE8 BB[5901]                		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  5728                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5729                                  					; point	to the bpb in the boot record
  5730                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5731 00001DEB 8A470A                  		mov	al, [bx+10] ; 14/08/2023 
  5732                                  					; get the mediadescriptor byte
  5733 00001DEE 24F0                    		and	al, 0F0h	; mask off low nibble
  5734 00001DF0 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5735 00001DF2 7513                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5736                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5737 00001DF4 813F0002                		cmp	word [bx], 512 ; 14/08/2023
  5738 00001DF8 750D                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5739                                  
  5740                                  check2_ok:				; yes, mediadescriptor ok.
  5741 00001DFA 8A4702                  		mov	al, [bx+2] ; 14/08/2023
  5742                                  		;mov	al, [cs:bx+2]	; now make sure that
  5743                                  					; the sectorspercluster	is
  5744                                  					; a power of 2
  5745                                  					;
  5746                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5747                                  					; get the sectorspercluster
  5748 00001DFD 08C0                    		or	al, al		; is it	zero?
  5749 00001DFF 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5750                                  
  5751                                  ck_power_of_two:			
  5752 00001E01 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5753 00001E03 73FC                    		jnb	short ck_power_of_two
  5754 00001E05 740B                    		jz	short valid_boot_record
  5755                                  
  5756                                  invalid_boot_record:			
  5757 00001E07 58                      		pop	ax
  5758 00001E08 5B                      		pop	bx
  5759 00001E09 E90F01                  		jmp	unknown		; jump to invalid boot record
  5760                                  					; unformatted or illegal media.
  5761                                  	; 14/08/2023	
  5762                                  ; ---------------------------------------------------------------------------
  5763                                  setret_brdg:				
  5764 00001E0C E91DFF                  		jmp	setret
  5765                                  ; ---------------------------------------------------------------------------
  5766                                  
  5767                                  unknown3_0_j:				
  5768 00001E0F E90D01                  		jmp	unknown3_0	; legally formatted media,
  5769                                  					; although, content might be bad.
  5770                                  ; ---------------------------------------------------------------------------
  5771                                  
  5772                                  valid_boot_record:			
  5773 00001E12 58                      		pop	ax
  5774 00001E13 5B                      		pop	bx
  5775                                  
  5776                                  ; Signature found. Now check version.
  5777                                  
  5778                                  		; 14/08/2023
  5779 00001E14 817F08322E              		cmp	word [bx+8], '2.'
  5780                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5781                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5782 00001E19 7506                    		jnz	short try5
  5783 00001E1B 807F0A30                		cmp	byte [bx+10], '0'
  5784                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5785                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5786                                  		; 14/08/2023
  5787                                  		;jnz	short try5
  5788                                  		;jmp	short copybpb
  5789 00001E1F 7425                    		jz	short copybpb
  5790                                  
  5791                                  	; 14/08/2023
  5792                                  ; ---------------------------------------------------------------------------
  5793                                  ;
  5794                                  ;setret_brdg:				
  5795                                  ;		jmp	setret
  5796                                  ; ---------------------------------------------------------------------------
  5797                                  ;
  5798                                  ;unknown3_0_j:				
  5799                                  ;		jmp	unknown3_0	; legally formatted media,
  5800                                  ;					; although, content might be bad.
  5801                                  ; ---------------------------------------------------------------------------
  5802                                  
  5803                                  try5:					
  5804 00001E21 E8B001                  		call	cover_fdisk_bug
  5805                                  
  5806                                  ; see if it is an os2 signature
  5807                                  
  5808                                  		; 14/08/2023
  5809                                  		; ds = cs = BIOSDATA segment
  5810 00001E24 817F08302E              		cmp	word [bx+8], '0.'
  5811                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5812                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5813 00001E29 750C                    		jnz	short no_os2
  5814 00001E2B 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  5815                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5816 00001E2E 2C31                    		sub	al, '1'
  5817                                  		;sub	al, 31h		; '1'
  5818 00001E30 24FE                    		and	al, 0FEh
  5819 00001E32 7412                    		jz	short copybpb	; accept either	'1' or '2'
  5820 00001E34 E9E400                  		jmp	unknown
  5821                                  ; ---------------------------------------------------------------------------
  5822                                  
  5823                                  ; no os2 signature, this is to check for real dos versions
  5824                                  
  5825                                  no_os2:					
  5826                                  		; 14/08/2023
  5827                                  		; ds = cs = BIOSDATA
  5828 00001E37 817F08332E              		cmp	word [bx+8], '3.'			
  5829                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5830                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5831 00001E3C 72D1                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5832                                  					; do not trust it, but still legal.
  5833 00001E3E 7506                    		jnz	short copybpb	; honor	os2 boot record
  5834                                  					; or dos 4.0 version
  5835 00001E40 807F0A31                		cmp	byte [bx+10], '1' ; 14/08/2023
  5836                                  		;cmp	byte [cs:bx+10], '1'
  5837                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5838 00001E44 72C9                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  5839                                  copybpb:
  5840                                  
  5841                                  ; 03/10/2022
  5842                                  
  5843                                  ; we have a valid boot sector. use the bpb in it to build the
  5844                                  ; bpb in bios. it is assumed that only
  5845                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5846                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5847                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5848                                  ; need to be set (all other values in already). fbigfat is also set.
  5849                                  
  5850                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5851                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5852                                  ; and system id according to the boot record.
  5853                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5854                                  
  5855                                  		; 10/12/2022
  5856                                  		; (number of FATs optimization)
  5857 00001E46 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5858                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5859                                  		;mov	cl, [cs:si+05h]
  5860                                  		; 14/08/2023
  5861                                  		; ds = cs = BIOSDATA segment (0070h)
  5862 00001E49 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  5863                                  
  5864 00001E4C 807C1B29                		cmp	byte [si+1Bh], 29h ; 14/08/2023
  5865                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5866                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5867                                  					; [disksector+EXT_BOOT.SIG]
  5868                                  					; EXT_BOOT_SIGNATURE
  5869 00001E50 7542                    		jnz	short copybpb_fat ; conventional fat system
  5870                                  
  5871                                  		; 03/10/2022
  5872                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5873                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5874                                  		;	     number of FATs must be 2 ; =*?=
  5875                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5876                                  		;
  5877                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5878                                  
  5879                                  		; 10/12/2022
  5880                                  		;cmp	byte [cs:disksector+10h], 0
  5881                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5882                                  		;jnz	short copybpb_fat ; a fat system.
  5883 00001E52 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5884 00001E54 753E                    		jnz	short copybpb_fat ; a fat system.
  5885                                  
  5886                                  ; non fat based	media.
  5887                                  
  5888 00001E56 57                      		push	di
  5889                                  		; 14/08/2023
  5890                                  		;push	ds  ; ds = cs = BIOSDATA segment
  5891 00001E57 1E                      		push	ds
  5892 00001E58 07                      		pop	es
  5893                                  		; 14/08/2023
  5894                                  		; ds = cs
  5895                                  		;push	cs
  5896                                  		;pop	ds
  5897                                  
  5898                                  		; 10/12/2022
  5899                                  		; (number of FATs optimization)
  5900                                  		; SI = disksector+11
  5901                                  		; 17/10/2022
  5902                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5903                                  		;mov	si, disksector+11
  5904 00001E59 83C706                  		add	di, 6		; add di,BDS.BPB
  5905                                  
  5906                                  ; just for completeness, we'll make sure that total_sectors and
  5907                                  ; big_total_sectors aren't both zero. I've seen examples of
  5908                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5909                                  ; got that way. If it occurs, then use the values from the
  5910                                  ; partition table.
  5911                                  
  5912                                  		; 18/12/2022
  5913 00001E5C 29C9                    		sub	cx, cx 
  5914                                  
  5915                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5916                                  		;jnz	short already_nonz 
  5917                                  		;			; how about big_total?
  5918                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5919                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5920                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5921                                  		;jnz	short already_nonz
  5922                                  
  5923                                  		; 14/08/2023
  5924                                  		; ds = cs = BIOSDATA segment (0070h)
  5925                                  
  5926                                  		; 18/12/2022
  5927                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5928                                  		; 14/08/2023
  5929 00001E5E 394C08                  		cmp	[si+8], cx ; 0
  5930 00001E61 751C                    		jnz	short already_nonz
  5931                                  					     	; how about big_total?
  5932                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  5933                                  		; 14/08/2023
  5934 00001E63 394C15                  		cmp	[si+15h], cx ; 0
  5935 00001E66 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  5936                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5937 00001E68 394C17                  		cmp	[si+17h], cx ; 0
  5938 00001E6B 7512                    		jnz	short already_nonz
  5939                                  
  5940                                  ; now let's copy the values from the partition table (now in the BDS)
  5941                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5942                                  
  5943 00001E6D 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5944                                  		; 14/08/2023
  5945                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5946 00001E70 894408                  		mov	[si+8], ax
  5947 00001E73 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5948                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5949 00001E76 894415                  		mov	[si+15h], ax
  5950 00001E79 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5951                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5952 00001E7C 894417                  		mov	[si+17h], ax
  5953                                  
  5954                                  already_nonz:	
  5955                                  		; 18/12/2022
  5956                                  		; cx = 0
  5957 00001E7F B119                    		mov	cl, 25		
  5958                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5959 00001E81 F3A4                    		rep movsb
  5960 00001E83 1F                      		pop	ds
  5961 00001E84 5F                      		pop	di
  5962 00001E85 06                      		push	es
  5963 00001E86 1E                      		push	ds
  5964 00001E87 07                      		pop	es
  5965 00001E88 0E                      		push	cs
  5966 00001E89 1F                      		pop	ds
  5967                                  		; 14/08/2023
  5968 00001E8A BD[3607]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5969                                  		; 18/12/2022
  5970                                  		;mov	bp, mov_media_ids
  5971                                  		;;mov	bp, 751h	; mov_media_ids
  5972                                  					; at 2C7h:751h = 70h:2CC1h
  5973                                  					; set volume id, systemid, serial.
  5974 00001E8D 0E                      		push	cs		; simulate far call
  5975 00001E8E E8C6F8                  		call	call_bios_code
  5976                                  		; 14/08/2023
  5977                                  		; ds = cs = es
  5978                                  		;push	es
  5979                                  		;pop	ds
  5980                                  		;pop	es
  5981 00001E91 E93501                  		jmp	goodret
  5982                                  ; ---------------------------------------------------------------------------
  5983                                  
  5984                                  ; ****** cas ---
  5985                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  5986                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  5987                                  ; happens with some frequency -- perhaps through some OS/2 setup
  5988                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  5989                                  ; from the boot sector into the DPB anyway, we've just been using
  5990                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  5991                                  ; we'll go ahead and copy it into the DPB, except in the case
  5992                                  ; that it equals zero, in which case we just use the values in
  5993                                  ; the DPB from the partition table.
  5994                                  
  5995                                  ; 17/10/2022
  5996                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  5997                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  5998                                  ; 09/12/2022
  5999                                  MOVMEDIAIDS equ mov_media_ids
  6000                                  CLEARIDS equ clear_ids
  6001                                  ; 11/09/2023
  6002                                  CLEARIDS_X equ clear_ids_x
  6003                                  
  6004                                  copybpb_fat:
  6005                                  		; 10/12/2022
  6006                                  		; (number of FATs optimization)
  6007                                  		; SI = disksector+11				
  6008                                  		; 17/10/2022
  6009                                  		;mov	si, disksector+11
  6010                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6011                                  					; cs:si	-> bpb in boot
  6012 00001E94 31D2                    		xor	dx, dx
  6013                                  		; 14/08/2023
  6014                                  		; ds = cs = BIOSDATA segment (0070h)
  6015 00001E96 8B4408                  		mov	ax, [si+8]
  6016                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6017                                  					; get totsec from boot sec
  6018 00001E99 09C0                    		or	ax, ax
  6019 00001E9B 7514                    		jnz	short copy_totsec ; if non zero, use that
  6020 00001E9D 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6021                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6022                                  					; get the big version
  6023                                  					; (32 bit total	sectors)
  6024 00001EA0 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6025                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6026                                  		; 10/12/2022
  6027                                  		; (number of FATs optimization)
  6028                                  		; CL = number of FATs (2 or 1) 
  6029 00001EA3 89D3                    		mov	bx, dx		; see if it is a big zero
  6030 00001EA5 09C3                    		or	bx, ax
  6031 00001EA7 7508                    		jnz	short copy_totsec
  6032                                  			; screw it. it was bogus.
  6033 00001EA9 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6034 00001EAC 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6035 00001EAF EB06                    		jmp	short fat_big_small
  6036                                  
  6037                                  		;mov	cx, dx
  6038                                  		;or	cx, ax		; see if it is a big zero
  6039                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6040                                  copy_totsec:				
  6041 00001EB1 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6042                                  					; make DPB match boot sec
  6043 00001EB4 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6044                                  
  6045                                  		; 10/12/2022
  6046                                  ;totsec_already_set:			
  6047                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6048                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6049                                  
  6050                                  ; determine fat entry size.
  6051                                  
  6052                                  fat_big_small:
  6053                                  
  6054                                  ;at this moment dx;ax = total sector number
  6055                                  
  6056                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6057                                  ;from the BPB on the disk
  6058                                  				
  6059                                  		; 14/08/2023
  6060                                  		; ds = cs = BIOSDATA segment (0070h)
  6061                                  				
  6062 00001EB7 8B5C03                  		mov	bx, [si+3]
  6063                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6064                                  					; get #reserved_sectors	from BPB
  6065 00001EBA 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6066                                  					; update BDS field
  6067 00001EBD 29D8                    		sub	ax, bx
  6068 00001EBF 83DA00                  		sbb	dx, 0		; update the count
  6069                                  		; 14/08/2023
  6070 00001EC2 8B5C0B                  		mov	bx, [si+0Bh]
  6071                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6072                                  					; bx = sectors/fat
  6073 00001EC5 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6074                                  					; set in bds bpb
  6075                                  		; 10/12/2022
  6076                                  		; (number of FATs optimization)
  6077                                  		; CL = number of FATs (2 or 1) 
  6078                                  		;dec	cl ; *
  6079                                  		; 18/12/2022
  6080 00001EC8 49                      		dec	cx ; *
  6081 00001EC9 D3E3                    		shl	bx, cl
  6082                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6083                                  		
  6084 00001ECB 29D8                    		sub	ax, bx		; sub #	fat sectors
  6085 00001ECD 83DA00                  		sbb	dx, 0
  6086 00001ED0 8B5C06                  		mov	bx, [si+6] ; 14/08/2023
  6087                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6088                                  					; # root entries
  6089 00001ED3 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6090                                  					; set in bds bpb
  6091 00001ED6 B104                    		mov	cl, 4
  6092 00001ED8 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6093 00001EDA 29D8                    		sub	ax, bx		; sub #	dir sectors
  6094 00001EDC 83DA00                  		sbb	dx, 0		;
  6095                                  					; dx:ax	now contains the
  6096                                  					; # of data sectors
  6097 00001EDF 31C9                    		xor	cx, cx ; *
  6098 00001EE1 8A4C02                  		mov	cl, [si+2] ; 14/08/2023
  6099                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6100                                  					; sectors per cluster
  6101 00001EE4 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6102                                  					; set in bios bpb
  6103 00001EE7 50                      		push	ax
  6104 00001EE8 89D0                    		mov	ax, dx
  6105 00001EEA 31D2                    		xor	dx, dx
  6106 00001EEC F7F1                    		div	cx		; cx = sectors per cluster
  6107                                  		; 14/08/2023 (ds=cs)
  6108 00001EEE A3[2905]                		mov	[temp_h], ax
  6109                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6110                                  					; # clusters.
  6111 00001EF1 58                      		pop	ax
  6112 00001EF2 F7F1                    		div	cx
  6113                                  		;cmp	word [cs:temp_h], 0
  6114 00001EF4 833E[2905]00            		cmp	word [temp_h], 0 ; 14/08/2023
  6115 00001EF9 7718                    		ja	short toobig_ret ; too big cluster number
  6116 00001EFB 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6117                                  					; is this 16-bit fat?
  6118 00001EFE 7205                    		jb	short copymediaid ; no,	small fat
  6119                                  		; 17/10/2022
  6120 00001F00 800E[CC16]40            		or	byte [fbigfat], 40h
  6121                                  		;or	ds:fbigfat, 40h	; fbig
  6122                                  					; 16 bit fat
  6123                                  copymediaid:				
  6124 00001F05 06                      		push	es
  6125 00001F06 1E                      		push	ds
  6126 00001F07 07                      		pop	es
  6127                                  		; 14/08/2023
  6128                                  		; ds = cs = BIOSDATA
  6129                                  		;push	cs
  6130                                  		;pop	ds
  6131                                  		; 17/10/2022
  6132 00001F08 BD[3607]                		mov	bp, MOVMEDIAIDS
  6133                                  		;mov	bp, 751h	; mov_media_ids
  6134                                  					; at 2C7h:751h = 70h:2CC1h
  6135                                  					; copy filesys_id, volume label
  6136 00001F0B 0E                      		push	cs		; simulate far call
  6137 00001F0C E848F8                  		call	call_bios_code
  6138                                  		; 14/08/2023
  6139                                  		;push	es
  6140                                  		;pop	ds
  6141 00001F0F 07                      		pop	es
  6142 00001F10 E99800                  		jmp	massage_bpb	; now final check for bpb info
  6143                                  					; and return.
  6144                                  ; ---------------------------------------------------------------------------
  6145                                  
  6146                                  toobig_ret:				
  6147                                  		; 14/08/2023 (ds=cs=BIOSDATA)
  6148 00001F13 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  6149                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6150                                  					; too big (32 bit clust #) for FAT16
  6151 00001F18 E9AE00                  		jmp	goodret		; still	drive letter is	assigned
  6152                                  					; but useless. to big for
  6153                                  					; current pc dos fat file system
  6154                                  ; ---------------------------------------------------------------------------
  6155                                  
  6156                                  unknown:	
  6157                                  		; 12/12/2022
  6158 00001F1B 804D2402                		or	byte [di+24h], 02h			
  6159                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6160                                  					; unformatted_media
  6161                                  					; Set unformatted media	flag.
  6162                                  
  6163                                  ; the boot signature may not be	recognizable,
  6164                                  ; but we should	try and	read it	anyway.
  6165                                  
  6166                                  unknown3_0:				
  6167 00001F1F 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6168                                  					; [di+BDS.totalsecs32+2]
  6169 00001F22 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6170 00001F25 BE[FC16]                		mov	si, disktable2
  6171                                  
  6172                                  scan:					
  6173                                  		;cmp	dx, [cs:si]	; total sectors hw
  6174                                  		; 14/08/2023 (ds=cs)
  6175 00001F28 3B14                    		cmp	dx, [si] 
  6176 00001F2A 720C                    		jb	short gotparm
  6177 00001F2C 7705                    		ja	short scan_next
  6178                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6179 00001F2E 3B4402                  		cmp	ax, [si+2]
  6180 00001F31 7605                    		jbe	short gotparm
  6181                                  
  6182                                  scan_next:				
  6183 00001F33 83C60A                  		add	si, 10		; 5*2
  6184 00001F36 EBF0                    		jmp	short scan	; covers upto 512 mb media
  6185                                  ; ---------------------------------------------------------------------------
  6186                                  
  6187                                  gotparm:				
  6188 00001F38 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6189                                  		;or	ds:fbigfat, cl
  6190                                  		; 17/10/2022
  6191 00001F3B 080E[CC16]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6192                                  		; 14/08/2023
  6193                                  		; ds = cs = BIOSDATA
  6194 00001F3F 8B4C04                  		mov	cx, [si+4]
  6195                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6196                                  					; cl = log base 2 of ch
  6197 00001F42 8B5406                  		mov	dx, [si+6]
  6198                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6199                                  
  6200                                  ; now calculate size of fat table
  6201                                  
  6202 00001F45 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6203                                  					; save number of (root)	dir entries
  6204 00001F48 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6205 00001F4B 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6206 00001F4E 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6207                                  					; save sectors per cluster
  6208                                  		; 17/10/2022
  6209 00001F51 F606[CC16]40            		test	byte [fbigfat], 40h
  6210                                  		;test	ds:fbigfat, 40h	; fbig
  6211                                  					; if (fbigfat)
  6212 00001F56 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6213                                  
  6214                                  ; we don't need to change "small fat" logic since it is gauranteed
  6215                                  ; that double word total sector will not use 12 bit fat (unless
  6216                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6217                                  ; so in this case we assume dx = 0 !!
  6218                                  
  6219 00001F58 31DB                    		xor	bx, bx		; (12 bit fat)
  6220 00001F5A 88EB                    		mov	bl, ch
  6221 00001F5C 4B                      		dec	bx
  6222 00001F5D 01C3                    		add	bx, ax		; dx=0
  6223 00001F5F D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6224 00001F61 43                      		inc	bx		; BDS.secperclus
  6225 00001F62 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6226 00001F65 89DE                    		mov	si, bx
  6227 00001F67 D1EB                    		shr	bx, 1
  6228 00001F69 01F3                    		add	bx, si
  6229 00001F6B 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6230 00001F6F D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6231 00001F71 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6232                                  					; save number of fat sectors
  6233 00001F74 EB35                    		jmp	short massage_bpb
  6234                                  ; ---------------------------------------------------------------------------
  6235                                  
  6236                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6237                                  
  6238                                  dobig:					
  6239 00001F76 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6240 00001F78 52                      		push	dx		; save total sectors (high)
  6241 00001F79 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6242 00001F7C D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6243 00001F7E 29D0                    		sub	ax, dx
  6244 00001F80 5A                      		pop	dx
  6245 00001F81 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6246 00001F84 83E801                  		sub	ax, 1
  6247 00001F87 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6248                                  					; total	secs - reserved	secs - root dir	secs
  6249 00001F8A B302                    		mov	bl, 2
  6250 00001F8C 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6251                                  					; bx = 256 * BDS.secperclus + 2
  6252                                  
  6253                                  ; I don't understand why to add bx here!!!
  6254                                  
  6255                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6256                                  		; 27/09/2022
  6257                                  		; (Microsoft FAT32 File	System Specification,
  6258                                  		; December 2000, Page 21)
  6259                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6260                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6261                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6262                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6263                                  		
  6264                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6265 00001F8F 01D8                    		add	ax, bx		; 
  6266 00001F91 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6267 00001F94 83E801                  		sub	ax, 1		
  6268 00001F97 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6269                                  
  6270                                  ; assuming dx in the table will never be bigger than bx.
  6271                                  
  6272 00001F9A F7F3                    		div	bx		; BDS.fatsecs =
  6273                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6274 00001F9C 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6275                                  					; number of fat	sectors
  6276                                  
  6277                                  ; now, set the default filesys_id, volume label, serial number
  6278                                  
  6279                                  		; 14/08/2023
  6280                                  		; [di+1Fh] = [fbigfat]
  6281                                  		;
  6282                                  		;;mov	bl, ds:fbigfat
  6283                                  		;; 17/10/2022
  6284                                  		;mov	bl, [fbigfat]
  6285                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6286                                  
  6287                                  		; 14/08/2023
  6288                                  		;push	ds ; ds = cs = BIOSDATA
  6289 00001F9F 1E                      		push	ds
  6290 00001FA0 07                      		pop	es
  6291                                  		; 14/08/2023 
  6292                                  		; ds = cs = BIOSDATA
  6293                                  		;push	cs
  6294                                  		;pop	ds
  6295                                  		; 11/09/2023
  6296 00001FA1 A0[CC16]                		mov	al, [fbigfat]
  6297 00001FA4 BD[D005]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6298                                  		; 17/10/2022
  6299                                  		;mov	bp, CLEARIDS
  6300                                  		;;mov	bp, 5D9h	; clear_ids
  6301                                  					; at 2C7h:5D9h = 70h:2B49h
  6302                                  					; at BIOSCODE:06ABh
  6303                                  					;	in PCDOS 7.1 IBMBIO.COM
  6304 00001FA7 0E                      		push	cs
  6305 00001FA8 E8ACF7                  		call	call_bios_code
  6306                                  
  6307                                  		; 14/08/2023
  6308                                  		;pop	ds ; ds = cs = BIOSDATA
  6309                                  
  6310                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6311                                  ; set according to the partition information. we are going to
  6312                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6313                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6314                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6315                                  ; we don't do this for the bpb information from the boot record. we
  6316                                  ; are not going to change the bpb information from the boot record.
  6317                                  
  6318                                  massage_bpb:
  6319                                  		; 14/08/2023
  6320                                  		; [di+1Fh] = [fbigfat]
  6321                                  		;
  6322                                  		;; 12/12/2022
  6323                                  		;mov	bl, [fbigfat]
  6324                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6325                                  		;			; set size of fat on media
  6326                                  		;
  6327 00001FAB 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6328 00001FAE 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6329                                  		; 11/09/2023
  6330 00001FB1 09D2                    		or	dx, dx
  6331 00001FB3 7514                    		jnz	short goodret	
  6332                                  		;cmp	dx, 0		; double word total sectors?
  6333                                  		;;ja	short goodret	; don't have to change it.
  6334                                  		;; 12/12/2022
  6335                                  		;ja	short short goodret2
  6336                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6337                                  		;ja	short goodret	; don't have to change it.
  6338                                  		; 12/12/2022
  6339 00001FB5 395519                  		cmp	[di+19h], dx ; 0
  6340                                  		;ja	short goodret2
  6341 00001FB8 770F                    		ja	short goodret	; 11/09/2023
  6342 00001FBA 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6343                                  		;jb	short goodret
  6344                                  		; 12/12/2022
  6345                                  		;jc	short goodret
  6346 00001FBD 7209                    		jc	short goodret_clc ; 11/09/2023
  6347 00001FBF 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6348 00001FC2 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6349                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6350                                  		; 12/12/2022
  6351 00001FC5 89551B                  		mov	[di+1Bh], dx ; 0
  6352                                  goodret_clc:
  6353                                  		; 11/09/2023
  6354 00001FC8 F8                      		clc 
  6355                                  goodret:
  6356                                  		;mov	bl, ds:fbigfat
  6357                                  		; 11/09/2023
  6358                                  		; 12/12/2022
  6359                                  		; 17/10/2022
  6360 00001FC9 8A1E[CC16]              		mov	bl, [fbigfat]
  6361 00001FCD 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6362                                  					; set size of fat on media
  6363                                  		; 11/09/2023
  6364                                  		;clc
  6365                                  ret_hard_err:
  6366                                  		; 12/12/2022
  6367                                  goodret2:
  6368 00001FD0 07                      		pop	es
  6369                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  6370 00001FD1 5B                      		pop	bx
  6371 00001FD2 5F                      		pop	di
  6372 00001FD3 C3                      		retn
  6373                                  
  6374                                  ; =============== S U B	R O U T	I N E =======================================
  6375                                  
  6376                                  ; 15/10/2022
  6377                                  
  6378                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6379                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6380                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6381                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6382                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6383                                  
  6384                                  		; 17/10/2022
  6385                                  cover_fdisk_bug:	
  6386                                  		; 14/08/2023		; ds = cs
  6387 00001FD4 50                      		push	ax
  6388 00001FD5 52                      		push	dx
  6389 00001FD6 56                      		push	si
  6390                                  		; 14/08/2023
  6391 00001FD7 803E[7401]29            		cmp	byte [disksector+26h], 29h
  6392                                  		;cmp	byte [cs:disksector+26h], 29h
  6393                                  					; [disksector+EXT_BOOT.SIG],
  6394                                  					; EXT_BOOT_SIGNATURE
  6395 00001FDC 742B                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6396 00001FDE 817F073130              		cmp	word [bx+7], 3031h
  6397                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6398 00001FE3 7506                    		jnz	short cfb_chk_totalsecs ; 14/08/2023
  6399 00001FE5 807F0A30                		cmp	byte [bx+10], '0'
  6400                                  		;cmp	byte [cs:bx+10], '0'
  6401 00001FE9 751E                    		jnz	short cfb_retit
  6402                                  cfb_chk_totalsecs:
  6403                                  		; 17/10/2022		
  6404 00001FEB BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6405                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6406                                  		; 14/08/2023
  6407 00001FEE 837C0800                		cmp	word [si+8], 0
  6408                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6409                                  					; just to make sure.
  6410 00001FF2 7415                    		jz	short cfb_retit
  6411                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6412                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6413                                  		; 14/08/2023
  6414 00001FF4 8B4408                  		mov	ax, [si+8]
  6415 00001FF7 034411                  		add	ax, [si+11h]
  6416                                  
  6417 00001FFA 730D                    		jnb	short cfb_retit
  6418 00001FFC 750B                    		jnz	short cfb_retit
  6419                                  					; if carry set and ax=0
  6420 00001FFE FF4C08                  		dec	word [si+8]
  6421                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6422                                  					; then decrease	BPB_TOTALSECTORS by 1
  6423 00002001 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6424 00002005 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6425                                  cfb_retit:				
  6426 00002009 5E                      		pop	si
  6427 0000200A 5A                      		pop	dx
  6428 0000200B 58                      		pop	ax
  6429 0000200C C3                      		retn
  6430                                  
  6431                                  ; ---------------------------------------------------------------------------
  6432                                  
  6433 0000200D 0200                    word2:		dw 2
  6434 0000200F 0300                    word3:		dw 3
  6435 00002011 0002                    word512:	dw 512
  6436                                  
  6437                                  ; =============== S U B	R O U T	I N E =======================================
  6438                                  
  6439                                  ; 15/10/2022
  6440                                  
  6441                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6442                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6443                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6444                                  ; as the bpb on the drive.
  6445                                  ;
  6446                                  ; no attempt is made to preserve registers since we are going to jump to
  6447                                  ; sysinit straight after this routine.
  6448                                  
  6449                                  setdrvparms:
  6450 00002013 31DB                    		xor	bx, bx
  6451                                  		; 18/10/2022
  6452 00002015 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6453                                  _next_bds:				
  6454 00002019 06                      		push	es
  6455 0000201A 57                      		push	di
  6456 0000201B 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6457 0000201F 80FB05                  		cmp	bl, 5		; ffHardFile
  6458 00002022 753E                    		jnz	short nothardff
  6459 00002024 31D2                    		xor	dx, dx
  6460 00002026 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6461 0000202A 09C0                    		or	ax, ax
  6462 0000202C 7508                    		jnz	short get_ccyl
  6463 0000202E 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6464 00002032 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6465                                  
  6466                                  get_ccyl:				
  6467 00002036 52                      		push	dx
  6468 00002037 50                      		push	ax
  6469 00002038 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6470 0000203C 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6471                                  					; assume sectors per cyl. < 64k.
  6472 00002040 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6473 00002042 58                      		pop	ax
  6474 00002043 5A                      		pop	dx		; dx:ax	= total	sectors
  6475 00002044 50                      		push	ax
  6476 00002045 89D0                    		mov	ax, dx
  6477 00002047 31D2                    		xor	dx, dx
  6478 00002049 F7F1                    		div	cx
  6479 0000204B 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6480 0000204F 58                      		pop	ax
  6481 00002050 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6482 00002052 09D2                    		or	dx, dx
  6483 00002054 7401                    		jz	short no_cyl_rnd ; came out even
  6484 00002056 40                      		inc	ax		; round	up
  6485                                  
  6486                                  no_cyl_rnd:				
  6487 00002057 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6488 0000205B 06                      		push	es
  6489 0000205C 1F                      		pop	ds
  6490 0000205D 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6491                                  					; ds:si	-> bpb for hard	file
  6492 00002060 EB55                    		jmp	short set_recbpb
  6493                                  ; ---------------------------------------------------------------------------
  6494                                  
  6495                                  nothardff:				
  6496 00002062 0E                      		push	cs
  6497 00002063 1F                      		pop	ds
  6498                                  
  6499                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6500                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6501                                  
  6502                                  		; 10/12/2022
  6503                                  		; ds = cs
  6504                                  		; 17/10/2022 (ds=cs)
  6505 00002064 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6506                                  		;cmp	byte [cs:fakefloppydrv], 1
  6507 00002069 7454                    		jz	short go_to_next_bds
  6508 0000206B 80FB07                  		cmp	bl, 7		; ffother
  6509                                  					; special case "other" type of medium
  6510 0000206E 753D                    		jnz	short not_process_other
  6511                                  process_other:
  6512 00002070 31D2                    		xor	dx, dx
  6513 00002072 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6514 00002075 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6515 00002078 F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6516 0000207B 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6517                                  					; have the total number of sectors
  6518 0000207E 48                      		dec	ax
  6519 0000207F B201                    		mov	dl, 1
  6520                                  _again:					
  6521 00002081 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6522 00002084 7206                    		jb	short _@@
  6523 00002086 D1E8                    		shr	ax, 1
  6524 00002088 D0E2                    		shl	dl, 1
  6525 0000208A EBF5                    		jmp	short _again
  6526                                  ; ---------------------------------------------------------------------------
  6527                                  
  6528                                  _@@:					
  6529 0000208C 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6530 0000208F 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6531 00002091 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6532                                  __@@:					
  6533 00002096 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6534                                  
  6535                                  ; logic to get the sectors/fat area.
  6536                                  ; fat entry is assumed to be 1.5 bytes!!!
  6537                                  
  6538                                  		; 10/12/2022
  6539                                  		; ds = cs
  6540                                  		; 17/10/2022 (ds=cs)
  6541 00002099 F726[0F20]              		mul	word [word3]
  6542 0000209D F736[0D20]              		div	word [word2]
  6543 000020A1 31D2                    		xor	dx, dx
  6544 000020A3 F736[1120]              		div	word [word512]
  6545                                  		;
  6546                                  		; 10/12/2022
  6547                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6548                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6549                                  		;xor	dx, dx
  6550                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6551                                  		;
  6552 000020A7 40                      		inc	ax		; + 1
  6553                                  no_round_up:
  6554 000020A8 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6555 000020AB EB12                    		jmp	short go_to_next_bds
  6556                                  ; ---------------------------------------------------------------------------
  6557                                  
  6558                                  not_process_other:			
  6559 000020AD D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6560                                  		;mov	si, bpbtable
  6561                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6562                                  		; 09/12/2022
  6563                                  		;mov	si, BPBTABLE
  6564                                  		;mov	si, [bx+si]	; get address of bpb
  6565                                  		; 10/12/2022
  6566                                  		;mov	si, [BPBTABLE+bx]
  6567                                  		; 13/12/2022
  6568                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6569                                  		; 14/08/2023
  6570                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6571                                  							; correct offset
  6572 000020AF 8BB7[C672]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6573                                  		
  6574                                  		; 28/08/2023
  6575 000020B3 81C6A03C                		add	si, SYSINIT_OFFSET
  6576                                  set_recbpb:				
  6577 000020B7 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6578                                  					; es:di	-> recbpb
  6579 000020BA B91900                  		mov	cx, 25		; bpbx.size
  6580 000020BD F3A4                    		rep movsb		; move (size bpbx) bytes	
  6581                                  go_to_next_bds:				
  6582 000020BF 5F                      		pop	di
  6583 000020C0 07                      		pop	es		; restore pointer to bds
  6584 000020C1 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6585 000020C4 83FFFF                  		cmp	di, 0FFFFh	; -1
  6586 000020C7 740A                    		jz	short got_end_of_bds_chain
  6587 000020C9 E94DFF                  		jmp	_next_bds
  6588                                  ; ---------------------------------------------------------------------------
  6589                                  
  6590                                  		; 18/12/2022
  6591                                  ;got_end_of_bds_chain:			
  6592                                  		;retn
  6593                                  
  6594                                  ; =============== S U B	R O U T	I N E =======================================
  6595                                  
  6596                                  ; 15/10/2022
  6597                                  ; 30/12/2018 - Retro DOS v4.0
  6598                                  
  6599                                  ; al = device number
  6600                                  
  6601                                  print_init:	
  6602 000020CC 98                      		cbw
  6603 000020CD 89C2                    		mov	dx, ax
  6604 000020CF B401                    		mov	ah, 1
  6605 000020D1 CD17                    		int	17h		; PRINTER - INITIALIZE
  6606                                  					; DX = printer port (0-3)
  6607                                  					; Return: AH = status
  6608                                  got_end_of_bds_chain:	; 18/12/2022
  6609 000020D3 C3                      		retn
  6610                                  
  6611                                  ; =============== S U B	R O U T	I N E =======================================
  6612                                  
  6613                                  ; al = device number
  6614                                  
  6615                                  aux_init:
  6616 000020D4 98                      		cbw
  6617 000020D5 89C2                    		mov	dx, ax
  6618                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6619                                  					; 2400,n,1,8 (msequ.inc)
  6620                                  		;mov	ah, 0
  6621                                  		; 10/12/2022
  6622 000020D7 B8A300                  		mov	ax, 00A3h
  6623 000020DA CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6624                                  					; 	AL = initializing parameters,
  6625                                  					;	DX = port number (0-3)
  6626                                  					; Return: AH = RS-232 status code bits,
  6627                                  					;	  AL = modem status bits
  6628 000020DC C3                      		retn
  6629                                  
  6630                                  ; =============== S U B	R O U T	I N E =======================================
  6631                                  
  6632                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6633                                  ; 30/12/2018 - Retro DOS v4.0
  6634                                  ; 03/06/2018 - Retro DOS v3.0
  6635                                  ; (19/03/2018 - Retro DOS v2.0)
  6636                                  
  6637                                  ; domini **********************************************************************
  6638                                  ;
  6639                                  ;mini disk initialization routine. called right after dohard
  6640                                  ;modified for >2 hardfile support
  6641                                  ;
  6642                                  ; **cs=ds=es=datagrp
  6643                                  ;
  6644                                  ; **domini will search for every extended partition in the system, and
  6645                                  ;   initialize it.
  6646                                  ;
  6647                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6648                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6649                                  ;   address of bdsm table.
  6650                                  ;
  6651                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6652                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6653                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6654                                  ;
  6655                                  ; **domini will use the same routine in sethard routine after label set2 to
  6656                                  ;   save coding.
  6657                                  ;
  6658                                  ; **drvmax determined in dohard routine will be used for the next
  6659                                  ;   available logical mini disk drive number.
  6660                                  ;
  6661                                  ; input: drvmax, dskdrvs
  6662                                  ;
  6663                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6664                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6665                                  ;
  6666                                  ; called modules:
  6667                                  ;		  getboot
  6668                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6669                                  ;
  6670                                  ;		  setmini (new, it will use set2 routine)
  6671                                  ;
  6672                                  ; variables used: end_of_bdsm
  6673                                  ;		  rom_minidisk_num
  6674                                  ;		  mini_hdlim, mini_seclim
  6675                                  ;		  BDS_STRUC, start_bds
  6676                                  ;
  6677                                  ;******************************************************************************
  6678                                  
  6679                                  		; 19/10/2022
  6680                                  domini:	
  6681 000020DD 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6682                                  		; 10/12/2022
  6683 000020E1 20F6                    		and	dh, dh
  6684                                  		;cmp	dh, 0
  6685 000020E3 7431                    		jz	short dominiret	; no hard file?	then exit.
  6686 000020E5 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6687                                  domini_loop:				
  6688 000020E7 52                      		push	dx
  6689 000020E8 8816[4217]              		mov	[rom_minidisk_num], dl
  6690 000020EC B408                    		mov	ah, 8
  6691 000020EE CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6692                                  					; DL = drive number
  6693                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6694                                  					; DL = number of consecutive drives
  6695                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6696 000020F0 FEC6                    		inc	dh
  6697 000020F2 31C0                    		xor	ax, ax
  6698 000020F4 88F0                    		mov	al, dh
  6699 000020F6 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6700 000020F9 80E13F                  		and	cl, 3Fh
  6701 000020FC 88C8                    		mov	al, cl
  6702 000020FE A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6703 00002101 06                      		push	es
  6704 00002102 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6705 00002106 E87BFB                  		call	getboot		; read master boot record into
  6706                                  					; initbootsegment:bootbias
  6707 00002109 7203                    		jb	short domininext
  6708 0000210B E80900                  		call	find_mini_partition
  6709                                  domininext:				
  6710 0000210E 07                      		pop	es
  6711 0000210F 5A                      		pop	dx
  6712 00002110 FEC2                    		inc	dl		; next hard file
  6713 00002112 FECE                    		dec	dh
  6714 00002114 75D1                    		jnz	short domini_loop
  6715                                  dominiret:				
  6716 00002116 C3                      		retn
  6717                                  
  6718                                  ; =============== S U B	R O U T	I N E =======================================
  6719                                  
  6720                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6721                                  ; 30/12/2018 - Retro DOS v4.0
  6722                                  
  6723                                  ;find_mini_partition tries to find every extended partition on a disk.
  6724                                  ;at entry:	di -> bdsm entry
  6725                                  ;		es:bx -> 07c0:bootbias - master boot record
  6726                                  ;		rom_minidisk_num - rom drive number
  6727                                  ;		drvmax - logical drive number
  6728                                  ;		mini_hdlim, mini_seclim
  6729                                  ;
  6730                                  ;called routine: setmini which uses set2 (in sethard routine)
  6731                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6732                                  
  6733                                  
  6734                                  find_mini_partition:	
  6735 00002117 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6736                                  fmpnext:				
  6737 0000211B 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6738 0000211F 740A                    		jz	short fmpgot
  6739 00002121 83C310                  		add	bx, 16
  6740 00002124 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6741 00002128 75F1                    		jnz	short fmpnext
  6742                                  		;jmp	short fmpnextfound ; extended partition	not found
  6743                                  		; 18/12/2022
  6744                                  fmpnextfound:
  6745 0000212A C3                      		retn
  6746                                  
  6747                                  ;		; 30/07/2019 - Retro DOS v3.2
  6748                                  ;		jb	short fmpnext
  6749                                  ;fmpret:
  6750                                  ;		retn	; 29/05/2019
  6751                                  
  6752                                  ; ---------------------------------------------------------------------------
  6753                                  
  6754                                  		; 19/10/2022
  6755                                  fmpgot:					; found my partition.				
  6756 0000212B E89D00                  		call	dmax_check	; check	for drvmax already 26
  6757 0000212E 73FA                    		jnb	short fmpnextfound ; done if too many
  6758 00002130 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6759 00002134 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6760                                  		; 10/12/2022
  6761 00002139 804D2301                		or	byte [di+23h], 1
  6762                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6763                                  					; fNon_Removable
  6764 0000213D C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6765                                  					; ffHardFile
  6766 00002141 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6767 00002146 A1[4817]                		mov	ax, [mini_hdlim]
  6768 00002149 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6769 0000214C A1[4A17]                		mov	ax, [mini_seclim]
  6770 0000214F 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6771 00002152 A0[4217]                		mov	al, [rom_minidisk_num]
  6772 00002155 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6773                                  					; set physical number
  6774 00002158 A0[7500]                		mov	al, [drvmax]
  6775 0000215B 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6776                                  					; set logical number
  6777 0000215E 26837F0A00              		cmp	word [es:bx+10], 0
  6778 00002163 7707                    		ja	short fmpgot_cont
  6779 00002165 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6780                                  					; only lower word is meaningful.
  6781 0000216A 72BE                    		jb	short fmpnextfound
  6782                                  					; should be bigger than 64 sectors at least
  6783                                  fmpgot_cont:				
  6784 0000216C 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6785 0000216F 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6786 00002173 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6787 00002176 D0C6                    		rol	dh, 1
  6788 00002178 D0C6                    		rol	dh, 1
  6789 0000217A 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6790 0000217E 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6791                                  					; set hidden trks
  6792 00002181 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6793 00002185 268A7701                		mov	dh, [es:bx+1]	; head
  6794 00002189 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6795 0000218D BB0002                  		mov	bx, 200h	; bootbias
  6796 00002190 B80102                  		mov	ax, 201h
  6797 00002193 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6798                                  					; AL = number of sectors to read, CH = track, CL = sector
  6799                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6800                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6801 00002195 7293                    		jb	short fmpnextfound
  6802 00002197 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6803                                  
  6804                                  		; 14/08/2023
  6805                                  		;push	es
  6806 0000219A E80800                  		call	setmini		; install a mini disk.
  6807                                  					; bx value saved.
  6808                                  		;pop	es  ; 14/08/2023
  6809 0000219D 7203                    		jb	short fmpnextchain
  6810 0000219F E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  6811                                  fmpnextchain:				
  6812 000021A2 E976FF                  		jmp	fmpnext		; let's find out
  6813                                  					; if we	have any chained partition
  6814                                  ; ---------------------------------------------------------------------------
  6815                                  
  6816                                  		; 18/12/2022
  6817                                  ;fmpnextfound:				
  6818                                  		;retn
  6819                                  
  6820                                  ; =============== S U B	R O U T	I N E =======================================
  6821                                  
  6822                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6823                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6824                                  
  6825                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6826                                  	
  6827 000021A5 57                      		push	di
  6828 000021A6 53                      		push	bx
  6829                                  		; 14/08/2023
  6830                                  		; ds = cs = BIOSDATA segment
  6831                                  		;push	ds
  6832 000021A7 06                      		push	es
  6833                                  setmini_1:				
  6834 000021A8 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6835 000021AC 741A                    		jz	short setmini_2
  6836 000021AE 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6837 000021B2 7414                    		jz	short setmini_2
  6838 000021B4 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6839 000021B8 740E                    		jz	short setmini_2
  6840 000021BA 83C310                  		add	bx, 16
  6841 000021BD 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6842 000021C1 75E5                    		jnz	short setmini_1
  6843 000021C3 F9                      		stc
  6844 000021C4 07                      		pop	es
  6845                                  		; 14/08/2023
  6846                                  		;pop	ds
  6847 000021C5 5B                      		pop	bx
  6848 000021C6 5F                      		pop	di
  6849 000021C7 C3                      		retn
  6850                                  
  6851                                  ; ---------------------------------------------------------------------------
  6852                                  setmini_2:				
  6853 000021C8 E965FB                  		jmp	set2		; branch into middle of sethard
  6854                                  
  6855                                  ; =============== S U B	R O U T	I N E =======================================
  6856                                  
  6857                                  ; 15/10/2022
  6858                                  ; 28/12/2018 - Retro DOS v4.0
  6859                                  ;
  6860                                  ; dmax_check --- call this when we want to install a new drive.
  6861                                  ;		it checks for drvmax < 26 to see if there is
  6862                                  ;		a drive letter left.
  6863                                  ;
  6864                                  ;	drvmax < 26 : carry SET!
  6865                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6866                                  ;			trash ax
  6867                                  
  6868                                  dmax_check:	
  6869 000021CB 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6870 000021D0 720D                    		jb	short dmax_ok	; return with carry if okay
  6871 000021D2 06                      		push	es
  6872                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6873 000021D3 B83A04                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6874 000021D6 8EC0                    		mov	es, ax
  6875                                  		; 18/10/2022
  6876 000021D8 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6877                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6878                                  					; set message flag
  6879                                  					; [SYSINIT+toomanydrivesflag]
  6880 000021DE 07                      		pop	es
  6881                                  
  6882                                  		;;push	es
  6883                                  		;;mov	ax,SYSINIT_SEG
  6884                                  		;;mov	es,ax
  6885                                  		;;mov	byte [es:toomanydrivesflag],1
  6886                                  					; set message flag
  6887                                  		;;pop	es
  6888                                  		;
  6889                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6890                                  dmax_ok:				
  6891 000021DF C3                      		retn
  6892                                  
  6893                                  ; =============== S U B	R O U T	I N E =======================================
  6894                                  
  6895                                  ; 18/10/2022
  6896                                  ; 15/10/2022
  6897                                  ; 28/12/2018 - Retro DOS v4.0						
  6898                                  ;								 
  6899                                  ;	link next bds (at ds:di) into the chain. assume that the
  6900                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6901                                  ;	  dskdrv_table, and end_of_bdss.	
  6902                                  
  6903                                  xinstall_bds:		
  6904 000021E0 56                      		push	si
  6905 000021E1 53                      		push	bx
  6906 000021E2 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6907                                  xinstall_bds_1:				
  6908 000021E6 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6909 000021E9 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6910                                  		;mov	si, [si+BDS.link]
  6911 000021EB 8B34                    		mov	si, [si]	; chain	through	list
  6912 000021ED EBF7                    		jmp	short xinstall_bds_1
  6913                                  ; ---------------------------------------------------------------------------
  6914                                  
  6915                                  xinstall_bds_2:				
  6916                                  		;mov	[si+BDS.link], di
  6917 000021EF 893C                    		mov	[si], di
  6918                                  		;mov	[si+BDS.link+2], ds
  6919 000021F1 8C5C02                  		mov	[si+2], ds
  6920                                  		;mov	word [di+BDS.link], -1
  6921 000021F4 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6922                                  		;mov	[di+BDS.link+2], ds
  6923 000021F8 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6924                                  		; 20/03/2019 - Retro DOS v4.0
  6925                                  		;lea	bx, [di+BDS.BPB]
  6926 000021FB 8D5D06                  		lea	bx, [di+6]
  6927 000021FE 8B36[4417]              		mov	si, [last_dskdrv_table]
  6928 00002202 891C                    		mov	[si], bx
  6929 00002204 8306[4417]02            		add	word [last_dskdrv_table], 2
  6930 00002209 FE06[7500]              		inc	byte [drvmax]
  6931 0000220D 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6932 00002212 5B                      		pop	bx
  6933 00002213 5E                      		pop	si
  6934 00002214 C3                      		retn
  6935                                  
  6936                                  ; =============== S U B	R O U T	I N E =======================================
  6937                                  
  6938                                  ; 17/10/2022
  6939                                  ; 15/10/2022
  6940                                  ; 28/12/2018 - Retro DOS v4.0
  6941                                  ; 03/06/2018 - Retro DOS v3.0
  6942                                  
  6943                                  cmos_clock_read:	
  6944 00002215 50                      		push	ax
  6945 00002216 51                      		push	cx
  6946 00002217 52                      		push	dx
  6947 00002218 55                      		push	bp
  6948 00002219 31ED                    		xor	bp, bp
  6949                                  loop_clock:				
  6950 0000221B 31C9                    		xor	cx, cx
  6951 0000221D 31D2                    		xor	dx, dx
  6952 0000221F B402                    		mov	ah, 2
  6953 00002221 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6954                                  					; Return: CH = hours in	BCD
  6955                                  					; CL = minutes in BCD
  6956                                  					; DH = seconds in BCD
  6957 00002223 83F900                  		cmp	cx, 0
  6958 00002226 7512                    		jnz	short clock_present
  6959 00002228 83FA00                  		cmp	dx, 0
  6960 0000222B 750D                    		jnz	short clock_present
  6961 0000222D 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6962 00002230 741C                    		jz	short no_readdate ; was	at zero	setting.
  6963 00002232 45                      		inc	bp		; only perform delay once.
  6964 00002233 B90040                  		mov	cx, 4000h	; 16384
  6965                                  delay:					
  6966 00002236 E2FE                    		loop	delay
  6967 00002238 EBE1                    		jmp	short loop_clock
  6968                                  ; ---------------------------------------------------------------------------
  6969                                  
  6970                                  clock_present:				
  6971 0000223A 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6972 00002240 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6973                                  					; possibly destroyed by	cp dos and
  6974                                  					; post routine did not restore that.
  6975 00002243 56                      		push	si
  6976 00002244 E8E2F2                  		call	read_real_date	; read real-time clock for date
  6977 00002247 FA                      		cli
  6978                                  		;mov	ds:daycnt, si	; set system date
  6979 00002248 8936[F004]              		mov	[daycnt], si
  6980 0000224C FB                      		sti
  6981 0000224D 5E                      		pop	si
  6982                                  
  6983                                  no_readdate:				
  6984 0000224E 5D                      		pop	bp
  6985 0000224F 5A                      		pop	dx
  6986 00002250 59                      		pop	cx
  6987 00002251 58                      		pop	ax
  6988 00002252 C3                      		retn
  6989                                  
  6990                                  ; ---------------------------------------------------------------------------
  6991                                  
  6992                                  ; the following code is written by jack gulley in engineering group.
  6993                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6994                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6995                                  ; the cmos clock rate are still slow which slow down disk operations
  6996                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6997                                  ; to fix this problem at the request of cp dos.
  6998                                  ;
  6999                                  ; the program is modified to be run on msinit. equates are defined
  7000                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  7001                                  ;
  7002                                  ;  the following code cmosck is used to insure that the cmos has not
  7003                                  ;	had its rate controls left in an invalid state on older at's.
  7004                                  ;
  7005                                  ;	it checks for an at model byte "fc" with a submodel type of
  7006                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  7007                                  ;	bits in case post has not done it. this initilization routine
  7008                                  ;	is only needed once when dos loads. it should be run as soon
  7009                                  ;	as possible to prevent slow diskette access.
  7010                                  ;
  7011                                  ;	this code exposes one to dos clearing cmos setup done by a
  7012                                  ;	resident program that hides and re-boots the system.
  7013                                  
  7014                                  cmosck:					; check and reset rtc rate bits	
  7015                                  
  7016                                  ;model byte and submodel byte were already determined in msinit.
  7017                                  
  7018                                  	; 16/06/2018 - Retro DOS v3.0
  7019                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7020                                  			
  7021 00002253 50                      		push	ax
  7022 00002254 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  7023 0000225A 7525                    		jnz	short cmosck9	; Exit if not an AT model
  7024 0000225C 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  7025                                  					; Is it 06 for the industral AT ?
  7026 00002262 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  7027 00002264 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  7028                                  					; Is it 00, 01, 02, or 03 ?
  7029 0000226A 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  7030                                  					; Also,Secondary_model_byte = 0 
  7031                                  					;   when AH=0C0h, int 15h failed.
  7032                                  					;	RESET THE CMOS PERIODIC RATE 
  7033                                  					;  Model=FC submodel=00,01,02,03 or 06 
  7034                                  cmosck4:				
  7035 0000226C B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7036                                  					; NMI disabled on return
  7037 0000226E B426                    		mov	ah, 26h		; 00100110b
  7038                                  					; Set divider &	rate selection
  7039 00002270 E83000                  		call	cmos_write
  7040 00002273 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7041                                  					; NMI disabled on return
  7042 00002275 E80B00                  		call	cmos_read
  7043 00002278 2407                    		and	al, 7		; 00000111b
  7044                                  					; clear	SET,PIE,AIE,UIE,SQWE
  7045 0000227A 88C4                    		mov	ah, al
  7046 0000227C B00B                    		mov	al, 0Bh		; cmos_reg_b
  7047                                  					; NMI enabled on return
  7048 0000227E E82200                  		call	cmos_write
  7049                                  cmosck9:				
  7050 00002281 58                      		pop	ax
  7051 00002282 C3                      		retn
  7052                                  
  7053                                  ; =============== S U B	R O U T	I N E =======================================
  7054                                  
  7055                                  ;--- CMOS_READ -----------------------------------------------------------------
  7056                                  ;		read byte from cmos system clock configuration table	       :
  7057                                  ;									       :
  7058                                  ; input: (al)=	cmos table address to be read				       :
  7059                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7060                                  ;		bits 6-0 = address of table location to read		       :
  7061                                  ;									       :
  7062                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7063                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  7064                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7065                                  ;		the cmos address register is pointed to a default value and    :
  7066                                  ;		the interrupt flag restored to the entry state on return.      :
  7067                                  ;		only the (al) register and the nmi state is changed.	       :
  7068                                  ;-------------------------------------------------------------------------------
  7069                                  
  7070                                  cmos_read:				; read location (al) into (al)	
  7071 00002283 9C                      		pushf
  7072 00002284 FA                      		cli
  7073 00002285 53                      		push	bx
  7074 00002286 50                      		push	ax		; AL = cmos table address to be	read
  7075 00002287 0C80                    		or	al, 80h
  7076 00002289 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7077                                  					; RTC Seconds
  7078 0000228B 90                      		nop			; (undocumented	delay needed)
  7079 0000228C E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7080 0000228E 89C3                    		mov	bx, ax
  7081 00002290 58                      		pop	ax
  7082 00002291 2480                    		and	al, 80h
  7083 00002293 0C0F                    		or	al, 0Fh
  7084 00002295 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7085                                  					; RTC Seconds
  7086 00002297 90                      		nop
  7087 00002298 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7088 0000229A 89D8                    		mov	ax, bx
  7089 0000229C 5B                      		pop	bx
  7090 0000229D 0E                      		push	cs		; *place code segment in stack and
  7091 0000229E E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7092 000022A1 C3                      		retn			; return with flags restored
  7093                                  
  7094                                  ; ---------------------------------------------------------------------------
  7095                                  
  7096                                  cmos_popf:				
  7097 000022A2 CF                      		iret			; popf for level b- parts
  7098                                  					; return far and restore flags
  7099                                  
  7100                                  ; =============== S U B	R O U T	I N E =======================================
  7101                                  
  7102                                  ;--- cmos_write ----------------------------------------------------------------
  7103                                  ;		write byte to cmos system clock configuration table	       :
  7104                                  ;									       :
  7105                                  ; input: (al)=	cmos table address to be written to			       :
  7106                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7107                                  ;		bits 6-0 = address of table location to write		       :
  7108                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7109                                  ;									       :
  7110                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7111                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7112                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7113                                  ;		the cmos address register is pointed to a default value and    :
  7114                                  ;		the interrupt flag restored to the entry state on return.      :
  7115                                  ;		only the cmos location and the nmi state is changed.	       :
  7116                                  ;-------------------------------------------------------------------------------
  7117                                  
  7118                                  cmos_write:				; write (ah) to location (al)	
  7119 000022A3 9C                      		pushf			; write (ah) to location (al)
  7120 000022A4 50                      		push	ax		; save work register values
  7121 000022A5 FA                      		cli
  7122 000022A6 50                      		push	ax		; save user nmi	state
  7123 000022A7 0C80                    		or	al, 80h		; disable nmi for us
  7124 000022A9 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7125                                  					; RTC Seconds
  7126 000022AB 90                      		nop
  7127 000022AC 88E0                    		mov	al, ah
  7128 000022AE E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7129 000022B0 58                      		pop	ax		; get user nmi
  7130 000022B1 2480                    		and	al, 80h
  7131 000022B3 0C0F                    		or	al, 0Fh
  7132 000022B5 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7133                                  					; RTC Seconds
  7134 000022B7 90                      		nop
  7135 000022B8 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7136 000022BA 58                      		pop	ax		; restore work registers
  7137 000022BB 0E                      		push	cs		; *place code segment in stack and
  7138 000022BC E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7139 000022BF C3                      		retn
  7140                                  
  7141                                  ; 21/12/2022
  7142                                  ; ---------------------------------------------------------------------------
  7143                                  ; ---------------------------------------------------------------------------
  7144                                  %if 0
  7145                                  
  7146                                  ; ---------------------------------------------------------------------------
  7147                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7148                                  ; ---------------------------------------------------------------------------
  7149                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7150                                  ; ---------------------------------------------------------------------------
  7151                                  
  7152                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7153                                  ;
  7154                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7155                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7156                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7157                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7158                                  
  7159                                  ; =============== S U B	R O U T	I N E =======================================
  7160                                  
  7161                                  ; GetClus, read in a cluster at a specified address
  7162                                  ;
  7163                                  ;  bx = cluster to read
  7164                                  ;  cx = sectors per cluster
  7165                                  ;  es:di = load location
  7166                                  
  7167                                  ; 17/10/2022
  7168                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7169                                  ; 09/12/2022
  7170                                  DISKRD equ diskrd
  7171                                  
  7172                                  		; 17/10/2022
  7173                                  getclus:				
  7174                                  		push	cx
  7175                                  		push	di
  7176                                  		mov	[cs:doscnt], cx
  7177                                  		mov	ax, bx
  7178                                  		dec	ax
  7179                                  		dec	ax
  7180                                  		mul	cx		; convert to logical sector
  7181                                  					; dx:ax	= matching logical sector number
  7182                                  					;	  starting from the data sector
  7183                                  		add	ax, [cs:bios_l]
  7184                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7185                                  unpack:					
  7186                                  		push	ds
  7187                                  		push	ax
  7188                                  		push	bx
  7189                                  		mov	si, [cs:fatloc]
  7190                                  		mov	ds, si
  7191                                  		mov	si, bx		; next cluster
  7192                                  		test	byte [cs:fbigfat], 40h	; fbig
  7193                                  					; 16 bit fat?
  7194                                  		jnz	short unpack16	; yes
  7195                                  		shr	si, 1		; 12 bit fat. si=si/2
  7196                                  					; si = clus + clus/2
  7197                                  		add	si, bx		;
  7198                                  					; (si =	byte offset of the cluster in the FAT)
  7199                                  		push	dx
  7200                                  		xor	dx, dx
  7201                                  		call	get_fat_sector
  7202                                  		pop	dx
  7203                                  		mov	ax, [bx]	; save it into ax
  7204                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7205                                  		; 25/06/2023
  7206                                  		;mov	al, [bx]	; splitted fat
  7207                                  		mov	[cs:temp_cluster], al
  7208                                  		inc	si		; (next	byte)
  7209                                  		push	dx
  7210                                  		xor	dx, dx
  7211                                  		call	get_fat_sector
  7212                                  		pop	dx
  7213                                  		;mov	al, ds:0
  7214                                  		mov	al, [0] ; 19/10/2022
  7215                                  		mov	[cs:temp_cluster+1], al
  7216                                  		mov	ax, [cs:temp_cluster]
  7217                                  even_odd:				
  7218                                  		pop	bx		; restore old fat entry	value
  7219                                  		push	bx		; save it right	away.
  7220                                  		shr	bx, 1		; was it even or odd?
  7221                                  		jnb	short havclus	; it was even.
  7222                                  		shr	ax, 1		; odd. massage fat value and keep
  7223                                  					; the highest 12 bits.
  7224                                  		shr	ax, 1
  7225                                  		shr	ax, 1
  7226                                  		shr	ax, 1
  7227                                  havclus:				
  7228                                  		mov	bx, ax		; now bx = new fat entry.
  7229                                  		and	bx, 0FFFh	; keep low 12 bits.
  7230                                  		jmp	short unpackx
  7231                                  ; ---------------------------------------------------------------------------
  7232                                  
  7233                                  unpack16:				
  7234                                  		push	dx
  7235                                  		xor	dx, dx
  7236                                  		shl	si, 1		; extend to 32 bit offset
  7237                                  		adc	dx, 0
  7238                                  		call	get_fat_sector
  7239                                  		pop	dx
  7240                                  		mov	bx, [bx]	;
  7241                                  					; bx = new fat entry.
  7242                                  unpackx:				
  7243                                  		pop	si		; restore old bx value into si
  7244                                  		pop	ax		; restore logical sector (low)
  7245                                  		pop	ds
  7246                                  		sub	si, bx
  7247                                  		cmp	si, -1		; one apart?
  7248                                  		jnz	short getcl2
  7249                                  		add	[cs:doscnt], cx
  7250                                  		jmp	short unpack
  7251                                  ; ---------------------------------------------------------------------------
  7252                                  
  7253                                  getcl2:					
  7254                                  		push	bx
  7255                                  		push	dx		; sector to read (high)
  7256                                  		push	ax		; sector to read (low)
  7257                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7258                                  		mov	cx, [cs:doscnt]
  7259                                  		pop	dx		; sector to read for diskrd (low)
  7260                                  		pop	word [cs:start_sec_h]
  7261                                  					; sector to read for diskrd (high)
  7262                                  		push	ds
  7263                                  		push	cs
  7264                                  		pop	ds
  7265                                  		push	cs		; simulate far call
  7266                                  		; 17/10/2022
  7267                                  		mov	bp, DISKRD	; 8E5h
  7268                                  		;mov	bp, 8E5h	; offset diskrd
  7269                                  					; 2C7h:8E5h = 70h:2E55h
  7270                                  		call	call_bios_code	; read the clusters
  7271                                  		pop	ds
  7272                                  		pop	bx
  7273                                  		pop	di
  7274                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7275                                  		xchg	ah, al		; multiply by 256
  7276                                  		shl	ax, 1		; times	2 equal	512
  7277                                  		add	di, ax		; update load location
  7278                                  		pop	cx		; restore sectors/cluster
  7279                                  		retn
  7280                                  
  7281                                  ; =============== S U B	R O U T	I N E =======================================
  7282                                  
  7283                                  
  7284                                  ;function: find and read the corresponding fat sector into ds:0
  7285                                  ;
  7286                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7287                                  ;     ds - fatloc segment
  7288                                  ;     cs:drvfat - logical drive number, fat id
  7289                                  ;     cs:md_sectorsize
  7290                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7291                                  ;
  7292                                  ;out). corresponding fat sector read in.
  7293                                  ;      bx = offset value from fatlog segment.
  7294                                  ;      other registera saved.
  7295                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7296                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7297                                  ;      should save this byte, and read the next fat sector to get the rest
  7298                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7299                                  
  7300                                  		; 17/10/2022
  7301                                  get_fat_sector:	
  7302                                  		push	ax
  7303                                  		push	cx
  7304                                  		push	di
  7305                                  		push	si
  7306                                  		push	es
  7307                                  		push	ds
  7308                                  		mov	ax, si
  7309                                  		mov	cx, [cs:md_sectorsize] ; 512
  7310                                  		div	cx		; ax = sector number, dx = offset
  7311                                  		nop
  7312                                  
  7313                                  		; Get rid of the assumption that
  7314                                  		; there	is only	one reserved sector
  7315                                  
  7316                                  		push	es
  7317                                  		push	ds
  7318                                  		push	di
  7319                                  		push	ax
  7320                                  		push	cs
  7321                                  		pop	ds
  7322                                  
  7323                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7324                                  		mov	bp, SETDRIVE
  7325                                  		;mov	bp, 4D7h	; setdrive
  7326                                  					; at 2C7h:4D7h = 70h:2A47h
  7327                                  		push	cs		; simulate far call
  7328                                  		call	call_bios_code	; get bds for drive
  7329                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7330                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7331                                  					; add #reserved_sectors
  7332                                  		pop	di
  7333                                  		pop	ds
  7334                                  		pop	es
  7335                                  		cmp	ax, [cs:last_fat_sec_num]
  7336                                  		jz	short gfs_split_chk ; don't need to read it again.
  7337                                  		mov	[cs:last_fat_sec_num], ax 
  7338                                  					; sector number
  7339                                  					; (in the partition, without hidden sectors)
  7340                                  		push	dx
  7341                                  		mov	word [cs:start_sec_h], 0 
  7342                                  					; prepare to read the fat sector
  7343                                  					; start_sec_h is always	0 for fat sector.
  7344                                  		mov	dx, ax
  7345                                  		mov	cx, 1		; 1 sector read
  7346                                  		mov	ax, [cs:drvfat]
  7347                                  		push	ds
  7348                                  		pop	es
  7349                                  		xor	di, di		; es:di	-> fatloc segment:0
  7350                                  		push	ds
  7351                                  		push	cs
  7352                                  		pop	ds
  7353                                  		push	cs		; simulate far call
  7354                                  		mov	bp, DISKRD	; 8E5h
  7355                                  		;mov	bp, 8E5h	; offset diskrd
  7356                                  					; 2C7h:8E5h = 70h:2E55h
  7357                                  		call	call_bios_code
  7358                                  		pop	ds
  7359                                  		pop	dx
  7360                                  		mov	cx, [cs:md_sectorsize] ; 512
  7361                                  
  7362                                  gfs_split_chk:				
  7363                                  		dec	cx		; 511
  7364                                  		cmp	dx, cx		; if offset points to the
  7365                                  					; last byte of this sector,
  7366                                  					; then splitted	entry.
  7367                                  		mov	bx, dx		; set bx to dx
  7368                                  		pop	ds
  7369                                  		pop	es
  7370                                  		pop	si
  7371                                  		pop	di
  7372                                  		pop	cx
  7373                                  		pop	ax
  7374                                  		retn
  7375                                  
  7376                                  ; 15/10/2022
  7377                                  ;Bios_Data_Init	ends
  7378                                  
  7379                                  %endif
  7380                                  ; ---------------------------------------------------------------------------
  7381                                  ; ---------------------------------------------------------------------------
  7382                                  
  7383                                  		; 09/12/2022
  7384                                  		;db 0
  7385                                  
  7386                                  numbertodiv	equ ($-BData_start)
  7387                                  numbertomod	equ (numbertodiv % 16)
  7388                                  
  7389                                  %if numbertomod>0 & numbertomod<16
  7390 000022C0 00<rep 10h>             		times (16-numbertomod) db 0
  7391                                  %endif
  7392                                  
  7393                                  ;align 16
  7394                                  
  7395                                  ; 09/12/2022
  7396                                  IOSYSCODESEGOFF	equ $ - BData_start
  7397                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7398                                  
  7399                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7400                                  ; ---------------------------------------------------------------------------
  7401                                  		;db 4 dup(0)
  7402                                  ; 09/12/2022		
  7403                                  ;		times 4 db 0	; 19/10/2022
  7404                                  ; ---------------------------------------------------------------------------
  7405                                  
  7406                                  ;============================================================================
  7407                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7408                                  ;============================================================================
  7409                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7410                                  
  7411                                  section .BIOSCODE vstart=0  
  7412                                  
  7413                                  BCode_start:	 ; 09/12/2022
  7414                                   
  7415                                  ; 02/10/2022
  7416                                  
  7417                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7418                                  ;----------------------------------------------------------------------------
  7419                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7420                                  ;----------------------------------------------------------------------------
  7421                                  
  7422                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7423 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7424 00000030 7000                    BiosDataWord:	dw 70h
  7425                                  
  7426                                  ; 15/10/2022
  7427                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7428                                  ; 09/12/2022
  7429                                  BIOSDATAWORD	equ BiosDataWord
  7430                                  
  7431                                  ; ---------------------------------------------------------------------------
  7432                                  
  7433                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7434                                  
  7435                                  ;************************************************************************
  7436                                  ;*									*
  7437                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7438                                  ;*	  trashes di, cx, es						*
  7439                                  ;*									*
  7440                                  ;*	cas -- should be made disposable!				*
  7441                                  ;*									*
  7442                                  ;************************************************************************
  7443                                  
  7444                                  _seg_reinit:
  7445 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7446                                  					; at 2C7h:30h or 70h:25A0h
  7447                                  		;mov	di, (offset cdev+2)
  7448 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7449 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7450                                  
  7451                                  _seg_reinit_1:				
  7452 0000003D AB                      		stosw			; modify Bios_Code entry points
  7453 0000003E 47                      		inc	di
  7454 0000003F 47                      		inc	di
  7455 00000040 E2FB                    		loop	_seg_reinit_1
  7456 00000042 CB                      		retf
  7457                                  
  7458                                  ; ---------------------------------------------------------------------------
  7459                                  
  7460                                  ; 15/10/2022
  7461                                  
  7462                                  ;************************************************************************
  7463                                  ;*									*
  7464                                  ;*	chardev_entry - main device driver dispatch routine		*
  7465                                  ;*	   called with a dummy parameter block on the stack		*
  7466                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7467                                  ;*									*
  7468                                  ;*	will eventually take care of doing the transitions in		*
  7469                                  ;*	   out of Bios_Code						*
  7470                                  ;*									*
  7471                                  ;************************************************************************
  7472                                  
  7473                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7474 00000043 56                      		push	si
  7475 00000044 50                      		push	ax
  7476 00000045 51                      		push	cx
  7477 00000046 52                      		push	dx
  7478 00000047 57                      		push	di
  7479 00000048 55                      		push	bp
  7480 00000049 1E                      		push	ds
  7481 0000004A 06                      		push	es
  7482 0000004B 53                      		push	bx
  7483 0000004C 89E5                    		mov	bp, sp
  7484 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7485                                  		;;mov	ds, word [cs:0030h]
  7486                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7487 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7488 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7489 00000059 A2[2100]                		mov	[auxnum], al
  7490 0000005C 8826[E704]              		mov	[printdev], ah
  7491 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7492 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7493 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7494 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7495 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7496 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7497                                  		; 17/10/2022
  7498 00000076 81FE[9604]              		cmp	si, DSKTBL
  7499                                  		;cmp	si, 4A2h	; dsktbl
  7500                                  					; at 2C7h:4A2h = 70h:2A12h
  7501 0000007A 7517                    		jnz	short no_sector32_mapping
  7502                                  
  7503                                  ; Special case for 32-bit start sector number:
  7504                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7505                                  ;      set high 16 bits of secnum to 0
  7506                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7507                                  ;
  7508                                  ; pass high word of sector number in start_sec_h, low word in dx
  7509                                  ;
  7510                                  ; note: start_l and start_h are the offsets within the io_request packet
  7511                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7512                                  ;	  it has been used.
  7513                                  ;
  7514                                  ; note: remember not to destroy the registers which have been set up before
  7515                                  
  7516                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7517 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7518 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7519 00000085 750C                    		jnz	short no_sector32_mapping
  7520 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7521                                  					; 32 bits dsk req
  7522                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7523 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7524 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7525                                  					; dx = packet.start_l
  7526                                  no_sector32_mapping:			
  7527 00000093 97                      		xchg	ax, di
  7528 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7529 00000098 2E3A04                  		cmp	al, cs:[si]
  7530 0000009B 732C                    		jnb	short command_error
  7531 0000009D 98                      		cbw			; note that al <= 15 means ok
  7532 0000009E D1E0                    		shl	ax, 1
  7533 000000A0 01C6                    		add	si, ax
  7534 000000A2 97                      		xchg	ax, di
  7535 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7536 000000A7 FC                      		cld
  7537                                  		; 17/10/2022
  7538 000000A8 2EFF5401                		call	near [cs:si+1]
  7539                                  		;call	word ptr cs:si+1
  7540 000000AC 7202                    		jb	short already_got_ah_status
  7541 000000AE B401                    		mov	ah, 1
  7542                                  already_got_ah_status:
  7543                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7544                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7545                                  					; cas note: shouldn't be needed!
  7546 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7547                                  		;lds	bx, ds:ptrsav
  7548 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7549 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7550                                  					; mark operation complete
  7551 000000BC 5B                      		pop	bx
  7552 000000BD 07                      		pop	es
  7553 000000BE 1F                      		pop	ds
  7554 000000BF 5D                      		pop	bp
  7555 000000C0 5F                      		pop	di
  7556 000000C1 5A                      		pop	dx
  7557 000000C2 59                      		pop	cx
  7558 000000C3 58                      		pop	ax
  7559 000000C4 5E                      		pop	si
  7560 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7561                                  	
  7562                                  		; fall through into bc_retf
  7563                                  ; ---------------------------------------------------------------------------	
  7564                                  bc_retf:
  7565 000000C8 CB                      		retf
  7566                                  ; ---------------------------------------------------------------------------
  7567                                  
  7568                                  command_error:				
  7569 000000C9 E80900                  		call	bc_cmderr
  7570 000000CC EBE2                    		jmp	short already_got_ah_status
  7571                                  ; 15/10/2022
  7572                                  ; 01/05/2019
  7573                                  
  7574                                  ;----------------------------------------------------------------------------
  7575                                  ; The following piece of hack is for supporting CP/M compatibility
  7576                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7577                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7578                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7579                                  ; high.
  7580                                  ;----------------------------------------------------------------------------
  7581                                  
  7582                                  		;db 7 dup(0)
  7583                                  
  7584                                  		; 15/10/2022
  7585                                  
  7586 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7587                                  
  7588 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7589                                  				;  which is the CP/M call 5 entry point
  7590                                  		
  7591                                  
  7592                                  ; ---------------------------------------------------------------------------
  7593                                  
  7594                                  ;	exit - all routines return through this path
  7595                                  
  7596                                  bc_cmderr:				
  7597 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7598                                  					; unknown command error
  7599                                  
  7600                                  ; =============== S U B	R O U T	I N E =======================================
  7601                                  
  7602                                  ;	now zero the count field by subtracting its current value,
  7603                                  ;	  which is still in cx, from itself.
  7604                                  
  7605                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7606                                  ;	  in order to return the number actually complete
  7607                                  
  7608                                  bc_err_cnt:	
  7609                                  		;les	bx, ds:ptrsav
  7610                                  		; 19/10/2022
  7611 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7612 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7613                                  					; # of successful i/o's
  7614 000000DF B481                    		mov	ah, 81h		; mark error return
  7615 000000E1 F9                      		stc			; indicate abnormal end
  7616 000000E2 C3                      		retn
  7617                                  
  7618                                  ; 15/10/2022
  7619                                  
  7620                                  ;Bios_Code ends
  7621                                  
  7622                                  ;----------------------------------------------------------------------------
  7623                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7624                                  ;----------------------------------------------------------------------------
  7625                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7626                                  ; 10/01/2019 - Retro DOS v4.0
  7627                                  
  7628                                  ; 30/04/2019
  7629                                  
  7630                                  ;title	mschar - character and clock devices
  7631                                  
  7632                                  ;MODE_CTRLBRK	equ	0FFh
  7633                                  
  7634                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7635                                  
  7636                                  ;************************************************************************
  7637                                  ;*									*
  7638                                  ;*	device driver dispatch tables					*
  7639                                  ;*									*
  7640                                  ;*	each table starts with a byte which lists the number of		*
  7641                                  ;*	legal functions, followed by that number of words. Each		*
  7642                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7643                                  ;*	handles the function. The functions are terminated with		*
  7644                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7645                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7646                                  ;*	returned as abnormal completion status. Notice that ds		*
  7647                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7648                                  ;*									*
  7649                                  ;************************************************************************
  7650                                  
  7651                                  		; 13/12/2022
  7652                                  		;db 0
  7653                                  
  7654                                  		; 13/12/202
  7655 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7656                                  					; 2C7h:0E4h = 70h:2654h
  7657 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7658                                  					; 00 init
  7659 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7660 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7661 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7662                                  					; 03
  7663 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7664                                  					; 04
  7665 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7666                                  					; 05
  7667 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7668 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7669                                  					; 07
  7670 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7671                                  					; 08
  7672 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7673 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7674                                  con_table_end:
  7675 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7676                                  					; 2C7h:0FBh = 70h:266Bh
  7677 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7678 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7679 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7680 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7681 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7682                                  					; 04 indicate zero chars read
  7683 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7684                                  					; 05 read non-destructive
  7685 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7686 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7687 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7688 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7689 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7690 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7691 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7692 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7693 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7694 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7695 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7696 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7697 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7698 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7699 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7700 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7701 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7702 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7703 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7704 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7705                                  prn_table_end:
  7706 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7707                                  					; 2C7h:130h = 70h:26A0h
  7708 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7709 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7710 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7711 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7712 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7713 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7714 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7715 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7716 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7717 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7718 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7719                                  aux_table_end:
  7720 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7721                                  					; 2C7h:147h = 70h:26B7h
  7722 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7723 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7724 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7725 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7726 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7727 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7728 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7729 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7730 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7731 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7732                                  tim_table_end:
  7733                                  
  7734                                  ; ---------------------------------------------------------------------------
  7735                                  
  7736                                  ;************************************************************************
  7737                                  ;*									*
  7738                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7739                                  ;*									*
  7740                                  ;************************************************************************
  7741                                  
  7742                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7743                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7744 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7745                                  con_loop:				
  7746 0000015D E80500                  		call	chrin		; get char in al
  7747 00000160 AA                      		stosb			; store	char at	es:di
  7748 00000161 E2FA                    		loop	con_loop
  7749                                  con_exit:				
  7750 00000163 F8                      		clc
  7751 00000164 C3                      		retn
  7752                                  
  7753                                  ; =============== S U B	R O U T	I N E =======================================
  7754                                  
  7755                                  ;************************************************************************
  7756                                  ;*									*
  7757                                  ;*	chrin - input single char from keyboard into al			*
  7758                                  ;*									*
  7759                                  ;*	  we are going to issue extended keyboard function, if		*
  7760                                  ;*	  supported. the returning value of the extended keystroke	*
  7761                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7762                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7763                                  ;*	  this creates a conflict when the user entered real		*
  7764                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7765                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7766                                  ;*	  in the following manner:					*
  7767                                  ;*									*
  7768                                  ;*	      ah = 16h							*
  7769                                  ;*	      int 16h							*
  7770                                  ;*	      if al == 0, then extended code (in ah)			*
  7771                                  ;*	      else if al == 0E0h, then					*
  7772                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7773                                  ;*		else greek_alpha character.				*
  7774                                  ;*									*
  7775                                  ;*	also, for compatibility reason, if an extended code is		*
  7776                                  ;*	  detected, then we are going to change the value in al		*
  7777                                  ;*	  from 0E0h to 00h.						*
  7778                                  ;*									*
  7779                                  ;************************************************************************
  7780                                  
  7781                                  		; 19/10/2022
  7782                                  chrin:		
  7783 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7784 00000169 30C0                    		xor	al, al
  7785 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7786 0000016F 08C0                    		or	al, al
  7787 00000171 752A                    		jnz	short keyret
  7788 00000173 CD16                    		int	16h		; KEYBOARD -
  7789 00000175 09C0                    		or	ax, ax
  7790 00000177 74EC                    		jz	short chrin
  7791 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7792 0000017C 7504                    		jnz	short alt_ext_chk
  7793 0000017E B010                    		mov	al, 10h
  7794 00000180 EB1B                    		jmp	short keyret
  7795                                  ; ---------------------------------------------------------------------------
  7796                                  
  7797                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7798                                  ;    if character read was 0E0h then
  7799                                  ;      if extended byte was zero (i.e. ah == 0) then
  7800                                  ;	 goto keyret
  7801                                  ;      else
  7802                                  ;	 set al to zero
  7803                                  ;	 goto alt_save
  7804                                  ;      endif
  7805                                  ;    endif
  7806                                  ;  endif
  7807                                  
  7808                                  alt_ext_chk:
  7809 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7810 00000187 740C                    		jz	short not_ext
  7811 00000189 3CE0                    		cmp	al, 0E0h
  7812 0000018B 7508                    		jnz	short not_ext
  7813 0000018D 08E4                    		or	ah, ah
  7814 0000018F 740C                    		jz	short keyret
  7815 00000191 30C0                    		xor	al, al
  7816 00000193 EB04                    		jmp	short alt_save
  7817                                  ; ---------------------------------------------------------------------------
  7818                                  
  7819                                  not_ext:				
  7820 00000195 08C0                    		or	al, al		; special case?
  7821 00000197 7504                    		jnz	short keyret
  7822                                  alt_save:				
  7823 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7824                                  keyret:					
  7825 0000019D C3                      		retn
  7826                                  
  7827                                  ; ---------------------------------------------------------------------------
  7828                                  
  7829                                  ;************************************************************************
  7830                                  ;*									*
  7831                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7832                                  ;*									*
  7833                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7834                                  ;*	in the status word of the request packet, and there is no	*
  7835                                  ;*	character in the input buffer, the driver issues a system	*
  7836                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7837                                  ;*	a 'char-not-found' to the dos.					*
  7838                                  ;*									*
  7839                                  ;************************************************************************
  7840                                  
  7841                                  		; 19/10/2022
  7842                                  con_rdnd:				
  7843 0000019E A0[0C00]                		mov	al, [altah]
  7844 000001A1 08C0                    		or	al, al
  7845 000001A3 754C                    		jnz	short rdexit
  7846 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7847 000001A9 CD16                    		int	16h		; KEYBOARD -
  7848 000001AB 751D                    		jnz	short gotchr
  7849 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7850 000001B2 7412                    		jz	short z_bus_exit
  7851 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7852                                  		; 12/12/2022
  7853 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7854                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7855 000001BD 7407                    		jz	short z_bus_exit
  7856 000001BF B80041                  		mov	ax, 4100h
  7857 000001C2 30DB                    		xor	bl, bl
  7858 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7859                                  					; AL = condition type, BH = condition compare or mask value
  7860                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7861                                  					; DX = I/O port	address	if AL bit 4 set
  7862                                  z_bus_exit:				
  7863 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7864 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7865 000001C9 C3                      		retn
  7866                                  ; ---------------------------------------------------------------------------
  7867                                  
  7868                                  gotchr:					
  7869 000001CA 09C0                    		or	ax, ax
  7870 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7871 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7872 000001D2 CD16                    		int	16h		; KEYBOARD -
  7873 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7874                                  ; ---------------------------------------------------------------------------
  7875                                  
  7876                                  notbrk:					
  7877 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7878 000001D9 7504                    		jnz	short rd_ext_chk
  7879 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7880 000001DD EB12                    		jmp	short rdexit
  7881                                  ; ---------------------------------------------------------------------------
  7882                                  
  7883                                  rd_ext_chk:				
  7884 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7885 000001E4 740B                    		jz	short rdexit
  7886 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7887 000001E8 7507                    		jnz	short rdexit
  7888 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7889 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7890 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7891                                  					; change it for	compatibility
  7892                                  rdexit:					
  7893 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7894 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7895                                  					; return keyboard character here
  7896                                  bc_exvec:				
  7897 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7898                                  					; indicate normal termination
  7899 000001FA C3                      		retn
  7900                                  ; ---------------------------------------------------------------------------
  7901                                  
  7902                                  ;************************************************************************
  7903                                  ;*									*
  7904                                  ;*	con_write - console write routine				*
  7905                                  ;*									*
  7906                                  ;*	entry:	es:di -> buffer						*
  7907                                  ;*		cx    =  count						*
  7908                                  ;*									*
  7909                                  ;************************************************************************
  7910                                  
  7911                                  con_writ:
  7912                                  		;jcxz	short bc_exvec
  7913 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7914                                  		; 12/12/2022
  7915                                  		;jcxz	cc_ret
  7916                                  con_lp:					
  7917 000001FD 268A05                  		mov	al, [es:di]
  7918 00000200 47                      		inc	di
  7919 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7920                                  					; AL = character to display
  7921 00000203 E2F8                    		loop	con_lp
  7922                                  cc_ret:					
  7923 00000205 F8                      		clc
  7924 00000206 C3                      		retn
  7925                                  
  7926                                  ; =============== S U B	R O U T	I N E =======================================
  7927                                  
  7928                                  ;************************************************************************
  7929                                  ;*									*
  7930                                  ;*	con_flush - flush out keyboard queue				*
  7931                                  ;*									*
  7932                                  ;************************************************************************
  7933                                  
  7934                                  con_flush:
  7935 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7936                                  flloop:					; while	(charavail()) charread();	
  7937 0000020C B401                    		mov	ah, 1
  7938 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7939                                  					; Return: ZF clear if character	in buffer
  7940                                  					; AH = scan code, AL = character
  7941                                  					; ZF set if no character in buffer
  7942 00000210 74F3                    		jz	short cc_ret
  7943 00000212 30E4                    		xor	ah, ah
  7944 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7945                                  					; Return: AH = scan code, AL = character
  7946 00000216 EBF4                    		jmp	short flloop
  7947                                  
  7948                                  ; ---------------------------------------------------------------------------
  7949                                  
  7950                                  ; 15/10/2022
  7951                                  
  7952                                  ;************************************************************************
  7953                                  ;*									*
  7954                                  ;*	some equates for rom bios printer i/o				*
  7955                                  ;*									*
  7956                                  ;************************************************************************
  7957                                  
  7958                                  ; ibm rom status bits (i don't trust them, neither should you)
  7959                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7960                                  ; whole slew of bits, only one of which is correct.
  7961                                  
  7962                                  ;notbusystatus	equ 10000000b		; not busy
  7963                                  ;nopaperstatus	equ 00100000b		; no more paper
  7964                                  ;prnselected	equ 00010000b		; printer selected
  7965                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7966                                  ;timeoutstatus	equ 00000001b		; time out.
  7967                                  ;
  7968                                  ;noprinter	equ 00110000b		; no printer attached
  7969                                  
  7970                                  ; 18/03/2019 - Retro DOS v4.0
  7971                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7972                                  
  7973                                  ; ---------------------------------------------------------------------------
  7974                                  
  7975                                  ;************************************************************************
  7976                                  ;*									*
  7977                                  ;*	prn_input - return with no error but zero chars read		*
  7978                                  ;*									*
  7979                                  ;*	enter with cx = number of characters requested			*
  7980                                  ;*									*
  7981                                  ;************************************************************************
  7982                                  
  7983                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  7984 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  7985                                  					; (sub reqpkt.count,cx)
  7986                                  		; 12/12/2022
  7987                                  prn_done:
  7988 0000021B F8                      		clc			; but return with carry	reset for no error
  7989 0000021C C3                      		retn
  7990                                  ; ---------------------------------------------------------------------------
  7991                                  
  7992                                  ;************************************************************************
  7993                                  ;*									*
  7994                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  7995                                  ;*									*
  7996                                  ;*	auxnum has printer number					*
  7997                                  ;*									*
  7998                                  ;************************************************************************
  7999                                  
  8000                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8001                                  		;jcxz	short prn_done	; no chars to output
  8002 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  8003                                  prn_loop:				
  8004 0000021F BB0200                  		mov	bx, 2		; retry	count
  8005                                  prn_out:				
  8006 00000222 E83600                  		call	prnstat		; get status
  8007 00000225 751D                    		jnz	short TestPrnError
  8008 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8009 0000022A 30E4                    		xor	ah, ah
  8010 0000022C E82E00                  		call	prnop		; print	to printer
  8011 0000022F 7419                    		jz	short prn_con	; no error - continue
  8012 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8013 00000234 7509                    		jnz	short _prnwf
  8014 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8015 00000238 C606[0C00]00            		mov	byte [altah], 0
  8016 0000023D EB08                    		jmp	short pmessg
  8017                                  ; ---------------------------------------------------------------------------
  8018                                  
  8019                                  _prnwf:					
  8020 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8021 00000242 7406                    		jz	short prn_con
  8022                                  TestPrnError:				
  8023 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8024 00000245 75DB                    		jnz	short prn_out
  8025                                  pmessg:					
  8026 00000247 E98DFE                  		jmp	bc_err_cnt
  8027                                  ; ---------------------------------------------------------------------------
  8028                                  
  8029                                  prn_con:				
  8030 0000024A 47                      		inc	di		; point	to next	char and continue
  8031 0000024B E2D2                    		loop	prn_loop
  8032                                  ;prn_done:				
  8033                                  		; 12/12/2022
  8034                                  prn_done2:
  8035                                  		;clc
  8036                                  		; cf=0
  8037 0000024D C3                      		retn
  8038                                  ; ---------------------------------------------------------------------------
  8039                                  
  8040                                  ;************************************************************************
  8041                                  ;*									*
  8042                                  ;*	prn_stat - device driver entry to return printer status		*
  8043                                  ;*									*
  8044                                  ;************************************************************************
  8045                                  
  8046                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8047 0000024E E80A00                  		call	prnstat		; device in dx
  8048 00000251 75F4                    		jnz	short pmessg
  8049 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8050                                  		;jnz	short prn_done
  8051                                  		; 12/12/2022
  8052 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8053 00000258 E96BFF                  		jmp	z_bus_exit
  8054                                  ; ---------------------------------------------------------------------------
  8055                                  
  8056                                  ;************************************************************************
  8057                                  ;*									*
  8058                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8059                                  ;*		 printer status. Return meaningful error code		*
  8060                                  ;*									*
  8061                                  ;************************************************************************
  8062                                  
  8063                                  prnstat:				
  8064 0000025B B402                    		mov	ah, 2		; set command for get status
  8065                                  					; PRINTER - GET	STATUS
  8066                                  					; DX = printer port (0-3)
  8067                                  					; Return: AH = status
  8068                                  
  8069                                  ; =============== S U B	R O U T	I N E =======================================
  8070                                  
  8071                                  ;************************************************************************
  8072                                  ;*									*
  8073                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8074                                  ;*		return zero true if no error				*
  8075                                  ;*		return zero false if error, al = error code		*
  8076                                  ;*									*
  8077                                  ;************************************************************************
  8078                                  
  8079                                  prnop:	
  8080 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8081 00000261 CD17                    		int	17h
  8082                                  
  8083                                  	; This check was added to see if this is a case of no
  8084                                  	; printer being installed. This tests checks to be sure
  8085                                  	; the error is noprinter (30h)
  8086                                  
  8087 00000263 50                      		push	ax
  8088 00000264 80E430                  		and	ah, 30h
  8089 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8090 0000026A 58                      		pop	ax
  8091 0000026B 7506                    		jnz	short NextTest
  8092 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8093 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8094                                  
  8095                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8096                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8097                                  ; careful about breaking basic.
  8098                                  
  8099                                  NextTest:				
  8100 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8101                                  					; i/o error?
  8102 00000276 740A                    		jz	short checknotready ; no, try not ready
  8103                                  
  8104                                  ; at this point, we know we have an error. the converse is not true
  8105                                  
  8106 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8107                                  					; first, assume	out of paper
  8108 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8109 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8110 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8111                                  ret1:					
  8112 00000281 C3                      		retn
  8113                                  ; ---------------------------------------------------------------------------
  8114                                  
  8115                                  checknotready:				
  8116 00000282 B002                    		mov	al, 2		; assume not-ready
  8117 00000284 F6C401                  		test	ah, 1
  8118 00000287 C3                      		retn
  8119                                  
  8120                                  ; ---------------------------------------------------------------------------
  8121                                  
  8122                                  ;************************************************************************
  8123                                  ;*									*
  8124                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8125                                  ;*		     this entry point should never block waiting for	*
  8126                                  ;*		     device to come ready.				*
  8127                                  ;*									*
  8128                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8129                                  ;*	outputs: set the number of bytes transferred in the		*
  8130                                  ;*		 device driver request packet				*
  8131                                  ;*									*
  8132                                  ;************************************************************************
  8133                                  
  8134                                  		; 19/10/2022
  8135                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8136 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8137                                  prn_tilbloop:				
  8138 0000028A 51                      		push	cx
  8139 0000028B 53                      		push	bx
  8140 0000028C 30FF                    		xor	bh, bh
  8141 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8142 00000292 D1E3                    		shl	bx, 1
  8143                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8144 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8145 00000298 5B                      		pop	bx
  8146                                  prn_getstat:				
  8147 00000299 E8BFFF                  		call	prnstat		; get status
  8148 0000029C 7514                    		jnz	short prn_bperr	; error
  8149 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8150 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8151 000002A3 59                      		pop	cx		; get original count
  8152 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8153 000002A6 26                      		es
  8154 000002A7 AC                      		lodsb
  8155                                  		;lods	byte ptr es:[si] ; es
  8156                                  					; lodsb
  8157 000002A8 30E4                    		xor	ah, ah
  8158 000002AA E8B0FF                  		call	prnop
  8159 000002AD 7504                    		jnz	short prn_berr	; error
  8160 000002AF E2D9                    		loop	prn_tilbloop
  8161                                  		; 12/12/2022
  8162                                  		; cf=0 (prnop)
  8163                                  		;clc			; normal no-error return
  8164 000002B1 C3                      		retn			;   from device driver
  8165                                  
  8166                                  ; ---------------------------------------------------------------------------
  8167                                  
  8168                                  prn_bperr:				
  8169 000002B2 59                      		pop	cx		; restore transfer count from stack
  8170                                  prn_berr:				
  8171 000002B3 E921FE                  		jmp	bc_err_cnt
  8172                                  ; ---------------------------------------------------------------------------
  8173                                  
  8174                                  ; 15/10/2022
  8175                                  
  8176                                  ;************************************************************************
  8177                                  ;*									*
  8178                                  ;*	prn_genioctl - get/set printer retry count			*
  8179                                  ;*									*
  8180                                  ;************************************************************************
  8181                                  
  8182                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8183                                  ; 11/01/2019
  8184                                  
  8185                                  ;********************************;*
  8186                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8187                                  ;********************************;*
  8188                                  
  8189                                  ;;RAWIO SUB-FUNCTIONS
  8190                                  ;;get_retry_count equ 65h
  8191                                  ;;set_retry_count equ 45h
  8192                                  
  8193                                  ;;struc A_RETRYCOUNT
  8194                                  ;;.rc_count: resw 1
  8195                                  ;;endstruc
  8196                                  
  8197                                  ;ioc_pc equ 5
  8198                                  
  8199                                  ; ---------------------------------------------------------------------------
  8200                                  
  8201                                  		; 19/10/2022
  8202                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8203 000002B6 C43E[1200]              		les	di, [ptrsav]
  8204 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8205                                  					; ioc_pc
  8206 000002BF 7403                    		jz	short prnfunc_ok
  8207                                  
  8208                                  prnfuncerr:				
  8209 000002C1 E911FE                  		jmp	bc_cmderr
  8210                                  ; ---------------------------------------------------------------------------
  8211                                  
  8212                                  prnfunc_ok:				
  8213 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8214 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8215 000002CC 30FF                    		xor	bh, bh
  8216                                  		;mov	bl, ds:printdev	; get index into retry counts
  8217 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8218 000002D2 D1E3                    		shl	bx, 1
  8219                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8220 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8221 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8222 000002DA 7407                    		jz	short prngetcount
  8223 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8224 000002DE 75E1                    		jnz	short prnfuncerr
  8225 000002E0 268B0D                  		mov	cx, [es:di]
  8226                                  prngetcount:				
  8227                                  		;mov	ds:wait_count[bx], cx
  8228 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8229 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8230                                  					; return current retry count
  8231                                  		; 12/12/2022
  8232                                  		; cf=0
  8233                                  		;clc
  8234 000002EA C3                      		retn
  8235                                  ; ---------------------------------------------------------------------------
  8236                                  
  8237                                  ;************************************************************************
  8238                                  ;*									*
  8239                                  ;*  prn_ioctl_query							*
  8240                                  ;*									*
  8241                                  ;*  Added for 5.00							*
  8242                                  ;************************************************************************
  8243                                  
  8244                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8245 000002EB C43E[1200]              		les	di, [ptrsav]
  8246 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8247                                  					; ioc_pc
  8248 000002F4 750D                    		jnz	short prn_query_err
  8249 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8250 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8251 000002FC 7404                    		jz	short IOCtlSupported
  8252 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8253 00000300 7501                    		jnz	short prn_query_err
  8254                                  IOCtlSupported:	
  8255                                  		; 12/12/2022
  8256                                  		; cf=0		
  8257                                  		;clc
  8258 00000302 C3                      		retn
  8259                                  ; ---------------------------------------------------------------------------
  8260                                  
  8261                                  prn_query_err:
  8262                                  		; 12/12/2022				
  8263                                  		;stc
  8264 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8265                                  ; ---------------------------------------------------------------------------
  8266                                  
  8267                                  ;************************************************************************
  8268                                  ;*									*
  8269                                  ;*	aux port driver code -- "aux" == "com1"				*
  8270                                  ;*									*
  8271                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8272                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8273                                  ;*									*
  8274                                  ;************************************************************************
  8275                                  
  8276                                  ;	values in ah, requesting function of int 14h in rom bios
  8277                                  
  8278                                  ;auxfunc_send	 equ	1	;transmit
  8279                                  ;auxfunc_receive equ	2	;read
  8280                                  ;auxfunc_status	 equ	3	;request status
  8281                                  
  8282                                  ;	error flags, reported by int 14h, reported in ah:
  8283                                  
  8284                                  ;flag_data_ready equ	01h	;data ready
  8285                                  ;flag_overrun	 equ	02h	;overrun error
  8286                                  ;flag_parity	 equ	04h	;parity error
  8287                                  ;flag_frame	 equ	08h	;framing error
  8288                                  ;flag_break	 equ	10h	;break detect
  8289                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8290                                  ;flag_timeout	 equ	80h	;timeout
  8291                                  
  8292                                  ;	these flags reported in al:
  8293                                  
  8294                                  ;flag_cts	 equ	10h	;clear to send
  8295                                  ;flag_dsr	 equ	20h	;data set ready
  8296                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8297                                  
  8298                                  ; ---------------------------------------------------------------------------
  8299                                  
  8300                                  ;************************************************************************
  8301                                  ;*									*
  8302                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8303                                  ;*		   at es:di						*
  8304                                  ;*									*
  8305                                  ;************************************************************************
  8306                                  
  8307                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8308                                  		;jcxz	short exvec2
  8309 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8310 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8311 0000030B 30C0                    		xor	al, al
  8312 0000030D 8607                    		xchg	al, [bx]
  8313 0000030F 08C0                    		or	al, al
  8314 00000311 7503                    		jnz	short aux2
  8315                                  aux1:					
  8316 00000313 E80500                  		call	auxin		; get character	from port
  8317                                  					; won't return if error
  8318                                  aux2:					
  8319 00000316 AA                      		stosb
  8320 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8321                                  exvec2:					
  8322 00000319 F8                      		clc			; all done, successful exit
  8323                                  auxin_retn:	; 18/12/2022
  8324 0000031A C3                      		retn
  8325                                  ; ---------------------------------------------------------------------------
  8326                                  
  8327                                  ;************************************************************************
  8328                                  ;*									*
  8329                                  ;*	auxin - call rom bios to read character from aux port		*
  8330                                  ;*		if error occurs, map the error and return one		*
  8331                                  ;*		level up to device driver exit code, setting		*
  8332                                  ;*		the number of bytes transferred appropriately		*
  8333                                  ;*									*
  8334                                  ;************************************************************************
  8335                                  
  8336                                  auxin:					
  8337 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8338 0000031D E83C00                  		call	auxop
  8339 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8340                                  		;jnz	short arbad	; skip if any error bits set
  8341                                  		;retn
  8342                                  		; 25/06/2023 (BugFix)
  8343 00000323 74F5                    		jz	short auxin_retn
  8344                                  ; ---------------------------------------------------------------------------
  8345                                  
  8346                                  arbad:					
  8347 00000325 58                      		pop	ax		; remove return	address	(near call)
  8348 00000326 30C0                    		xor	al, al
  8349 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8350 0000032A E9AAFD                  		jmp	bc_err_cnt
  8351                                  
  8352                                  ; ---------------------------------------------------------------------------
  8353                                  
  8354                                  ;************************************************************************
  8355                                  ;*									*
  8356                                  ;*	aux_rdnd - non-destructive aux port read			*
  8357                                  ;*									*
  8358                                  ;************************************************************************
  8359                                  
  8360                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8361 0000032D E85200                  		call	getbx
  8362 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8363 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8364 00000334 7511                    		jnz	short auxdrx	; then return character
  8365 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8366 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8367 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8368 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8369 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8370 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8371 00000345 8807                    		mov	[bx], al
  8372                                  auxdrx:					
  8373 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8374                                  ; ---------------------------------------------------------------------------
  8375                                  
  8376                                  auxbus:					
  8377 0000034A E979FE                  		jmp	z_bus_exit
  8378                                  ; ---------------------------------------------------------------------------
  8379                                  
  8380                                  ;************************************************************************
  8381                                  ;*									*
  8382                                  ;*	aux_wrst - return aux port write status				*
  8383                                  ;*									*
  8384                                  ;************************************************************************
  8385                                  
  8386                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8387 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8388 00000350 A820                    		test	al, 20h		; test data set	ready
  8389 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8390 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8391 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8392                                  		; 12/12/2022
  8393                                  		; cf=0	; (test instruction resets cf)
  8394                                  		;clc
  8395 00000359 C3                      		retn
  8396                                  ; ---------------------------------------------------------------------------
  8397                                  
  8398                                  ;************************************************************************
  8399                                  ;*									*
  8400                                  ;*	auxstat - call rom bios to determine aux port status		*
  8401                                  ;*									*
  8402                                  ;*	exit:	ax = status						*
  8403                                  ;*		dx = [auxnum]						*
  8404                                  ;*									*
  8405                                  ;************************************************************************
  8406                                  
  8407                                  auxstat:				
  8408 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8409                                  
  8410                                  		; fall into auxop
  8411                                  
  8412                                  ; =============== S U B	R O U T	I N E =======================================
  8413                                  
  8414                                  ;************************************************************************
  8415                                  ;*									*
  8416                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8417                                  ;*									*
  8418                                  ;*	entry:	ah = int 14h function number				*
  8419                                  ;*	exit:	ax = results						*
  8420                                  ;*		dx = [auxnum]						*
  8421                                  ;*									*
  8422                                  ;************************************************************************
  8423                                  
  8424                                  auxop:		; proc near		
  8425 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8426                                  					; 0=init, 1=send, 2=receive, 3=status
  8427                                  					; get port number
  8428 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8429                                  					; DX = port number (0-3)
  8430                                  					; Return: AX = port status code
  8431 00000362 C3                      		retn
  8432                                  
  8433                                  ; ---------------------------------------------------------------------------
  8434                                  
  8435                                  ;************************************************************************
  8436                                  ;*									*
  8437                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8438                                  ;*		   auxbuf [auxnum] to zero				*
  8439                                  ;*									*
  8440                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8441                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8442                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8443                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8444                                  ;*									*
  8445                                  ;************************************************************************
  8446                                  
  8447                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8448 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8449 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8450                                  					; zero out buffer
  8451                                  		;clc			; all done, successful return
  8452                                  		; 12/12/2022
  8453                                  		; cf=0 ('add' instruction in 'getbx')
  8454 00000369 C3                      		retn
  8455                                  ; ---------------------------------------------------------------------------
  8456                                  
  8457                                  ;************************************************************************
  8458                                  ;*									*
  8459                                  ;*	aux_writ - write to aux device					*
  8460                                  ;*									*
  8461                                  ;************************************************************************
  8462                                  
  8463                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8464                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8465 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8466                                  aux_loop:				
  8467 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8468                                  					; move di pointer to next character
  8469 0000036F 47                      		inc	di
  8470 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8471 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8472 00000375 F6C480                  		test	ah, 80h		; check	for error
  8473 00000378 7405                    		jz	short awok	; then no error
  8474 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8475 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8476                                  ; ---------------------------------------------------------------------------
  8477                                  
  8478                                  awok:					
  8479 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8480                                  					; still	more character to print
  8481                                  		;clc			; all done, successful return
  8482                                  		; 12/12/2022
  8483                                  		; cf=0 (test instruction above)	
  8484 00000381 C3                      		retn
  8485                                  
  8486                                  ; =============== S U B	R O U T	I N E =======================================
  8487                                  
  8488                                  ;************************************************************************
  8489                                  ;*									*
  8490                                  ;*	getbx - return bx -> single byte input buffer for		*
  8491                                  ;*		selected aux port ([auxnum])				*
  8492                                  ;*									*
  8493                                  ;************************************************************************
  8494                                  
  8495                                  getbx:	
  8496 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8497                                  					; for selected aux port	([auxnum])
  8498                                  		;add	bx, offset auxbuf
  8499 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8500                                  		; 12/12/2022
  8501                                  		; cf=0 (if [uaxnum] is valid number) 
  8502 0000038A C3                      		retn
  8503                                  
  8504                                  ; ---------------------------------------------------------------------------
  8505                                  
  8506                                  ; 15/10/2022
  8507                                  
  8508                                  ;----------------------------------------------------------------
  8509                                  ;								:
  8510                                  ;		    clock device driver 			:
  8511                                  ;								:
  8512                                  ;								:
  8513                                  ;   this file contains the clock device driver. 		:
  8514                                  ;								:
  8515                                  ;   the routines in this files are:				:
  8516                                  ;								:
  8517                                  ;	routine 		function			:
  8518                                  ;	------- 		--------			:
  8519                                  ;	tim_writ		set the current time		:
  8520                                  ;	tim_read		read the current time		:
  8521                                  ;	time_to_ticks		convert time to corresponding	:
  8522                                  ;				  number of clock ticks 	:
  8523                                  ;								:
  8524                                  ; the clock ticks at the rate of:				:
  8525                                  ;								:
  8526                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8527                                  ; see each routine for information on the use.			:
  8528                                  ;								:
  8529                                  ;----------------------------------------------------------------
  8530                                  
  8531                                  ; convert time to ticks
  8532                                  ; input : time in cx and dx
  8533                                  ; ticks returned in cx:dx
  8534                                  
  8535                                  ;19/07/2019
  8536                                  ;09/03/2019
  8537                                  
  8538                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8539                                  
  8540                                  ; first convert from hour,min,sec,hund. to
  8541                                  ; total number of 100th of seconds
  8542                                  
  8543 0000038B B03C                    		mov	al, 60
  8544 0000038D F6E5                    		mul	ch		; hours	to minutes
  8545 0000038F B500                    		mov	ch, 0
  8546 00000391 01C8                    		add	ax, cx		; total	minutes
  8547 00000393 B97017                  		mov	cx, 6000	; 60*100
  8548 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8549 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8550 0000039A 89C1                    		mov	cx, ax
  8551 0000039C B064                    		mov	al, 100
  8552 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8553 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8554 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8555 000003A5 B700                    		mov	bh, 0
  8556 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8557 000003A9 83D200                  		adc	dx, 0
  8558                                  
  8559                                  	; dx:cx is time in 1/100 sec
  8560                                  
  8561 000003AC 92                      		xchg	ax, dx
  8562 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8563 000003AE BB0BE9                  		mov	bx, 59659
  8564 000003B1 F7E3                    		mul	bx		; multiply low half
  8565 000003B3 87D1                    		xchg	dx, cx
  8566 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8567 000003B6 F7E3                    		mul	bx		; multiply high	half
  8568 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8569 000003BA 83D200                  		adc	dx, 0
  8570 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8571 000003BE BB0500                  		mov	bx, 5
  8572 000003C1 F6F3                    		div	bl		; divide high half by 5
  8573 000003C3 88C1                    		mov	cl, al
  8574 000003C5 B500                    		mov	ch, 0
  8575 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8576 000003C9 98                      		cbw
  8577 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8578 000003CB F7F3                    		div	bx		; divide low half by 5
  8579 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8580 000003CF CB                      		retf			; far return
  8581                                  
  8582                                  ; ---------------------------------------------------------------------------
  8583                                  
  8584                                  ; 17/10/2022
  8585                                  ; 15/10/2022
  8586                                  
  8587                                  ;--------------------------------------------------------------------
  8588                                  ;
  8589                                  ; tim_writ sets the current time
  8590                                  ;
  8591                                  ; on entry es:[di] has the current time:
  8592                                  ;
  8593                                  ;	number of days since 1-1-80	(word)
  8594                                  ;	minutes (0-59)			(byte)
  8595                                  ;	hours (0-23)			(byte)
  8596                                  ;	hundredths of seconds (0-99)	(byte)
  8597                                  ;	seconds (0-59)			(byte)
  8598                                  ;
  8599                                  ; each number has been checked for the correct range.
  8600                                  ;
  8601                                  ;	NOTE: Any changes in this routine probably require corresponding
  8602                                  ;	changes in the version that is built with the power manager driver.
  8603                                  ;	See ptime.asm.
  8604                                  ;
  8605                                  ;--------------------------------------------------------------------
  8606                                  
  8607                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8608 000003D0 268B05                  		mov	ax, [es:di]
  8609 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8610                                  					; end to avoid tick windows.
  8611 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8612                                  		;cmp	ds:havecmosclock, 0
  8613 000003D9 7426                    		jz	short no_cmos_1
  8614 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8615                                  					; get binary hours
  8616                                  					; convert to bcd
  8617 000003DF FF1E[0205]              		call	far [bintobcd]
  8618                                  		;call	ds:bintobcd	; call far [bintobcd]
  8619 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8620 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8621 000003E9 FF1E[0205]              		call	far [bintobcd]
  8622                                  		;call	ds:bintobcd	; convert to bcd
  8623 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8624 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8625 000003F3 FF1E[0205]              		call	far [bintobcd]
  8626                                  		;call	ds:bintobcd
  8627 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8628 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8629 000003FB FA                      		cli
  8630 000003FC B403                    		mov	ah, 3
  8631 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8632                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8633                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8634                                  					; Return: CMOS clock set
  8635 00000400 FB                      		sti
  8636                                  no_cmos_1:				
  8637 00000401 268B4D02                		mov	cx, [es:di+2]
  8638 00000405 268B5504                		mov	dx, [es:di+4]
  8639                                  		; 17/10/2022
  8640 00000409 FF1E[E206]              		call	far [ttticks]
  8641                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8642                                  					; convert time to ticks
  8643                                  					; cx:dx	now has	time in	ticks
  8644 0000040D FA                      		cli			; turn off timer
  8645 0000040E B401                    		mov	ah, 1
  8646 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8647                                  					; CX:DX	= clock	count
  8648                                  					; Return: time of day set
  8649                                  		;pop	ds:daycnt
  8650 00000412 8F06[F004]              		pop	word [daycnt]
  8651 00000416 FB                      		sti
  8652                                  		;cmp	ds:havecmosclock, 0
  8653 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8654 0000041C 740A                    		jz	short no_cmos_2
  8655 0000041E FF1E[0605]              		call	far [daycnttoday]
  8656                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8657                                  					; convert to bcd format
  8658 00000422 FA                      		cli
  8659 00000423 B405                    		mov	ah, 5
  8660 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8661                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8662                                  					; CH = century (19h or 20h)
  8663                                  					; Return: CMOS clock set
  8664 00000427 FB                      		sti
  8665                                  no_cmos_2:
  8666                                  		; 12/12/2022
  8667                                  		; cf=0				
  8668                                  		;clc
  8669 00000428 C3                      		retn
  8670                                  
  8671                                  ; ---------------------------------------------------------------------------
  8672                                  
  8673                                  ; 15/10/2022
  8674                                  
  8675                                  ;----------------------------------------------------------------------------
  8676                                  ; gettime reads date and time
  8677                                  ; and returns the following information:
  8678                                  ;
  8679                                  ;	es:[di]  =count of days since 1-1-80
  8680                                  ;	es:[di+2]=hours
  8681                                  ;	es:[di+3]=minutes
  8682                                  ;	es:[di+4]=seconds
  8683                                  ;	es:[di+5]=hundredths of seconds
  8684                                  ;
  8685                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8686                                  ;	changes in the version that is built with the power manager driver.
  8687                                  ;	See ptime.asm.
  8688                                  ;----------------------------------------------------------------------------
  8689                                  
  8690                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8691 00000429 E84E00                  		call	GetTickCnt
  8692 0000042C 8B36[F004]              		mov	si, [daycnt]
  8693                                  
  8694                                  ; we now need to convert the time in tick to the time in 100th of
  8695                                  ; seconds. the relation between tick and seconds is:
  8696                                  ;
  8697                                  ;		 65,536 seconds
  8698                                  ;	       ----------------
  8699                                  ;		1,193,180 tick
  8700                                  ;
  8701                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8702                                  ;
  8703                                  ;	ticks from clock  * 65,536 * 100
  8704                                  ;      --------------------------------- = time in 100th of seconds
  8705                                  ;		1,193,180
  8706                                  ;
  8707                                  ; fortunately this formula simplifies to:
  8708                                  ;
  8709                                  ;	ticks from clock * 5 * 65,536
  8710                                  ;      --------------------------------- = time in 100th of seconds
  8711                                  ;		59,659
  8712                                  ;
  8713                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8714                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8715                                  ; my 16 bits to the left.
  8716                                  ;
  8717                                  ; start with ticks in cx:dx
  8718                                  ; multiply by 5
  8719                                  
  8720 00000430 89C8                    		mov	ax, cx
  8721 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8722                                  					; multiply by 5
  8723 00000434 D1E2                    		shl	dx, 1
  8724 00000436 D1D1                    		rcl	cx, 1		; times	2
  8725 00000438 D1E2                    		shl	dx, 1
  8726 0000043A D1D1                    		rcl	cx, 1		; times	4
  8727 0000043C 01DA                    		add	dx, bx
  8728 0000043E 11C8                    		adc	ax, cx		; times	5
  8729 00000440 92                      		xchg	ax, dx
  8730                                  
  8731                                  ; now have ticks * 5 in	dx:ax
  8732                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8733                                  
  8734 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8735 00000444 F7F1                    		div	cx		; dx now has remainder
  8736                                  					; ax has high word of final quotient
  8737 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8738 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8739 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8740                                  
  8741                                  ; rounding based on the	remainder may be added here
  8742                                  ; the result in	bx:ax is time in 1/100 second.
  8743                                  
  8744 0000044C 89DA                    		mov	dx, bx		
  8745 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8746                                  
  8747                                  ; division by 200 is necessary to ensure no overflow--max result
  8748                                  ; is number of seconds in a day/2 = 43200.
  8749                                  
  8750 00000451 F7F1                    		div	cx
  8751 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8752 00000456 7203                    		jb	short noadj
  8753 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8754                                  noadj:					
  8755 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8756 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8757                                  
  8758                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8759                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8760                                  
  8761 0000045E D1D0                    		rcl	ax, 1		
  8762 00000460 B200                    		mov	dl, 0
  8763 00000462 D1D2                    		rcl	dx, 1
  8764 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8765 00000467 F7F1                    		div	cx
  8766 00000469 88D7                    		mov	bh, dl		; save the seconds
  8767 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8768 0000046D 86C4                    		xchg	al, ah
  8769                                  
  8770                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8771                                  
  8772 0000046F 50                      		push	ax
  8773 00000470 89F0                    		mov	ax, si		; daycnt
  8774 00000472 AB                      		stosw
  8775 00000473 58                      		pop	ax
  8776 00000474 AB                      		stosw
  8777 00000475 89D8                    		mov	ax, bx
  8778 00000477 AB                      		stosw
  8779 00000478 F8                      		clc
  8780 00000479 C3                      		retn
  8781                                  
  8782                                  ; =============== S U B	R O U T	I N E =======================================
  8783                                  
  8784                                  ; 15/10/2022
  8785                                  
  8786                                  ;----------------------------------------------------------------------------
  8787                                  ;
  8788                                  ; procedure : GetTickCnt
  8789                                  ;
  8790                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8791                                  ;		of rollover [except when power management driver is in use]. 
  8792                                  ;		Uses the following logic for updating Daycnt
  8793                                  ;
  8794                                  ;		if ( rollover ) {
  8795                                  ;			if ( t_switch )
  8796                                  ;				daycnt++ ;
  8797                                  ;			else
  8798                                  ;				daycnt += rollover ;
  8799                                  ;		}
  8800                                  ;
  8801                                  ; USES : AX
  8802                                  ;
  8803                                  ; RETURNS : CX:DX - tick count
  8804                                  ; MODIFIES : daycnt
  8805                                  ;
  8806                                  ;----------------------------------------------------------------------------
  8807                                  
  8808                                  		; 17/10/2022
  8809                                  GetTickCnt:	
  8810 0000047A 30E4                    		xor	ah, ah
  8811 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8812                                  					; Return: CX:DX	= clock	count
  8813                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8814                                  					; midnight
  8815                                  					; Otherwise, AL	> 0
  8816 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8817 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8818 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8819                                  					; and not flag
  8820 00000487 0106[F004]              		add	[daycnt], ax
  8821 0000048B C3                      		retn
  8822                                  ; ---------------------------------------------------------------------------
  8823                                  
  8824                                  inc_case:				
  8825 0000048C 08C0                    		or	al, al
  8826 0000048E 7404                    		jz	short no_rollover
  8827 00000490 FF06[F004]              		inc	word [daycnt]
  8828                                  no_rollover:				
  8829 00000494 C3                      		retn
  8830                                  
  8831                                  ;----------------------------------------------------------------------------
  8832                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8833                                  ;----------------------------------------------------------------------------
  8834                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8835                                  ; 09/03/2019 - Retro DOS v4.0
  8836                                  
  8837                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8838                                  ; 26/05/2018 - Retro DOS v3.0
  8839                                  ; 23/03/2018 - Retro DOS v2.0
  8840                                  
  8841                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8842                                  
  8843                                  ;struc BPB_TYPE
  8844                                  ;.SECSIZE:	resw 1
  8845                                  ;.SECALL:	resb 1
  8846                                  ;.RESNUM:	resw 1
  8847                                  ;.FATNUM:	resb 1
  8848                                  ;.DIRNUM:	resw 1
  8849                                  ;.SECNUM:	resw 1
  8850                                  ;.FATID:	resb 1
  8851                                  ;.FATSIZE:	resw 1
  8852                                  ;.SLIM:		resw 1
  8853                                  ;.HLIM:		resw 1
  8854                                  ;.HIDDEN:	resw 1
  8855                                  ;.size:
  8856                                  ;endstruc
  8857                                  
  8858                                  ;-----------------------------------------------------------------
  8859                                  ;	disk interface routines
  8860                                  ;-----------------------------------------------------------------
  8861                                  
  8862                                  ; device attribute bits:
  8863                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8864                                  
  8865                                  ;MAXERR		equ	5
  8866                                  ;MAX_HD_FMT_ERR	equ	2
  8867                                  
  8868                                  ;LSTDRV	equ 504h
  8869                                  
  8870                                  ; some floppies do not have changeline. as a result, media-check would
  8871                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8872                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8873                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8874                                  ; the time of the last successful disk operation and compare it with the current
  8875                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8876                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8877                                  ; since we cannot trust the timer to be always available, we record the number 
  8878                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8879                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8880                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8881                                  ; the time of last successful access, if we see that time has passed too,
  8882                                  ; we reset the counter.
  8883                                  
  8884                                  accessmax	equ	5
  8885                                  
  8886                                  ; due to various bogosities, we need to continually adjust what the head
  8887                                  ; settle time is.  the following algorithm is used:
  8888                                  ;
  8889                                  ;   get the current head settle value.
  8890                                  ;   if it is 0, then
  8891                                  ;	set slow = 15
  8892                                  ;   else
  8893                                  ;	set slow = value
  8894                                  ;   ...
  8895                                  ;*********************************************
  8896                                  ;************ old algorithm ******************
  8897                                  ;*   if we are seeking and writing then
  8898                                  ;*	 use slow
  8899                                  ;*   else
  8900                                  ;*	 use fast
  8901                                  ;*********************************************
  8902                                  ;*********** ibm's requested logic ***********
  8903                                  ;   if we are seeking and writing and not on an at then
  8904                                  ;	use slow
  8905                                  ;   else
  8906                                  ;	use fast
  8907                                  ;   ...
  8908                                  ;   restore current head settle value
  8909                                  ;
  8910                                  ;
  8911                                  ;---------------------------------------
  8912                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8913                                  					; it on after handling config.sys file as a
  8914                                  					; default value, if multrk_flag = multrk_off1.
  8915                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8916                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8917                                  
  8918                                  ; close data segment, open Bios_Code segment
  8919                                  
  8920                                  ; 15/10/2022
  8921                                  
  8922                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8923                                  
  8924                                  ;-----------------------------------------------------------------
  8925                                  ;	command jump table
  8926                                  ;-----------------------------------------------------------------
  8927                                  
  8928 00000495 00                      		db 0
  8929                                  
  8930                                  ; 11/12/2022
  8931                                  %if 0
  8932                                  
  8933                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8934                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8935                                  		dw 1742h		; dsk_init
  8936                                  		dw 4EBh			; media_chk
  8937                                  		dw 592h			; get_bpb
  8938                                  		dw 0D5h			; bc_cmderr
  8939                                  		dw 857h			; dsk_read
  8940                                  		dw 83Dh			; x_bus_exit
  8941                                  		dw 558h			; ret_carry_clear
  8942                                  		dw 558h			; ret_carry_clear
  8943                                  		dw 849h			; dsk_writ
  8944                                  		dw 841h			; dsk_writv
  8945                                  		dw 558h			; ret_carry_clear
  8946                                  		dw 558h			; ret_carry_clear
  8947                                  		dw 0D5h			; bc_cmderr
  8948                                  		dw 80Ah			; dsk_open
  8949                                  		dw 81Ah			; dsk_close
  8950                                  		dw 831h			; dsk_rem
  8951                                  		dw 558h			; ret_carry_clear
  8952                                  		dw 558h			; ret_carry_clear
  8953                                  		dw 558h			; ret_carry_clear
  8954                                  		dw 0C6Bh		; do_generic_ioctl
  8955                                  		dw 558h			; ret_carry_clear
  8956                                  		dw 558h			; ret_carry_clear
  8957                                  		dw 558h			; ret_carry_clear
  8958                                  		dw 1124h		; ioctl_getown
  8959                                  		dw 1142h		; ioctl_setown
  8960                                  		dw 129Ah		; ioctl_support_query
  8961                                  
  8962                                  ;dtbl_siz equ $-dsktbl
  8963                                  
  8964                                  %endif
  8965                                  		; 11/12/2022
  8966 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8967 00000497 [C316]                  		dw dsk_init
  8968 00000499 [DF04]                  		dw media_chk
  8969 0000049B [8505]                  		dw get_bpb
  8970 0000049D [D500]                  		dw bc_cmderr
  8971 0000049F [3508]                  		dw dsk_read
  8972 000004A1 [1B08]                  		dw x_bus_exit
  8973 000004A3 [4B05]                  		dw ret_carry_clear
  8974 000004A5 [4B05]                  		dw ret_carry_clear
  8975 000004A7 [2708]                  		dw dsk_writ
  8976 000004A9 [1F08]                  		dw dsk_writv
  8977 000004AB [4B05]                  		dw ret_carry_clear
  8978 000004AD [4B05]                  		dw ret_carry_clear
  8979 000004AF [D500]                  		dw bc_cmderr
  8980 000004B1 [EB07]                  		dw dsk_open
  8981 000004B3 [FA07]                  		dw dsk_close
  8982 000004B5 [1008]                  		dw dsk_rem
  8983 000004B7 [4B05]                  		dw ret_carry_clear
  8984 000004B9 [4B05]                  		dw ret_carry_clear
  8985 000004BB [4B05]                  		dw ret_carry_clear
  8986 000004BD [420C]                  		dw do_generic_ioctl
  8987 000004BF [4B05]                  		dw ret_carry_clear
  8988 000004C1 [4B05]                  		dw ret_carry_clear
  8989 000004C3 [4B05]                  		dw ret_carry_clear
  8990 000004C5 [D910]                  		dw ioctl_getown
  8991 000004C7 [F610]                  		dw ioctl_setown
  8992 000004C9 [4412]                  		dw ioctl_support_query
  8993                                  
  8994                                  dtbl_siz equ $-dsktbl
  8995                                  
  8996                                  ; =============== S U B	R O U T	I N E =======================================
  8997                                  
  8998                                  ; ---------------------------------------------------------------------------
  8999                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9000                                  ; the one that belongs to the drive specified. carry is set if none exists
  9001                                  ; for the drive. Pointer is returned in es:[di]
  9002                                  ;
  9003                                  ;  AL contains the logical drive number.
  9004                                  ; ---------------------------------------------------------------------------
  9005                                  
  9006                                  SetDrive:	
  9007                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9008 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9009                                  X_Scan_Loop:				
  9010 000004CF 26384505                		cmp	[es:di+5], al	
  9011 000004D3 7409                    		jz	short X_SetDrv
  9012 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9013 000004D8 83FFFF                  		cmp	di, 0FFFFh
  9014 000004DB 75F2                    		jnz	short X_Scan_Loop
  9015 000004DD F9                      		stc
  9016                                  X_SetDrv:				
  9017 000004DE C3                      		retn
  9018                                  
  9019                                  ; ---------------------------------------------------------------------------
  9020                                  
  9021                                  ; 15/10/2022
  9022                                  
  9023                                  ; ---------------------------------------------------------------------
  9024                                  ; if id is f9, have a 96tpi disk else
  9025                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9026                                  ;  otherwise if within 2 secs of last disk operation media could not
  9027                                  ;    have changed, otherwise dont know if media has changed
  9028                                  ; ---------------------------------------------------------------------
  9029                                  
  9030                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9031 000004DF E8E9FF                  		call	SetDrive
  9032 000004E2 BE0100                  		mov	si, 1
  9033 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9034                                  					; fchanged_by_format
  9035 000004EA 7416                    		jz	short WeAreNotFakingIt
  9036                                  		; 12/12/2022
  9037 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9038                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9039                                  					; ~fchanged_by_format ;	reset flag
  9040 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9041                                  					; Ensure that we ask the rom if media has changed
  9042 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9043                                  					; fnon_removable
  9044 000004FB 740C                    		jz	short wehaveafloppy
  9045 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9046 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  9047                                  ; ---------------------------------------------------------------------------
  9048                                  
  9049                                  WeAreNotFakingIt:
  9050                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9051 00000502 26F6452301              		test	byte [es:di+23h], 1
  9052 00000507 7525                    		jnz	short Media_Done
  9053                                  wehaveafloppy:				
  9054 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  9055                                  
  9056                                  		; If we have a floppy with changeline support, we ask the ROM
  9057                                  		; to determine if media has changed. We do not perform the
  9058                                  		; 2 second check for these drives.
  9059                                  
  9060 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9061 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9062 00000512 E87912                  		call	mediacheck	;  Call	into removable routine
  9063 00000515 7236                    		jb	short err_exitj
  9064 00000517 E8C913                  		call	haschange
  9065 0000051A 7512                    		jnz	short Media_Done
  9066                                  mChk_NoChangeLine:
  9067                                  		; If we come here, we have a floppy with no changeline support
  9068                                  			
  9069 0000051C BE0100                  		mov	si, 1		; Presume no change
  9070 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9071 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9072                                  					; Is drive of last access the same?
  9073 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9074 00000528 E82800                  		call	Check_Time_Of_Access
  9075 0000052B EB01                    		jmp	short Media_Done
  9076                                  ; ---------------------------------------------------------------------------
  9077                                  
  9078                                  Media_Unk:				
  9079 0000052D 4E                      		dec	si		; ; Return "I don't know"
  9080                                  
  9081                                  		; SI now contains the correct value for media change.
  9082                                  		; Clean up the left overs
  9083                                  Media_Done:	
  9084                                  		; 19/10/2022			
  9085 0000052E 06                      		push	es
  9086 0000052F C41E[1200]              		les	bx, [ptrsav]
  9087 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9088 00000537 07                      		pop	es
  9089 00000538 09F6                    		or	si, si
  9090 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  9091 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  9092 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9093 00000543 E82F13                  		call	media_set_vid
  9094                                  mChk1_NoChangeLine:			
  9095 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9096                                  					; Make sure we ask rom for media check
  9097                                  ret_carry_clear:			
  9098 0000054B F8                      		clc			; volidok
  9099 0000054C C3                      		retn
  9100                                  ; ---------------------------------------------------------------------------
  9101                                  
  9102                                  err_exitj:				
  9103 0000054D E87D06                  		call	maperror	; guaranteed to	set carry
  9104                                  ret81:					
  9105 00000550 B481                    		mov	ah, 81h		; return error status
  9106 00000552 C3                      		retn			; return with carry set
  9107                                  
  9108                                  ; =============== S U B	R O U T	I N E =======================================
  9109                                  
  9110                                  ; ---------------------------------------------------------------------------
  9111                                  ; perform a check on the time passed since the last access for this physical
  9112                                  ; drive.
  9113                                  ; we are accessing the same drive. if the time of last successful access was
  9114                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9115                                  ; returns in si:
  9116                                  ;	0 - if time of last access was >= 2 seconds
  9117                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9118                                  ; registers affected ax,cx,dx, flags.
  9119                                  ;
  9120                                  ;	assume es:di -> bds, ds->Bios_Data
  9121                                  ; ---------------------------------------------------------------------------
  9122                                  
  9123                                  		; 19/10/2022
  9124                                  Check_Time_Of_Access:
  9125 00000553 BE0100                  		mov	si, 1		; presume no change.
  9126 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9127 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9128                                  					; get stored time
  9129 0000055D 29C2                    		sub	dx, ax
  9130 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9131 00000563 19C1                    		sbb	cx, ax
  9132 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9133 00000567 09D2                    		or	dx, dx		; time must pass
  9134 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9135 0000056B FE06[1D01]              		inc	byte [accesscount]
  9136 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9137                                  					; if count is less than threshold, ok
  9138 00000574 720C                    		jb	short timecheck_ret
  9139 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9140 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9141                                  ; ---------------------------------------------------------------------------
  9142                                  
  9143                                  timepassed:				
  9144 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9145                                  					; min elapsed time? (2 seconds)
  9146 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9147                                  
  9148                                  		; everything indicates that we do not know what has happened.
  9149                                  timecheck_unk:				
  9150 00000581 4E                      		dec	si		; presume i don't know
  9151                                  timecheck_ret:				
  9152 00000582 C3                      		retn
  9153                                  
  9154                                  ; ---------------------------------------------------------------------------
  9155                                  ; 15/10/2022
  9156                                  Err_Exitj2:
  9157 00000583 EBC8                    		jmp	short err_exitj
  9158                                  
  9159                                  ; ---------------------------------------------------------------------------
  9160                                  
  9161                                  ; 15/10/2022
  9162                                  
  9163                                  ; ==========================================================================
  9164                                  ; Build a valid bpb for the disk in the drive.
  9165                                  ; ==========================================================================
  9166                                  
  9167                                  		; 19/10/2022
  9168                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9169 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9170 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9171 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9172                                  					; fnon_removable
  9173 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9174                                  
  9175                                  		; let's set the default value for volid,vol_serial,
  9176                                  		; filesys_id in bds table
  9177                                  
  9178 00000592 E83700                  		call	clear_ids
  9179                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9180 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9181 0000059A E85B00                  		call	GetBp		; build	a bpb if necessary
  9182 0000059D 72B1                    		jb	short ret81
  9183                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9184 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9185                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9186 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9187 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9188                                  					; otherwise, conventional boot record
  9189                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9190 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9191 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9192 000005B2 E83413                  		call	set_volume_id
  9193                                  already_gotbpb:				
  9194 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9195                                  					; return the bpb from the current bds
  9196                                  
  9197                                  ;		 fall into setptrsav, es:di -> result
  9198                                  
  9199                                  ; ---------------------------------------------------------------------------
  9200                                  
  9201                                  ; 15/10/2022
  9202                                  
  9203                                  ; ==========================================================================
  9204                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9205                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9206                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9207                                  ;It fails, for instance, when we install an external drive using driver.sys
  9208                                  ;because then the BDS segment is no longer Bios_Data. 
  9209                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9210                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9211                                  ;restored before returning to the caller.
  9212                                  ; ==========================================================================
  9213                                  
  9214                                  		; 19/10/2022
  9215                                  SetPtrSav:	; return point for dsk_init				
  9216 000005B8 8CC1                    		mov	cx, es		; save es
  9217                                  		;les	bx, ds:ptrsav
  9218 000005BA C41E[1200]              		les	bx, [ptrsav]
  9219 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9220 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9221 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9222 000005CA F8                      		clc
  9223 000005CB C3                      		retn
  9224                                  
  9225                                  ; =============== S U B	R O U T	I N E =======================================
  9226                                  
  9227                                  ; 15/10/2022
  9228                                  
  9229                                  ; -----------------------------------------------------
  9230                                  ; clear ids in bds table. only applied for floppies.
  9231                                  ;input:  es:di -> bds table
  9232                                  ;	assumes ds: -> Bios_Data
  9233                                  ;output: volid set to "NO NAME    "
  9234                                  ;	 vol_serial set to 0.
  9235                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9236                                  ;	   depending on the flag fatsize in bds.
  9237                                  ;
  9238                                  ;	trashes si, cx
  9239                                  ; -----------------------------------------------------
  9240                                  
  9241                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9242                                  ;size_of_EXT_SYSTEM_ID equ 8
  9243                                  
  9244                                  clear_ids:
  9245                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9246 000005CC 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9247                                  clear_ids_x:	; 11/09/2023		
  9248                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9249 000005D0 57                      		push	di
  9250 000005D1 31C9                    		xor	cx, cx		; no serial number
  9251 000005D3 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9252 000005D7 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9253                                  
  9254                                  		; BUGBUG - there's a lot in common here and with
  9255                                  		; mov_media_ids.. see if we can save some space by
  9256                                  		; merging them... jgl
  9257                                  
  9258                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9259                                  		; 10/12/2022
  9260 000005DB B10B                    		mov	cl, 11 ; cx = 11		
  9261                                  
  9262                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9263 000005DD BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9264 000005E0 83C74B                  		add	di, 75		; BDS.volid
  9265 000005E3 F3A4                    		rep movsb
  9266                                  		
  9267                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9268                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9269                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9270                                  		;test	byte [es:di+1Fh], 40h
  9271                                  
  9272                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9273                                  			; Microsoft/IBM code has a bug here because the BDS's
  9274                                  			; .volid and .filesys_id fields will be reset
  9275                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9276                                  			; at the BDS offset 31 but current (this) code checks flags
  9277                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9278                                  			;
  9279                                  			; Correct Code:
  9280                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9281                                  			; 11/09/2023
  9282                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9283                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9284                                  			;
  9285                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9286                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9287                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9288                                  			;
  9289                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9290                                  			; 'clear_ids' is used for floppy disks only and the default
  9291                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9292                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9293                                  
  9294 000005E5 A840                    		test	al, 40h ; * 
  9295                                  		
  9296                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9297 000005E7 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9298 000005EA 7503                    		jnz	short ci_bigfat
  9299                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9300 000005EC BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9301                                  ci_bigfat:				
  9302                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9303                                  		; 10/12/2022
  9304 000005EF B108                    		mov	cl, 8 ; cx = 8 
  9305 000005F1 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9306                                  					; filesys_id field
  9307 000005F4 F3A4                    		rep movsb
  9308 000005F6 5F                      		pop	di		; restore bds pointer
  9309 000005F7 C3                      		retn
  9310                                  
  9311                                  ; =============== S U B	R O U T	I N E =======================================
  9312                                  
  9313                                  ; 15/10/2022
  9314                                  
  9315                                  ; ---------------------------------------------------------------------------
  9316                                  ;	getbp - return bpb from the drive specified by the bds.
  9317                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9318                                  ;	    note that we never come here for fixed disks.
  9319                                  ;	    for all other cases,
  9320                                  ;	      - it reads boot sector to pull out the bpb
  9321                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9322                                  ;		to get the fat id byte to build the bpb from there.
  9323                                  ;
  9324                                  ;   inputs:	es:di point to correct bds.
  9325                                  ;
  9326                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9327                                  ;		carry set, and al=7 if invalid disk.
  9328                                  ;		carry set and error code in al if other error.
  9329                                  ;		if failed to recognize the boot record, then will set the
  9330                                  ;		set_id_flag to 0.
  9331                                  ;		this routine will only work for a floppy diskette.
  9332                                  ;		     for a fixed disk, it will just return.
  9333                                  ;
  9334                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9335                                  ;	  segment definitions. It should be migrated towards.
  9336                                  ;	   now es:di has the bds, ds: has Bios_Data
  9337                                  ; ---------------------------------------------------------------------------
  9338                                  
  9339                                  GetBp:		; if returning fake bpb then return bpb as is.
  9340                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9341 000005F8 26F6452305              		test	byte [es:di+23h], 5
  9342 000005FD 7403                    		jz	short getbp1	; getbp1
  9343 000005FF E99A00                  		jmp	getret_exit
  9344                                  ; ---------------------------------------------------------------------------
  9345                                  
  9346                                  getbp1:					
  9347 00000602 51                      		push	cx
  9348 00000603 52                      		push	dx
  9349 00000604 53                      		push	bx
  9350                                  
  9351                                  		; attempt to read in boot sector and determine bpb.
  9352                                  		; we assume that the 2.x and greater dos disks all
  9353                                  		; have a valid boot sector.
  9354                                  
  9355 00000605 E8A900                  		call	readbootsec
  9356 00000608 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9357 0000060A 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9358 0000060C 7508                    		jnz	short dofatbpb
  9359 0000060E E8EE00                  		call	movbpb		; move bpb into	registers
  9360 00000611 EB57                    		jmp	short Has1
  9361                                  ; ---------------------------------------------------------------------------
  9362                                  
  9363                                  getbp_err_ret_brdg:			
  9364 00000613 E98700                  		jmp	getbp_err_ret
  9365                                  ; ---------------------------------------------------------------------------
  9366                                  
  9367                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9368                                  		; and fill in bpb from there.
  9369                                  dofatbpb:				
  9370 00000616 E85201                  		call	readfat		; puts media descriptor	byte in	ah
  9371 00000619 72F8                    		jb	short getbp_err_ret_brdg
  9372                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9373 0000061B 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9374 00000620 7403                    		jz	short bpb_nochangeline ; brif not
  9375 00000622 E86512                  		call	hidensity	; may not return! May add sp, 2	and
  9376                                  					; jump to has1!!!!!! or	has720K
  9377                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9378 00000625 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9379                                  					; ffSmall
  9380 0000062A 7515                    		jnz	short is_floppy
  9381 0000062C 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9382 0000062F 7576                    		jnz	short got_unknown_medium
  9383                                  Has720K:				
  9384                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9385 00000631 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9386                                  
  9387                                  		; es points to segment of bds. the following should be modified
  9388                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9389                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9390                                  
  9391                                  		; 10/12/2022
  9392                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9393                                  		; 21/12/2022
  9394 00000634 8A07                    		mov	al, [bx]
  9395 00000636 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9396 00000639 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9397 0000063C 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9398                                  		; 19/10/2022 - Temporary !
  9399                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9400                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9401                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9402                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9403                                  
  9404 0000063F EB29                    		jmp	short Has1
  9405                                  ; ---------------------------------------------------------------------------
  9406                                  
  9407                                  is_floppy:			; must be a 5.25" floppy if we come here
  9408 00000641 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9409 00000644 7261                    		jb	short got_unknown_medium
  9410 00000646 B001                    		mov	al, 1		; set number of	fat sectors
  9411 00000648 BB0840                  		mov	bx, 16392	; 64*256+8
  9412                                  					; set dir entries and sector max
  9413 0000064B B94001                  		mov	cx, 320		; 40*8
  9414                                  					; set size of drive
  9415 0000064E BA0101                  		mov	dx, 257		; 01*256+1
  9416                                  					; set head limit and sec/all unit
  9417 00000651 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9418 00000654 7507                    		jnz	short has8	; nz = has 8 sectors
  9419 00000656 FEC0                    		inc	al		; inc number of	fat sectors
  9420 00000658 FEC3                    		inc	bl		; inc sector max
  9421                                  		;add	cx, 40		; increase size	(to 360)
  9422                                  		; 18/12/2022
  9423 0000065A 80C128                  		add	cl, 40
  9424                                  has8:					
  9425 0000065D F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9426 00000660 7408                    		jz	short Has1	; jz = 1 head
  9427 00000662 01C9                    		add	cx, cx		; double size of disk
  9428 00000664 B770                    		mov	bh, 112		; increase number of directory entries
  9429 00000666 FEC6                    		inc	dh		; inc sec/all unit
  9430 00000668 FEC2                    		inc	dl		; inc head limit
  9431                                  Has1:					
  9432                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
  9433 0000066A 1E                      		push	ds
  9434 0000066B 06                      		push	es
  9435 0000066C 1F                      		pop	ds		
  9436                                  				
  9437                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9438                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9439                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9440                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
  9441                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9442                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9443                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9444                                  
  9445 0000066D 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
  9446 00000670 30F6                    		xor	dh, dh
  9447 00000672 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
  9448 00000675 88FA                    		mov	dl, bh
  9449 00000677 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  9450 0000067A 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
  9451 0000067D 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
  9452 00000680 886510                  		mov	[di+10h], ah	; [di+BDS.media]
  9453 00000683 88C2                    		mov	dl, al
  9454 00000685 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
  9455 00000688 88DA                    		mov	dl, bl
  9456 0000068A 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
  9457                                  
  9458                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9459                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9460                                  		; to 0 since this code is for floppies
  9461                                  
  9462                                  		; 18/12/2022
  9463                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9464                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9465                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9466                                  		; 18/12/2022
  9467 0000068D 29C9                    		sub	cx, cx ; 0
  9468                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9469                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9470                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9471                                  		
  9472                                  		; 02/09/2023
  9473 0000068F 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
  9474 00000692 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
  9475 00000695 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
  9476                                  		
  9477 00000698 1F                      		pop	ds ; 02/09/2023
  9478                                  getret:					
  9479 00000699 5B                      		pop	bx
  9480 0000069A 5A                      		pop	dx
  9481 0000069B 59                      		pop	cx
  9482                                  getret_exit:				
  9483 0000069C C3                      		retn
  9484                                  ; ---------------------------------------------------------------------------
  9485                                  
  9486                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9487                                  		;mov	ds:set_id_flag,	0
  9488                                  		; 19/10/2022
  9489 0000069D C606[0A05]00            		mov	byte [set_id_flag], 0
  9490 000006A2 E82805                  		call	maperror
  9491 000006A5 EBF2                    		jmp	short getret
  9492                                  ; ---------------------------------------------------------------------------
  9493                                  
  9494                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9495                                  		; we do	not assume any type of bpb for this medium.
  9496                                  
  9497                                  got_unknown_medium:			
  9498                                  		;mov	ds:set_id_flag,	0 
  9499 000006A7 C606[0A05]00            		mov	byte [set_id_flag], 0
  9500 000006AC B007                    		mov	al, 7
  9501 000006AE F9                      		stc
  9502 000006AF EBE8                    		jmp	short getret
  9503                                  
  9504                                  ; =============== S U B	R O U T	I N E =======================================
  9505                                  
  9506                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9507                                  
  9508                                  ; ----------------------------------------------------------------
  9509                                  ; read in the boot sector. set carry if error in reading sector.
  9510                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9511                                  ;
  9512                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9513                                  ; ----------------------------------------------------------------
  9514                                  
  9515                                  ; 10/03/2019 - Retro DOS v4.0
  9516                                  
  9517                                  readbootsec:	
  9518 000006B1 B600                    		mov	dh, 0		; head 0
  9519 000006B3 B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9520 000006B6 E8BF00                  		call	read_sector
  9521 000006B9 7243                    		jb	short err_ret
  9522 000006BB 31DB                    		xor	bx, bx		; assume valid boot sector
  9523                                  
  9524                                  		; put a sanity check for the boot sector in here to detect
  9525                                  		; boot sectors that do not have valid bpbs. we examine the
  9526                                  		; first two bytes - they must contain a long jump (69h) or a
  9527                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9528                                  		; (E9h). if this test is passed, we further check by examining
  9529                                  		; the signature at the end of the boot sector for the word
  9530                                  		; AA55h. if the signature is not present, we examine the media
  9531                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9532                                  		; logic is modified a little bit. we are not going to check
  9533                                  		; signature. instead we are going to sanity check the media
  9534                                  		; byte in bpb regardless of the validity of signature. this is
  9535                                  		; to save the already developed commercial products that have
  9536                                  		; good jump instruction and signature but with the false bpb
  9537                                  		; informations
  9538                                  
  9539                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9540                                  
  9541                                  		; 02/09/2023
  9542                                  		; 19/10/2022
  9543                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
  9544                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
  9545                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9546                                  		;jz	short check_bpb_mediabyte ; no need for	nop
  9547                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
  9548                                  		;jnz	short invalidbootsec
  9549                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
  9550                                  		;jnz	short invalidbootsec
  9551                                  
  9552                                  		; 02/09/2023 (PCDOS 7.1)
  9553 000006BD A0[4E01]                		mov	al, [disksector]
  9554 000006C0 3C69                    		cmp	al, 69h		; is it a direct jump?
  9555 000006C2 740F                    		je	short check_bpb_mediabyte
  9556                                  					; don't need to find a nop
  9557 000006C4 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
  9558 000006C6 740B                    		je	short check_bpb_mediabyte
  9559                                  					; no need for nop
  9560 000006C8 3CEB                    		cmp	al, 0EBh	; how about a short jump?
  9561 000006CA 7530                    		jne	short invalidbootsec
  9562 000006CC 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9563 000006D1 7529                    		jne	short invalidbootsec
  9564                                  
  9565                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9566                                  ;
  9567                                  ;; 10/03/2019
  9568                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9569                                  ;;
  9570                                  ;; Don't have to perform the following signature check since
  9571                                  ;; we need to check the media byte even with the good signatured diskette.
  9572                                  ;;
  9573                                  ;;check_signature:
  9574                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9575                                  ;;							 ; disk or 1.x media.
  9576                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9577                                  ;;					       ; may need some special handling
  9578                                  
  9579                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9580                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9581                                  ; by examining the media descriptor in the boot sector.
  9582                                  
  9583                                  		; 19/10/2022
  9584                                  check_bpb_mediabyte:
  9585 000006D3 A0[6301]                		mov	al, [disksector+15h]
  9586                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9587 000006D6 50                      		push	ax ; 02/09/2023
  9588 000006D7 24F0                    		and	al, 0F0h
  9589 000006D9 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9590 000006DB 58                      		pop	ax ; 02/09/2023
  9591 000006DC 751E                    		jnz	short invalidbootsec
  9592                                  
  9593                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9594                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9595                                  ; sectors. these are specifically diskettes that were formatted in drives
  9596                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9597                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9598                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9599                                  ; help our build bpb routine to recognise these specific cases, and to
  9600                                  ; set up out copy of the bpb accordingly.
  9601                                  ; we do this by checking to see if the boot sector is off a diskette that
  9602                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9603                                  ; sec/clus field to 1. if not, we carry on as normal.
  9604                                  
  9605                                  checksinglesided:
  9606                                  		;mov	al, [disksector+15h]
  9607                                  		; 02/09/2023
  9608                                  		; al = [disksector+15h]
  9609 000006DE 3CF0                    		cmp	al, 0F0h
  9610 000006E0 741B                    		jz	short gooddsk
  9611 000006E2 A801                    		test	al, 1
  9612 000006E4 7517                    		jnz	short gooddsk
  9613 000006E6 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9614 000006EC 7507                    		jnz	short mustbeearlier
  9615 000006EE 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9616 000006F3 7308                    		jnb	short gooddsk
  9617                                  
  9618                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9619                                  
  9620                                  mustbeearlier:				
  9621 000006F5 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9622                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9623 000006FA EB01                    		jmp	short gooddsk
  9624                                  ; ---------------------------------------------------------------------------
  9625                                  
  9626                                  invalidbootsec:				
  9627 000006FC 43                      		inc	bx		; indicate that boot sector invalid
  9628                                  		; 10/12/2022
  9629                                  movbpb_ret:
  9630                                  gooddsk:				
  9631 000006FD F8                      		clc
  9632                                  err_ret:
  9633 000006FE C3                      		retn
  9634                                  ; ---------------------------------------------------------------------------
  9635                                  
  9636                                  		; 10/12/2022
  9637                                  ;err_ret:				
  9638                                  		;retn
  9639                                  
  9640                                  ; =============== S U B	R O U T	I N E =======================================
  9641                                  
  9642                                  ; 15/10/2022
  9643                                  ; ---------------------------------------------------------------------------
  9644                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9645                                  ; getbp routine at has1
  9646                                  ;
  9647                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9648                                  ; serial number, volume label, file system id in bds according to
  9649                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9650                                  ; to signal that volume label is set already from the extended boot record
  9651                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9652                                  ; the volume label in the root directory.)
  9653                                  ; ---------------------------------------------------------------------------
  9654                                  
  9655                                  ; 10/03/2019 - Retro DOS v4.0
  9656                                  
  9657                                  		; 19/10/2022
  9658                                  movbpb:	
  9659 000006FF 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9660                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9661                                  					; sectors per unit
  9662 00000703 8A3E[5F01]              		mov	bh, [disksector+11h]
  9663                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9664                                  					; number of directory entries
  9665 00000707 8B0E[6101]              		mov	cx, [disksector+13h]
  9666                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9667                                  					; size of drive
  9668 0000070B 8A26[6301]              		mov	ah, [disksector+15h]
  9669                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9670                                  					; media	descriptor
  9671 0000070F A0[6401]                		mov	al, [disksector+16h];
  9672                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9673                                  					; number of fat	sectors
  9674 00000712 8A1E[6601]              		mov	bl, [disksector+18h]
  9675                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9676                                  					; sectors per track
  9677 00000716 8A16[6801]              		mov	dl, [disksector+1Ah]
  9678                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9679                                  					; number of heads
  9680 0000071A 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9681 0000071F 75DC                    		jnz	short movbpb_ret
  9682 00000721 E81200                  		call	mov_media_ids
  9683 00000724 7205                    		jb	short movbpb_conv ; conventional boot record?
  9684 00000726 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9685                                  movbpb_conv:				
  9686 0000072B 803E[7700]01            		cmp	byte [fhave96], 1
  9687 00000730 75CB                    		jnz	short movbpb_ret
  9688 00000732 E8A811                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9689                                  		; 10/12/2022
  9690                                  		; cf = 0
  9691                                  ;movbpb_ret:				
  9692                                  		;clc
  9693 00000735 C3                      		retn
  9694                                  
  9695                                  ; =============== S U B	R O U T	I N E =======================================
  9696                                  
  9697                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9698                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9699                                  ;by es:di.
  9700                                  
  9701                                  ;in.) es:di -> bds
  9702                                  ;     ds:disksector = valid extended boot record.
  9703                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9704                                  ;      the boot record information.
  9705                                  ;     carry flag set if not an extended bpb.
  9706                                  ;     all registers saved except the flag.
  9707                                  
  9708                                  		; 19/10/2022
  9709                                  mov_media_ids:		
  9710 00000736 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9711                                  					; [disksector+EXT_BOOT.SIG],
  9712                                  					; EXT_BOOT_SIGNATURE
  9713 0000073B 752C                    		jnz	short mmi_not_ext
  9714 0000073D 51                      		push	cx
  9715 0000073E 8B0E[7501]              		mov	cx, [disksector+27h]
  9716                                  					; [disksector+EXT_BOOT.SERIAL]
  9717 00000742 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9718 00000746 8B0E[7701]              		mov	cx, [disksector+29h]
  9719                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9720 0000074A 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9721 0000074E 57                      		push	di
  9722 0000074F 56                      		push	si
  9723 00000750 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9724 00000753 BE[7901]                		mov	si, disksector+2Bh
  9725                                  		;mov	si, (offset disksector+2Bh) ;
  9726                                  					; disksector+EXT_BOOT.VOL_LABEL
  9727 00000756 83C74B                  		add	di, 75		; BDS.volid
  9728 00000759 F3A4                    		rep movsb
  9729                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9730                                  		; 10/12/2022
  9731 0000075B B108                    		mov	cl, 8 ; cx = 8
  9732 0000075D BE[8401]                		mov	si, disksector+36h
  9733                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9734 00000760 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9735 00000763 F3A4                    		rep movsb
  9736 00000765 5E                      		pop	si
  9737 00000766 5F                      		pop	di
  9738 00000767 59                      		pop	cx
  9739                                  		; 10/12/2022
  9740                                  		; cf = 0
  9741                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9742                                  				; (20/09/2022)
  9743 00000768 C3                      		retn
  9744                                  ; ---------------------------------------------------------------------------
  9745                                  
  9746                                  mmi_not_ext:				
  9747 00000769 F9                      		stc
  9748 0000076A C3                      		retn
  9749                                  
  9750                                  ; =============== S U B	R O U T	I N E =======================================
  9751                                  
  9752                                  ; 15/10/2022
  9753                                  ; --------------------------------------------------------------
  9754                                  ; read in the fat sector and get the media byte from it.
  9755                                  ; input : es:di -> bds
  9756                                  ; output:
  9757                                  ;	  carry set if an error occurs, ax contains error code.
  9758                                  ;	  otherwise, ah contains media byte on exit
  9759                                  ; --------------------------------------------------------------
  9760                                  
  9761                                  readfat:	
  9762                                  		;mov	dh, 0
  9763                                  		; 10/12/2022
  9764 0000076B 30F6                    		xor	dh, dh
  9765 0000076D B90200                  		mov	cx, 2		; head 0
  9766                                  					; cylinder 0, sector 2
  9767 00000770 E80500                  		call	read_sector
  9768 00000773 7202                    		jb	short bad_fat_ret
  9769 00000775 8A27                    		mov	ah, [bx]	; media	byte
  9770                                  bad_fat_ret:				
  9771 00000777 C3                      		retn
  9772                                  
  9773                                  ; =============== S U B	R O U T	I N E =======================================
  9774                                  
  9775                                  ; 15/10/2022
  9776                                  
  9777                                  ; ---------------------------------------------------------------------------
  9778                                  ; read a single sector into the temp buffer.
  9779                                  ; perform three retries in case of error.
  9780                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9781                                  ;		cx has sector and cylinder
  9782                                  ;		dh has head
  9783                                  ;		es:di has bds
  9784                                  ;		ds has Bios_Data
  9785                                  ;
  9786                                  ;   outputs:	carry clear
  9787                                  ;		    Bios_Data:bx point to sector
  9788                                  ;		       (note: some callers assume location of buffer)
  9789                                  ;
  9790                                  ;		carry set
  9791                                  ;		    ax has rom error code
  9792                                  ;
  9793                                  ; register bp is preserved.
  9794                                  ; ---------------------------------------------------------------------------
  9795                                  
  9796                                  ; 10/03/2019 - Retro DOS v4.0
  9797                                  
  9798                                  		; 19/10/2022
  9799                                  read_sector:	
  9800 00000778 55                      		push	bp
  9801 00000779 BD0300                  		mov	bp, 3		; make 3 attempts
  9802 0000077C 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9803 00000780 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9804                                  rd_ret:					
  9805 00000783 06                      		push	es
  9806 00000784 1E                      		push	ds
  9807 00000785 07                      		pop	es
  9808 00000786 B80102                  		mov	ax, 201h
  9809 00000789 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9810                                  					; AL = number of sectors to read, CH = track, CL = sector
  9811                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9812                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9813 0000078B 07                      		pop	es
  9814 0000078C 734A                    		jnb	short okret2
  9815                                  rd_rty:					
  9816 0000078E E87404                  		call	again		; reset	disk, decrement	bp, preserve ax
  9817 00000791 7442                    		jz	short err_rd_ret
  9818 00000793 26F6452301              		test	byte [es:di+23h], 1
  9819                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9820                                  					; fnon_removable
  9821 00000798 75E9                    		jnz	short rd_ret
  9822 0000079A 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9823 0000079F 7510                    		jnz	short rd_skip1_dpt
  9824 000007A1 50                      		push	ax
  9825 000007A2 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9826 000007A3 C536[2D01]              		lds	si, [dpt]
  9827                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9828                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9829                                  		;			; NORMSETTLE
  9830                                  		; 12/12/2022
  9831 000007A7 B00F                    		mov	al, 15
  9832 000007A9 864409                  		xchg	al, [si+9]
  9833                                  		; 
  9834 000007AC 1F                      		pop	ds
  9835 000007AD A2[2A01]                		mov	[save_head_sttl], al
  9836 000007B0 58                      		pop	ax
  9837                                  rd_skip1_dpt:				
  9838 000007B1 06                      		push	es
  9839 000007B2 1E                      		push	ds
  9840 000007B3 07                      		pop	es
  9841 000007B4 B80102                  		mov	ax, 201h
  9842 000007B7 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9843                                  					; AL = number of sectors to read, CH = track, CL = sector
  9844                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9845                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9846 000007B9 07                      		pop	es
  9847 000007BA 9C                      		pushf
  9848 000007BB 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9849 000007C0 750E                    		jnz	short rd_skip2_dpt
  9850 000007C2 50                      		push	ax
  9851 000007C3 A0[2A01]                		mov	al, [save_head_sttl]
  9852 000007C6 1E                      		push	ds
  9853 000007C7 C536[2D01]              		lds	si, [dpt]
  9854 000007CB 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9855 000007CE 1F                      		pop	ds
  9856 000007CF 58                      		pop	ax
  9857                                  rd_skip2_dpt:				
  9858 000007D0 9D                      		popf
  9859 000007D1 7305                    		jnb	short okret2
  9860 000007D3 EBB9                    		jmp	short rd_rty
  9861                                  ; ---------------------------------------------------------------------------
  9862                                  
  9863                                  err_rd_ret:				
  9864 000007D5 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9865                                  					; return error
  9866 000007D7 F9                      		stc
  9867                                  
  9868                                  ; update information pertaining to last drive accessed, time of access, last
  9869                                  ; track accessed in that drive.
  9870                                  
  9871                                  okret2:					
  9872 000007D8 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9873 000007DC 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9874 000007E0 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9875                                  					; save last track accessed on this drive
  9876                                  					; preserve flags in case error occurred
  9877 000007E4 9C                      		pushf
  9878 000007E5 E8FD03                  		call	set_tim
  9879 000007E8 9D                      		popf			; restore flags
  9880 000007E9 5D                      		pop	bp
  9881 000007EA C3                      		retn
  9882                                  
  9883                                  ;----------------------------------------------------------------------------
  9884                                  ;	disk open/close routines
  9885                                  ;----------------------------------------------------------------------------
  9886                                  
  9887                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9888 000007EB 803E[7700]00            		cmp	byte [fhave96], 0
  9889 000007F0 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9890 000007F2 E8D6FC                  		call	SetDrive	; get bds for drive
  9891 000007F5 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9892                                  dsk_open_exit:	
  9893                                  		; 10/12/2022
  9894                                  		; cf = 0			
  9895                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9896                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9897 000007F9 C3                      		retn
  9898                                  ; ---------------------------------------------------------------------------
  9899                                  
  9900                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9901 000007FA 803E[7700]00            		cmp	byte [fhave96], 0
  9902 000007FF 740E                    		jz	short exitjx	; done if no changeline	support
  9903 00000801 E8C7FC                  		call	SetDrive	; get bds for drive
  9904 00000804 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9905 00000809 7404                    		jz	short exitjx	; watch	out for	wrap
  9906 0000080B 26FF4D20                		dec	word [es:di+20h]
  9907                                  exitjx:					
  9908                                  		; 10/12/2022
  9909                                  		; cf = 0
  9910                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9911                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9912 0000080F C3                      		retn
  9913                                  
  9914                                  ;----------------------------------------------------------------------------
  9915                                  ;		disk removable routine
  9916                                  ;----------------------------------------------------------------------------
  9917                                  
  9918                                  		; al is	unit #
  9919                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9920 00000810 E8B8FC                  		call	SetDrive	; get bds for this drive
  9921                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9922 00000813 26F6452301              		test	byte [es:di+23h], 1
  9923                                  		;jnz	short x_bus_exit ; non_rem
  9924 00000818 7501                    		jnz	short non_rem	; 15/10/2022
  9925                                  		; 10/12/2022
  9926                                  		; cf = 0
  9927                                  		;clc			; CF is already ZERO here
  9928                                  					; 15/10/2022
  9929 0000081A C3                      		retn
  9930                                  ; ---------------------------------------------------------------------------
  9931                                  
  9932                                  non_rem:
  9933                                  x_bus_exit:				
  9934 0000081B B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9935                                  					; return busy status
  9936 0000081D F9                      		stc
  9937                                  dsk_ret:				
  9938 0000081E C3                      		retn
  9939                                  
  9940                                  ;----------------------------------------------------------------------------
  9941                                  ;		disk i/o routines
  9942                                  ;----------------------------------------------------------------------------
  9943                                  
  9944                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9945                                  		;mov	word [wrtverify], 103h
  9946                                  		; 19/10/2022
  9947 0000081F C706[2001]0301          		mov	word [rflag], 103h
  9948                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9949 00000825 EB06                    		jmp	short dsk_cl
  9950                                  ; ---------------------------------------------------------------------------
  9951                                  
  9952                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9953                                  		;mov	word [wrtverify], 3
  9954                                  		; 19/10/2022
  9955 00000827 C706[2001]0300          		mov	word [rflag], 3
  9956                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9957                                  
  9958                                  dsk_cl:					
  9959 0000082D E89800                  		call	diskio		; romwrite
  9960                                  ; ---------------------------------------------------------------------------
  9961                                  
  9962                                  dsk_io:					
  9963 00000830 73EC                    		jnb	short dsk_ret
  9964 00000832 E9A2F8                  		jmp	bc_err_cnt
  9965                                  ; ---------------------------------------------------------------------------
  9966                                  
  9967                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9968 00000835 E88B00                  		call	diskrd
  9969 00000838 EBF6                    		jmp	short dsk_io
  9970                                  
  9971                                  ; =============== S U B	R O U T	I N E =======================================
  9972                                  
  9973                                  ; 15/10/2022
  9974                                  ; 10/03/2019 - Retro DOS v4.0
  9975                                  
  9976                                  ;-----------------------------------------------------------
  9977                                  ; miscellaneous odd jump routines. 
  9978                                  ; moved out of mainline for speed.
  9979                                  
  9980                                  ; if we have a system where we have virtual drives, we need 
  9981                                  ; to prompt the user to place the correct disk in the drive.
  9982                                  ;
  9983                                  ;	assume es:di -> bds, ds:->Bios_Data
  9984                                  ;-----------------------------------------------------------
  9985                                  
  9986                                  		; 19/10/2022
  9987                                  checksingle:		
  9988 0000083A 50                      		push	ax
  9989 0000083B 53                      		push	bx
  9990 0000083C 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
  9991                                  
  9992                                  ; if hard drive, cannot change disk.
  9993                                  ; if current owner of physical drive, no need to change diskette.
  9994                                  
  9995 00000840 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
  9996 00000843 7573                    		jnz	short singleret
  9997 00000845 F6C310                  		test	bl, 10h		; fi_am_mult
  9998                                  					; is there a drive sharing this	physical drive?
  9999 00000848 746E                    		jz	short singleret
 10000                                  
 10001                                  
 10002                                  ; look for the previous owner of this physical drive
 10003                                  ; and reset its ownership flag.
 10004                                  
 10005 0000084A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10006                                  					; get physical drive number
 10007 0000084E 06                      		push	es		; preserve pointer to current bds
 10008 0000084F 57                      		push	di
 10009 00000850 C43E[1901]              		les	di, [start_bds] ; get first bds
 10010                                  scan_list:				
 10011 00000854 26384504                		cmp	[es:di+4], al
 10012 00000858 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10013 0000085A B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10014 0000085C 26845D23                		test	[es:di+23h], bl
 10015 00000860 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10016 00000862 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10017 00000866 5F                      		pop	di		; restore pointer to current bds
 10018 00000867 07                      		pop	es
 10019 00000868 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10020                                  
 10021                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10022                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10023                                  ; in this case.
 10024 0000086C 803E[7A00]01            		cmp	byte [fsetowner], 1
 10025 00000871 7517                    		jnz	short not_fsetowner
 10026                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10027 00000873 26807D0400              		cmp	byte [es:di+4], 0
 10028 00000878 753E                    		jnz	short singleret
 10029 0000087A 268A4505                		mov	al, [es:di+5]
 10030                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10031                                  					; get the DOS drive letter
 10032 0000087E 06                      		push	es
 10033 0000087F 8E06[1A00]              		mov	es, [zeroseg]
 10034 00000883 26A20405                		mov	[es:LSTDRV], al
 10035                                  		;mov	es:504h, al	; [es:LSTDRV]
 10036                                  					; set up sdsb
 10037 00000887 07                      		pop	es		; restore bds pointer
 10038 00000888 EB2E                    		jmp	short singleret
 10039                                  ; ---------------------------------------------------------------------------
 10040                                  
 10041                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10042                                  ; we now check to see if we are in a single drive system and the application
 10043                                  ; has "cleverly" diddled the sdsb
 10044                                  
 10045                                  not_fsetowner:				
 10046 0000088A 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10047 0000088F 7517                    		jnz	short ignore_sdsb
 10048 00000891 50                      		push	ax
 10049 00000892 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10050 00000896 88C4                    		mov	ah, al
 10051 00000898 06                      		push	es
 10052 00000899 8E06[1A00]              		mov	es, [zeroseg]
 10053 0000089D 2686060405              		xchg	al, [es:LSTDRV]
 10054                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10055                                  					; then swap(curr_drv,req_drv)
 10056 000008A2 07                      		pop	es
 10057 000008A3 38C4                    		cmp	ah, al		; else
 10058 000008A5 58                      		pop	ax		; swap(curr_drv,req_drv)
 10059 000008A6 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10060                                  ignore_sdsb:				
 10061 000008A8 E85C0E                  		call	swpdsk
 10062 000008AB EB0B                    		jmp	short singleret
 10063                                  ; ---------------------------------------------------------------------------
 10064                                  
 10065                                  scan_skip:	
 10066 000008AD 26C43D                  		les	di, [es:di]			
 10067                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10068                                  					; go to	next bds
 10069 000008B0 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10070 000008B3 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10071 000008B5 F9                      		stc
 10072 000008B6 5F                      		pop	di		; restore current bds
 10073 000008B7 07                      		pop	es
 10074                                  
 10075                                  singleret:				
 10076 000008B8 5B                      		pop	bx
 10077 000008B9 58                      		pop	ax
 10078 000008BA C3                      		retn
 10079                                  
 10080                                  ; ---------------------------------------------------------------------------
 10081                                  
 10082                                  baddrive:				
 10083 000008BB B008                    		mov	al, 8		; sector not found
 10084 000008BD EB02                    		jmp	short baddrive_ret
 10085                                  ; ---------------------------------------------------------------------------
 10086                                  
 10087                                  unformatteddrive:				
 10088 000008BF B007                    		mov	al, 7		; unknown media
 10089                                  baddrive_ret:				
 10090 000008C1 F9                      		stc
 10091                                  ; ---------------------------------------------------------------------------
 10092                                  
 10093                                  ioret:		
 10094 000008C2 C3                      		retn
 10095                                  
 10096                                  ; ---------------------------------------------------------------------------
 10097                                  
 10098                                  ; 15/10/52022
 10099                                  
 10100                                  ; ---------------------------------------------------------------------------
 10101                                  ;	disk i/o handler
 10102                                  ;
 10103                                  ;	al = drive number (0-6)
 10104                                  ;	ah = media descriptor
 10105                                  ;	cx = sector count
 10106                                  ;	dx = first sector (low)
 10107                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10108                                  ;	ds = cs
 10109                                  ;	es:di = transfer address
 10110                                  ;	[rflag]=operation (2=read, 3=write)
 10111                                  ;	[verify]=1 for verify after write
 10112                                  ;
 10113                                  ;	if successful carry flag = 0
 10114                                  ;	  else cf=1 and al contains error code
 10115                                  ; ---------------------------------------------------------------------------
 10116                                  
 10117                                  diskrd:	
 10118                                  		;mov	ds:rflag, 2	; romread
 10119                                  		; 19/10/2022
 10120 000008C3 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10121                                  
 10122                                  ; =============== S U B	R O U T	I N E =======================================
 10123                                  
 10124                                  		; 19/10/2022
 10125                                  diskio:
 10126 000008C8 89FB                    		mov	bx, di		; es:bx	= transfer address
 10127 000008CA 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
 10128 000008CE E8FAFB                  		call	SetDrive
 10129 000008D1 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10130 000008D5 A2[1F01]                		mov	[medbyt], al
 10131                                  		;jcxz	short ioret
 10132 000008D8 E3E8                    		jcxz	ioret
 10133                                  
 10134                                  ; see if the media is formatted or not by checking the flags field in
 10135                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10136                                  ; go to the error exit at label unformatteddrive.
 10137                                  
 10138 000008DA 26F6452402              		test	byte [es:di+24h], 2
 10139                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10140                                  					; unformatted_media
 10141 000008DF 75DE                    		jnz	short unformatteddrive
 10142 000008E1 890E[2201]              		mov	[seccnt], cx	; save sector count
 10143 000008E5 8926[3501]              		mov	[spsav], sp	; save sp
 10144                                  
 10145                                  ; ensure that we are trying to access valid sectors on the drive
 10146                                  
 10147 000008E9 89D0                    		mov	ax, dx
 10148 000008EB 31F6                    		xor	si, si
 10149 000008ED 01CA                    		add	dx, cx
 10150                                  		;adc	si, 0
 10151                                  		; 02/09/2023 (PCDOS 7.1)
 10152 000008EF D1D6                    		rcl	si, 1
 10153 000008F1 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10154                                  					; > 32 bit sector ?
 10155 000008F6 740C                    		jz	short sanity32
 10156                                  		;cmp	si, 0
 10157                                  		; 02/09/2023
 10158 000008F8 09F6                    		or	si, si
 10159 000008FA 75BF                    		jnz	short baddrive
 10160 000008FC 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10161 00000900 77B9                    		ja	short baddrive
 10162 00000902 EB12                    		jmp	short sanityok
 10163                                  ; ---------------------------------------------------------------------------
 10164                                  
 10165                                  sanity32:				
 10166 00000904 0336[2B05]              		add	si, [start_sec_h]
 10167 00000908 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10168 0000090C 7208                    		jb	short sanityok
 10169 0000090E 77AB                    		ja	short baddrive
 10170 00000910 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10171 00000914 77A5                    		ja	short baddrive
 10172                                  
 10173                                  sanityok:				
 10174 00000916 8B16[2B05]              		mov	dx, [start_sec_h]
 10175 0000091A 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10176 0000091E 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10177                                  
 10178                                  ; now dx;ax have the physical first sector.
 10179                                  ; since the following procedures is going to destroy ax, let's
 10180                                  ; save it temporarily to saved_word.
 10181                                  
 10182 00000922 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10183                                  
 10184                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10185                                  ; will do it because we will skip the set up stuff with hard disks.
 10186                                  
 10187 00000925 06                      		push	es
 10188                                  		;mov	es, [zeroseg]
 10189                                  		; 02/09/2023
 10190 00000926 31F6                    		xor	si, si ; 0
 10191 00000928 8EC6                    		mov	es, si
 10192 0000092A 26C4367800              		les	si, [es:DSKADR]
 10193                                  		;les	si, es:78h	; [es:DSKADR]
 10194                                  					; current disk parm table
 10195 0000092F 8936[2D01]              		mov	[dpt], si
 10196 00000933 8C06[2F01]              		mov	[dpt+2], es
 10197 00000937 07                      		pop	es
 10198 00000938 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10199                                  					; fnon_removable
 10200 0000093D 7510                    		jnz	short skip_setup
 10201 0000093F E8F8FE                  		call	checksingle
 10202                                  
 10203                                  ; check to see if we have previously noted a change line. the routine
 10204                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10205                                  ; the proper error code.
 10206                                  
 10207 00000942 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10208 00000947 7403                    		jz	short diskio_nochangeline ; brif not
 10209 00000949 E8890E                  		call	checklatchio	; will do a sneaky pop stack return
 10210                                  					; if a disk error occurs
 10211                                  diskio_nochangeline:			
 10212 0000094C E84700                  		call	iosetup		; set up tables	and variables for i/o
 10213                                  
 10214                                  ; now the settle values are correct for the following code
 10215                                  
 10216                                  skip_setup:
 10217                                  
 10218                                  ; 32 bit sector calculation.
 10219                                  ; dx:[saved_word] = starting sector number.
 10220                                  				
 10221 0000094F 89D0                    		mov	ax, dx
 10222 00000951 31D2                    		xor	dx, dx
 10223                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10224                                  					 ; divide by sec per track
 10225                                  		; 02/09/2023
 10226 00000953 268B4D13                		mov	cx, [es:di+13h]
 10227 00000957 F7F1                    		div	cx
 10228 00000959 A3[2905]                		mov	[temp_h], ax
 10229 0000095C A1[2D05]                		mov	ax, [saved_word]
 10230 0000095F F7F1                    		div	cx ; 02/09/2023
 10231                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10232                                  					; now, [temp_h]:ax = track #, dx = sector
 10233                                  		;inc	dl		; sector number	is 1 based.
 10234                                  		; 18/12/2022
 10235 00000961 42                      		inc	dx
 10236 00000962 8816[3101]              		mov	[cursec], dl	; save current sector
 10237 00000966 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10238                                  					; get number of	heads
 10239 0000096A 50                      		push	ax
 10240 0000096B 31D2                    		xor	dx, dx
 10241 0000096D A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10242 00000970 F7F1                    		div	cx
 10243 00000972 A3[2905]                		mov	[temp_h], ax
 10244 00000975 58                      		pop	ax
 10245 00000976 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10246 00000978 833E[2905]00            		cmp	word [temp_h], 0
 10247 0000097D 7714                    		ja	short baddrive_brdg
 10248 0000097F 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10249 00000982 770F                    		ja	short baddrive_brdg
 10250 00000984 8816[3201]              		mov	[curhd], dl	; save current head
 10251 00000988 A3[3301]                		mov	[curtrk], ax	; save current track
 10252                                  
 10253                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10254                                  ; violations here. not true. we perform the operation as if everything is
 10255                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10256                                  
 10257 0000098B A1[2201]                		mov	ax, [seccnt]
 10258 0000098E E88400                  		call	block		; (cas - call/ret)
 10259                                  		;call	done
 10260                                  		;retn
 10261                                  		; 18/12/2022
 10262 00000991 EB4B                    		jmp	done
 10263                                  
 10264                                  ; ---------------------------------------------------------------------------
 10265                                  
 10266                                  baddrive_brdg:				
 10267 00000993 E925FF                  		jmp	baddrive
 10268                                  
 10269                                  ; =============== S U B	R O U T	I N E =======================================
 10270                                  
 10271                                  ;--------------------------------------------------------------
 10272                                  ; set the drive-last-accessed flag for diskette only. 
 10273                                  ; we know that the hard disk will not be removed.
 10274                                  ; es:di -> current bds.
 10275                                  ; ds -> Bios_Data
 10276                                  ; ax,cx,si are destroyed.
 10277                                  ;--------------------------------------------------------------
 10278                                  
 10279                                  		; 19/10/2022
 10280                                  iosetup:	
 10281 00000996 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10282 0000099A A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10283                                  
 10284                                  ; determine proper head settle values
 10285                                  
 10286 0000099D 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10287 000009A2 7539                    		jnz	short skip_dpt_setting
 10288 000009A4 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10289 000009A7 1E                      		push	ds
 10290 000009A8 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10291 000009AC 884404                  		mov	[si+4],	al
 10292 000009AF 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10293 000009B2 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10294 000009B5 1F                      		pop	ds
 10295 000009B6 A2[2601]                		mov	[motorstartup], al
 10296 000009B9 8826[2B01]              		mov	[save_eot], ah
 10297                                  
 10298                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10299                                  ; motor start time to 4. this checking for every i/o is going to affect
 10300                                  ; performance across the board, but is necessary!!
 10301                                  
 10302 000009BD 1E                      		push	ds
 10303 000009BE C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10304 000009C2 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10305                                  					; ffSmall
 10306 000009C7 7505                    		jnz	short motor_start_ok
 10307 000009C9 B004                    		mov	al, 4
 10308 000009CB 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10309                                  motor_start_ok:
 10310                                  
 10311                                  ; ds:si now points to disk parameter table.
 10312                                  ; get current settle and set fast settle
 10313                                  				
 10314                                  		;xor	al, al
 10315                                  		;inc	al		; ibm wants fast settle	to be 1
 10316                                  		; 18/12/2022
 10317 000009CE 31C0                    		xor	ax, ax
 10318 000009D0 40                      		inc	ax
 10319 000009D1 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10320                                  					; get settle and set up	for fast
 10321 000009D4 1F                      		pop	ds
 10322 000009D5 A2[2701]                		mov	[settlecurrent], al
 10323 000009D8 B00F                    		mov	al, 15		; NORMSETTLE
 10324                                  					; someone has diddled the settle
 10325 000009DA A2[2801]                		mov	[settleslow], al
 10326                                  skip_dpt_setting:			
 10327 000009DD C3                      		retn
 10328                                  
 10329                                  ; =============== S U B	R O U T	I N E =======================================
 10330                                  
 10331                                  ;--------------------------------------------------------------
 10332                                  ; set time of last access, and reset default values in the dpt.
 10333                                  ;
 10334                                  ;	  note: trashes (at least) si
 10335                                  ;--------------------------------------------------------------
 10336                                  
 10337                                  		; 19/10/2022
 10338                                  done:
 10339 000009DE 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10340                                  					; fnon_removable
 10341 000009E3 752F                    		jnz	short ddbx	; do not set for non-removable media
 10342 000009E5 E8FD01                  		call	set_tim
 10343                                  ;diddleback:
 10344                                  ; 09/12/2022
 10345                                  diddle_back:				
 10346 000009E8 9C                      		pushf
 10347 000009E9 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10348 000009EE 7523                    		jnz	short nodiddleback
 10349 000009F0 50                      		push	ax
 10350 000009F1 06                      		push	es
 10351 000009F2 C436[2D01]              		les	si, [dpt]
 10352 000009F6 A0[2B01]                		mov	al, [save_eot]
 10353 000009F9 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10354 000009FD A0[2701]                		mov	al, [settlecurrent]
 10355 00000A00 8A26[2601]              		mov	ah, [motorstartup]
 10356 00000A04 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10357 00000A08 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10358 00000A0D 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10359 00000A11 07                      		pop	es
 10360 00000A12 58                      		pop	ax
 10361                                  nodiddleback:				
 10362 00000A13 9D                      		popf
 10363                                  ddbx:					
 10364 00000A14 C3                      		retn
 10365                                  
 10366                                  ; =============== S U B	R O U T	I N E =======================================
 10367                                  
 10368                                  ;--------------------------------------------------------------
 10369                                  ;read the number of sectors specified in ax, 
 10370                                  ;handling track boundaries
 10371                                  ;es:di -> bds for this drive
 10372                                  ;--------------------------------------------------------------
 10373                                  
 10374                                  		 ; 19/10/2022
 10375                                  block:	
 10376 00000A15 09C0                    		or	ax, ax
 10377 00000A17 74FB                    		jz	short ddbx
 10378 00000A19 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10379                                  					; fnon_removable
 10380 00000A1E 740D                    		jz	short block_floppy ;
 10381                                  
 10382                                  ; check	to see if multi	track operation	is allowed. if not
 10383                                  ; we have to go	to the block_floppy below to break up the operation.
 10384                                  
 10385 00000A20 F606[2F05]80            		test	byte [multrk_flag], 80h
 10386                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10387 00000A25 7406                    		jz	short block_floppy
 10388 00000A27 E82900                  		call	Disk
 10389 00000A2A 31C0                    		xor	ax, ax
 10390 00000A2C C3                      		retn
 10391                                  ; ---------------------------------------------------------------------------
 10392                                  
 10393                                  block_floppy:
 10394                                  
 10395                                  ; read at most 1 track worth. perform minimization at sector / track
 10396                                  				
 10397 00000A2D 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10398 00000A31 FEC1                    		inc	cl
 10399 00000A33 2A0E[3101]              		sub	cl, [cursec]
 10400 00000A37 30ED                    		xor	ch, ch
 10401 00000A39 39C8                    		cmp	ax, cx
 10402 00000A3B 7302                    		jnb	short gotmin
 10403 00000A3D 89C1                    		mov	cx, ax
 10404                                  
 10405                                  gotmin:
 10406                                  
 10407                                  ; ax is the requested number of sectors to read
 10408                                  ; cx is the number that we can do on this track
 10409                                  					
 10410 00000A3F 50                      		push	ax
 10411 00000A40 51                      		push	cx
 10412 00000A41 89C8                    		mov	ax, cx
 10413 00000A43 E80D00                  		call	Disk
 10414 00000A46 59                      		pop	cx
 10415 00000A47 58                      		pop	ax
 10416                                  
 10417                                  ; cx is the number of sectors just transferred
 10418                                  
 10419 00000A48 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10420 00000A4A D0E1                    		shl	cl, 1
 10421 00000A4C 00CF                    		add	bh, cl		; adjust transfer address
 10422 00000A4E EBC5                    		jmp	short block
 10423                                  dskerr_brdg:				
 10424 00000A50 E9EC00                  		jmp	dskerr
 10425                                  
 10426                                  ; =============== S U B	R O U T	I N E =======================================
 10427                                  
 10428                                  ; 15/10/2022
 10429                                  
 10430                                  ;--------------------------------------------------------------
 10431                                  ;perform disk i/o with retries
 10432                                  ; al = number of sectors (1-8, all on one track)
 10433                                  ; es:di point to drive parameters
 10434                                  ; xfer_seg:bx = transfer address 
 10435                                  ;		(must not cross a 64k physical boundary)
 10436                                  ; [rflag] = 2 if read, 3 if write
 10437                                  ; [verify] = 0 for normal, 1 for verify after write
 10438                                  ;--------------------------------------------------------------
 10439                                  
 10440                                  		 ; 19/10/2022
 10441                                  Disk:
 10442                                  
 10443                                  ; Check for hard disk format and
 10444                                  ; if TRUE then set max error count to 2
 10445                                  
 10446 00000A53 BD0500                  		mov	bp, 5		; MAXERR
 10447                                  					; set up retry count
 10448 00000A56 26F6452301              		test	byte [es:di+23h], 1	;
 10449                                  					; [es:di+BDS.flags], fnon_removable
 10450 00000A5B 7408                    		jz	short GetRdWrInd
 10451 00000A5D 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10452 00000A60 7403                    		jz	short GetRdWrInd
 10453 00000A62 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10454                                  GetRdWrInd:				
 10455 00000A65 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10456 00000A69 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10457 00000A6D 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10458                                  ;retry:
 10459                                  ; 09/12/2022
 10460                                  _retry:					
 10461 00000A71 50                      		push	ax
 10462 00000A72 8B16[3301]              		mov	dx, [curtrk]
 10463 00000A76 26F6452301              		test	byte [es:di+23h], 1
 10464 00000A7B 740B                    		jz	short disk_not_mini
 10465 00000A7D 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10466                                  					; is this a mini disk? ((logical dos partition))
 10467 00000A82 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10468 00000A84 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10469                                  					; add hidden trks.
 10470                                  disk_not_mini:				
 10471 00000A88 D0CE                    		ror	dh, 1
 10472 00000A8A D0CE                    		ror	dh, 1
 10473 00000A8C 0A36[3101]              		or	dh, [cursec]
 10474 00000A90 89D1                    		mov	cx, dx
 10475 00000A92 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10476 00000A94 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10477 00000A98 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10478                                  					; [es:di+BDS.drivenum]
 10479 00000A9C 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10480 00000AA1 7413                    		jz	short do_fast	; hard files use fast speed
 10481                                  
 10482                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10483                                  ; this helps when we have just done a reset disk operation and the head has
 10484                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10485                                  
 10486 00000AA3 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10487 00000AA8 740A                    		jz	short do_writej
 10488 00000AAA 80FC02                  		cmp	ah, 2		; romread
 10489 00000AAD 7407                    		jz	short do_fast
 10490 00000AAF 80FC04                  		cmp	ah, 4		; romverify
 10491 00000AB2 7402                    		jz	short do_fast
 10492                                  do_writej:	
 10493                                  
 10494                                  ; reads always fast, unless we have just done a disk reset operation
 10495                                  			
 10496 00000AB4 EB56                    		jmp	short do_write	; reads	always fast
 10497                                  ; ---------------------------------------------------------------------------
 10498                                  
 10499                                  do_fast:				
 10500 00000AB6 E8FC00                  		call	fastspeed	; change settle	mode
 10501                                  
 10502                                  testerr:				
 10503 00000AB9 7295                    		jb	short dskerr_brdg
 10504                                  
 10505                                  ; set drive and track of last access
 10506                                  
 10507 00000ABB 8816[7600]              		mov	[step_drv], dl
 10508 00000ABF 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10509                                  no_set:
 10510                                  		;cmp	word [wrtverify], 103h
 10511 00000AC3 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10512 00000AC9 7452                    		jz	short doverify
 10513                                  noverify:				
 10514 00000ACB 58                      		pop	ax
 10515                                  
 10516                                  ; check the flags word in the bds to see if the drive is non removable
 10517                                  ; if not we needn't do anything special
 10518                                  ; if it is a hard disk then check to see if multi-track operation
 10519                                  ; is specified. if specified we don't have to calculate for the next
 10520                                  ; track since we are already done. so we can go to the exit of this routine.
 10521                                  
 10522 00000ACC 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10523                                  					; fnon_removable
 10524 00000AD1 7407                    		jz	short its_removable
 10525 00000AD3 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10526 00000AD8 7530                    		jnz	short disk_ret
 10527                                  its_removable:				
 10528 00000ADA 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10529 00000ADD 30E4                    		xor	ah, ah
 10530 00000ADF 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10531 00000AE3 00C1                    		add	cl, al
 10532 00000AE5 880E[3101]              		mov	[cursec], cl
 10533 00000AE9 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10534                                  					; see if sector/track limit reached
 10535 00000AED 761B                    		jbe	short disk_ret
 10536 00000AEF C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10537 00000AF4 8A36[3201]              		mov	dh, [curhd]
 10538 00000AF8 FEC6                    		inc	dh
 10539 00000AFA 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10540 00000AFE 7206                    		jb	short noxor
 10541 00000B00 30F6                    		xor	dh, dh
 10542 00000B02 FF06[3301]              		inc	word [curtrk]
 10543                                  noxor:					
 10544 00000B06 8836[3201]              		mov	[curhd], dh
 10545                                  disk_ret:				
 10546 00000B0A F8                      		clc
 10547 00000B0B C3                      		retn
 10548                                  ; ---------------------------------------------------------------------------
 10549                                  
 10550                                  ; 15/10/2022
 10551                                  
 10552                                  ;--------------------------------------------------------------
 10553                                  ; the request is for write. determine if we are talking about
 10554                                  ; the same track and drive. if so, use the fast speed.
 10555                                  ;--------------------------------------------------------------
 10556                                  
 10557                                  do_write:				
 10558 00000B0C 3A16[7600]              		cmp	dl, [step_drv]
 10559 00000B10 7506                    		jnz	short do_norm	; we have changed drives
 10560 00000B12 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10561 00000B16 749E                    		jz	short do_fast	; we are still on the same track
 10562                                  
 10563                                  do_norm:				
 10564 00000B18 E87500                  		call	normspeed
 10565 00000B1B EB9C                    		jmp	short testerr
 10566                                  ; ---------------------------------------------------------------------------
 10567                                  
 10568                                  ;--------------------------------------------------------------
 10569                                  ; we have a verify request also. get state info and go verify
 10570                                  ;--------------------------------------------------------------
 10571                                  
 10572                                  doverify:				
 10573 00000B1D 58                      		pop	ax
 10574 00000B1E 50                      		push	ax
 10575 00000B1F B404                    		mov	ah, 4
 10576 00000B21 E89100                  		call	fastspeed
 10577 00000B24 73A5                    		jnb	short noverify
 10578                                  
 10579                                  ; check the error returned in ah to see if it is a soft ecc error.
 10580                                  ; if it is not we needn't do anything special. if it is a soft
 10581                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10582                                  ; this retry count becomes 0 then we just ignore the error and go to
 10583                                  ; no_verify but if we can still try then we call the routine to reset
 10584                                  ; the disk and go to dskerr1 to retry the operation.
 10585                                  
 10586 00000B26 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10587 00000B29 750B                    		jnz	short not_softecc_err
 10588 00000B2B FF0E[3405]              		dec	word [soft_ecc_cnt]
 10589 00000B2F 749A                    		jz	short noverify	; no more retry
 10590 00000B31 E83705                  		call	ResetDisk	; reset	disk
 10591 00000B34 EB3E                    		jmp	short dskerr1	; retry
 10592                                  ; ---------------------------------------------------------------------------
 10593                                  
 10594                                  not_softecc_err:			; other error.			
 10595 00000B36 E83205                  		call	ResetDisk
 10596 00000B39 FF0E[3205]              		dec	word [vretry_cnt]
 10597 00000B3D EB1C                    		jmp	short dskerr0
 10598                                  ; ---------------------------------------------------------------------------
 10599                                  
 10600                                  ;--------------------------------------------------------------
 10601                                  ; need to special case the change-line error ah=06h.
 10602                                  ; if we get this, we need to return it.
 10603                                  ;--------------------------------------------------------------
 10604                                  
 10605                                  dskerr:					
 10606 00000B3F 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10607 00000B44 7403                    		jz	short dskerr_nochangeline ; brif not
 10608 00000B46 E8FE0C                  		call	checkio
 10609                                  dskerr_nochangeline:			
 10610 00000B49 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10611 00000B4E 7508                    		jnz	short dochkagain ; no more retry.
 10612 00000B50 BD0100                  		mov	bp, 1
 10613 00000B53 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10614                                  dochkagain:				
 10615 00000B58 E8AA00                  		call	again
 10616                                  dskerr0:				
 10617 00000B5B 7420                    		jz	short harderr
 10618 00000B5D 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10619                                  					; fnon_removable
 10620 00000B62 7505                    		jnz	short skip_timeout_chk
 10621 00000B64 80FC80                  		cmp	ah, 80h		; timeout?
 10622 00000B67 7414                    		jz	short harderr
 10623                                  skip_timeout_chk:			
 10624 00000B69 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10625 00000B6C 740A                    		jz	short write_fault_err ;	then, don't retry.
 10626 00000B6E C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10627                                  					; set soft_ecc_cnt back	to maxerr
 10628                                  dskerr1:				
 10629 00000B74 58                      		pop	ax		; restore sector count
 10630                                  		;jmp	retry
 10631                                  		; 09/12/2022
 10632 00000B75 E9F9FE                  		jmp	_retry
 10633                                  ; ---------------------------------------------------------------------------
 10634                                  
 10635                                  write_fault_err:			
 10636 00000B78 BD0100                  		mov	bp, 1		; just retry only once
 10637                                  					; for write fault error.
 10638 00000B7B EBF7                    		jmp	short dskerr1
 10639                                  
 10640                                  		; fall into harderr
 10641                                  ; ---------------------------------------------------------------------------
 10642                                  
 10643                                  ; entry point for routines that call maperror themselves
 10644                                  
 10645                                  harderr:				
 10646 00000B7D E84D00                  		call	maperror
 10647                                  harderr2:				
 10648 00000B80 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10649                                  					; force a media check through rom
 10650 00000B85 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10651 00000B89 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10652                                  
 10653                                  ; since we are performing a non-local goto, restore the disk parameters
 10654                                  
 10655                                  		;jmp	diddleback
 10656                                  		; 09/12/2022
 10657 00000B8D E958FE                  		jmp	diddle_back
 10658                                  
 10659                                  ; =============== S U B	R O U T	I N E =======================================
 10660                                  
 10661                                  ; change settle value from settlecurrent to whatever is appropriate
 10662                                  ; note that this routine is never called for a fixed disk.
 10663                                  
 10664                                  		; 19/10/2022
 10665                                  normspeed:
 10666 00000B90 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10667 00000B95 751E                    		jnz	short fastspeed
 10668 00000B97 06                      		push	es
 10669 00000B98 50                      		push	ax
 10670 00000B99 A0[2801]                		mov	al, [settleslow]
 10671 00000B9C C436[2D01]              		les	si, [dpt]	; current disk parm table
 10672 00000BA0 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10673 00000BA4 58                      		pop	ax
 10674 00000BA5 07                      		pop	es
 10675 00000BA6 E80C00                  		call	fastspeed
 10676 00000BA9 06                      		push	es
 10677 00000BAA C436[2D01]              		les	si, [dpt]
 10678 00000BAE 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10679                                  					; 1 is fast settle value
 10680 00000BB3 07                      		pop	es
 10681 00000BB4 C3                      		retn
 10682                                  
 10683                                  ; =============== S U B	R O U T	I N E =======================================
 10684                                  
 10685                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10686                                  ; partition is > 16 bits, then always return drive not ready.
 10687                                  
 10688                                  fastspeed:		
 10689 00000BB5 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10690                                  					; ftoobig
 10691 00000BBA 750D                    		jnz	short notready
 10692 00000BBC 06                      		push	es
 10693 00000BBD 8E06[3705]              		mov	es, [xfer_seg]
 10694 00000BC1 CD13                    		int	13h		; DISK -
 10695 00000BC3 8C06[3705]              		mov	[xfer_seg], es
 10696 00000BC7 07                      		pop	es
 10697 00000BC8 C3                      		retn
 10698                                  ; ---------------------------------------------------------------------------
 10699                                  
 10700                                  notready:				
 10701 00000BC9 F9                      		stc
 10702 00000BCA B480                    		mov	ah, 80h
 10703 00000BCC C3                      		retn
 10704                                  
 10705                                  ; =============== S U B	R O U T	I N E =======================================
 10706                                  
 10707                                  ; map error returned by rom in ah into corresponding code to be returned to
 10708                                  ; dos in al. trashes di. guaranteed to set carry.
 10709                                  
 10710                                  maperror:	
 10711 00000BCD 51                      		push	cx
 10712 00000BCE 06                      		push	es
 10713 00000BCF 1E                      		push	ds		; set es=Bios_Data
 10714 00000BD0 07                      		pop	es
 10715 00000BD1 88E0                    		mov	al, ah		; put error code in al
 10716 00000BD3 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10717 00000BD6 B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10718                                  					; number of possible error conditions
 10719 00000BD9 BF[3C01]                		mov	di, errin	; point to error conditions
 10720 00000BDC F2AE                    		repne scasb
 10721                                  		; 10/12/2022
 10722 00000BDE 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10723                                  					; get translation
 10724                                  		; 19/10/2022 - Temporary ! 
 10725                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10726 00000BE1 07                      		pop	es
 10727 00000BE2 59                      		pop	cx
 10728 00000BE3 F9                      		stc			; flag error condition
 10729 00000BE4 C3                      		retn
 10730                                  
 10731                                  ; =============== S U B	R O U T	I N E =======================================
 10732                                  
 10733                                  ; set the time of last access for this drive.
 10734                                  ; this is done only for removable media. es:di -> bds
 10735                                  
 10736                                  set_tim:		
 10737 00000BE5 50                      		push	ax
 10738 00000BE6 E891F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10739                                  
 10740                                  ; we have the new time. if we see that the time has passed,
 10741                                  ; then we reset the threshold counter...
 10742                                  
 10743 00000BE9 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10744 00000BED 7506                    		jnz	short setaccess
 10745 00000BEF 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10746                                  		;jz	short done_set
 10747                                  		; 12/12/2022
 10748 00000BF3 740E                    		je	short done_set2
 10749                                  setaccess:				
 10750 00000BF5 C606[1D01]00            		mov	byte [accesscount], 0
 10751 00000BFA 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10752 00000BFE 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10753                                  done_set:				
 10754 00000C02 F8                      		clc
 10755                                  done_set2:		; 12/12/2022
 10756 00000C03 58                      		pop	ax
 10757 00000C04 C3                      		retn
 10758                                  
 10759                                  ; =============== S U B	R O U T	I N E =======================================
 10760                                  
 10761                                  ; this routine is called if an error occurs while formatting or verifying.
 10762                                  ; it resets the drive,and decrements the retry count.
 10763                                  ; on entry - ds:di - points to bds for the drive
 10764                                  ;	     bp    - contains retry count
 10765                                  ; on exit    flags indicate result of decrementing retry count
 10766                                  
 10767                                  again:	
 10768 00000C05 E86304                  		call	ResetDisk
 10769 00000C08 80FC06                  		cmp	ah, 6
 10770 00000C0B 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10771                                  					; do not decrement retry count.
 10772 00000C0D 4D                      		dec	bp		; decrement retry count
 10773 00000C0E C3                      		retn
 10774                                  ; ---------------------------------------------------------------------------
 10775                                  
 10776                                  dont_dec_retry_count:			
 10777 00000C0F 08E4                    		or	ah, ah
 10778 00000C11 C3                      		retn
 10779                                  
 10780                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10781                                  
 10782                                  ;----------------------------------------------------------------------------
 10783                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10784                                  ;----------------------------------------------------------------------------
 10785                                  ; 11/03/2019 - Retro DOS v4.0
 10786                                  
 10787                                  ; 18/03/2019
 10788                                  
 10789                                  ; ==========================================================================
 10790                                  ;
 10791                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10792                                  ;
 10793                                  ;      This function is intended to give the user to control the
 10794                                  ;      bds table flags of unformatted_media bit.
 10795                                  ;      GetAccessFlag will show the status -
 10796                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10797                                  ;						1 disk i/o allowed
 10798                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10799                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10800                                  ;						1 disallow disk i/o
 10801                                  ; ==========================================================================
 10802                                  
 10803                                  		; generic ioctl dispatch tables
 10804                                  
 10805                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10806                                  
 10807                                  ; ---------------------------------------------------------------------------
 10808 00000C12 00                      		db 0
 10809                                  
 10810                                  ; 09/12/2022 
 10811                                  %if 0
 10812                                  
 10813                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10814                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10815                                  		dw 0EE8h	; 61h	; ReadTrack
 10816                                  		dw 0E86h	; 62h	; VerifyTrack
 10817                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10818                                  		dw 0CA3h		; Cmd_Error_Proc
 10819                                  		dw 0CA3h		; Cmd_Error_Proc
 10820                                  		dw 119Ah	; 66h	; GetMediaId
 10821                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10822                                  		dw 12C1h	; 68h	; SenseMediaType
 10823                                  
 10824                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10825                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10826                                  		dw 0EEFh	; 41h	; WriteTrack
 10827                                  		dw 0DC1h	; 42h	; FormatTrack
 10828                                  		dw 0CA3h		; Cmd_Error_Proc
 10829                                  		dw 0CA3h		; Cmd_Error_Proc
 10830                                  		dw 0CA3h		; Cmd_Error_Proc
 10831                                  		dw 11D2h	; 46h	; SetMediaId
 10832                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10833                                  
 10834                                  %endif
 10835                                  
 10836                                  		; 09/12/2022
 10837 00000C13 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10838 00000C14 [7E0C]                  		dw GetDeviceParameters	; 60h
 10839 00000C16 [C00E]                  		dw ReadTrack		; 61h
 10840 00000C18 [600E]                  		dw VerifyTrack		; 62h
 10841 00000C1A [7A0C]                  		dw Cmd_Error_Proc
 10842 00000C1C [7A0C]                  		dw Cmd_Error_Proc
 10843 00000C1E [7A0C]                  		dw Cmd_Error_Proc
 10844 00000C20 [4A11]                  		dw GetMediaId		; 66h
 10845 00000C22 [1612]                  		dw GetAccessFlag	; 67h ; unpublished function
 10846 00000C24 [6812]                  		dw SenseMediaType	; 68h
 10847                                  
 10848 00000C26 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10849 00000C27 [C90C]                  		dw SetDeviceParameters	; 40h
 10850 00000C29 [C70E]                  		dw WriteTrack		; 41h
 10851 00000C2B [9C0D]                  		dw FormatTrack		; 42h
 10852 00000C2D [7A0C]                  		dw Cmd_Error_Proc
 10853 00000C2F [7A0C]                  		dw Cmd_Error_Proc
 10854 00000C31 [7A0C]                  		dw Cmd_Error_Proc
 10855 00000C33 [8011]                  		dw SetMediaId		; 46h
 10856 00000C35 [2C12]                  		dw SetAccessFlag	; 47h ; unpublished function
 10857                                  
 10858                                  ; ==========================================================================
 10859                                  ; IOC_DC_Table
 10860                                  ;
 10861                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10862                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10863                                  ; Added for 5.00
 10864                                  ; ==========================================================================
 10865                                  
 10866 00000C37 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10867 00000C38 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10868 00000C39 61                      		db 61h			; READ_TRACK
 10869 00000C3A 41                      		db 41h			; WRITE_TRACK
 10870 00000C3B 62                      		db 62h			; VERIFY_TRACK
 10871 00000C3C 42                      		db 42h			; FORMAT_TRACK
 10872 00000C3D 66                      		db 66h			; GET_MEDIA_ID
 10873 00000C3E 46                      		db 46h			; SET_MEDIA_ID
 10874 00000C3F 67                      		db 67h			; GET_ACCESS_FLAG
 10875 00000C40 47                      		db 47h			; SET_ACCESS_FLAG
 10876 00000C41 68                      		db 68h			; SENSE_MEDIA_TYPE
 10877                                  
 10878                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10879                                  
 10880                                  ; ---------------------------------------------------------------------------
 10881                                  
 10882                                  ; 16/10/2022
 10883                                  
 10884                                  ; ==========================================================================
 10885                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10886                                  ;
 10887                                  ;    input: AL contains logical drive
 10888                                  ;
 10889                                  ;	functions are dispatched through a call. On return, carry indicates
 10890                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10891                                  ;	subfunctions.
 10892                                  ;
 10893                                  ; ==========================================================================
 10894                                  
 10895                                  ; 11/03/2019
 10896                                  		; 19/10/2022
 10897                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10898 00000C42 E886F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10899 00000C45 06                      		push	es
 10900 00000C46 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10901 00000C4A 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10902                                  					; RAWIO
 10903 00000C4F 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10904 00000C53 07                      		pop	es
 10905 00000C54 7525                    		jnz	short IoctlFuncErr
 10906                                  
 10907                                  		; cas note: Could do the above two blocks in reverse order.
 10908                                  		; Would have to preserve al for SetDrive
 10909                                  
 10910                                  		; 10/12/2022
 10911 00000C56 BE[130C]                		mov	si, IoReadJumpTable
 10912                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10913                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10914 00000C59 A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10915 00000C5B 7503                    		jnz	short NotGenericWrite ; function is a read.
 10916                                  		; 10/12/2022
 10917 00000C5D BE[260C]                		mov	si, IoWriteJumpTable
 10918                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10919                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10920                                  NotGenericWrite:			
 10921 00000C60 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10922 00000C62 2C40                    		sub	al, 40h		; offset for base function
 10923 00000C64 2E3A04                  		cmp	al, [cs:si]
 10924 00000C67 7712                    		ja	short IoctlFuncErr
 10925 00000C69 98                      		cbw
 10926 00000C6A D1E0                    		shl	ax, 1
 10927 00000C6C 46                      		inc	si
 10928 00000C6D 01C6                    		add	si, ax
 10929 00000C6F 2EFF14                  		call	near [cs:si]
 10930                                  		;call	word ptr cs:[si]
 10931 00000C72 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10932                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10933                                  					; 2C7h:30h = 70h:25A0h
 10934 00000C77 B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10935 00000C79 C3                      		retn			; Pass carry flag through to exit code
 10936                                  ; ---------------------------------------------------------------------------
 10937                                  
 10938                                  		; Cmd_Error_Proc is called as a procedure and also use
 10939                                  		; as a fall through from above
 10940                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10941 00000C7A 5A                      		pop	dx
 10942                                  
 10943                                  IoctlFuncErr:				
 10944 00000C7B E957F4                  		jmp	bc_cmderr
 10945                                  ; ---------------------------------------------------------------------------
 10946                                  
 10947                                  ; 16/10/2022
 10948                                  
 10949                                  ; ==========================================================================
 10950                                  ;**	GetDeviceParameters:
 10951                                  ;
 10952                                  ;	GetDeviceParameters implements the generic ioctl function:
 10953                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10954                                  ;
 10955                                  ;	ENTRY	(ES:di) = BDS for drive
 10956                                  ;		PtrSav = long pointer to request header
 10957                                  ;	EXIT	??? BUGBUG
 10958                                  ;	USES	??? BUGBUG
 10959                                  ; ==========================================================================
 10960                                  
 10961                                  		; 19/10/2022
 10962                                  GetDeviceParameters:
 10963                                  		; Copy info from bds to the device parameters packet
 10964                                  
 10965 00000C7E C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10966 00000C82 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10967                                  					; (DS:BX) = return buffer
 10968 00000C85 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10969 00000C89 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10970 00000C8C 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10971 00000C90 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10972                                  					; Mask off other bits
 10973 00000C93 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10974 00000C96 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10975 00000C9A 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10976 00000C9D 30C0                    		xor	al, al		; Set media type to default
 10977 00000C9F 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10978                                  					
 10979                                  		; copy recommended bpb
 10980 00000CA2 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 10981 00000CA5 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10982                                  					; BUILD_DEVICE_BPB
 10983 00000CA8 7412                    		jz	short UseBpbPresent
 10984 00000CAA 1E                      		push	ds		; Save request packet segment
 10985 00000CAB 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10986                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10987                                  					; 2C7h:30h = 70h:25A0h
 10988                                  					; Point back to Bios_Data
 10989 00000CB0 E887FB                  		call	checksingle
 10990 00000CB3 E842F9                  		call	GetBp		; Build	the bpb	from scratch
 10991 00000CB6 1F                      		pop	ds		; Restore request packet segment
 10992 00000CB7 720F                    		jb	short GetParmRet
 10993 00000CB9 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 10994                                  					; Use this subfield of bds instead
 10995                                  UseBpbPresent:				
 10996 00000CBC 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10997                                  					; This is where	the result goes
 10998 00000CBF B91900                  		mov	cx, 25		; A_BPB.size - 6
 10999                                  					; For now use 'small' bpb
 11000 00000CC2 1E                      		push	ds		; reverse segments for copy
 11001 00000CC3 06                      		push	es
 11002 00000CC4 1F                      		pop	ds
 11003 00000CC5 07                      		pop	es
 11004 00000CC6 F3A4                    		rep movsb
 11005                                  		
 11006                                  		; 12/12/2022
 11007                                  		; cf=0 (test instruction -above- resets cf) 	
 11008                                  		;clc
 11009                                  GetParmRet:				
 11010 00000CC8 C3                      		retn
 11011                                  ; ---------------------------------------------------------------------------
 11012                                  
 11013                                  ; 17/10/2022
 11014                                  ; 16/10/2022
 11015                                  
 11016                                  ; ==========================================================================
 11017                                  ; SetDeviceParameters:
 11018                                  ;
 11019                                  ; input: ES:di points to bds for drive
 11020                                  ; ==========================================================================
 11021                                  
 11022                                  		; 19/10/2022
 11023                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11024 00000CC9 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11025 00000CCD C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11026 00000CD0 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11027                                  					; fchanged_by_format|fchanged
 11028 00000CD6 F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11029                                  					; ONLY_SET_TRACKLAYOUT
 11030 00000CD9 7579                    		jnz	short setTrackTable
 11031 00000CDB 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11032 00000CDE 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11033 00000CE2 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11034 00000CE5 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11035 00000CE9 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11036 00000CEC 1E                      		push	ds
 11037                                  		; 17/10/2022
 11038 00000CED 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11039                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11040                                  					; 2C7h:30h = 70h:25A0h
 11041                                  		;cmp	byte [fhave96], 0
 11042 00000CF2 803E[7700]00            		cmp	byte [fhave96], 0
 11043 00000CF7 1F                      		pop	ds
 11044 00000CF8 7502                    		jnz	short HaveChange ; we have changeline support
 11045                                  		; 10/12/2022
 11046 00000CFA 24FD                    		and	al, 0FDh
 11047                                  		;and	ax, 0FFFDh	; ~fchangeline
 11048                                  
 11049                                  		; Ignore all bits except non_removable and changeline
 11050                                  HaveChange:				
 11051 00000CFC 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11052 00000CFF 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11053 00000D03 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11054 00000D07 09C8                    		or	ax, cx
 11055 00000D09 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11056 00000D0D 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11057                                  					; Set media type
 11058 00000D10 1E                      		push	ds
 11059 00000D11 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11060                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11061 00000D16 A2[3706]                		mov	[mediatype], al
 11062                                  		;mov	ds:mediatype, al
 11063 00000D19 1F                      		pop	ds
 11064                                  
 11065                                  		; The media changed (maybe) so we will have to do a set dasd
 11066                                  		; the next time we format a track
 11067                                  
 11068                                  		; 10/12/2022
 11069 00000D1A 26804D2380              		or	byte [es:di+35], 80h
 11070                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11071                                  					; set_dasd_true
 11072 00000D1F 57                      		push	di		; Save bds pointer
 11073                                  
 11074                                  		; Figure out what we are supposed to do with the bpb
 11075                                  		; were we asked to install a fake bpb?
 11076                                  
 11077 00000D20 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11078                                  					; INSTALL_FAKE_BPB
 11079 00000D23 7514                    		jnz	short InstallFakeBpb
 11080                                  
 11081                                  		; were we returning a fake bpb when asked to build a bpb?
 11082                                  
 11083                                  		; 10/12/2022
 11084 00000D25 26F6452304              		test	byte [es:di+35], 4
 11085                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11086                                  					; return_fake_bpb
 11087 00000D2A 7405                    		jz	short InstallRecommendedBpb
 11088                                  
 11089                                  		; we were returning a fake bpb but we can stop now
 11090                                  
 11091                                  		; 10/12/2022
 11092 00000D2C 26806523FB              		and	byte [es:di+35], 0FBh
 11093                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11094                                  					; ~return_fake_bpb
 11095                                  InstallRecommendedBpb:			
 11096 00000D31 B91F00                  		mov	cx, 31		; A_BPB.size
 11097 00000D34 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11098 00000D37 EB0B                    		jmp	short CopyTheBpb
 11099                                  ; ---------------------------------------------------------------------------
 11100                                  
 11101                                  InstallFakeBpb:
 11102                                  		; 10/12/2022
 11103 00000D39 26804D2304              		or	byte [es:di+35], 4				
 11104                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11105                                  					; return_fake_bpb
 11106 00000D3E B91900                  		mov	cx, 25		; A_BPB.size - 6
 11107                                  					; move 'smaller' bpb
 11108 00000D41 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11109                                  
 11110                                  CopyTheBpb:				
 11111 00000D44 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11112 00000D47 F3A4                    		rep movsb
 11113 00000D49 1E                      		push	ds		; Save packet segment
 11114                                  		; 17/10/2022
 11115 00000D4A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11116                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11117                                  					; Setup	for ds -> Bios_Data
 11118 00000D4F E8CA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11119 00000D52 1F                      		pop	ds		; Restore packet segment
 11120 00000D53 5F                      		pop	di		; Restore bds pointer
 11121                                  setTrackTable:				
 11122 00000D54 8B4F26                  		mov	cx, [bx+38]
 11123 00000D57 1E                      		push	ds
 11124 00000D58 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11125 00000D5D 890E[3905]              		mov	[sectorspertrack], cx
 11126 00000D61 1F                      		pop	ds
 11127                                  		; 10/12/2022
 11128 00000D62 26806523F7              		and	byte [es:di+35], 0F7h
 11129                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11130                                  					; ~good_tracklayout
 11131 00000D67 F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11132                                  					; TRACKLAYOUT_IS_GOOD
 11133 00000D6A 7405                    		jz	short UglyTrackLayOut
 11134                                  		; 10/12/2022
 11135 00000D6C 26804D2308              		or	byte [es:di+35], 8
 11136                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11137                                  					; good_tracklayout
 11138                                  UglyTrackLayOut:			
 11139 00000D71 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11140 00000D74 7722                    		ja	short TooManyPerTrack
 11141                                  		;jcxz	short SectorInfoSaved
 11142 00000D76 E31E                    		jcxz	SectorInfoSaved	; 19/10/2022
 11143 00000D78 BF[3B05]                		mov	di, tracktable
 11144 00000D7B 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11145                                  		; 17/10/2022
 11146 00000D7E 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11147                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11148                                  					; Trash	our bds	pointer
 11149                                  StoreSectorInfo:
 11150 00000D83 47                      		inc	di
 11151 00000D84 47                      		inc	di		; Skip over cylinder and head
 11152 00000D85 AD                      		lodsw			; Get sector id
 11153 00000D86 AA                      		stosb			; Copy it
 11154 00000D87 AD                      		lodsw			; Get sector size
 11155                                  		
 11156                                  		; 02/09/2023 (PCDOS 7.1)
 11157                                  		;call	SectSizeToSectIndex
 11158 00000D88 80FC03                  		cmp	ah, 3 ; 02/09/2023
 11159                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11160                                  					; examine upper	byte only
 11161 00000D8B 7704                    		ja	short OneK
 11162 00000D8D 88E0                    		mov	al, ah		; value	in AH is the index!
 11163 00000D8F EB02                    		jmp	short sdp_s
 11164                                  OneK:
 11165 00000D91 B003                    		mov	al, 3
 11166                                  sdp_s:
 11167 00000D93 AA                      		stosb			; Store	sector SIZE index
 11168 00000D94 E2ED                    		loop	StoreSectorInfo
 11169                                  SectorInfoSaved:
 11170 00000D96 F8                      		clc
 11171 00000D97 C3                      		retn
 11172                                  ; ---------------------------------------------------------------------------
 11173                                  
 11174                                  TooManyPerTrack:			
 11175 00000D98 B00C                    		mov	al, 0Ch
 11176 00000D9A F9                      		stc
 11177 00000D9B C3                      		retn
 11178                                  ; ---------------------------------------------------------------------------
 11179                                  
 11180                                  ; 16/10/2022
 11181                                  
 11182                                  ; ==========================================================================
 11183                                  ; FormatTrack:
 11184                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11185                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11186                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11187                                  ;
 11188                                  ; input: ES:di points to bds for drive
 11189                                  ;
 11190                                  ; output:
 11191                                  ;	for status call:
 11192                                  ;	specialfunction byte set to:
 11193                                  ;		0 - rom support + legal combination
 11194                                  ;		1 - no rom support
 11195                                  ;		2 - illegal combination
 11196                                  ;		3 - no media present
 11197                                  ;	carry cleared.
 11198                                  ;
 11199                                  ;	for format track:
 11200                                  ;		carry set if error
 11201                                  ;
 11202                                  ; ==========================================================================
 11203                                  
 11204                                  ; 16/03/2019
 11205                                  
 11206                                  		; 19/10/2022
 11207                                  FormatTrack:
 11208 00000D9C C51E[1200]              		lds	bx, [ptrsav]
 11209 00000DA0 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11210 00000DA3 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11211                                  					; STATUS_FOR_FORMAT
 11212 00000DA6 740E                    		jz	short DoFormatTrack
 11213 00000DA8 1E                      		push	ds
 11214                                  		; 17/10/2022
 11215 00000DA9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11216                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11217 00000DAE E82602                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11218 00000DB1 1F                      		pop	ds
 11219 00000DB2 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11220 00000DB4 F8                      		clc
 11221 00000DB5 C3                      		retn
 11222                                  ; ---------------------------------------------------------------------------
 11223                                  
 11224                                  DoFormatTrack:				
 11225 00000DB6 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11226                                  					; DEV_HARDDISK
 11227 00000DBB 7508                    		jnz	short DoFormatDiskette
 11228                                  		; 17/10/2022
 11229 00000DBD 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11230                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11231                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11232 00000DC2 E99B00                  		jmp	VerifyTrack
 11233                                  ; ---------------------------------------------------------------------------
 11234                                  
 11235                                  DoFormatDiskette:			
 11236 00000DC5 8B4F01                  		mov	cx, [bx+1]
 11237 00000DC8 8B5703                  		mov	dx, [bx+3]
 11238 00000DCB F60702                  		test	byte [bx], 2
 11239                                  		; 17/10/2022
 11240 00000DCE 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11241                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11242                                  					; Setup	ds-> Bios_Data for verify
 11243 00000DD3 7403                    		jz	short DoFormatDiskette_1
 11244 00000DD5 E9E300                  		jmp	VerifyTrack_Err
 11245                                  ; ---------------------------------------------------------------------------
 11246                                  
 11247                                  DoFormatDiskette_1:			
 11248 00000DD8 E8FC01                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11249 00000DDB 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11250 00000DDD 7406                    		jz	short NeedToSetDasd ; Old rom
 11251 00000DDF 3C03                    		cmp	al, 3		; Time out error?
 11252 00000DE1 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11253                                  					; about	the illegal combination)
 11254 00000DE3 EB66                    		jmp	short FormatFailed
 11255                                  ; ---------------------------------------------------------------------------
 11256                                  
 11257                                  NeedToSetDasd:				
 11258 00000DE5 52                      		push	dx
 11259 00000DE6 E89001                  		call	SetDasd		; INT 13h, AH=17h
 11260 00000DE9 5A                      		pop	dx
 11261                                  NoSetDasd:				
 11262 00000DEA E84DFA                  		call	checksingle	; Do any needed	diskette swapping
 11263 00000DED 89D0                    		mov	ax, dx		; Get track from packet
 11264 00000DEF A3[3901]                		mov	[trknum], ax
 11265 00000DF2 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11266 00000DF6 88CC                    		mov	ah, cl
 11267 00000DF8 BB[3B05]                		mov	bx, tracktable
 11268 00000DFB 8B0E[3905]              		mov	cx, [sectorspertrack]
 11269                                  
 11270                                  StoreCylinderHead:			
 11271 00000DFF 8907                    		mov	[bx], ax	; Store	into TrackTable
 11272 00000E01 83C304                  		add	bx, 4		; Skip to next sector field
 11273 00000E04 E2F9                    		loop	StoreCylinderHead
 11274                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 11275                                  		; 02/09/2023
 11276 00000E06 B105                    		mov	cl, 5
 11277                                  FormatRetry:				
 11278 00000E08 51                      		push	cx
 11279 00000E09 BB[3B05]                		mov	bx, tracktable
 11280 00000E0C A0[3905]                		mov	al, [sectorspertrack]
 11281 00000E0F B405                    		mov	ah, 5		; romformat
 11282 00000E11 8C1E[3705]              		mov	[xfer_seg], ds
 11283 00000E15 E86902                  		call	ToRom
 11284 00000E18 59                      		pop	cx
 11285 00000E19 7216                    		jb	short FormatError
 11286 00000E1B 51                      		push	cx		; Now verify the sectors just formatted.
 11287                                  					; NOTE:	because	of bug in some BIOSes we have to
 11288                                  					;	set ES:BX to 00:00
 11289 00000E1C 53                      		push	bx
 11290 00000E1D 31DB                    		xor	bx, bx
 11291 00000E1F 891E[3705]              		mov	[xfer_seg], bx
 11292 00000E23 A0[3905]                		mov	al, [sectorspertrack]
 11293 00000E26 B404                    		mov	ah, 4		; romverify
 11294 00000E28 B101                    		mov	cl, 1
 11295 00000E2A E85402                  		call	ToRom
 11296 00000E2D 5B                      		pop	bx
 11297 00000E2E 59                      		pop	cx
 11298 00000E2F 7329                    		jnb	short FormatOk
 11299                                  FormatError:				
 11300 00000E31 E83702                  		call	ResetDisk
 11301 00000E34 C606[3906]01            		mov	byte [had_format_error], 1
 11302 00000E39 50                      		push	ax
 11303 00000E3A 51                      		push	cx
 11304 00000E3B 52                      		push	dx
 11305 00000E3C E89801                  		call	SetMediaForFormat
 11306 00000E3F 3C01                    		cmp	al, 1
 11307 00000E41 7503                    		jnz	short WhileErr
 11308 00000E43 E83301                  		call	SetDasd
 11309                                  WhileErr:				
 11310 00000E46 5A                      		pop	dx
 11311 00000E47 59                      		pop	cx
 11312 00000E48 58                      		pop	ax
 11313 00000E49 E2BD                    		loop	FormatRetry
 11314                                  FormatFailed:				
 11315 00000E4B C606[3906]01            		mov	byte [had_format_error], 1
 11316                                  					; Set the format error flag
 11317 00000E50 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11318 00000E53 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11319 00000E55 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11320                                  DoMapIt:				
 11321 00000E57 E973FD                  		jmp	maperror
 11322                                  ; ---------------------------------------------------------------------------
 11323                                  
 11324                                  FormatOk:				
 11325 00000E5A C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11326 00000E5F C3                      		retn
 11327                                  ; ---------------------------------------------------------------------------
 11328                                  
 11329                                  ; 16/10/2022
 11330                                  
 11331                                  ; ==========================================================================
 11332                                  ;
 11333                                  ; VerifyTrack:
 11334                                  ;
 11335                                  ; input: ES:di points to bds for drive
 11336                                  ; ==========================================================================
 11337                                  
 11338                                  VerifyTrack:				
 11339 00000E60 1E                      		push	ds
 11340 00000E61 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11341 00000E65 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11342                                  
 11343                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11344                                  
 11345 00000E68 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11346 00000E6B 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11347 00000E6E 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11348 00000E71 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11349                                  					; Get option flag word
 11350 00000E73 1F                      		pop	ds
 11351 00000E74 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11352 00000E79 890E[3301]              		mov	[curtrk], cx
 11353 00000E7D A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11354 00000E80 8B0E[3905]              		mov	cx, [sectorspertrack]
 11355                                  
 11356                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11357                                  		; specified if not we should go to the normal track verification
 11358                                  		; routine. If fast format has been specified we should get the
 11359                                  		; number of tracks to be verified and check it to see if it is
 11360                                  		; > 255. If it is then it is an error and we should go to
 11361                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11362                                  		; sectors per track to get the total number of sectors to be
 11363                                  		; verified. This should also be less than equal to 255
 11364                                  		; otherwise we go to same error exit. If everything is okay
 11365                                  		; we initalise cx to the total sectors. use ax as a temporary
 11366                                  		; register.
 11367                                  
 11368                                  					; Special function requested?	
 11369 00000E84 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11370 00000E87 7421                    		jz	short NormVerifyTrack
 11371 00000E89 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11372 00000E8B 08E4                    		or	ah, ah
 11373 00000E8D 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11374 00000E8F F6E1                    		mul	cl
 11375 00000E91 08E4                    		or	ah, ah
 11376 00000E93 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11377 00000E95 89C1                    		mov	cx, ax
 11378                                  		; 10/12/2022
 11379 00000E97 26F6452301              		test	byte [es:di+35], 1
 11380                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11381                                  					; fnon_removable
 11382 00000E9C 740C                    		jz	short NormVerifyTrack
 11383                                  					; Multitrack operation = on?
 11384                                  		; 10/12/2022
 11385                                  		; 19/10/2022
 11386 00000E9E F606[2F05]80            		test	byte [multrk_flag], 80h
 11387                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11388                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11389 00000EA3 7405                    		jz	short NormVerifyTrack
 11390 00000EA5 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11391                                  NormVerifyTrack:			
 11392 00000EAA 31C0                    		xor	ax, ax		; 1st sector
 11393 00000EAC 31DB                    		xor	bx, bx
 11394 00000EAE 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11395 00000EB2 E83F00                  		call	TrackIo
 11396 00000EB5 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11397 00000EBA C3                      		retn
 11398                                  ; ---------------------------------------------------------------------------
 11399                                  
 11400                                  VerifyTrack_Err:			
 11401 00000EBB B401                    		mov	ah, 1
 11402 00000EBD E90DFD                  		jmp	maperror
 11403                                  ; ---------------------------------------------------------------------------
 11404                                  
 11405                                  ; 16/10/2022
 11406                                  
 11407                                  ; ==========================================================================
 11408                                  ;
 11409                                  ; ReadTrack:
 11410                                  ;
 11411                                  ; input: ES:di points to bds for drive
 11412                                  ;
 11413                                  ; ==========================================================================
 11414                                  
 11415                                  ReadTrack:				
 11416 00000EC0 C606[2001]02            		mov	byte [rflag], 2	; romread
 11417 00000EC5 EB05                    		jmp	short ReadWriteTrack
 11418                                  ; ---------------------------------------------------------------------------
 11419                                  
 11420                                  WriteTrack:
 11421                                  
 11422                                  ; ==========================================================================
 11423                                  ;
 11424                                  ; WriteTrack:
 11425                                  ;
 11426                                  ; input: ES:di points to bds for drive
 11427                                  ;
 11428                                  ; ==========================================================================
 11429                                  				
 11430 00000EC7 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11431                                  
 11432                                  		; Fall into ReadWriteTrack
 11433                                  
 11434                                  ; ==========================================================================
 11435                                  ;
 11436                                  ; readWriteTrack:
 11437                                  ;
 11438                                  ; input:
 11439                                  ;    ES:di points to bds for drive
 11440                                  ;    rFlag - 2 for read,3 for write
 11441                                  ;
 11442                                  ; ==========================================================================
 11443                                  
 11444                                  ReadWriteTrack:	
 11445                                  		; save bds pointer segment so we can use it to access
 11446                                  		; our packet. Notice that this is not the standard register
 11447                                  		; assignment for accessing packets
 11448                                  		
 11449                                  		; 19/10/2022	
 11450 00000ECC 06                      		push	es
 11451 00000ECD C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11452 00000ED1 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11453 00000ED5 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11454 00000ED9 A3[3301]                		mov	[curtrk], ax
 11455 00000EDC 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11456 00000EE0 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11457 00000EE3 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11458 00000EE7 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11459 00000EEB 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11460                                  					; Get transfer address
 11461                                  
 11462                                  		; we just trashed our packet address, but we no longer care
 11463                                  
 11464 00000EEF 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11465 00000EF3 07                      		pop	es
 11466                                  
 11467                                  		; Fall into TrackIo
 11468                                  
 11469                                  ; =============== S U B	R O U T	I N E =======================================
 11470                                  
 11471                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11472                                  
 11473                                  ; ==========================================================================
 11474                                  ;
 11475                                  ; TrackIo:
 11476                                  ;    performs track read/write/verify
 11477                                  ;
 11478                                  ;   input:
 11479                                  ;      rFlag	- 2 = read
 11480                                  ;		  3 = write
 11481                                  ;		  4 = verify
 11482                                  ;      AX	- Index into track table of first sector to io
 11483                                  ;      CX	- Number of sectors to io
 11484                                  ;      Xfer_Seg:BX - Transfer address
 11485                                  ;      ES:DI	- Pointer to bds
 11486                                  ;      CurTrk	- Current cylinder
 11487                                  ;      CurHd	- Current head
 11488                                  ;
 11489                                  ; ==========================================================================
 11490                                  
 11491                                  ; 16/03/2019 - Retro DOS v4.0
 11492                                  		
 11493                                  		; 19/10/2022
 11494                                  TrackIo:	
 11495                                  					; Procedure `disk' will pop stack to
 11496 00000EF4 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11497 00000EF8 E83FF9                  		call	checksingle	; Ensure correct disk is in drv
 11498 00000EFB 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11499                                  					; See if we have already set	disk
 11500 00000F00 7407                    		jz	short Dptalreadyset ; base table
 11501 00000F02 50                      		push	ax		; set up tables	and variables for i/o
 11502 00000F03 51                      		push	cx
 11503 00000F04 E88FFA                  		call	iosetup
 11504 00000F07 59                      		pop	cx
 11505 00000F08 58                      		pop	ax
 11506                                  Dptalreadyset:				; Point si at the table entry of the			
 11507 00000F09 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11508 00000F0C D1E0                    		shl	ax, 1
 11509 00000F0E D1E0                    		shl	ax, 1
 11510 00000F10 01C6                    		add	si, ax
 11511                                  
 11512                                  		; WE WANT:
 11513                                  		; CX to	be the number of times we have to loop
 11514                                  		; DX to	be the number of sectors we read on each iteration
 11515                                  		
 11516 00000F12 BA0100                  		mov	dx, 1
 11517                                  		; 12/12/2022
 11518 00000F15 26F6452308              		test	byte [es:di+23h], 8
 11519                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11520                                  					; good_tracklayout
 11521 00000F1A 7402                    		jz	short ionextsector
 11522                                  		
 11523 00000F1C 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11524                                  ionextsector:				
 11525 00000F1E 51                      		push	cx
 11526 00000F1F 52                      		push	dx
 11527 00000F20 46                      		inc	si
 11528 00000F21 46                      		inc	si		; Skip over the	cylinder and head in
 11529                                  					; the track table
 11530 00000F22 AC                      		lodsb			; Get sector ID	from track table
 11531 00000F23 A2[3101]                		mov	[cursec], al
 11532                                  
 11533                                  		; assumptions for a fixed disk multi-track disk	i/o
 11534                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11535                                  		;     only CL is valid.
 11536                                  		; 2). Sector size should be set	to 512 bytes.
 11537                                  		; 3). Good track layout
 11538                                  		
 11539                                  		; 12/12/2022
 11540 00000F26 26F6452301              		test	byte [es:di+23h], 1
 11541                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11542                                  					; fnon_removable ; Fixed disk?
 11543 00000F2B 7414                    		jz	short IoRemovable ; No
 11544                                  		; 12/12/2022
 11545 00000F2D F606[2F05]80            		test	byte [multrk_flag], 80h
 11546                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11547                                  						; Allow multi-track operation?
 11548 00000F32 740D                    		jz	short IoRemovable ; No,don't do that.
 11549 00000F34 8916[2201]              		mov	[seccnt], dx
 11550 00000F38 89D0                    		mov	ax, dx
 11551 00000F3A E816FB                  		call	Disk
 11552 00000F3D 5A                      		pop	dx
 11553 00000F3E 59                      		pop	cx
 11554 00000F3F F8                      		clc
 11555 00000F40 C3                      		retn
 11556                                  ; ---------------------------------------------------------------------------
 11557                                  
 11558                                  IoRemovable:				
 11559 00000F41 AC                      		lodsb			; Get sector size index	from track
 11560                                  					; table	and save it
 11561 00000F42 50                      		push	ax
 11562 00000F43 56                      		push	si
 11563 00000F44 1E                      		push	ds		; Save Bios_Data
 11564 00000F45 50                      		push	ax
 11565 00000F46 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11566                                  					; Fetch	EOT while ds-> Bios_Data
 11567 00000F4A C536[2D01]              		lds	si, [dpt]
 11568 00000F4E 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11569 00000F51 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11570 00000F54 58                      		pop	ax
 11571 00000F55 1F                      		pop	ds
 11572 00000F56 88D0                    		mov	al, dl
 11573 00000F58 A3[2201]                		mov	[seccnt], ax
 11574 00000F5B E8F5FA                  		call	Disk
 11575 00000F5E 5E                      		pop	si		; Advance buffer pointer by adding
 11576                                  					; sector size
 11577 00000F5F 58                      		pop	ax
 11578                                  
 11579                                  		; 02/09/2023 (PCDOS 7.1)
 11580                                  		;call	SectorSizeIndexToSectorSize
 11581 00000F60 88C1                    		mov	cl, al
 11582 00000F62 B88000                  		mov	ax, 128
 11583 00000F65 D3E0                    		shl	ax, cl
 11584                                  
 11585 00000F67 01C3                    		add	bx, ax
 11586 00000F69 5A                      		pop	dx
 11587 00000F6A 59                      		pop	cx
 11588 00000F6B E2B1                    		loop	ionextsector
 11589 00000F6D 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11590                                  		;jz	short NoNeedDone
 11591                                  		; 12/12/2022
 11592 00000F72 7404                    		je	short NoNeedDone2
 11593 00000F74 E867FA                  		call	done		; set time of last access, and reset
 11594                                  					; entries in Dpt.
 11595                                  NoNeedDone:
 11596 00000F77 F8                      		clc
 11597                                  NoNeedDone2:
 11598 00000F78 C3                      		retn
 11599                                  
 11600                                  ; =============== S U B	R O U T	I N E =======================================
 11601                                  
 11602                                  ; ---------------------------------------------------------------------------
 11603                                  ;
 11604                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11605                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11606                                  ; are permissible.
 11607                                  ;
 11608                                  ; On Input   AX contains sector size in bytes
 11609                                  ; On Output  AL Contains index
 11610                                  ; All other registers preserved
 11611                                  ;
 11612                                  ; ---------------------------------------------------------------------------
 11613                                  
 11614                                  ; 02/09/2023
 11615                                  ;SectSizeToSectIndex:
 11616                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11617                                  ;					; examine upper	byte only
 11618                                  ;		ja	short OneK
 11619                                  ;		mov	al, ah		; value	in AH is the index!
 11620                                  ;		retn
 11621                                  
 11622                                  ; ---------------------------------------------------------------------------
 11623                                  ;
 11624                                  ;OneK:
 11625                                  ;		mov	al, 3
 11626                                  ;		retn
 11627                                  
 11628                                  ; =============== S U B	R O U T	I N E =======================================
 11629                                  
 11630                                  ; 02/09/2023
 11631                                  ;SectorSizeIndexToSectorSize:
 11632                                  ;		mov	cl, al
 11633                                  ;		mov	ax, 128
 11634                                  ;		shl	ax, cl
 11635                                  ;		retn
 11636                                  
 11637                                  ; =============== S U B	R O U T	I N E =======================================
 11638                                  
 11639                                  ; 16/10/2022
 11640                                  
 11641                                  ; ---------------------------------------------------------------------------
 11642                                  ;
 11643                                  ; SetDASD
 11644                                  ;
 11645                                  ; Set up the rom for formatting.
 11646                                  ; we have to tell the rom bios what type of disk is in the drive.
 11647                                  ;
 11648                                  ; On Input   - ES:di - Points to bds
 11649                                  ;
 11650                                  ; ---------------------------------------------------------------------------
 11651                                  
 11652                                  		; 19/10/2022
 11653                                  SetDasd:	
 11654 00000F79 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11655                                  					; See if we've previously set dasd type
 11656 00000F7E 740C                    		jz	short DoSetDasd
 11657                                  		; 10/12/2022
 11658 00000F80 26F6452380              		test	byte [es:di+23h], 80h
 11659                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11660                                  					; set_dasd_true
 11661 00000F85 7447                    		jz	short DasdHasBeenSet
 11662                                  		; 10/12/2022
 11663 00000F87 268065237F              		and	byte [es:di+23h], 7Fh
 11664                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11665                                  					; ~set_dasd_true
 11666                                  DoSetDasd:
 11667 00000F8C C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11668 00000F91 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11669 00000F96 B004                    		mov	al, 4
 11670                                  		; 02/09/2023
 11671 00000F98 268A6522                		mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 11672 00000F9C 80FC02                  		cmp	ah, 2
 11673                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11674                                  					; DEV_3INCH720KB
 11675 00000F9F 7415                    		jz	short DoSet
 11676 00000FA1 80FC01                  		cmp	ah, 1
 11677                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11678                                  					; DEV_5INCH96TPI
 11679                                  		;jz	short GotBig
 11680 00000FA4 B001                    		mov	al, 1
 11681                                  		;jmp	short DoSet
 11682                                  		; 02/09/2023
 11683 00000FA6 750E                    		jnz	short DoSet
 11684                                  
 11685                                  ; ---------------------------------------------------------------------------
 11686                                  
 11687                                  GotBig:
 11688                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 11689                                  		; 02/09/2023
 11690 00000FA8 40                      		inc	ax  ; mov al, 2
 11691 00000FA9 803E[3706]00            		cmp	byte [mediatype], 0
 11692 00000FAE 7506                    		jnz	short DoSet
 11693                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11694                                  		; 10/12/2022
 11695                                  		;inc	al  ; al = 3
 11696                                  		; 18/12/2022
 11697 00000FB0 40                      		inc	ax  ; al = 3
 11698 00000FB1 C606[3B01]54            		mov	byte [gap_patch], 54h
 11699                                  DoSet:
 11700 00000FB6 1E                      		push	ds
 11701 00000FB7 56                      		push	si
 11702                                  
 11703                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 11704                                  		; 02/09/2023
 11705 00000FB8 31F6                    		xor	si, si
 11706 00000FBA 8EDE                    		mov	ds, si	; 0
 11707                                  
 11708 00000FBC C5367800                		lds	si, [DSKADR]
 11709                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11710                                  		;;lds	si, ds:78h
 11711                                  
 11712 00000FC0 C644090F                		mov	byte [si+9], 0Fh ;
 11713                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11714 00000FC4 5E                      		pop	si
 11715 00000FC5 1F                      		pop	ds
 11716 00000FC6 B417                    		mov	ah, 17h
 11717 00000FC8 268A5504                		mov	dl, [es:di+4]
 11718 00000FCC CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11719                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11720                                  DasdHasBeenSet:
 11721 00000FCE 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11722 00000FD2 8826[3701]              		mov	[formt_eot], ah
 11723 00000FD6 C3                      		retn
 11724                                  
 11725                                  ; =============== S U B	R O U T	I N E =======================================
 11726                                  
 11727                                  ; 16/10/2022
 11728                                  
 11729                                  ; ---------------------------------------------------------------------------
 11730                                  ;
 11731                                  ; Set Media Type for Format
 11732                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11733                                  ; BPB area in the BDS can be handled by the rom.
 11734                                  ; On Input, ES:DI -> current BDS.
 11735                                  ; The status of the operation is returned in AL
 11736                                  ;
 11737                                  ;	- 0 - if the support is available,and the combination is valid.
 11738                                  ;	- 1 - no rom support
 11739                                  ;	- 2 - illegal combination
 11740                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11741                                  ;
 11742                                  ; Flags also may be altered. All other registers preserved.
 11743                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11744                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11745                                  ; to the one returned. the original pointer to the disk base table is stored
 11746                                  ; in TempDpt, until it is restored.
 11747                                  ;
 11748                                  ; ---------------------------------------------------------------------------
 11749                                  
 11750                                  		; 19/10/2022
 11751                                  SetMediaForFormat:	
 11752 00000FD7 51                      		push	cx
 11753 00000FD8 52                      		push	dx
 11754                                  
 11755                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11756                                  		; but we need to call int 13h, ah=18h again.
 11757                                  
 11758 00000FD9 803E[3906]01            		cmp	byte [had_format_error], 1
 11759 00000FDE 7425                    		jz	short SkipSaveDskAdr
 11760 00000FE0 30C0                    		xor	al, al		; If already done return 0
 11761 00000FE2 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11762 00000FE7 7502                    		jnz	short DoSetMediaForFormat
 11763 00000FE9 EB7D                    		jmp	SetMediaRet	; Media	already	set
 11764                                  ; ---------------------------------------------------------------------------
 11765                                  
 11766                                  DoSetMediaForFormat:
 11767 00000FEB 06                      		push	es
 11768 00000FEC 56                      		push	si
 11769                                  		
 11770                                  		; 02/09/2023
 11771                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 11772 00000FED 31F6                    		xor	si, si ; 0
 11773 00000FEF 8EC6                    		mov	es, si
 11774                                  
 11775 00000FF1 26C4367800              		les	si, [es:DSKADR]
 11776                                  		;les	si, es:78h	; [es:DSKADR]
 11777                                  					; Get pointer to disk base table
 11778 00000FF6 8936[2D01]              		mov	[dpt], si
 11779 00000FFA 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11780                                  
 11781                                  		; Initialize the head settle time to 0Fh. See the offsets
 11782                                  		; given in dskprm.inc.
 11783                                  
 11784 00000FFE 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11785 00001003 5E                      		pop	si
 11786 00001004 07                      		pop	es
 11787                                  SkipSaveDskAdr:				
 11788 00001005 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11789 00001009 49                      		dec	cx
 11790 0000100A 80E503                  		and	ch, 3
 11791 0000100D D0CD                    		ror	ch, 1
 11792 0000100F D0CD                    		ror	ch, 1
 11793 00001011 86E9                    		xchg	ch, cl
 11794 00001013 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11795 00001017 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11796 0000101B 06                      		push	es
 11797 0000101C 1E                      		push	ds
 11798 0000101D 56                      		push	si
 11799 0000101E 57                      		push	di
 11800 0000101F B418                    		mov	ah, 18h
 11801 00001021 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11802                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11803 00001023 7231                    		jb	short FormaStatErr
 11804 00001025 803E[3906]01            		cmp	byte [had_format_error], 1
 11805 0000102A 7423                    		jz	short skip_disk_base_setting
 11806 0000102C 06                      		push	es		; Save segment returned	by the rom
 11807                                  
 11808                                  		; 02/09/2023
 11809                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 11810 0000102D 31F6                    		xor	si, si
 11811 0000102F 8EC6                    		mov	es, si ; 0
 11812 00001031 06                      		push	es ; * ; 02/09/2023
 11813                                  
 11814 00001032 26C4367800              		les	si, [es:DSKADR]
 11815                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11816                                  					; Get current disk base	table
 11817 00001037 8936[3A06]              		mov	[tempdpt], si
 11818 0000103B 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11819                                  
 11820                                  		; 02/09/2023
 11821                                  		;;mov	es, [zeroseg]
 11822                                  		;xor	si, si ; 0
 11823                                  		;mov	es, si
 11824 0000103F 07                      		pop	es ; * ; 02/09/2023
 11825                                  
 11826                                  		;mov	es:78h,	di
 11827 00001040 26893E7800              		mov	[es:DSKADR], di
 11828                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11829 00001045 268F067A00              		pop	word [es:DSKADR+2]
 11830 0000104A C606[3806]01            		mov	byte [media_set_for_format], 1
 11831                                  skip_disk_base_setting:			
 11832 0000104F 30C0                    		xor	al, al		; Legal	combination + rom support code
 11833                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11834 00001051 A2[3906]                		mov	[had_format_error], al
 11835 00001054 EB0E                    		jmp	short PopStatRet
 11836                                  ; ---------------------------------------------------------------------------
 11837                                  
 11838                                  FormaStatErr:
 11839                                  		; 10/12/2022
 11840 00001056 B003                    		mov	al, 3
 11841                                  				
 11842 00001058 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11843                                  					; Illegal combination =	0Ch
 11844 0000105B 7406                    		jz	short FormatStatIllegalComb
 11845 0000105D 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11846 00001060 7402                    		jz	short FormatStatTimeOut
 11847                                  		; 10/12/2022
 11848                                  		;dec	al
 11849                                  		; 18/12/2022
 11850 00001062 48                      		dec	ax
 11851                                  		; al = 2
 11852                                  		;mov	al, 1		; Function not supported.
 11853                                  		;jmp	short PopStatRet
 11854                                  ; ---------------------------------------------------------------------------
 11855                                  
 11856                                  FormatStatIllegalComb:
 11857                                  		; 10/12/2022
 11858                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11859                                  		; 18/12/2022
 11860 00001063 48                      		dec	ax
 11861                                  		; al = 2				
 11862                                  		;mov	al, 2		; Function supported, but
 11863                                  					; Illegal sect/trk,trk combination.
 11864                                  		; 10/12/2022
 11865                                  		;jmp	short PopStatRet
 11866                                  ; ---------------------------------------------------------------------------
 11867                                  
 11868                                  FormatStatTimeOut:			
 11869                                  		; 10/12/2022
 11870                                  		; al = 3
 11871                                  		;mov	al, 3		; Function supported, but
 11872                                  					; Media	not present.
 11873                                  PopStatRet:				
 11874 00001064 5F                      		pop	di
 11875 00001065 5E                      		pop	si
 11876 00001066 1F                      		pop	ds
 11877 00001067 07                      		pop	es
 11878                                  SetMediaRet:				
 11879 00001068 5A                      		pop	dx
 11880 00001069 59                      		pop	cx
 11881 0000106A C3                      		retn
 11882                                  
 11883                                  ; =============== S U B	R O U T	I N E =======================================
 11884                                  
 11885                                  ; 16/10/2022
 11886                                  
 11887                                  ; ---------------------------------------------------------------------------
 11888                                  ;
 11889                                  ; RESET THE DRIVE
 11890                                  ;
 11891                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11892                                  ; slow head settle time for the next operation. this is because the reset
 11893                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11894                                  ; time around - there is a problem with 3.5" drives in that the head does
 11895                                  ; not settle down in time,even for read operations!!
 11896                                  ;
 11897                                  ; ---------------------------------------------------------------------------
 11898                                  
 11899                                  ResetDisk:
 11900 0000106B 50                      		push	ax
 11901                                  
 11902                                  		; 02/09/2023
 11903 0000106C B80100                  		mov	ax, 1 ; PCDOS 7.1
 11904 0000106F 3806[3806]              		cmp	[media_set_for_format], al ; 1
 11905                                  		;cmp	byte [media_set_for_format], 1
 11906                                  					; Reset while formatting?
 11907 00001073 7503                    		jnz	short ResetDisk_cont
 11908                                  					; Then verify operation in "fmt & vrfy"
 11909                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 11910 00001075 A2[3906]                		mov	[had_format_error], al ; 1
 11911                                  ResetDisk_cont:
 11912                                  		; 02/09/2023 (ah=0)
 11913                                  		;xor	ah, ah		; So signals that we had a format error
 11914 00001078 CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11915                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11916 0000107A C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11917                                  					; Zap up the speed
 11918 0000107F 58                      		pop	ax
 11919 00001080 C3                      		retn
 11920                                  
 11921                                  ; =============== S U B	R O U T	I N E =======================================
 11922                                  
 11923                                  ; 16/10/2022
 11924                                  
 11925                                  ; ---------------------------------------------------------------------------
 11926                                  ;
 11927                                  ; This routine sets up the drive parameter table with the values needed for
 11928                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11929                                  ;
 11930                                  ; on entry  -	ES:DI - points to bds for the drive
 11931                                  ;		Xfer_Seg:BX - points to trkbuf
 11932                                  ;		AL    - number of sectors
 11933                                  ;		AH    - int 13 function code
 11934                                  ;		CL    - sector number for verify
 11935                                  ;		DS    - Bios_Data
 11936                                  ;
 11937                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11938                                  ;		AX and flags are the results of the int 13
 11939                                  ;
 11940                                  ; ---------------------------------------------------------------------------
 11941                                  
 11942                                  		; 19/10/2022
 11943                                  ToRom:	
 11944 00001081 53                      		push	bx
 11945 00001082 56                      		push	si
 11946                                  
 11947                                  		; Compaq bug fix - check whether we are using new ROM
 11948                                  		; functionality to set up format, not merely if it exists.
 11949                                  		; This was formerly a check against [new_rom]
 11950                                  
 11951 00001083 F606[3806]01            		test	byte [media_set_for_format], 1
 11952 00001088 7536                    		jnz	short GotValidDpt
 11953 0000108A 50                      		push	ax
 11954 0000108B 06                      		push	es		; Save bds segment
 11955 0000108C 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11956                                  					; ffSmall ; is it a 3.5" drive?
 11957 00001091 9C                      		pushf			; (Save	the cmp	result)
 11958 00001092 8E06[1A00]              		mov	es, [zeroseg]
 11959                                  		;les	si, es:78h	; Get pointer to disk base table
 11960 00001096 26C4367800              		les	si, [es:DSKADR]
 11961                                  		;mov	word ptr ds:dpt, si
 11962                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11963 0000109B 8936[2D01]              		mov	[dpt], si
 11964 0000109F 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11965                                  		
 11966 000010A3 A0[3701]                		mov	al, [formt_eot]
 11967 000010A6 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11968 000010AA A0[3B01]                		mov	al, [gap_patch]
 11969 000010AD 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11970                                  					; Important for	format
 11971 000010B1 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11972                                  					; Assume we are	doing a	seek operation
 11973                                  					; Setup	motor start correctly for 3.5" drives
 11974 000010B6 9D                      		popf			; Get result of	earlier	cmp
 11975 000010B7 7505                    		jnz	short MotorStrtOK
 11976 000010B9 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11977                                  MotorStrtOK:				
 11978 000010BE 07                      		pop	es		; Restore bds segment
 11979 000010BF 58                      		pop	ax
 11980                                  GotValidDpt:				
 11981 000010C0 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11982 000010C4 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11983 000010C6 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11984 000010CA 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11985 000010CE 06                      		push	es		; Save bds segment
 11986 000010CF 8E06[3705]              		mov	es, [xfer_seg]
 11987 000010D3 CD13                    		int	13h		; DISK -
 11988 000010D5 07                      		pop	es		; Restore bds segment
 11989 000010D6 5E                      		pop	si
 11990 000010D7 5B                      		pop	bx
 11991 000010D8 C3                      		retn
 11992                                  
 11993                                  ; ---------------------------------------------------------------------------
 11994                                  
 11995                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11996                                  
 11997                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11998                                  
 11999                                  ; ==========================================================================
 12000                                  ;
 12001                                  ; get the owner of the physical drive represented by the logical drive in al.
 12002                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 12003                                  ; if this is not the case, the system may hang, just following the linked list.
 12004                                  ;
 12005                                  ; ==========================================================================
 12006                                  
 12007                                  		; 19/10/2022
 12008                                  ioctl_getown:
 12009 000010D9 E8EFF3                  		call	SetDrive
 12010 000010DC 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12011                                  					; Get physical drive number
 12012 000010E0 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12013                                  ownloop:				
 12014 000010E4 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12015 000010E8 7507                    		jnz	short getnextBDS
 12016                                  		; 10/12/2022
 12017 000010EA 26F6452320              		test	byte [es:di+23h], 20h
 12018                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12019                                  					; fi_own_physical
 12020 000010EF 7514                    		jnz	short exitown
 12021                                  getnextBDS:				
 12022 000010F1 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12023 000010F4 EBEE                    		jmp	short ownloop
 12024                                  ; ---------------------------------------------------------------------------
 12025                                  
 12026                                  ; ==========================================================================
 12027                                  ;
 12028                                  ; set the ownership of the physical drive represented by the logical drive
 12029                                  ; in al to al.
 12030                                  ;
 12031                                  ; ==========================================================================
 12032                                  
 12033                                  		; 19/10/2022
 12034                                  ioctl_setown:
 12035 000010F6 E8D2F3                  		call	SetDrive
 12036 000010F9 C606[7A00]01            		mov	byte [fsetowner], 1
 12037                                  					; set flag for CheckSingle to look at.
 12038 000010FE E839F7                  		call	checksingle
 12039                                  		; 02/09/2023
 12040 00001101 FE0E[7A00]              		dec	byte [fsetowner] ; 0
 12041                                  		;mov	byte [fsetowner], 0
 12042                                  					; set ownership	of drive reset flag
 12043                                  		; Fall into ExitOwn
 12044                                  
 12045                                  ; ==========================================================================
 12046                                  ;
 12047                                  ; if there is only one logical drive assigned to this physical drive, return
 12048                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12049                                  ;
 12050                                  ; ==========================================================================
 12051                                  
 12052                                  exitown:				
 12053 00001105 30C9                    		xor	cl, cl
 12054                                  		; 12/12/2022
 12055 00001107 26F6452310              		test	byte [es:di+23h], 10h
 12056                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12057                                  					; fi_am_mult
 12058 0000110C 7406                    		jz	short exitnomult
 12059 0000110E 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12060                                  					; Get logical drive number
 12061                                  					; Get it 1-based
 12062 00001112 FEC1                    		inc	cl
 12063                                  exitnomult:				
 12064 00001114 C51E[1200]              		lds	bx, [ptrsav]
 12065 00001118 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12066                                  					; Exit normal termination
 12067                                  		; 12/12/2022
 12068                                  		; cf=0
 12069                                  		;clc
 12070 0000111B C3                      		retn
 12071                                  
 12072                                  ; =============== S U B	R O U T	I N E =======================================
 12073                                  
 12074                                  ; 16/10/2022
 12075                                  
 12076                                  ; ---------------------------------------------------------------------------
 12077                                  ;
 12078                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12079                                  ; only if the first byte of TempDpt is not -1.
 12080                                  ; all registers (including flags) are preserved.
 12081                                  ;
 12082                                  ; ---------------------------------------------------------------------------
 12083                                  
 12084                                  		; 19/10/2022
 12085                                  RestoreOldDpt:
 12086                                  		; if we have already restored the disk base table earlier,
 12087                                  		; do not do it again.
 12088                                  	
 12089 0000111C 50                      		push	ax
 12090 0000111D 30C0                    		xor	al, al
 12091 0000111F A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 12092 00001122 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 12093 00001126 08C0                    		or	al, al
 12094 00001128 741E                    		jz	short DontRestore
 12095 0000112A 56                      		push	si
 12096 0000112B 1E                      		push	ds
 12097 0000112C 06                      		push	es
 12098 0000112D C536[3A06]              		lds	si, [tempdpt]
 12099                                  
 12100                                  		; 17/10/2022
 12101 00001131 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 12102                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12103 00001136 268E06[1A00]            		mov	es, [es:zeroseg]
 12104                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 12105                                  
 12106                                  		;mov	es:78h,	si	; [es:DSKADR]
 12107 0000113B 2689367800              		mov	[es:DSKADR], si
 12108                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12109 00001140 268C1E7A00              		mov	[es:DSKADR+2], ds
 12110 00001145 07                      		pop	es
 12111 00001146 1F                      		pop	ds
 12112 00001147 5E                      		pop	si
 12113                                  DontRestore:				
 12114 00001148 58                      		pop	ax
 12115                                  		; 12/12/2022
 12116                                  		; cf=0
 12117                                  		;clc			;  Clear carry
 12118 00001149 C3                      		retn
 12119                                  
 12120                                  ; ---------------------------------------------------------------------------
 12121                                  
 12122                                  ; 16/10/2022
 12123                                  
 12124                                  ; ==========================================================================
 12125                                  ;	get media id
 12126                                  ; ==========================================================================
 12127                                  ;
 12128                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12129                                  ;	    the media that has the extended boot record.
 12130                                  ;	    for the conventional media,this routine will return "unknown
 12131                                  ;	    media type" error to dos.
 12132                                  ;
 12133                                  ; INPUT :   ES:di -> bds table for this drive.
 12134                                  ;
 12135                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12136                                  ;	    if carry set,then al contains the device driver error number
 12137                                  ;	    that will be returned to dos.
 12138                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12139                                  ;
 12140                                  ; SUBROUTINES TO BE CALLED:
 12141                                  ;	BootIo:NEAR
 12142                                  ;
 12143                                  ; LOGIC:
 12144                                  ;	to recognize the extended boot record,this logic will actually
 12145                                  ;	access the boot sector even if it is a hard disk.
 12146                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12147                                  ;	field of bpb and the extended boot signature.
 12148                                  ;
 12149                                  ; {
 12150                                  ;	get logical drive number from bds table;
 12151                                  ;	rFlag = read operation;
 12152                                  ;	BootIo;		 /*get the media boot record into the buffer
 12153                                  ;	if (no error) then
 12154                                  ;	     if (extended boot record) then
 12155                                  ;		{ set volume label,volume serial number and system id
 12156                                  ;		  of the request packet to those of the boot record;
 12157                                  ;		};
 12158                                  ;	     else		  /*not an extended bpb */
 12159                                  ;		{ set register al to "unknown media.." error code;
 12160                                  ;		  set carry bit;
 12161                                  ;		};
 12162                                  ;	else
 12163                                  ;	     ret;	/*already error code is set in the register al
 12164                                  ;
 12165                                  ; ==========================================================================
 12166                                  
 12167                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12168                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12169                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12170                                  
 12171                                  		; 19/10/2022
 12172                                  GetMediaId:
 12173 0000114A E89F00                  		call	ChangeLineChk
 12174 0000114D 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12175 00001151 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12176 00001156 E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12177 00001159 7224                    		jb	short IOCtl_If1
 12178                                  					; Valid? (0F0h-0FFh?)
 12179 0000115B 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12180                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12181 00001160 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12182                                  		; 10/12/2022
 12183 00001162 BE[7401]                		mov	si, disksector+26h
 12184 00001165 803C29                  		cmp	byte [si], 29h
 12185                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12186                                  					; EXT_BOOT_SIGNATURE
 12187 00001168 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12188 0000116A C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12189 0000116E 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12190                                  		; 10/12/2022
 12191 00001172 46                      		inc	si
 12192                                  		; si = disksector+27h 
 12193                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12194 00001173 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12195 00001176 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12196                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12197                                  					; +size_of_EXT_SYSTEM_ID
 12198 00001179 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12199                                  	
 12200                                  		; 10/12/2022
 12201                                  		; cf = 0
 12202                                  		;clc
 12203                                  
 12204 0000117B C3                      		retn
 12205                                  ; ---------------------------------------------------------------------------
 12206                                  
 12207                                  IOCtl_If2:				
 12208 0000117C B007                    		mov	al, 7		; error_unknown_media
 12209 0000117E F9                      		stc
 12210                                  IOCtl_If1:				
 12211 0000117F C3                      		retn
 12212                                  ; ---------------------------------------------------------------------------
 12213                                  
 12214                                  ; 16/10/2022
 12215                                  
 12216                                  ; ==========================================================================
 12217                                  ;  set media id
 12218                                  ; ==========================================================================
 12219                                  
 12220                                  ; function: set the volume label, the system id and the serial number of
 12221                                  ;	    the media that has the extended boot record.
 12222                                  ;	    for the conventional media, this routine will return "unknown
 12223                                  ;	    media.." error to dos.
 12224                                  ;	    this routine will also set the corresponding informations in
 12225                                  ;	    the bds table.
 12226                                  ;
 12227                                  ; input :   ES:di -> bds table for this drive.
 12228                                  ;
 12229                                  ; output:   the extended boot record in the media will be set according to
 12230                                  ;	    the request packet.
 12231                                  ;	    if carry set, then al contains the device driver error number
 12232                                  ;	    that will be returned to dos.
 12233                                  ;
 12234                                  ; subroutines to be called:
 12235                                  ;	BootIo:NEAR
 12236                                  ;
 12237                                  ; logic:
 12238                                  ;
 12239                                  ; {
 12240                                  ;	get drive_number from bds;
 12241                                  ;	rFlag = "read operation";
 12242                                  ;	BootIo;
 12243                                  ;	if (no error) then
 12244                                  ;	     if (extended boot record) then
 12245                                  ;		{ set volume label,volume serial number and system id
 12246                                  ;		  of the boot record to those of the request packet;
 12247                                  ;		  rFlag = "write operation";
 12248                                  ;		  get drive number from bds;
 12249                                  ;		  BootIo;	  /*write it back*/
 12250                                  ;		};
 12251                                  ;	     else		  /*not an extended bpb */
 12252                                  ;		{ set register al to "unknown media.." error code;
 12253                                  ;		  set carry bit;
 12254                                  ;		  ret;	 /*return back to caller */
 12255                                  ;		};
 12256                                  ;	else
 12257                                  ;	     ret;		 /*already error code is set */
 12258                                  ;
 12259                                  ; ==========================================================================
 12260                                  
 12261                                  		; 19/10/2022
 12262                                  SetMediaId:
 12263 00001180 E86900                  		call	ChangeLineChk
 12264 00001183 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12265                                  					; Logical drive	number
 12266 00001187 88C2                    		mov	dl, al
 12267 00001189 C606[2001]02            		mov	byte [rflag], 2	; romread
 12268 0000118E 52                      		push	dx
 12269 0000118F E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12270 00001192 5A                      		pop	dx
 12271 00001193 723E                    		jb	short IOCtl_If6
 12272                                  					; Valid? (0F0h-0FFh?)
 12273 00001195 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12274                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12275 0000119A 7234                    		jb	short IOCtl_If7	; Brif not
 12276 0000119C 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12277                                  					; EXT_BOOT_SIGNATURE
 12278 000011A1 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12279 000011A3 06                      		push	es		; Save BDS pointer
 12280 000011A4 57                      		push	di
 12281 000011A5 1E                      		push	ds		; Point	ES To boot record
 12282 000011A6 07                      		pop	es
 12283 000011A7 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12284 000011AA C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12285 000011AE C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12286 000011B1 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12287 000011B4 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12288                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12289                                  					; +size_of_EXT_SYSTEM_ID
 12290 000011B7 F3A4                    		rep movsb
 12291 000011B9 06                      		push	es		; point	ds back	to Bios_Data
 12292 000011BA 1F                      		pop	ds
 12293 000011BB 5F                      		pop	di		; restore bds pointer
 12294 000011BC 07                      		pop	es
 12295 000011BD E876F5                  		call	mov_media_ids	; update the bds media id info.
 12296 000011C0 88D0                    		mov	al, dl
 12297 000011C2 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12298 000011C7 E80A00                  		call	BootIo		; write	it back.
 12299 000011CA C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12300                                  					; make sure chk_media check the driver
 12301                                  					; return with error code from BootIo
 12302 000011CF C3                      		retn
 12303                                  ; ---------------------------------------------------------------------------
 12304                                  
 12305                                  IOCtl_If7:				
 12306 000011D0 B007                    		mov	al, 7		; error_unknown_media
 12307 000011D2 F9                      		stc
 12308                                  IOCtl_If6:				
 12309 000011D3 C3                      		retn
 12310                                  
 12311                                  ; =============== S U B	R O U T	I N E =======================================
 12312                                  
 12313                                  ; 16/10/2022
 12314                                  
 12315                                  ; ---------------------------------------------------------------------------
 12316                                  ;	BootIo
 12317                                  ; ---------------------------------------------------------------------------
 12318                                  ;
 12319                                  ; function: read/write the boot record into boot sector.
 12320                                  ;
 12321                                  ; input :
 12322                                  ;	    al=logical drive number
 12323                                  ;	    rFlag = operation (read/write)
 12324                                  ;
 12325                                  ; output:   for read operation,the boot record of the drive specified in bds
 12326                                  ;	    be read into the DiskSector buffer.
 12327                                  ;	    for write operation,the DiskSector buffer image will be written
 12328                                  ;	    to the drive specified in bds.
 12329                                  ;	    if carry set,then al contains the device driver error number
 12330                                  ;	    that will be returned to dos.
 12331                                  ;	    AX,CX,DX register destroyed.
 12332                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12333                                  ;
 12334                                  ; subroutines to be called:
 12335                                  ;	DiskIO:NEAR
 12336                                  ;
 12337                                  ; logic:
 12338                                  ;
 12339                                  ; {
 12340                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12341                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12342                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12343                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12344                                  ; }
 12345                                  ; ==========================================================================
 12346                                  
 12347                                  		; 19/10/2022
 12348                                  BootIo:	
 12349 000011D4 06                      		push	es
 12350 000011D5 57                      		push	di
 12351 000011D6 53                      		push	bx
 12352 000011D7 1E                      		push	ds
 12353 000011D8 07                      		pop	es		; Point ES: to Bios_Data
 12354                                  
 12355                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12356                                  		; need to be initialized for this subroutine out here are
 12357                                  		; - Transfer address to Bios_Data:DiskSector
 12358                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12359                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12360                                  		; - Number of sectors <-- 1
 12361                                  
 12362 000011D9 BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12363 000011DC 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12364 000011DE 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12365 000011E2 B90100                  		mov	cx, 1
 12366 000011E5 E8E0F6                  		call	diskio
 12367 000011E8 5B                      		pop	bx
 12368 000011E9 5F                      		pop	di
 12369 000011EA 07                      		pop	es
 12370 000011EB C3                      		retn
 12371                                  
 12372                                  ; =============== S U B	R O U T	I N E =======================================
 12373                                  
 12374                                  ; 16/10/2022
 12375                                  
 12376                                  ; ---------------------------------------------------------------------------
 12377                                  ;	ChangeLineChk
 12378                                  ; ---------------------------------------------------------------------------
 12379                                  ;
 12380                                  ; when the user calls get/set media id call before dos establishes the media
 12381                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12382                                  ; lost.	this routine will check the change line activity and will save the
 12383                                  ; history in the flags.
 12384                                  ;
 12385                                  ; FUNCTION: check the change line error activity
 12386                                  ;
 12387                                  ; INPUT :  ES:di -> bds table.
 12388                                  ;
 12389                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12390                                  ;
 12391                                  ; SUBROUTINES TO BE CALLED:
 12392                                  ;	Set_Changed_DL
 12393                                  ;
 12394                                  ; ---------------------------------------------------------------------------
 12395                                  
 12396                                  ChangeLineChk:	
 12397 000011EC 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12398 000011F0 08D2                    		or	dl, dl		; Fixed	disk?
 12399 000011F2 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12400                                  		; 12/12/2022
 12401 000011F4 26F6452304              		test	byte [es:di+23h], 4
 12402                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12403                                  					; return_fake_bpb
 12404 000011F9 751A                    		jnz	short ChangeLnChkRet
 12405 000011FB 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12406 00001200 7513                    		jnz	short ChangeLnChkRet
 12407 00001202 E8DE06                  		call	haschange	; This drive support change line?
 12408 00001205 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12409                                  
 12410                                  		; Execute the rom disk interrupt to check changeline activity.
 12411                                  
 12412 00001207 B416                    		mov	ah, 16h
 12413 00001209 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12414                                  					; DL = drive to	check
 12415                                  					; Return: AH = disk change status
 12416 0000120B 7308                    		jnb	short ChangeLnChkRet
 12417 0000120D 53                      		push	bx
 12418 0000120E BB4000                  		mov	bx, 40h		; fchanged
 12419                                  					; Update flag in BDS for this
 12420                                  					; physical drive
 12421 00001211 E8A806                  		call	set_changed_dl
 12422 00001214 5B                      		pop	bx
 12423                                  ChangeLnChkRet:				
 12424 00001215 C3                      		retn
 12425                                  
 12426                                  ; ---------------------------------------------------------------------------
 12427                                  
 12428                                  ; 16/10/2022
 12429                                  
 12430                                  ; ==========================================================================
 12431                                  ;	GetAccessFlag
 12432                                  ; ==========================================================================
 12433                                  ;
 12434                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12435                                  ;
 12436                                  ; INPUT :
 12437                                  ;	    ES:di -> bds table
 12438                                  ;
 12439                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12440                                  ;						 = 1 if disk i/o allowed.
 12441                                  ; ==========================================================================
 12442                                  
 12443                                  		; 19/10/2022
 12444                                  GetAccessFlag:				
 12445 00001216 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12446 0000121A C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12447                                  		;mov	al, 0		; Assume result	is unformatted
 12448                                  		; 10/12/2022
 12449 0000121D 28C0                    		sub	al, al
 12450                                  		; 10/12/2022
 12451 0000121F 26F6452402              		test	byte [es:di+36], 02h
 12452                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12453                                  					; unformatted_media
 12454 00001224 7502                    		jnz	short GafDone	; Done if unformatted
 12455 00001226 FEC0                    		inc	al		; Return true for formatted
 12456                                  
 12457                                  GafDone:				
 12458 00001228 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12459 0000122B C3                      		retn
 12460                                  ; ---------------------------------------------------------------------------
 12461                                  
 12462                                  ; 16/10/2022
 12463                                  
 12464                                  ; ==========================================================================
 12465                                  ;	SetAccessFlag
 12466                                  ; ==========================================================================
 12467                                  ;
 12468                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12469                                  ;
 12470                                  ; input :
 12471                                  ;	    ES:di -> bds table
 12472                                  ;
 12473                                  ; output:   unformtted_media bit modified according to the user request
 12474                                  ; ==========================================================================
 12475                                  
 12476                                  		; 19/10/2022
 12477                                  SetAccessFlag:				
 12478 0000122C C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12479 00001230 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12480                                  		; 10/12/2022
 12481 00001233 26806524FD              		and	byte [es:di+36], 0FDh
 12482                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12483                                  					; ~unformatted_media
 12484 00001238 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12485 0000123C 7505                    		jnz	short saf_Done
 12486                                  		; 10/12/2022
 12487 0000123E 26804D2402              		or	byte [es:di+36], 02h
 12488                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12489                                  					; unformatted_media
 12490                                  saf_Done:				
 12491 00001243 C3                      		retn
 12492                                  ; ---------------------------------------------------------------------------
 12493                                  
 12494                                  ; 16/10/2022
 12495                                  
 12496                                  ; ==========================================================================
 12497                                  ; Ioctl_Support_Query
 12498                                  ; ==========================================================================
 12499                                  ;
 12500                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12501                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12502                                  ; device attributes specifies if this function is supported.
 12503                                  ;
 12504                                  ; ==========================================================================
 12505                                  
 12506                                  		; 19/10/2022
 12507                                  ioctl_support_query:
 12508 00001244 06                      		push	es
 12509 00001245 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12510 00001249 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12511                                  					; AL ==	Major, AH == Minor
 12512 0000124D 3C08                    		cmp	al, 8		; IOC_DC
 12513                                  					; See if major code is 8
 12514 0000124F 7513                    		jnz	short nosupport
 12515 00001251 0E                      		push	cs
 12516 00001252 07                      		pop	es
 12517 00001253 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12518                                  		; 10/12/2022
 12519 00001256 BF[370C]                		mov	di, IOC_DC_Table
 12520                                  		;mov	di, 0C60h	; IOC_DC_Table
 12521                                  					; at 2C7h:0C60h	= 70h:31D0h
 12522 00001259 86C4                    		xchg	al, ah		; Put minor code in AL
 12523 0000125B F2AE                    		repne scasb		; Scan for minor code in AL
 12524 0000125D 7505                    		jnz	short nosupport	; it was not found
 12525 0000125F B80001                  		mov	ax, 100h
 12526                                  		; 10/12/2022
 12527                                  		; (jump to ioctlsupexit is not required)
 12528                                  		;jmp	short $+2	; ioctlsupexit
 12529                                  					; Signal ioctl is supported
 12530                                  		;;jmp	short ioctlsupexit
 12531                                  ; ---------------------------------------------------------------------------
 12532                                  ioctlsupexit:				
 12533 00001262 07                      		pop	es
 12534                                  		; 10/12/2022
 12535                                  		; cf = 0
 12536                                  		;clc
 12537 00001263 C3                      		retn
 12538                                  ; ---------------------------------------------------------------------------
 12539                                  nosupport:				
 12540 00001264 07                      		pop	es
 12541 00001265 E96DEE                  		jmp	bc_cmderr
 12542                                  ; ---------------------------------------------------------------------------
 12543                                  
 12544                                  ; 16/10/2022
 12545                                  
 12546                                  ; ==========================================================================
 12547                                  ;	GetMediaSenseStatus
 12548                                  ; ==========================================================================
 12549                                  ;
 12550                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12551                                  ;	    diskette drive and whether the media is the default type
 12552                                  ;	    for that drive. (default type means the max size for that
 12553                                  ;	    drive)
 12554                                  ;
 12555                                  ; INPUT :   ES:DI -> BDS table
 12556                                  ; OUTPUT:   If carry clear
 12557                                  ;	    DS:BX -> Updated IOCtlPacket
 12558                                  ;
 12559                                  ;			 Special Function at offset 0:
 12560                                  ;				0	- Media detected is not default type
 12561                                  ;				1	- Media detected is default type
 12562                                  ;
 12563                                  ;			 Device Type at offset 1:
 12564                                  ;				2       - 720K 3.5" 80 tracks
 12565                                  ;				7	- 1.44M 3.5" 80 tracks
 12566                                  ;				9	- 2.88M 3.5" 80 tracks
 12567                                  ;
 12568                                  ; Error Codes returned in AX if carry set:
 12569                                  ;
 12570                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12571                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12572                                  ;				  the media is really unkown, any error
 12573                                  ;				  other than "media not present"
 12574                                  ; 
 12575                                  ; ==========================================================================
 12576                                  
 12577                                  		; 19/10/2022
 12578                                  SenseMediaType:				
 12579 00001268 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12580 0000126C C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12581                                  		; 10/10/2022
 12582                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12583 0000126F 31D2                    		xor	dx, dx
 12584 00001271 8917                    		mov	[bx], dx ; 0
 12585                                  		;
 12586 00001273 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12587                                  					; Get int 13h drive number from	BDS
 12588                                  		; 10/12/2022
 12589                                  		;xor	dh, dh		; DX = physical	drive number
 12590 00001277 B420                    		mov	ah, 20h		; Get Media Type function
 12591                                  					; If no	carry media type in AL
 12592 00001279 CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12593 0000127B 7216                    		jb	short MediaSenseEr ; error code	in AH
 12594 0000127D FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12595                                  DetermineMediaType:			
 12596 0000127F FEC8                    		dec	al
 12597 00001281 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12598 00001283 740A                    		jz	short GotMediaType
 12599 00001285 0404                    		add	al, 4
 12600 00001287 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12601 00001289 7404                    		jz	short GotMediaType
 12602 0000128B 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12603 0000128D 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12604                                  GotMediaType:				
 12605 0000128F 884701                  		mov	[bx+1],	al	; Save the return value
 12606                                  		; 10/12/2022
 12607                                  		; cf = 0
 12608                                  		;clc			; Signal success
 12609 00001292 C3                      		retn
 12610                                  ; ---------------------------------------------------------------------------
 12611                                  
 12612                                  MediaSenseEr:				
 12613 00001293 80FC32                  		cmp	ah, 32h		; See if not default media error
 12614 00001296 74E7                    		jz	short DetermineMediaType ; Not really an error
 12615 00001298 B002                    		mov	al, 2		; Now assume drive not ready
 12616 0000129A 80FC31                  		cmp	ah, 31h		; See if media was present
 12617 0000129D 7402                    		jz	short SenseErrExit ; Return drive not ready
 12618                                  UnknownMediaType:			
 12619 0000129F B007                    		mov	al, 7		; Just don't know the media type
 12620                                  SenseErrExit:				
 12621 000012A1 B481                    		mov	ah, 81h		; Signal error return
 12622 000012A3 F9                      		stc
 12623 000012A4 C3                      		retn
 12624                                  
 12625                                  ; ---------------------------------------------------------------------------
 12626                                  		; 10/12/2022
 12627                                  		;db    0
 12628                                  ; ---------------------------------------------------------------------------
 12629                                  
 12630                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12631                                  
 12632                                  ;-----------------------------------------------------------------------------
 12633                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12634                                  ;-----------------------------------------------------------------------------
 12635                                  ; 16/03/2019 - Retro DOS v4.0
 12636                                  
 12637                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12638                                  ;	after booting. this allows testing and implementation of custom int_13
 12639                                  ;	handlers, without giving up ms-dos error recovery
 12640                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12641                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12642                                  ;	exit:	orig13	== address of new int_13 handler
 12643                                  ;		ds:dx	== old orig13 value
 12644                                  ;		es:bx	== old old13  value
 12645                                  ;
 12646                                  ; int 2f handler for external block drivers to communicate with the internal
 12647                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12648                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12649                                  ; dsk_entry, the entry point for all disk requests.
 12650                                  ;
 12651                                  ; on exit from this driver, we will return to the external driver
 12652                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12653                                  ; this scheme allows us to have a small external device driver, and makes
 12654                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12655                                  ; since we only need to make changes in one place (most of the time).
 12656                                  ;
 12657                                  ;   ax=800h - check for installed handler - reserved
 12658                                  ;   ax=801h - install the bds into the linked list
 12659                                  ;   ax=802h - dos request
 12660                                  ;   ax=803h - return bds table starting pointer in ds:di
 12661                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12662                                  ;	    problem. bds table is going to be used to get head/sector
 12663                                  ;	    informations without calling generic ioctl get device parm call.)
 12664                                  
 12665                                  ;BIOSSEGMENT equ 70h
 12666                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12667                                  
 12668                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12669                                  
 12670                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12671 000012A5 80FC13                  		cmp	ah, 13h
 12672 000012A8 7413                    		jz	short int2f_replace_int13
 12673 000012AA 80FC08                  		cmp	ah, 8
 12674 000012AD 7431                    		jz	short mine
 12675                                  
 12676                                  ; Check for WIN386 startup and return the BIOS instance data
 12677                                  
 12678 000012AF 80FC16                  		cmp	ah, 16h		; MultWin386
 12679 000012B2 746C                    		jz	short win386call
 12680 000012B4 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12681 000012B7 7503                    		jnz	short i2f_handler_iret
 12682 000012B9 E99700                  		jmp	handle_multmult
 12683                                  ; ---------------------------------------------------------------------------
 12684                                  
 12685                                  i2f_handler_iret:			
 12686 000012BC CF                      		iret
 12687                                  ; ---------------------------------------------------------------------------
 12688                                  
 12689                                  int2f_replace_int13:			
 12690 000012BD 50                      		push	ax	; free up a register for caller's ds
 12691 000012BE 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12692                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12693                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12694                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12695 000012C0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12696                                  		; 19/10/2022
 12697                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12698                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12699                                  		;push	word ptr ds:Old13	; return them to caller
 12700                                  		;push	word ptr ds:Old13+2
 12701                                  		
 12702                                  		; 02/09/2023 (PCDOS 7.1)
 12703                                  		;push	word [Orig13]
 12704 000012C5 FF36[B600]              		push	word [Orig13+2]
 12705                                  		;push	word [Old13]
 12706 000012C9 FF36[0801]              		push	word [Old13+2]
 12707                                  
 12708                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12709                                  		;mov	word ptr ds:Orig13+2, ax
 12710                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12711                                  		;mov	word ptr ds:Old13+2, es
 12712                                  		
 12713                                  		;mov	[Orig13], dx
 12714                                  		; 02/09/2023
 12715 000012CD 8716[B400]              		xchg	dx, [Orig13]
 12716 000012D1 A3[B600]                		mov	[Orig13+2], ax
 12717                                  		;mov	[Old13], bx
 12718                                  		; 02/09/2023
 12719 000012D4 871E[0601]              		xchg	bx, [Old13]
 12720 000012D8 8C06[0801]              		mov	[Old13+2], es
 12721                                  
 12722 000012DC 07                      		pop	es			; es:bx := old old13 vector
 12723                                  		; 02/09/2023
 12724                                  		;pop	bx
 12725 000012DD 1F                      		pop	ds			; ds:dx := old orig13 vector
 12726                                  		;pop	dx ; 02/09/2023
 12727 000012DE 58                      		pop	ax
 12728                                  i2f_iret:
 12729 000012DF CF                      		iret
 12730                                  ; ---------------------------------------------------------------------------
 12731                                  
 12732                                  mine:					
 12733 000012E0 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12734 000012E2 73FB                    		jnb	short i2f_iret
 12735 000012E4 08C0                    		or	al, al			; a get installed state request?
 12736 000012E6 7503                    		jnz	short disp_func
 12737 000012E8 B0FF                    		mov	al, 0FFh
 12738                                  		;jmp	short i2f_iret
 12739                                  		; 02/09/2023
 12740 000012EA CF                      		iret
 12741                                  ; ---------------------------------------------------------------------------
 12742                                  
 12743                                  disp_func:				
 12744 000012EB 3C01                    		cmp	al, 1			; request for installing bds?
 12745 000012ED 7418                    		jz	short do_subfun_01
 12746 000012EF 3C03                    		cmp	al, 3			; get bds vector?
 12747 000012F1 7423                    		jz	short do_get_bds_vector
 12748                                  
 12749                                  ; set up pointer to request packet
 12750                                  
 12751 000012F3 1E                      		push	ds
 12752 000012F4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12753                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12754                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12755                                  		; 19/10/2022
 12756                                  		;mov	word ptr ds:ptrsav, bx
 12757                                  		;mov	word ptr ds:ptrsav+2, es
 12758 000012F9 891E[1200]              		mov	[ptrsav], bx
 12759 000012FD 8C06[1400]              		mov	[ptrsav+2], es
 12760 00001301 1F                      		pop	ds
 12761                                  		;jmp	far ptr	i2f_dskentry
 12762                                  		; 17/10/2022
 12763                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12764 00001302 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12765                                  					; NOTE: jump to a FAR function, not an
 12766                                  					;  IRET type function. Callers of
 12767                                  					;  this int2f subfunction will have
 12768                                  					;  to be careful to do a popf
 12769                                  
 12770                                  ; ---------------------------------------------------------------------------
 12771                                  
 12772                                  do_subfun_01:
 12773 00001307 06                      		push	es
 12774 00001308 1E                      		push	ds
 12775 00001309 1E                      		push	ds
 12776 0000130A 07                      		pop	es
 12777                                  		; 17/10/2022
 12778 0000130B 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12779                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12780                                  					; point	ds: -> Bios_Data
 12781 00001310 E8BC03                  		call	install_bds
 12782 00001313 1F                      		pop	ds
 12783 00001314 07                      		pop	es
 12784                                  		;jmp	short i2f_iret
 12785                                  		; 02/09/2023
 12786 00001315 CF                      		iret
 12787                                  ; ---------------------------------------------------------------------------
 12788                                  
 12789                                  do_get_bds_vector:
 12790                                  		; 17/10/2022
 12791 00001316 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12792                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12793 0000131B C53E[1901]              		lds	di, [start_bds]
 12794                                  		;lds	di, ds:start_bds
 12795                                  ;ii2f_iret:	; 10/12/2022
 12796                                  		;jmp	short i2f_iret
 12797                                  		; 02/09/2023
 12798 0000131F CF                      		iret
 12799                                  ; ---------------------------------------------------------------------------
 12800                                  
 12801                                  ; 17/10/2022
 12802                                  ; 16/10/2022
 12803                                  
 12804                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12805                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12806                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12807                                  
 12808                                  win386call:				
 12809 00001320 1E                      		push	ds
 12810 00001321 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12811                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12812                                  					; at 2C7h:30h =	70h:25A0h
 12813 00001326 3C05                    		cmp	al, 5		; Win386_Init
 12814                                  					; is it	win386 initializing?
 12815 00001328 7410                    		jz	short Win386Init
 12816 0000132A 3C06                    		cmp	al, 6		; Win386_Exit
 12817                                  					; is it	win386 exiting?
 12818 0000132C 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12819                                  		; 12/12/2022
 12820 0000132E F6C201                  		test	dl, 1
 12821                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12822 00001331 751E                    		jnz	short win_iret	; if not win386, then continue
 12823                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12824 00001333 8026[CE08]00            		and	byte [IsWin386], 0 
 12825 00001338 EB17                    		jmp	short win_iret
 12826                                  ; ---------------------------------------------------------------------------
 12827                                  
 12828                                  Win386Init:	
 12829                                  		; 12/12/2022
 12830 0000133A F6C201                  		test	dl, 1			
 12831                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12832 0000133D 7512                    		jnz	short win_iret	; if not win386, then continue
 12833                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12834 0000133F 800E[CE08]01            		or	byte [IsWin386], 1
 12835                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12836                                  		;mov	word ptr ds:SI_Next+2, es
 12837 00001344 891E[9C08]              		mov	[SI_Next], bx
 12838 00001348 8C06[9E08]              		mov	[SI_Next+2], es
 12839                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12840 0000134C BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12841 0000134F 1E                      		push	ds
 12842 00001350 07                      		pop	es
 12843                                  win_iret:				
 12844 00001351 1F                      		pop	ds
 12845                                  ii2f_iret:	; 10/12/2022
 12846                                  		;jmp	short i2f_iret	; return back up the chain
 12847                                  		; 02/09/2023
 12848 00001352 CF                      		iret
 12849                                  ; ---------------------------------------------------------------------------
 12850                                  
 12851                                  handle_multmult:			
 12852 00001353 3C01                    		cmp	al, 1
 12853 00001355 7514                    		jnz	short try_2
 12854 00001357 1E                      		push	ds
 12855 00001358 E84500                  		call	HMAPtr		; get offset of free HMA
 12856                                  		; 10/12/2022
 12857                                  		;xor	bx, bx
 12858                                  		;dec	bx
 12859 0000135B BBFFFF                  		mov	bx, 0FFFFh
 12860 0000135E 8EC3                    		mov	es, bx		; seg of HMA
 12861 00001360 89FB                    		mov	bx, di
 12862 00001362 F7D3                    		not	bx
 12863 00001364 09DB                    		or	bx, bx
 12864 00001366 7401                    		jz	short try_1
 12865 00001368 43                      		inc	bx
 12866                                  try_1:
 12867 00001369 1F                      		pop	ds
 12868                                  		;jmp	short ii2f_iret
 12869                                  		; 02/09/2023
 12870 0000136A CF                      		iret
 12871                                  ; ---------------------------------------------------------------------------
 12872                                  
 12873                                  try_2:					
 12874 0000136B 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12875 0000136D 7530                    		jnz	short try_3
 12876 0000136F 1E                      		push	ds
 12877                                  		; 10/12/2022
 12878                                  		;xor	di, di
 12879                                  		;dec	di
 12880 00001370 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12881 00001373 8EC7                    		mov	es, di
 12882 00001375 E82800                  		call	HMAPtr		; get offset of free HMA
 12883 00001378 83FFFF                  		cmp	di, 0FFFFh
 12884 0000137B 7421                    		jz	short InsuffHMA
 12885 0000137D F7DF                    		neg	di		; free space in HMA
 12886 0000137F 39FB                    		cmp	bx, di
 12887 00001381 7605                    		jbe	short try_4
 12888                                  		; 10/12/2022
 12889                                  		;sub	di, di
 12890                                  		;dec	di
 12891 00001383 BFFFFF                  		mov	di, 0FFFFh
 12892                                  		;jmp	short InsuffHMA
 12893                                  		; 02/09/2023
 12894 00001386 1F                      		pop	ds
 12895 00001387 CF                      		iret
 12896                                  ; ---------------------------------------------------------------------------
 12897                                  
 12898                                  try_4:					
 12899                                  		;mov	di, ds:FreeHMAPtr
 12900 00001388 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12901 0000138C 83C30F                  		add	bx, 15
 12902                                  		;and	bx, 0FFF0h
 12903                                  		; 10/12/2022
 12904 0000138F 80E3F0                  		and	bl, 0F0h
 12905                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12906 00001392 011E[F508]              		add	[FreeHMAPtr], bx
 12907 00001396 7506                    		jnz	short InsuffHMA
 12908 00001398 C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12909                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12910                                  					; no more HMA if we have wrapped
 12911                                  InsuffHMA:
 12912 0000139E 1F                      		pop	ds
 12913                                  		; 10/12/2022
 12914                                  try_3:		
 12915                                  		;jmp	short ii2f_iret
 12916                                  		; 02/09/2023
 12917 0000139F CF                      		iret
 12918                                  ; ---------------------------------------------------------------------------
 12919                                  
 12920                                  		; 10/12/2022
 12921                                  ;try_3:					
 12922                                  		;jmp	ii2f_iret
 12923                                  
 12924                                  ; =============== S U B	R O U T	I N E =======================================
 12925                                  
 12926                                  ; 16/10/2022
 12927                                  
 12928                                  ;--------------------------------------------------------------------------
 12929                                  ;
 12930                                  ; procedure : HMAPtr
 12931                                  ;
 12932                                  ;		Gets the offset of the free HMA area ( with respect to
 12933                                  ;							seg ffff )
 12934                                  ;		If DOS has not moved high, tries to move DOS high.
 12935                                  ;		In the course of doing this, it will allocate all the HMA
 12936                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12937                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12938                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12939                                  ;
 12940                                  ;	RETURNS : offset of free HMA in DI
 12941                                  ;		  BIOS_DATA, seg in DS
 12942                                  ;
 12943                                  ;--------------------------------------------------------------------------
 12944                                  
 12945                                  		; 17/10/2022
 12946                                  HMAPtr:
 12947 000013A0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12948                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12949 000013A5 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12950                                  		;mov	di, ds:FreeHMAPtr
 12951 000013A9 83FFFF                  		cmp	di, 0FFFFh
 12952 000013AC 750F                    		jnz	short HMAPtr_retn
 12953 000013AE 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12954                                  		;cmp	ds:SysinitPresent, 0
 12955 000013B3 7408                    		jz	short HMAPtr_retn
 12956 000013B5 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12957                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12958 000013B9 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12959                                  		;mov	di, ds:FreeHMAPtr
 12960                                  HMAPtr_retn:				
 12961 000013BD C3                      		retn
 12962                                  
 12963                                  ; =============== S U B	R O U T	I N E =======================================
 12964                                  
 12965                                  ; 16/10/2022
 12966                                  
 12967                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12968                                  ; but go ahead and update direction flag, si, & di
 12969                                  
 12970                                  move_sector:
 12971                                  
 12972                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12973                                  ; any segment to be a fault. Theoretically, this could be handled
 12974                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12975                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12976                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12977                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12978                                  ; mode. Their fault handler was only designed to deal with one
 12979                                  ; special case which occurred in a magazine benchmark, but didn't
 12980                                  ; handle the general case worth beans.
 12981                                  ;
 12982                                  ; Simply changing this code to do a byte loop would work okay but
 12983                                  ; would involve a general case performance hit. Therefore, we'll
 12984                                  ; check for either source or destination offsets being within one
 12985                                  ; sector of the end of their segments and only in that case fall
 12986                                  ; back to a byte move.
 12987                                  
 12988 000013BE FC                      		cld
 12989 000013BF 51                      		push	cx
 12990 000013C0 B90001                  		mov	cx, 256
 12991 000013C3 81FE00FE                		cmp	si, 0FE00h
 12992 000013C7 770A                    		ja	short movsec_bytes
 12993 000013C9 81FF00FE                		cmp	di, 0FE00h
 12994 000013CD 7704                    		ja	short movsec_bytes
 12995 000013CF F3A5                    		rep movsw
 12996 000013D1 59                      		pop	cx
 12997 000013D2 C3                      		retn
 12998                                  ; ---------------------------------------------------------------------------
 12999                                  
 13000                                  movsec_bytes:				
 13001 000013D3 D1E1                    		shl	cx, 1
 13002 000013D5 F3A4                    		rep movsb
 13003 000013D7 59                      		pop	cx
 13004 000013D8 C3                      		retn
 13005                                  
 13006                                  ; =============== S U B	R O U T	I N E =======================================
 13007                                  
 13008                                  ; 16/10/2022
 13009                                  
 13010                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 13011                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 13012                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 13013                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 13014                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 13015                                  ; but we break down a request when we get an ecc or dma error into several
 13016                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 13017                                  ; number of sectors on a track on the medium, and the request would fail.
 13018                                  ;
 13019                                  ; input conditions:
 13020                                  ;	all registers set up for an int 13 request.
 13021                                  ;
 13022                                  ; output:
 13023                                  ;	dh - contains starting head number for request
 13024                                  ;	cx - contains starting sector and cylinder numbers
 13025                                  ;	(the above may or may not have been changed, and are 0-based)
 13026                                  ;	all other registers preserved.
 13027                                  
 13028                                  check_wrap:	
 13029 000013D9 50                      		push	ax
 13030 000013DA 53                      		push	bx
 13031 000013DB 06                      		push	es
 13032 000013DC 57                      		push	di
 13033 000013DD E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 13034 000013E0 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 13035                                  		; 12/12/2022
 13036 000013E2 26F6452301              		test	byte [es:di+23h], 1
 13037                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13038 000013E7 7457                    		jz	short no_wrap	; no wrapping for removable media
 13039 000013E9 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13040 000013ED 89C8                    		mov	ax, cx
 13041 000013EF 83E03F                  		and	ax, 3Fh		; extract sector number
 13042 000013F2 39D8                    		cmp	ax, bx		; are we going to wrap?
 13043 000013F4 764A                    		jbe	short no_wrap
 13044 000013F6 F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13045                                  
 13046                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13047                                  ; last sector on that track.
 13048                                  
 13049 000013F8 08E4                    		or	ah, ah
 13050 000013FA 7503                    		jnz	short not_on_bound
 13051                                  		; 18/12/2022
 13052 000013FC 48                      		dec	ax ; *
 13053 000013FD 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13054                                  					; if on	boundary
 13055                                  		;dec	al ; *		; also decrement # of head wraps
 13056                                  not_on_bound:				
 13057 000013FF 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13058 00001402 08E1                    		or	cl, ah		; or in	new sector #
 13059 00001404 30E4                    		xor	ah, ah		; ax = # of head wraps
 13060 00001406 40                      		inc	ax
 13061 00001407 00F0                    		add	al, dh		; add in starting head #
 13062 00001409 80D400                  		adc	ah, 0		; catch	any carry
 13063                                  		; 02/09/2023
 13064 0000140C 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13065 00001410 39D8                    		cmp	ax, bx
 13066                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13067                                  					; are we going to wrap around a	head?
 13068 00001412 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13069 00001414 52                      		push	dx		; preserve drive number and head number
 13070 00001415 31D2                    		xor	dx, dx
 13071                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13072 00001417 F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13073                                  
 13074                                  ; careful here! if new head # is 0, then we are on the last head.
 13075                                  
 13076 00001419 09D2                    		or	dx, dx
 13077 0000141B 7507                    		jnz	short no_head_bound
 13078 0000141D 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13079                                  
 13080                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13081                                  
 13082 0000141F 09C0                    		or	ax, ax
 13083 00001421 7401                    		jz	short no_head_bound
 13084 00001423 48                      		dec	ax		; reduce number	of cylinder wraps
 13085                                  no_head_bound:				
 13086 00001424 88D7                    		mov	bh, dl		; bh has new head number
 13087 00001426 5A                      		pop	dx		; restore drive number and head number
 13088 00001427 FECF                    		dec	bh		; get it 0-based
 13089 00001429 88FE                    		mov	dh, bh		; set up new head number in dh
 13090 0000142B 88CF                    		mov	bh, cl
 13091 0000142D 80E73F                  		and	bh, 3Fh		; preserve sector number
 13092 00001430 B306                    		mov	bl, 6
 13093 00001432 86CB                    		xchg	cl, bl
 13094 00001434 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13095 00001436 00C5                    		add	ch, al		; add in cylinder wrap
 13096 00001438 10E3                    		adc	bl, ah		; add in high byte
 13097 0000143A D2E3                    		shl	bl, cl		; move up to ms	end
 13098 0000143C 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13099 0000143E 08F9                    		or	cl, bh		; or in	sector number
 13100                                  no_wrap:				
 13101 00001440 F8                      		clc
 13102 00001441 5F                      		pop	di
 13103 00001442 07                      		pop	es
 13104 00001443 5B                      		pop	bx
 13105 00001444 58                      		pop	ax
 13106 00001445 C3                      		retn
 13107                                  ; ---------------------------------------------------------------------------
 13108                                  
 13109                                  no_wrap_head:				
 13110 00001446 88C6                    		mov	dh, al		; do not lose new head number
 13111 00001448 FECE                    		dec	dh		; get it 0-based
 13112 0000144A EBF4                    		jmp	short no_wrap
 13113                                  
 13114                                  ; =============== S U B	R O U T	I N E =======================================
 13115                                  
 13116                                  ; 16/10/2022
 13117                                  
 13118                                  ; this is a special version of the bds lookup code which is
 13119                                  ; based on physical drives rather than the usual logical drives
 13120                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13121                                  ; otherwise carry is clear
 13122                                  ;
 13123                                  ; guaranteed to trash no registers except es:di
 13124                                  
 13125                                  		; 19/10/2022
 13126                                  find_bds:	
 13127 0000144C C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13128                                  fbds_1:					
 13129 00001450 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13130 00001454 7409                    		jz	short fdbs_2
 13131 00001456 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13132                                  					; go to next bds
 13133 00001459 83FFFF                  		cmp	di, 0FFFFh
 13134 0000145C 75F2                    		jnz	short fbds_1
 13135 0000145E F9                      		stc
 13136                                  fdbs_2:					
 13137 0000145F C3                      		retn
 13138                                  
 13139                                  ; =============== S U B	R O U T	I N E =======================================
 13140                                  
 13141                                  ; 16/10/2022
 13142                                  		; 17/10/2022
 13143                                  doint:
 13144                                  		; 10/12/2022
 13145 00001460 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13146                                  					; get physical drive number
 13147                                  		; 19/10/2022 - Temporary !
 13148                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13149                                  		
 13150 00001463 30E4                    		xor	ah, ah
 13151 00001465 08C0                    		or	al, al
 13152 00001467 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13153                                  		; 10/12/2022
 13154 00001469 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13155                                  					; get request code
 13156                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13157 0000146C FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13158                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13159 0000146F 9D                      		popf
 13160                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13161                                  		; 17/10/2022
 13162 00001470 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13163                                  		;;call	call_orig13	; call far 70h:797h
 13164                                  					; call far KERNEL_SEGMENT:call_orig13
 13165 00001475 9C                      		pushf
 13166                                  		; 10/12/2022
 13167 00001476 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13168                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13169                                  dointdone:				
 13170 00001479 C3                      		retn
 13171                                  
 13172                                  ;----------------------------------------------------------------------------
 13173                                  
 13174                                  ; 16/10/2022
 13175                                  
 13176                                  ; this is the true int 13 handler. we parse the request to see if there is
 13177                                  ; a dma violation. if so, depending on the function, we:
 13178                                  ;   read/write break the request into three pieces and move the middle one
 13179                                  ;	       into our internal buffer.
 13180                                  ;
 13181                                  ;   format     copy the format table into the buffer
 13182                                  ;   verify     point the transfer address into the buffer
 13183                                  ;
 13184                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13185                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13186                                  ; the offending sector into the buffer below and do the i/o from there.
 13187                                  
 13188                                  ;struc INT13FRAME
 13189                                  ;.oldbp: resw
 13190                                  ;.oldax: resw 
 13191                                  ;.oldbx: resw
 13192                                  ;.oldcx: resw
 13193                                  ;.olddx: resw
 13194                                  ;.oldds: resw	; now we save caller's ds, too
 13195                                  ;.olddd: resd
 13196                                  ;.oldf:	resw
 13197                                  ;end struc
 13198                                  
 13199                                  ;----------------------------------------------------------------------------
 13200                                  
 13201                                  ;   entry conditions:
 13202                                  ;	ah = function
 13203                                  ;	al = number of sectors
 13204                                  ;	es:bx = dma address
 13205                                  ;	cx = packed track and sector
 13206                                  ;	dx = head and drive
 13207                                  ;   output conditions:
 13208                                  ;	no dma violation.
 13209                                  
 13210                                  ;	use extreme caution when working with this code. In general,
 13211                                  ;	  all registers are hot at all times.
 13212                                  ;
 13213                                  ;	question:  does this code handle cases where dma errors
 13214                                  ;	  occur during ecc retries, and where ecc errors occur during
 13215                                  ;	  dma breakdowns???? Hmmmmm.
 13216                                  
 13217                                  ;----------------------------------------------------------------------------
 13218                                  
 13219                                  ; ---------------------------------------------------------------------------
 13220                                  
 13221 0000147A 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13222                                  
 13223                                  ; 17/10/2022
 13224                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13225                                  ; 09/12/2022
 13226                                  DTYPEARRAY equ dtype_array
 13227                                  
 13228                                  ; ---------------------------------------------------------------------------
 13229                                  
 13230                                  ; stick some special stuff out of mainline
 13231                                  
 13232                                  ; we know we're doing a format command. if we have changeline
 13233                                  ; support, then flag some special changed stuff and set changed
 13234                                  ; by format bit for all logical drives using this physical drive
 13235                                  
 13236                                  format_special_stuff:			
 13237 0000147E 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13238 00001483 7459                    		jz	short format_special_stuff_done ; brif not
 13239 00001485 53                      		push	bx
 13240 00001486 BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13241 00001489 E83004                  		call	set_changed_dl	; indicate that media changed by format
 13242 0000148C 5B                      		pop	bx
 13243 0000148D EB4F                    		jmp	short format_special_stuff_done
 13244                                  ; ---------------------------------------------------------------------------
 13245                                  
 13246                                  ; 16/10/2022
 13247                                  
 13248                                  ; we know we've got ec35's on the system. Now see if we're doing
 13249                                  ; a floppy. If so, create a mask and see if this particular
 13250                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13251                                  
 13252                                  		; 19/10/2022
 13253                                  ec35_special_stuff:			
 13254 0000148F 84D2                    		test	dl, dl		; floppy or hard disk?
 13255 00001491 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13256 00001493 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13257 00001494 51                      		push	cx
 13258 00001495 88D1                    		mov	cl, dl		; turn drive number into bit map
 13259 00001497 B001                    		mov	al, 1		; assume drive 0
 13260 00001499 D2E0                    		shl	al, cl		; shift	over correct number of times
 13261 0000149B 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13262 0000149F 59                      		pop	cx
 13263 000014A0 58                      		pop	ax
 13264 000014A1 7442                    		jz	short ec35_special_stuff_done
 13265                                  					; done if this floppy is not an	ec35
 13266 000014A3 53                      		push	bx		; free up a far	pointer	(es:bx)
 13267 000014A4 06                      		push	es
 13268                                  		; 17/10/2022
 13269 000014A5 2EC41E[7A14]            		les	bx, [cs:DTYPEARRAY]
 13270                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13271                                  					; 0070h:3A65h =	2C7h:14F5h
 13272 000014AA 00D3                    		add	bl, dl
 13273 000014AC 80D700                  		adc	bh, 0		; find entry for this drive
 13274 000014AF 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13275                                  					; (360k	disk in	360k drive,
 13276                                  					; no double-stepping, 250 kbs transfer rate)
 13277 000014B3 07                      		pop	es
 13278 000014B4 5B                      		pop	bx
 13279 000014B5 EB2E                    		jmp	short ec35_special_stuff_done
 13280                                  ; ---------------------------------------------------------------------------
 13281                                  
 13282                                  ; 16/10/2022
 13283                                  
 13284                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13285                                  ; this function does not reset the common buses after the execution.
 13286                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13287                                  ; will issue ah=1 (read status) call to reset the buses.
 13288                                  
 13289                                  ps2_special_stuff:			
 13290 000014B7 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13291                                  					; read driver parm ?
 13292 000014BC 7407                    		jz	short ps2_30_problem
 13293 000014BE 803E[1E00]15            		cmp	byte [prevoper], 15h
 13294                                  					; apparently function 15h fails, too
 13295 000014C3 752D                    		jnz	short ps2_special_stuff_done
 13296                                  ps2_30_problem:				
 13297 000014C5 50                      		push	ax
 13298 000014C6 B401                    		mov	ah, 1
 13299                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13300                                  		; 17/10/2022
 13301 000014C8 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13302                                  		;call	call_orig13	; call far 70:797h
 13303                                  					; call far KERNEL_SEGMENT:call_orig13
 13304 000014CD 58                      		pop	ax
 13305 000014CE EB22                    		jmp	short ps2_special_stuff_done
 13306                                  ; ---------------------------------------------------------------------------
 13307                                  
 13308                                  ; 17/10/2022
 13309                                  ; 16/10/2022
 13310                                  
 13311                                  ; here is the actual int13 handler
 13312                                  
 13313                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13314                                  
 13315                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13316                                  ; vectoring up here from Bios_Data
 13317                                  
 13318                                  		; 19/10/2022
 13319 000014D0 1E                      		push	ds		; save caller's ds register first thing
 13320                                  		;;mov	ds, word [cs:0030h]
 13321                                  					; and set up our own ds -> Bios_Data
 13322 000014D1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13323                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13324                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13325                                  
 13326                                  ; let the operation proceed. if there is a dma violation, then we do things
 13327                                  
 13328 000014D6 A3[1E00]                		mov	[prevoper], ax	; save request
 13329 000014D9 80FC05                  		cmp	ah, 5		; romformat
 13330 000014DC 74A0                    		jz	short format_special_stuff
 13331                                  					; go do special stuff for format
 13332                                   format_special_stuff_done:		
 13333 000014DE 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13334 000014E3 75AA                    		jnz	short ec35_special_stuff
 13335                                  					; go handle it out of line if so
 13336                                  ec35_special_stuff_done:
 13337                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13338 000014E5 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13339                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13340                                  		
 13341 000014EA 9C                      		pushf			; save result flags
 13342                                  		
 13343 000014EB 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13344                                  					; mdl_ps2_30
 13345 000014F0 74C5                    		jz	short ps2_special_stuff
 13346                                  					; exit mainline to address special
 13347                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13348 000014F2 9D                      		popf
 13349 000014F3 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13350                                  ret_from_i13:				
 13351 000014F5 1F                      		pop	ds
 13352 000014F6 CA0200                  		retf	2		; restore ds &	iret w/flags
 13353                                  ; ---------------------------------------------------------------------------
 13354                                  
 13355                                  ; most of our code exits through here. If carry isn't set, then
 13356                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13357                                  ; a changeline error.
 13358                                  
 13359                                  i13ret_ck_chglinerr:			
 13360 000014F9 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13361                                  i13_ret_error:				
 13362 000014FB 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13363 000014FE 7513                    		jnz	short int13b	; skip if wrong	error
 13364 00001500 08D2                    		or	dl, dl		; is this for the hard disk?
 13365 00001502 780F                    		js	short int13b	; yes, ignore
 13366 00001504 803E[7700]00            		cmp	byte [fhave96], 0
 13367 00001509 7408                    		jz	short int13b	; just in case ROM returned this
 13368                                  					; error	even though it told us it
 13369                                  					; never	would
 13370 0000150B 53                      		push	bx
 13371 0000150C BB4000                  		mov	bx, 40h		; fchanged
 13372 0000150F E8AA03                  		call	set_changed_dl
 13373 00001512 5B                      		pop	bx
 13374                                  int13b:					
 13375 00001513 F9                      		stc			; now return the error
 13376 00001514 EBDF                    		jmp	short ret_from_i13
 13377                                  ; ---------------------------------------------------------------------------
 13378                                  
 13379                                  ; some kind of error occurred. see if it is dma violation
 13380                                  
 13381                                  goterr13:				
 13382 00001516 80FC09                  		cmp	ah, 9		; dma error?
 13383 00001519 747C                    		jz	short gotdmaerr
 13384                                  goterr13_xxxx:				
 13385 0000151B 80FC11                  		cmp	ah, 11h		; ecc error?
 13386 0000151E 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13387 00001520 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13388 00001525 74D4                    		jz	short i13_ret_error
 13389                                  
 13390 00001527 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13391                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13392                                  					; (2 = romread)
 13393                                  					; ECC correction only applies to reads
 13394 0000152C 75CD                    		jnz	short i13_ret_error
 13395                                  
 13396 0000152E 30E4                    		xor	ah, ah
 13397                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13398                                  		; 17/10/2022
 13399 00001530 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13400                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13401                                  					; call far 70:797h
 13402 00001535 A1[1E00]                		mov	ax, [prevoper]
 13403 00001538 30E4                    		xor	ah, ah		; return code =	no error
 13404 0000153A 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13405 0000153C 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13406 0000153E 53                      		push	bx
 13407 0000153F 51                      		push	cx
 13408 00001540 52                      		push	dx
 13409 00001541 A2[2000]                		mov	[number_of_sec], al
 13410                                  loop_ecc:				
 13411 00001544 B80102                  		mov	ax, 201h	; read one sector
 13412                                  
 13413                                  ; we do reads one sector at a time. this ensures that we will eventually
 13414                                  ; finish the request since ecc errors on one sector do read in that sector.
 13415                                  ;
 13416                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13417                                  ; that attempt to read more sectors than are available on a particular
 13418                                  ; track.
 13419                                  ;
 13420                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13421                                  ; this request.
 13422                                  ;
 13423                                  ; at this point, all registers are set up for the call to orig13, except
 13424                                  ; that there may be a starting sector number that is bigger than the number
 13425                                  ; of sectors on a track.
 13426                                  ;
 13427 00001547 E88FFE                  		call	check_wrap	; get correct parameters for int 13
 13428                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13429                                  		; 17/10/2022
 13430 0000154A 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13431                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13432 0000154F 730C                    		jnb	short ok11_op
 13433 00001551 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13434 00001554 741B                    		jz	short handle_dma_during_ecc
 13435 00001556 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13436 00001559 7510                    		jnz	short ok11_exit_err
 13437                                  		; 10/12/2022
 13438                                  		; xor ax ax -> ah = 0
 13439                                  		;mov	ah, 0		; ecc error. reset the system again.
 13440 0000155B 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13441                                  					; was the last sector, no error	code
 13442                                  					; will be returned for the corrected
 13443                                  					; read.	(clear carry too.)
 13444                                  ok11_op:				
 13445 0000155D FE0E[2000]              		dec	byte [number_of_sec]
 13446 00001561 7409                    		jz	short ok11_exit	; all done?
 13447 00001563 FEC1                    		inc	cl		; advance sector number
 13448                                  					; add 200h to address
 13449 00001565 FEC7                    		inc	bh
 13450 00001567 FEC7                    		inc	bh
 13451 00001569 EBD9                    		jmp	short loop_ecc
 13452                                  ; ---------------------------------------------------------------------------
 13453                                  
 13454                                  ; locate error returns centrally
 13455                                  
 13456                                  ok11_exit_err:				
 13457 0000156B F9                      		stc			; set carry bit again.
 13458                                  ok11_exit:				
 13459 0000156C 5A                      		pop	dx
 13460 0000156D 59                      		pop	cx
 13461 0000156E 5B                      		pop	bx
 13462 0000156F EB88                    		jmp	short i13ret_ck_chglinerr
 13463                                  ; ---------------------------------------------------------------------------
 13464                                  
 13465                                  ; do the single sector read again, this time into our temporary
 13466                                  ; buffer, which is guaranteed not to have a DMA error, then
 13467                                  ; move the data to its proper location and proceed
 13468                                  
 13469                                  handle_dma_during_ecc:			
 13470 00001571 06                      		push	es
 13471 00001572 53                      		push	bx
 13472 00001573 BB[4E01]                		mov	bx, disksector
 13473 00001576 1E                      		push	ds
 13474 00001577 07                      		pop	es		; point es:bx to buffer
 13475 00001578 B80102                  		mov	ax, 201h	; read one sector
 13476                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13477                                  		; 17/10/2022
 13478 0000157B 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13479                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13480 00001580 5B                      		pop	bx
 13481 00001581 07                      		pop	es
 13482 00001582 7305                    		jnb	short handle_dma_during_ecc_noerr
 13483 00001584 80FC11                  		cmp	ah, 11h
 13484 00001587 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13485                                  
 13486                                  ; now we're kosher. Copy the data to where it belongs and resume
 13487                                  ; the ECC looping code.
 13488                                  
 13489                                  handle_dma_during_ecc_noerr:		
 13490 00001589 56                      		push	si
 13491 0000158A 57                      		push	di
 13492 0000158B 89DF                    		mov	di, bx
 13493 0000158D BE[4E01]                		mov	si, disksector
 13494 00001590 E82BFE                  		call	move_sector
 13495 00001593 5F                      		pop	di
 13496 00001594 5E                      		pop	si
 13497 00001595 EBC6                    		jmp	short ok11_op
 13498                                  ; ---------------------------------------------------------------------------
 13499                                  
 13500                                  ; we truly have a dma violation. restore register ax and retry the
 13501                                  ; operation as best we can.
 13502                                  
 13503                                  gotdmaerr:				
 13504 00001597 A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13505 0000159A FB                      		sti
 13506 0000159B 80FC02                  		cmp	ah, 2		; romread
 13507 0000159E 723B                    		jb	short i13_done_dmaerr
 13508                                  					; just pass dma error thru for
 13509                                  					; functions we don't handle
 13510 000015A0 80FC04                  		cmp	ah, 4		; romverify
 13511 000015A3 743C                    		jz	short intverify
 13512 000015A5 80FC05                  		cmp	ah, 5		; romformat
 13513 000015A8 7448                    		jz	short intformat
 13514 000015AA 772F                    		ja	short i13_done_dmaerr
 13515                                  
 13516                                  ; we are doing a read/write call. check for dma problems
 13517                                  
 13518                                  ;	******** set up stack frame here!!! ********
 13519                                  
 13520 000015AC 52                      		push	dx
 13521 000015AD 51                      		push	cx
 13522 000015AE 53                      		push	bx
 13523 000015AF 50                      		push	ax
 13524 000015B0 55                      		push	bp
 13525 000015B1 89E5                    		mov	bp, sp
 13526 000015B3 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13527 000015B5 D1E2                    		shl	dx, 1
 13528 000015B7 D1E2                    		shl	dx, 1
 13529 000015B9 D1E2                    		shl	dx, 1
 13530 000015BB D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13531 000015BD 01DA                    		add	dx, bx		; combine with offset
 13532 000015BF 81C2FF01                		add	dx, 511		; simulate a transfer
 13533                                  
 13534                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13535                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13536                                  
 13537 000015C3 7303                    		jnb	short no_skip_first
 13538 000015C5 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13539                                  ; ---------------------------------------------------------------------------
 13540                                  
 13541                                  no_skip_first:				
 13542 000015C8 D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13543 000015CA B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13544 000015CC 28F4                    		sub	ah, dh
 13545                                  
 13546                                  ; ah is now the number of sectors that we can successfully write in this
 13547                                  ; segment. if this number is above or equal to the requested number, then we
 13548                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13549                                  ;
 13550                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13551                                  ; first place is because we got a dma error. so it's impossible
 13552                                  ; for the whole block to fit, unless the dma error was returned
 13553                                  ; in error.
 13554                                  
 13555 000015CE 38C4                    		cmp	ah, al		; can we fit it	in?
 13556 000015D0 7236                    		jb	short doblock	; no, perform blocking.
 13557                                  
 13558                                  ; yes, the request fits. let it happen.
 13559                                  
 13560 000015D2 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13561                                  					; set up head number
 13562 000015D5 E888FE                  		call	doint
 13563 000015D8 E9D900                  		jmp	bad13		; and return from this place
 13564                                  ; ---------------------------------------------------------------------------
 13565                                  
 13566                                  i13_done_dmaerr:			
 13567 000015DB B409                    		mov	ah, 9		; pass dma error thru to caller
 13568 000015DD F9                      		stc
 13569 000015DE E914FF                  		jmp	ret_from_i13	; return with error,
 13570                                  					; we know it's not a changeline error
 13571                                  ; ---------------------------------------------------------------------------
 13572                                  
 13573                                  ; verify the given sectors. place the buffer pointer into our space.
 13574                                  
 13575                                  intverify:				
 13576 000015E1 06                      		push	es		; save caller's dma address
 13577 000015E2 53                      		push	bx
 13578 000015E3 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13579 000015E4 07                      		pop	es
 13580                                  dosimple:				
 13581 000015E5 BB[4E01]                		mov	bx, disksector
 13582                                  					; do the i/o from Bios_Data:disksector
 13583                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13584                                  		; 17/10/2022
 13585 000015E8 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13586                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13587 000015ED 5B                      		pop	bx
 13588 000015EE 07                      		pop	es
 13589 000015EF E907FF                  		jmp	i13ret_ck_chglinerr
 13590                                  ; ---------------------------------------------------------------------------
 13591                                  
 13592                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13593                                  
 13594                                  intformat:				
 13595 000015F2 06                      		push	es
 13596 000015F3 53                      		push	bx
 13597 000015F4 56                      		push	si
 13598 000015F5 57                      		push	di
 13599 000015F6 1E                      		push	ds
 13600                                  
 13601                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13602                                  ; in other words, swap (ds, es)
 13603                                  
 13604 000015F7 06                      		push	es
 13605 000015F8 1E                      		push	ds
 13606 000015F9 07                      		pop	es
 13607 000015FA 1F                      		pop	ds
 13608 000015FB 89DE                    		mov	si, bx
 13609 000015FD BF[4E01]                		mov	di, disksector
 13610 00001600 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 13611 00001603 1F                      		pop	ds
 13612 00001604 5F                      		pop	di
 13613 00001605 5E                      		pop	si		; do the i/o from
 13614 00001606 EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13615                                  ; ---------------------------------------------------------------------------
 13616                                  
 13617                                  ; we can't fit the request into the entire block. perform the operation on
 13618                                  ; the first block.
 13619                                  ;
 13620                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13621                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13622                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13623                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13624                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13625                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13626                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13627                                  ; doblock will handle the first block of requested sectors within the
 13628                                  ; boundary of this safe value.
 13629                                  
 13630                                  doblock:
 13631                                  
 13632                                  ; try to get the # of sectors/track from bds via rom drive number.
 13633                                  ; for any mini disks installed, here we have to pray that they have the
 13634                                  ; same # of sector/track as the main dos partition disk drive.
 13635                                  				
 13636 00001608 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13637                                  					; get head #, drive #
 13638 0000160B 51                      		push	cx
 13639 0000160C 06                      		push	es
 13640 0000160D 57                      		push	di		; ah - # of sectors before dma boundary
 13641                                  					; al - requested # of sectors for i/o.
 13642 0000160E E83BFE                  		call	find_bds
 13643 00001611 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13644                                  		; 12/12/2022
 13645 00001615 26F6452301              		test	byte [es:di+23h], 1
 13646                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13647 0000161A 5F                      		pop	di
 13648 0000161B 07                      		pop	es
 13649 0000161C 88E0                    		mov	al, ah		; set al=ah for	floppies
 13650 0000161E 7404                    		jz	short doblockflop ; they are track by track operation
 13651 00001620 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13652 00001622 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13653                                  doblockflop:				
 13654 00001624 59                      		pop	cx
 13655                                  doblockcontinue:			
 13656 00001625 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13657 00001627 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13658 00001629 50                      		push	ax
 13659 0000162A 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13660 0000162C EB03                    		jmp	short doblockdoint
 13661                                  ; ---------------------------------------------------------------------------
 13662                                  
 13663                                  doblocklast:				
 13664 0000162E 88C4                    		mov	ah, al
 13665 00001630 50                      		push	ax
 13666                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13667 00001631 E82CFE                  		call	doint
 13668 00001634 727E                    		jb	short bad13	; something happened, bye!
 13669 00001636 58                      		pop	ax
 13670 00001637 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13671                                  					; decrement by the successful operation
 13672 0000163A 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13673 0000163C 00E7                    		add	bh, ah		; advance dma addres
 13674 0000163E 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13675 00001640 38C4                    		cmp	ah, al		; check	the previous value
 13676 00001642 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13677                                  					; then we are done already.
 13678 00001644 28E0                    		sub	al, ah		; otherwise,
 13679                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13680 00001646 E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 13681 00001649 EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13682                                  ; ---------------------------------------------------------------------------
 13683                                  
 13684                                  bufferx:				
 13685 0000164B 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13686                                  					; set up head number
 13687                                  buffer:					
 13688 0000164E 53                      		push	bx
 13689 0000164F 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13690 00001652 80FC03                  		cmp	ah, 3		; romwrite
 13691 00001655 7525                    		jnz	short doread	;
 13692                                  					
 13693                                  ; copy the offending sector into local buffer
 13694                                  
 13695 00001657 06                      		push	es
 13696 00001658 1E                      		push	ds
 13697 00001659 56                      		push	si
 13698 0000165A 57                      		push	di
 13699 0000165B 1E                      		push	ds		; exchange segment registers
 13700 0000165C 06                      		push	es
 13701 0000165D 1F                      		pop	ds
 13702 0000165E 07                      		pop	es
 13703 0000165F BF[4E01]                		mov	di, disksector	; where to move
 13704 00001662 57                      		push	di		; save it
 13705 00001663 89DE                    		mov	si, bx		; source
 13706 00001665 E856FD                  		call	move_sector	; move sector into local buffer
 13707 00001668 5B                      		pop	bx		; new transfer address
 13708                                  					; (es:bx = Bios_Data:diskbuffer)
 13709 00001669 5F                      		pop	di		; restore caller's di & si
 13710 0000166A 5E                      		pop	si
 13711 0000166B 1F                      		pop	ds		; restore Bios_Data
 13712                                  
 13713                                  ; see if we are wrapping around a track or head
 13714                                  
 13715 0000166C B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13716                                  					; get drive number
 13717 0000166E 8A5608                  		mov	dl, [bp+8]
 13718 00001671 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 13719                                  					;
 13720                                  					; ah is	function
 13721                                  					; al is	1 for single sector transfer
 13722                                  					; es:bx	is local transfer addres
 13723                                  					; cx is	track/sector number
 13724                                  					; dx is	head/drive number
 13725                                  					; si,di	unchanged
 13726 00001674 E8E9FD                  		call	doint
 13727 00001677 07                      		pop	es		; restore caller's dma segment
 13728 00001678 723A                    		jb	short bad13	; go clean up
 13729 0000167A EB22                    		jmp	short dotail
 13730                                  ; ---------------------------------------------------------------------------
 13731                                  
 13732                                  ; reading a sector. do int first, then move things around
 13733                                  
 13734                                  doread:					
 13735 0000167C 06                      		push	es
 13736 0000167D 53                      		push	bx
 13737 0000167E 1E                      		push	ds		; es = Bios_Code
 13738 0000167F 07                      		pop	es
 13739 00001680 BB[4E01]                		mov	bx, disksector
 13740 00001683 B001                    		mov	al, 1
 13741 00001685 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13742                                  					; get drive number
 13743 00001688 E84EFD                  		call	check_wrap	;
 13744                                  					; ah = function
 13745                                  					; al = 1 for single sector
 13746                                  					; es:bx	points to local	buffer
 13747                                  					; cx, dx are track/sector, head/drive
 13748 0000168B E8D2FD                  		call	doint
 13749 0000168E 5B                      		pop	bx
 13750 0000168F 07                      		pop	es
 13751 00001690 7222                    		jb	short bad13
 13752 00001692 56                      		push	si
 13753 00001693 57                      		push	di
 13754 00001694 89DF                    		mov	di, bx
 13755 00001696 BE[4E01]                		mov	si, disksector
 13756 00001699 E822FD                  		call	move_sector
 13757 0000169C 5F                      		pop	di
 13758 0000169D 5E                      		pop	si
 13759                                  
 13760                                  ; note the fact that we've done 1 more sector
 13761                                  
 13762                                  dotail:					
 13763 0000169E 5B                      		pop	bx		; retrieve new dma area
 13764 0000169F 80C702                  		add	bh, 2		; advance over sector
 13765 000016A2 41                      		inc	cx
 13766 000016A3 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13767 000016A6 F8                      		clc
 13768 000016A7 FEC8                    		dec	al
 13769 000016A9 7409                    		jz	short bad13	; no more i/o
 13770                                  
 13771                                  ; see if we wrap around a track or head boundary with starting sector
 13772                                  ; we already have the correct head number to pass to check_wrap
 13773                                  
 13774 000016AB 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13775 000016AE E828FD                  		call	check_wrap
 13776 000016B1 E8ACFD                  		call	doint
 13777                                  
 13778                                  ; we are done. ax has the final code; we throw away what we got before
 13779                                  
 13780                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13781                                  ;	   or we've finished. If carry is set now, our only
 13782                                  ;	   hope for salvation is that it was a read operation
 13783                                  ;	   and the error code is ECC error. In that case, we'll
 13784                                  ;	   just pop the registers and go do the old ECC thing.
 13785                                  ;	   When the DMA error that got us here in the first
 13786                                  ;	   place occurs, it'll handle it.
 13787                                  
 13788                                  bad13:					
 13789 000016B4 89EC                    		mov	sp, bp
 13790 000016B6 5D                      		pop	bp
 13791 000016B7 5B                      		pop	bx
 13792 000016B8 5B                      		pop	bx
 13793 000016B9 59                      		pop	cx
 13794 000016BA 5A                      		pop	dx
 13795 000016BB 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13796 000016BD E935FE                  		jmp	ret_from_i13	; non-error exit
 13797                                  ; ---------------------------------------------------------------------------
 13798                                  
 13799                                  xgoterr13_xxxx:				
 13800 000016C0 E958FE                  		jmp	goterr13_xxxx
 13801                                  
 13802                                  ; ---------------------------------------------------------------------------
 13803                                  		; 10/12/2022
 13804                                  		;db 	0
 13805                                  ; ---------------------------------------------------------------------------
 13806                                  
 13807                                  ;Bios_Code ends
 13808                                  
 13809                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13810                                  
 13811                                  ;-----------------------------------------------------------------------------
 13812                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13813                                  ;-----------------------------------------------------------------------------
 13814                                  ; 17/03/2019 - Retro DOS v4.0
 13815                                  
 13816                                  		; 19/10/2022
 13817                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13818 000016C3 8A26[7500]              		mov	ah, [drvmax]
 13819 000016C7 BF[8706]                		mov	di, dskdrvs
 13820 000016CA 1E                      		push	ds		; pass result in es:di
 13821 000016CB 07                      		pop	es
 13822 000016CC E9E9EE                  		jmp	SetPtrSav
 13823                                  
 13824                                  ; =============== S U B	R O U T	I N E =======================================
 13825                                  
 13826                                  ;---------------------------------------------------------------------------
 13827                                  ; install_bds installs a bds at location es:di into the current linked list of
 13828                                  ; bds maintained by this device driver. it places the bds at the end of the
 13829                                  ; list. Trashes (at least) ax, bx, di, si
 13830                                  ;---------------------------------------------------------------------------
 13831                                  
 13832                                  install_bds:		
 13833 000016CF 1E                      		push	ds		; save Bios_Data segment
 13834 000016D0 BE[1901]                		mov	si, start_bds	; beginning of chain
 13835                                  
 13836                                  		; ds:si now points to link to first bds
 13837                                  		; assume bds list is non-empty
 13838                                  loop_next_bds:				
 13839 000016D3 C534                    		lds	si, [si]	; [si+BDS.link]
 13840                                  					; fetch	next bds
 13841 000016D5 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13842 000016D9 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13843                                  					; drive	with new one?
 13844 000016DC 7518                    		jnz	short next_bds
 13845 000016DE B310                    		mov	bl, 10h		; fi_am_mult
 13846 000016E0 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13847                                  					; set both of them to i_am_mult	if so
 13848 000016E4 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13849 000016E7 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13850                                  					; we don't own it
 13851 000016EC 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13852                                  					; determine if changeline available
 13853 000016EF 80E302                  		and	bl, 2		; fchangeline
 13854 000016F2 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13855                                  next_bds:				
 13856                                  		; 02/09/2023 (PCDOS 7.1)
 13857 000016F6 B8FFFF                  		mov	ax, 0FFFFh	; -1
 13858 000016F9 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 13859                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13860                                  					; are we at end	of list?
 13861 000016FB 75D6                    		jnz	short loop_next_bds
 13862 000016FD 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 13863                                  					; install bds
 13864 00001700 893C                    		mov	[si], di
 13865 00001702 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 13866                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13867                                  					; set next pointer to null
 13868 00001705 1F                      		pop	ds
 13869                                  
 13870                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13871                                  ;
 13872                                  ; **** If the new drive has a higher EOT value, we must alter the
 13873                                  ;      'eot' variable appropriately.
 13874                                  ;
 13875                                  ;		; 01/06/2019
 13876                                  ;		;mov	al,[es:di+52]
 13877                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13878                                  ;
 13879                                  ;		cmp	al,[eot]
 13880                                  ;		jbe	short _eot_ok
 13881                                  ;		mov	[eot],al
 13882                                  
 13883 00001706 C3                      		retn
 13884                                  
 13885                                  ; ---------------------------------------------------------------------------
 13886                                  
 13887                                  ; 17/10/2022
 13888                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13889                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13890                                  ; 09/12/2022
 13891                                  DRVLET equ drvlet
 13892                                  SNGMSG equ sngmsg
 13893                                  
 13894                                  ; 16/10/2022
 13895                                  
 13896                                  ;---------------------------------------------------------------------------
 13897                                  ;  ask to swap the disk in drive a:
 13898                                  ;	es:di -> bds
 13899                                  ;	ds -> Bios_Data
 13900                                  ;---------------------------------------------------------------------------
 13901                                  
 13902                                  		; 19/10/2022
 13903 00001707 F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13904                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13905 0000170C 7405                    		jz	short no_win386	; no, skip SetFocus
 13906                                  		
 13907                                  		; set focus to the correct VM
 13908                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13909                                  		; 17/10/2022
 13910 0000170E 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13911                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13912                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13913                                  no_win386:				
 13914 00001713 51                      		push	cx
 13915 00001714 52                      		push	dx
 13916 00001715 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13917                                  					; get the drive	letter
 13918                                  
 13919                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13920                                  ;           then existing dsk is drive A & vice versa
 13921                                  
 13922 00001719 88D6                    		mov	dh, dl
 13923 0000171B 80F601                  		xor	dh, 1
 13924 0000171E 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13925 00001720 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13926                                  					; broad	cast code for swap disk
 13927                                  					; Broadcast it
 13928 00001723 CD2F                    		int	2Fh	
 13929 00001725 41                      		inc	cx		; cx == -1 ?
 13930 00001726 741E                    		jz	short swpdsk9	; somebody has handled it
 13931                                  
 13932                                  ; using a different drive in a one drive system so request the user change disks
 13933                                  
 13934 00001728 80C241                  		add	dl, 'A'
 13935                                  		; 17/10/2022
 13936 0000172B 2E8816[6517]            		mov	[cs:DRVLET], dl
 13937                                  		; 16/10/2022
 13938                                  		;;mov	byte [cs:drvlet], dl
 13939                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13940                                  					; 0070h:3D54h =	2C7h:17E4h
 13941 00001730 BE[4917]                		mov	si, SNGMSG
 13942                                  		;mov	si, 17C8h	; sngmsg
 13943                                  					; 0070h:3D38h =	2C7h:17C8h
 13944 00001733 53                      		push	bx
 13945 00001734 2E                      		cs
 13946 00001735 AC                      		lodsb			; get the next character of the message
 13947                                  		;lods	byte ptr cs:[si]
 13948                                  wrmsg_loop:				
 13949 00001736 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13950                                  					; AL = character to display
 13951 00001738 2E                      		cs
 13952 00001739 AC                      		lodsb
 13953                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13954                                  					; get the next character of the	message
 13955 0000173A 08C0                    		or	al, al
 13956 0000173C 75F8                    		jnz	short wrmsg_loop
 13957 0000173E E8C6EA                  		call	con_flush	; flush out keyboard queue
 13958                                  					; call rom-bios
 13959 00001741 30E4                    		xor	ah, ah
 13960 00001743 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13961                                  					; Return: AH = scan code, AL = character
 13962 00001745 5B                      		pop	bx
 13963                                  swpdsk9:				
 13964 00001746 5A                      		pop	dx
 13965 00001747 59                      		pop	cx
 13966 00001748 C3                      		retn
 13967                                  
 13968                                  ; ---------------------------------------------------------------------------
 13969                                  
 13970                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13971                                  
 13972                                  ;--------------------------------------------------------
 13973                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13974                                  ;--------------------------------------------------------
 13975                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13976                                  ;--------------------------------------------------------
 13977                                  ; 17/03/2019 - Retro DOS v4.0
 13978                                  
 13979                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13980 00001749 0D0A                    sngmsg:		db 0Dh,0Ah
 13981 0000174B 496E73657274206469-     		db 'Insert diskette for drive '
 13981 00001754 736B6574746520666F-
 13981 0000175D 7220647269766520   
 13982                                  
 13983                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13984 00001765 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13984 0000176E 65737320616E79206B-
 13984 00001777 6579207768656E2072-
 13984 00001780 656164790D0A       
 13985 00001786 0A00                    		db 0Ah,0
 13986                                  
 13987                                  ; =============== S U B	R O U T	I N E =======================================
 13988                                  
 13989                                  ;---------------------------------------------------------------------------
 13990                                  ; input : es:di points to current bds for drive.
 13991                                  ; return : zero set if no open files
 13992                                  ;	   zero reset if open files
 13993                                  ;---------------------------------------------------------------------------
 13994                                  
 13995                                  chkopcnt:		
 13996 00001788 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13997 0000178D C3                      		retn
 13998                                  
 13999                                  ; =============== S U B	R O U T	I N E =======================================
 14000                                  
 14001                                  ;---------------------------------------------------------------------------
 14002                                  ; at media check time, we need to really get down and check what the change is.
 14003                                  ; this is guaranteed to be expensive.
 14004                                  ;
 14005                                  ;	es:di -> bds, ds -> Bios_Data
 14006                                  ;---------------------------------------------------------------------------
 14007                                  
 14008                                  mediacheck:	
 14009 0000178E E8A9F0                  		call	checksingle	; make sure correct disk is in place
 14010 00001791 31F6                    		xor	si, si
 14011 00001793 E84D01                  		call	haschange
 14012 00001796 742F                    		jz	short mediaret
 14013 00001798 E83C01                  		call	checkromchange
 14014 0000179B 752B                    		jnz	short mediadovolid
 14015 0000179D 50                      		push	ax
 14016 0000179E 52                      		push	dx
 14017 0000179F 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14018                                  					; set logical drive number
 14019 000017A3 B416                    		mov	ah, 16h
 14020 000017A5 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 14021                                  					; DL = drive to	check
 14022                                  					; Return: AH = disk change status
 14023 000017A7 5A                      		pop	dx
 14024 000017A8 58                      		pop	ax
 14025 000017A9 721D                    		jb	short mediadovolid
 14026 000017AB BE0100                  		mov	si, 1		; signal no change
 14027                                  
 14028                                  ; there are some drives with changeline that "lose" the changeline indication
 14029                                  ; if a different drive is accessed after the current one. in order to avoid
 14030                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14031                                  ; is not active and we are accessing a different drive from the last one.
 14032                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14033                                  ; status.
 14034                                  		; 19/10/2022
 14035 000017AE 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14036 000017B2 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14037                                  					; (If the last drive accessed is not current drive
 14038                                  					; media	change status may be incorrect.	So,
 14039                                  					; "I don't now" will be returned even if it is indicated
 14040                                  					; as media is not changed.)
 14041 000017B6 740F                    		jz	short mediaret	; (same	drive,
 14042                                  					; media	changeline indication is reliable)
 14043                                  
 14044                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14045                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14046                                  ; "not changed" here since the 2 second test said no change.)
 14047                                  
 14048 000017B8 50                      		push	ax
 14049 000017B9 51                      		push	cx
 14050 000017BA 52                      		push	dx
 14051 000017BB E895ED                  		call	Check_Time_Of_Access
 14052 000017BE 5A                      		pop	dx
 14053 000017BF 59                      		pop	cx
 14054 000017C0 58                      		pop	ax
 14055 000017C1 09F6                    		or	si, si
 14056 000017C3 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14057                                  					; (volume id will be checked)
 14058 000017C5 31F6                    		xor	si, si		; return "i don't know"
 14059                                  mediaret:				
 14060 000017C7 C3                      		retn
 14061                                  ; ---------------------------------------------------------------------------
 14062                                  
 14063                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14064                                  ; because this may be different since we only set medbyt when doing a read
 14065                                  ; or write.
 14066                                  
 14067                                  mediadovolid:				
 14068 000017C8 E82DEE                  		call	GetBp		; build	a new bpb in current bds
 14069 000017CB 72FA                    		jb	short mediaret
 14070 000017CD E82D00                  		call	check_vid
 14071 000017D0 73F5                    		jnb	short mediaret
 14072 000017D2 E9F8F3                  		jmp	maperror	; fix up al for	return to dos
 14073                                  ; ---------------------------------------------------------------------------
 14074                                  
 14075                                  ; simple, quick check of latched change. if no indication, then return
 14076                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14077                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14078                                  ; dos.
 14079                                  ;
 14080                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14081                                  
 14082                                  ;	call with es:di -> bds, ds -> Bios_Data
 14083                                  ;	***** warning:  this routine will return one level up on the stack
 14084                                  ;			if an error occurs!
 14085                                  
 14086                                  checklatchio:	
 14087                                  
 14088                                  ; if returning fake bpb then assume the disk has not changed
 14089                                  			
 14090 000017D5 E8B0FF                  		call	chkopcnt
 14091 000017D8 741B                    		jz	short checkret	; done if zero
 14092                                  
 14093                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14094                                  
 14095 000017DA E8FA00                  		call	checkromchange
 14096 000017DD 7416                    		jz	short checkret
 14097                                  
 14098                                  ; we now see that a change line has been seen in the past. let's do the
 14099                                  ; expensive verification.
 14100                                  
 14101 000017DF E816EE                  		call	GetBp		; build	bpb in current bds
 14102 000017E2 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14103 000017E4 E81600                  		call	check_vid
 14104 000017E7 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14105 000017E9 09F6                    		or	si, si		; is changed for sure?
 14106 000017EB 7908                    		jns	short checkret
 14107 000017ED E87B00                  		call	returnvid
 14108                                  checklatchret:				
 14109 000017F0 E8DAF3                  		call	maperror	; fix up al for	return to dos
 14110                                  ret_no_error_map:			
 14111 000017F3 F9                      		stc
 14112 000017F4 5E                      		pop	si		; pop off return address
 14113                                  checkret:				
 14114 000017F5 C3                      		retn
 14115                                  ; ---------------------------------------------------------------------------
 14116                                  
 14117                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14118                                  ; only if there was a disk error. return that error code in ax.
 14119                                  ;
 14120                                  ;	called with es:di -> bds, ds -> Bios_Data
 14121                                  
 14122                                  checkfatvid:				
 14123 000017F6 E8BD01                  		call	fat_check	; check	the fat	and the	vid
 14124 000017F9 09F6                    		or	si, si
 14125 000017FB 7827                    		js	short changed_drv ;
 14126                                  
 14127                                  ; the fat was the same. fall into check_vid and check volume id.
 14128                                  
 14129                                  		; fall into check_vid
 14130                                  
 14131                                  ; =============== S U B	R O U T	I N E =======================================
 14132                                  
 14133                                  ; now with the extended boot record, the logic should be enhanced.
 14134                                  ;
 14135                                  ; if it is the extended boot record, then we check the volume serial
 14136                                  ; number instead of volume id. if it is different, then set si to -1.
 14137                                  ;
 14138                                  ; if it is same, then si= 1 (no change).
 14139                                  ;
 14140                                  ; if it is not the extended boot record, then just follows the old
 14141                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14142                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14143                                  ; should have already covered by extended boot structure checking.
 14144                                  ; so, we will return "i don't know" by setting si to 0.
 14145                                  ;
 14146                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14147                                  ; (this will be gauranteed by a successful getbp call right before this
 14148                                  ; routine.)
 14149                                  ;
 14150                                  ;	called with es:di -> bds, ds -> bds
 14151                                  
 14152                                  		; 19/10/2022
 14153                                  check_vid:
 14154                                  
 14155                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14156                                  ; boot signature. if it is set then go to do the extended
 14157                                  ; id check otherwise continue with code below
 14158                                  
 14159 000017FD 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14160                                  					; [disksector+EXT_BOOT.SIG],
 14161                                  					; EXT_BOOT_SIGNATURE
 14162 00001802 7427                    		jz	short do_ext_check_id
 14163 00001804 E8DC00                  		call	haschange
 14164 00001807 74EC                    		jz	short checkret
 14165 00001809 31F6                    		xor	si, si
 14166 0000180B 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14167                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14168 00001810 7411                    		jz	short checkfatret ; don't read vol id
 14169                                  					; if not fat system
 14170 00001812 E8EE00                  		call	read_volume_id
 14171 00001815 720C                    		jb	short checkfatret
 14172 00001817 E89201                  		call	check_volume_id
 14173 0000181A BEFFFF                  		mov	si, 0FFFFh	; -1
 14174                                  					; definitely changed
 14175 0000181D 7505                    		jnz	short changed_drv
 14176                                  
 14177 0000181F 46                      		inc	si		; not changed
 14178                                  vid_no_changed:				
 14179 00001820 E8BA00                  		call	resetchanged
 14180                                  		; 12/12/2022
 14181                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14182                                  		;clc
 14183                                  checkfatret:				
 14184 00001823 C3                      		retn
 14185                                  ; ---------------------------------------------------------------------------
 14186                                  
 14187                                  		; 12/12/2022
 14188                                  changed_drv:
 14189 00001824 F8                      		clc			; cas -- return	no error
 14190 00001825 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14191                                  					; ensure that we ask rom for media
 14192 0000182A C3                      		retn			; check	next time round
 14193                                  ; ---------------------------------------------------------------------------
 14194                                  
 14195                                  ; extended id check
 14196                                  
 14197                                  ; 16/10/2022
 14198                                  
 14199                                  ; the code to check extended id is basically a check to see if the
 14200                                  ; volume serial number is still the same. the volume serial number
 14201                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14202                                  ; ds:di points to the bds of the drive under consideration.
 14203                                  ; the bds has fields containing the high and low words 
 14204                                  ; of the volume serial number of the media in the drive.
 14205                                  ; compare these fields to the fields mentioned above. if these fields
 14206                                  ; do not match the media has changed and so we should jump to the code
 14207                                  ; starting at ext_changed else return "i don't know" status
 14208                                  ; in the register used for the changeline status and continue executing
 14209                                  ; the code given below. for temporary storage use the register which
 14210                                  ; has been saved and restored around this block.
 14211                                  ;
 14212                                  ; bds fields in inc\msbds.inc
 14213                                  
 14214                                  		; 19/10/2022
 14215                                  do_ext_check_id:
 14216 0000182B 50                      		push	ax
 14217                                  		;mov	ax, word ptr ds:disksector+27h
 14218                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14219 0000182C A1[7501]                		mov	ax, [disksector+27h]
 14220                                  		; 02/09/2023
 14221 0000182F 31F6                    		xor	si, si ; 0
 14222 00001831 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14223 00001835 750C                    		jnz	short ext_changed
 14224 00001837 A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14225 0000183A 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14226 0000183E 7503                    		jnz	short ext_changed
 14227                                  		;xor	si, si		; 0
 14228                                  					; don't know
 14229 00001840 58                      		pop	ax
 14230 00001841 EBDD                    		jmp	short vid_no_changed
 14231                                  					; reset the flag
 14232                                  ; ---------------------------------------------------------------------------
 14233                                  
 14234                                  ext_changed:
 14235 00001843 58                      		pop	ax
 14236                                  		; 02/09/2023
 14237 00001844 4E                      		dec	si ; mov si, 0FFFFh ; -1
 14238                                  		;mov	si, 0FFFFh	; -1
 14239                                  					; disk changed!
 14240                                  		; 12/12/2022
 14241                                  		; ('changed_drv' clears cf)
 14242                                  		;clc
 14243 00001845 EBDD                    		jmp	short changed_drv
 14244                                  
 14245                                  ; ---------------------------------------------------------------------------
 14246                                  
 14247                                  ; at i/o time, we detected the error. now we need to determine whether the
 14248                                  ; media was truly changed or not. we return normally if media change unknown.
 14249                                  ; and we pop off the call and jmp to harderr if we see an error.
 14250                                  ;
 14251                                  ; es:di -> bds
 14252                                  
 14253                                  checkio:				
 14254 00001847 80FC06                  		cmp	ah, 6
 14255 0000184A 75D7                    		jnz	short checkfatret
 14256 0000184C E839FF                  		call	chkopcnt
 14257 0000184F 74D2                    		jz	short checkfatret
 14258 00001851 E8A4ED                  		call	GetBp
 14259 00001854 7212                    		jb	short no_error_map
 14260 00001856 E89DFF                  		call	checkfatvid
 14261 00001859 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14262 0000185B 09F6                    		or	si, si		; is changed for sure?
 14263 0000185D 7802                    		js	short checkioerr ; yes changed
 14264 0000185F 45                      		inc	bp		; allow	a retry
 14265 00001860 C3                      		retn
 14266                                  ; ---------------------------------------------------------------------------
 14267                                  
 14268                                  checkioerr:				
 14269 00001861 E80700                  		call	returnvid
 14270                                  
 14271                                  checkioret:				
 14272 00001864 F9                      		stc			; make sure carry gets passed through
 14273 00001865 E915F3                  		jmp	harderr
 14274                                  ; ---------------------------------------------------------------------------
 14275                                  
 14276                                  no_error_map:				
 14277 00001868 E915F3                  		jmp	harderr2
 14278                                  
 14279                                  ; =============== S U B	R O U T	I N E =======================================
 14280                                  
 14281                                  ; return vid sets up the vid for a return to dos.
 14282                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14283                                  ;  **** trashes si! ****
 14284                                  
 14285                                  returnvid:		
 14286 0000186B BE1600                  		mov	si, 22		; extra
 14287                                  					; offset into pointer to return	value
 14288 0000186E E80700                  		call	vid_into_packet
 14289 00001871 B406                    		mov	ah, 6
 14290 00001873 F9                      		stc
 14291 00001874 C3                      		retn
 14292                                  
 14293                                  ; ---------------------------------------------------------------------------
 14294                                  
 14295                                  ; moves the pointer to the volid for the drive into the original request packet
 14296                                  ; no attempt is made to preserve registers.
 14297                                  ;
 14298                                  ; assumes es:di -> bds
 14299                                  ; **trashes si**
 14300                                  
 14301                                  media_set_vid:				
 14302 00001875 BE0F00                  		mov	si, 15		; trans+1
 14303                                  					; return the value here	in packet
 14304                                  
 14305                                  		; fall into vid_into_packet
 14306                                  
 14307                                  ; =============== S U B	R O U T	I N E =======================================
 14308                                  
 14309                                  ; return pointer to vid in bds at es:di in packet[si]
 14310                                  
 14311                                  		; 19/10/2022
 14312                                  vid_into_packet:
 14313 00001878 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14314 00001879 C51E[1200]              		lds	bx, [ptrsav]
 14315 0000187D 83C74B                  		add	di, 75		; BDS.volid
 14316 00001880 8938                    		mov	[bx+si], di
 14317 00001882 83EF4B                  		sub	di, 75		; BDS.volid
 14318 00001885 8C4002                  		mov	[bx+si+2], es
 14319 00001888 1F                      		pop	ds
 14320                                  dofloppy:	; 18/12/2022
 14321 00001889 C3                      		retn
 14322                                  
 14323                                  ; ---------------------------------------------------------------------------
 14324                                  
 14325                                  ;----------------------------------------------------------------------------
 14326                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14327                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14328                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14329                                  ;   of getbp. for 3.5" media, we just return.
 14330                                  ;
 14331                                  ;   inputs:	es:di point to correct bds for this drive
 14332                                  ;		ah has media byte
 14333                                  ;
 14334                                  ;   outputs:	carry clear
 14335                                  ;		    no registers modified
 14336                                  ;		carry set
 14337                                  ;		    al = sectors/fat
 14338                                  ;		    bh = number of root directory entries
 14339                                  ;		    bl = sectors per track
 14340                                  ;		    cx = number of sectors
 14341                                  ;		    dh = sectors per allocation unit
 14342                                  ;		    dl = number of heads
 14343                                  ;
 14344                                  ;----------------------------------------------------------------------------
 14345                                  
 14346                                  hidensity:
 14347                                  
 14348                                  ; check for correct drive
 14349                                  		
 14350                                  		; 12/12/2022
 14351 0000188A 26F6452302              		test	byte [es:di+23h], 2		
 14352                                  		;test	word [es:di+23h], 2 ; is it special?	
 14353                                  					; [es:di+BDS.flags], fchangeline
 14354 0000188F 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14355                                  
 14356                                  ; we have a media byte that is pretty complex. examine drive information
 14357                                  ; table to see what kind it is.
 14358                                  
 14359 00001891 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14360 00001896 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14361                                  					; yes, use fatid...
 14362                                  ; 96 tpi drive?
 14363 00001898 80FCF9                  		cmp	ah, 0F9h
 14364 0000189B 75EC                    		jnz	short dofloppy
 14365                                  
 14366                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14367                                  ;------ a 720K diskette
 14368                                  
 14369                                  		; 02/09/2023 (PCDOS 7.1)
 14370 0000189D 268A4522                		mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 14371 000018A1 3C07                    		cmp	al, 7
 14372                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14373                                  					; ffOther
 14374 000018A3 7413                    		jz	short Is720K
 14375 000018A5 3C09                    		cmp	al, 9
 14376                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14377                                  					; ff288
 14378 000018A7 740F                    		jz	short Is720K
 14379 000018A9 B007                    		mov	al, 7		; seven	sectors	/ fat
 14380 000018AB BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14381                                  					; 224 root dir entries
 14382                                  					; & 0Fh sector max
 14383 000018AE B96009                  		mov	cx, 2400	; 80*15*2
 14384                                  					; 80 tracks, 15 sectors/track,
 14385                                  					; 2 sides
 14386                                  		; 02/09/2023
 14387 000018B1 5A                      		pop	dx		; pop off return address
 14388 000018B2 BA0201                  		mov	dx, 258		; 1*256+2
 14389                                  					; sectors/allocation unit
 14390                                  					; & head max
 14391                                  		;add	sp, 2		; pop off return address
 14392 000018B5 E9B2ED                  		jmp	Has1		; return to tail of getbp
 14393                                  ; ---------------------------------------------------------------------------
 14394                                  
 14395                                  Is720K:
 14396                                  		; 02/09/2023
 14397 000018B8 5B                      		pop	bx		; pop off return address
 14398                                  		;add	sp, 2		; pop off return address
 14399 000018B9 E975ED                  		jmp	Has720K		; return to 720K code
 14400                                  ; ---------------------------------------------------------------------------
 14401                                  
 14402                                  		; 18/12/2022
 14403                                  ;dofloppy:				
 14404                                  		;retn
 14405                                  
 14406                                  ; =============== S U B	R O U T	I N E =======================================
 14407                                  
 14408                                  ; 16/10/2022
 14409                                  
 14410                                  ;---------------------------------------------------------------------------
 14411                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14412                                  ;		   essentially used to indicate changeline, or format.
 14413                                  ;
 14414                                  ;   inputs:	dl contains physical drive number
 14415                                  ;		bx contains bits to set in the flag field in the bdss
 14416                                  ;   outputs:	none
 14417                                  ;   registers modified: flags
 14418                                  ;
 14419                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14420                                  ;
 14421                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14422                                  ;---------------------------------------------------------------------------
 14423                                  
 14424                                  set_changed_dl:	
 14425 000018BC 06                      		push	es
 14426 000018BD 57                      		push	di
 14427                                  		;les	di, ds:start_bds
 14428                                  		; 19/10/2022
 14429 000018BE C43E[1901]              		les	di, [start_bds]
 14430                                  
 14431                                  ; note: we assume that the list is non-empty
 14432                                  
 14433                                  scan_bds:				
 14434 000018C2 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14435 000018C6 7504                    		jnz	short get_next_bds
 14436                                  
 14437                                  ; someone may complain, but this *always* must be done when a disk change is
 14438                                  ; noted. there are *no* other compromising circumstances.
 14439                                  
 14440 000018C8 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14441                                  					; signal change	on other drive
 14442                                  get_next_bds:				
 14443 000018CC 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14444                                  					; go to	next bds
 14445 000018CF 83FFFF                  		cmp	di, 0FFFFh
 14446 000018D2 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14447 000018D4 5F                      		pop	di
 14448 000018D5 07                      		pop	es
 14449 000018D6 C3                      		retn
 14450                                  
 14451                                  ; =============== S U B	R O U T	I N E =======================================
 14452                                  
 14453                                  ;---------------------------------------------------------------------------
 14454                                  ; checkromchange - see if external program has diddled rom change line.
 14455                                  ;
 14456                                  ;   inputs:	es:di points to current bds.
 14457                                  ;   outputs:	zero set - no change
 14458                                  ;		zero reset - change
 14459                                  ;   registers modified: none
 14460                                  ;---------------------------------------------------------------------------
 14461                                  
 14462                                  checkromchange:	
 14463                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14464                                  		; 10/12/2022
 14465 000018D7 26F6452340              		test	byte [es:di+23h], 40h
 14466                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14467                                  					; fchanged
 14468 000018DC C3                      		retn
 14469                                  
 14470                                  ; =============== S U B	R O U T	I N E =======================================
 14471                                  
 14472                                  ;---------------------------------------------------------------------------
 14473                                  ; resetchanged - restore value of change line
 14474                                  ;
 14475                                  ;   inputs:	es:di points to current bds
 14476                                  ;   outputs:	none
 14477                                  ;   registers modified: none
 14478                                  ;---------------------------------------------------------------------------
 14479                                  
 14480                                  resetchanged:	
 14481                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14482                                  		; 10/12/2022
 14483 000018DD 26806523BF              		and	byte [es:di+23h], 0BFh
 14484                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14485                                  					; ~fchanged
 14486 000018E2 C3                      		retn
 14487                                  
 14488                                  ; =============== S U B	R O U T	I N E =======================================
 14489                                  
 14490                                  ;---------------------------------------------------------------------------
 14491                                  ; haschange - see if drive can supply change line
 14492                                  ;
 14493                                  ;   inputs:	es:di points to current bds
 14494                                  ;   outputs:	zero set - no change line available
 14495                                  ;		zero reset - change line available
 14496                                  ;   registers modified: none
 14497                                  ;---------------------------------------------------------------------------
 14498                                  
 14499                                  haschange:
 14500                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14501                                  		; 10/12/2022
 14502 000018E3 26F6452302              		test	byte [es:di+23h], 2		
 14503                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14504                                  					; fchangeline
 14505 000018E8 C3                      		retn
 14506                                  
 14507                                  ; ---------------------------------------------------------------------------
 14508                                  
 14509                                  ; 16/10/2022
 14510                                  
 14511                                  ;-------------------------------------------------------------------------
 14512                                  ; set_volume_id      -	main routine, calls other routines.
 14513                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14514                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14515                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14516                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14517                                  ;-------------------------------------------------------------------------
 14518                                  
 14519                                  ; set_volume_id
 14520                                  ;   if drive has changeline support, read in and set the volume_id
 14521                                  ; and the last fat_id byte. if no change line support then do nothing.
 14522                                  ;
 14523                                  ;   on entry:
 14524                                  ;	es:di points to the bds for this disk.
 14525                                  ;	ah contains media byte
 14526                                  ;
 14527                                  ;   on exit:
 14528                                  ;	carry clear:
 14529                                  ;	   successful call
 14530                                  ;	carry set
 14531                                  ;	   error and ax has error code
 14532                                  
 14533                                  set_volume_id:				
 14534 000018E9 52                      		push	dx		; save registers
 14535 000018EA 50                      		push	ax
 14536 000018EB E8F5FF                  		call	haschange	; does drive have changeline support?
 14537 000018EE 740B                    		jz	short setvret	; no, get out
 14538 000018F0 E81000                  		call	read_volume_id
 14539 000018F3 7209                    		jb	short seterr
 14540 000018F5 E8A800                  		call	transfer_volume_id ; copy the volume id	to special drive
 14541 000018F8 E8E2FF                  		call	resetchanged	; restore value	of change line
 14542                                  setvret:				
 14543                                  		; 10/12/2022
 14544                                  		; cf = 0
 14545                                  		;clc			; no error, clear carry flag
 14546 000018FB 58                      		pop	ax		; restore registers
 14547 000018FC 5A                      		pop	dx
 14548 000018FD C3                      		retn
 14549                                  ; ---------------------------------------------------------------------------
 14550                                  
 14551                                  seterr:					
 14552 000018FE 5A                      		pop	dx		; pop stack but don't overwrite ax
 14553 000018FF 5A                      		pop	dx		; restore dx
 14554 00001900 C3                      		retn
 14555                                  ; ---------------------------------------------------------------------------
 14556 00001901 0000                    root_sec:	dw 0			; root sector #
 14557                                  
 14558                                  ; 16/10/2022
 14559                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14560                                  ; 09/12/2022
 14561                                  ROOTSEC equ root_sec
 14562                                  
 14563                                  ; =============== S U B	R O U T	I N E =======================================
 14564                                  
 14565                                  ; 16/10/2022
 14566                                  
 14567                                  ; read_volume_id read the volume id and tells if it has been changed.
 14568                                  ;
 14569                                  ;   on entry:
 14570                                  ;	es:di points to current bds for drive.
 14571                                  ;
 14572                                  ;   on exit:
 14573                                  ;	carry clear
 14574                                  ;	    si = 1  no change
 14575                                  ;	    si = 0  ?
 14576                                  ;	    si = -1 change
 14577                                  ;
 14578                                  ;	carry set:
 14579                                  ;	    error and ax has error code.
 14580                                  
 14581                                  read_volume_id:
 14582 00001903 52                      		push	dx		; preserve registers
 14583 00001904 51                      		push	cx
 14584 00001905 53                      		push	bx
 14585 00001906 50                      		push	ax
 14586 00001907 06                      		push	es		; stack the bds last
 14587 00001908 57                      		push	di
 14588 00001909 1E                      		push	ds		; point es to Bios_Data
 14589 0000190A 07                      		pop	es
 14590 0000190B BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14591 0000190E BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14592 00001911 B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14593 00001914 F3A4                    		rep movsb
 14594 00001916 5F                      		pop	di
 14595 00001917 07                      		pop	es
 14596 00001918 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14597                                  					; # of fats
 14598 0000191C 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14599                                  					; sectors / fat
 14600 00001920 F6E1                    		mul	cl		; size taken by	fats
 14601 00001922 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14602                                  					; add on reserved sectors
 14603                                  					;
 14604                                  					; ax is	now sector # (0	based)
 14605                                  		; 17/10/2022
 14606 00001926 2EA3[0119]              		mov	[cs:ROOTSEC], ax
 14607                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14608                                  					; 0070h:3EFFh =	2C7h:198Fh
 14609 0000192A 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14610                                  					; # root dir entries
 14611 0000192E B104                    		mov	cl, 4		; 16 entries/sector
 14612 00001930 D3E8                    		shr	ax, cl		; divide by 16
 14613                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 14614                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 14615 00001932 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 14616                                  next_sec:				
 14617 00001933 51                      		push	cx		; save outer loop counter
 14618 00001934 2EA1[0119]              		mov	ax, [cs:ROOTSEC]
 14619                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14620                                  					; get sector #
 14621 00001938 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14622                                  					; sectors / track
 14623 0000193C 31D2                    		xor	dx, dx
 14624 0000193E F7F1                    		div	cx
 14625                                  
 14626                                  ; set up registers for call to read_sector
 14627                                  
 14628 00001940 42                      		inc	dx		; dx= sectors into track
 14629                                  					; ax= track count from 0
 14630 00001941 88D1                    		mov	cl, dl		; sector to read
 14631 00001943 31D2                    		xor	dx, dx
 14632 00001945 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14633                                  					; # heads on this disc
 14634 00001949 88D6                    		mov	dh, dl		; head number
 14635 0000194B 88C5                    		mov	ch, al		; track	#
 14636 0000194D E828EE                  		call	read_sector	; get first sector of the root directory,
 14637                                  					; ds:bx	-> directory sector
 14638 00001950 723F                    		jb	short readviderr
 14639 00001952 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14640 00001955 B008                    		mov	al, 8		; volume label bit
 14641                                  fvid_loop:				
 14642                                  		; 02/09/2023 (PCDOS 7.1)
 14643 00001957 382F                    		cmp	[bx], ch ; 0
 14644                                  		;cmp	byte [bx], 0 ; end of dir?
 14645 00001959 7433                    		jz	short no_vid	; yes, no vol id
 14646 0000195B 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14647 0000195E 7405                    		jz	short ent_loop	; yes, skip
 14648 00001960 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14649 00001963 750F                    		jnz	short found_vid	; jmp yes
 14650                                  ent_loop:				
 14651 00001965 83C320                  		add	bx, 32		; add length of	directory entry
 14652 00001968 E2ED                    		loop	fvid_loop
 14653 0000196A 59                      		pop	cx		; outer loop
 14654 0000196B 2EFF06[0119]            		inc	word [cs:ROOTSEC]
 14655                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14656                                  					; next sector
 14657 00001970 E2C1                    		loop	next_sec	; continue
 14658                                  notfound:
 14659                                  		; 02/09/2023
 14660                                  		;xor	si, si
 14661 00001972 EB13                    		jmp	short fvid_ret
 14662                                  ; ---------------------------------------------------------------------------
 14663                                  
 14664                                  found_vid:
 14665                                  		; 02/09/2023
 14666                                  		; cf = 0  ('test' instruction clears cf)				
 14667 00001974 59                      		pop	cx		; clean stack of outer loop counter
 14668 00001975 89DE                    		mov	si, bx		; point	to volume_id
 14669 00001977 06                      		push	es		; preserve current bds
 14670 00001978 57                      		push	di
 14671 00001979 1E                      		push	ds
 14672 0000197A 07                      		pop	es		; point es to Bios_Data
 14673 0000197B BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14674 0000197E B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14675                                  					; length of string minus nul
 14676 00001981 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14677                                  		;xor	al, al
 14678                                  		; 02/09/2023
 14679 00001983 91                      		xchg	ax, cx		; ax = 0
 14680 00001984 AA                      		stosb			; null terminate
 14681                                  		;;xor	si, si
 14682                                  		; 02/09/2023
 14683                                  		;xchg	ax, si		; si = 0
 14684 00001985 5F                      		pop	di		; restore current bds
 14685 00001986 07                      		pop	es
 14686                                  fvid_ret:
 14687                                  		; 02/09/2023
 14688 00001987 31F6                    		xor	si, si ; 0
 14689                                  				
 14690 00001989 58                      		pop	ax
 14691                                  		; 10/12/2022
 14692                                  		; cf = 0
 14693                                  		;clc
 14694                                  rvidret:				
 14695 0000198A 5B                      		pop	bx		; restore registers
 14696 0000198B 59                      		pop	cx
 14697 0000198C 5A                      		pop	dx
 14698 0000198D C3                      		retn
 14699                                  ; ---------------------------------------------------------------------------
 14700                                  
 14701                                  no_vid:
 14702 0000198E 59                      		pop	cx		; clean stack of outer loop counter
 14703                                  		;jmp	short notfound	; not found
 14704                                  		; 02/09/2023
 14705 0000198F EBF6                    		jmp	short fvid_ret
 14706                                  ; ---------------------------------------------------------------------------
 14707                                  
 14708                                  readviderr:				
 14709 00001991 5E                      		pop	si		; trash the outer loop counter
 14710 00001992 5E                      		pop	si		; caller's ax, return error code instead 
 14711 00001993 EBF5                    		jmp	short rvidret
 14712                                  
 14713                                  ; ---------------------------------------------------------------------------
 14714                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 14715                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 14716                                  preset_volid_addr:
 14717 00001995 BE[0A09]                		mov	si, tmp_vid	; "NO NAME    "
 14718                                  		;
 14719                                  		; PCDOS 7.1
 14720                                  		;add	di, 125		; BDS.volid
 14721                                  		;mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 14722                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 14723 00001998 83C74B                  		add	di, 75		; BDS.volid
 14724 0000199B B90C00                  		mov	cx, 12		; VOLID_SIZ
 14725                                  		;
 14726 0000199E FC                      		cld
 14727 0000199F C3                      		retn
 14728                                  
 14729                                  ; =============== S U B	R O U T	I N E =======================================
 14730                                  
 14731                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14732                                  ;
 14733                                  ; inputs:	es:di has current bds
 14734                                  ; outputs:	bds for drive has volume id from tmp
 14735                                  
 14736                                  transfer_volume_id:
 14737 000019A0 57                      		push	di		; copy the volume id from tmp to special drive
 14738 000019A1 56                      		push	si
 14739 000019A2 51                      		push	cx
 14740                                  		
 14741                                  		;mov	si, tmp_vid	; "NO NAME	 "
 14742                                  		;;add	di, BDS.volid
 14743                                  		;add	di, 75		; BDS.volid
 14744                                  		;;mov	cx, VOLID_SIZ
 14745                                  		;mov	cx, 12		; VOLID_SIZ
 14746                                  		;cld
 14747                                  		; 02/09/2023 (PCDOS 7.1)
 14748 000019A3 E8EFFF                  		call	preset_volid_addr
 14749                                  
 14750 000019A6 F3A4                    		rep movsb
 14751 000019A8 59                      		pop	cx
 14752 000019A9 5E                      		pop	si
 14753 000019AA 5F                      		pop	di
 14754 000019AB C3                      		retn
 14755                                  
 14756                                  ; =============== S U B	R O U T	I N E =======================================
 14757                                  
 14758                                  ;  check_volume_id - compare volume id in tmp area with
 14759                                  ;		     one expected for drive
 14760                                  ;
 14761                                  ;   inputs:	es:di has current bds for drive
 14762                                  ;   outputs:	zero true means it matched
 14763                                  
 14764                                  check_volume_id:
 14765 000019AC 57                      		push	di
 14766 000019AD 51                      		push	cx
 14767                                  		
 14768                                  		;mov	si, tmp_vid	; "NO NAME	 "
 14769                                  		;;add	di, BDS.volid
 14770                                  		;add	di, 75		; BDS.volid
 14771                                  		;;mov	cx, VOLID_SIZ
 14772                                  		;mov	cx, 12		; VOLID_SIZ
 14773                                  		;cld
 14774                                  		; 02/09/2023 (PCDOS 7.1)
 14775 000019AE E8E4FF                  		call	preset_volid_addr
 14776                                  
 14777 000019B1 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14778 000019B3 59                      		pop	cx
 14779 000019B4 5F                      		pop	di
 14780 000019B5 C3                      		retn
 14781                                  
 14782                                  ; =============== S U B	R O U T	I N E =======================================
 14783                                  
 14784                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14785                                  ;	      - uses the fat id obtained from the boot sector.
 14786                                  ;
 14787                                  ;   inputs:	medbyt is expected fat id
 14788                                  ;		es:di points to current bds
 14789                                  ;
 14790                                  ;   output:	si = -1 if fat id different,
 14791                                  ;		si = 0 otherwise
 14792                                  ;
 14793                                  ;   no other registers changed.
 14794                                  
 14795                                  fat_check:		
 14796 000019B6 50                      		push	ax
 14797 000019B7 31F6                    		xor	si, si		; say fat id's are same.
 14798 000019B9 A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14799 000019BC 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14800                                  					; compare it with the bds medbyte
 14801 000019C0 7401                    		jz	short okret1	; carry	clear
 14802 000019C2 4E                      		dec	si
 14803                                  okret1:					
 14804 000019C3 58                      		pop	ax
 14805 000019C4 C3                      		retn
 14806                                  
 14807                                  ; ---------------------------------------------------------------------------
 14808                                  
 14809                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14810                                  		;times 7 db 0
 14811                                  
 14812                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14813                                  
 14814                                  		; 09/12/2022
 14815                                  		;times 4 db 0	; 17/10/2022
 14816                                  		;db 4 dup(0)	; times 4 db 0
 14817                                  
 14818                                  ; ---------------------------------------------------------------------------
 14819                                  
 14820                                  		; 09/12/2022
 14821                                  		;db 0
 14822                                  
 14823                                  number2div	equ ($-BCode_start)
 14824                                  number2mod	equ (number2div % 16)
 14825                                  
 14826                                  %if number2mod>0 & number2mod<16
 14827 000019C5 00<rep Bh>              		times (16-number2mod) db 0
 14828                                  %endif
 14829                                  
 14830                                  ;align 16
 14831                                  
 14832                                  ; 09/12/2022
 14833                                  BCODE_END	equ $ - BCode_start
 14834                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14835                                  ; 13/12/2022
 14836                                  SYSINITOFFSET	equ BCODE_END
 14837                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14838                                  
 14839                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14840                                  
 14841                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14842                                  ; 01/05/2019 - Retro DOS v4.0 
 14843                                  ; ============================================================================
 14844                                  ; end of BIOSCODE
 14845                                  
 14846                                  ; ----------------------------------------------------------------------------
 14847                                  ; %include sysinit5.s	; 09/12/2022
 14848                                  ; ----------------------------------------------------------------------------
 14849                                  
 14850                                  ;=============================================================================
 14851                                  ; (IO.SYS) SYSINIT SEGMENT 
 14852                                  ;=============================================================================
 14853                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14854                                  
 14855                                  section .SYSINIT vstart=0
 14856                                  
 14857                                  ; ****************************************************************************
 14858                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14859                                  ; ----------------------------------------------------------------------------
 14860                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14861                                  ; ----------------------------------------------------------------------------
 14862                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14863                                  ; ----------------------------------------------------------------------------
 14864                                  ; Assembler: NASM version 2.15
 14865                                  ; ----------------------------------------------------------------------------
 14866                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14867                                  ; ----------------------------------------------------------------------------
 14868                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14869                                  ; ----------------------------------------------------------------------------
 14870                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14871                                  ; source code by Microsoft, 1991 
 14872                                  ; ----------------------------------------------------------------------------
 14873                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14874                                  ; by Microsoft, 12/10/1983
 14875                                  ; ****************************************************************************
 14876                                  ; main file: 'retrodos4.s'
 14877                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14878                                  
 14879                                  ; 21/10/2022
 14880                                  ; ----------------------------------------------------------------------------
 14881                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14882                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14883                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14884                                  ; ----------------------------------------------------------------------------
 14885                                  ; Binary file splitter & joiner: FFSJ v3.3
 14886                                  
 14887                                  ;--------------------------------------------------------------
 14888                                  ; SYSINIT.TXT (27/01/1983)
 14889                                  ;--------------------------------------------------------------
 14890                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14891                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14892                                  ;performed any  initialization  it  needs  to  do.   Control is
 14893                                  ;transfered with a long jump to the external  variable  SYSINIT
 14894                                  ;
 14895                                  ;
 14896                                  ;   The OEM  has  the  following  variables declared external:
 14897                                  ;
 14898                                  ;   CURRENT_DOS_LOCATION    WORD
 14899                                  ;
 14900                                  ;This word  contains  the  segment  number of the DOS before it
 14901                                  ;is relocated.  The OEM bios must set this value.
 14902                                  ;
 14903                                  ;   FINAL_DOS_LOCATION      WORD
 14904                                  ;
 14905                                  ;This word contains the segment number of the DOS after SYSINIT
 14906                                  ;moves it.  The OEM bios must set this value.
 14907                                  ;
 14908                                  ;   DEVICE_LIST             DWORD
 14909                                  ;
 14910                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14911                                  ;character and block device drivers.  The  OEM  must  set  this
 14912                                  ;value.
 14913                                  ;
 14914                                  ;   MEMORY_SIZE             WORD
 14915                                  ;
 14916                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14917                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14918                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14919                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14920                                  ;and read it back until it gets a mismatch.
 14921                                  ;
 14922                                  ;   DEFAULT_DRIVE           BYTE
 14923                                  ;
 14924                                  ;This is  the initial default drive when the system first comes
 14925                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14926                                  ;it then drive a is assumed.
 14927                                  ;
 14928                                  ;   BUFFERS                 BYTE
 14929                                  ;
 14930                                  ;This is  the  default  number of buffers for the system.  This
 14931                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14932                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14933                                  ;
 14934                                  ;   FILES                   BYTE
 14935                                  ;
 14936                                  ;This is  the  default  number  of  files for the system.  This
 14937                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14938                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14939                                  ;
 14940                                  ;   SYSINIT                 FAR
 14941                                  ;
 14942                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14943                                  ;this label at the end of its INIT code.
 14944                                  ;
 14945                                  ;   The OEM  has  the  following  variables declared public:
 14946                                  ;
 14947                                  ;   RE_INIT                 FAR
 14948                                  ;
 14949                                  ;This is an entry point which allows the BIOS to do some INIT
 14950                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14951                                  ;PRESERVED.  On entry DS points to the first available memory
 14952                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14953                                  ;prefix which represents  the  "program"  currently  running.
 14954                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14955                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14956                                  ;that  no  memory  is  allocated to it, it is running in free
 14957                                  ;memory.
 14958                                  ;NOTES:
 14959                                  ;     At the time this routine is called SYSINIT occupies the
 14960                                  ;highest 10K of memory ("highest" is determined by the  value
 14961                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14962                                  ;     Since this is called AFTER DOS is initialized, you can
 14963                                  ;make system calls.  This also implies that the code for this
 14964                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14965                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14966                                  ;     If you don't want  anything done just set this to point
 14967                                  ;at a FAR RET instruction.
 14968                                  
 14969                                  ; ----------------------------------------------------------------------
 14970                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14971                                  ; ----------------------------------------------------------------------
 14972                                  
 14973                                  ;include version.inc
 14974                                  ; ----------------------------------------------------------------------
 14975                                  
 14976                                  ;FALSE   EQU     0
 14977                                  ;TRUE    EQU     0FFFFh
 14978                                  
 14979                                  ;IBMVER	    EQU     TRUE
 14980                                  ;IBMCOPYRIGHT EQU   FALSE
 14981                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14982                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14983                                  ;MSVER      EQU     FALSE
 14984                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14985                                  ;KANJI      EQU     FALSE
 14986                                  
 14987                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14988                                  ; ----------------------------------------------------------------------
 14989                                  ;MAJOR_VERSION  EQU	6
 14990                                  ;;MINOR_VERSION	EQU	0	;6.00
 14991                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14992                                  
 14993                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14994                                  ; ----------------------------------------------------------------------
 14995                                  MAJOR_VERSION   EQU	5
 14996                                  MINOR_VERSION   EQU	0
 14997                                  
 14998                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14999                                  
 15000                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 15001                                  				; currently 0.
 15002                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 15003                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 15004                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 15005                                  
 15006                                  ;      if1
 15007                                  ;      %OUT  ... for DOS Version 5.00 ...
 15008                                  ;      endif
 15009                                  
 15010                                         ;******************************
 15011                                         ;Each assembler program should:
 15012                                         ;  mov ah,030h                   ;DOS Get Version function
 15013                                         ;  int 021h                      ;Version ret. in AX,minor version first
 15014                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 15015                                         ;  jne error_handler             ; EXACT version match.
 15016                                         ;******************************
 15017                                  
 15018                                  ; ----------------------------------------------------------------------
 15019                                  ; device definitions
 15020                                  
 15021                                  ;Attribute bit masks
 15022                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 15023                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 15024                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 15025                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 15026                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 15027                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 15028                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 15029                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 15030                                  
 15031                                  ; The device table list has the form:
 15032                                  struc	SYSDEV
 15033 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 15034 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 15035 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 15036 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 15037 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 15038                                  .size:
 15039                                  endstruc
 15040                                  
 15041                                  ;Static Reguest Header
 15042                                  struc	SRHEAD
 15043 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15044 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15045 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15046 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15047 00000005 ????????????????                	resb 8		;Reserved for queue links
 15048                                  .size:
 15049                                  endstruc
 15050                                  
 15051                                  ;Status word masks
 15052                                  STERR   EQU     8000H           ;Bit 15 - Error
 15053                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15054                                  STDON   EQU     0100H           ;Bit 8 - Done
 15055                                  STECODE EQU     00FFH           ;Error code
 15056                                  WRECODE EQU     0
 15057                                  
 15058                                  ;Function codes
 15059                                  DEVINIT EQU     0               ;Initialization
 15060                                  DINITHL EQU     26              ;Size of init header
 15061                                  DEVMDCH EQU     1               ;Media check
 15062                                  DMEDHL  EQU     15              ;Size of media check header
 15063                                  DEVBPB  EQU     2               ;Get BPB
 15064                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15065                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15066                                  DEVRD   EQU     4               ;Read
 15067                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15068                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15069                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15070                                  DEVIST  EQU     6               ;Input status
 15071                                  DSTATHL EQU     13              ;Size of status header
 15072                                  DEVIFL  EQU     7               ;Input flush
 15073                                  DFLSHL  EQU     15              ;Size of flush header
 15074                                  DEVWRT  EQU     8               ;Write
 15075                                  DEVWRTV EQU     9               ;Write with verify
 15076                                  DEVOST  EQU     10              ;Output status
 15077                                  DEVOFL  EQU     11              ;Output flush
 15078                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15079                                  
 15080                                  ; ----------------------------------------------------------------------
 15081                                  struc	SYS_FCB
 15082 00000000 ??                      .fcb_drive:	resb 1
 15083 00000001 ????????????????        .fcb_name:	resb 8
 15084 00000009 ??????                  .fcb_ext:	resb 3
 15085 0000000C ????                    .fcb_EXTENT:	resw 1
 15086 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15087 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15088                                                          ; word
 15089 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15090 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15091 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15092 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15093                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15094                                                          ; If file, bit 6=0 if dirty
 15095                                                          ; If I/O device, bit 6=0 if EOF (input)
 15096                                                          ;               Bit 5=1 if Raw mode
 15097                                                          ;               Bit 0=1 if console input device
 15098                                                          ;               Bit 1=1 if console output device
 15099                                                          ;               Bit 2=1 if null device
 15100                                                          ;               Bit 3=1 if clock device
 15101 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15102 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15103 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15104 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15105 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15106 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15107                                  .size:
 15108                                  endstruc
 15109                                  
 15110                                  ; ----------------------------------------------------------------------
 15111                                  ; Field definition for I/O buffer information
 15112                                  
 15113                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15114                                  
 15115                                  struc buffinfo
 15116 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15117 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15118 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15119                                  			; SFT table index (bit 7 = 1)
 15120                                  			; = FFh if buffer free
 15121 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15122                                  			;	= 0 if Local device buffer
 15123                                  			; Bit 6 = 1 if buffer dirty
 15124                                  			; Bit 5 = Reserved
 15125                                  			; Bit 4 = Search bit (bit 7 = 1)
 15126                                  			; Bit 3 = 1 if buffer is DATA
 15127                                  			; Bit 2 = 1 if buffer is DIR
 15128                                  			; Bit 1 = 1 if buffer is FAT
 15129                                  			; Bit 0 = Reserved
 15130 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15131                                  ; The next two items are often refed as a word (bit 7 = 0)
 15132 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15133 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15134 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15135 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15136 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15137                                  .size:
 15138                                  endstruc
 15139                                  
 15140                                  %define buf_offset	dword [buf_sector]
 15141                                  			;For bit 7 = 1, this is the byte
 15142                                  			;offset of the start of the buffer in
 15143                                  			;the file pointed to by buf_ID.  Thus
 15144                                  			;the buffer starts at location
 15145                                  			;buf_offset in the file and contains
 15146                                  			;buf_fill bytes.
 15147                                  
 15148                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15149                                  
 15150                                  
 15151                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15152                                  
 15153                                  ;Flag byte masks
 15154                                  buf_isnet	EQU	10000000B
 15155                                  buf_dirty	EQU	01000000B
 15156                                  ;***
 15157                                  buf_visit	EQU	00100000B
 15158                                  ;***
 15159                                  buf_snbuf	EQU	00010000B
 15160                                  
 15161                                  buf_isDATA	EQU	00001000B
 15162                                  buf_isDIR	EQU	00000100B
 15163                                  buf_isFAT	EQU	00000010B
 15164                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15165                                  
 15166                                  buf_NetID	EQU	bufinsiz
 15167                                  
 15168                                  ; ----------------------------------------------------------------------
 15169                                  
 15170                                  ; ----------------------------------------------------------------------
 15171                                  ;**	DPB - Drive Parameter Block
 15172                                  
 15173                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15174                                  
 15175                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15176                                  ;	possibly inaccurate deductions from code study... - jgl
 15177                                  ;
 15178                                  ;	The DPB is DOS's main structure for describing block devices.
 15179                                  ;	It contains info about the "Drive" intermingled with info about
 15180                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15181                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15182                                  ;
 15183                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15184                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15185                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15186                                  
 15187                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15188                                  
 15189                                  ; 12/05/2019 - Retro DOS v4.0
 15190                                  
 15191                                  struc	DPB
 15192 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15193 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15194 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15195 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15196 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15197 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15198 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15199 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15200 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15201 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15202                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15203 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15204 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15205 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15206 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15207 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15208                                  				; check the first time this DPB is used
 15209 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15210 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15211 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15212                                  .size:
 15213                                  endstruc
 15214                                  
 15215                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15216                                  
 15217                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15218                                  
 15219                                  ; ----------------------------------------------------------------------
 15220                                  ; 26/03/2018
 15221                                  
 15222                                  ; IOCTL SUB-FUNCTIONS
 15223                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15224                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15225                                  IOCTL_READ_HANDLE	EQU	2
 15226                                  IOCTL_WRITE_HANDLE	EQU	3
 15227                                  IOCTL_READ_DRIVE	EQU	4
 15228                                  IOCTL_WRITE_DRIVE	EQU	5
 15229                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15230                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15231                                  IOCTL_CHANGEABLE?	EQU	8
 15232                                  IOCTL_SHARING_RETRY	EQU	11
 15233                                  GENERIC_IOCTL_HANDLE	EQU	12
 15234                                  GENERIC_IOCTL		EQU	13
 15235                                  
 15236                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15237                                  RAWIO			EQU	8
 15238                                  
 15239                                  ; RAWIO SUB-FUNCTIONS
 15240                                  GET_DEVICE_PARAMETERS	EQU	60H
 15241                                  SET_DEVICE_PARAMETERS	EQU	40H
 15242                                  READ_TRACK		EQU	61H
 15243                                  WRITE_TRACK		EQU	41H
 15244                                  VERIFY_TRACK		EQU	62H
 15245                                  FORMAT_TRACK		EQU	42H
 15246                                  
 15247                                  ; DEVICETYPE VALUES
 15248                                  MAX_SECTORS_IN_TRACK	EQU	63
 15249                                  DEV_5INCH		EQU	0
 15250                                  DEV_5INCH96TPI		EQU	1
 15251                                  DEV_3INCH720KB		EQU	2
 15252                                  DEV_8INCHSS		EQU	3
 15253                                  DEV_8INCHDS		EQU	4
 15254                                  DEV_HARDDISK		EQU	5
 15255                                  DEV_OTHER		EQU	7
 15256                                  ;DEV_3INCH1440KB	EQU	7
 15257                                  DEV_3INCH2880KB		EQU	9
 15258                                  ; Retro DOS v2.0 - 26/03/2018
 15259                                  ;;DEV_TAPE		EQU	6
 15260                                  ;;DEV_ERIMO		EQU	8
 15261                                  ;DEV_3INCH2880KB	EQU	9
 15262                                  DEV_3INCH1440KB		EQU	10
 15263                                  
 15264                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15265                                  					; CURRENTLY SUPPORT.
 15266                                  MAX_DEV_TYPE		EQU	10
 15267                                  
 15268                                  struc A_SECTORTABLE
 15269 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15270 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15271                                  .size:
 15272                                  endstruc
 15273                                  
 15274                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15275                                  
 15276                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15277                                  ;
 15278                                  ;	The BPB contains information about the disk structure.  It dates
 15279                                  ;	back to the earliest FAT systems and so FAT information is
 15280                                  ;	intermingled with physical driver information.
 15281                                  ;
 15282                                  ;	A boot sector contains a BPB for its device; for other disks
 15283                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15284                                  ;	information in the DPB.
 15285                                  ;
 15286                                  ;	The BDS structure contains a BPB within it.
 15287                                  
 15288                                  struc A_BPB
 15289 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15290 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15291 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15292 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15293 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15294 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15295 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15296 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15297 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15298 0000000F ????                    .BPB_HEADS:		resw	1
 15299 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15300 00000013 ????                    			resw	1
 15301 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15302 00000017 ????                    			resw	1
 15303 00000019 ????????????            			resb	6	; NOTE:  many times these
 15304                                  ;					; 	 6 bytes are omitted
 15305                                  ;					;	 when BPB manipulations
 15306                                  ;					;	 are performed!
 15307                                  .size:
 15308                                  endstruc
 15309                                  
 15310                                  struc A_DEVICEPARAMETERS
 15311 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15312 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15313 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15314 00000004 ????                    .DP_CYLINDERS:		resw	1
 15315 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15316 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15317 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15318 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15319                                  endstruc
 15320                                  
 15321                                  ; ----------------------------------------------------------------------
 15322                                  ; structure, equates for devmark for mem command.
 15323                                  
 15324                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15325                                  
 15326                                  struc devmark
 15327 00000000 ??                       .id:	    resb 1
 15328 00000001 ????                     .seg:	    resw 1
 15329 00000003 ????                     .size:	    resw 1
 15330 00000005 ??????                   .dum:	    resb 3
 15331 00000008 ????????????????         .filename: resb 8
 15332                                  endstruc
 15333                                  
 15334                                  devmark_stk	equ	'S'
 15335                                  devmark_device	equ	'D'
 15336                                  devmark_ifs	equ	'I'
 15337                                  devmark_buf	equ	'B'
 15338                                  devmark_cds	equ	'L' ; lastdrive
 15339                                  devmark_files	equ	'F'
 15340                                  devmark_fcbs	equ	'X'
 15341                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15342                                  devmark_ems_stub equ	'E'
 15343                                  
 15344                                  setbrkdone	equ	00000001b
 15345                                  for_devmark	equ	00000010b
 15346                                  not_for_devmark equ	11111101b
 15347                                  
 15348                                  ; ----------------------------------------------------------------------
 15349                                  ; Memory arena structure
 15350                                  
 15351                                  ; 24/03/2019 - Retro DOS v4.0 
 15352                                  ; (MSDOS 6.0, ARENA.INC)
 15353                                  
 15354                                  ;** Arena Header
 15355                                  
 15356                                  struc ARENA
 15357 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15358 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15359 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15360 00000005 ??????                  .RESERVED	resb 3		; reserved
 15361 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15362                                  endstruc
 15363                                  
 15364                                  ; 12/04/2019
 15365                                  
 15366                                  arena_owner_system	EQU 0	; free block indication
 15367                                  
 15368                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15369                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15370                                  
 15371                                  ; ----------------------------------------------------------------------
 15372                                  ; Process data block (otherwise known as program header)
 15373                                  
 15374                                  ; 23/03/2019 - Retro DOS v4.0
 15375                                  
 15376                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15377                                  
 15378                                  FILPERPROC	EQU     20
 15379                                  
 15380                                  struc PDB	; Process_data_block
 15381 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15382 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15383 00000004 ??                                      resb 1
 15384 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15385 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15386 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15387 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15388 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15389 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15390 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15391 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15392 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15393 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15394 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15395 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15396 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15397 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15398 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15399 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15400 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15401 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15402 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15403 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15404 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15405 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15406                                  ;.size:
 15407                                  endstruc
 15408                                  
 15409                                  ; ----------------------------------------------------------------------
 15410                                  ; <system call definitions>
 15411                                  
 15412                                  ; 23/03/2019 - Retro DOS v4.0
 15413                                  
 15414                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15415                                  
 15416                                  ABORT                           EQU 0   ;  0      0
 15417                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15418                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15419                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15420                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15421                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15422                                  RAW_CON_IO                      EQU 6   ;  6      6
 15423                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15424                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15425                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15426                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15427                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15428                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15429                                  DISK_RESET                      EQU 13  ; 13      D
 15430                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15431                                  FCB_OPEN                        EQU 15  ; 15      F
 15432                                  FCB_CLOSE                       EQU 16  ; 16     10
 15433                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15434                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15435                                  FCB_DELETE                      EQU 19  ; 19     13
 15436                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15437                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15438                                  FCB_CREATE                      EQU 22  ; 22     16
 15439                                  FCB_RENAME                      EQU 23  ; 23     17
 15440                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15441                                  SET_DMA                         EQU 26  ; 26     1A
 15442                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15443                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15444                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15445                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15446                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15447                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15448                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15449                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15450                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15451                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15452                                  GET_DATE                        EQU 42  ; 42     2A
 15453                                  SET_DATE                        EQU 43  ; 43     2B
 15454                                  GET_TIME                        EQU 44  ; 44     2C
 15455                                  SET_TIME                        EQU 45  ; 45     2D
 15456                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15457                                  ; Extended functionality group
 15458                                  GET_DMA                         EQU 47  ; 47     2F
 15459                                  GET_VERSION                     EQU 48  ; 48     30
 15460                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15461                                  GET_DPB                         EQU 50  ; 50     32
 15462                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15463                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15464                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15465                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15466                                  CHAR_OPER                       EQU 55  ; 55     37
 15467                                  INTERNATIONAL                   EQU 56  ; 56     38
 15468                                  ;   Directory Group
 15469                                  MKDIR                           EQU 57  ; 57     39
 15470                                  RMDIR                           EQU 58  ; 58     3A
 15471                                  CHDIR                           EQU 59  ; 59     3B
 15472                                  ;   File Group
 15473                                  CREAT                           EQU 60  ; 60     3C
 15474                                  OPEN                            EQU 61  ; 61     3D
 15475                                  CLOSE                           EQU 62  ; 62     3E
 15476                                  READ                            EQU 63  ; 63     3F
 15477                                  WRITE                           EQU 64  ; 64     40
 15478                                  UNLINK                          EQU 65  ; 65     41
 15479                                  LSEEK                           EQU 66  ; 66     42
 15480                                  CHMOD                           EQU 67  ; 67     43
 15481                                  IOCTL                           EQU 68  ; 68     44
 15482                                  XDUP                            EQU 69  ; 69     45
 15483                                  XDUP2                           EQU 70  ; 70     46
 15484                                  CURRENT_DIR                     EQU 71  ; 71     47
 15485                                  ;    Memory Group
 15486                                  ALLOC                           EQU 72  ; 72     48
 15487                                  DEALLOC                         EQU 73  ; 73     49
 15488                                  SETBLOCK                        EQU 74  ; 74     4A
 15489                                  ;    Process Group
 15490                                  EXEC                            EQU 75  ; 75     4B
 15491                                  EXIT                            EQU 76  ; 76     4C
 15492                                  WAITPROCESS			EQU 77  ; 77     4D
 15493                                  FIND_FIRST                      EQU 78  ; 78     4E
 15494                                  ;   Special Group
 15495                                  FIND_NEXT                       EQU 79  ; 79     4F
 15496                                  ; SPECIAL SYSTEM GROUP
 15497                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15498                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15499                                  GET_IN_VARS                     EQU 82  ; 82     52
 15500                                  SETDPB                          EQU 83  ; 83     53
 15501                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15502                                  DUP_PDB                         EQU 85  ; 85     55
 15503                                  RENAME                          EQU 86  ; 86     56
 15504                                  FILE_TIMES                      EQU 87  ; 87     57
 15505                                  ;
 15506                                  ALLOCOPER			EQU 88	; 88     58	
 15507                                  ; Network extention system calls
 15508                                  GetExtendedError		EQU 89	; 89	 59
 15509                                  CreateTempFile			EQU 90	; 90	 5A
 15510                                  CreateNewFile			EQU 91	; 91	 5B
 15511                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15512                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15513                                  					;	    CloseByName, CloseUser,
 15514                                  					;	    CloseUserProcess,
 15515                                  					;	    GetOpenFileList
 15516                                  UserOper			EQU 94	; 94	 5E Get and Set
 15517                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15518                                  xNameTrans			EQU 96	; 96	 60
 15519                                  PathParse			EQU 97	; 97	 61
 15520                                  GetCurrentPSP			EQU 98	; 98	 62
 15521                                  Hongeul 			EQU 99	; 99	 63
 15522                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15523                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15524                                  GetExtCntry			EQU 101 ; 101	 65
 15525                                  GetSetCdPg			EQU 102 ; 102	 66
 15526                                  ExtHandle			EQU 103 ; 103	 67
 15527                                  Commit				EQU 104 ; 104	 68
 15528                                  GetSetMediaID			EQU 105 ; 105	 69
 15529                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15530                                  ExtOpen 			EQU 108 ; 108	 6C
 15531                                  ;
 15532                                  ;ifdef ROMEXEC
 15533                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15534                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15535                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15536                                  ;endif
 15537                                  ;
 15538                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15539                                  OEM_C1				EQU 249 ; 249	 F9
 15540                                  OEM_C2				EQU 250 ; 250	 FA
 15541                                  OEM_C3				EQU 251 ; 251	 FB
 15542                                  OEM_C4				EQU 252 ; 252	 FC
 15543                                  OEM_C5				EQU 253 ; 253	 FD
 15544                                  OEM_C6				EQU 254 ; 254	 FE
 15545                                  OEM_C7				EQU 255 ; 255	 FF
 15546                                  
 15547                                  ; ----------------------------------------------------------------------
 15548                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15549                                  ; ----------------------------------------------------------------------
 15550                                  
 15551                                  ;;	IF	STACKSW
 15552                                  
 15553                                  ;;
 15554                                  ;; Internal Stack Parameters
 15555                                  ;EntrySize		equ	8
 15556                                  ;
 15557                                  ;MinCount		equ	8
 15558                                  ;DefaultCount		equ	9
 15559                                  ;MaxCount		equ	64
 15560                                  ;
 15561                                  ;MinSize 		equ	32
 15562                                  ;DefaultSize		equ	128
 15563                                  ;MaxSize 		equ	512
 15564                                  
 15565                                  ;;	ENDIF
 15566                                  
 15567                                  ; ----------------------------------------------------------------------
 15568                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15569                                  ; ----------------------------------------------------------------------
 15570                                  					  ;;Rev 3.30 Modification
 15571                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15572                                  									  
 15573                                  ;*******************************					  
 15574                                  ;System Service call ( Int 15h )					  
 15575                                  ;*******************************					  
 15576                                  ;Function AH = 0C0h, Return system configuration			  
 15577                                  ;For PC and PCJR on return:						  
 15578                                  ;	(AH)	= 80h							  
 15579                                  ;	(CY)	= 1							  
 15580                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15581                                  ;	(AH)	= 86h							  
 15582                                  ;	(CY)	= 1							  
 15583                                  ;For all others:							  
 15584                                  ;	(AH)	= 0							  
 15585                                  ;	(CY)	= 0							  
 15586                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15587                                  ; System descriptor :							  
 15588                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15589                                  ;				minimum length = 8			  
 15590                                  ;	DB	xx		model byte				  
 15591                                  ;				0FFh	= PC				  
 15592                                  ;				0FEh	= PC/XT, Portable		  
 15593                                  ;				0FDh	= PC/JR 			  
 15594                                  ;				0FCh	= PC/AT				  
 15595                                  ;				0F9h	= Convertable			  
 15596                                  ;				0F8h	= Model 80			  
 15597                                  ;				0E0 thru 0EFh = reserved		  
 15598                                  ;									  
 15599                                  ;	DB	xx		secondary model byte			  
 15600                                  ;				000h	= PC1				  
 15601                                  ;				000h	= PC/XT, Portable		  
 15602                                  ;				000h	= PC/JR 			  
 15603                                  ;				000h	= PC/AT 			  
 15604                                  ;				001h	= PC/AT Model 339		  
 15605                                  ;				003h	= PC/RT				  
 15606                                  ;				000h	= Convertable			  
 15607                                  ;									  
 15608                                  ;	DB	xx		bios revision level			  
 15609                                  ;				00 for first release, subsequent release  
 15610                                  ;				of code with same model byte and	  
 15611                                  ;				secondary model byte require revison level
 15612                                  ;				to increase by one.			  
 15613                                  ;									  
 15614                                  ;	DB	xx		feature information byte 1		  
 15615                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15616                                  ;					 = 0, DMA channel 3 not used	  
 15617                                  ;									  
 15618                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15619                                  ;					 = 0, 2nd Interrupt chip not present
 15620                                  ;									  
 15621                                  ;				00X00000 = 1, Real Time Clock present	  
 15622                                  ;					 = 0, Real Time Clock not present 
 15623                                  ;									  
 15624                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15625                                  ;						called in keyboard interrupt
 15626                                  ;						(Int 09h).		  
 15627                                  ;					 = 0, Keyboard escape sequence not
 15628                                  ;						called. 		  
 15629                                  ;				0000XXXX reserved			  
 15630                                  ;									  
 15631                                  ;	DB	xx		feature information byte 2 - reserved	  
 15632                                  ;									  
 15633                                  ;	DB	xx		feature information byte 2 - reserved	  
 15634                                  ;									  
 15635                                  ;	DB	xx		feature information byte 2 - reserved	  
 15636                                  ;									  
 15637                                  ;	DB	xx		feature information byte 2 - reserved	  
 15638                                  ;									  
 15639                                  
 15640                                  ; 22/03/2019									  
 15641                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15642 00000000 ????                    .bios_sd_leng:		resw 1				  
 15643 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15644                                  .bios_sd_scnd_modelbyte: 
 15645 00000003 ??                      			resb 1					  
 15646 00000004 ??                      			resb 1					  
 15647 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15648 00000006 ????????                			resb 4					  
 15649                                  endstruc					  
 15650                                  									  
 15651                                  ;FeatureByte1	bit map equates 					  
 15652                                  DMAchannel3		equ 10000000b					  
 15653                                  ScndIntController	equ 01000000b					  
 15654                                  RealTimeClock		equ 00100000b					  
 15655                                  KeyEscapeSeq		equ 00010000b					  
 15656                                  					;;End of Modification
 15657                                  
 15658                                  ; ----------------------------------------------------------------------
 15659                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15660                                  ; ----------------------------------------------------------------------
 15661                                  ; 22/03/2019 - Retro DOS v4.0
 15662                                  
 15663                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15664                                  
 15665                                  struc SysInitVars
 15666                                  ; MSDOS 3.3
 15667 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15668 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15669 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15670 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15671 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15672 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15673 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15674 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15675 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15676 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15677 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15678 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15679                                  ; MSDOS 6.0
 15680 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15681 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15682 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15683 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15684                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15685 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15686 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15687 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15688 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15689 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15690 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15691 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15692                                  .size:
 15693                                  endstruc
 15694                                  
 15695                                  ;This is added for more information exchage between DOS, BIOS.
 15696                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15697                                  
 15698                                  ; 22/03/2019
 15699                                  struc SysInitVars_Ext
 15700 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15701 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15702                                  endstruc
 15703                                  
 15704                                  ; 09/06/2018
 15705                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15706                                  SYSI_DPB    equ	0
 15707                                  SYSI_SFT    equ 4
 15708                                  SYSI_CLOCK  equ 8
 15709                                  SYSI_CON    equ 12
 15710                                  SYSI_MAXSEC equ 16
 15711                                  SYSI_BUF    equ 18 		
 15712                                  SYSI_CDS    equ 22
 15713                                  SYSI_FCB    equ 26
 15714                                  SYSI_KEEP   equ 30
 15715                                  SYSI_NUMIO  equ	32
 15716                                  SYSI_NCDS   equ	33
 15717                                  SYSI_DEV    equ 34
 15718                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15719                                  SYSI_ATTR	  equ 38
 15720                                  SYSI_STRAT	  equ 40
 15721                                  SYSI_INTER	  equ 42
 15722                                  SYSI_NAME	  equ 44
 15723                                  SYSI_SPLICE	  equ 52
 15724                                  SYSI_IBMDOS_SIZE  equ 53
 15725                                  SYSI_IFS_DOSCALL@ equ 55
 15726                                  SYSI_IFS	  equ 59
 15727                                  SYSI_BUFFERS	  equ 63
 15728                                  SYSI_BOOT_DRIVE   equ 67
 15729                                  SYSI_DWMOVE	  equ 68
 15730                                  SYSI_EXT_MEM	  equ 69
 15731                                  
 15732                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15733                                  
 15734                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15735                                  
 15736                                  struc BUFFINF 	; BUFFINFO
 15737 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15738 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15739 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15740 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15741                                  
 15742 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15743                                  				; are in HMA
 15744 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15745                                  				;  used to read/write on disks
 15746 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15747 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15748 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15749 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15750 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15751 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15752 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15753 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15754 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15755                                  .size:
 15756                                  endstruc
 15757                                  
 15758                                  ; ----------------------------------------------------------------------
 15759                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15760                                  ; ----------------------------------------------------------------------
 15761                                  ; 22/03/2019 - Retro DOS v4.0
 15762                                  
 15763                                  ;**	CDS - Current Directory Structure
 15764                                  ;
 15765                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15766                                  ; network identifiers for each logical name.  The ID field is used dually,
 15767                                  ; both as net ID and for a cluster number for local devices. In the case
 15768                                  ; of local devices, the cluster number will be -1 if there is a potential
 15769                                  ; of the disk being changed or if the path must be recracked.
 15770                                  ;
 15771                                  ;	Some pathnames have special preambles, such as
 15772                                  ;
 15773                                  ;		\\machine\sharename\...
 15774                                  ;	For these pathnames we can't allow ".." processing to back us
 15775                                  ;	up into the special front part of the name.  The CURDIR_END field
 15776                                  ;	holds the address of the seperator character which marks
 15777                                  ;	the split between the special preamble and the regular
 15778                                  ;	path list; ".." processing isn't allowed to back us up past
 15779                                  ;	(i.e., before) CURDIR_END
 15780                                  ;	For the root, it points at the leading /. For net
 15781                                  ;	assignments it points at the end (nul) of the initial assignment:
 15782                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15783                                  ;	  ^		 ^		     ^
 15784                                  
 15785                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15786                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15787                                  
 15788                                  struc 		curdir_list
 15789                                  ; MSDOS 3.3
 15790 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15791 00000043 ????                    .cdir_flags	resw	1		; various flags
 15792 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15793 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15794 0000004D ????                    .cdir_usr_word	resw	1
 15795 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15796                                  ; MSDOS 6.0
 15797 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15798 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15799 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15800                                  .size:
 15801                                  endstruc
 15802                                  
 15803                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15804                                  						; ASM87 which doesn't allow
 15805                                  						; Size directive as a macro
 15806                                  						; argument
 15807                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15808                                  
 15809                                  ;**	Flag values for CURDIR_FLAGS
 15810                                  
 15811                                  ;Flag word masks
 15812                                  curdir_isnet	EQU	1000000000000000B
 15813                                  curdir_isifs	EQU	1000000000000000B
 15814                                  curdir_inuse	EQU	0100000000000000B
 15815                                  curdir_splice	EQU	0010000000000000B
 15816                                  curdir_local	EQU	0001000000000000B
 15817                                  
 15818                                  ; ----------------------------------------------------------------------
 15819                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15820                                  ; ----------------------------------------------------------------------
 15821                                  ; 25/03/2019 - Retro DOS v4.0
 15822                                  
 15823                                  ; system file table
 15824                                  
 15825                                  ;**	System File Table SuperStructure
 15826                                  ;
 15827                                  ;	The system file table entries are allocated in contiguous groups.
 15828                                  ;	There may be more than one such groups; the SF "superstructure"
 15829                                  ;	tracks the groups.
 15830                                  
 15831                                  struc	SF
 15832 00000000 ????????                .SFLink:	resd	1
 15833 00000004 ????                    .SFCount:	resw	1		; number of entries
 15834 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15835                                  .size:
 15836                                  endstruc
 15837                                  
 15838                                  ;**	System file table entry
 15839                                  ;
 15840                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15841                                  
 15842                                  struc	SF_ENTRY
 15843 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15844                                  					;   if FCB then ref count
 15845 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15846 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15847 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15848                                  					; Bit 15 = 1 if remote file
 15849                                  					;	 = 0 if local file or device
 15850                                  					; Bit 14 = 1 if date/time is not to be
 15851                                  					;   set from clock at CLOSE.  Set by
 15852                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15853                                  					;   other reseters of the dirty bit
 15854                                  					;   (WRITE)
 15855                                  					; Bit 13 = Pipe bit (reserved)
 15856                                  					;
 15857                                  					; Bits 0-7 (old FCB_devid bits)
 15858                                  					; If remote file or local file, bit
 15859                                  					; 6=0 if dirty Device ID number, bits
 15860                                  					; 0-5 if local file.
 15861                                  					; bit 7=0 for local file, bit 7
 15862                                  					;      =1 for local I/O device
 15863                                  					; If local I/O device, bit 6=0 if EOF (input)
 15864                                  					;		Bit 5=1 if Raw mode
 15865                                  					;		Bit 0=1 if console input device
 15866                                  					;		Bit 1=1 if console output device
 15867                                  					;		Bit 2=1 if null device
 15868                                  					;		Bit 3=1 if clock device
 15869 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15870                                  					; to device header if local device,
 15871                                  					; points to net device header if
 15872                                  					; remote
 15873 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15874                                  ;.sf_lstclus:	resw	1 ; *	
 15875 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15876 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15877 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15878 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15879                                  ;
 15880                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15881                                  ; ID
 15882                                  ;
 15883 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15884 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15885 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15886                                  ;
 15887                                  ; End of 7 bytes of file-system specific info.
 15888                                  ;
 15889 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15890                                  					; directory entry.  This is used by
 15891                                  					; close to detect file deleted and
 15892                                  					; disk changed errors.
 15893                                  ; SHARING INFO
 15894 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15895 0000002D ????                    .sf_UID:	resw	1
 15896 0000002F ????                    .sf_PID:	resw	1
 15897 00000031 ????                    .sf_MFT:	resw	1
 15898 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15899 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15900                                  .size:
 15901                                  endstruc
 15902                                  
 15903                                  ; ----------------------------------------------------------------------
 15904                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15905                                  ; ----------------------------------------------------------------------
 15906                                  ; 11/06/2018 - Retro DOS v3.0
 15907                                  
 15908                                  ;Equates for COUNTRY INFORMATION.
 15909                                  SetCountryInfo		EQU	1	;country info
 15910                                  SetUcase		EQU	2	;uppercase table
 15911                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15912                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15913                                  SetFileList		EQU	5	;valid file character list
 15914                                  SetCollate		EQU	6	;collating sequence
 15915                                  SetDBCS 		EQU	7	;double byte character set
 15916                                  SetALL			EQU	-1	;all the entries
 15917                                  
 15918                                  ;DOS country and code page information table structure.
 15919                                  ;Internally, IBMDOS gives a pointer to this table.
 15920                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15921                                  ;this structure.
 15922                                  
 15923                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15924 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15925 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15926 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15927 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15928 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15929 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15930                                  
 15931 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15932 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15933                                  
 15934 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15935 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15936                                  
 15937 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15938 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15939                                  
 15940 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15941 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15942 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15943 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15944 00000067 ????                    .ccDFormat:		resw	1	;date format
 15945 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15946                                  					;5 byte of (currency symbol+0)
 15947 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15948 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15949 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15950 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15951 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15952 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15953 00000078 ??                      .ccTFormat:		resb	1	;time format
 15954 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15955 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15956 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15957                                  .size:
 15958                                  endstruc
 15959                                  
 15960                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15961                                  
 15962                                  ; ======================================================================
 15963                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15964                                  ; ======================================================================
 15965                                  ; 21/03/2019 - Retro DOS v4.0
 15966                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15967                                  
 15968                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15969                                  ; 21/10/2022
 15970                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15971                                  ; 22/10/2022
 15972                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15973                                  ; 09/12/2022
 15974                                  DOSBIOCODESEG equ IOSYSCODESEG
 15975                                  
 15976                                  ; Note: These offset addresses must be chanqed when the code 
 15977                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15978                                  
 15979                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15980                                  
 15981                                  ; 09/12/2022
 15982                                  %if 0
 15983                                  
 15984                                  ; 13/05/2019
 15985                                  
 15986                                  ;IsWin386         equ 08CFh
 15987                                  ;V86_Crit_SetFocus equ 08D0h
 15988                                  ; 21/10/2022
 15989                                  IsWin386          equ 08D0h
 15990                                  V86_Crit_SetFocus equ 08D1h 
 15991                                  
 15992                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15993                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15994                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15995                                  
 15996                                  ;SysinitPresent	  equ 08FCh
 15997                                  ; 21/10/2022
 15998                                  SysinitPresent	  equ 08FDh
 15999                                  
 16000                                  inHMA		  equ 000Dh
 16001                                  xms		  equ 000Eh
 16002                                  ;FreeHMAPtr	  equ 08F6h
 16003                                  ;multrk_flag	  equ 0533h
 16004                                  ;ec35_flag	  equ 0535h
 16005                                  ;EOT		  equ 012Eh
 16006                                  ; 21/10/2022
 16007                                  FreeHMAPtr	  equ 08F7h
 16008                                  multrk_flag	  equ 052Fh
 16009                                  ec35_flag	  equ 0531h
 16010                                  EOT		  equ 012Ch
 16011                                  
 16012                                  ;NextStack	  equ 08BFh
 16013                                  ;IT_StackLoc	  equ 08C5h
 16014                                  ;IT_StackSize	  equ 08C9h
 16015                                  ; 21/10/2022
 16016                                  NextStack	  equ 08C0h
 16017                                  IT_StackLoc	  equ 08C6h
 16018                                  IT_StackSize	  equ 08CAh
 16019                                  
 16020                                  ;MoveDOSIntoHMA	  equ 08F8h
 16021                                  ; 21/10/2022
 16022                                  MoveDOSIntoHMA	  equ 08F9h
 16023                                  
 16024                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 16025                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 16026                                  ; 21/10/2022
 16027                                  INT19SEM equ 0640h ; (iosys5.txt)
 16028                                  I19_LST  equ 0641h ; (iosys5.txt)
 16029                                  
 16030                                  %endif
 16031                                  
 16032                                  ; 09/12/2022
 16033                                  seg_reinit equ _seg_reinit
 16034                                  ec35_flag  equ ec35flag		
 16035                                  INT19SEM   equ int19sem
 16036                                  I19_LST    equ i19_lst
 16037                                  
 16038                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 16039                                  INT19OLD08 equ I19_LST+6
 16040                                  INT19OLD09 equ I19_LST+11
 16041                                  INT19OLD0A equ I19_LST+16
 16042                                  INT19OLD0B equ I19_LST+21
 16043                                  INT19OLD0C equ I19_LST+26
 16044                                  INT19OLD0D equ I19_LST+31
 16045                                  INT19OLD0E equ I19_LST+36
 16046                                  INT19OLD70 equ I19_LST+41
 16047                                  INT19OLD72 equ I19_LST+46
 16048                                  INT19OLD73 equ I19_LST+51
 16049                                  INT19OLD74 equ I19_LST+56
 16050                                  INT19OLD76 equ I19_LST+61
 16051                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16052                                  
 16053                                  ; 09/12/2022
 16054                                  %if 0
 16055                                  
 16056                                  ;keyrd_func	equ 04E9h
 16057                                  ;keysts_func	equ 04EAh
 16058                                  ;t_switch	equ 04F6h
 16059                                  ; 21/10/2022
 16060                                  keyrd_func	equ 04E5h
 16061                                  keysts_func	equ 04E6h
 16062                                  t_switch	equ 04F2h
 16063                                  
 16064                                  ; 22/10/2022
 16065                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16066                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16067                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16068                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16069                                  
 16070                                  %endif
 16071                                  
 16072                                  ; 09/12/2022
 16073                                  BCODESTART	equ BIOSDATAWORD
 16074                                  RE_INIT		equ re_init
 16075                                  
 16076                                  ; ----------------------------------------------------------------------
 16077                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16078                                  ; ----------------------------------------------------------------------
 16079                                  ; 15/04/2019 - Retro DOS v4.0
 16080                                  
 16081                                  CONFIG_BEGIN        equ  '['
 16082                                  CONFIG_BREAK        equ  'C'
 16083                                  CONFIG_BUFFERS      equ  'B'
 16084                                  CONFIG_COMMENT      equ  'Y'
 16085                                  CONFIG_COUNTRY      equ  'Q'
 16086                                  CONFIG_DEVICE       equ  'D'
 16087                                  CONFIG_DEVICEHIGH   equ  'U'
 16088                                  CONFIG_DOS          equ  'H'
 16089                                  CONFIG_DRIVPARM     equ  'P'
 16090                                  CONFIG_FCBS         equ  'X'
 16091                                  CONFIG_FILES        equ  'F'
 16092                                  CONFIG_INCLUDE      equ  'J'
 16093                                  CONFIG_INSTALL      equ  'I'
 16094                                  CONFIG_INSTALLHIGH  equ  'W'
 16095                                  CONFIG_LASTDRIVE    equ  'L'
 16096                                  CONFIG_MENUCOLOR    equ  'R'
 16097                                  CONFIG_MENUDEFAULT  equ  'A'
 16098                                  CONFIG_MENUITEM     equ  'E'
 16099                                  CONFIG_MULTITRACK   equ  'M'
 16100                                  CONFIG_NUMLOCK      equ  'N'
 16101                                  CONFIG_REM          equ  '0'
 16102                                  CONFIG_SEMICOLON    equ  ';'
 16103                                  CONFIG_SET          equ  'V'
 16104                                  CONFIG_SHELL        equ  'S'
 16105                                  CONFIG_STACKS       equ  'K'
 16106                                  CONFIG_SUBMENU      equ  'O'
 16107                                  CONFIG_SWITCHES     equ  '1'
 16108                                  
 16109                                  CONFIG_UNKNOWN      equ  'Z'
 16110                                  
 16111                                  CONFIG_OPTION_QUERY equ 80h
 16112                                  
 16113                                  ; ----------------------------------------------------------------------
 16114                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16115                                  ; ----------------------------------------------------------------------
 16116                                  ; 21/03/2019 - Retro DOS v4.0
 16117                                  
 16118                                  true	equ	0FFFFh
 16119                                  false	equ	0
 16120                                  cr	equ	13
 16121                                  lf	equ	10
 16122                                  tab	equ	9
 16123                                  
 16124                                  multMULT	   equ	4Ah
 16125                                  multMULTGETHMAPTR  equ	1
 16126                                  multMULTALLOCHMA   equ	2
 16127                                  
 16128                                  ;NOEXEC    equ	FALSE
 16129                                  
 16130                                  stacksw    equ	true	;include switchable hardware stacks
 16131                                  mycds_size equ	88	;size of curdir_list. if it is not
 16132                                  			;the same, then will generate compile error.
 16133                                  
 16134                                  entrysize   equ     8
 16135                                  
 16136                                  mincount    equ     8
 16137                                  defaultcount equ    9
 16138                                  maxcount    equ     64
 16139                                  
 16140                                  minsize     equ     32
 16141                                  defaultsize equ     128
 16142                                  maxsize     equ     512
 16143                                  
 16144                                  ;%define allocbyte  byte [es:bp+0]
 16145                                  ;%define intlevel   byte [es:bp+1]
 16146                                  ;%define savedsp    word [es:bp+2]
 16147                                  ;%define savedss    word [es:bp+4]
 16148                                  ;%define newsp	    word [es:bp+6]
 16149                                  
 16150                                  allocbyte   equ     0
 16151                                  intlevel    equ     1
 16152                                  savedsp     equ     2
 16153                                  savedss     equ     4
 16154                                  newsp       equ     6
 16155                                  
 16156                                  free	    equ     0
 16157                                  allocated   equ     1
 16158                                  overflowed  equ     2
 16159                                  clobbered   equ     3
 16160                                  
 16161                                  ;---------------------------------------
 16162                                  ; external variable defined in ibmbio module for multi-track
 16163                                  
 16164                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16165                                  			  ; it on after handling config.sys file as a
 16166                                  			  ; default value,if multrk_flag = multrk_off1.
 16167                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16168                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16169                                  
 16170                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16171                                  
 16172                                  SYSINIT$:
 16173                                  	;IF	STACKSW 
 16174                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16175                                  	; include STKMES.INC	;Fatal stack error message
 16176                                  	;   public Endstackcode
 16177                                  ;Endstackcode	label byte
 16178                                  	;ENDIF
 16179                                  
 16180                                  ; 05/07/2018
 16181                                  ; ----------------------------------------------------------------------
 16182                                  ; 04/06/2018 - Retro DOS v3.0
 16183                                  
 16184                                  ; ----------------------------------------------------------------------
 16185                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16186                                  ; ----------------------------------------------------------------------
 16187                                  
 16188                                  ;	MSStack.inc
 16189                                  ;
 16190                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16191                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16192                                  ;	a standard header structure.
 16193                                  ;	Fyi, the following shows the relations between
 16194                                  ;	the interrupt vector and interrupt level.
 16195                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16196                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16197                                  ;	MSSTACK module modifies the following interrupt vectors
 16198                                  ;	to meet the standard Interrupt Sharing standard;
 16199                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16200                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16201                                  ;	should be initialized to indicat whether this interrupt handler is
 16202                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16203                                  ;	program header is initialized in STKINIT.INC module.
 16204                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16205                                  ;
 16206                                  
 16207                                  ;  User specifies the number of stack elements - default = 9
 16208                                  ;						 minimum = 8
 16209                                  ;						 maximum = 64
 16210                                  ;
 16211                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16212                                  ;
 16213                                  ;  Picks a stack from pool of stacks and switches to it
 16214                                  ;
 16215                                  ;  Calls the previously saved interrupt vector after pushing flags
 16216                                  ;
 16217                                  ;  On return, returns the stack to the stack pool
 16218                                  ;
 16219                                  
 16220                                  ; This is a modification of STACKS:
 16221                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16222                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16223                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16224                                  ;    . Allows system to work if the only stack that got too big was the most
 16225                                  ;      deeply nested one
 16226                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16227                                  ; 4. Does not intercept any interupts on a PCjr.
 16228                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16229                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16230                                  
 16231                                  		;EVEN
 16232                                  ;align 2
 16233                                  		; 21/10/2022
 16234                                  
 16235 00000000 0000                    		dw	0	; spare field but leave these in order
 16236 00000002 0000                    stackcount:	dw	0
 16237 00000004 0000                    stackat: 	dw	0
 16238 00000006 0000                    stacksize:	dw	0
 16239 00000008 0000                    stacks:		dw	0
 16240 0000000A 0000                    		dw	0
 16241                                  
 16242 0000000C [0800]                  firstentry:	dw	stacks
 16243 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16244 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16245                                  
 16246                                  ;***********************************************************************
 16247                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16248                                  
 16249                                  ; ----------------------------------------------------------------------
 16250                                  
 16251 00000012 00000000                old02:	dd	0
 16252                                  
 16253                                  int02:
 16254                                  
 16255                                  ; *********************************************************************
 16256                                  ;
 16257                                  ; this is special support for the pc convertible / nmi handler
 16258                                  ;
 16259                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16260                                  ;	caused by using the "out" instructions to certain ports. when this
 16261                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16262                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16263                                  ;	includes other type of interrupts (hardware and software), and
 16264                                  ;	also includes other type of nmi's. when any nmi has occured,
 16265                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16266                                  ;	the software takes specific steps to allow further interrupting.
 16267                                  ;
 16268                                  ;	for pc convertible, the situation where the nmi is generated by the
 16269                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16270                                  ;	otherwords, it is actually a "restartable exception". in this
 16271                                  ;	case, the software handler must be able to get to the stack in
 16272                                  ;	order to figure out what instruction caused the problem, where
 16273                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16274                                  ;	we will not switch stacks in this situation. this situation is
 16275                                  ;	detected by interrogating port 62h, and checking for a bit value
 16276                                  ;	of 80h. if set, *****do not switch stacks*****.
 16277                                  ;
 16278                                  ; *********************************************************************
 16279                                  
 16280 00000016 50                      	push	ax
 16281 00000017 06                      	push	es
 16282 00000018 B800F0                  	mov	ax,0F000h
 16283 0000001B 8EC0                    	mov	es,ax
 16284                                  	; 02/11/2022
 16285 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16286 00000023 07                      	pop	es
 16287 00000024 750C                    	jne	short normal02
 16288                                  
 16289 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16290                                  				; 0-3: values of DIP switches
 16291                                  				; 5: 1=Timer 2 channel out
 16292                                  				; 6: 1=I/O channel check
 16293                                  				; 7: 1=RAM parity check error occurred.
 16294 00000028 A880                    	test	al,80h
 16295 0000002A 7406                    	jz	short normal02
 16296                                  special02:
 16297 0000002C 58                      	pop	ax
 16298 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16299                                  normal02:
 16300 00000032 58                      	pop	ax
 16301 00000033 E81101                  	call	do_int_stacks
 16302 00000036 [1200]                  	dw	old02
 16303                                  
 16304                                  ; ----------------------------------------------------------------------
 16305                                  
 16306 00000038 00000000                old08:	dd	0
 16307                                  
 16308                                  int08:
 16309 0000003C E80801                  	call	do_int_stacks
 16310 0000003F [3800]                  	dw	old08
 16311                                  
 16312                                  ; ----------------------------------------------------------------------
 16313                                  
 16314 00000041 00000000                old09:	dd	0
 16315                                  
 16316                                  int09:
 16317                                  
 16318                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16319                                  ; as its first instruction for compatibility reasons
 16320                                  
 16321 00000045 EB02                    	jmp	short keyboard_lbl
 16322 00000047 90                      	nop
 16323 00000048 00                      	db	0
 16324                                  
 16325                                  keyboard_lbl:
 16326 00000049 E8FB00                  	call	do_int_stacks
 16327 0000004C [4100]                  	dw	old09
 16328                                  
 16329                                  ; ----------------------------------------------------------------------
 16330                                  
 16331 0000004E 00000000                old70:	dd	0
 16332                                  
 16333                                  int70:
 16334 00000052 E8F200                  	call	do_int_stacks
 16335 00000055 [4E00]                  	dw	old70
 16336                                  
 16337                                  ; ----------------------------------------------------------------------
 16338                                  
 16339                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16340                                  ;public	int&a
 16341                                  ;public	old&a
 16342                                  ;public	firstflag&a
 16343                                  ;int&a	proc	far
 16344                                  ;	jmp	short entry_int&a&_stk
 16345                                  ;old&a	dd	  0		;forward pointer
 16346                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16347                                  ;firstflag&a db   0		;the firstly hooked.
 16348                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16349                                  ;	db	7 dup (0)	;reserved for future.
 16350                                  ;entry_int&a&_stk:
 16351                                  ;	call	do_int_stacks
 16352                                  ;	dw	old&a
 16353                                  ;intret_&a:
 16354                                  ;	iret
 16355                                  ;int&a	endp
 16356                                  ;	endm
 16357                                  
 16358                                  ; ----------------------------------------------------------------------
 16359                                  
 16360                                  int0A:
 16361 00000057 EB10                    	jmp	short entry_int0A_stk
 16362 00000059 00000000                old0A:	dd	0	
 16363 0000005D 4B42                    	dw	424Bh
 16364                                  firstflag0A:
 16365 0000005F 00                      	db	0
 16366 00000060 EB0C                    	jmp	short intret_0A
 16367 00000062 00<rep 7h>              	times	7 db 0
 16368                                  
 16369                                  entry_int0A_stk:
 16370 00000069 E8DB00                  	call	do_int_stacks
 16371 0000006C [5900]                  	dw	old0A
 16372                                  intret_0A:
 16373 0000006E CF                      	iret
 16374                                  
 16375                                  ; ----------------------------------------------------------------------
 16376                                  
 16377                                  int0B:
 16378 0000006F EB10                    	jmp	short entry_int0B_stk
 16379 00000071 00000000                old0B:	dd	0	
 16380 00000075 4B42                    	dw	424Bh
 16381                                  firstflag0B:
 16382 00000077 00                      	db	0
 16383 00000078 EB0C                    	jmp	short intret_0B
 16384 0000007A 00<rep 7h>              	times	7 db 0
 16385                                  
 16386                                  entry_int0B_stk:
 16387 00000081 E8C300                  	call	do_int_stacks
 16388 00000084 [7100]                  	dw	old0B
 16389                                  intret_0B:
 16390 00000086 CF                      	iret
 16391                                  
 16392                                  ; ----------------------------------------------------------------------
 16393                                  
 16394                                  int0C:
 16395 00000087 EB10                    	jmp	short entry_int0C_stk
 16396 00000089 00000000                old0C:	dd	0	
 16397 0000008D 4B42                    	dw	424Bh
 16398                                  firstflag0C:
 16399 0000008F 00                      	db	0
 16400 00000090 EB0C                    	jmp	short intret_0C
 16401 00000092 00<rep 7h>              	times	7 db 0
 16402                                  
 16403                                  entry_int0C_stk:
 16404 00000099 E8AB00                  	call	do_int_stacks
 16405 0000009C [8900]                  	dw	old0C
 16406                                  intret_0C:
 16407 0000009E CF                      	iret
 16408                                  
 16409                                  ; ----------------------------------------------------------------------
 16410                                  
 16411                                  int0D:
 16412 0000009F EB10                    	jmp	short entry_int0D_stk
 16413 000000A1 00000000                old0D:	dd	0	
 16414 000000A5 4B42                    	dw	424Bh
 16415                                  firstflag0D:
 16416 000000A7 00                      	db	0
 16417 000000A8 EB0C                    	jmp	short intret_0D
 16418 000000AA 00<rep 7h>              	times	7 db 0
 16419                                  
 16420                                  entry_int0D_stk:
 16421 000000B1 E89300                  	call	do_int_stacks
 16422 000000B4 [A100]                  	dw	old0D
 16423                                  intret_0D:
 16424 000000B6 CF                      	iret
 16425                                  
 16426                                  ; ----------------------------------------------------------------------
 16427                                  
 16428                                  int0E:
 16429 000000B7 EB10                    	jmp	short entry_int0E_stk
 16430 000000B9 00000000                old0E:	dd	0	
 16431 000000BD 4B42                    	dw	424Bh
 16432                                  firstflag0E:
 16433 000000BF 00                      	db	0
 16434 000000C0 EB0C                    	jmp	short intret_0E
 16435 000000C2 00<rep 7h>              	times	7 db 0
 16436                                  
 16437                                  entry_int0E_stk:
 16438 000000C9 E87B00                  	call	do_int_stacks
 16439 000000CC [B900]                  	dw	old0E
 16440                                  intret_0E:
 16441 000000CE CF                      	iret
 16442                                  
 16443                                  ; ----------------------------------------------------------------------
 16444                                  
 16445                                  int72:
 16446 000000CF EB10                    	jmp	short entry_int72_stk
 16447 000000D1 00000000                old72:	dd	0	
 16448 000000D5 4B42                    	dw	424Bh
 16449                                  firstflag72:
 16450 000000D7 00                      	db	0
 16451 000000D8 EB0C                    	jmp	short intret_72
 16452 000000DA 00<rep 7h>              	times	7 db 0
 16453                                  
 16454                                  entry_int72_stk:
 16455 000000E1 E86300                  	call	do_int_stacks
 16456 000000E4 [D100]                  	dw	old72
 16457                                  intret_72:
 16458 000000E6 CF                      	iret
 16459                                  
 16460                                  ; ----------------------------------------------------------------------
 16461                                  
 16462                                  int73:
 16463 000000E7 EB10                    	jmp	short entry_int73_stk
 16464 000000E9 00000000                old73:	dd	0	
 16465 000000ED 4B42                    	dw	424Bh
 16466                                  firstflag73:
 16467 000000EF 00                      	db	0
 16468 000000F0 EB0C                    	jmp	short intret_73
 16469 000000F2 00<rep 7h>              	times	7 db 0
 16470                                  
 16471                                  entry_int73_stk:
 16472 000000F9 E84B00                  	call	do_int_stacks
 16473 000000FC [E900]                  	dw	old73
 16474                                  intret_73:
 16475 000000FE CF                      	iret
 16476                                  
 16477                                  ; ----------------------------------------------------------------------
 16478                                  
 16479                                  int74:
 16480 000000FF EB10                    	jmp	short entry_int74_stk
 16481 00000101 00000000                old74:	dd	0	
 16482 00000105 4B42                    	dw	424Bh
 16483                                  firstflag74:
 16484 00000107 00                      	db	0
 16485 00000108 EB0C                    	jmp	short intret_74
 16486 0000010A 00<rep 7h>              	times	7 db 0
 16487                                  
 16488                                  entry_int74_stk:
 16489 00000111 E83300                  	call	do_int_stacks
 16490 00000114 [0101]                  	dw	old74
 16491                                  intret_74:
 16492 00000116 CF                      	iret
 16493                                  
 16494                                  ; ----------------------------------------------------------------------
 16495                                  
 16496                                  int76:
 16497 00000117 EB10                    	jmp	short entry_int76_stk
 16498 00000119 00000000                old76:	dd	0	
 16499 0000011D 4B42                    	dw	424Bh
 16500                                  firstflag76:
 16501 0000011F 00                      	db	0
 16502 00000120 EB0C                    	jmp	short intret_76
 16503 00000122 00<rep 7h>              	times	7 db 0
 16504                                  
 16505                                  entry_int76_stk:
 16506 00000129 E81B00                  	call	do_int_stacks
 16507 0000012C [1901]                  	dw	old76
 16508                                  intret_76:
 16509 0000012E CF                      	iret
 16510                                  
 16511                                  ; ----------------------------------------------------------------------
 16512                                  
 16513                                  int77:
 16514 0000012F EB10                    	jmp	short entry_int77_stk
 16515 00000131 00000000                old77:	dd	0	
 16516 00000135 4B42                    	dw	424Bh
 16517                                  firstflag77:
 16518 00000137 00                      	db	0
 16519 00000138 EB0C                    	jmp	short intret_77
 16520 0000013A 00<rep 7h>              	times	7 db 0
 16521                                  
 16522                                  entry_int77_stk:
 16523 00000141 E80300                  	call	do_int_stacks
 16524 00000144 [3101]                  	dw	old77
 16525                                  intret_77:
 16526 00000146 CF                      	iret
 16527                                  
 16528                                  ; ----------------------------------------------------------------------
 16529                                  
 16530                                  ;********************************************************************
 16531                                  ;common routines
 16532                                  ;********************************************************************
 16533                                  
 16534                                  ; do interrupt stack switching. the fake return address holds
 16535                                  ; a pointer to the far-pointer of the actual interrupt
 16536                                  ; service routine
 16537                                  
 16538                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16539                                  ; 21/03/2019 - Retro DOS v4.0
 16540                                  
 16541                                  ;allocbyte   equ 0
 16542                                  ;intlevel    equ 1
 16543                                  ;savedsp     equ 2
 16544                                  ;savedss     equ 4
 16545                                  ;newsp       equ 6
 16546                                  
 16547                                  do_int_stacks:
 16548 00000147 50                      	push	ax
 16549 00000148 55                      	push	bp
 16550 00000149 06                      	push	es
 16551 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16552 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16553 00000154 B001                    	mov	al,allocated ; 1
 16554                                  	; 21/10/2022
 16555                                  	;xchg	[es:bp+allocbyte],al 
 16556                                  	; 11/12/2022
 16557 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16558 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16559 0000015C 754F                    	jne	short notfree02
 16560                                  
 16561 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16562                                  
 16563                                  found02:
 16564 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16565 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16566                                  
 16567 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16568                                  
 16569 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16570                                  	; 21/10/2022
 16571                                  	;mov	bp,[es:bp+6]
 16572                                  	; 11/12/2022
 16573                                  	;cmp	[es:bp+0],ax	
 16574 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16575 00000176 7542                    	jne	short foundbad02
 16576                                  
 16577                                  	;mov	ax,es			; point ss,sp to the new stack
 16578                                  	;mov	es,bp
 16579                                  	;mov	bp,sp
 16580                                  	;mov	bp,[bp+6]
 16581                                  	;mov	ss,ax
 16582                                  	;mov	sp,es
 16583                                  	;mov	es,ax
 16584                                  	;mov	bp,[cs:bp]
 16585                                  
 16586                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16587 00000178 55                      	push    bp
 16588 00000179 89E5                    	mov     bp,sp
 16589 0000017B 8B4608                  	mov     ax,[bp+8]
 16590 0000017E 5D                      	pop     bp
 16591 0000017F 06                      	push    es
 16592 00000180 17                      	pop     ss
 16593 00000181 89EC                    	mov     sp,bp
 16594 00000183 89C5                    	mov     bp,ax
 16595                                  	; 11/12/2022
 16596                                  	;mov	bp,[cs:bp+0]	
 16597 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16598                                  
 16599 00000189 9C                      	pushf				; go execute the real interrupt handler
 16600                                  	; 11/12/2022
 16601 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16602                                  	; 21/10/2022
 16603                                  	;call	far [cs:bp+0]
 16604                                  
 16605 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16606                                  	; 11/12/2022
 16607 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16608                                  	; 21/10/2022
 16609                                  	;mov	bp,[es:bp+0]
 16610 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16611 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16612                                  
 16613                                  	; 11/12/2022
 16614                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16615                                  	; 21/10/2022
 16616 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16617 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16618                                  
 16619 000001A6 07                      	pop	es
 16620 000001A7 5D                      	pop	bp			; saved on entry
 16621 000001A8 58                      	pop	ax			; saved on entry
 16622 000001A9 83C402                  	add	sp,2
 16623 000001AC CF                      	iret				; done with this interrupt
 16624                                  
 16625                                  notfree02:
 16626 000001AD 3C01                    	cmp	al,allocated		; error flag
 16627 000001AF 7404                    	je	short findnext02	;  no, continue
 16628                                  	; 11/12/2022
 16629                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16630                                  	; 21/10/2022
 16631 000001B1 26864600                	xchg	[es:bp],al
 16632                                  
 16633                                  findnext02:
 16634 000001B5 E81200                  	call	longpath
 16635 000001B8 EBAA                    	jmp	short found02
 16636                                  
 16637                                  foundbad02:
 16638 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16639 000001BF 72F4                    	jc	short findnext02
 16640 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16641                                  	; 11/12/2022
 16642                                  	;mov	byte [es:bp+allocbyte],clobbered
 16643                                  	; 21/10/2022
 16644 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16645 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16646                                  
 16647                                  ; ----------------------------------------------------------------------
 16648                                  
 16649                                  ; Common routines
 16650                                  
 16651                                  longpath:
 16652                                  	; 21/03/2019
 16653 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16654                                  lploopp:
 16655                                  	; 11/12/2022
 16656                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16657                                  	; 21/10/2022
 16658 000001CF 26807E0000              	cmp	byte [es:bp],free
 16659 000001D4 7512                    	jne	short inuse		;  no, try next one
 16660                                  
 16661 000001D6 B001                    	mov	al,allocated
 16662                                  	; 11/12/2022
 16663                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16664                                  	; 21/10/2022
 16665 000001D8 26864600                	xchg	[es:bp],al
 16666 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16667 000001DE 7414                    	je	short found		;  yes, go use it
 16668                                  
 16669 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16670 000001E2 7404                    	je	short inuse		;  no, check the next one
 16671                                  
 16672                                  	; 11/12/2022
 16673                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16674                                  	; 21/10/2022
 16675 000001E4 26884600                	mov	[es:bp],al
 16676                                  inuse:
 16677 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16678 000001ED 7406                    	je	short fatal
 16679 000001EF 83ED08                  	sub	bp,entrysize
 16680 000001F2 EBDB                    	jmp	short lploopp
 16681                                  found:
 16682 000001F4 C3                      	retn
 16683                                  fatal:
 16684 000001F5 1E                      	push	ds
 16685 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16686 000001F9 8ED8                    	mov	ds,ax
 16687 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16688 00000200 1F                      	pop	ds
 16689 00000201 7504                    	jne	short skip_nmis
 16690                                  
 16691 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16692 00000205 E672                    	out	72h,al
 16693                                  
 16694                                  skip_nmis:
 16695 00000207 FA                      	cli				; disable and mask
 16696 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16697 0000020A E621                    	out	021h,al
 16698 0000020C E6A1                    	out	0A1h,al
 16699                                  
 16700 0000020E 8CCE                    	mov	si,cs
 16701 00000210 8EDE                    	mov	ds,si
 16702 00000212 BE[3902]                	mov	si,fatal_msg
 16703                                  ;SR;
 16704                                  ;   We set all foci to this VM to issue the stack failure message
 16705                                  ;
 16706 00000215 50                      	push	ax
 16707 00000216 1E                      	push	ds
 16708                                  	;;mov	ax,Bios_Data ; 0070h
 16709                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16710                                  	; 21/10/2022
 16711 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16712 0000021A 8ED8                    	mov	ds,ax
 16713                                  
 16714                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16715 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16716 00000221 1F                      	pop	ds
 16717 00000222 58                      	pop	ax
 16718 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16719                                  
 16720                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16721                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16722                                  	; 21/10/2022
 16723 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16724                                  ;
 16725                                  ;SR; We do not bother about the returned status of this call. 
 16726                                  ;
 16727                                  fatal_loop:
 16728 0000022A AC                      	lodsb
 16729 0000022B 3C24                    	cmp	al,'$'
 16730 0000022D 7408                    	je	short fatal_done
 16731                                  
 16732 0000022F B307                    	mov	bl,7
 16733 00000231 B40E                    	mov	ah,14
 16734 00000233 CD10                    	int	10h			; whoops, this enables ints
 16735 00000235 EBF3                    	jmp	short fatal_loop
 16736                                  
 16737                                  fatal_done:
 16738 00000237 EBFE                    	jmp	short fatal_done
 16739                                  
 16740                                  
 16741                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16742                                  ; ----------------------------------------------------------------------
 16743                                  ;	include msbio.cl5		; fatal stack error message
 16744                                  
 16745                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16746                                  
 16747                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16748                                  ; ----------------------------------------------------------------------
 16749                                  ; 04/06/2018 - Retro DOS v3.0
 16750                                  
 16751                                  fatal_msg:
 16752 00000239 0D0A                    	db	0Dh,0Ah
 16753 0000023B 070D0A                  	db	7,0Dh,0Ah
 16754 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16754 00000247 737461636B206F7665-
 16754 00000250 72666C6F770D0A     
 16755 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16755 00000260 6C7465640D0A24     
 16756                                  
 16757                                  endstackcode:
 16758                                  
 16759                                  ; ----------------------------------------------------------------------
 16760                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16761                                  ; ----------------------------------------------------------------------
 16762                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16763                                  
 16764                                  ; 22/03/2019 - Retro DOS v4.0
 16765                                  
 16766                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16767                                  
 16768                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16769                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16770                                  
 16771                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16772                                  ; ----------------------------------------------------------------------
 16773                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16774                                  
 16775                                  SYSINIT:	
 16776 00000267 E91C02                          JMP	GOINIT
 16777                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16778                                  
 16779                                  ; ----------------------------------------------------------------------
 16780                                  
 16781                                  struc DDHighInfo
 16782 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16783 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16784 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16785                                  endstruc
 16786                                  
 16787                                  ; 22/03/2019 - Retro DOS v4.0
 16788                                  
 16789 0000026A 00                      runhigh: db	0
 16790                                  
 16791                                  ; 02/11/2022
 16792                                  ;align 4
 16793                                  
 16794                                  DOSINFO: 
 16795 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16796                                  ;MSDOS:
 16797                                  dos_temp_location: ; dword ; MSDOS 6.0
 16798                                  dosinit:		; MSDOS 6.0
 16799 0000026F 0000                    	dw	0
 16800                                  
 16801                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16802                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16803                                  ;	dw	0
 16804                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16805                                  
 16806                                  CURRENT_DOS_LOCATION:
 16807 00000271 0000                    	dw	0
 16808                                  
 16809                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16810                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16811                                  
 16812                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16813                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16814                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16815                                  
 16816                                  DEVICE_LIST:
 16817 00000273 00000000                	dd	0
 16818                                  
 16819                                  ; 04/06/2018 - Retro DOS v3.0
 16820                                  ; 28/03/2018
 16821                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16822                                  ;
 16823                                  sysi_country:	
 16824 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16825                                  
 16826                                  ; MSDOS 6.0
 16827 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16828                                  
 16829 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16830 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16831                                  
 16832 00000283 0000                    def_php:	dw	0
 16833                                  
 16834                                  ; M022--
 16835                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16836                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16837                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16838                                  ;  the new home.
 16839                                  
 16840                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16841                                  ; 21/10/2022
 16842                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16843                                  
 16844                                  ; 22/10/2022
 16845                                  seg_reinit_ptr:	; label dword
 16846 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16847                                  temp_bcode_seg:
 16848                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16849                                  		; 22/10/2022
 16850 00000287 9D02                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16851                                  
 16852                                  fake_floppy_drv:
 16853 00000289 00                      		db	0	; set to 1 if this machine
 16854                                  				; does not have any floppies!!!
 16855                                  
 16856                                  ; Internal Stack Parameters
 16857                                  
 16858 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16859 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16860 0000028E 00000000                stack_addr:	dd	0	
 16861                                  
 16862                                  ; 05/06/2018 - Retro DOS v3.0
 16863                                  
 16864                                  ; various default values
 16865                                  
 16866 00000292 0100                    MEMORY_SIZE:	dw	1
 16867                                  
 16868                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16869                                  
 16870 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16871 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16872 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16873 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16874 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16875                                  
 16876 0000029D 08                      FILES:	db	8	; enough files for pipe
 16877 0000029E 04                      FCBS:	db	4	; performance for recycling
 16878 0000029F 00                      KEEP:	db	0	; keep original set
 16879 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16880                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16881                                  ;CONFBOT: dw	0
 16882                                  ;ALLOCLIM: dw	0
 16883                                  CONFBOT: ; 02/11/2022
 16884 000002A1 0000                    top_of_cdss: dw 0
 16885                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16886 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16887                                  
 16888 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16889                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16890                                  ; (SYSINIT:02A9h)
 16891                                  command_line:
 16892 000002A9 0200                    	db	2,0
 16893 000002AB 50                      	db	'P'
 16894 000002AC 00                      	db	0
 16895 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16896                                  ; (SYSINIT:0329h)
 16897 00000329 00                      ZERO:	db	0
 16898 0000032A 00                      sepchr:	db	0
 16899 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16900 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16901 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16902                                  
 16903 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16904 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16905                                  
 16906 00000339 0000                    buf_prev_off:	dw	0
 16907                                  
 16908                                          ;IF      NOT NOEXEC
 16909                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16910                                          ;ENDIF
 16911                                  
 16912                                  ; 01/05/2018
 16913                                  COMEXE:
 16914 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16915 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16916 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16917 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16918 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16919 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16920 00000347 0000                    		dw	0
 16921                                  
 16922                                  ; variables for install= command.
 16923                                  
 16924 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16925                                  					;  indicating the pass number
 16926                                  					; 0 - do scan for DOS=HIGH/LOW
 16927                                  					; 1 - load device drivers
 16928                                  					; 2 - was to load IFS
 16929                                  					;      now it is unused
 16930                                  					; 3 - do install=
 16931                                  					; >3 - nop
 16932 0000034A 0000                    install_flag:	dw	0
 16933                                  
 16934                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16935                                  has_installed	equ	00000010b	; sysinit_base installed.
 16936                                  
 16937 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16938 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16939 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16940 00000356 0000                    checksum:	dw	0		; used by sum_up
 16941                                  
 16942 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16943 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16944 0000036D 20                      ldexec_start:	db	' '
 16945 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16946                                  
 16947                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16948                                  
 16949                                  instexe:
 16950 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16951 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16952 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16953 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16954 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16955 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16956 000003CA 0000                    		dw	0
 16957                                  
 16958                                  ; variables for comment=
 16959                                  
 16960 000003CC 00                      com_level:	db	0		; level of " " in command line
 16961 000003CD 00                      cmmt:		db	0		; length of comment string token
 16962 000003CE 00                      cmmt1:		db	0		; token
 16963 000003CF 00                      cmmt2:		db	0		; token
 16964 000003D0 00                      cmd_indicator:	db	0
 16965 000003D1 00                      donotshownum:	db	0
 16966                                  
 16967 000003D2 0000                    count:		dw	0
 16968 000003D4 0000                    org_count:	dw	0
 16969 000003D6 0000                    chrptr:		dw	0
 16970 000003D8 0000                    cntryfilehandle: dw	0
 16971 000003DA 0000                    old_area:	dw	0
 16972 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16973                                  
 16974                                  bucketptr: ; label dword
 16975                                  bufptr:	   ; label dword		; leave this stuff in order!
 16976 000003DE 0000                    memlo:	dw	0
 16977                                  prmblk:	   ; label word
 16978 000003E0 0000                    memhi:	dw	0
 16979 000003E2 0000                    ldoff:	dw	0
 16980 000003E4 0000                    area:	dw	0
 16981                                  
 16982                                  ; Following is the request packet used to call INIT routines for 
 16983                                  ; all device drivers. Some fields may be accessed individually in
 16984                                  ; the code, and hence have individual labels, but they should not
 16985                                  ; be separated.
 16986                                  
 16987 000003E6 18                      packet:	db	24			; was 22
 16988 000003E7 00                      	db	0
 16989 000003E8 00                      	db	0			; initialize code
 16990 000003E9 0000                    	dw	0
 16991 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16992                                  
 16993 000003F3 00                      unitcount:	db	0
 16994 000003F4 00000000                break_addr:	dd	0
 16995 000003F8 00000000                bpb_addr:	dd	0
 16996                                  drivenumber:	; 22/10/2022
 16997 000003FC 00                      devdrivenum:	db	0 
 16998 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16999                                  
 17000                                  ; end of request packet
 17001                                  
 17002                                  ;drivenumber:	db	0  ; 22/03/2019
 17003                                  
 17004                                  toomanydrivesflag:
 17005 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 17006                                  align 2
 17007                                  
 17008                                  BCodeSeg:	; 21/10/2022
 17009 00000400 9D02                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 17010                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 17011                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 17012                                  
 17013                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17014                                  ;; 19/04/2019
 17015                                  ;_timer_lw_:
 17016                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 17017                                  	
 17018                                  ;SR;
 17019                                  ; This is the communication block between the DOS and the BIOS. It starts at
 17020                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 17021                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 17022                                  ;is passed to DOS as part of the DOSINIT call.
 17023                                  ;
 17024                                  
 17025                                  BiosComBlock:
 17026                                  	;dd	Bios_Data:SysinitPresent 
 17027                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 17028 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 17029                                  	;dw	KERNEL_SEGMENT ; 0070h
 17030                                  	; 21/10/2022
 17031 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 17032                                  
 17033                                  ;align 2
 17034                                  
 17035                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 17036                                  tempstack:	
 17037 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 17038                                  
 17039                                  ; ----------------------------------------------------------------------------
 17040                                  
 17041                                  	; 22/10/2022 - Retro DOS v4.0
 17042                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17043                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17044                                  	; 12/12/2022
 17045                                  	; 22/03/2019 - Retro DOS v4.0
 17046                                  	; 06/07/2018
 17047                                  	; 04/06/2018 - Retro DOS v3.0
 17048                                  ; before doing anything else, let's set the model byte
 17049 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 17050 00000488 CD15                    	int	15h			; *
 17051 0000048A 7216                    	jc	short no_rom_config
 17052                                  
 17053                                  	;cmp	ah,0			; double check
 17054                                  	;jne	short no_rom_config
 17055                                  	; 04/09/2023
 17056 0000048C 08E4                    	or	ah,ah
 17057 0000048E 7512                    	jnz	short no_rom_config
 17058 00000490 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17059 00000494 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 17060 00000498 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17061 0000049C 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 17062                                  	;jmp	short SYSIN
 17063                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17064 000004A0 EB2C                    	jmp	short move_myself
 17065                                  
 17066                                  no_rom_config:				; Old ROM
 17067 000004A2 B800F0                  	mov	ax,0F000h
 17068 000004A5 8ED8                    	mov	ds,ax
 17069 000004A7 A0FEFF                  	mov	al,[0FFFEh]
 17070 000004AA 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17071                                  
 17072                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17073                                  ; execute the equipment determination interrupt and then
 17074                                  ; check the returned value to see if we have any floppy drives
 17075                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17076                                  ; see the at tech ref bios listings for help on the equipment
 17077                                  ; flag interrupt (11h)	
 17078                                  
 17079                                  	; 22/10/2022
 17080                                  check_for_fake_floppy:			; entry point for rom_config above
 17081 000004AE CD11                    	int	11h			; check equipment flag
 17082                                  
 17083                                  	; 12/12/2022
 17084 000004B0 A801                    	test	al,1		
 17085                                  	;test	ax,1			; have any floppies?
 17086 000004B2 751A                    	jnz	short move_myself	; yes,normal system
 17087                                  
 17088                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17089                                  ; whether it is an old ROM BIOS or a new one
 17090                                  ;
 17091                                  ; WARNING !!!
 17092                                  ;
 17093                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17094                                  ; here will require an equivalent modification in MSINIT.ASM also
 17095                                  
 17096 000004B4 06                      	push	es
 17097                                  
 17098 000004B5 30C9                    	xor	cl,cl	
 17099 000004B7 B408                    	mov	ah,8			; get disk parameters
 17100 000004B9 B200                    	mov	dl,0			; of drive 0
 17101 000004BB CD13                    	int	13h
 17102                                  
 17103 000004BD 07                      	pop	es
 17104                                  
 17105 000004BE 720E                    	jc	short move_myself	; if error lets assume that the
 17106                                  					;  ROM BIOS lied
 17107                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 17108                                  	;je	short move_myself
 17109                                  	; 04/09/2023
 17110 000004C0 08C9                    	or	cl,cl
 17111 000004C2 740A                    	jz	short move_myself
 17112                                  
 17113 000004C4 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17114 000004C6 7506                    	jnz	short move_myself
 17115                                  
 17116 000004C8 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17117                                  
 17118                                  move_myself:
 17119 000004CE FC                      	cld				; set up move
 17120 000004CF 31F6                    	xor	si,si
 17121 000004D1 89F7                    	mov	di,si
 17122                                  
 17123                                  	; 12/12/2022
 17124 000004D3 0E                      	push	cs
 17125 000004D4 1F                      	pop	ds
 17126                                  
 17127                                  	;mov	cx,[cs:MEMORY_SIZE]
 17128 000004D5 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17129                                  
 17130                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17131                                  ;;;	if	msver
 17132                                  ;	cmp	cx,1		; 1 means do scan
 17133                                  ;	jnz	short noscan
 17134                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17135                                  ;	xor	bx,bx
 17136                                  ;
 17137                                  ;memscan:inc	cx
 17138                                  ;	jz	setend
 17139                                  ;	mov	ds,cx
 17140                                  ;	mov	al,[bx]
 17141                                  ;	not	al
 17142                                  ;	mov	[bx],al
 17143                                  ;	cmp	al,[bx]
 17144                                  ;	not	al
 17145                                  ;	mov	[bx],al
 17146                                  ;	jz	short memscan
 17147                                  ;setend:
 17148                                  ;	mov	cs:[memory_size],cx
 17149                                  ;;;	endif
 17150                                  
 17151                                  ;noscan: 				; cx is mem size in para
 17152                                  ;;
 17153                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17154                                  ;;		  before we try to run.
 17155                                  ;;	       b) in any case, we should check for sufficient memory and give
 17156                                  ;;		  an appropriate error diagnostic if there isn't enough
 17157                                  ;
 17158                                  ;	push	cs
 17159                                  ;	pop	ds
 17160                                  ;
 17161                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17162                                  ;;	  that way it would be easier to slide them down home in a minimal
 17163                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17164                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17165                                  ;;	  temporary home and the final one.  the problem with doing that
 17166                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17167                                  ;
 17168                                  ;	dec	cx			; one para for an arena at end of mem
 17169                                  ;					; in case of UMBs
 17170                                  
 17171                                  	; 22/10/2022
 17172                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17173                                  
 17174                                  	; 12/12/2022
 17175                                  	;push	cs
 17176                                  	;pop	ds
 17177                                  
 17178 000004D9 49                      	dec	cx
 17179                                  
 17180                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17181                                  
 17182 000004DA 31DB                    	xor	bx,bx
 17183 000004DC 8EC3                    	mov	es,bx
 17184 000004DE 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17185 000004E3 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17186 000004E8 26817F035250            	cmp	word [es:bx+3],'RP'
 17187 000004EE 751B                    	jne	short NoRPL
 17188 000004F0 26807F054C              	cmp	byte [es:bx+5],'L'
 17189 000004F5 7514                    	jne	short NoRPL
 17190                                  
 17191 000004F7 89CA                    	mov	dx,cx			; get TOM into DX
 17192 000004F9 52                      	push	dx
 17193 000004FA B8064A                  	mov	ax,4A06h
 17194                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17195 000004FD CD2F                    	int	2Fh			; Get new TOM from any RPL
 17196 000004FF 58                      	pop	ax
 17197 00000500 89D1                    	mov	cx,dx
 17198 00000502 39C2                    	cmp	dx,ax
 17199 00000504 7405                    	je	short NoRPL
 17200                                  	
 17201                                  	; 11/12/2022
 17202                                  	; ds = cs
 17203 00000506 8916[9402]              	mov	[RPLMemTop],dx
 17204                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17205                                  	;mov	[cs:RPLMemTop],dx
 17206                                  	
 17207 0000050A 49                      	dec	cx
 17208                                  NoRPL:
 17209 0000050B B8[0038]                	mov	ax,SI_end		; need this much room for sysinit
 17210                                  					; (SI_end == sysinit code size)
 17211 0000050E E8B306                  	call	off_to_para
 17212 00000511 29C1                    	sub	cx,ax
 17213                                  
 17214                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17215                                  ; code above sysinit in memory
 17216                                  ;
 17217 00000513 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 17218                                  
 17219 00000517 B8D019                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17220 0000051A E8A706                  	call	off_to_para		; leave this much room for BIOS code
 17221 0000051D 29C1                    	sub	cx,ax
 17222 0000051F 8EC1                    	mov	es,cx			; offset where sysinit will be located
 17223                                  
 17224 00000521 B9[0038]                	mov	cx,SI_end		; (sysinit code size)
 17225 00000524 D1E9                    	shr	cx,1			; divide by 2 to get words
 17226 00000526 F3A5                    	rep	movsw			; relocate sysinit
 17227                                  
 17228 00000528 06                      	push	es			; push relocated segment
 17229 00000529 B8[2E05]                	mov	ax,SYSIN
 17230 0000052C 50                      	push	ax			; push relocated entry point
 17231                                  
 17232 0000052D CB                      	retf				; far jump to relocated sysinit
 17233                                  
 17234                                  ; ----------------------------------------------------------------------------
 17235                                  
 17236                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17237                                  
 17238                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17239                                  	; (SYSINIT:0533h)
 17240                                  SYSIN:
 17241                                  	; Retro DOS 4.0 - 22/03/2019
 17242                                  	; Retro DOS 2.0 - 25/02/2018
 17243                                  
 17244                                  	; 23/04/2019
 17245                                  	;;mov	ax,Bios_Data
 17246                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17247                                  	; 21/10/2022
 17248 0000052E B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17249 00000531 8ED8                    	mov	ds,ax
 17250 00000533 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17251 00000537 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17252                                  
 17253                                  ; first move the MSDOS.SYS image up to a harmless place 
 17254                                  ; on top of our new sysinitseg
 17255                                  
 17256                                  	; 22/10/2022
 17257 0000053C B8[0038]                	mov	ax,SI_end		; how big is sysinitseg?
 17258 0000053F E88206                  	call	off_to_para
 17259 00000542 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17260 00000544 01C8                    	add	ax,cx
 17261 00000546 8EC0                    	mov	es,ax
 17262                                  	
 17263 00000548 31F6                    	xor	si,si
 17264 0000054A 89F7                    	mov	di,si
 17265                                  
 17266 0000054C 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17267                                  
 17268                                  	;mov	ax,cs	
 17269                                  	;mov	ds,ax
 17270                                  
 17271                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17272                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17273                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17274                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17275                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17276                                  
 17277                                  	; 22/10/2022
 17278 00000551 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17279 00000554 F3A5                    	rep     movsw
 17280 00000556 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17281                                  
 17282                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17283                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17284                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17285                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17286                                  
 17287                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17288                                  	;mov	ax,cs
 17289                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17290                                  	;mov	ds,ax
 17291                                  
 17292                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17293                                  
 17294                                  ;	; 24/04/2019 
 17295                                  ;;ifndef ROMDOS
 17296                                  ;	mov	ax,[es:3] 		; get offset of dos
 17297                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17298                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17299                                  ;	call	off_to_para		; subtract this much from segment
 17300                                  ;	; 23/04/2019
 17301                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17302                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17303                                  ;;else
 17304                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17305                                  ;;
 17306                                  ;;endif ; ROMDOS
 17307                                  
 17308                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17309                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17310                                  
 17311                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17312                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17313                                  
 17314                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17315                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17316 0000055B A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17317                                  
 17318 0000055E 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17319                                  	; 02/11/2022
 17320 00000562 E85F06                  	call	off_to_para		; subtract this much from segment
 17321 00000565 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17322                                  
 17323                                  	; Current DOSCODE start address = dword [dosinit]
 17324                                  
 17325                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17326                                  ;; until it is determined whether it will be running in HIMEM or not.
 17327                                  
 17328                                  ;ifndef ROMDOS
 17329                                  
 17330                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17331                                  
 17332                                  	; 22/10/2022
 17333 0000056A 8CC0                    	mov	ax,es
 17334 0000056C 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17335 0000056F 8EC0                    	mov	es,ax
 17336 00000571 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17337 00000576 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17338                                  
 17339                                  	;mov	si,BCODE_START ; mov si,30h
 17340                                  	; 09/12/2022
 17341 00000578 BE[3000]                	mov	si,BCODESTART
 17342                                  	; 02/11/2022
 17343 0000057B 89F7                    	mov	di,si
 17344 0000057D B9D019                  	mov	cx,BCODE_END   ; mov cx,1A60h
 17345 00000580 29F1                    	sub	cx,si
 17346 00000582 D1E9                    	shr	cx,1
 17347 00000584 F3A5                    	rep	movsw			; move Bios_Code into place
 17348                                  
 17349 00000586 8CC0                    	mov	ax,es			; tell it what segment it's in
 17350 00000588 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17351                                  
 17352                                  ;endif	; not ROMDOS
 17353                                  
 17354                                  ; now call dosinit while it's in its temporary home
 17355                                  
 17356                                  	;mov	ax,cs
 17357                                  	;mov	ds,ax	 
 17358                                  
 17359                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17360                                  
 17361                                  	; 22/10/2022
 17362                                  
 17363 0000058D 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17364                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17365 00000592 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17366                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17367                                  
 17368 00000597 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17369                                  
 17370 0000059C FA                      	cli
 17371 0000059D 8CC8                    	mov	ax,cs
 17372 0000059F 8ED0                    	mov	ss,ax
 17373                                  
 17374                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17375                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17376                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17377                                  ;SYSINIT:0532h:
 17378                                  
 17379                                  ; 22/10/2022
 17380                                  ; ----------------------------------------------------------------------------
 17381                                  ;SYSINIT:05A6h:
 17382                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17383                                  
 17384                                  	;mov	sp, 05A6h
 17385 000005A1 BCA005                  	mov     sp,locstack		; set stack
 17386                                  
 17387 000005A4 FB                      	sti
 17388                                  
 17389                                  ;align 2
 17390                                  	; 30/03/2018
 17391                                  ;LOCSTACK:
 17392                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17393                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17394                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17395                                  
 17396                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17397                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17398                                  
 17399                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17400                                  ; at the top of memory, to its final location in low memory just above the
 17401                                  ; BIOS data. It will then build important DOS data structures in low 
 17402                                  ; memory following the DOS data. It returns (among many other things) the
 17403                                  ; new starting address of free memory.
 17404                                  
 17405 000005A5 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17406                                  			 ; es:di -> sysinitvars_ext
 17407                                  
 17408 000005AA 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17409                                  	
 17410                                  	; 11/12/2022
 17411                                  	; 22/03/2019
 17412 000005AF 0E                      	push	cs
 17413 000005B0 1F                      	pop	ds
 17414                                  	; 22/10/2022
 17415 000005B1 A3[8102]                	mov	[hi_doscod_size],ax
 17416 000005B4 890E[7F02]              	mov	[lo_doscod_size],cx
 17417 000005B8 8916[7B02]              	mov	[dos_segreinit],dx
 17418                                  	
 17419                                  	; 11/12/2022
 17420                                  	; ds = cs
 17421                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17422                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17423                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17424                                  
 17425                                  	; 05/06/2018 - Retro DOS v3.0
 17426                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17427                                  
 17428                                  	; 11/12/2022
 17429                                  	; ds = cs
 17430                                  	; 22/10/2022
 17431                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17432 000005BC 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17433                                  	;mov	[cs:DOSINFO],ax
 17434 000005BF A3[6B02]                	mov	[DOSINFO],ax
 17435                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17436 000005C2 268B4502                	mov	ax,[es:di+2]
 17437                                  	;mov	[cs:DOSINFO+2],ax
 17438 000005C6 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17439                                  
 17440                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17441 000005C9 268B4504                	mov	ax,[es:di+4]
 17442                                  	;mov	[cs:sysi_country],ax
 17443 000005CD A3[7702]                	mov	[sysi_country],ax
 17444                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17445 000005D0 268B4506                	mov	ax,[es:di+6]
 17446                                  	;mov	[cs:sysi_country+2],ax
 17447 000005D4 A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17448                                  
 17449                                  	; 20/04/2019
 17450                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17451                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17452                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17453                                  	; 22/10/2022
 17454                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17455                                  	;;;mov	[dos_segreinit+2],es
 17456                                  	;;mov	[dos_segreinit+2],ax
 17457                                  	;mov	[cs:dos_segreinit+2],ax
 17458                                  	; 11/12/2022
 17459                                  	; ds = cs
 17460 000005D7 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17461 000005DB 8C06[7D02]              	mov	[dos_segreinit+2],es
 17462                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17463                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17464                                  	;mov	[cs:dos_segreinit+2],es
 17465                                  
 17466                                  ; ----------------------------------------------------------------------------
 17467                                  
 17468                                  ;SYSINIT:0577h:
 17469                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17470                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17471                                  
 17472                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17473                                  ;------ Cover up RPL code with an arena
 17474                                  ;SYSINIT:05EBh:
 17475                                  	; 11/12/2022
 17476                                  	; ds = cs
 17477 000005DF 31DB                    	xor	bx,bx
 17478 000005E1 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17479                                  	;cmp	word [RPLMemTop],0
 17480                                  	;;cmp	word [cs:RPLMemTop],0
 17481 000005E5 7450                    	je	short NoRPLArena
 17482                                  
 17483                                  ;------ alloc all memory
 17484                                  
 17485                                  	; 11/12/2022
 17486                                  	;mov	bx,0FFFFh
 17487 000005E7 4B                      	dec	bx
 17488                                  	; bx = 0FFFFh
 17489 000005E8 B448                    	mov	ah,48h
 17490 000005EA CD21                    	int	21h
 17491                                  			; DOS - 2+ - ALLOCATE MEMORY
 17492                                  			; BX = number of 16-byte paragraphs desired
 17493 000005EC B448                    	mov	ah,48h
 17494 000005EE CD21                    	int	21h
 17495                                  
 17496 000005F0 8EC0                    	mov	es,ax			; get it into ES and save it
 17497 000005F2 06                      	push	es
 17498                                  
 17499                                  ;------ resize upto RPL mem
 17500                                  
 17501                                  	; 11/12/2022
 17502                                  	; ds = cs
 17503                                  	;sub	ax,[cs:RPLMemTop]
 17504 000005F3 2B06[9402]              	sub	ax,[RPLMemTop]
 17505 000005F7 F7D8                    	neg	ax
 17506 000005F9 48                      	dec	ax
 17507 000005FA 89C3                    	mov	bx,ax
 17508 000005FC B44A                    	mov	ah,4Ah
 17509 000005FE CD21                    	int	21h
 17510                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17511                                  			; ES = segment address of block to change
 17512                                  			; BX = new size in paragraphs
 17513                                  
 17514                                  ;------ allocate the free (RPL MEM)
 17515                                  
 17516 00000600 BBFFFF                  	mov	bx,0FFFFh
 17517 00000603 B448                    	mov	ah,48h
 17518 00000605 CD21                    	int	21h
 17519 00000607 B448                    	mov	ah,48h
 17520 00000609 CD21                    	int	21h
 17521                                  
 17522                                  ;----- mark that it belongs to RPL
 17523                                  
 17524 0000060B 48                      	dec	ax
 17525 0000060C 8EC0                    	mov	es,ax
 17526                                  	;mov	word [es:arena_owner],8
 17527 0000060E 26C70601000800          	mov	word [es:1],8
 17528                                  	;mov	word [es:arena_name],'RP'
 17529 00000615 26C70608005250          	mov	word [es:8],'RP'
 17530                                  	;mov	word [es:arena_name+2],'L'
 17531 0000061C 26C7060A004C00          	mov	word [es:10],'L'
 17532                                  	;mov	word [es:arena_name+4],0
 17533 00000623 26C7060C000000          	mov	word [es:12],0
 17534                                  	;mov	word [es:arena_name+6],0
 17535 0000062A 26C7060E000000          	mov	word [es:14],0	
 17536                                  
 17537 00000631 07                              pop     es                      ; get back ptr to first block
 17538 00000632 B449                            mov     ah,49h	; Dealloc	; and free it
 17539 00000634 CD21                    	int	21h		
 17540                                  					; DOS - 2+ - FREE MEMORY
 17541                                  					; ES = segment address of area to be freed
 17542                                  	; 11/12/2022
 17543 00000636 F8                      	clc
 17544                                  
 17545                                  ; ----------------------------------------------------------------------------
 17546                                  
 17547                                  NoRPLArena:
 17548                                  	; 11/12/2022
 17549                                  	; ds = cs
 17550                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17551 00000637 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17552                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17553                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17554                                  
 17555                                  	; 11/12/2022
 17556                                  	;clc				; get the extended memory size
 17557                                  
 17558                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17559                                  ;	if the function reports an error do nothing else store the extended
 17560                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17561                                  ;	currently pointed to by es:di. use the offsets specified in the
 17562                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17563                                  
 17564 0000063B B488                    	mov	ah,88h
 17565 0000063D CD15                    	int	15h			; check extended memory size
 17566 0000063F 720B                    	jc	short no_ext_memory
 17567                                  			; Get Extended Memory Size
 17568                                  			; Return: CF clear on success
 17569                                  			; AX = size of memory above 1M in K	
 17570                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17571                                  	; 22/10/2022
 17572 00000641 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17573 00000645 09C0                    	or	ax,ax
 17574 00000647 7403                    	jz	short no_ext_memory
 17575 00000649 E8F104                  	call	ClrVDISKHeader
 17576                                  no_ext_memory:
 17577                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17578 0000064C 268B4510                	mov	ax,[es:di+10h]
 17579                                  	;add	ax,bufinsiz
 17580 00000650 83C014                  	add	ax,20			; size of buffer header
 17581                                  	; 11/12/2022
 17582                                  	; ds = cs
 17583 00000653 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17584                                  	;mov	[cs:singlebuffersize],ax	
 17585                                  	; 11/12/2022
 17586 00000656 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17587                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17588                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17589 00000659 26884543                	mov	[es:di+43h],al
 17590                                  
 17591                                  ; determine if 386 system...
 17592                                  
 17593                                  	;get_cpu_type			; macro to determine cpu type
 17594                                  
 17595                                  get_cpu_type:
 17596                                  	; 11/12/2022
 17597 0000065D 9C                      	pushf
 17598                                  	;push	bx
 17599                                  	;xor	bx,bx
 17600                                  	; 11/12/2022
 17601                                  	;xor	cx,cx
 17602                                  	;
 17603 0000065E 31C0                    	xor	ax,ax
 17604                                  	; ax = 0
 17605 00000660 50                      	push    ax
 17606 00000661 9D                      	popf
 17607 00000662 9C                      	pushf
 17608 00000663 58                      	pop	ax
 17609 00000664 2500F0                  	and	ax,0F000h
 17610                                  	;cmp	ax,0F000h
 17611 00000667 80FCF0                  	cmp	ah,0F0h 
 17612 0000066A 7410                    	je	short cpu_8086
 17613                                  	;mov	ax,0F000h
 17614 0000066C B4F0                    	mov	ah,0F0h
 17615                                  	; ax = 0F000h
 17616 0000066E 50                      	push	ax
 17617 0000066F 9D                      	popf
 17618 00000670 9C                      	pushf
 17619 00000671 58                      	pop	ax
 17620                                  	;and	ax,0F000h
 17621 00000672 80E4F0                  	and	ah,0F0h
 17622 00000675 7405                    	jz	short cpu_286
 17623                                  cpu_386:
 17624                                  	; 11/12/2022
 17625                                  	;;inc	bx
 17626                                  	;inc	cx
 17627                                  	; 11/12/2022
 17628                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17629 00000677 26C6454401              	mov	byte [es:di+44h],1
 17630                                  cpu_286:
 17631                                  	;;;inc	bx
 17632                                  	;;inc	cx
 17633                                  cpu_8086:
 17634                                  	; 11/12/2022
 17635                                  	;;mov	ax,bx	
 17636                                  	;pop	bx
 17637 0000067C 9D                      	popf
 17638                                  
 17639                                  	;...
 17640                                  
 17641                                  	; 11/12/2022
 17642                                  	;or	cl,cl
 17643                                  	;jz	short not_386_system
 17644                                  	; 11/12/202
 17645                                  	;cmp	cl,2
 17646                                  	;;cmp	ax,2			; is it a 386?
 17647                                  	;jne	short not_386_system	; no: don't mess with flag
 17648                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17649                                  	; 11/12/2022
 17650                                  	; 22/10/2022
 17651                                  	;mov	byte [es:di+44h],1
 17652                                  not_386_system:
 17653                                  	;mov	al,[es:di+SYSI_NUMIO]
 17654 0000067D 268A4520                	mov	al,[es:di+20h]
 17655                                  	; 11/12/2022
 17656                                  	; ds = cs
 17657 00000681 A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17658                                  	;mov	[cs:drivenumber],al
 17659                                  
 17660 00000684 8CC8                    	mov	ax,cs
 17661 00000686 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17662                                  	; 11/12/2022
 17663                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17664                                  	;;mov	cx,[cs:singlebuffersize]
 17665                                  	;shr	cx,1			
 17666                                  	;shr	cx,1			; divide size by 16...
 17667                                  	;shr	cx,1
 17668                                  	;shr	cx,1			; ...to get paragraphs...
 17669                                  	;inc	cx			; ... and round up
 17670                                  	; 11/12/2022
 17671 00000689 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17672 0000068D B104                    	mov	cl,4
 17673 0000068F D3EB                    	shr	bx,cl
 17674 00000691 43                      	inc	bx
 17675                                  
 17676                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17677                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17678                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17679                                  ;	  it is probably safe to assume that the sector size always will be.
 17680                                  ;
 17681                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17682                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17683                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17684                                  ;	  other code from ever causing a problem???
 17685                                  
 17686                                  	; 11/12/2022
 17687 00000692 29D8                    	sub	ax,bx
 17688                                  	;sub	ax,cx
 17689 00000694 A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17690                                  	; 22/10/2022
 17691                                  	;mov	[cs:top_of_cdss],ax
 17692                                  
 17693                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17694                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17695                                  ;	for allocating memory for MagicDrv.
 17696                                  
 17697 00000697 06                      	push	es			; preserve pointer to dosinfo
 17698 00000698 57                      	push	di
 17699                                  
 17700                                  	; 22/10/2022
 17701                                  ;	mov	cx,ax			; save pointer for buffer
 17702                                  ;
 17703                                  ;;	now allocate space for 26 CDSs
 17704                                  ;
 17705                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17706                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17707                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17708                                  
 17709                                  ; setup and initialize the temporary buffer at cx
 17710                                  
 17711                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17712 00000699 26C47D12                	les	di,[es:di+12h]
 17713                                  	; 11/12/2022
 17714 0000069D 31DB                    	xor	bx,bx
 17715                                  	;xor	ax,ax
 17716                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17717                                  	;mov	word [es:di+4],0
 17718 0000069F 26895D04                	mov	[es:di+4],bx ; 0
 17719                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17720                                  	;mov	word [es:di],0
 17721 000006A3 26891D                  	mov	[es:di],bx ; 0
 17722                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17723                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17724 000006A6 26894502                	mov	[es:di+2],ax
 17725                                  
 17726                                  	;mov	es,cx
 17727 000006AA 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17728                                  
 17729                                  	; 11/12/2022
 17730                                  	;xor	ax,ax
 17731                                  	;mov	di,ax			; es:di -> single buffer
 17732 000006AC 89DF                    	mov	di,bx
 17733                                  	; di = 0
 17734                                  
 17735                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17736                                  	; 11/12/2022
 17737                                  	;mov	[es:di],ax ; 0
 17738 000006AE 26891D                  	mov	[es:di],bx ; 0
 17739                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17740                                  	; 11/12/2022
 17741                                  	;mov	[es:di+2],ax ; 0
 17742 000006B1 26895D02                	mov	[es:di+2],bx ; 0 
 17743                                  
 17744                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17745                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17746                                  
 17747                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17748 000006B5 26C74504FF00            	mov	word [es:di+4],00FFh
 17749                                  ;SYSINIT:06E6h
 17750                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17751                                  	;mov	word [es:di+6],0
 17752                                  	; 11/12/2022
 17753                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17754 000006BB 26895D06                	mov	[es:di+6],bx ; 0
 17755                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17756                                  	;mov	word [es:di+8],0
 17757                                  	; 11/12/2022
 17758                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17759 000006BF 26895D08                	mov	[es:di+8],bx ; 0
 17760                                  
 17761 000006C3 5F                      	pop	di			; restore pointer to DOSINFO data
 17762 000006C4 07                      	pop	es
 17763                                  
 17764                                  	; 11/12/2022
 17765                                  	; ds = cs
 17766                                  	; 22/10/2022
 17767                                  	;push	cs
 17768                                  	;pop	ds
 17769                                  
 17770 000006C5 E80505                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17771                                  					;  can make disk system calls
 17772                                  					; tempcds trashes ds
 17773                                  	; 10/05/2019
 17774 000006C8 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17775                                  
 17776                                  	;if not ibmjapver
 17777                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17778                                  	;endif
 17779                                  
 17780                                  	; 22/10/2022
 17781                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17782                                  	;call	far ptr 70h:89Bh
 17783 000006CD 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17784                                  
 17785 000006D2 FB                      	sti				; ints ok
 17786 000006D3 FC                      	cld				; make sure
 17787                                  
 17788                                  ; 23/03/2019
 17789                                  
 17790                                  ;SYSINIT:069Ch
 17791                                  
 17792                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17793                                  ; of the way by putting it just below sysinit at end of memory.
 17794                                  
 17795 000006D4 8CCB                    	mov	bx,cs
 17796 000006D6 83EB10                  	sub	bx,10h
 17797 000006D9 8EC3                    	mov	es,bx
 17798 000006DB 31F6                    	xor	si,si
 17799 000006DD 89F7                    	mov	di,si
 17800 000006DF B98000                  	mov	cx,128
 17801 000006E2 F3A5                    	rep	movsw
 17802                                  
 17803                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17804                                  	; 22/10/2022
 17805 000006E4 268C063600              	mov	[es:36h],es
 17806                                  
 17807                                   	; Set Process Data Block - Program Segment Prefix address
 17808                                  	; BX = PDB/PSP segment
 17809 000006E9 B450                            mov	ah,50h ; SET_CURRENT_PDB
 17810 000006EB CD21                    	int	21h			; tell DOS we moved it
 17811                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17812                                  			; BX = segment address of new PSP
 17813                                  	; 22/10/2022
 17814                                  	; 27/03/2019
 17815 000006ED 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17816                                  
 17817 000006EE 0E                      	push	cs	
 17818 000006EF 1F                      	pop	ds
 17819                                  
 17820                                  	; set up temp. critical error handler
 17821 000006F0 BA[BC32]                	mov	dx,int24		; set up int 24 handler
 17822                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17823                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17824 000006F3 B82425                  	mov	ax,2524h
 17825 000006F6 CD21                    	int	21h
 17826                                  
 17827 000006F8 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17828 000006FD 7405                            je      short no_err		   ;  N: continue            M029
 17829 000006FF BA[BA37]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17830                                          ; 22/10/2022
 17831                                  	;call	print 			   ;		             M029
 17832                                  	; 12/12/2022
 17833 00000702 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17834                                  no_err:
 17835                                  	; 12/05/2019
 17836                                  	;----------------------------------------------
 17837                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17838                                  	; 22/10/2022 - Retro DOS v4.0
 17839                                  	; 12/12/2022
 17840 00000704 BA[C032]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17841                                  p_dosinit_msg:
 17842 00000707 E88D2B                  	call	print			; Print message
 17843                                  	;----------------------------------------------
 17844                                  	
 17845                                  	; 11/12/2022
 17846                                  	; 22/10/2022
 17847                                  	; 23/03/2019 - Retro DOS v4.0
 17848                                  	;pop	ds			; start of free memory
 17849                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17850                                  	
 17851                                  	; 11/12/2022
 17852                                  	; 27/03/2019
 17853 0000070A 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17854 0000070E 1F                      	pop	ds ; */
 17855                                  
 17856 0000070F 08D2                    	or	dl,dl
 17857                                  	;jz	short nodrvset		; bios didn't say
 17858 00000711 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17859                                  	;dec	dl			; A = 0
 17860                                  	; 18/12/2022
 17861 00000713 4A                      	dec	dx
 17862 00000714 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17863 00000716 CD21                    	int	21h			; select the disk
 17864                                  			; DOS - SELECT DISK
 17865                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17866                                  			; Return: AL = number of logical drives
 17867                                  nodrvset:
 17868                                  	;ifdef	dblspace_hooks
 17869                                  	;	....
 17870                                  	;	....
 17871                                  	;endif	
 17872                                  
 17873                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17874                                  
 17875                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17876                                  ; ----------------------------------------------------------------------------
 17877                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17878                                  
 17879                                  ProcessConfig:
 17880                                  	;; ds = cs ; 27/03/2019
 17881                                  	; 11/12/2022
 17882                                  	; ds <> cs	
 17883                                  
 17884                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17885                                  
 17886 00000718 E88017                  	call	doconf			; do pre-scan for dos=high/low
 17887                                  
 17888                                  	; 11/12/2022
 17889                                  	; 27/03/2019
 17890                                  	; ds = cs (at return from doconf)
 17891                                  
 17892                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17893                                  ; It will either be relocated to low memory, above the DOS data structures,
 17894                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17895                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17896                                  ; to tell the DOS data where the code has been placed, and to install the
 17897                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17898                                  ; must first initialize it in its present location and load the installable
 17899                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17900                                  ; relocate the DOS code into HiMem.
 17901                                  ;
 17902                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17903                                  ; to install the low memory stub (this must be done before allowing any
 17904                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17905                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17906                                  ; been patched.
 17907                                  
 17908                                  	; 22/10/2022 - Retro DOS v4.0
 17909                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17910                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17911                                  	; 11/12/2022
 17912 0000071B 803E[6A02]00            	cmp	byte [runhigh],0
 17913 00000720 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17914                                  
 17915                                  ;------ user chose to load high
 17916                                  
 17917                                  	; 22/10/2022
 17918                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17919                                  	; 11/12/2022
 17920                                  	; ds = cs
 17921 00000722 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17922                                  
 17923                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17924                                  	; 27/03/2019
 17925                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17926                                  
 17927 00000726 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17928                                  	; 11/12/2022
 17929                                  	; ds = cs
 17930                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17931 00000728 FF1E[7B02]              	call	far [dos_segreinit]
 17932                                  
 17933 0000072C EB10                    	jmp	short do_multi_pass
 17934                                  
 17935                                  ;------ User chose to load dos low
 17936                                  
 17937                                  dont_install_stub:
 17938                                  	; 22/10/2022
 17939 0000072E 31DB                    	xor	bx,bx			; M012
 17940                                  					; don't use int 21 call to alloc mem
 17941 00000730 E8D601                  	call	MovDOSLo		; move it !
 17942                                  
 17943 00000733 B80100                  	mov	ax,1			; dont install stub
 17944                                  	; 11/12/2022
 17945                                  	; ds = cs
 17946 00000736 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17947                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17948                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17949                                  	; 27/03/2019
 17950                                  ;do_multi_pass:
 17951                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17952                                  
 17953                                  	; 11/12/2022
 17954                                  	; ds =cs
 17955                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17956 0000073A FF1E[7B02]              	call	far [dos_segreinit]
 17957                                  do_multi_pass:
 17958 0000073E E81201                  	call	AllocFreeMem		; allocate all the free mem
 17959                                  					; & update [memhi] & [area]
 17960                                  					; start of free memory.
 17961                                  	;ifdef	dblspace_hooks
 17962                                  	;mov	bx,0			; magic backdoor to place int hooks
 17963                                  	;call	cs:MagicBackdoor
 17964                                  	;endif
 17965                                  
 17966                                  ; Now, process config.sys some more.  
 17967                                  ; Load the device drivers and install programs
 17968                                  
 17969                                  	; 22/10/2022
 17970                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17971                                  	; 11/12/2022
 17972                                  	; ds = cs
 17973 00000741 FE06[4903]              	inc	byte [multi_pass_id]
 17974 00000745 E8E617                  	call	multi_pass		; load device drivers
 17975 00000748 E87C24                  	call	ShrinkUMB
 17976 0000074B E8A224                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17977                                  	; 02/11/2022
 17978                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17979                                  	; 11/12/2022
 17980                                  	; ds = cs
 17981 0000074E FE06[4903]              	inc	byte [multi_pass_id]
 17982 00000752 E8D917                  	call	multi_pass		; was load ifs (now does nothing)
 17983                                  
 17984                                  	;ifdef	dblspace_hooks
 17985                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17986                                  	;endif
 17987                                  
 17988                                  	; ds = cs
 17989                                  	
 17990 00000755 E80B05                  	call	endfile			; setup fcbs, files, buffers etc
 17991                                  
 17992                                  	;ifdef	dblspace_hooks
 17993                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17994                                  	;endif
 17995                                  
 17996                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17997                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17998                                  ;with overlays called from installed programs
 17999                                  
 18000                                  	; 11/12/2022
 18001                                  	; ds = cs
 18002                                  
 18003                                  	;;mov	ax,Bios_Data ; 0070h
 18004                                  	;mov	ax,KERNEL_SEGMENT
 18005                                  	; 21/10/2022
 18006 00000758 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 18007 0000075B 8EC0                    	mov	es,ax			; point ES to bios data
 18008                                  
 18009 0000075D 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 18010                                  
 18011                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18012                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 18013                                  	;test	byte [cs:install_flag],1
 18014                                  	; 11/12/2022
 18015                                  	; ds = cs
 18016 00000763 F606[4A03]01            	test	byte [install_flag],1
 18017                                  	;test	byte [cs:install_flag],have_install_cmd
 18018                                  					; are there install commands?
 18019 00000768 7407                    	jz	short dolast		; no, no need for further processing
 18020                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 18021                                  	; 11/12/2022
 18022                                  	; ds =cs
 18023 0000076A FE06[4903]              	inc	byte [multi_pass_id]
 18024 0000076E E8BD17                  	call	multi_pass		; execute install= commands
 18025                                  
 18026                                  dolast:
 18027                                  	
 18028                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 18029                                  ;  free the confbot area used for config.sys and sysinit itself.
 18030                                  
 18031                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 18032                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 18033                                  ; anything, but just set up the ROM area for suballocation (or print
 18034                                  ; a message if HiMem is not available).
 18035                                  ;
 18036                                  ; There is also this little hack for CPM style DOS calls that needs to
 18037                                  ; be done when A20 is set...
 18038                                  
 18039                                  	; 11/12/2022
 18040                                  	; ds = cs
 18041                                  
 18042                                  	; 22/10/2022
 18043                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 18044                                  	; 11/12/2022
 18045 00000771 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18046 00000776 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18047 00000778 E83D01                  	call	LoadDOSHiOrLo
 18048                                  _@@_:
 18049                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18050                                  	; 11/12/2022
 18051                                  	; ds = cs
 18052 0000077B 803E[6A02]00            	cmp	byte [runhigh],0
 18053                                  	;je	short _@@@
 18054 00000780 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18055 00000782 E82904                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18056                                  _@@@:
 18057                                  
 18058                                  ; We are now done with CONFIG.SYS processing
 18059                                  
 18060                                  ConfigDone:
 18061                                  	; 12/12/2022
 18062                                  	; 22/10/2022
 18063                                  	;mov	byte [cs:donotshownum],1 
 18064                                  					; done with config.sys.
 18065                                  					; do not show line number message.
 18066                                  	;mov	es,[cs:area]
 18067                                  	; 12/12/2022
 18068                                  	; ds = cs
 18069                                  	; 27/03/2019
 18070 00000785 C606[D103]01            	mov	byte [donotshownum],1
 18071 0000078A 8E06[E403]              	mov	es,[area]
 18072                                  
 18073 0000078E B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18074 00000790 CD21                    	int	21h
 18075                                  			; DOS - 2+ - FREE MEMORY
 18076                                  			; ES = segment address of area to be freed
 18077                                  
 18078                                  	; 22/10/2022
 18079                                  	;test	word [cs:install_flag],2
 18080                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18081                                  	;test	byte [cs:install_flag],has_installed
 18082                                  	; 11/12/2022
 18083                                  	; ds = cs
 18084 00000792 F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 18085                                  	;test	byte [install_flag],has_installed
 18086 00000797 741F                    	jz	short skip_free_sysinitbase ; no.
 18087                                  
 18088                                  ; set block from the old_area with impossible_owner_size.
 18089                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18090                                  ; handle install= command.
 18091                                  
 18092                                  	; 12/12/2022
 18093                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18094                                  	;push	bx
 18095                                  	
 18096                                  	; 22/10/2022
 18097                                  	;mov	es,[cs:old_area]
 18098                                  	;mov	bx,[cs:impossible_owner_size]
 18099                                  	; 12/12/2022
 18100                                  	; ds = cs
 18101 00000799 8E06[DA03]              	mov	es,[old_area]
 18102 0000079D 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 18103                                  	
 18104 000007A1 B44A                    	mov	ah,4Ah ; SETBLOCK
 18105 000007A3 CD21                    	int	21h
 18106                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18107                                  			; ES = segment address of block to change
 18108                                  			; BX = new size in paragraphs
 18109 000007A5 8CC0                    	mov	ax,es
 18110 000007A7 48                      	dec	ax
 18111 000007A8 8EC0                    	mov	es,ax			; point to arena
 18112                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18113 000007AA 26C70601000800          	mov	word [es:1],8
 18114                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18115 000007B1 26C70608005344          	mov	word [es:8],'SD'
 18116                                  	
 18117                                  	; 12/12/2022
 18118                                  	;pop	bx
 18119                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18120                                  
 18121                                  skip_free_sysinitbase:
 18122                                  	; 22/10/2022
 18123                                  	;cmp	byte [cs:runhigh],0
 18124                                  	; 12/12/2022
 18125                                  	; ds = cs
 18126 000007B8 803E[6A02]00            	cmp	byte [runhigh],0	
 18127 000007BD 7403                    	je	short _@@@@
 18128                                  
 18129 000007BF E8D302                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18130                                  
 18131                                  ; ----------------------------------------------------------------------------
 18132                                  
 18133                                  _@@@@:
 18134                                  	; 12/12/2022
 18135                                  	; ds = cs
 18136                                  	; 22/10/2022
 18137                                  	; 27/03/2019
 18138                                  	;push	cs
 18139                                  	;pop	ds			; point DS to sysinitseg
 18140                                  
 18141                                  ; set up the parameters for command
 18142                                  
 18143                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18144                                  ;;ifdef  MULTI_CONFIG
 18145                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18146                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18147                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18148                                  ;	; !!!
 18149                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18150                                  ;       ; !!!
 18151                                  ;	call    disable_autoexec        ; no, we should disable it
 18152                                  ;process_autoexec:
 18153                                  ;;endif	; !!!
 18154                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18155                                  ;	; !!!
 18156                                  
 18157                                  	; 22/10/2022 
 18158                                  	;mov     cl,[command_line]
 18159                                          ;mov     ch,0
 18160                                          ;inc     cx
 18161                                          ;mov     si,command_line	
 18162                                  	;add     si,cx
 18163                                          ;mov     byte [si],cr	; cr-terminate command line
 18164                                  
 18165                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18166                                  	; (SYSINIT:0809h)
 18167                                  	
 18168                                  	;mov	si,(offset command_line+1)
 18169 000007C2 BE[AA02]                	mov	si,command_line+1
 18170 000007C5 1E                      	push    ds
 18171 000007C6 07                      	pop     es
 18172 000007C7 89F7                    	mov     di,si
 18173 000007C9 B1FF                    	mov     cl,0FFh ; -1
 18174                                  _@_loop:
 18175 000007CB FEC1                    	inc     cl ; +1
 18176 000007CD AC                      	lodsb
 18177 000007CE AA                      	stosb
 18178 000007CF 08C0                    	or      al,al
 18179 000007D1 75F8                    	jnz     short _@_loop
 18180 000007D3 4F                      	dec     di
 18181 000007D4 B00D                    	mov     al,0Dh
 18182 000007D6 AA                      	stosb			; cr-terminate command line
 18183 000007D7 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 18184                                  
 18185                                  ; ----------------------------------------------------------------------------
 18186                                  
 18187                                  ;   Once we get to this point, the above code, which is below "retry"
 18188                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18189                                  ;   which follow....)
 18190                                  
 18191                                  retry:
 18192 000007DB BA[6D33]                	mov	dx,commnd	; now pointing to file description
 18193                                  
 18194                                  ; we are going to open the command interpreter and size it as is done in
 18195                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18196                                  ; there is not enough room for the command interpreter,exec will probably
 18197                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18198                                  ; here to catch it. this code is not perfect (for instance .exe command
 18199                                  ; interpreters are possible) because it does its sizing based on the
 18200                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18201                                  ; correctness to be usable.
 18202                                  
 18203                                  ; first, find out where the command interpreter is going to go.
 18204                                  
 18205 000007DE 52                      	push	dx		; save pointer to name
 18206 000007DF BBFFFF                  	mov	bx,0FFFFh
 18207 000007E2 B448                    	mov	ah,48h	; ALLOC
 18208 000007E4 CD21                            int     21h             ; get biggest piece
 18209 000007E6 B448                    	mov	ah,48h	; ALLOC
 18210 000007E8 CD21                    	int	21h		; second time gets it
 18211 000007EA 7243                    	jc	short memerrjx	; oooops
 18212                                  
 18213 000007EC 8EC0                    	mov	es,ax
 18214 000007EE B449                    	mov	ah,49h	; DEALLOC
 18215 000007F0 CD21                    	int	21h		; give it right back
 18216 000007F2 89DD                    	mov	bp,bx
 18217                                  
 18218                                  ; es:0 points to block,and bp is the size of the block in para.
 18219                                  
 18220                                  ; we will now adjust the size in bp down by the size of sysinit.
 18221                                  ; we need to do this because exec might get upset if some of the exec
 18222                                  ; data in sysinit is overlayed during the exec.
 18223                                  
 18224                                  	; 22/10/2022
 18225                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18226 000007F4 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18227 000007F8 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18228                                  
 18229                                  ; Note that the "config_wrkseg" environment data is a segment in
 18230                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18231                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18232                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18233                                  ; we need to make sure that there's no way Exec will stomp on that data
 18234                                  ; before it can copy it, and one way to do that is to make the available
 18235                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18236                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18237                                  ; of the current sysinit CS....
 18238                                  ;
 18239                                  ; The reason I use the term "paranoid" is because this code should have
 18240                                  ; slid the data required by Exec up to the very top of memory, because as
 18241                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18242                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18243                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18244                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18245                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18246                                  
 18247                                  	; 22/10/2022
 18248                                  	;mov	cx,[config_envlen]
 18249                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18250                                          ;mov	ax,[config_wrkseg]
 18251                                  ;no_env:
 18252                                  	; 22/10/2022
 18253                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18254 000007FA 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18255 000007FC 83C311                  	add	bx,11h		; add the sysinit php
 18256 000007FF 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18257 00000801 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18258                                  
 18259                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18260 00000803 B8003D                          mov	ax,3D00h
 18261 00000806 F9                      	stc                     ; in case of int 24
 18262 00000807 CD21                    	int	21h
 18263 00000809 7240                    	jc	short comerr	; ooops
 18264                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18265                                  			; DS:DX -> ASCIZ filename
 18266                                  			; AL = access mode
 18267                                  			; 0 - read
 18268                                  	; 22/10/2022
 18269                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18270 0000080B 89C3                            mov     bx,ax           ; handle in bx
 18271                                  
 18272                                  ;   If the standard command interpreter is being used, verify it is correct
 18273                                  
 18274                                  	; 22/10/2022
 18275                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18276                                  	;jne	short skip_validation ; yes
 18277                                  	;mov	dx,retry-4
 18278                                  	;mov	cx,4		;
 18279                                  	;mov	ah,READ		;
 18280                                  	;int	21h		;
 18281                                  	;cmp	byte [retry-4],0E9h
 18282                                  	;jne	short comerr
 18283                                  	;; 20/04/2019 - Retro DOS v4.0
 18284                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18285                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18286                                  	;jne	short comerr	;
 18287                                  
 18288                                  ;skip_validation:
 18289                                  	; 22/10/2022
 18290                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18291 0000080D 31C9                    	xor	cx,cx
 18292 0000080F 31D2                    	xor	dx,dx
 18293                                  	;mov	ax,(LSEEK<<8)|2
 18294 00000811 B80242                  	mov	ax,4202h
 18295 00000814 F9                      	stc			;in case of int 24
 18296 00000815 CD21                    	int	21h		; get file size in dx:ax
 18297 00000817 7232                    	jc	short comerr
 18298                                  				; convert size in dx:ax to para in ax
 18299 00000819 83C00F                  	add	ax,15		; round up size for conversion to para
 18300 0000081C 83D200                  	adc	dx,0
 18301 0000081F E8A203                  	call	off_to_para
 18302 00000822 B10C                    	mov	cl,12
 18303 00000824 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18304 00000826 09D0                    	or	ax,dx		; ax is now # of para for file
 18305 00000828 83C010                  	add	ax,10h		; 100h byte php
 18306 0000082B 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18307 0000082D 7203                    	jb	short okld	; jump if yes.
 18308                                  
 18309                                  	; 22/10/2022
 18310                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18311                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18312                                  	; 02/11/2022
 18313                                  	;jmp	mem_err
 18314                                  	; 11/12/2022
 18315                                  	; ds = cs
 18316 0000082F E92E28                  	jmp	mem_err2
 18317                                  
 18318                                  ;memerrjx:
 18319                                  ;	mov	dx,badmem
 18320                                  ;	call	print
 18321                                  ;       jmp     short continue
 18322                                  
 18323                                  okld:
 18324 00000832 B43E                    	mov	ah,3Eh ; CLOSE
 18325 00000834 CD21                    	int	21h		; close file
 18326                                  
 18327                                  	; 22/10/2022
 18328 00000836 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18329                                  
 18330                                  	; 24/03/2019
 18331                                  
 18332 00000837 0E                      	push	cs		; point es to sysinitseg
 18333 00000838 07                      	pop	es
 18334 00000839 BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18335                                  	; 22/10/2022
 18336                                  	;pop	dx              ; recover pointer to name
 18337                                  
 18338                                  ;;ifdef	MULTI_CONFIG
 18339                                  
 18340                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18341                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18342                                  ;   selection was made (in which case the CONFIG environment variable will be
 18343                                  ;   set to that selection).
 18344                                  
 18345                                  	; 23/10/2022
 18346                                  	;mov	cx,[config_envlen]
 18347                                  	;jcxz	no_envdata
 18348                                          ;mov	cx,[config_wrkseg]
 18349                                  ;no_envdata:
 18350                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18351                                  	;mov	[bx],cx
 18352                                  
 18353                                  ;;endif	;MULTI_CONFIG
 18354                                  
 18355                                  	; 23/10/2022
 18356                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18357                                  
 18358                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18359 0000083C 8C4F04                  	mov	[bx+4],cs
 18360                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18361 0000083F 8C4F08                  	mov	[bx+8],cs
 18362                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18363 00000842 8C4F0C                  	mov	[bx+12],cs
 18364                                  
 18365                                  ;mov	ax,(EXEC<<8) + 0
 18366                                  	; 23/10/2022
 18367                                  	;xor	ax,ax
 18368                                  	;mov	ah,4Bh
 18369                                  	; 14/08/2023
 18370                                  	;mov	ax,4B00h
 18371 00000845 B8004B                  	mov	ax,(EXEC<<8)       
 18372                                  
 18373 00000848 F9                      	stc                     ; in case of int 24
 18374 00000849 CD21                            int     21h             ; go start up command
 18375                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18376                                  			; DS:DX -> ASCIZ filename
 18377                                  			; ES:BX -> parameter block
 18378                                  			; AL = subfunc: load & execute program
 18379                                  	;push	cs
 18380                                  	;pop	ds
 18381                                  
 18382                                  	; 23/10/2022
 18383                                  	;push	dx		; push to balance fall-through pop
 18384                                  
 18385                                  ; note fall through if exec returns (an error)
 18386                                  comerr:
 18387                                  	; 23/10/2022
 18388                                  ;;ifdef	MULTI_CONFIG
 18389                                  	;cmp	byte [commnd4],0
 18390                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18391                                  	;cmp	byte [newcmd],0
 18392                                  	;je	short continue	; don't print err msg for defaults just yet
 18393                                  ;comerr2:
 18394                                  ;;endif
 18395 0000084B BA[BD36]                        mov     dx,badcom	; want to print command error
 18396 0000084E E81A2A                  	call	badfil
 18397                                  continue:
 18398                                  	; 23/10/2022
 18399                                  	;pop	dx
 18400                                  
 18401                                  ;;ifndef MULTI_CONFIG
 18402                                  	;jmp	stall
 18403                                  	; 24/10/2022
 18404                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18405 00000851 EBFE                    	jmp	short stall
 18406                                  ;;else
 18407                                  	; 23/10/2022
 18408                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18409                                  	;int	21h             ;
 18410                                  	;add	al,'A'          ;
 18411                                  	;mov	dl,al           ; DL == default drive letter
 18412                                  	;mov	si,commnd2
 18413                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18414                                  	;jne	short do_def2	; then try the 2nd alternate;
 18415                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18416                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18417                                  ;do_def2:			
 18418                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18419                                          ;jne	short do_alt    ; no
 18420                                  ;do_def3:
 18421                                  	;mov	si,commnd3
 18422                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18423                                  	;jne	short do_alt	; no
 18424                                  	;mov	si,commnd4
 18425                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18426                                  	;jne	short do_alt	; no
 18427                                  	;push	dx              ;
 18428                                  	;mov	dx,badcomprmpt
 18429                                  	;call	print		;
 18430                                  	;pop	dx              ; recover default drive letter in DL
 18431                                  ;request_input:			;
 18432                                  	;mov	ah,STD_CON_OUTPUT
 18433                                  	;int	21h             ;
 18434                                  	;push	dx              ;
 18435                                  	;mov	dl,'>'          ;
 18436                                  	;int	21h             ;
 18437                                  	;mov	bl,[tmplate+1]	;
 18438                                  	;mov	bh,0            ;
 18439                                  	;mov	byte [commnd+bx],0Dh
 18440                                  	;mov	dx,tmplate
 18441                                  	;mov	ah,STD_CON_STRING_INPUT
 18442                                  	;int	21h             ; read a line of input
 18443                                  	;mov	dx,crlfm	;
 18444                                  	;call	print           ;
 18445                                  	;pop	dx              ;
 18446                                  	;mov	bl,[tmplate+1]	;
 18447                                  	;or	bl,bl           ; was anything typed?
 18448                                  	;jz	short request_input ;
 18449                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18450                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18451                                  	;mov	word [command_line],0D00h
 18452                                  	;jmp	short do_exec   ;
 18453                                  ;do_alt:
 18454                                  	;push	ds
 18455                                  	;pop	es
 18456                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18457                                  	;mov	di,commnd	;
 18458                                  ;do_alt1:
 18459                                  	;lodsb			; copy the alternate, zapping it as we go,
 18460                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18461                                  	;stosb 			;
 18462                                  	;or	al,al		;
 18463                                  	;jnz	short do_alt1	;
 18464                                  	;mov	di,command_line
 18465                                  	;cmp	byte [si+2],':'
 18466                                  	;jne	short do_alt2	;
 18467                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18468                                  ;do_alt2:			;
 18469                                  	;lodsb			;
 18470                                  	;stosb			;
 18471                                  	;or	al,al           ;
 18472                                  	;jnz	short do_alt2   ;
 18473                                  	;mov	byte [di-1],cr
 18474                                  
 18475                                  ;;   Last but not least, see if we need to call disable_autoexec
 18476                                  
 18477                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18478                                  	;;cmp	[command_line-1],0
 18479                                          ;;jne	short do_exec   ;
 18480                                          ;;mov	[command_line-1],'/'
 18481                                  	;;call	disable_autoexec ;
 18482                                  
 18483                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18484                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18485                                  	;call	disable_autoexec
 18486                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18487                                  ;do_exec:
 18488                                  	;jmp     retry		;
 18489                                  
 18490                                  ;;endif	;MULTI_CONFIG
 18491                                  
 18492                                  ; 24/03/2019 - Retro DOS v4.0
 18493                                  
 18494                                  ; ----------------------------------------------------------------------
 18495                                  ; procedure : AllocFreeMem
 18496                                  ;
 18497                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18498                                  ; DOS is at temporary location when this call is being made
 18499                                  ;
 18500                                  ; Inputs : None
 18501                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18502                                  ;	   [area] & [memhi] set to the para value of the start of the
 18503                                  ;	   free memory.
 18504                                  ;
 18505                                  ; Uses   : AX, BX
 18506                                  ;
 18507                                  ; ----------------------------------------------------------------------
 18508                                  
 18509                                  	; 23/10/2022
 18510                                  AllocFreeMem:
 18511 00000853 BBFFFF                  	mov	bx,0FFFFh
 18512 00000856 B448                    	mov	ah,48h ; ALLOC
 18513 00000858 CD21                    	int	21h			; first time fails
 18514 0000085A B448                    	mov	ah,48h ; ALLOC
 18515 0000085C CD21                    	int	21h			; second time gets it
 18516                                  	; 11/12/2022
 18517                                  	; ds = cs
 18518                                  	;mov	[cs:area],ax
 18519                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18520 0000085E A3[E403]                	mov	[area],ax
 18521 00000861 A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18522 00000864 C3                      	retn				; start of free memory
 18523                                  				
 18524                                  	; include msbio.cl6
 18525                                  ; ----------------------------------------------------------------------
 18526                                  DOSLOMSG:
 18527 00000865 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18527 0000086E 7661696C61626C653A-
 18527 00000877 204C6F6164696E6720-
 18527 00000880 444F53206C6F770D0A-
 18527 00000889 24                 
 18528                                  FEmsg:
 18529 0000088A 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18529 00000893 6F723A2043616E6E6F-
 18529 0000089C 7420616C6C6F636174-
 18529 000008A5 65204D656D6F727920-
 18529 000008AE 666F7220444F530D0A-
 18529 000008B7 24                 
 18530                                  
 18531                                  ; ----------------------------------------------------------------------
 18532                                  ;
 18533                                  ; procedure : LoadDOSHiOrLo
 18534                                  ;
 18535                                  ;		Tries to move DOS into HMA. If it fails then loads
 18536                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18537                                  ;		moved; this just tries to allocate the HMA, and prints
 18538                                  ;		a message if this is not possible.
 18539                                  ;
 18540                                  ; ----------------------------------------------------------------------
 18541                                  
 18542                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18543                                  LoadDOSHiOrLo:
 18544                                  	; 27/03/2019 - Retro DOS v4.0
 18545                                  	; ds = cs
 18546 000008B8 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18547                                  	;jc	short LdngLo		; If that don't work...
 18548                                  	;retn
 18549                                  	; 18/12/2022
 18550 000008BB 731C                    	jnc	short LoadDosHi_ok
 18551                                  LdngLo:
 18552                                  	; 23/10/2022
 18553                                  	;push	cs
 18554                                  	;pop	ds
 18555                                  	; 11/12/2022
 18556                                  	; ds = cs
 18557 000008BD B409                    	mov	ah,9
 18558 000008BF BA[6508]                	mov	dx,DOSLOMSG		; inform user that we are
 18559 000008C2 CD21                    	int	21h			; loading low
 18560                                  
 18561                                  ;ifndef ROMDOS
 18562                                  	; actually move the dos, and reinitialize it.
 18563                                  
 18564 000008C4 BB0100                  	mov	bx,1				; M012
 18565                                  						;  use int 21 alloc for mem
 18566 000008C7 E83F00                  	call	MovDOSLo
 18567                                  	; 11/12/2022
 18568                                  	; ds = cs
 18569                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18570                                  	; 23/10/2022
 18571 000008CA 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18572                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18573                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18574 000008CE 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18575                                  	; 11/12/2022
 18576                                  	; ds = cs
 18577                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18578 000008D0 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18579                                  	
 18580                                  ;endif ; ROMDOS
 18581                                  	; 23/10/2022
 18582                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18583                                  	; 11/12/2022
 18584                                  	; ds = cs
 18585 000008D4 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18586                                  LoadDosHi_ok:	; 18/12/2022
 18587 000008D9 C3                      	retn
 18588                                  
 18589                                  ; ----------------------------------------------------------------------
 18590                                  ;
 18591                                  ; procedure : TryToMovDOSHi
 18592                                  ;
 18593                                  ;		This tries to move DOS into HMA.
 18594                                  ;		Returns CY if it failed.
 18595                                  ;		If it succeeds returns with carry cleared.
 18596                                  ;
 18597                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18598                                  ;		the A20 switching code in the low mem stub to be installed.
 18599                                  ; 
 18600                                  ; ----------------------------------------------------------------------
 18601                                  
 18602                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18603                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18604                                  TryToMovDOSHi:
 18605                                  	; 11/12/2022
 18606                                  	; 27/03/2019 - Retro DOS v4.0
 18607                                  	; ds = cs
 18608 000008DA E81300                  	call	MovDOSHi
 18609 000008DD 7210                    	jc	short ttldhx
 18610                                  
 18611                                  ;ifndef ROMDOS
 18612                                  	; 23/10/2022
 18613                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18614                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18615                                  	; 11/12/2022
 18616                                  	; ds = cs
 18617 000008DF 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18618                                  ;else
 18619                                  ;	..
 18620                                  ;endif ; ROMDOS
 18621                                  
 18622                                  	; 11/12/2022
 18623                                  	; ds = cs
 18624 000008E3 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18625                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18626 000008E5 FF1E[7B02]              	call	far [dos_segreinit]
 18627                                  	;mov	byte [cs:runhigh],1
 18628 000008E9 C606[6A02]01            	mov	byte [runhigh],1
 18629 000008EE F8                      	clc
 18630                                  ttldhx:
 18631 000008EF C3                      	retn
 18632                                  
 18633                                  ; ----------------------------------------------------------------------
 18634                                  ;
 18635                                  ; procedure : MovDOSHi
 18636                                  ;
 18637                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18638                                  ;		For ROMDOS, the code is not actually moved, but the
 18639                                  ;		HMA is allocated and prepared for sub-allocation.
 18640                                  ;
 18641                                  ;		Returns : CY if it failed
 18642                                  ;
 18643                                  ; ----------------------------------------------------------------------
 18644                                  
 18645                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18646                                  MovDOSHi:
 18647                                  	; 14/05/2019
 18648                                  	; 27/03/2019 - Retro DOS v4.0
 18649                                  	; ds = cs
 18650 000008F0 E8D600                  	call	AllocHMA
 18651 000008F3 7213                    	jc	short mdhx			; did we get HMA?
 18652 000008F5 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18653 000008F8 8EC0                    	mov	es,ax
 18654                                  
 18655                                  ;ifndef ROMDOS
 18656                                  	; actually move the BIOS and DOS
 18657                                  
 18658                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18659                                  	; 24/03/2019
 18660                                  	
 18661                                  	; 23/10/2022
 18662 000008FA E83200                  	call	MovBIOS				; First move BIOS into HMA
 18663                                  
 18664                                  	; ES:DI points to free HMA after BIOS
 18665                                  	
 18666                                  	; 14/05/2019
 18667                                  	; 24/03/2019 - Retro DOS v4.0
 18668                                  	;xor	di,di
 18669                                  	
 18670                                  	; 23/10/2022
 18671                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18672                                  	; 11/12/2022
 18673                                  	; ds = cs
 18674 000008FD 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18675 00000901 E81100                  	call	MovDOS				; and move it
 18676                                  
 18677                                  	; ES:DI points to free HMA after DOS
 18678                                  ;else
 18679                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18680                                  ;
 18681                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18682                                  ;
 18683                                  ;endif ; ROMDOS
 18684                                  
 18685 00000904 E85E02                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18686 00000907 F8                      	clc
 18687                                  mdhx:
 18688 00000908 C3                      	retn
 18689                                  
 18690                                  ; ----------------------------------------------------------------------
 18691                                  ;
 18692                                  ; procedure : MovDOSLo
 18693                                  ;
 18694                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18695                                  ;
 18696                                  ; ----------------------------------------------------------------------
 18697                                  
 18698                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18699                                  
 18700                                  ;ifndef ROMDOS
 18701                                  
 18702                                  MovDOSLo:
 18703                                  	; 14/05/2019
 18704                                  	; 27/03/2019 - Retro DOS v4.0
 18705                                  	; ds = cs
 18706 00000909 E84600                  	call	AllocMemForDOS			; incestuosly!!!
 18707                                  	
 18708                                  	; 23/10/2022
 18709                                  	; 14/05/2019
 18710                                  	;inc	ax  ; skip MCB
 18711                                  	
 18712 0000090C 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18713                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18714                                  	; 24/03/2019
 18715                                  	
 18716                                  	; 23/10/2022
 18717 0000090E E81E00                  	call	MovBIOS
 18718                                  
 18719                                  ;------ ES:DI points memory immediately after BIOS
 18720                                  
 18721                                  	; 14/05/2019
 18722                                  	; NOTE: 
 18723                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18724                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18725                                  
 18726                                  	; 24/03/2019 - Retro DOS v4.0
 18727                                  	;xor	di,di	
 18728                                  
 18729                                  	; 23/10/2022
 18730                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18731                                  	; 11/12/2022
 18732                                  	; ds = cs
 18733 00000911 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18734                                  	;call	MovDOS
 18735                                  	;retn
 18736                                  	; 11/12/2022
 18737                                  	;jmp	short MovDOS
 18738                                  
 18739                                  ;endif ; ROMDOS
 18740                                  
 18741                                  ; 11/12/2022
 18742                                  
 18743                                  ; ----------------------------------------------------------------------
 18744                                  ;
 18745                                  ; procedure : MovDOS
 18746                                  ;
 18747                                  ;		Moves DOS code into requested area
 18748                                  ;
 18749                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18750                                  ;	     CX    - size of DOS code to be moved
 18751                                  ;
 18752                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18753                                  ;
 18754                                  ; ----------------------------------------------------------------------
 18755                                  
 18756                                  	; 11/12/2022
 18757                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18758                                  
 18759                                  ;ifndef ROMDOS
 18760                                  
 18761                                  MovDOS:
 18762                                  	; 14/05/2019
 18763                                  	; 27/03/2019 - Retro DOS v4.0
 18764                                  
 18765                                  	; 11/12/2022
 18766                                  	; ds = cs
 18767                                  
 18768                                  	; 23/10/2022
 18769                                  	;push	ds ; *//
 18770                                  	
 18771 00000915 06                      	push	es
 18772 00000916 57                      	push	di
 18773                                  
 18774                                  	; 11/12/2022
 18775 00000917 1E                      	push	ds ; *// ; 11/12/202
 18776                                  
 18777                                  	; 29/04/2019
 18778 00000918 C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18779                                  	; 23/10/2022
 18780                                  	;lds	si,[cs:dosinit]
 18781                                  	; 04/09/2023
 18782 0000091C 89F0                    	mov	ax,si
 18783                                  
 18784 0000091E F3A4                    	rep	movsb
 18785                                  
 18786 00000920 1F                      	pop	ds ; *// ; 11/12/2022
 18787                                  
 18788 00000921 5B                      	pop	bx				; get back offset into which
 18789                                  						;  DOS was moved
 18790                                  	; 04/09/2023
 18791                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 18792                                  						;  wants to run
 18793                                  	; 04/09/2023
 18794                                  	;mov	ax,[dosinit]
 18795                                  	; ax = [dosinit]
 18796                                  
 18797 00000922 29D8                    	sub	ax,bx
 18798 00000924 E89D02                  	call	off_to_para
 18799 00000927 5B                      	pop	bx				; get the segment at which
 18800                                  						;  we moved DOS into
 18801 00000928 29C3                    	sub	bx,ax				; Adjust segment
 18802                                  	
 18803                                  	; 11/12/2022
 18804                                  	; 23/10/2022
 18805                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18806                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18807                                  	; 11/12/2022
 18808 0000092A 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18809                                  		
 18810                                  	; 27/03/2019
 18811                                  	;pop	ds ; *//
 18812                                  	; ds = cs
 18813                                  	;mov	[FINAL_DOS_LOCATION],bx
 18814                                  
 18815 0000092E C3                      	retn
 18816                                  
 18817                                  ;endif ;ROMDOS
 18818                                  
 18819                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18820                                  ; 24/03/2019
 18821                                  ; ----------------------------------------------------------------------
 18822                                  ;
 18823                                  ; procedure : MovBIOS
 18824                                  ;
 18825                                  ;		Moves BIOS code into requested segment
 18826                                  ;
 18827                                  ;	In : ES - segment to which BIOS is to be moved
 18828                                  ;		  ( it moves always into offset BCode_Start)
 18829                                  ;
 18830                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18831                                  ;
 18832                                  ; ----------------------------------------------------------------------
 18833                                  
 18834                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18835                                  
 18836                                  ;ifndef ROMDOS
 18837                                  
 18838                                  MovBIOS: ; proc	near
 18839                                  	; 11/12/2022
 18840 0000092F 1E                      	push	ds ; ds = cs	
 18841                                  	;
 18842                                  	; 23/10/2022
 18843 00000930 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18844                                  	;mov	si,BCODE_START ; mov si,30h
 18845                                  	; 09/12/2022
 18846 00000935 BE[3000]                	mov	si,BCODESTART
 18847 00000938 89F7                    	mov	di,si
 18848 0000093A B9D019                  	mov	cx,BCODE_END ; mov cx,1A60h
 18849 0000093D 29F1                    	sub	cx,si				; size of BIOS
 18850 0000093F D1E9                    	shr	cx,1				; Both the labels are para
 18851                                  						;  aligned
 18852 00000941 F3A5                    	rep	movsw
 18853                                  	
 18854                                  	; 11/12/2022
 18855 00000943 1F                      	pop	ds ; ds = cs
 18856                                  	;
 18857 00000944 06                      	push	es
 18858 00000945 57                      	push	di				; save end of BIOS
 18859 00000946 8CC0                    	mov	ax,es
 18860                                  	;
 18861                                  	; 11/12/2022
 18862                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18863                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18864                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18865                                  	; ds = cs
 18866 00000948 A3[0004]                	mov	[BCodeSeg],ax
 18867 0000094B FF1E[8502]              	call	far [seg_reinit_ptr]
 18868                                  	;
 18869 0000094F 5F                      	pop	di
 18870 00000950 07                      	pop	es				; get back end of BIOS
 18871 00000951 C3                      	retn
 18872                                  
 18873                                  ;MovBIOS endp
 18874                                  
 18875                                  ;endif ; ROMDOS
 18876                                  
 18877                                  ; 11/12/2022
 18878                                  %if 0
 18879                                  
 18880                                  ; 24/03/2019
 18881                                  
 18882                                  ; ----------------------------------------------------------------------
 18883                                  ;
 18884                                  ; procedure : MovDOS
 18885                                  ;
 18886                                  ;		Moves DOS code into requested area
 18887                                  ;
 18888                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18889                                  ;	     CX    - size of DOS code to be moved
 18890                                  ;
 18891                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18892                                  ;
 18893                                  ; ----------------------------------------------------------------------
 18894                                  
 18895                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18896                                  
 18897                                  ;ifndef ROMDOS
 18898                                  
 18899                                  MovDOS:
 18900                                  	; 14/05/2019
 18901                                  	; 27/03/2019 - Retro DOS v4.0
 18902                                  
 18903                                  	; 11/12/2022
 18904                                  	; ds = cs
 18905                                  
 18906                                  	; 23/10/2022
 18907                                  	;push	ds ; *//
 18908                                  	
 18909                                  	push	es
 18910                                  	push	di
 18911                                  
 18912                                  	; 11/12/2022
 18913                                  	push	ds ; *// ; 11/12/202
 18914                                  
 18915                                  	; 29/04/2019
 18916                                  	lds	si,[dosinit] ; 11/12/2022
 18917                                  	; 23/10/2022
 18918                                  	;lds	si,[cs:dosinit]
 18919                                  	; 04/09/2023
 18920                                  	mov	ax,si
 18921                                  
 18922                                  	rep	movsb
 18923                                  
 18924                                  	pop	ds ; *// ; 11/12/2022
 18925                                  
 18926                                  	pop	bx				; get back offset into which
 18927                                  						;  DOS was moved
 18928                                  	;mov	ax,[dosinit] ; 04/09/2023
 18929                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 18930                                  						;  wants to run
 18931                                  	sub	ax,bx
 18932                                  	call	off_to_para
 18933                                  	pop	bx				; get the segment at which
 18934                                  						;  we moved DOS into
 18935                                  	sub	bx,ax				; Adjust segment
 18936                                  	
 18937                                  	; 11/12/2022
 18938                                  	; 23/10/2022
 18939                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18940                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18941                                  	; 11/12/2022
 18942                                  	mov	[CURRENT_DOS_LOCATION],bx
 18943                                  		
 18944                                  	; 27/03/2019
 18945                                  	;pop	ds ; *//
 18946                                  	; ds = cs
 18947                                  	;mov	[FINAL_DOS_LOCATION],bx
 18948                                  
 18949                                  	retn
 18950                                  
 18951                                  ;endif ;ROMDOS
 18952                                  
 18953                                  %endif
 18954                                  
 18955                                  ; ----------------------------------------------------------------------
 18956                                  ;
 18957                                  ; procedure : AllocMemForDOS
 18958                                  ;
 18959                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18960                                  ;
 18961                                  ;	Out : AX - seg of allocated memoryblock
 18962                                  ;
 18963                                  ; ----------------------------------------------------------------------
 18964                                  
 18965                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18966                                  
 18967                                  ;ifndef ROMDOS
 18968                                  
 18969                                  AllocMemForDOS:
 18970                                  	; 11/12/2022
 18971                                  	; 14/05/2019
 18972                                  	; 27/03/2019 - Retro DOS v4.0
 18973                                  	; ds = cs
 18974                                  	;mov	ax,BCode_end
 18975                                  	;sub	ax,BCode_start		; BIOS code size
 18976                                  	; 23/10/2022
 18977 00000952 B8D019                  	mov	ax,BCODE_END ; 1A60h
 18978                                  	;sub	ax,BCODE_START ; 30h
 18979                                  	; 09/12/2022
 18980 00000955 2D[3000]                	sub	ax,BCODESTART 
 18981                                  	; 24/03/2019 - Retro DOS v4.0 
 18982                                  	; 02/11/2022
 18983                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18984                                  	; 11/12/2022
 18985                                  	; ds = cs
 18986 00000958 0306[7F02]              	add	ax,[lo_doscod_size]
 18987 0000095C 83C00F                  	add	ax,15
 18988 0000095F E86202                  	call	off_to_para			; convert to para
 18989                                  	; 23/10/2022
 18990                                  	; 14/05/2019
 18991                                  	;inc	ax ; + 1 paragraph for MCB
 18992 00000962 09DB                    	or	bx,bx				; M012
 18993 00000964 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18994 00000966 741A                    	jz	short update_arena		; M012
 18995 00000968 B448                    	mov	ah,48h				; request DOS
 18996 0000096A CD21                    	int	21h
 18997 0000096C 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18998                                   	; 23/10/2022
 18999                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 19000 0000096E 83E803                  	sub	ax,3				; Take care ORG 30h of
 19001                                  						;  BIOS code
 19002 00000971 8EC0                    	mov	es,ax
 19003                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 19004                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 19005                                  	; 14/05/2019
 19006                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 19007                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 19008                                  	; 23/10/2022
 19009 00000973 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 19010 0000097A 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 19011                                  
 19012 00000981 C3                      	retn
 19013                                  
 19014                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 19015                                  ;	  using DOS itself causes an arena to be generated.
 19016                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 19017                                  ;	  assume that the device drivers are loaded into
 19018                                  ;	  the first arena. For this reason, MagicDrv's
 19019                                  ;	  main device driver header arena is manually
 19020                                  ;	  truncated from the arena chain, and the space
 19021                                  ;	  for DOS is allocated using the following
 19022                                  ;	  simple code, which also assumes that the
 19023                                  ;	  first arena is the free one where DOS's low
 19024                                  ;	  stub will go.
 19025                                  ;
 19026                                  ; M012 : BEGIN
 19027                                  
 19028                                  	; 23/10/2022
 19029                                  update_arena:
 19030 00000982 1E                      	push	ds ; ds = cs
 19031 00000983 57                      	push	di
 19032 00000984 51                      	push	cx
 19033 00000985 52                      	push	dx
 19034                                  	; 23/10/2022
 19035                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 19036                                  	; 11/12/2022
 19037                                  	; ds = cs 
 19038 00000986 C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 19039 0000098A 4F                      	dec	di
 19040 0000098B 4F                      	dec	di				; Arena head is immediately
 19041                                  						;  before sysvar
 19042 0000098C 8E05                    	mov	es,[di]				; es = arena head
 19043                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 19044 0000098E 268B0E0300              	mov	cx,[es:3]
 19045 00000993 39D9                    	cmp	cx,bx				; is it sufficient ?
 19046 00000995 7227                    	jb	short FatalErr			; no, fatal error
 19047                                  
 19048                                  	;mov	dl,[es:ARENA.SIGNATURE]
 19049 00000997 268A160000              	mov	dl,[es:0]
 19050 0000099C 8CC0                    	mov	ax,es
 19051 0000099E 01D8                    	add	ax,bx				; ax = new arena head
 19052 000009A0 8905                    	mov	[di],ax				; store it in DOS data area
 19053 000009A2 8ED8                    	mov	ds,ax
 19054                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19055 000009A4 88160000                	mov	[0],dl
 19056                                  	;mov	word [ARENA.OWNER],0		; free
 19057 000009A8 C70601000000            	mov	word [1],0
 19058 000009AE 29D9                    	sub	cx,bx				; size of the new block
 19059                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19060 000009B0 890E0300                	mov	[3],cx
 19061 000009B4 8CC0                    	mov	ax,es				; return seg to the caller
 19062                                  	; 23/10/2022
 19063                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19064 000009B6 83E803                  	sub	ax,3				;  BIOS code
 19065 000009B9 5A                      	pop	dx
 19066 000009BA 59                      	pop	cx
 19067 000009BB 5F                      	pop	di
 19068 000009BC 1F                      	pop	ds ; ds = cs
 19069 000009BD C3                      	retn
 19070                                  ;
 19071                                  ; M012 : END
 19072                                  ;
 19073                                  FatalErr:
 19074 000009BE 0E                      	push	cs
 19075 000009BF 1F                      	pop	ds
 19076 000009C0 BA[8A08]                	mov	dx,FEmsg
 19077 000009C3 B409                    	mov	ah,9
 19078 000009C5 CD21                    	int	21h 		; DOS - PRINT STRING
 19079                                  				; DS:DX -> string terminated by "$"
 19080                                          ;jmp	stall
 19081                                  	; 23/10/2022
 19082 000009C7 FA                      	cli
 19083 000009C8 F4                      	hlt
 19084                                  
 19085                                  ;endif ;ROMDOS
 19086                                  
 19087                                  ; 25/03/2019 - Retro DOS v4.0
 19088                                  
 19089                                  ; ----------------------------------------------------------------------
 19090                                  ;
 19091                                  ; procedure : AllocHMA
 19092                                  ;
 19093                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19094                                  ;	  up there. If it gets any sort of error, it will return with
 19095                                  ;	  carry set so that we can resort to running low.
 19096                                  ;
 19097                                  ;	It also returns ES: -> 0ffffh if it returns success
 19098                                  ;
 19099                                  ; ----------------------------------------------------------------------
 19100                                  
 19101                                  AllocHMA:
 19102                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19103                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19104                                  ;		   been deleted because it can be recycled for skipping the
 19105                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19106                                  ;		   in the case of a pre-286.
 19107                                  
 19108                                  ;;	see if we're running on a pre-286. If not, force low.
 19109                                  ;
 19110                                  ;	xor	ax,ax
 19111                                  ;	pushf			; save flags (like int)
 19112                                  ;	push	ax
 19113                                  ;	popf
 19114                                  ;	pushf
 19115                                  ;	pop	ax
 19116                                  ;	popf			; restore original flags (like int)
 19117                                  ;	and	ax,0F000h
 19118                                  ;	cmp	ax,0F000h	; 8088/8086?
 19119                                  ;	jz	short grab_hma_error
 19120                                  
 19121                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19122                                  	; (SYSINIT:0A26h)
 19123                                  
 19124 000009C9 1E                      	push	ds
 19125                                  	;;mov	ax,Bios_Data
 19126                                  	;mov	ax,KERNEL_SEGMENT
 19127                                  	; 21/10/2022
 19128 000009CA B87000                  	mov	ax,DOSBIODATASEG
 19129 000009CD 8ED8                    	mov	ds,ax
 19130                                  
 19131 000009CF E84A00                  	call	IsXMSLoaded
 19132 000009D2 7545                    	jnz	short grabhma_error
 19133                                  
 19134 000009D4 B81043                  	mov	ax,4310h
 19135 000009D7 CD2F                    	int	2Fh		; get the vector into es:bx
 19136                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19137                                  		; Return: ES:BX -> driver entry point
 19138                                  
 19139 000009D9 891E[0E00]              	mov	[xms],bx
 19140                                  	;mov	[0Eh], bx
 19141 000009DD 8C06[1000]              	mov	[xms+2],es
 19142                                  	;mov	[10h],es
 19143                                  
 19144 000009E1 B401                    	mov	ah,1		; request HMA
 19145 000009E3 BAFFFF                  	mov	dx,0FFFFh
 19146                                  	;call	dword ptr ds:0Eh
 19147 000009E6 FF1E[0E00]              	call	far [xms]
 19148 000009EA 48                      	dec	ax
 19149 000009EB 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19150                                  
 19151                                  ;------ Himem may be lying because it has allocated mem for int 15
 19152                                  
 19153 000009ED B488                    	mov	ah,88h
 19154 000009EF CD15                    	int	15h
 19155                                  		; Get Extended Memory Size
 19156                                  		; Return: CF clear on success
 19157                                  		; AX = size of memory above 1M in K
 19158 000009F1 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19159                                  	;jb	short grabhma_error
 19160                                  	; 11/12/2022
 19161 000009F4 7224                    	jb	short grabhma_err ; cf=1
 19162                                  allocHMA_1:
 19163 000009F6 B405                    	mov	ah,5		; localenableA20
 19164                                  	;call	dword ptr ds:0Eh
 19165 000009F8 FF1E[0E00]              	call	far [xms]
 19166 000009FC 48                      	dec	ax
 19167 000009FD 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19168                                  
 19169 000009FF E88501                  	call	IsVDiskInstalled
 19170 00000A02 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19171                                  
 19172 00000A04 B8FFFF                  	mov	ax,0FFFFh
 19173 00000A07 8EC0                    	mov	es,ax
 19174 00000A09 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19175 00000A10 26813E10003412          	cmp	word [es:10h],1234h
 19176                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19177                                  	; 11/12/2022
 19178 00000A17 7401                    	je	short allocHMA_ok	
 19179                                  
 19180                                  ; 11/12/2022
 19181                                  ;	; 11/12/2022
 19182                                  ;	; cf=0
 19183                                  ;	;clc
 19184                                  ;	pop	ds
 19185                                  ;	retn
 19186                                  
 19187                                  grabhma_error:
 19188 00000A19 F9                      	stc
 19189                                  	; 11/12/022
 19190                                  grabhma_err:	; cf=1
 19191                                  allocHMA_ok:	; cf=0
 19192 00000A1A 1F                      	pop	ds
 19193 00000A1B C3                      	retn
 19194                                  
 19195                                  ; ----------------------------------------------------------------------
 19196                                  ;
 19197                                  ; procedure : IsXMSLoaded
 19198                                  ;
 19199                                  ;             Checks whether a XMS driver is loaded
 19200                                  ;
 19201                                  ; Returns : Z flag set if XMS driver loaded
 19202                                  ;           Z flag reset if no XMS drivers are present
 19203                                  ;
 19204                                  ; ----------------------------------------------------------------------
 19205                                  
 19206                                  IsXMSLoaded:
 19207 00000A1C B80043                  	mov	ax,4300h
 19208 00000A1F CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19209                                  				; Return: AL = 80h XMS driver installed
 19210                                  				; AL <> 80h no driver
 19211 00000A21 3C80                    	cmp	al,80h		; XMS installed?
 19212 00000A23 C3                      	retn
 19213                                  
 19214                                  ; ----------------------------------------------------------------------
 19215                                  ; procedure : FTryToMovDOSHi
 19216                                  ;
 19217                                  ;		Called from HMA suballoc calls
 19218                                  ;	
 19219                                  ; ----------------------------------------------------------------------
 19220                                  
 19221                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19222                                  	; (SYSINIT:0A84h)
 19223                                  
 19224                                  FTryToMovDOSHi:	; proc	far
 19225                                  
 19226 00000A24 50                      	push	ax
 19227 00000A25 53                      	push	bx
 19228 00000A26 51                      	push	cx
 19229 00000A27 52                      	push	dx
 19230 00000A28 56                      	push	si
 19231 00000A29 57                      	push	di
 19232 00000A2A 1E                      	push	ds
 19233 00000A2B 06                      	push	es
 19234                                  
 19235                                  	; 23/10/2022
 19236                                  	; 27/03/2019 - Retro DOS v4.0
 19237                                  	; 11/12/2022
 19238 00000A2C 0E                      	push	cs
 19239 00000A2D 1F                      	pop	ds
 19240                                  
 19241                                  	;cmp	byte [cs:runhigh],0FFh
 19242                                  	; 11/12/2022
 19243 00000A2E 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19244 00000A33 7503                    	jne	short _ftymdh_1
 19245                                  
 19246                                  	; ds = cs
 19247 00000A35 E8A2FE                  	call	TryToMovDOSHi
 19248                                  _ftymdh_1:
 19249 00000A38 07                      	pop	es
 19250 00000A39 1F                      	pop	ds
 19251 00000A3A 5F                      	pop	di
 19252 00000A3B 5E                      	pop	si
 19253 00000A3C 5A                      	pop	dx
 19254 00000A3D 59                      	pop	cx
 19255 00000A3E 5B                      	pop	bx
 19256 00000A3F 58                      	pop	ax
 19257                                  
 19258 00000A40 CB                      	retf
 19259                                  
 19260                                  ; ----------------------------------------------------------------------
 19261                                  ;
 19262                                  ; following piece of code will be moved into a para boundary. And the para
 19263                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19264                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19265                                  ; to determine free extended memory.
 19266                                  ;
 19267                                  ; For more details read "power programming" column by Ray Duncan in the
 19268                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19269                                  ;
 19270                                  ; ----------------------------------------------------------------------
 19271                                  
 19272                                  StartVDHead:
 19273                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19274                                  
 19275 00000A41 00000000                	dd	0		; link to next device driver
 19276 00000A45 0080                    	dw	8000h		; device attribute
 19277 00000A47 0000                    	dw	0		; strategy routine offset
 19278 00000A49 0000                    	dw	0		; interrupt routine offset
 19279 00000A4B 01                      	db	1		; number of units
 19280                                  	;db	7 dup(0) 
 19281 00000A4C 00<rep 7h>              	times	7 db 0 		; reserved area
 19282                                  VDiskSig1:
 19283 00000A53 564449534B              	db	'VDISK'
 19284                                  
 19285                                  VLEN1	equ	($-VDiskSig1)
 19286                                  
 19287 00000A58 202056332E33            	db	'  V3.3'	; vdisk label
 19288                                  	;db	15 dup (0)	; pad
 19289 00000A5E 00<rep Fh>              	times	15 db 0
 19290 00000A6D 0000                    	dw	0		; bits 0-15 of free HMA
 19291 00000A6F 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19292                                  VDInt19:
 19293 00000A70 EA                      	db	0EAh		; jmp to old vector
 19294                                  OldVDInt19:
 19295 00000A71 00000000                	dd	0		; Saved int 19 vector
 19296                                  
 19297                                  EndVDHead: ; label byte
 19298                                  
 19299                                  VDiskHMAHead:	
 19300 00000A75 000000                  	db	0,0,0		; non-bootable disk
 19301                                  VDiskSig2:
 19302 00000A78 564449534B              	db	'VDISK'
 19303                                  
 19304                                  VLEN2	equ	($-VDiskSig2)
 19305                                  
 19306 00000A7D 332E33                  	db	'3.3'		; OEM - signature
 19307 00000A80 8000                    	dw	128		; number of bytes/sector
 19308 00000A82 01                      	db	1		; sectors/cluster
 19309 00000A83 0100                    	dw	1		; reserved sectors
 19310 00000A85 01                      	db	1		; number of FAT copies
 19311 00000A86 4000                    	dw	64		; number of root dir entries
 19312 00000A88 0002                    	dw	512		; number of sectors
 19313 00000A8A FE                      	db	0FEh		; media descriptor
 19314 00000A8B 0600                    	dw	6		; number of sectors/FAT
 19315 00000A8D 0800                    	dw	8		; sectors per track
 19316 00000A8F 0100                    	dw	1		; number of heads
 19317 00000A91 0000                    	dw	0		; number of hidden sectors
 19318 00000A93 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19319                                  
 19320                                  EndVDiskHMAHead: ; label byte
 19321                                  
 19322                                  ; ----------------------------------------------------------------------
 19323                                  ;
 19324                                  ; procedure : InstVDiskHeader
 19325                                  ;
 19326                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19327                                  ;	      It puts a 32 byte header at 10000:0 and
 19328                                  ;	      another header at (seg of int19):0
 19329                                  ;
 19330                                  ; Inputs : None
 19331                                  ;
 19332                                  ; Outputs : None
 19333                                  ;
 19334                                  ; USES : DS,SI,AX,CX,DX
 19335                                  ;
 19336                                  ; ----------------------------------------------------------------------
 19337                                  
 19338                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19339                                  
 19340                                  InstVDiskHeader:
 19341 00000A95 31C0                    	xor	ax,ax
 19342 00000A97 8ED8                    	mov	ds,ax			; seg of int vect table
 19343                                  
 19344                                  ;-------------- save old int 19 vector
 19345                                  
 19346                                  	; 23/10/2022
 19347 00000A99 A16400                  	mov	ax,[19h*4]
 19348                                  	;mov	[OldVDInt19],ax
 19349 00000A9C 2EA3[710A]              	mov	[cs:OldVDInt19],ax
 19350 00000AA0 A16600                  	mov	ax,[19h*4+2]
 19351                                  	;mov	[OldVDInt19+2],ax
 19352 00000AA3 2EA3[730A]              	mov	[cs:OldVDInt19+2],ax
 19353                                  
 19354                                  ;-------------- calculate seg of new int 19 handler
 19355                                  
 19356 00000AA7 B448                    	mov	ah,48h			; allocate memory
 19357                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19358                                  	; 23/10/2022
 19359 00000AA9 BB0400                  	mov	bx,4
 19360 00000AAC CD21                    	int	21h
 19361                                  
 19362                                  ;	if carry, fatal hanging error!!!!!
 19363                                  
 19364 00000AAE 48                      	dec	ax			; point to arena
 19365 00000AAF 8EC0                    	mov	es,ax
 19366                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19367 00000AB1 26C70601000800          	mov	word [es:1],8
 19368                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19369 00000AB8 26C70608005343          	mov	word [es:8],'SC'
 19370 00000ABF 40                      	inc	ax
 19371 00000AC0 8EC0                    	mov	es,ax			; get back to allocated memory
 19372                                  
 19373                                  ;-------------- install new int 19 vector
 19374                                  
 19375 00000AC2 FA                      	cli				; no reboots at this time
 19376                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19377 00000AC3 C70664002F00            	mov	word [19h*4],47
 19378 00000AC9 A36600                  	mov	[19h*4+2],ax
 19379                                  
 19380                                  ;-------------- move the code into proper place
 19381                                  
 19382                                  	;mov	cx,(EndVDHead-StartVDHead)
 19383 00000ACC B93400                  	mov	cx,52
 19384 00000ACF BE[410A]                	mov	si,StartVDHead
 19385 00000AD2 31FF                    	xor	di,di
 19386 00000AD4 0E                      	push	cs
 19387 00000AD5 1F                      	pop	ds
 19388 00000AD6 FC                      	cld
 19389 00000AD7 F3A4                    	rep	movsb
 19390 00000AD9 FB                      	sti				; BUGBUG is sti OK now?
 19391                                  
 19392                                  ;-------------- mov the HMA VDisk head into HMA
 19393                                  
 19394                                  	; 23/10/2022
 19395 00000ADA 57                      	push	di
 19396 00000ADB 06                      	push	es
 19397                                  
 19398                                  	;mov	ax,0FFFFh
 19399                                  	;mov	es,ax
 19400                                  	; 04/09/2023
 19401 00000ADC 49                      	dec	cx
 19402                                  	; cx = 0FFFFh
 19403 00000ADD 8EC1                    	mov	es,cx
 19404                                  
 19405 00000ADF BF1000                  	mov	di,10h
 19406                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19407 00000AE2 B92000                  	mov	cx,32
 19408 00000AE5 BE[750A]                	mov	si,VDiskHMAHead
 19409 00000AE8 F3A4                    	rep	movsb			; ds already set to cs
 19410                                  
 19411 00000AEA 5F                      	pop	di
 19412 00000AEB 07                      	pop	es
 19413                                  
 19414 00000AEC C3                      	retn
 19415                                  
 19416                                  ; ----------------------------------------------------------------------
 19417                                  ; procedure : ClrVDISKHeader
 19418                                  ;
 19419                                  ;		Clears the first 32 bytes at 1MB boundary
 19420                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19421                                  ;		left by previous DOS=HIGH session
 19422                                  ;
 19423                                  ; ----------------------------------------------------------------------
 19424                                  
 19425                                  struc desc
 19426 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19427 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19428 00000004 ??                       .hi_byte:	resb 	1		; address
 19429 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19430 00000006 ????                     .reserved:	resw	1		;
 19431                                   .size:
 19432                                  endstruc
 19433                                  
 19434                                  		; 23/10/2022
 19435                                  bmove:		;label byte
 19436                                  
 19437                                  dummy:		;times desc.size db 0	; desc	<>
 19438 00000AED 00<rep 8h>              		times 8 db 0		 
 19439                                  gdt:		;times desc.size db 0	; desc	<>
 19440 00000AF5 00<rep 8h>              		times 8 db 0
 19441 00000AFD FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19442 00000AFF 0000                    		dw	0
 19443 00000B01 00                      		db	0
 19444 00000B02 93                      		db	93h
 19445 00000B03 0000                    		dw	0
 19446 00000B05 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19447 00000B07 0000                    		dw	0
 19448 00000B09 10                      		db	10h
 19449 00000B0A 93                      		db	93h
 19450 00000B0B 0000                    		dw	0
 19451                                  
 19452                                  rombios_code:	;times desc.size db 0	; desc	<>
 19453 00000B0D 00<rep 8h>              		times 8 db 0
 19454                                  temp_stack:	;times desc.size db 0	; desc	<>
 19455 00000B15 00<rep 8h>              		times 8 db 0
 19456                                  
 19457 00000B1D 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19458                                  
 19459                                  
 19460                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19461                                  
 19462                                  ClrVDISKHeader:	; proc	near
 19463                                  
 19464                                  ;;-----------------------------------------------------------	      ;I070
 19465                                  ;; The following workaround get around a problem with the	      ;I070
 19466                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19467                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19468                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19469                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19470                                  ;; move crashes the system. We can do this because these	      ;I070
 19471                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19472                                  ;								      ;I070
 19473                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19474                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19475                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19476                                  ;                                      ; Check for Tortugas...	      ;I070
 19477                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19478                                  ;               je      short ClrVDISKno                              ;I070
 19479                                  ;                                      ; Check for mod 30-286	      ;I070
 19480                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19481                                  ;               jne     short ClrVDISKok			      ;I070
 19482                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19483                                  ;								      ;I070
 19484                                  ;ClrVDISKok:							      ;I070
 19485                                  ;-----------------------------------------------------------	      ;I070
 19486                                  
 19487                                  	; 12/12/2022
 19488                                  	; ds = cs
 19489                                  
 19490 00000B3D 06                      	push	es
 19491 00000B3E 8CC8                    	mov	ax,cs
 19492 00000B40 89C2                    	mov	dx,ax
 19493 00000B42 B10C                    	mov	cl,12
 19494 00000B44 D3EA                    	shr	dx,cl
 19495 00000B46 B104                    	mov	cl,4
 19496 00000B48 D3E0                    	shl	ax,cl
 19497 00000B4A 05[1D0B]                	add	ax,ClrdVDISKHead
 19498 00000B4D 80D200                  	adc	dl,0
 19499                                  
 19500                                  	;; 23/10/2022
 19501                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19502                                  	;mov	[cs:src_desc+2],ax
 19503                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19504                                  	;mov	[cs:src_desc+4],dl
 19505                                  	; 12/12/2022
 19506                                  	;mov	[src_desc+desc.lo_word],ax
 19507 00000B50 A3[FF0A]                	mov	[src_desc+2],ax
 19508                                  	;mov	[src_desc+desc.hi_byte],dl
 19509 00000B53 8816[010B]              	mov	[src_desc+4],dl
 19510                                  
 19511 00000B57 B91000                  	mov	cx,16	; 16 words
 19512 00000B5A 0E                      	push	cs
 19513 00000B5B 07                      	pop	es
 19514 00000B5C BE[ED0A]                	mov	si,bmove
 19515 00000B5F B487                    	mov	ah,87h
 19516 00000B61 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19517                                  			; CX = number of words to move 
 19518                                  			; ES:SI -> global descriptor table
 19519                                  			; Return: CF set on error, AH = status
 19520 00000B63 07                      	pop	es
 19521 00000B64 C3                      	retn
 19522                                  
 19523                                  ; ----------------------------------------------------------------------
 19524                                  ;
 19525                                  ; procedure : SaveFreeHMAPtr
 19526                                  ;
 19527                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19528                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19529                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19530                                  ;		the offset.
 19531                                  ;
 19532                                  ; Inputs : ES:DI - pointer to free HMA
 19533                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19534                                  ;
 19535                                  ; ----------------------------------------------------------------------
 19536                                  
 19537                                  SaveFreeHMAPtr:
 19538                                  	; 04/09/2023
 19539 00000B65 1E                      	push	ds
 19540 00000B66 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19541 00000B69 8ED8                    	mov	ds,ax
 19542                                  	;
 19543 00000B6B 8CC3                    	mov	bx,es
 19544 00000B6D B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 19545                                  	; 04/09/2023
 19546 00000B70 A2[0D00]                	mov	[inHMA],al ; 0FFh
 19547                                  	;
 19548 00000B73 29D8                    	sub	ax,bx
 19549 00000B75 83C70F                  	add	di,15		   ; para round
 19550 00000B78 83E7F0                  	and	di,0FFF0h
 19551 00000B7B B104                    	mov	cl,4
 19552 00000B7D D3E0                    	shl	ax,cl
 19553 00000B7F 29C7                    	sub	di,ax
 19554                                  	;
 19555                                  	; 04/09/2023
 19556                                  	;push	ds
 19557                                  	;;mov	ax,Bios_Data ; 0070h
 19558                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19559                                  	; 21/10/2022
 19560                                  	; 04/09/2023
 19561                                  	;mov	ax,DOSBIODATASEG ; 0070h
 19562                                  	;mov	ds,ax
 19563 00000B81 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19564                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19565 00000B85 1F                      	pop	ds
 19566 00000B86 C3                      	retn
 19567                                  
 19568                                  ; ----------------------------------------------------------------------
 19569                                  ;
 19570                                  ; procedure : IsVDiskInstalled
 19571                                  ;
 19572                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19573                                  ;		& INT 19 vector
 19574                                  ;
 19575                                  ; Inputs  : A20 flag should be ON
 19576                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19577                                  ;
 19578                                  ; ----------------------------------------------------------------------
 19579                                  
 19580                                  IsVDiskInstalled:
 19581 00000B87 31C0                    	xor	ax,ax
 19582 00000B89 8ED8                    	mov	ds,ax
 19583 00000B8B 8E1E4E00                	mov	ds,[19*4+2]
 19584                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19585                                  	; 23/10/2022
 19586 00000B8F BE1200                  	mov	si,18
 19587                                  	;mov	cx,VLEN1 ; 5
 19588 00000B92 B90500                  	mov	cx,5
 19589 00000B95 0E                      	push	cs
 19590 00000B96 07                      	pop	es
 19591 00000B97 BF[530A]                	mov	di,VDiskSig1
 19592 00000B9A F3A6                    	rep	cmpsb
 19593 00000B9C 740F                    	je	short ivdins_retn
 19594 00000B9E B8FFFF                  	mov	ax,0FFFFh
 19595 00000BA1 8ED8                    	mov	ds,ax
 19596                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19597 00000BA3 BE1300                  	mov	si,13h
 19598 00000BA6 BF[780A]                	mov	di,VDiskSig2
 19599                                  	;;mov	cx,VLEN2  ; 5
 19600                                  	;mov	cx,5
 19601                                  	; 04/09/2023
 19602 00000BA9 B105                    	mov	cl,5
 19603 00000BAB F3A6                    	rep	cmpsb
 19604                                  ivdins_retn: 
 19605 00000BAD C3                      	retn			; returns the Zero flag
 19606                                  
 19607                                  ; ----------------------------------------------------------------------
 19608                                  ;
 19609                                  ; procedure : CPMHack
 19610                                  ;
 19611                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19612                                  ;		for CPM compatibility
 19613                                  ;
 19614                                  ; ----------------------------------------------------------------------
 19615                                  
 19616                                  	; 11/12/2022
 19617                                  CPMHack:
 19618 00000BAE 1E                      	push	ds
 19619 00000BAF B9FFFF                  	mov	cx,0FFFFh
 19620 00000BB2 8EC1                    	mov	es,cx		; ES = FFFF
 19621                                  	;xor	cx,cx
 19622                                  	; 11/12/2022
 19623 00000BB4 41                      	inc	cx  ; cx = 0
 19624 00000BB5 8ED9                    	mov	ds,cx		; DS = 0
 19625 00000BB7 BEC000                  	mov	si,0C0h
 19626 00000BBA BFD000                  	mov	di,0D0h
 19627                                  	;mov	cx,5
 19628 00000BBD B105                    	mov	cl,5
 19629 00000BBF FC                      	cld
 19630 00000BC0 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19631 00000BC2 1F                      	pop	ds
 19632 00000BC3 C3                      	retn
 19633                                  
 19634                                  ; ----------------------------------------------------------------------
 19635                                  ;
 19636                                  ; procedure : off_to_para
 19637                                  ;
 19638                                  ; ----------------------------------------------------------------------
 19639                                  off_to_para:
 19640 00000BC4 D1E8                    	shr	ax,1
 19641 00000BC6 D1E8                    	shr	ax,1
 19642 00000BC8 D1E8                    	shr	ax,1
 19643 00000BCA D1E8                    	shr	ax,1
 19644 00000BCC C3                      	retn
 19645                                  
 19646                                  ; ----------------------------------------------------------------------
 19647                                  ;**	TempCDS - Create (Temporary?) CDS
 19648                                  ;
 19649                                  ;	ENTRY	?? BUGBUG
 19650                                  ;		(DS) = SysInitSeg
 19651                                  ;	EXIT	?? BUGBUG
 19652                                  ;	USES	?? BUGBUG
 19653                                  ; ----------------------------------------------------------------------
 19654                                  
 19655                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19656                                  TempCDS:
 19657 00000BCD C43E[6B02]              	les	di,[DOSINFO]
 19658 00000BD1 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19659                                  	;mov	cl,[es:di+20h]
 19660 00000BD5 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19661                                  
 19662 00000BD7 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19663                                  	;mov	[es:di+21h],cl	
 19664                                  
 19665 00000BDB 88C8                    	mov	al,cl
 19666 00000BDD B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19667                                  	;mov	ah,88
 19668 00000BDF F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19669 00000BE1 E8C804                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19670 00000BE4 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19671                                  
 19672                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19673                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19674                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19675                                  ;		   variable which has the top of free memory for
 19676                                  ;		   device driver loads, etc.
 19677                                  
 19678 00000BE8 29C6                    	sub	si,ax
 19679                                  
 19680                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19681                                  ;		that automatically updates alloclim every time we
 19682                                  ;		set up some new CDSs. Instead, I've added code
 19683                                  ;		which pre-allocates space for 26 CDSs. This
 19684                                  ;	        way we've got room for worst case CDSs before
 19685                                  ;		we place MagicDrv.sys
 19686                                  ;
 19687                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19688                                  
 19689                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19690                                  	; (SYSINIT:0C52h)
 19691 00000BEA 8936[A302]              	mov	[ALLOCLIM],si
 19692                                  
 19693 00000BEE 26897518                	mov	[es:di+SYSI_CDS+2],si
 19694                                  	;mov	[es:di+18h],si
 19695 00000BF2 89F0                    	mov	ax,si
 19696 00000BF4 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19697                                  	;mov	[word es:di+16h],0
 19698                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19699 00000BFA 26C535                  	lds	si,[es:di]
 19700 00000BFD 8EC0                    	mov	es,ax
 19701 00000BFF 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19702                                  
 19703                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19704                                  ;	info from the corresponding DPB.
 19705                                  ;
 19706                                  ;	(cx) = count of CDSs left to process
 19707                                  ;	(es:di) = address of next CDS
 19708                                  
 19709                                  fooset:
 19710                                  	; 23/10/2022
 19711 00000C01 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19712 00000C05 AB                      	stosw				; setup the root as the curdir
 19713                                  
 19714                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19715                                  
 19716                                  ;	(ds:si) = address of DPB
 19717                                  ;		 (si) = -1 if no drive
 19718                                  
 19719 00000C06 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19720 00000C0A AB                      	stosw
 19721 00000C0B 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19722 00000C10 31C0                    	xor	ax,ax
 19723 00000C12 51                      	push	cx
 19724                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19725 00000C13 B93F00                  	mov	cx,63	; 23/10/2022
 19726 00000C16 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19727                                  
 19728                                  ;	should handle the system that does not have any floppies.
 19729                                  ;	in this case,we are going to pretended there are two dummy floppies
 19730                                  ;	in the system. still they have dpb and cds,but we are going to
 19731                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19732                                  ;	"invalid drive specification" message when the user try to
 19733                                  ;	access them.
 19734                                  ;
 19735                                  ;	(ax) = 0
 19736                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19737                                  ;	(ds:si) = Next DPB (-1 if none)
 19738                                  
 19739 00000C18 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19740 00000C1B 7413                    	je	short fooset_zero	; don't have any physical drive.
 19741                                  
 19742                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19743                                  ;	if we are faking floppy drives then see if this cds being initialised
 19744                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19745                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19746                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19747                                  ;	for dpb offsets look at inc\dpb.inc.
 19748                                  
 19749                                  	; 04/09/2023
 19750 00000C1D 41                      	inc	cx  ; cx = 1
 19751                                  
 19752 00000C1E 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 04/09/2023
 19753                                  	;cmp	byte [cs:fake_floppy_drv],1
 19754 00000C23 7512                    	jne	short normcds 		; machine has floppy drives
 19755                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19756                                  	;cmp	byte [si],1
 19757 00000C25 380C                    	cmp	[si],cl ; 1 ; 04/09/2023
 19758 00000C27 770E                    	ja	short normcds
 19759 00000C29 B103                    	mov	cl,3			; the next dbp pointer
 19760                                  					; AX should be zero here
 19761 00000C2B F3AB                    	rep	stosw
 19762 00000C2D 59                      	pop	cx
 19763 00000C2E EB17                    	jmp	short get_next_dpb
 19764                                  
 19765                                  ;	(ax) = 0
 19766                                  
 19767                                  fooset_zero:
 19768 00000C30 B103                    	mov	cl,3
 19769 00000C32 F3AB                    	rep	stosw
 19770 00000C34 59                      	pop	cx
 19771 00000C35 EB13                    	jmp	short fincds
 19772                                  
 19773                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19774                                  ;
 19775                                  ;	(ax) = 0
 19776                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19777                                  ;	(ds:si) = Next DPB (-1 if none)
 19778                                  
 19779                                  normcds:
 19780 00000C37 59                      	pop	cx
 19781                                  
 19782                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19783                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19784                                  ;	this media is a non-fat based one.
 19785                                  
 19786                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19787                                  	; 23/10/2022
 19788                                  	;cmp	byte [si+8],0
 19789                                  	; 04/09/2023 (ax=0)
 19790 00000C38 384408                  	cmp	[si+8],al ; 0
 19791 00000C3B 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19792 00000C3D B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19793                                  	;mov	ax,4000h
 19794                                  setnormcds:
 19795 00000C40 AB                      	stosw				; curdir_flags
 19796 00000C41 89F0                    	mov	ax,si
 19797 00000C43 AB                      	stosw				; curdir_devptr
 19798 00000C44 8CD8                    	mov	ax,ds
 19799 00000C46 AB                      	stosw
 19800                                  
 19801                                  get_next_dpb:				; entry point for fake_fooset_zero
 19802                                  	; 23/10/2022
 19803 00000C47 C57419                  	lds	si,[si+19h]
 19804                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19805                                  fincds:
 19806 00000C4A B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19807 00000C4D AB                      	stosw				; curdir_id
 19808 00000C4E AB                      	stosw				; curdir_id
 19809 00000C4F AB                      	stosw				; curdir_user_word
 19810 00000C50 B80200                  	mov	ax,2
 19811 00000C53 AB                      	stosw				; curdir_end
 19812 00000C54 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19813 00000C56 AA                      	stosb
 19814 00000C57 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19815 00000C58 AB                      	stosw
 19816 00000C59 AB                      	stosw
 19817                                  
 19818 00000C5A E2A5                    	loop	fooset
 19819                                  	
 19820 00000C5C 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19821                                  	
 19822 00000C62 C3                      	retn
 19823                                  
 19824                                  ; ----------------------------------------------------------------------
 19825                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19826                                  ;
 19827                                  ;	entry:
 19828                                  ;	   al == ASCII CAPS drive letter
 19829                                  ;
 19830                                  ;	exit:
 19831                                  ;	   ds:si -> DPB, or si = -1 if not found
 19832                                  ; ----------------------------------------------------------------------
 19833                                  
 19834                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19835                                  ;
 19836                                  ;get_dpb_for_drive_al:
 19837                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19838                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19839                                  ;	lds	si,[si]
 19840                                  ;	sub	al,'A'
 19841                                  ;
 19842                                  ;get_dpb_for_drive_1:
 19843                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19844                                  ;	cmp	al,[si]
 19845                                  ;	je	short got_dpb_for_drive	;  done if so
 19846                                  ;
 19847                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19848                                  ;	cmp	si,-1
 19849                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19850                                  ;
 19851                                  ;got_dpb_for_drive:
 19852                                  ;	retn
 19853                                  
 19854                                  ;=======================================================================
 19855                                  
 19856                                  ;**	EndFile - Build DOS structures
 19857                                  ;
 19858                                  ; This procedure is called after the config.sys has been processed and
 19859                                  ; installable device drivers have been loaded (but before "install="
 19860                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19861                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19862                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19863                                  ; above these structures is deallocated back to DOS.
 19864                                  ;
 19865                                  ;	ENTRY	?? BUGBUG
 19866                                  ;	EXIT	?? BUGBUG
 19867                                  ;	USES	?? BUGBUG
 19868                                  
 19869                                  ;=======================================================================
 19870                                  ; allocate files
 19871                                  ; ----------------------------------------------------------------------
 19872                                  
 19873                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19874                                  	; (SYSINIT:0CCDh)
 19875                                  
 19876                                  endfile:
 19877                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19878                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19879                                  ; to confbot.
 19880                                  
 19881                                  ;	if this procedure has been called to take care of install= command,
 19882                                  ;	   then we have to save es,si registers.
 19883                                  
 19884                                  	; 11/12/2022
 19885                                  	; ds = cs
 19886                                  
 19887                                  	; 23/10/2022
 19888                                  	; 31/03/2019
 19889 00000C63 1E                      	push	ds
 19890                                  
 19891                                  	;;mov	ax,Bios_Data ; 0070h
 19892                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19893                                  	; 21/10/2022
 19894 00000C64 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19895 00000C67 8ED8                    	mov	ds,ax
 19896                                  
 19897                                  	;cmp	word [052Fh],0
 19898 00000C69 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19899 00000C6E 7505                    	jne	short multrk_flag_done
 19900                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19901                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19902                                  	; 12/12/2022
 19903 00000C70 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19904                                  multrk_flag_done:
 19905                                  	; 23/10/2022
 19906                                  	; 31/03/2019
 19907 00000C75 1F                      	pop	ds
 19908                                  
 19909                                  	; 11/12/2022
 19910                                  	; ds = cs
 19911 00000C76 A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19912 00000C79 A3[A302]                	mov	[ALLOCLIM],ax
 19913                                  	; 23/10/2022
 19914                                  	;mov	ax, [cs:top_of_cdss]
 19915                                  	;mov	[cs:ALLOCLIM], ax 
 19916                                  
 19917                                  	; 11/12/2022
 19918                                  	; ds = cs
 19919                                  	;push	cs
 19920                                  	;pop	ds
 19921                                  	
 19922                                  	;mov	ax,[CONFBOT]
 19923                                  	;mov	[ALLOCLIM],ax
 19924                                  
 19925 00000C7C E8A223                  	call	round
 19926                                  	; 11/12/2022
 19927                                  	; ds = cs
 19928 00000C7F A0[9D02]                	mov	al,[FILES]
 19929                                  	; 23/10/2022
 19930                                  	;mov	al,[cs:FILES]
 19931 00000C82 2C05                    	sub	al,5
 19932 00000C84 764B                    	jbe	short dofcbs
 19933                                  
 19934 00000C86 50                      	push	ax
 19935                                  	;mov	al,devmark_files ; 'F'
 19936 00000C87 B046                    	mov	al,'F'
 19937 00000C89 E86D07                  	call	setdevmark		; set devmark for sfts (files)
 19938 00000C8C 58                      	pop	ax
 19939 00000C8D 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19940                                  					;  it does sign extend.
 19941                                  	; 11/12/2022
 19942                                  	; ds = cs
 19943 00000C8F 8B1E[DE03]              	mov	bx,[memlo]
 19944 00000C93 8B16[E003]              	mov	dx,[memhi]
 19945 00000C97 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19946                                  	; 23/10/2022
 19947                                  	;mov	bx,[cs:memlo]
 19948                                  	;mov	dx,[cs:memhi]
 19949                                  	;lds	di,[cs:DOSINFO]		
 19950                                  
 19951                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19952 00000C9B C57D04                  	lds	di,[di+4]
 19953                                  
 19954                                  	;mov	[di+SF.SFLink],bx
 19955 00000C9E 891D                    	mov	[di],bx
 19956 00000CA0 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19957                                  
 19958 00000CA3 0E                      	push	cs
 19959 00000CA4 1F                      	pop	ds
 19960                                  
 19961                                  	; 11/12/2022
 19962                                  	; ds = cs
 19963 00000CA5 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19964                                  	; 23/10/2022
 19965                                  	;les	di,[cs:memlo]
 19966                                  
 19967                                  	;mov	word [es:di+SF.SFLink],-1
 19968 00000CA9 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19969                                  	;mov	[es:di+SF.SFCount],ax
 19970 00000CAE 26894504                	mov	[es:di+4],ax
 19971                                  	;mov	bl,SF_ENTRY.size ; 59
 19972 00000CB2 B33B                    	mov	bl,59
 19973 00000CB4 F6E3                    	mul	bl			;ax = number of bytes to clear
 19974 00000CB6 89C1                    	mov	cx,ax
 19975                                  	; 11/12/2022
 19976                                  	; ds = cs
 19977 00000CB8 0106[DE03]              	add	[memlo],ax		;allocate memory
 19978                                  	; 23/10/2022
 19979                                  	;add	[cs:memlo],ax
 19980 00000CBC B80600                  	mov	ax,6
 19981                                  	; 11/12/2022
 19982 00000CBF 0106[DE03]              	add	[memlo],ax		;remember the header too
 19983                                  	;add	[cs:memlo],ax
 19984                                  	; 11/12/2022
 19985 00000CC3 800E[1814]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19986                                  	; 23/10/2022
 19987                                  	;or	byte [cs:setdevmarkflag],2
 19988 00000CC8 E85623                  	call	round			; check for mem error before the stosb
 19989 00000CCB 01C7                    	add	di,ax
 19990 00000CCD 31C0                    	xor	ax,ax
 19991 00000CCF F3AA                    	rep	stosb			;clean out the stuff
 19992                                  
 19993                                  ; allocate fcbs
 19994                                  ; ----------------------------------------------------------------------
 19995                                  
 19996                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19997                                  	; (SYSINIT:0D48h)
 19998                                  dofcbs:
 19999                                  	; 11/12/2022
 20000                                  	; ds = cs
 20001                                  	;push	cs
 20002                                  	;pop	ds
 20003 00000CD1 E84D23                  	call	round
 20004                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 20005 00000CD4 B058                    	mov	al,'X'
 20006 00000CD6 E82007                  	call	setdevmark
 20007                                  	; 11/12/2022
 20008                                  	; ds = cs
 20009 00000CD9 A0[9E02]                	mov	al,[FCBS]
 20010                                  	;mov	al,[cs:FCBS]
 20011 00000CDC 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20012                                  					;  it does sign extend.
 20013                                  	; 11/12/2022
 20014 00000CDE 8B1E[DE03]              	mov	bx,[memlo]
 20015 00000CE2 8B16[E003]              	mov	dx,[memhi]
 20016 00000CE6 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20017                                  	; 23/10/2022
 20018                                  	;mov	bx,[cs:memlo]
 20019                                  	;mov	dx,[cs:memhi]
 20020                                  	;lds	di,[cs:DOSINFO]
 20021                                  
 20022                                  	;mov	[di+SYSI_FCB],bx
 20023                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 20024                                  	; 23/10/2022
 20025 00000CEA 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 20026 00000CED 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 20027                                  
 20028 00000CF0 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 20029 00000CF5 30FF                    	xor	bh,bh
 20030                                  	;mov	[di+SYSI_KEEP],bx
 20031 00000CF7 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 20032                                  
 20033 00000CFA 0E                      	push	cs
 20034 00000CFB 1F                      	pop	ds
 20035                                  	
 20036 00000CFC C43E[DE03]              	les	di,[memlo]		;point to new table
 20037                                  	;mov	word [es:di+SF.SFLink],-1
 20038 00000D00 26C705FFFF              	mov	word [es:di],-1
 20039                                  	;mov	[es:di+SF.SFCount],ax
 20040                                  	; 02/11/2022
 20041 00000D05 26894504                	mov	[es:di+4],ax
 20042 00000D09 B339                    	mov	bl,SF_ENTRY.size ; 59
 20043 00000D0B 89C1                    	mov	cx,ax
 20044 00000D0D F6E3                    	mul	bl			;ax = number of bytes to clear
 20045 00000D0F 0106[DE03]              	add	[memlo],ax		;allocate memory
 20046                                  	;mov	ax,6
 20047 00000D13 B80600                  	mov	ax,SF.size-2 ; 6
 20048 00000D16 0106[DE03]              	add	[memlo],ax		;remember the header too
 20049                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20050 00000D1A 800E[1814]02            	or	byte [setdevmarkflag],2
 20051 00000D1F E8FF22                  	call	round			; check for mem error before the stosb
 20052 00000D22 01C7                    	add	di,ax			;skip over header
 20053 00000D24 B041                    	mov	al,'A'
 20054                                  fillloop:
 20055 00000D26 51                      	push	cx			; save count
 20056 00000D27 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 20057 00000D2A FC                      	cld
 20058 00000D2B F3AA                    	rep	stosb			; filled
 20059                                  
 20060                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 20061                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 20062                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 20063                                  
 20064                                  	; 18/12/2022
 20065                                  	;cx = 0
 20066 00000D2D 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 20067 00000D31 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 20068 00000D35 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 20069                                  	
 20070                                  	; 23/10/2022	
 20071                                  	;mov     word [es:di-3Bh],0
 20072                                  	;mov     word [es:di-26h],0
 20073                                  	;mov     word [es:di-24h],0
 20074                                  
 20075 00000D39 59                      	pop	cx
 20076 00000D3A E2EA                    	loop	fillloop
 20077                                  
 20078                                  ; allocate buffers
 20079                                  ; ----------------------------------------------------------------------
 20080                                  
 20081                                  ; search through the list of media supported and allocate 3 buffers if the
 20082                                  ; capacity of the drive is > 360kb
 20083                                  
 20084                                  	; 18/12/2022
 20085                                  	; cx = 0
 20086 00000D3C 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20087 00000D41 7403                    	je	short dodefaultbuff
 20088 00000D43 E98000                  	jmp	dobuff			; the user entered the buffers=.
 20089                                  
 20090                                  dodefaultbuff:
 20091                                  	; 18/12/2022
 20092 00000D46 890E[9902]              	mov	[h_buffers],cx ; 0
 20093 00000D4A 41                      	inc	cx
 20094 00000D4B 41                      	inc	cx
 20095 00000D4C 890E[9702]              	mov	[buffers],cx ; 2
 20096                                  	
 20097                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20098                                  	;mov	word [buffers],2	; default to 2 buffers
 20099                                  
 20100                                  	; 23/10/2022
 20101                                  	; 04/09/2023
 20102                                  	;push	ax
 20103                                  	;push	ds ; 26/03/2019
 20104                                  
 20105                                  	; 04/09/2023
 20106                                  	; ds = cs
 20107 00000D50 C42E[6B02]              	les	bp,[DOSINFO]		; search through the dpb's
 20108                                  	;les	bp,[cs:DOSINFO]
 20109                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20110                                  	; 11/12/2022
 20111 00000D54 26C46E00                	les	bp,[es:bp]
 20112                                  	; 23/10/2022
 20113                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20114                                  
 20115                                  	; 04/09/2023
 20116                                  	; ds = cs
 20117                                  	;push	cs
 20118                                  	;pop	ds
 20119                                  ;SYSINIT:0DE2h:
 20120                                  nextdpb:				; test if the drive supports removeable media
 20121                                  	;mov	bl,[es:bp+DPB.drive]
 20122                                  	; 11/12/2022
 20123 00000D58 268A5E00                	mov	bl,[es:bp]
 20124                                  	; 23/10/2022
 20125                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20126                                  
 20127                                  	;inc	bl
 20128                                  	; 18/12/2022
 20129 00000D5C 43                      	inc	bx
 20130                                  
 20131                                  	;mov	ax,(IOCTL<<8)|8
 20132 00000D5D B80844                  	mov	ax,4408h
 20133 00000D60 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20134                                  
 20135                                  ; ignore fixed disks
 20136                                  
 20137 00000D62 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20138 00000D64 7534                    	jnz	short nosetbuf
 20139                                  
 20140                                  ; get parameters of drive
 20141                                  
 20142 00000D66 31DB                    	xor	bx,bx
 20143                                  	;;mov	bl,[es:bp+DPB.drive]
 20144                                  	; 11/12/2022
 20145 00000D68 268A5E00                	mov	bl,[es:bp]
 20146                                  	; 23/10/2022
 20147                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20148                                  	
 20149                                  	;inc	bl
 20150                                  	; 18/12/2022
 20151 00000D6C 43                      	inc	bx
 20152                                  
 20153 00000D6D BA[7E34]                	mov	dx,deviceparameters
 20154                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20155 00000D70 B80D44                  	mov	ax,440Dh
 20156                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20157 00000D73 B96008                  	mov	cx,860h
 20158 00000D76 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20159 00000D78 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20160                                  					; generic ioctl
 20161                                  ; determine capacity of drive
 20162                                  ; media capacity = #sectors * bytes/sector
 20163                                  
 20164                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20165                                  	; 23/10/2022
 20166 00000D7A 8B1E[8D34]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20167                                  	
 20168                                  ; to keep the magnitude of the media capacity within a word,
 20169                                  ; scale the sector size
 20170                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20171                                  
 20172                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20173                                  	; 23/10/2022
 20174 00000D7E A1[8534]                	mov	ax, [deviceparameters+7] ; bytes per sector
 20175 00000D81 31D2                    	xor	dx,dx
 20176 00000D83 B90002                  	mov	cx,512
 20177 00000D86 F7F1                    	div	cx			; scale sector size in factor of
 20178                                  					; 512 bytes
 20179 00000D88 F7E3                    	mul	bx			; ax = #sectors * size factor
 20180 00000D8A 09D2                    	or	dx,dx			; just in case of large floppies
 20181 00000D8C 7505                    	jnz	short setbuf
 20182 00000D8E 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20183 00000D91 7607                    	jbe	short nosetbuf
 20184                                  setbuf:
 20185                                  	; 18/12/2022
 20186                                  	; word [buffers] = 2
 20187 00000D93 C606[9702]03            	mov	byte [buffers],3
 20188                                  	;mov	word [buffers],3
 20189 00000D98 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20190                                  					; for default buffer count
 20191                                  nosetbuf:
 20192                                  	; 23/10/2022
 20193                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20194 00000D9A 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20195 00000D9F 7406                    	je	short chk_memsize_for_buffers
 20196                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20197 00000DA1 26C46E19                	les	bp,[es:bp+19h]
 20198 00000DA5 EBB1                    	jmp	short nextdpb
 20199                                  
 20200                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20201                                  ;memory size too.
 20202                                  ; default buffers = 2
 20203                                  ; if diskette media > 360 kb,then default buffers = 3
 20204                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20205                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20206                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20207                                  
 20208                                  chk_memsize_for_buffers:
 20209                                  	; 18/12/2022
 20210                                  	;cmp	word [MEMORY_SIZE],2000h
 20211                                  	;jbe	short bufset
 20212                                  	;mov	word [buffers],5
 20213                                  	;cmp	word [MEMORY_SIZE],4000h
 20214                                  	;jbe	short bufset
 20215                                  	;mov	word [buffers],10
 20216                                  	;cmp	word [MEMORY_SIZE],8000h
 20217                                  	;jbe	short bufset
 20218                                  	;mov	word [buffers],15
 20219                                  
 20220                                  	; 18/12/2022
 20221                                  	; word [buffers] = 3 or 2
 20222 00000DA7 BB[9702]                	mov	bx,buffers
 20223 00000DAA A1[9202]                	mov	ax,[MEMORY_SIZE]
 20224 00000DAD 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20225                                  
 20226 00000DAE 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20227 00000DB1 7213                    	jb	short bufset
 20228 00000DB3 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20229 00000DB6 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20230 00000DB9 730B                    	jnb	short bufset
 20231 00000DBB C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20232 00000DBE 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20233 00000DC1 7303                    	jnb	short bufset
 20234 00000DC3 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20235                                  bufset:
 20236                                  	; 23/10/2022
 20237                                  	; 26/03/2019
 20238                                  	; 04/09/2023
 20239                                  	;pop	ds
 20240                                  	;pop	ax
 20241                                  
 20242                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20243                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20244                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20245                                  
 20246                                  ; 26/03/2019
 20247                                  
 20248                                  ;*******************************************************************************
 20249                                  ;									       *
 20250                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20251                                  ; input :								       *
 20252                                  ;    memhi:memlo - start of the next available memory			       *
 20253                                  ;    buffers = number of buffers					       *
 20254                                  ;    h_buffers = number of secondary buffers				       *
 20255                                  ;									       *
 20256                                  ; output:								       *
 20257                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 20258                                  ;	buffinfo set.							       *
 20259                                  ;	bufferqueue set.						       *
 20260                                  ;									       *
 20261                                  ; subroutines to be called:						       *
 20262                                  ;									       *
 20263                                  ;*******************************************************************************
 20264                                  
 20265                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20266                                  	; (SYSINIT:0E60h)
 20267                                  dobuff:
 20268                                  	; ds = cs ; 31/03/2019
 20269                                  	; 23/10/2022
 20270                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20271                                  	; 04/09/2023
 20272 00000DC6 A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 20273 00000DC9 8B0E[9902]              	mov	cx,[h_buffers] ; *
 20274 00000DCD C51E[6B02]              	lds	bx,[DOSINFO]
 20275                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 20276                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20277 00000DD1 89473F                  	mov	[bx+3Fh],ax
 20278                                  	; 04/09/2023
 20279                                  	;mov	ax,[cs:h_buffers]
 20280                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20281                                  	;mov	[bx+41h],ax
 20282                                  	; 04/09/2023
 20283 00000DD4 894F41                  	mov	[bx+41h],cx ; *
 20284 00000DD7 C55F12                  	lds	bx,[bx+12h]
 20285                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20286 00000DDA E84422                  	call	round		; get [memhi]:[memlo]
 20287                                  	;mov	al,devmark_buf	; ='B'
 20288 00000DDD B042                    	mov	al,'B'	
 20289 00000DDF E81706                  	call	setdevmark
 20290                                  
 20291                                  ;allocate buffers
 20292                                  
 20293 00000DE2 1E                      	push	ds			; save buffer info. ptr.
 20294 00000DE3 53                      	push	bx
 20295                                  
 20296 00000DE4 E85203                  	call	set_buffer
 20297                                  
 20298 00000DE7 5B                      	pop	bx
 20299 00000DE8 1F                      	pop	ds
 20300                                  
 20301                                  ;now set the secondary buffer if specified.
 20302                                  
 20303 00000DE9 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20304 00000DEF 742D                    	je	short xif16
 20305 00000DF1 E82D22                  	call	round
 20306                                  	; 23/10/2022
 20307 00000DF4 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 20308                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20309 00000DF9 894F06                  	mov	[bx+6],cx
 20310 00000DFC 2E8B0E[E003]            	mov	cx,[cs:memhi]
 20311                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20312 00000E01 894F08                  	mov	[bx+8],cx
 20313 00000E04 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20314                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20315 00000E09 894F0A                  	mov	[bx+10],cx
 20316 00000E0C B80002                  	mov	ax,512			; 512 byte
 20317 00000E0F F7E1                    	mul	cx
 20318 00000E11 2EA3[DE03]              	mov	[cs:memlo],ax
 20319                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20320 00000E15 2E800E[1814]02          	or	byte [cs:setdevmarkflag],2
 20321 00000E1B E80322                  	call	round
 20322                                  xif16:
 20323                                  
 20324                                  ; ----------------------------------------------------------------------
 20325                                  ; allocate cdss
 20326                                  ; ----------------------------------------------------------------------
 20327                                  
 20328                                  buf1:
 20329 00000E1E E80022                  	call	round
 20330                                  
 20331 00000E21 50                      	push	ax
 20332                                  	; 23/10/2022
 20333                                  	;mov	ax,devmark_cds		;='L'
 20334 00000E22 B84C00                  	mov	ax, 'L'
 20335 00000E25 E8D105                  	call	setdevmark
 20336 00000E28 58                      	pop	ax
 20337                                  
 20338 00000E29 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20339                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20340 00000E2E 268A4D20                	mov	cl,[es:di+20h]
 20341 00000E32 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20342 00000E37 7305                    	jae	short gotncds 		; user setting must be at least numio
 20343 00000E39 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20344                                  gotncds:
 20345 00000E3E 30ED                    	xor	ch,ch
 20346                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20347 00000E40 26884D21                	mov	[es:di+21h],cl
 20348 00000E44 2EA1[E003]              	mov	ax,[cs:memhi]
 20349                                  	;mov	[es:di+SYSI_CDS+2],ax
 20350 00000E48 26894518                	mov	[es:di+18h],ax
 20351 00000E4C 2EA1[DE03]              	mov	ax,[cs:memlo]
 20352                                  	;mov	[es:di+SYSI_CDS],ax
 20353 00000E50 26894516                	mov	[es:di+16h],ax
 20354 00000E54 88C8                    	mov	al,cl
 20355                                  	;mov	ah,curdirlen ; curdir_list.size
 20356 00000E56 B458                    	mov	ah,88
 20357 00000E58 F6E4                    	mul	ah
 20358 00000E5A E84F02                  	call	ParaRound
 20359 00000E5D 2E0106[E003]            	add	[cs:memhi],ax
 20360                                  
 20361                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20362 00000E62 2E800E[1814]02          	or	byte [cs:setdevmarkflag],2
 20363 00000E68 E8B621                  	call	round			; check for mem error before initializing
 20364                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20365 00000E6B 26C535                  	lds	si,[es:di]
 20366                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20367 00000E6E 26C47D16                	les	di,[es:di+16h]
 20368 00000E72 E88CFD                  	call	fooset
 20369                                  
 20370                                  ; ----------------------------------------------------------------------
 20371                                  ; allocate space for internal stack
 20372                                  ; ----------------------------------------------------------------------
 20373                                  
 20374 00000E75 0E                      	push	cs
 20375 00000E76 1F                      	pop	ds
 20376                                  
 20377                                  ;	if the user did not entered stacks= command, as a default, do not install
 20378                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20379                                  ;	otherwise,install it to the user specified value or to the default
 20380                                  ;	value of 9,128 for other systems.
 20381                                  
 20382 00000E77 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20383 00000E7C 740E                    	je	short doinstallstack	; then install as specified by the user
 20384 00000E7E 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20385 00000E83 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20386 00000E85 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20387 00000E8A 736D                    	jae	short skipstack
 20388                                  doinstallstack:
 20389 00000E8C A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20390 00000E8F 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20391 00000E91 7466                    	jz	short skipstack		; don't install stack.
 20392                                  
 20393                                  ;	dynamic relocation of stack code.
 20394                                  
 20395 00000E93 E88B21                  	call	round			;[memhi] = seg. for stack code
 20396                                  					;[memlo] = 0
 20397                                  
 20398                                  ; set devmark block into memory for mem command
 20399                                  ; devmark_id = 's' for stack
 20400                                  
 20401                                  	;mov	al,devmark_stk	;='S'
 20402                                  	; 23/10/2022
 20403 00000E96 B053                    	mov	al,'S'
 20404 00000E98 E85E05                  	call	setdevmark
 20405                                  
 20406 00000E9B A1[E003]                	mov	ax,[memhi]
 20407 00000E9E 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20408                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20409                                  	; 11/12/2022
 20410                                  	; ds = cs
 20411                                  	;push	cs
 20412                                  	;pop	ds
 20413 00000EA0 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20414 00000EA2 31FF                    	xor	di,di
 20415 00000EA4 B9[6702]                	mov	cx,endstackcode
 20416 00000EA7 890E[DE03]              	mov	[memlo],cx
 20417 00000EAB E87321                  	call	round		;have enough space for relocation?
 20418 00000EAE F3A4                    	rep	movsb
 20419                                  
 20420 00000EB0 1E                      	push	ds		; stick the location of the NextStack entry
 20421                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20422                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20423                                  	; 21/10/2022
 20424 00000EB1 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20425 00000EB4 8ED8                    	mov	ds,ax
 20426 00000EB6 C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20427 00000EBC 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20428                                  
 20429 00000EC0 2EA1[DE03]              	mov	ax,[cs:memlo]
 20430 00000EC4 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20431 00000EC8 A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20432 00000ECB 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20433 00000ECF 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20434 00000ED3 A3[C608]                	mov	[IT_StackLoc+2],ax
 20435                                  
 20436                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20437                                  
 20438                                  	;mov	ax,entrysize ; mov ax,8
 20439                                  	; 23/10/2022
 20440 00000ED6 B80800                  	mov	ax,8
 20441 00000ED9 2E0306[8C02]            	add	ax,[cs:stack_size]
 20442 00000EDE 2EF726[8A02]            	mul	word [cs:stack_count]
 20443                                  
 20444 00000EE3 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20445                                  
 20446 00000EE6 1F                      	pop	ds		; no more need to access Instance Table
 20447                                  
 20448 00000EE7 E8C201                  	call	ParaRound	; convert size to paragraphs
 20449                                  	
 20450                                  	; 11/12/2022
 20451                                  	; ds = cs
 20452                                  	;add	[cs:memhi],ax
 20453 00000EEA 0106[E003]              	add	[memhi],ax
 20454                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20455                                  	;or	byte [cs:setdevmarkflag],2
 20456 00000EEE 800E[1814]02            	or	byte [setdevmarkflag],2
 20457                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20458                                  				;to set the devmark_size for stack by round routine.
 20459 00000EF3 E82B21                  	call	round		; check for memory error before
 20460                                  				; continuing
 20461 00000EF6 E8E702                  	call	stackinit	; initialize hardware stack. 
 20462                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20463                                  skipstack:
 20464                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20465                                  	; (SYSINIT:0F99h)
 20466                                  
 20467                                  	; 11/12/2022
 20468                                  	; ds = cs
 20469                                  	;push	cs
 20470                                  	;pop	ds
 20471                                  
 20472 00000EF9 A0[9D02]                	mov	al,[FILES]
 20473 00000EFC 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20474                                  				;  it does sign extend.
 20475 00000EFE 89C1                    	mov	cx,ax
 20476 00000F00 31DB                    	xor	bx,bx		;close standard input
 20477 00000F02 B43E                    	mov	ah,3Eh ; CLOSE
 20478 00000F04 CD21                    	int	21h
 20479 00000F06 BB0200                  	mov	bx,2
 20480                                  rcclloop:			;close everybody but standard output
 20481 00000F09 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20482 00000F0B CD21                    	int	21h		; in case we can't get new one open.
 20483 00000F0D 43                      	inc	bx
 20484 00000F0E E2F9                    	loop	rcclloop
 20485                                  
 20486 00000F10 BA[0833]                	mov	dx,condev
 20487 00000F13 B002                    	mov	al,2
 20488 00000F15 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20489 00000F17 F9                      	stc			; set for possible int 24
 20490 00000F18 CD21                    	int	21h
 20491 00000F1A 7305                    	jnc	short goaux
 20492 00000F1C E84C23                  	call	badfil
 20493 00000F1F EB13                    	jmp	short goaux2
 20494                                  goaux:	
 20495 00000F21 50                      	push	ax
 20496 00000F22 BB0100                  	mov	bx,1		;close standard output
 20497 00000F25 B43E                    	mov	ah,3Eh ; CLOSE
 20498 00000F27 CD21                    	int	21h
 20499 00000F29 58                      	pop	ax
 20500                                  
 20501 00000F2A 89C3                    	mov	bx,ax		;new device handle
 20502 00000F2C B445                    	mov	ah,45h ; XDUP
 20503 00000F2E CD21                    	int	21h		;dup to 1,stdout
 20504 00000F30 B445                    	mov	ah,45h ; XDUP
 20505 00000F32 CD21                    	int	21h		;dup to 2,stderr
 20506                                  goaux2: 
 20507 00000F34 BA[0C33]                	mov	dx,auxdev
 20508 00000F37 B002                    	mov	al,2		;read/write access
 20509 00000F39 E86023                  	call	open_dev
 20510                                  
 20511 00000F3C BA[1033]                	mov	dx,prndev
 20512 00000F3F B001                    	mov	al,1		;write only
 20513 00000F41 E85823                  	call	open_dev
 20514                                  
 20515                                  ;global rearm command for shared interrupt devices attached in the system;
 20516                                  ;shared interrupt attachment has some problem when it issues interrupt
 20517                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20518                                  ;no further interrupts on that level will be presented until a global rearm
 20519                                  ;is issued. by the request of the system architecture group, msbio will
 20520                                  ;issue a global rearm after every device driver is loaded.
 20521                                  ;to issue a global rearm:	;for pc1,xt,palace
 20522                                  ;
 20523                                  ;			  out 02f2h,xx  ; interrupt level 2
 20524                                  ;			  out 02f3h,xx  ; interrupt level 3
 20525                                  ;			  out 02f4h,xx  ; interrupt level 4
 20526                                  ;			  out 02f5h,xx  ; interrupt level 5
 20527                                  ;			  out 02f6h,xx  ; interrupt level 6
 20528                                  ;			  out 02f7h,xx  ; interrupt level 7
 20529                                  ;
 20530                                  ;	for pc at,in addition to the above commands,
 20531                                  ;	need to handle the secondary interrupt handler
 20532                                  ;
 20533                                  ;			  out 06f2h,xx  ; interrupt level 10
 20534                                  ;			  out 06f3h,xx  ; interrupt level 11
 20535                                  ;			  out 06f4h,xx  ; interrupt level 12
 20536                                  ;			  out 06f6h,xx  ; interrupt level 14
 20537                                  ;			  out 06f7h,xx  ; interrupt level 15
 20538                                  ;
 20539                                  ;	for round-up machine
 20540                                  ;
 20541                                  ;			  none.
 20542                                  
 20543                                  ; where xx stands for any value.
 20544                                  ;
 20545                                  ; for your information,after naples level machine,the system service bios
 20546                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20547                                  
 20548                                  	; 24/10/2022
 20549                                  
 20550 00000F44 50                      	push	ax
 20551 00000F45 53                      	push	bx
 20552 00000F46 52                      	push	dx
 20553 00000F47 06                      	push	es
 20554                                  
 20555 00000F48 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20556 00000F4A BAF202                  	mov	dx,2F2h 		;get starting address
 20557 00000F4D EE                      	out	dx,al			; out 02f2h,0ffh
 20558 00000F4E 42                      	inc	dx
 20559 00000F4F EE                      	out	dx,al			; out 02f3h,0ffh
 20560 00000F50 42                      	inc	dx
 20561 00000F51 EE                      	out	dx,al			; out 02f4h,0ffh
 20562 00000F52 42                      	inc	dx
 20563 00000F53 EE                      	out	dx,al			; out 02f5h,0ffh
 20564 00000F54 42                      	inc	dx
 20565 00000F55 EE                      	out	dx,al			; out 02f6h,0ffh
 20566 00000F56 42                      	inc	dx
 20567 00000F57 EE                      	out	dx,al			; out 02f7h,0ffh
 20568                                  
 20569                                  ;sb secondary global rearm
 20570                                  
 20571 00000F58 B800F0                  	mov	ax,0F000h		;get machine type
 20572 00000F5B 8EC0                    	mov	es,ax
 20573 00000F5D 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20574 00000F63 740D                    	je	short startrearm	; *if at no need to check
 20575                                  
 20576 00000F65 B4C0                    	mov	ah,0C0h 		;get system configuration
 20577 00000F67 CD15                    	int	15h			; *
 20578 00000F69 7216                    	jc	short finishrearm	; *jmp if old rom
 20579                                  
 20580                                  ; test feature byte for secondary interrupt controller
 20581                                  
 20582 00000F6B 26F6470540              	test	byte [es:bx+5],40h
 20583                                  	; 24/10/2022
 20584                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20585 00000F70 740F                    	je	short finishrearm	;jmp if it is there
 20586                                  
 20587                                  startrearm:
 20588 00000F72 B0FF                    	mov	al,0FFh 		;write any pattern to port
 20589 00000F74 BAF206                  	mov	dx,6F2h 		;get starting address
 20590 00000F77 EE                      	out	dx,al			;out 06f2h,0ffh
 20591 00000F78 42                      	inc	dx			;bump address
 20592 00000F79 EE                      	out	dx,al			;out 06f3h,0ffh
 20593 00000F7A 42                      	inc	dx			;bump address
 20594 00000F7B EE                      	out	dx,al			;out 06f4h,0ffh
 20595 00000F7C 42                      	inc	dx			;bump address
 20596 00000F7D 42                      	inc	dx			;bump address
 20597 00000F7E EE                      	out	dx,al			;out 06f6h,0ffh
 20598 00000F7F 42                      	inc	dx			;bump address
 20599 00000F80 EE                      	out	dx,al			;out 06f7h,0ffh
 20600                                  
 20601                                  finishrearm:
 20602 00000F81 07                      	pop	es
 20603 00000F82 5A                      	pop	dx
 20604 00000F83 5B                      	pop	bx
 20605 00000F84 58                      	pop	ax
 20606                                  
 20607                                  ;    global rearm end *******************
 20608                                  
 20609                                  ; ----------------------------------------------------------------------
 20610                                  ; allocate sysinit_base for install= command
 20611                                  ; ----------------------------------------------------------------------
 20612                                  ; sysinit_base allocation.
 20613                                  ;   check if endfile has been called to handle install= command.
 20614                                  
 20615                                  set_sysinit_base:
 20616                                  
 20617                                  ; ----------------------------------------------------------------------
 20618                                  ;sysinit_base will be established in the secure area of
 20619                                  ;lower memory when it handles the first install= command.
 20620                                  ;sysinit_base is the place where the actual exec function will be called and
 20621                                  ;will check sysinit module in high memory if it is damaged by the application
 20622                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20623                                  ;is displayed by sysinit_base.
 20624                                  ; ----------------------------------------------------------------------
 20625                                  
 20626                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20627                                  	; (SYSINIT:1028h)
 20628                                  
 20629                                  	; 11/12/2022
 20630                                  	; ds = cs
 20631 00000F85 50                      	push	ax			; set devmark for mem command
 20632 00000F86 A1[E003]                	mov	ax,[memhi]
 20633 00000F89 2B06[E403]              	sub	ax,[area]
 20634 00000F8D A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20635                                  	;mov	al,devmark_inst ; 'T'
 20636 00000F90 B054                    	mov	al,'T'
 20637 00000F92 E86404                  	call	setdevmark
 20638 00000F95 58                      	pop	ax
 20639                                  
 20640 00000F96 8B3E[E003]              	mov	di,[memhi]
 20641 00000F9A 8EC7                    	mov	es,di
 20642 00000F9C 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20643 00000FA0 31FF                    	xor	di,di
 20644 00000FA2 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20645 00000FA6 BE[B810]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20646 00000FA9 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20647                                  	; 24/10/2022 
 20648                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20649 00000FAC 010E[DE03]              	add	[memlo],cx
 20650                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20651                                  	; 11/12/2022
 20652                                  	; ds = cs
 20653                                  	;or	byte [cs:setdevmarkflag],2
 20654 00000FB0 800E[1814]02            	or	byte [setdevmarkflag],2
 20655                                  	;or	byte [setdevmarkflag],for_devmark
 20656 00000FB5 E86920                  	call	round			; check mem error. also,readjust memhi for the next use.
 20657 00000FB8 F3A4                    	rep	movsb			; reallocate it.
 20658                                  
 20659 00000FBA C706[5203][9110]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20660 00000FC0 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20661                                  	;or	word [install_flag],has_installed ; set the flag.
 20662                                  	;or	byte [install_flag],has_installed ; 2
 20663                                  	; 11/12/2022
 20664 00000FC4 800E[4A03]02            	or	byte [install_flag],2
 20665                                  	; 24/10/2022
 20666                                  	;or	word [install_flag],2	
 20667                                  
 20668                                  ; ----------------------------------------------------------------------
 20669                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20670                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20671                                  ; have_install_cmd.
 20672                                  ; ----------------------------------------------------------------------
 20673                                  
 20674 00000FC9 E85520                  	call	round
 20675 00000FCC 8B1E[E003]              	mov	bx,[memhi]
 20676 00000FD0 A1[E403]                	mov	ax,[area]
 20677 00000FD3 A3[DA03]                	mov	[old_area],ax		; save [area]
 20678 00000FD6 8EC0                    	mov	es,ax			;calc what we needed
 20679 00000FD8 29C3                    	sub	bx,ax
 20680                                  	; 24/10/2022
 20681 00000FDA B44A                    	mov	ah,4Ah ; SETBLOCK
 20682 00000FDC CD21                    	int	21h			;give the rest back
 20683                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20684                                  		; ES = segment address of block to change
 20685                                  		; BX = new size in paragraphs
 20686 00000FDE 06                      	push	es
 20687 00000FDF 8CC0                    	mov	ax,es
 20688 00000FE1 48                      	dec	ax
 20689 00000FE2 8EC0                    	mov	es,ax			;point to arena
 20690                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20691                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20692                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20693                                  	; 24/10/2022
 20694 00000FE4 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20695 00000FEB 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20696 00000FF2 07                      	pop	es
 20697                                  
 20698 00000FF3 BBFFFF                  	mov	bx,0FFFFh
 20699 00000FF6 B448                    	mov	ah,48h ; ALLOC
 20700 00000FF8 CD21                    	int	21h
 20701 00000FFA B448                    	mov	ah,48h ; ALLOC
 20702 00000FFC CD21                    	int	21h			; allocate the rest of the memory
 20703                                  		; DOS - 2+ - ALLOCATE MEMORY
 20704                                  		; BX = number of 16-byte paragraphs desired
 20705 00000FFE A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20706 00001001 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20707                                  
 20708                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20709                                  ;;;; allocated.
 20710                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20711                                  ;;;; this time) to the top-of-the memory),here we are going to
 20712                                  ;;;; 1). "setblock" from memhi to confbot.
 20713                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20714                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20715                                  
 20716                                  ;memory allocation for sysinit,confbot module.
 20717                                  
 20718 00001007 8EC0                    	mov	es,ax
 20719                                  	;mov	bx,[CONFBOT]
 20720                                  	; 24/10/2022
 20721 00001009 8B1E[A102]              	mov	bx,[top_of_cdss]
 20722 0000100D 29C3                    	sub	bx,ax			; confbot - memhi
 20723 0000100F 4B                      	dec	bx			; make a room for the memory block id.
 20724 00001010 4B                      	dec	bx			; make sure!!!.
 20725 00001011 B44A                    	mov	ah,4Ah ; SETBLOCK
 20726 00001013 CD21                    	int	21h			; this will free (confbot to top of memory)
 20727                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20728                                  		; ES = segment address of block to change
 20729                                  		; BX = new size in paragraphs
 20730 00001015 BBFFFF                  	mov	bx,0FFFFh
 20731 00001018 B448                    	mov	ah,48h ; ALLOC
 20732 0000101A CD21                    	int	21h
 20733 0000101C B448                    	mov	ah,48h ; ALLOC
 20734 0000101E CD21                    	int	21h			; allocate (confbot to top of memory)
 20735                                  		; DOS - 2+ - ALLOCATE MEMORY
 20736                                  		; BX = number of 16-byte paragraphs desired
 20737 00001020 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20738                                  					; need this to free this area for command.com.
 20739 00001023 8E06[E003]              	mov	es,[memhi]
 20740 00001027 B449                    	mov	ah,49h			; free allocated memory.
 20741 00001029 CD21                    	int	21h			; free (memhi to confbot(=area))
 20742                                  		; DOS - 2+ - FREE MEMORY
 20743                                  		; ES = segment address of area to be freed
 20744                                  endfile_ret:
 20745 0000102B C3                      	retn
 20746                                  
 20747                                  ; End of "EndFile" DOS structure configuration.
 20748                                  
 20749                                  ; ----------------------------------------------------------------------
 20750                                  ; 26/03/2019 - Retro DOS v4.0
 20751                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20752                                  ; ----------------------------------------------------------------------
 20753                                  ; Do_Install_Exec
 20754                                  ;
 20755                                  ; This procedure is used to EXEC a program being loaded via the 
 20756                                  ; "install=" mechanism in config.sys. It does this by setting up
 20757                                  ; the parameters, and then jumping to sysinit_base, which has been
 20758                                  ; setup in low memory. When complete, sysinit_base will jump back
 20759                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20760                                  ; program).
 20761                                  
 20762                                  ;SYSINIT:10CFh:
 20763                                  
 20764                                  do_install_exec:			; now,handles install= command.
 20765                                  
 20766 0000102C 56                      	push	si			; save si for config.sys again.
 20767                                  
 20768                                  ; we are going to call load/exec function.
 20769                                  ; set es:bx to the parameter block here;;;;;;;
 20770                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20771                                  ; after the filename. so parameter starts after that. if next
 20772                                  ; character is a line feed (i.e. 10),then assume that the 0
 20773                                  ; we already encountered used to be a carrage return. in this
 20774                                  ; case,let's set the length to 0 which will be followed by
 20775                                  ; carridge return.
 20776                                  
 20777                                  ; es:si -> command line in config.sys. points to the first non blank
 20778                                  ;character after =.
 20779                                  
 20780 0000102D 06                      	push	es
 20781 0000102E 1E                      	push	ds
 20782 0000102F 07                      	pop	es
 20783 00001030 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20784 00001031 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20785                                  
 20786 00001033 31C9                    	xor	cx,cx
 20787 00001035 FC                      	cld
 20788 00001036 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20789 0000103C BF[6E03]                	mov	di,ldexec_parm
 20790                                  installfilename:			; skip the file name
 20791 0000103F AC                      	lodsb				; al = ds:si; si++
 20792 00001040 3C00                    	cmp	al,0
 20793 00001042 7402                    	je	short got_installparm
 20794 00001044 EBF9                    	jmp	short installfilename
 20795                                  got_installparm:			; copy the parameters to ldexec_parm
 20796 00001046 AC                      	lodsb
 20797 00001047 268805                  	mov	[es:di],al
 20798 0000104A 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20799 0000104C 7405                    	je	short done_installparm
 20800 0000104E FEC1                    	inc	cl			; # of char. in the parm.
 20801 00001050 47                      	inc	di
 20802 00001051 EBF3                    	jmp	short got_installparm
 20803                                  done_installparm:
 20804 00001053 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20805 00001058 80F900                  	cmp	cl,0			; if no parm,then
 20806 0000105B 7506                    	jne	short install_seg_set 	; let the parm area
 20807 0000105D 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20808                                  					; starts with cr.
 20809                                  install_seg_set:
 20810 00001063 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20811 0000106A 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20812                                  
 20813                                  ;---------------------------------------------------M067----------------
 20814                                  ;
 20815                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20816                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20817                                  ;
 20818                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20819                                  ;
 20820                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20821                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20822                                  ; 	was fixed. 
 20823                                  ;
 20824                                  ; ----------------------------------------------------------------------
 20825                                  
 20826                                  ;;ifdef   MULTI_CONFIG
 20827                                  
 20828                                  ; If there's any environment data in "config_wrkseg", pass to app
 20829                                  
 20830                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20831                                          ;mov     cx,ax
 20832                                          ;cmp     word [cs:config_envlen],0
 20833                                          ;je      short no_envdata2
 20834                                          ;mov     cx,[cs:config_wrkseg]
 20835                                  ;no_envdata2:
 20836                                  ;;endif  ;MULTI_CONFIG
 20837                                  
 20838                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20839                                  	; 24/10/2022
 20840                                  	;mov	[cs:iexec.environ],cx
 20841                                  	; 02/11/2022
 20842 0000106C 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20843                                  
 20844                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20845 00001070 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20846                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20847 00001074 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20848                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20849 00001078 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20850 0000107C E86E00                  	call	sum_up
 20851 0000107F 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20852 00001083 31C0                    	xor	ax,ax
 20853 00001085 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20854 00001087 BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20855 0000108A 06                      	push	es			; save es,ds for load/exec
 20856 0000108B 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20857 0000108C 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20858                                  					; load/exec function and check sum.
 20859                                  
 20860                                  ;----------------------------------------
 20861                                  
 20862                                  ;j.k. this is the returning address from sysinit_base.
 20863                                  
 20864                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20865                                  
 20866                                  sysinitptr:				; returning far address from sysinit_base
 20867 00001091 5E                      	pop	si			; restore si for config.sys file.
 20868 00001092 06                      	push	es
 20869 00001093 1E                      	push	ds
 20870 00001094 07                      	pop	es
 20871 00001095 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20872 00001096 7306                            jnc     short install_exit_ret
 20873                                  
 20874 00001098 56                      	push	si			; error in loading the file for install=.
 20875 00001099 E8D321                  	call	badload 		; es:si-> path,filename,0.
 20876 0000109C 5E                      	pop	si
 20877                                  
 20878                                  	; 24/10/2022
 20879                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20880                                  	; 11/12/2022
 20881                                  	; ds = cs
 20882 0000109D C3                      	retn
 20883                                  
 20884                                  install_exit_ret:
 20885                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20886                                  
 20887                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20888                                  ;SYSINIT:1142h:
 20889 0000109E B44D                    	mov     ah,4Dh
 20890 000010A0 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20891 000010A2 80FC03                  	cmp     ah,3
 20892 000010A5 7404                    	jz      short sysinitptr_retn
 20893 000010A7 E80916                  	call    error_line
 20894 000010AA F9                      	stc
 20895                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20896 000010AB C3                      	retn		
 20897                                  
 20898                                  ; ----------------------------------------------------------------------
 20899                                  
 20900                                  ;**	ParaRound - Round Up length to paragraph multiple
 20901                                  ;
 20902                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20903                                  ;	by 16 yielding a "length in paragraphs" value.
 20904                                  ;
 20905                                  ;	ENTRY	(ax) = byte length
 20906                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20907                                  ;	USES	ax, flags
 20908                                  
 20909                                  ParaRound:
 20910 000010AC 83C00F                  	add	ax,15
 20911 000010AF D1D8                    	rcr	ax,1
 20912 000010B1 D1E8                    	shr	ax,1
 20913 000010B3 D1E8                    	shr	ax,1
 20914 000010B5 D1E8                    	shr	ax,1
 20915 000010B7 C3                      	retn
 20916                                  
 20917                                  ; ----------------------------------------------------------------------
 20918                                  ; sysinit_base module.
 20919                                  ;
 20920                                  ; This module is relocated by the routine EndFile to a location in low
 20921                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20922                                  ; that are being loaded by the "install=" command. After the EXEC call
 20923                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20924                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20925                                  ; If it did, then this module will print an error message and stop the
 20926                                  ; system. Otherwise, it returns control to SYSINIT.
 20927                                  ;
 20928                                  ;in: after relocation,
 20929                                  ;    ax = 4b00h - load and execute the program dos function.
 20930                                  ;    ds = confbot. segment of config.sys file image
 20931                                  ;    es = sysinitseg. segment of sysinit module itself.
 20932                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20933                                  ;    es:bx = pointer to a parameter block for load.
 20934                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20935                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20936                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20937                                  ;			word boundary moduler form.
 20938                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20939                                  ;
 20940                                  ;note: sysinit should save necessary registers and when the control is back
 20941                                  
 20942                                  	; 24/10/2022
 20943                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20944                                  sysinit_base:				
 20945 000010B8 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20946 000010BD 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20947 000010C2 CD21                    	int	21h			; load/exec dos call.
 20948 000010C4 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20949 000010C9 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20950 000010CE 1F                      	pop	ds			; restore confbot seg
 20951 000010CF 07                      	pop	es			; restore sysinitseg
 20952 000010D0 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20953                                  					; at this time,i don't have to worry about
 20954                                  					; that sysinit module has been broken or not.
 20955 000010D2 E81800                  	call	sum_up			; otherwise,check if it is good.
 20956 000010D5 263906[5603]            	cmp	[es:checksum],ax
 20957 000010DA 740C                    	je	short sysinit_base_end
 20958                                  
 20959                                  ;	memory broken. show "memory allocation error" message and stall.
 20960                                  
 20961 000010DC B409                    	mov	ah,9
 20962 000010DE 0E                      	push	cs
 20963 000010DF 1F                      	pop	ds
 20964 000010E0 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20965 000010E3 CD21                    	int	21h
 20966                                  		; DOS - PRINT STRING
 20967                                  		; DS:DX -> string terminated by "$"
 20968                                  	; 24/10/2022
 20969                                  _stall: 
 20970                                  	; 11/12/2022
 20971 000010E5 F4                      	hlt 
 20972                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20973                                  	;hlt				;use HLT to minimize energy consumption
 20974 000010E6 EBFD                            jmp	short _stall
 20975                                  
 20976                                  sysinit_base_end: 
 20977 000010E8 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20978                                  
 20979                                  ;-------------------------------------
 20980                                  
 20981                                  sum_up:
 20982                                  
 20983                                  ;in:   es - sysinitseg.
 20984                                  ;out:  ax - result
 20985                                  ;
 20986                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20987                                  ;	 sysinit segment,the data area, and the current stack area are not
 20988                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20989                                  ;	 gaurantee to be safe.
 20990                                  ;
 20991                                  ;first sum up confbot seg.
 20992                                  
 20993 000010ED 1E                      	push	ds
 20994                                  	;mov	ax,[es:CONFBOT]
 20995                                  	; 24/10/2022
 20996 000010EE 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20997 000010F2 8ED8                    	mov	ds,ax
 20998 000010F4 31F6                    	xor	si,si
 20999 000010F6 31C0                    	xor	ax,ax
 21000 000010F8 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 21001                                  					;whole test better fail.
 21002 000010FD D1E9                    	shr	cx,1			; make it a word count
 21003 000010FF 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 21004                                  sum1:
 21005 00001101 0304                    	add	ax,[si]
 21006 00001103 46                      	inc	si
 21007 00001104 46                      	inc	si
 21008 00001105 E2FA                    	loop	sum1
 21009                                  ;now,sum up sysinit module.
 21010                                  sum_sys_code:
 21011                                  	; 24/10/2022
 21012 00001107 BE0611                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 21013                                  				        ; starting after the stack.  M069
 21014                                  					;  this does not cover the possible stack code!!!
 21015                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 21016                                  	; 02/11/2022
 21017                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 21018                                  	; 30/12/2022 (BugFix)
 21019                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 21020 0000110A B9[0038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 21021 0000110D 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 21022 0000110F D1E9                    	shr	cx,1
 21023                                  sum2:
 21024 00001111 260304                  	add	ax,[es:si]
 21025 00001114 46                      	inc	si
 21026 00001115 46                      	inc	si
 21027 00001116 E2F9                    	loop	sum2
 21028 00001118 1F                      	pop	ds
 21029 00001119 C3                      	retn
 21030                                  
 21031                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21032                                  
 21033                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 21034                                  ;SYSINIT:11BDh:
 21035 0000111A 0000                    	dw	0
 21036                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 21037                                  ;SYSINIT:11BFh:
 21038 0000111C 0000                    	dw	0
 21039                                  
 21040                                  mem_alloc_err_msgx:
 21041                                  
 21042                                         ;include msbio.cl4		; memory allocation error message
 21043                                  
 21044                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 21045 0000111E 0D0A                    	db	0Dh,0Ah
 21046 00001120 4D656D6F727920616C-     	db 	'Memory allocation error $'
 21046 00001129 6C6F636174696F6E20-
 21046 00001132 6572726F722024     
 21047                                  
 21048                                  end_sysinit_base: ; label byte
 21049                                  	; 24/10/2022
 21050                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 21051                                  
 21052                                  ; ----------------------------------------------------------------------
 21053                                  ; Set_Buffer
 21054                                  ;
 21055                                  ;function: set buffers in the real memory.				  
 21056                                  ;	   lastly set the memhi,memlo for the next available free address.
 21057                                  ;
 21058                                  ;input:    ds:bx -> buffinfo.
 21059                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 21060                                  ;	   singlebuffersize = buffer header size + sector size		  
 21061                                  ;
 21062                                  ;output:   buffers Queue established.	       				   
 21063                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 21064                                  ; ----------------------------------------------------------------------
 21065                                  
 21066                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21067                                  	; (SYSINIT:11DCh)
 21068                                  
 21069                                  set_buffer:
 21070 00001139 30D2                    	xor	dl,dl				; assume buffers not in HMA
 21071 0000113B E85500                  	call	GetBufferAddr
 21072 0000113E 7402                    	jz	short set_buff_1
 21073 00001140 B201                    	mov	dl,1				; buffers in HMA
 21074                                  set_buff_1:
 21075                                  	; 25/10/2022
 21076                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 21077 00001142 893F                    	mov	[bx],di
 21078                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 21079 00001144 8C4702                  	mov	[bx+2],es
 21080                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 21081 00001147 C747040000              	mov	word [bx+4],0
 21082                                  
 21083 0000114C 89F8                    	mov	ax,di
 21084 0000114E 2E8B0E[9702]            	mov	cx,[cs:buffers]
 21085 00001153 57                      	push	di				; remember first buffer
 21086                                  
 21087                                  ;	for each buffer
 21088                                  
 21089                                  nxt_buff:
 21090 00001154 E86100                  	call	set_buffer_info 		; set buf_link,buf_id...
 21091 00001157 89C7                    	mov	di,ax
 21092 00001159 E2F9                    	loop	nxt_buff
 21093                                  
 21094 0000115B 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21095                                  
 21096 00001160 59                      	pop	cx				; get first buffer
 21097                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21098 00001161 26890D                  	mov	[es:di],cx
 21099 00001164 87CF                    	xchg	cx,di
 21100                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21101                                  	; 25/10/2022
 21102 00001166 26894D02                	mov	[es:di+2],cx
 21103                                  
 21104 0000116A 08D2                    	or	dl,dl				; In HMa ?
 21105 0000116C 7417                    	jz	short set_buff_2		; no
 21106                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21107 0000116E C6470C01                	mov	byte [bx+12],1
 21108 00001172 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21109                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 21110 00001176 C7470D0000              	mov	word [bx+13],0
 21111                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21112 0000117B 89470F                  	mov	word [bx+15],ax
 21113 0000117E 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21114                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21115 00001182 83E814                  	sub	ax,20
 21116                                  set_buff_2:
 21117 00001185 2E0106[DE03]            	add	[cs:memlo],ax
 21118                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21119 0000118A 2E800E[1814]02          	or	byte [cs:setdevmarkflag],2
 21120                                  	;call	round
 21121                                  	;retn
 21122                                  	; 12/12/2022
 21123 00001190 E98E1E                  	jmp	round
 21124                                  
 21125                                  ; ----------------------------------------------------------------------
 21126                                  ; procedure : GetBufferAddr
 21127                                  ;
 21128                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21129                                  ;
 21130                                  ; returns in es:di the buffer adress
 21131                                  ; returns NZ if allocated in HMA
 21132                                  ; ----------------------------------------------------------------------
 21133                                  
 21134                                  	; 25/10/2022 
 21135                                  GetBufferAddr:
 21136 00001193 53                      	push	bx
 21137 00001194 52                      	push	dx
 21138 00001195 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21139 00001199 2EF726[9702]            	mul	word [cs:buffers]
 21140                                  	;add	ax,0Fh
 21141 0000119E 83C00F                  	add	ax,15 
 21142                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21143                                  	;and	ax,~15	; 0FFF0h	; para round
 21144                                  	; 12/12/2022
 21145 000011A1 24F0                    	and	al,~15	; 0F0h
 21146 000011A3 89C3                    	mov	bx,ax
 21147 000011A5 B8024A                  	mov	ax,4A02h
 21148                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21149 000011A8 CD2F                    	int	2Fh
 21150 000011AA 83FFFF                  	cmp	di,0FFFFh
 21151 000011AD 7506                    	jne	short got_hma
 21152                                  
 21153                                  	;mov	di,0			; dont xor di,di Z flag needed
 21154                                  	; 05/09/2023
 21155                                  	; zf=1
 21156 000011AF 47                      	inc	di ; 0FFFFh -> 0
 21157                                  	; zf=1
 21158                                  
 21159                                  	;zf=1
 21160                                  	;xor	di,di	; 25/10/2022
 21161                                  	;zf=1
 21162 000011B0 2E8E06[E003]            	mov	es,[cs:memhi]
 21163                                  got_hma:
 21164 000011B5 5A                      	pop	dx
 21165 000011B6 5B                      	pop	bx
 21166 000011B7 C3                      	retn
 21167                                  
 21168                                  ; ----------------------------------------------------------------------
 21169                                  
 21170                                  set_buffer_info:
 21171                                  
 21172                                  ;function: set buf_link,buf_id,buf_sector
 21173                                  ;
 21174                                  ;in: es:di -> buffer header to be set.
 21175                                  ;    ax = di
 21176                                  ;
 21177                                  ;out:
 21178                                  ;    above entries set.
 21179                                  
 21180                                  	; 25/10/2022 
 21181 000011B8 2EFF36[3903]            	push	word [cs:buf_prev_off]
 21182                                  	;pop	word [es:di+buffinfo.buf_prev]
 21183 000011BD 268F4502                	pop	word [es:di+2]
 21184 000011C1 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 21185 000011C5 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 21186                                  	;mov	[es:di+buffinfo.buf_next],ax
 21187 000011CA 268905                  	mov	[es:di],ax
 21188                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21189 000011CD 26C74504FF00            	mov	word [es:di+4],00FFh
 21190                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21191 000011D3 26C745060000            	mov	word [es:di+6],0
 21192                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21193 000011D9 26C745080000            	mov	word [es:di+8],0
 21194 000011DF C3                      	retn
 21195                                  
 21196                                  ; ======================================================================
 21197                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21198                                  ; ----------------------------------------------------------------------
 21199                                  ; 27/03/2019 - Retro DOS v4.0
 21200                                  
 21201                                  ; ----------------------------------------------------------------------
 21202                                  ; ibmstack initialization routine.
 21203                                  ;
 21204                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21205                                  ;	has been modified. this initialization routine also has to
 21206                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21207                                  ;	should be set to signal that this interrupt handler is the
 21208                                  ;	first handler hooked to this interrupt vector.
 21209                                  ;	we determine this by looking at the instruction pointed by
 21210                                  ;	this vector. if it is iret, then this handler should be the
 21211                                  ;	first one. in our case, only the interrupt vector 77h is the
 21212                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21213                                  ;
 21214                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21215                                  ;	some design changes are needed to the above interrupt sharing
 21216                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21217                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21218                                  ;	interrupts would only be generated on levels 7 and 15.
 21219                                  ;	these assumptions are not true any more. we have to use the firstflag
 21220                                  ;	for every level of interrupt. we will set the firstflag on the following
 21221                                  ;	conditions:
 21222                                  ;
 21223                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21224                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21225                                  ;	 c. else if cs:ip points to an iret, then "first"
 21226                                  ;	 d. else if cs:ip points to dummy, then "first"
 21227                                  ;
 21228                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21229                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21230                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21231                                  ;	the bioses for all of the machines.
 21232                                  ;
 21233                                  ;	system design group requests bios to handle the phantom interrupts.
 21234                                  ;
 21235                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21236                                  ;	produced by the bogus adapter card even without interrupt request is
 21237                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21238                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21239                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21240                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21241                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21242                                  ;	interrupt line.
 21243                                  ;
 21244                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21245                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21246                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21247                                  ;	control. if it is the first, then the following action should be
 21248                                  ;	taken. we don't have to implement skack logic in this case.
 21249                                  ;
 21250                                  ;	to implement this logic, we rather choose a simple method.
 21251                                  ;	if ont of the above "firstflag" conditions is met, we are not
 21252                                  ;	going to hook this interrupt vector. the reason is if the original
 21253                                  ;	vector points to "iret" and do nothing, we don't need
 21254                                  ;	to implement the stack logic for it. this will simplify implementation
 21255                                  ;	while maintaining compatibility with the old version of dos.
 21256                                  ;	this implies that in the main stack code, there might be a stack code
 21257                                  ;	that will never be used, a dead code.
 21258                                  ;
 21259                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 21260                                  
 21261                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21262                                  	; (SYSINIT:1287h)
 21263                                  
 21264                                  	; 14/12/2022
 21265                                  stackinit:
 21266 000011E0 50                      	push	ax
 21267 000011E1 1E                      	push	ds
 21268 000011E2 06                      	push	es
 21269 000011E3 53                      	push	bx
 21270 000011E4 51                      	push	cx
 21271 000011E5 52                      	push	dx
 21272 000011E6 57                      	push	di
 21273 000011E7 56                      	push	si
 21274 000011E8 55                      	push	bp
 21275                                  
 21276                                  ;currently es -> stack code area
 21277                                  
 21278                                  	; 12/12/2022
 21279                                  	; ds = cs
 21280 000011E9 A1[8A02]                	mov	ax,[stack_count]
 21281 000011EC 89C1                    	mov	cx,ax  ; *!*!*  
 21282                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21283                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21284                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21285 000011EE 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21286                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21287 000011F2 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21288 000011F5 26A3[0600]              	mov	[es:stacksize],ax
 21289                                  	; 12/12/2022
 21290 000011F9 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21291                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21292                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21293                                  	;mov	ax,[cs:stack_addr]  ; !!
 21294 000011FC 26A3[0800]              	mov	[es:stacks],ax
 21295                                  	; 12/12/2022
 21296 00001200 89C5                    	mov	bp,ax ; *!*
 21297 00001202 A1[9002]                	mov	ax,[stack_addr+2]
 21298                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21299                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21300                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21301 00001205 26A3[0A00]              	mov	[es:stacks+2],ax
 21302                                  
 21303                                  ; initialize the data fields with the parameters
 21304                                  
 21305                                  ; "firstentry" will always be at stacks
 21306                                  
 21307                                  	;mov	bp,[es:stacks]			; get offset of stack
 21308                                  	; 12/12/2022
 21309                                  	; bp = [es:stacks] ; *!*
 21310 00001209 26892E[0C00]            	mov	[es:firstentry],bp
 21311                                  
 21312                                  ; the stacks will always immediately follow the table entries
 21313                                  
 21314 0000120E B80800                  	mov	ax,entrysize ; 8
 21315                                  	;mov	cx,[es:stackcount]
 21316                                  	; 12/12/2022
 21317                                  	; cx = [es:stackcount] ; *!*!*
 21318 00001211 F7E1                    	mul	cx
 21319 00001213 01E8                    	add	ax,bp
 21320 00001215 26A3[0400]              	mov	[es:stackat],ax
 21321 00001219 89C3                    	mov	bx,ax
 21322 0000121B 83EB02                  	sub	bx,2
 21323                                  
 21324                                  ; zero the entire stack area to start with
 21325                                  
 21326 0000121E 268B3E[0400]            	mov	di,[es:stackat]
 21327 00001223 26A1[0600]              	mov	ax,[es:stacksize]
 21328 00001227 F7E1                    	mul	cx
 21329 00001229 89C1                    	mov	cx,ax
 21330 0000122B 31C0                    	xor	ax,ax
 21331 0000122D 06                      	push	es
 21332 0000122E 1F                      	pop	ds				;ds = relocated stack code seg.
 21333                                  
 21334                                  ;now, ds -> stack code area
 21335                                  
 21336 0000122F 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21337 00001233 FC                      	cld
 21338 00001234 F3AA                    	rep	stosb
 21339                                  
 21340 00001236 8B0E[0200]              	mov	cx,[stackcount]
 21341                                  
 21342                                  ; loop for "count" times, building a table entry
 21343                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21344                                  ;  cx = number of entries
 21345                                  ;  es:bp => base of stacks - 2
 21346                                  ;  es:bx => first table entry
 21347                                  
 21348                                  buildloop:
 21349                                  	; 11/12/2022
 21350                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21351                                  	; 25/10/2022
 21352                                  	;mov	byte [es:bp],free
 21353                                  	; 14/08/2023
 21354 0000123A 26884600                	mov	[es:bp],al ; 0 ; free
 21355 0000123E 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21356                                  	;mov	[es:bp+1],al
 21357 00001242 26894602                	mov	[es:bp+savedsp],ax
 21358                                  	;mov	[es:bp2],ax
 21359 00001246 26894604                	mov	[es:bp+savedss],ax
 21360                                  	;mov	[es:bp+4],ax
 21361 0000124A 031E[0600]              	add	bx,[stacksize]
 21362 0000124E 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21363                                  	;mov	[es:bp+6],bx
 21364 00001252 26892F                  	mov	[es:bx],bp
 21365 00001255 83C508                  	add	bp,entrysize ; 8
 21366                                  
 21367 00001258 E2E0                    	loop	buildloop
 21368                                  
 21369 0000125A 83ED08                  	sub	bp,entrysize ; 8
 21370 0000125D 892E[0E00]              	mov	[lastentry],bp
 21371 00001261 892E[1000]              	mov	[nextentry],bp
 21372                                  
 21373 00001265 1E                      	push	ds
 21374                                  	;mov	ax,0F000h		;look at the model byte
 21375                                  	; 05/09/2023
 21376 00001266 B4F0                    	mov	ah,0F0h ; ax = 0F000h
 21377 00001268 8ED8                    	mov	ds,ax	
 21378 0000126A 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21379 0000126F 1F                      	pop	ds
 21380 00001270 7504                    	jne	short skip_disablenmis
 21381                                  
 21382 00001272 B007                    	mov	al,07h			; disable convertible nmis
 21383 00001274 E672                    	out	72h,al
 21384                                  
 21385                                  skip_disablenmis:
 21386 00001276 31C0                    	xor	ax,ax
 21387 00001278 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21388                                  					;ds - relocated stack code segment
 21389 0000127A FA                      	cli
 21390                                  
 21391                                  	;irp	aa,<02,08,09,70>
 21392                                  	;
 21393                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21394                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21395                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21396                                  	;mov	dx,offset int&aa	;pass where new handler is
 21397                                  	;call	new_init_loop		;adjust the vector to new handler,
 21398                                  	;				;saving pointer to original owner
 21399                                  	;endm
 21400                                  
 21401                                  stkinit_02:
 21402 0000127B BE0800                  	mov	si,02h*4 ; 8
 21403 0000127E BF[4206]                	mov	di,INT19OLD02
 21404 00001281 BB[1200]                	mov	bx,old02
 21405 00001284 BA[1600]                	mov	dx,int02
 21406 00001287 E84801                  	call	new_init_loop
 21407                                  stkinit_08:
 21408 0000128A BE2000                  	mov	si,08h*4 ; 32
 21409 0000128D BF[4706]                	mov	di,INT19OLD08
 21410 00001290 BB[3800]                	mov	bx,old08
 21411 00001293 BA[3C00]                	mov	dx,int08
 21412 00001296 E83901                  	call	new_init_loop
 21413                                  stkinit_09:
 21414 00001299 BE2400                  	mov	si,09h*4 ; 36
 21415 0000129C BF[4C06]                	mov	di,INT19OLD09
 21416 0000129F BB[4100]                	mov	bx,old09
 21417 000012A2 BA[4500]                	mov	dx,int09
 21418 000012A5 E82A01                  	call	new_init_loop
 21419                                  stkinit_70:
 21420 000012A8 BEC001                  	mov	si,70h*4 ; 448
 21421 000012AB BF[6A06]                	mov	di,INT19OLD70
 21422 000012AE BB[4E00]                	mov	bx,old70
 21423 000012B1 BA[5200]                	mov	dx,int70
 21424 000012B4 E81B01                  	call	new_init_loop
 21425                                  
 21426                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21427                                  	;
 21428                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21429                                  	;push	ds			;save relocated stack code segment
 21430                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21431                                  	;push	ds
 21432                                  	;pop	dx			;dx = segment value
 21433                                  	;	
 21434                                  	;cmp	dx,0
 21435                                  	;jz	int&aa&_first
 21436                                  	;
 21437                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21438                                  	;jz	int&aa&_first
 21439                                  	;
 21440                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21441                                  	;jz	int&aa&_not_first
 21442                                  	;
 21443                                  	;cmp	dx,0f000h		;rom bios segment
 21444                                  	;jnz	int&aa&_not_first
 21445                                  	;
 21446                                  	;push	es
 21447                                  	;push	dx
 21448                                  	;mov	dx,0f000h
 21449                                  	;mov	es,dx
 21450                                  	;cmp	bx,word ptr es:0ff01h
 21451                                         	;pop	dx
 21452                                  	;pop	es
 21453                                  	;jz	int&aa&_first
 21454                                  	;
 21455                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21456                                  	;pop	ds
 21457                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21458                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21459                                  	;mov	dx, offset int&aa	;pass where new handler is
 21460                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21461                                  	;				;pointer to original owner.
 21462                                  	;jmp	short int&aa&_end
 21463                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21464                                  	;pop	ds
 21465                                  ;int&aa&_end:
 21466                                  	;
 21467                                  	;endm
 21468                                  
 21469                                  stkinit_0A:
 21470 000012B7 BE2800                  	mov	si,0Ah*4 ; 40
 21471                                  	
 21472                                  ; 14/12/2022
 21473                                  %if 0	
 21474                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21475                                  	push	ds
 21476                                  	
 21477                                  	lds	bx,[es:si]
 21478                                  	push	ds
 21479                                  	pop	dx
 21480                                  		
 21481                                  	cmp	dx,0
 21482                                  	je	short int_0A_first
 21483                                  	
 21484                                  	cmp	byte [bx],0CFh
 21485                                  	je	short int_0A_first
 21486                                  	
 21487                                  	cmp	word [bx+6],424Bh
 21488                                  	je	short int_0A_not_first
 21489                                  	
 21490                                  	cmp	dx,0F000h
 21491                                  	jne	short int_0A_not_first
 21492                                  	
 21493                                  	push	es
 21494                                  	push	dx
 21495                                  	mov	dx,0F000h
 21496                                  	mov	es,dx
 21497                                  	cmp	bx,[es:0FF01h]
 21498                                         	pop	dx
 21499                                  	pop	es
 21500                                  	je	short int_0A_first
 21501                                  %Endif
 21502                                  
 21503                                  	; 14/12/2022
 21504                                  	; 25/10/2022
 21505 000012BA E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21506 000012BD 730C                    	jnc	short int_0A_first
 21507                                  	
 21508                                  int_0A_not_first:
 21509                                  	; 14/12/2022
 21510                                  	; 25/10/2022
 21511                                  	;pop	ds
 21512 000012BF BF[5106]                	mov	di,INT19OLD0A
 21513 000012C2 BB[5900]                	mov	bx,old0A
 21514 000012C5 BA[5700]                	mov	dx,int0A
 21515 000012C8 E80701                  	call	new_init_loop
 21516                                  	
 21517                                  	; 14/12/2022	
 21518                                  	;jmp	short int_0A_end
 21519                                  ;int_0A_first:
 21520                                  	; 25/10/2022
 21521                                  	;pop	ds
 21522                                  
 21523                                  	; 14/12/2022
 21524                                  int_0A_first:
 21525                                  int_0A_end:
 21526                                  
 21527                                  stkinit_0B:
 21528 000012CB BE2C00                  	mov	si,0Bh*4 ; 44
 21529                                  	
 21530                                  	; 14/12/2022
 21531                                  	; 25/10/2022
 21532 000012CE E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21533 000012D1 730C                    	jnc	short int_0B_end ; int_0B_first
 21534                                  
 21535                                  ; 14/12/2022
 21536                                  %if 0	
 21537                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21538                                  	push	ds
 21539                                  	lds	bx,[es:si]
 21540                                  	push	ds
 21541                                  	pop	dx
 21542                                  		
 21543                                  	cmp	dx,0
 21544                                  	je	short int_0B_first
 21545                                  
 21546                                  	cmp	byte [bx],0CFh
 21547                                  	je	short int_0B_first
 21548                                  	
 21549                                  	cmp	word [bx+6],424Bh
 21550                                  	je	short int_0B_not_first
 21551                                  	
 21552                                  	cmp	dx,0F000h
 21553                                  	jne	short int_0B_not_first
 21554                                  
 21555                                  	push	es
 21556                                  	push	dx
 21557                                  	mov	dx,0F000h
 21558                                  	mov	es,dx
 21559                                  	cmp	bx,[es:0FF01h]
 21560                                  	pop	dx
 21561                                  	pop	es
 21562                                  	je	short int_0B_first
 21563                                  %endif
 21564                                  
 21565                                  int_0B_not_first:
 21566                                  	; 14/12/2022
 21567                                  	; 25/10/2022
 21568                                  	;pop	ds
 21569 000012D3 BF[5606]                	mov	di,INT19OLD0B
 21570 000012D6 BB[7100]                	mov	bx,old0B
 21571 000012D9 BA[6F00]                	mov	dx,int0B
 21572 000012DC E8F300                  	call	new_init_loop
 21573                                  
 21574                                  	; 14/12/2022
 21575                                  	;jmp	short int_0B_end
 21576                                  ;int_0B_first:
 21577                                  	; 25/10/2022
 21578                                  	;pop	ds
 21579                                  
 21580                                  int_0B_end:
 21581                                  	
 21582                                  stkinit_0C:
 21583 000012DF BE3000                  	mov	si,0Ch*4 ; 48
 21584                                  	
 21585                                  	; 14/12/2022
 21586                                  	; 25/10/2022
 21587 000012E2 E8C300                  	call	int_xx_first_check
 21588 000012E5 730C                    	jnc	short int_0C_end ; int_0C_first
 21589                                  
 21590                                  ; 14/12/2022
 21591                                  %if 0	
 21592                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21593                                  	push	ds
 21594                                  	lds	bx,[es:si]
 21595                                  	push	ds
 21596                                  	pop	dx
 21597                                  		
 21598                                  	cmp	dx,0
 21599                                  	je	short int_0C_first
 21600                                  
 21601                                  	cmp	byte [bx],0CFh
 21602                                  	je	short int_0C_first
 21603                                  	
 21604                                  	cmp	word [bx+6],424Bh
 21605                                  	je	short int_0C_not_first
 21606                                  	
 21607                                  	cmp	dx,0F000h
 21608                                  	jne	short int_0C_not_first
 21609                                  
 21610                                  	push	es
 21611                                  	push	dx
 21612                                  	mov	dx,0F000h
 21613                                  	mov	es,dx
 21614                                  	cmp	bx,[es:0FF01h]
 21615                                  	pop	dx
 21616                                  	pop	es
 21617                                  	je	short int_0C_first
 21618                                  %endif
 21619                                  	
 21620                                  int_0C_not_first:
 21621                                  	; 14/12/2022
 21622                                  	; 25/10/2022
 21623                                  	;pop	ds
 21624 000012E7 BF[5B06]                	mov	di,INT19OLD0C
 21625 000012EA BB[8900]                	mov	bx,old0C
 21626 000012ED BA[8700]                	mov	dx,int0C
 21627 000012F0 E8DF00                  	call	new_init_loop
 21628                                  
 21629                                  	; 14/12/2022
 21630                                  	;jmp	short int_0C_end
 21631                                  ;int_0C_first:
 21632                                  	; 25/10/2022
 21633                                  	;pop	ds
 21634                                  
 21635                                  int_0C_end:
 21636                                  
 21637                                  stkinit_0D:
 21638 000012F3 BE3400                  	mov	si,0Dh*4 ; 52
 21639                                  
 21640                                  	; 14/12/2022	
 21641                                  	; 25/10/2022
 21642 000012F6 E8AF00                  	call	int_xx_first_check
 21643 000012F9 730C                    	jnc	short int_0D_end ; int_0D_first
 21644                                  
 21645                                  ; 14/12/2022
 21646                                  %if 0	
 21647                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21648                                  	push	ds
 21649                                  	lds	bx,[es:si]
 21650                                  	push	ds
 21651                                  	pop	dx
 21652                                  		
 21653                                  	cmp	dx,0
 21654                                  	je	short int_0D_first
 21655                                  
 21656                                  	cmp	byte [bx],0CFh
 21657                                  	je	short int_0D_first
 21658                                  	
 21659                                  	cmp	word [bx+6],424Bh
 21660                                  	je	short int_0D_not_first
 21661                                  	
 21662                                  	cmp	dx,0F000h
 21663                                  	jne	short int_0D_not_first
 21664                                  
 21665                                  	push	es
 21666                                  	push	dx
 21667                                  	mov	dx,0F000h
 21668                                  	mov	es,dx
 21669                                  	cmp	bx,[es:0FF01h]
 21670                                  	pop	dx
 21671                                  	pop	es
 21672                                  	je	short int_0D_first
 21673                                  %endif
 21674                                  	
 21675                                  int_0D_not_first:
 21676                                  	; 14/12/2022
 21677                                  	; 25/10/2022
 21678                                  	;pop	ds
 21679 000012FB BF[6006]                	mov	di,INT19OLD0D
 21680 000012FE BB[A100]                	mov	bx,old0D
 21681 00001301 BA[9F00]                	mov	dx,int0D
 21682 00001304 E8CB00                  	call	new_init_loop
 21683                                  
 21684                                  	; 14/12/2022
 21685                                  	;jmp	short int_0D_end
 21686                                  	; 02/11/2022
 21687                                  ;int_0D_first:
 21688                                  	;pop	ds
 21689                                  
 21690                                  int_0D_end:
 21691                                  
 21692                                  stkinit_0E:
 21693 00001307 BE3800                  	mov	si,0Eh*4 ; 56
 21694                                  
 21695                                  	; 14/12/2022	
 21696                                  	; 25/10/2022
 21697 0000130A E89B00                  	call	int_xx_first_check
 21698 0000130D 730C                    	jnc	short int_0E_end ; int_0E_first
 21699                                  
 21700                                  ; 14/12/2022
 21701                                  %if 0	
 21702                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21703                                  	push	ds
 21704                                  	lds	bx,[es:si]
 21705                                  	push	ds
 21706                                  	pop	dx
 21707                                  		
 21708                                  	cmp	dx,0
 21709                                  	je	short int_0E_first
 21710                                  
 21711                                  	cmp	byte [bx],0CFh
 21712                                  	je	short int_0E_first
 21713                                  	
 21714                                  	cmp	word [bx+6],424Bh
 21715                                  	je	short int_0E_not_first
 21716                                  	
 21717                                  	cmp	dx,0F000h
 21718                                  	jne	short int_0E_not_first
 21719                                  
 21720                                  	push	es
 21721                                  	push	dx
 21722                                  	mov	dx,0F000h
 21723                                  	mov	es,dx
 21724                                  	cmp	bx,[es:0FF01h]
 21725                                  	pop	dx
 21726                                  	pop	es
 21727                                  	je	short int_0E_first
 21728                                  %endif
 21729                                  	
 21730                                  int_0E_not_first:
 21731                                  	; 14/12/2022
 21732                                  	; 25/10/2022
 21733                                  	;pop	ds
 21734 0000130F BF[6506]                	mov	di,INT19OLD0E
 21735 00001312 BB[B900]                	mov	bx,old0E
 21736 00001315 BA[B700]                	mov	dx,int0E
 21737 00001318 E8B700                  	call	new_init_loop
 21738                                  
 21739                                  	; 14/12/2022
 21740                                  	;jmp	short int_0E_end
 21741                                  ;int_0E_first:
 21742                                  	; 25/10/2022
 21743                                  	;pop	ds	
 21744                                  
 21745                                  int_0E_end:
 21746                                  
 21747                                  stkinit_72:
 21748 0000131B BEC801                  	mov	si,72h*4 ; 456
 21749                                  	
 21750                                  	; 14/12/2022
 21751                                  	; 25/10/2022
 21752 0000131E E88700                  	call	int_xx_first_check
 21753 00001321 730C                    	jnc	short int_72_end ; int_72_first
 21754                                  
 21755                                  ; 14/12/2022
 21756                                  %if 0	
 21757                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21758                                  	push	ds
 21759                                  	lds	bx,[es:si]
 21760                                  	push	ds
 21761                                  	pop	dx
 21762                                  		
 21763                                  	cmp	dx,0
 21764                                  	je	short int_72_first
 21765                                  
 21766                                  	cmp	byte [bx],0CFh
 21767                                  	je	short int_72_first
 21768                                  	
 21769                                  	cmp	word [bx+6],424Bh
 21770                                  	je	short int_72_not_first
 21771                                  	
 21772                                  	cmp	dx,0F000h
 21773                                  	jne	short int_72_not_first
 21774                                  
 21775                                  	push	es
 21776                                  	push	dx
 21777                                  	mov	dx,0F000h
 21778                                  	mov	es,dx
 21779                                  	cmp	bx,[es:0FF01h]
 21780                                  	pop	dx
 21781                                  	pop	es
 21782                                  	je	short int_72_first
 21783                                  %endif
 21784                                  	
 21785                                  int_72_not_first:
 21786                                  	; 14/12/2022
 21787                                  	; 25/10/2022
 21788                                  	;pop	ds
 21789 00001323 BF[6F06]                	mov	di,INT19OLD72
 21790 00001326 BB[D100]                	mov	bx,old72
 21791 00001329 BA[CF00]                	mov	dx,int72
 21792 0000132C E8A300                  	call	new_init_loop
 21793                                  
 21794                                  	; 14/12/2022
 21795                                  	;jmp	short int_72_end
 21796                                  ;int_72_first:
 21797                                  	; 25/10/2022
 21798                                  	;pop	ds
 21799                                  
 21800                                  int_72_end:
 21801                                  
 21802                                  stkinit_73:
 21803 0000132F BECC01                  	mov	si,73h*4 ; 460
 21804                                  	
 21805                                  	; 14/12/2022
 21806                                  	; 25/10/2022
 21807 00001332 E87300                  	call	int_xx_first_check
 21808 00001335 730C                    	jnc	short int_73_end ; int_73_first
 21809                                  
 21810                                  ; 14/12/2022
 21811                                  %if 0	
 21812                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21813                                  	push	ds
 21814                                  	lds	bx,[es:si]
 21815                                  	push	ds
 21816                                  	pop	dx
 21817                                  		
 21818                                  	cmp	dx,0
 21819                                  	je	short int_73_first
 21820                                  
 21821                                  	cmp	byte [bx],0CFh
 21822                                  	je	short int_73_first
 21823                                  	
 21824                                  	cmp	word [bx+6],424Bh
 21825                                  	je	short int_73_not_first
 21826                                  	
 21827                                  	cmp	dx,0F000h
 21828                                  	jne	short int_73_not_first
 21829                                  
 21830                                  	push	es
 21831                                  	push	dx
 21832                                  	mov	dx,0F000h
 21833                                  	mov	es,dx
 21834                                  	cmp	bx,[es:0FF01h]
 21835                                  	pop	dx
 21836                                  	pop	es
 21837                                  	je	short int_73_first
 21838                                  %endif	
 21839                                  	
 21840                                  int_73_not_first:
 21841                                  	; 14/12/2022
 21842                                  	; 25/10/2022
 21843                                  	;pop	ds
 21844 00001337 BF[7406]                	mov	di,INT19OLD73
 21845 0000133A BB[E900]                	mov	bx,old73
 21846 0000133D BA[E700]                	mov	dx,int73
 21847 00001340 E88F00                  	call	new_init_loop
 21848                                  
 21849                                  	; 14/12/2022
 21850                                  	;jmp	short int_73_end
 21851                                  ;int_73_first:
 21852                                  	; 25/10/2022
 21853                                  	;pop	ds
 21854                                  
 21855                                  int_73_end:
 21856                                  
 21857                                  stkinit_74:
 21858 00001343 BED001                  	mov	si,74h*4 ; 464
 21859                                  	
 21860                                  	; 14/12/2022
 21861                                  	; 25/10/2022
 21862 00001346 E85F00                  	call	int_xx_first_check
 21863 00001349 730C                    	jnc	short int_74_end ; int_74_first
 21864                                  
 21865                                  ; 14/12/2022
 21866                                  %if 0		
 21867                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21868                                  	push	ds
 21869                                  	lds	bx,[es:si]
 21870                                  	push	ds
 21871                                  	pop	dx
 21872                                  		
 21873                                  	cmp	dx,0
 21874                                  	je	short int_74_first
 21875                                  
 21876                                  	cmp	byte [bx],0CFh
 21877                                  	je	short int_74_first
 21878                                  	
 21879                                  	cmp	word [bx+6],424Bh
 21880                                  	je	short int_74_not_first
 21881                                  	
 21882                                  	cmp	dx,0F000h
 21883                                  	jne	short int_74_not_first
 21884                                  
 21885                                  	push	es
 21886                                  	push	dx
 21887                                  	mov	dx,0F000h
 21888                                  	mov	es,dx
 21889                                  	cmp	bx,[es:0FF01h]
 21890                                  	pop	dx
 21891                                  	pop	es
 21892                                  	je	short int_74_first
 21893                                  %endif
 21894                                  
 21895                                  int_74_not_first:
 21896                                  	; 14/12/2022
 21897                                  	; 25/10/2022
 21898                                  	;pop	ds
 21899 0000134B BF[7906]                	mov	di,INT19OLD74
 21900 0000134E BB[0101]                	mov	bx,old74
 21901 00001351 BA[FF00]                	mov	dx,int74
 21902 00001354 E87B00                  	call	new_init_loop
 21903                                  	
 21904                                  	; 14/12/2022
 21905                                  	;jmp	short int_74_end
 21906                                  ;int_74_first:
 21907                                  	; 25/10/2022
 21908                                  	;pop	ds
 21909                                  
 21910                                  int_74_end:
 21911                                  
 21912                                  stkinit_76:
 21913 00001357 BED801                  	mov	si,76h*4 ; 472
 21914                                  	
 21915                                  	; 14/12/2022
 21916                                  	; 25/10/2022
 21917 0000135A E84B00                  	call	int_xx_first_check
 21918 0000135D 730E                    	jnc	short int_76_end ; int_76_first
 21919                                  
 21920                                  ; 14/12/2022
 21921                                  %if 0	
 21922                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21923                                  	push	ds
 21924                                  	lds	bx,[es:si]
 21925                                  	push	ds
 21926                                  	pop	dx
 21927                                  		
 21928                                  	cmp	dx,0
 21929                                  	je	short int_76_first
 21930                                  
 21931                                  	cmp	byte [bx],0CFh
 21932                                  	je	short int_76_first
 21933                                  	
 21934                                  	cmp	word [bx+6],424Bh
 21935                                  	je	short int_76_not_first
 21936                                  	
 21937                                  	cmp	dx,0F000h
 21938                                  	jne	short int_76_not_first
 21939                                  
 21940                                  	push	es
 21941                                  	push	dx
 21942                                  	mov	dx,0F000h
 21943                                  	mov	es,dx
 21944                                  	cmp	bx,[es:0FF01h]
 21945                                  	pop	dx
 21946                                  	pop	es
 21947                                  	je	short int_76_first
 21948                                  %endif
 21949                                  	
 21950                                  int_76_not_first:
 21951                                  	; 14/12/2022
 21952                                  	; 25/10/2022
 21953                                  	;pop	ds
 21954 0000135F BF[7E06]                	mov	di,INT19OLD76
 21955 00001362 BB[1901]                	mov	bx,old76
 21956 00001365 BA[1701]                	mov	dx,int76
 21957 00001368 E86700                  	call	new_init_loop
 21958                                  
 21959                                  	; 14/12/2022
 21960 0000136B EB00                    	jmp	short int_76_end
 21961                                  ;int_76_first:
 21962                                  	; 25/10/2022
 21963                                  	;pop	ds
 21964                                  
 21965                                  int_76_end:
 21966                                  
 21967                                  stkinit_77:
 21968 0000136D BEDC01                  	mov	si,77h*4 ; 476
 21969                                  	
 21970                                  	; 14/12/2022
 21971                                  	; 25/10/2022
 21972 00001370 E83500                  	call	int_xx_first_check
 21973 00001373 730C                    	jnc	short int_77_end ; int_77_first
 21974                                  
 21975                                  ; 14/12/2022
 21976                                  %if 0	
 21977                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21978                                  	push	ds
 21979                                  	lds	bx,[es:si]
 21980                                  	push	ds
 21981                                  	pop	dx
 21982                                  		
 21983                                  	cmp	dx,0
 21984                                  	je	short int_77_first
 21985                                  
 21986                                  	cmp	byte [bx],0CFh
 21987                                  	je	short int_77_first
 21988                                  	
 21989                                  	cmp	word [bx+6],424Bh
 21990                                  	je	short int_77_not_first
 21991                                  	
 21992                                  	cmp	dx,0F000h
 21993                                  	jne	short int_77_not_first
 21994                                  
 21995                                  	push	es
 21996                                  	push	dx
 21997                                  	mov	dx,0F000h
 21998                                  	mov	es,dx
 21999                                  	cmp	bx,[es:0FF01h]
 22000                                  	pop	dx
 22001                                  	pop	es
 22002                                  	je	short int_77_first
 22003                                  %endif
 22004                                  	
 22005                                  int_77_not_first:
 22006                                  	; 14/12/2022
 22007                                  	; 25/10/2022
 22008                                  	;pop	ds
 22009 00001375 BF[8306]                	mov	di,INT19OLD77
 22010 00001378 BB[3101]                	mov	bx,old77
 22011 0000137B BA[2F01]                	mov	dx,int77
 22012 0000137E E85100                  	call	new_init_loop
 22013                                  
 22014                                  	; 14/12/2022
 22015                                  	;jmp	short int_77_end
 22016                                  ;int_77_first:
 22017                                  	; 25/10/2022
 22018                                  	;pop	ds
 22019                                  
 22020                                  int_77_end:
 22021 00001381 1E                      	push	ds
 22022 00001382 B800F0                  	mov	ax,0F000h		; look at the model byte
 22023 00001385 8ED8                    	mov	ds,ax
 22024 00001387 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 22025 0000138C 1F                      	pop	ds
 22026 0000138D 7504                    	jne	short skip_enablenmis
 22027                                  
 22028 0000138F B027                    	mov	al,27h			; enable convertible nmis
 22029 00001391 E672                    	out	72h,al
 22030                                  
 22031                                  ; 25/10/2022
 22032                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 22033                                  
 22034                                  skip_enablenmis:
 22035 00001393 FB                      	sti
 22036                                  	;;mov	ax,Bios_Data ; 70h
 22037                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22038                                  	; 21/10/2022
 22039 00001394 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22040 00001397 8ED8                    	mov	ds,ax
 22041                                  
 22042                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 22043                                  
 22044 00001399 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 22045                                  					; initialization is complete
 22046                                  
 22047 0000139E 5D                      	pop	bp			; restore all
 22048 0000139F 5E                      	pop	si
 22049 000013A0 5F                      	pop	di
 22050 000013A1 5A                      	pop	dx
 22051 000013A2 59                      	pop	cx
 22052 000013A3 5B                      	pop	bx
 22053 000013A4 07                      	pop	es
 22054 000013A5 1F                      	pop	ds
 22055 000013A6 58                      	pop	ax
 22056 000013A7 C3                      	retn
 22057                                  
 22058                                  ; 14/12/2022
 22059                                  ; ----------------------------------------------------------------------
 22060                                  
 22061                                  	; 14/12/2022
 22062                                  	; 25/10/2022
 22063                                  ;%if 0
 22064                                  	; 27/03/2019 - Retro DOS v4.0
 22065                                  int_xx_first_check:
 22066 000013A8 1E                      	push	ds
 22067 000013A9 26C51C                  	lds	bx,[es:si]
 22068 000013AC 1E                      	push	ds
 22069 000013AD 5A                      	pop	dx
 22070                                  		
 22071                                  	;cmp	dx,0
 22072                                  	;je	short int_xx_first
 22073                                  	; 05/09/2023
 22074 000013AE 21D2                    	and	dx,dx
 22075 000013B0 741E                    	jz	short int_xx_first
 22076                                  
 22077 000013B2 803FCF                  	cmp	byte [bx],0CFh
 22078 000013B5 7419                    	je	short int_xx_first
 22079                                  	
 22080 000013B7 817F064B42              	cmp	word [bx+6],424Bh
 22081 000013BC 7411                    	je	short int_xx_not_first
 22082                                  	
 22083 000013BE 81FA00F0                	cmp	dx,0F000h
 22084 000013C2 750B                    	jne	short int_xx_not_first
 22085                                  
 22086 000013C4 06                      	push	es
 22087                                  	;push	dx
 22088                                  	;mov	dx,0F000h
 22089 000013C5 8EC2                    	mov	es,dx
 22090 000013C7 263B1E01FF              	cmp	bx,[es:0FF01h]
 22091                                        	;pop	dx
 22092 000013CC 07                      	pop	es
 22093 000013CD 7401                    	je	short int_xx_first
 22094                                  
 22095                                  int_xx_not_first:
 22096 000013CF F9                      	stc
 22097                                  int_xx_first:
 22098 000013D0 1F                      	pop	ds
 22099 000013D1 C3                      	retn
 22100                                  
 22101                                  ;%endif
 22102                                  
 22103                                  ; ----------------------------------------------------------------------
 22104                                  ; 27/03/2019 - Retro DOS v4.0
 22105                                  
 22106                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22107                                  ; (SYSINIT:1610h)
 22108                                  
 22109                                  new_init_loop:
 22110                                  
 22111                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22112                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22113                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22114                                  ;	di=offset value of int19old&aa variable in bios.
 22115                                  ;	es=zero, segid of vector table
 22116                                  ;	ds=relocated stack code segment
 22117                                  
 22118 000013D2 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22119 000013D5 8907                    	mov	[bx],ax			; to original owner in ds
 22120 000013D7 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22121 000013DB 894702                  	mov	[bx+2],ax		; to original owner in ds
 22122                                  
 22123 000013DE 1E                      	push	ds
 22124                                  	;;mov	ax,Bios_Data ; 70h
 22125                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22126                                  	; 21/10/2022
 22127 000013DF B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22128 000013E2 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22129 000013E4 268B04                  	mov	ax,[es:si]		;int 19 handler
 22130 000013E7 8905                    	mov	[di],ax
 22131 000013E9 268B4402                	mov	ax,[es:si+2]
 22132 000013ED 894502                  	mov	[di+2],ax
 22133 000013F0 1F                      	pop	ds
 22134                                  
 22135 000013F1 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22136 000013F4 268C5C02                	mov	[es:si+2],ds
 22137 000013F8 C3                      	retn
 22138                                  
 22139                                  ; End of STACK initialization routine
 22140                                  ; ----------------------------------------------------------------------
 22141                                  
 22142                                  ; ----------------------------------------------------------------------
 22143                                  ;set the devmark for mem command.
 22144                                  ;in: [memhi] - the address to place devmark
 22145                                  ;    [memlo] = 0
 22146                                  ;    al = id for devmark_id
 22147                                  ;out: devmark established.
 22148                                  ;     the address saved in cs:[devmark_addr]
 22149                                  ;     [memhi] increase by 1.
 22150                                  ; ----------------------------------------------------------------------
 22151                                  
 22152                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22153                                  ; (SYSINIT:1637h)
 22154                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 22155                                  ; (SYSINIT:176Ch)
 22156                                  
 22157                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 22158                                  
 22159                                  setdevmark:
 22160                                  
 22161                                  	; 04/09/2023
 22162                                  	;push	es
 22163                                  	;push	cx
 22164                                  
 22165 000013F9 2E8B0E[E003]            	mov	cx,[cs:memhi]
 22166 000013FE 2E890E[1614]            	mov	[cs:devmark_addr],cx
 22167 00001403 8EC1                    	mov	es,cx
 22168                                  	; 25/10/2022
 22169                                  	;mov	[es:devmark.id],al
 22170 00001405 26A20000                	mov	[es:0],al
 22171 00001409 41                      	inc	cx
 22172                                  	;mov	[es:devmark.seg],cx
 22173 0000140A 26890E0100              	mov	[es:1],cx
 22174                                  
 22175                                  	; 04/09/2023
 22176                                  	;pop	cx
 22177                                  	;pop	es
 22178                                  	
 22179 0000140F 2EFF06[E003]            	inc	word [cs:memhi]
 22180 00001414 C3                      	retn
 22181                                  
 22182                                  ; ----------------------------------------------------------------------
 22183                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22184                                  ; ----------------------------------------------------------------------
 22185                                  ; 27/03/2019 - Retro DOS v4.0
 22186                                  
 22187                                  ;MULTI_CONFIG	equ 1
 22188                                  
 22189                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22190                                                                          ; allocation strategy call
 22191                                  
 22192                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22193                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22194                                  
 22195                                  default_filenum equ 8
 22196                                  
 22197                                  ;stacksw	equ true		; include switchable hardware stacks
 22198                                  
 22199                                  ; external variable defined in ibmbio module for multi-track
 22200                                  
 22201                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22202                                  					; it on after handling config.sys file as a
 22203                                  					; default value,if multrk_flag = multrk_off1.
 22204                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22205                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22206                                  
 22207                                  ; if stacksw
 22208                                  
 22209                                  ; internal stack parameters
 22210                                  
 22211                                  ;entrysize	equ 8
 22212                                  
 22213                                  ;mincount	equ 8
 22214                                  ;defaultcount	equ 9
 22215                                  ;maxcount	equ 64
 22216                                  
 22217                                  ;minsize 	equ 32
 22218                                  ;defaultsize	equ 128
 22219                                  ;maxsize 	equ 512
 22220                                  
 22221                                  DOS_FLAG_OFFSET	equ 86h
 22222                                  
 22223                                  ;ifdef MULTI_CONFIG
 22224                                  ;
 22225                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22226                                  ;   may be loaded as a dword ptr
 22227                                  
 22228                                  ; 25/10/2022
 22229                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 22230                                  ;               			;  a scratch env, this is its length
 22231                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 22232                                  ;                   			;  segment of work area
 22233                                  ;
 22234                                  ;config_cmd:	db  0  			; current config cmd
 22235                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 22236                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 22237                                  
 22238                                  ;endif ; MULTI_CONFIG
 22239                                  
 22240 00001415 00                      multdeviceflag:	db  0
 22241                                  
 22242 00001416 0000                    devmark_addr:	dw  0			;segment address for devmark.
 22243                                  
 22244 00001418 00                      setdevmarkflag: db  0			;flag used for devmark
 22245                                  
 22246                                  ; 12/12/2022
 22247                                  ;driver_units:	db  0			;total unitcount for driver
 22248                                  
 22249                                  ; 12/12/2022
 22250                                  ;ems_stub_installed:
 22251                                  ;		db  0
 22252                                  
 22253                                  ; 12/12/2022	
 22254                                  ;align 2
 22255                                  
 22256                                  badparm_ptr:	; label	dword
 22257 00001419 0000                    badparm_off:	dw  0
 22258 0000141B 0000                    badparm_seg:	dw  0
 22259                                  
 22260                                  ;******************************************************************************
 22261                                  ;take care of config.sys file.
 22262                                  ;system parser data and code.
 22263                                  ;******************************************************************************
 22264                                  
 22265                                  ;*******************************************************************
 22266                                  ; parser options set for msbio sysconf module
 22267                                  ;*******************************************************************
 22268                                  ;
 22269                                  ;**** default assemble swiches definition **************************
 22270                                  
 22271                                  ;farsw	equ 0		; near call expected
 22272                                  ;datesw	equ 0		; check date format
 22273                                  ;timesw	equ 0		; check time format
 22274                                  ;filesw	equ 1		; check file specification
 22275                                  ;capsw	equ 0		; perform caps if specified
 22276                                  ;cmpxsw	equ 0		; check complex list
 22277                                  ;numsw	equ 1		; check numeric value
 22278                                  ;keysw	equ 0		; support keywords
 22279                                  ;swsw	equ 1		; support switches
 22280                                  ;val1sw	equ 1		; support value definition 1
 22281                                  ;val2sw	equ 0		; support value definition 2
 22282                                  ;val3sw	equ 1		; support value definition 3
 22283                                  ;drvsw	equ 1		; support drive only format
 22284                                  ;qussw	equ 0		; support quoted string format
 22285                                  
 22286                                  ; psdata_seg equ cs
 22287                                  
 22288                                  	;.xlist
 22289                                  	;include parse.asm		;together with psdata.inc
 22290                                  	;.list
 22291                                  
 22292                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22293                                  ; ======================================================================
 22294                                  ; 27/03/2019 - Retro DOS v4.0
 22295                                  
 22296                                  ; 30/03/2019
 22297                                  ; VERSION.INC (MSDOS 6.0) 
 22298                                  ; Set DBCS Blank constant
 22299                                  
 22300                                  ; ifndef DBCS
 22301                                  DB_SPACE EQU 2020h
 22302                                  DB_SP_HI EQU 20h
 22303                                  DB_SP_LO EQU 20h
 22304                                  ; else
 22305                                  
 22306                                  ;*******************************************************************
 22307                                  ; Parser include file
 22308                                  ;*******************************************************************
 22309                                  
 22310                                  ;**** Equation field
 22311                                  ;-------- Character code definition
 22312                                  
 22313                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22314                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22315                                  _$P_Period	   equ	"."             ;AN020;
 22316                                  _$P_Slash	   equ	"/"             ;AN020;
 22317                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22318                                  _$P_Comma	   equ	","             ;AN000;
 22319                                  _$P_Switch	   equ	"/"             ;AN000;
 22320                                  _$P_Keyword	   equ	"="             ;AN000;
 22321                                  _$P_Colon	   equ	":"             ;AN000;
 22322                                  _$P_Plus 	   equ	"+"             ;AN000;
 22323                                  _$P_Minus	   equ	"-"             ;AN000;
 22324                                  _$P_Rparen	   equ	")"             ;AN000;
 22325                                  _$P_Lparen	   equ	"("             ;AN000;
 22326                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22327                                  _$P_DQuote	   equ	'"'             ;AN000;
 22328                                  _$P_NULL 	   equ	0		;AN000;
 22329                                  _$P_TAB		   equ	9		;AN000;
 22330                                  _$P_CR		   equ	0Dh		;AN000;
 22331                                  _$P_LF		   equ	0Ah		;AN000;
 22332                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22333                                  
 22334                                  ;-------- Masks
 22335                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22336                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22337                                  
 22338                                  ;-------- DOS function call related equs
 22339                                  
 22340                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22341                                  					; by this call, following information
 22342                                  struc _$P_CDI	
 22343 00000000 ????                     .DateF: resw 1
 22344 00000002 ??????????               .Money: resb 5
 22345 00000007 ????                     .1000:	 resb 2
 22346 00000009 ????                     .Dec:	 resb 2
 22347 0000000B ????                     .DateS: resb 2
 22348 0000000D ????                     .TimeS: resb 2
 22349 0000000F ??                          	 resb 1
 22350 00000010 ??                      	 resb 1
 22351 00000011 ??                       .TimeF: resb 1	 
 22352 00000012 ????????                	 resw 2
 22353 00000016 ????                    	 resb 2
 22354 00000018 <res Ah>                	 resw 5
 22355                                   .size:
 22356                                  endstruc
 22357                                  
 22358                                  _$P_Date_MDY	   equ	0		;AN000;
 22359                                  _$P_Date_DMY	   equ	1		;AN000;
 22360                                  _$P_Date_YMD	   equ	2		;AN000;
 22361                                  ;-------------
 22362                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22363                                  					;AN000; DS:SI will points to DBCS EV
 22364                                  ;-------------
 22365                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22366                                  					;AN000; following parameters are set
 22367                                  					;AN000; to get casemap table.
 22368                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22369                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22370                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22371                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22372                                  					; By this call following information
 22373                                  					; is returned.
 22374                                  struc _$P_DOS_TBL
 22375 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22376 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22377 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22378                                  endstruc
 22379                                  
 22380                                  ; ----------------------------------------------------------------------------
 22381                                  ; PARMS 	LABEL	BYTE
 22382                                  ;		DW	PARMSX
 22383                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22384                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22385                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22386                                  ;					; TYPICAL ARE ";", "="
 22387                                  ;					; "," & WHITESPACE ALWAYS
 22388                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22389                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22390                                  ; ----------------------------------------------------------------------------
 22391                                  
 22392                                  ;-------------------------------- PARMS block structure
 22393                                  struc _$P_PARMS_Blk
 22394 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22395 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22396 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22397                                  endstruc
 22398                                  
 22399                                  _$P_Len_PARMS	   equ	4		;AN000;
 22400                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22401                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22402                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22403                                  
 22404                                  ; ----------------------------------------------------------------------------
 22405                                  ; PARMSX	LABEL	BYTE
 22406                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22407                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22408                                  ;		:			; REPEATS maxp-1 TIMES
 22409                                  ;		DB	maxs		; # OF SWITCHES
 22410                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22411                                  ;		:			; REPEATS maxs-1 TIMES
 22412                                  ;		DB	maxk		; # OF KEYWORD
 22413                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22414                                  ;		:			; REPEATS maxk-1 TIMES
 22415                                  ; ----------------------------------------------------------------------------
 22416                                  
 22417                                  ;-------------------------------- PARMSX block structure
 22418                                  struc _$P_PARMSX_Blk		;AN000;
 22419 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22420 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22421 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22422                                  endstruc
 22423                                  
 22424                                  ; ----------------------------------------------------------------------------
 22425                                  ; << Control field definition  >>
 22426                                  ;
 22427                                  ;
 22428                                  ;CONTROL   LABEL   BYTE
 22429                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22430                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22431                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22432                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22433                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22434                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22435                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22436                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22437                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22438                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22439                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22440                                  ;				   ; 0002H=REPEATS ALLOWED
 22441                                  ;				   ; 0001H=OPTIONAL
 22442                                  ;	   DW	   FUNCTION_FLAGS
 22443                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22444                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22445                                  ;				   ; 0010H=REMOVE ":" AT END
 22446                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22447                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22448                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22449                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22450                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22451                                  ;	   :
 22452                                  ;
 22453                                  ;Note:
 22454                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22455                                  ;      DATE bit simalteniously.
 22456                                  ;
 22457                                  ;      The parser examins each bit along with the following priority.
 22458                                  ;
 22459                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22460                                  ;      FILE SPEC -> SIMPLE STRING.
 22461                                  ;
 22462                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22463                                  ;      in the result buffer is capitalized.
 22464                                  ;
 22465                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22466                                  ;
 22467                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22468                                  ;      switch, for example, '/A', then STRING points to;
 22469                                  ;
 22470                                  ;			DB    1 	; number of following synonyms
 22471                                  ;			DB   '/A',0
 22472                                  ;
 22473                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22474                                  ;
 22475                                  ;			DB    1 	; number of following synonyms
 22476                                  ;			DB   'CODEPAGE=',0
 22477                                  ;
 22478                                  ;    - "..." must consist of upper case characters only because the parser
 22479                                  ;      performs pattern matching after converting input to upper case (by
 22480                                  ;      using the current country upper case table)
 22481                                  ;
 22482                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22483                                  ;      example /A and /B, the format will be;
 22484                                  ;
 22485                                  ;			DB    2 	; number of following synonyms
 22486                                  ;			DB    '/A',0
 22487                                  ;			DB    '/B',0
 22488                                  ; ----------------------------------------------------------------------------
 22489                                  
 22490                                  ;**** Match_Flags
 22491                                  
 22492                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22493                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22494                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22495                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22496                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22497                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22498                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22499                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22500                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22501                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22502                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22503                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22504                                  
 22505                                  ;**** Function flags
 22506                                  
 22507                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22508                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22509                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22510                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22511                                  
 22512                                  ;-------------------------------- Control block structure
 22513                                  struc _$P_Control_Blk
 22514 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22515 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22516 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22517 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22518 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22519 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22520                                  endstruc
 22521                                  
 22522                                  ; ----------------------------------------------------------------------------
 22523                                  ; << Value List Definition >>
 22524                                  ;
 22525                                  ;VALUES 	LABEL	BYTE
 22526                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22527                                  ;	     +-
 22528                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22529                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22530                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22531                                  ;	     |	:
 22532                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22533                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22534                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22535                                  ;	     |	:
 22536                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22537                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22538                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22539                                  ;	     +-	:
 22540                                  ;
 22541                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22542                                  ;
 22543                                  ;Note:
 22544                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22545                                  ;      when no choice lists are provided.
 22546                                  ;
 22547                                  ;    - STRING must consist of upper case characters only because the parser
 22548                                  ;      performs pattern matching after converting input to upper case (by
 22549                                  ;      using the current country upper case table)
 22550                                  ; ----------------------------------------------------------------------------
 22551                                  
 22552                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22553                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22554                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22555                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22556                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22557                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22558                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22559                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22560                                  
 22561                                  struc _$P_Val_List
 22562 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22563 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22564 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22565 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22566 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22567                                  endstruc
 22568                                  
 22569                                  ; ----------------------------------------------------------------------------
 22570                                  ; << Result Buffer Definition  >>
 22571                                  ;
 22572                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22573                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22574                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22575                                  ;						;	3=STRING, 4=COMPLEX,
 22576                                  ;						;	5=FILESPEC, 6=DRIVE
 22577                                  ;						;	7=DATE, 8=TIME
 22578                                  ;						;	9=QUOTED STRING
 22579                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22580                                  ;
 22581                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22582                                  ;
 22583                                  ;            +-
 22584                                  ;	    | DD	n			; VALUE IF NUMBER
 22585                                  ;	    | or
 22586                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22587                                  ;	    |					; (ES presents Segment address)
 22588                                  ;	    | or
 22589                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22590                                  ;	    | or
 22591                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22592                                  ;	    | or
 22593                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22594                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22595                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22596                                  ;	    | or
 22597                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22598                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22599                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22600                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22601                                  ;	    +-
 22602                                  ;
 22603                                  ;
 22604                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22605                                  ;      list.
 22606                                  ;
 22607                                  ;      YEAR: If the input value for the year is less than 100, parser
 22608                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22609                                  ;	     the year value, he returns 1987.
 22610                                  ; ----------------------------------------------------------------------------
 22611                                  
 22612                                  ;-------------------------------- Result block structure
 22613                                  struc _$P_Result_Blk
 22614 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22615 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22616 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22617 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22618                                  endstruc
 22619                                  
 22620                                  ;--------------------------------
 22621                                  ;**** values for the type field in the result block
 22622                                  
 22623                                  _$P_EOL		   equ	0		;AN000; End of line
 22624                                  _$P_Number	   equ	1		;AN000; Number
 22625                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22626                                  _$P_String	   equ	3		;AN000; String
 22627                                  _$P_Complex	   equ	4		;AN000; Complex
 22628                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22629                                  _$P_Drive	   equ	6		;AN000; Drive
 22630                                  _$P_Date_F	   equ	7		;AN000; Date
 22631                                  _$P_Time_F	   equ	8		;AN000; Time
 22632                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22633                                  
 22634                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22635                                  
 22636                                  ;**** Return code
 22637                                  ;
 22638                                  ; following return code will be returned in the AX register.
 22639                                  
 22640                                  _$P_No_Error	   equ	0		;AN000; No error
 22641                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22642                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22643                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22644                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22645                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22646                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22647                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22648                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22649                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22650                                  
 22651                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22652                                  
 22653                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22654                                  
 22655                                  ;********************** Local Data *************************************
 22656 0000141D 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22657 0000141F 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22658 00001421 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22659 00001423 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22660 00001425 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22661 00001426 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22662 00001428 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22663 0000142A 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22664                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22665                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22666                                  
 22667                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22668                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22669                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22670                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22671                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22672                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22673                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22674                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22675                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22676                                  
 22677                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22678                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22679                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22680                                  
 22681 0000142C 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22682 0000142E 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22683 00001430 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22684 00001432 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22685                                  
 22686 00001434 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22687                                  _$P_STRING_BUF_END equ	$		;AN000;
 22688                                  
 22689                                  ; 25/10/2022
 22690                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22691                                  
 22692 000014B4 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22693 000014B5 0000                    		   dw	0		;AN000; offset	of char case map table
 22694 000014B7 0000                    		   dw	0		;AN000; segment of char case map table
 22695                                  ; 25/10/2022
 22696                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22697                                  ;		   dw	0		;AN000; offset	of file case map table
 22698                                  ;		   dw	0		;AN000; segment of file case map table
 22699                                  
 22700                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22701                                  ;
 22702                                  
 22703                                  ;M029
 22704                                  ;!!!WARNING!!!
 22705                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22706                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22707                                  ;changes need to be made in SYSPARSE
 22708                                  
 22709                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22710                                  
 22711                                  ; 25/10/2022
 22712                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22713                                  
 22714 000014B9 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22715                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22716                                  
 22717                                  ;ENDIF					;AN000;(of FileSW)
 22718                                  
 22719                                  ; delimiter parsing
 22720                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22721                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22722                                  
 22723                                  ;filespec error flag
 22724 000014C2 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22725                                  					;AN033;  was detected.
 22726                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22727                                  
 22728                                  
 22729                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22730                                  ; ======================================================================
 22731                                  ; 27/03/2019 - Retro DOS v4.0
 22732                                  
 22733                                  ;***********************************************************************
 22734                                  ; SysParse;
 22735                                  ;
 22736                                  ;  Function : Parser Entry
 22737                                  ;
 22738                                  ;  Input: DS:SI -> command line
 22739                                  ;	  ES:DI -> parameter block
 22740                                  ;	  cs -> psdata.inc
 22741                                  ;	  CX = operand ordinal
 22742                                  ;
 22743                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22744                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22745                                  ;		 is in DS.
 22746                                  ;
 22747                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22748                                  ;		    invalid value list. But this parser does NOT implement
 22749                                  ;		    this feature. Therefore CY always zero.
 22750                                  ;
 22751                                  ;	   CY = 0   AX = return code
 22752                                  ;		    BL = terminated delimiter code
 22753                                  ;		    CX = new operand ordinal
 22754                                  ;		    SI = set past scaned operand
 22755                                  ;		    DX = selected result buffer
 22756                                  ;
 22757                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22758                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22759                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22760                                  ;
 22761                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22762                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22763                                  ;
 22764                                  ;-------- Modification History -----------------------------------------
 22765                                  ;
 22766                                  ;  4/04/87 : Created by K. K,
 22767                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22768                                  ;	   : JMP SHORT assemble error (tm02)
 22769                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22770                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22771                                  ;	     DateSW equ 1)	      (tm04)
 22772                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22773                                  ;				      (tm05) in PSDATA.INC
 22774                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22775                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22776                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22777                                  ;	     value-list block	      (tm07)
 22778                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22779                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22780                                  ;	     (tm08)
 22781                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22782                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22783                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22784                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22785                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22786                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22787                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22788                                  ;					  (tm12)
 22789                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22790                                  ;					  (tm13)
 22791                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22792                                  ;					  (tm14)
 22793                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22794                                  ;					  (tm15)
 22795                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22796                                  
 22797                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22798                                  
 22799                                  ;  7/28/87 : Kerry S (;AN018;)
 22800                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22801                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22802                                  ;	     affected: _$P_Chk_SW_Control.
 22803                                  
 22804                                  ;  7/29/87 : Kerry S (;AN019;)
 22805                                  ;	     Now allow the optional bit in match flags for switches.  This
 22806                                  ;	     allows the switch to be encountered with a value or without a
 22807                                  ;	     value and no error is returned.
 22808                                  ;
 22809                                  
 22810                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22811                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22812                                  ;	     within a date response, instead of checking just for the one
 22813                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22814                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22815                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22816                                  
 22817                                  ;  9/1/87  : Kerry S (;AN021)
 22818                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22819                                  ;	     the command line with the string in the control block the
 22820                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22821                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22822                                  ;	     string on the command line than in the synonym list in the control
 22823                                  ;	     block.  I put in a test for a null in the control block so the
 22824                                  ;	     string in the control block must be the same length as the string
 22825                                  ;	     preceeding the colon or equal on the command line.
 22826                                  
 22827                                  ;  8/28/87 : Kerry S (;AN022;)
 22828                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22829                                  ;	     problems for people who included it themselves in a segment other
 22830                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22831                                  ;	     segment.
 22832                                  
 22833                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22834                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22835                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22836                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22837                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22838                                  ;	     BL be used if TIME is being parsed.
 22839                                  
 22840                                  ;  9/24/87 : Ed K
 22841                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22842                                  ;	     invocations with their normally expanded code; made comments
 22843                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22844                                  
 22845                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22846                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22847                                  ;	     pointed to by non-existant CONTROL.
 22848                                  
 22849                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22850                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22851                                  ;	     support to frame quoted text string with single quote.
 22852                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22853                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22854                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22855                                  
 22856                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22857                                  ;	     quote chars within a quoted string is supposed to be reported as
 22858                                  ;	     one quote character, but is reported as two quotes.  This changed
 22859                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22860                                  
 22861                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22862                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22863                                  
 22864                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22865                                  
 22866                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22867                                  ;	     psdata buffer should have cs.
 22868                                  
 22869                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22870                                  ;	     positional missing.
 22871                                  
 22872                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22873                                  ;	     as a line delimiter, should use carriage return.
 22874                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22875                                  
 22876                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22877                                  
 22878                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22879                                  ;	     endless loop since SI is returned still pointing to start
 22880                                  ;	     of that parm.
 22881                                  
 22882                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22883                                  ;	     Vector to returned string has CS instead of cs, but
 22884                                  ;	     when tried to fix it on previous version, changed similar
 22885                                  ;	     but wrong place.
 22886                                  
 22887                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22888                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22889                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22890                                  
 22891                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22892                                  ;	     in a filespec, then flag an error.
 22893                                  
 22894                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22895                                  ;	     indexed off of the cs equate instead of the DS register.
 22896                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22897                                  ;  -->	     local parser data. Why were some references to local data changed
 22898                                  ;	     to do this before, but not all ?????
 22899                                  
 22900                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22901                                  
 22902                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22903                                  ;
 22904                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22905                                  
 22906                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22907                                  
 22908                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22909                                  ;	     separator in TIME before hundredths field.
 22910                                  ;
 22911                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22912                                  ;			strings as keywords.
 22913                                  ;
 22914                                  ;***********************************************************************
 22915                                  
 22916                                  ;IF FarSW				;AN000;(Check if need far return)
 22917                                  ;SysParse proc far			;AN000;
 22918                                  ;ELSE					;AN000;
 22919                                  ;SysParse proc near			;AN000;
 22920                                  ;ENDIF					;AN000;(of FarSW)
 22921                                  
 22922                                  ; 27/03/2019 - Retro DOS v4.0
 22923                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22924                                  
 22925                                  ; 25/10/2022 - Retro DOS v4.0
 22926                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22927                                  
 22928                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 22929                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 22930                                  
 22931                                  SysParse:
 22932                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 22933                                  	; dx = 0
 22934 000014C3 1E                      	push	ds ; *!*
 22935 000014C4 0E                      	push	cs
 22936 000014C5 1F                      	pop	ds 
 22937                                  
 22938                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22939                                  	;cld				;AN000; confirm forward direction
 22940                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22941                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22942                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22943                                  	;
 22944                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22945                                  
 22946                                  	; 06/09/2023
 22947 000014C6 8916[2A14]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 22948 000014CA FC                      	cld				;AN000; confirm forward direction
 22949 000014CB 890E[1D14]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 22950 000014CF 8916[1F14]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 22951 000014D3 8916[3214]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 22952 000014D7 8916[2314]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 22953                                  
 22954                                  ;M029 -- Begin changes
 22955                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22956                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22957                                  ;corrupts this table but does not corrupt the checksum region will leave
 22958                                  ;command.com parsing in an inconsistent state.
 22959                                  ; NB: The special characters string has been hardcoded here. If any change
 22960                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22961                                  
 22962                                  ;IF FileSW + DrvSW
 22963                                  	;mov	word [cs:_$P_FileSp_Char], ']['
 22964                                  	;mov	word [cs:_$P_FileSp_Char+2], '<|'
 22965                                  	;mov	word [cs:_$P_FileSp_Char+4], '+>'
 22966                                  	;mov 	word [cs:_$P_FileSp_Char+6], ';='
 22967                                  
 22968                                  	; 06/09/2023
 22969 000014DB C706[B914]5D5B          	mov	word [_$P_FileSp_Char], ']['
 22970 000014E1 C706[BB14]3C7C          	mov	word [_$P_FileSp_Char+2], '<|'
 22971 000014E7 C706[BD14]2B3E          	mov	word [_$P_FileSp_Char+4], '+>'
 22972 000014ED C706[BF14]3B3D          	mov 	word [_$P_FileSp_Char+6], ';='
 22973                                  ;ENDIF
 22974                                  	; 06/09/2023
 22975 000014F3 1F                      	pop	ds ; *!*
 22976                                  
 22977                                  ;M029 -- End of changes
 22978                                  
 22979 000014F4 E88106                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22980 000014F7 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22981                                  ;--------------------------- End of Line
 22982 000014F9 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22983 000014FC 53                      	push	bx			;AN000;
 22984                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22985                                  					;AN000; Get the PARMSX address to
 22986 000014FD 268B1D                  	mov	bx,[es:di]
 22987                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22988                                  					;AN000; check ORDINAL to see if the minimum
 22989 00001500 263A0F                  	cmp	cl,[es:bx]	
 22990 00001503 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22991                                  
 22992 00001505 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22993                                  _$P_Fin: 				;AN000;
 22994 00001508 5B                      	pop	bx			;AN000;
 22995 00001509 E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22996                                  ;---------------------------
 22997                                  _$P_Start:				;AN000;
 22998 0000150C 2E8936[2C14]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22999 00001511 53                      	push	bx			;AN000; quoted string or file spec.
 23000 00001512 57                      	push	di			;AN000;
 23001 00001513 55                      	push	bp			;AN000;
 23002                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 23003                                  	; 02/11/2022
 23004                                  	;lea	bx,[_$P_STRING_BUF]
 23005                                  	; 07/09/2023
 23006 00001514 BB[3414]                	mov	bx,_$P_STRING_BUF
 23007 00001517 2EF606[2B14]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 23008 0000151D 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 23009                                  
 23010                                  _$P_Pack_Loop:				;AN000;
 23011 0000151F AC                      	lodsb				;AN000; Pick a operand from buffer
 23012 00001520 E8FA06                  	call	_$P_Chk_Switch		;AN000; Check switch character
 23013 00001523 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 23014                                  
 23015 00001525 E87206                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 23016 00001528 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 23017                                  
 23018 0000152A E8A206                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 23019 0000152D 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 23020                                  
 23021 0000152F 2EF606[2B14]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 23022                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 23023 00001535 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 23024                                  
 23025 00001537 E83E06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 23026 0000153A EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 23027                                  
 23028                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 23029 0000153C 2EF606[2B14]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 23030 00001542 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 23031                                  
 23032 00001544 4E                      	dec	si			;AN000; (tm08)
 23033 00001545 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 23034                                  
 23035                                  _$P_PL01:				;AN000;
 23036 00001547 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 23037 0000154A 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 23038 0000154C 7506                    	jne	short _$P_PL00 		;AN000; then
 23039                                  
 23040 0000154E 2E800E[2B14]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 23041                                  _$P_PL00:				;AN000;
 23042 00001554 43                      	inc	bx			;AN000; ready to see next byte
 23043 00001555 E8DE06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 23044 00001558 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 23045                                  
 23046 0000155A AC                      	lodsb				;AN000; if yes, store
 23047 0000155B 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 23048 0000155E 43                      	inc	bx			;AN000; update pointer
 23049 0000155F EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 23050                                  
 23051                                  _$P_Pack_End_BY_EOL:			;AN000;
 23052 00001561 4E                      	dec	si			;AN000; backup si pointer
 23053                                  _$P_Pack_End:				;AN000;
 23054 00001562 2E8936[2114]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 23055                                  	; 07/09/2023
 23056                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 23057 00001567 30E4                    	xor	ah,ah ; 0 ; *
 23058 00001569 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 23059                                  	;
 23060 0000156C 2E891E[3014]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 23061                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 23062 00001571 268B1D                  	mov	bx,[es:di]
 23063                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 23064                                  	; 02/11/2022
 23065                                  	;lea	si,[_$P_STRING_BUF]
 23066                                  	; 07/09/2023
 23067 00001574 BE[3414]                	mov	si,_$P_STRING_BUF
 23068 00001577 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 23069 0000157B 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 23070                                  
 23071 0000157D 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 23072 00001581 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 23073                                  
 23074 00001583 2EF606[2B14]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 23075 00001589 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 23076                                  
 23077                                  _$P_Positional_Manager:			;AN000; else process as positional
 23078 0000158B 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23079                                  	; 07/09/2023
 23080                                  	;xor	ah,ah			;AN000; ax = maxp
 23081 0000158F 2E3906[1D14]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 23082 00001594 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 23083                                  
 23084 00001596 2EA1[1D14]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 23085 0000159A D1E0                    	shl	ax,1			;AN000; ax = ax*2
 23086 0000159C 43                      	inc	bx			;AC035; add '2' to
 23087 0000159D 43                      	inc	bx			;AC035;  BX reg
 23088                                  					;AN000; now bx points to 1st CONTROL
 23089 0000159E 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 23090 000015A0 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 23091 000015A3 E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 23092 000015A6 EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23093                                  
 23094                                  _$P_Too_Many_Error:			;AN000;
 23095 000015A8 2EC706[1F14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 23096 000015AF EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23097                                  
 23098                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 23099                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 23100                                  get_maxp:
 23101                                  	;mov	al,[es:bx+1]
 23102 000015B1 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23103                                  	; 07/09/2023
 23104                                  	; ah=0 ; *
 23105                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 23106 000015B5 30ED                    	xor	ch,ch ; **
 23107 000015B7 40                      	inc	ax			;AN000;
 23108 000015B8 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23109 000015BA 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23110 000015BC C3                      	retn
 23111                                  
 23112                                  _$P_SW_Manager:				;AN000;
 23113                                  	; 07/09/2023
 23114                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23115                                  	;xor	ah,ah			;AN000; ax = maxp
 23116                                  	;inc	ax			;AN000;
 23117                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23118                                  	;add	bx,ax			;AN000; now bx points to maxs
 23119 000015BD E8F1FF                  	call	get_maxp ; 07/09/2023
 23120                                  
 23121 000015C0 268A0F                  	mov	cl,[es:bx]		;AN000;
 23122                                  	; 07/09/2023
 23123                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 23124                                  	;or	cx,cx			;AN000; at least one switch ?
 23125                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 23126                                  	; 07/07/2023
 23127 000015C3 E30F                    	jcxz	_$P_SW_Not_Found	; no
 23128                                  
 23129 000015C5 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 23130                                  
 23131                                  _$P_SW_Mgr_Loop: 			;AN000;
 23132 000015C6 53                      	push	bx			;AN000;
 23133 000015C7 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 23134 000015CA E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 23135 000015CD 5B                      	pop	bx			;AN000;
 23136 000015CE 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 23137                                  
 23138 000015D0 43                      	inc	bx			;AC035; add '2' to
 23139 000015D1 43                      	inc	bx			;AC035;  BX reg
 23140                                  					;AN000; else bx points to the next CONTROL
 23141 000015D2 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 23142                                  
 23143                                  _$P_SW_Not_Found:			;AN000;
 23144 000015D4 2EC706[1F14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 23145 000015DB EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 23146                                  
 23147                                  _$P_Key_Manager: 			;AN000;
 23148                                  	; 07/09/2023
 23149                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23150                                  	;xor	ah,ah			;AN000; ax = maxp
 23151                                  	;inc	ax			;AN000;
 23152                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23153                                  	;add	bx,ax			;AN000; now bx points to maxs
 23154 000015DD E8D1FF                  	call	get_maxp ; 07/09/2023
 23155                                  	
 23156 000015E0 268A07                  	mov	al,[es:bx]		;AN000;
 23157 000015E3 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 23158 000015E5 D1E0                    	shl	ax,1			;AN000;
 23159 000015E7 40                      	inc	ax			;AN000; ax = ax*2+1
 23160 000015E8 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 23161 000015EA 268A0F                  	mov	cl,[es:bx]		;AN000;
 23162                                  	; 07/09/2023
 23163                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 23164                                  	;or	cx,cx			;AN000; at least one keyword ?
 23165                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23166                                  	; 07/07/2023
 23167 000015ED E305                    	jcxz	_$P_Key_Not_Found	; no
 23168                                  
 23169 000015EF 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23170                                  
 23171                                  _$P_Key_Mgr_Loop:			;AN000;
 23172                                  	; 07/09/2023
 23173                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 23174                                  	; (always returns with cf=1)
 23175                                  	;push	bx			;AN000;
 23176                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23177                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23178                                  	;pop	bx			;AN000;
 23179                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23180                                  	; 07/09/2023
 23181                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 23182                                  
 23183 000015F0 43                      	inc	bx			;AC035; add '2' to
 23184 000015F1 43                      	inc	bx			;AC035;  BX reg
 23185                                  					;AN000; else bx points to the next CONTROL
 23186 000015F2 E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23187                                  
 23188                                  _$P_Key_Not_Found:			;AN000;
 23189 000015F4 2EC706[1F14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23190                                  _$P_Return_to_Caller:			;AN000;
 23191 000015FB 5D                      	pop	bp			;AN000;
 23192 000015FC 5F                      	pop	di			;AN000;
 23193 000015FD 5B                      	pop	bx			;AN000;
 23194 000015FE 2E8B0E[1D14]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23195 00001603 2EA1[1F14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23196 00001607 2E8B36[2114]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23197 0000160C 2E8B16[2314]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23198 00001611 2E8A1E[2514]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23199                                  _$P_Single_Exit: 			;AN000;
 23200 00001616 F8                      	clc				;AN000;
 23201 00001617 C3                      	retn				;AN000;
 23202                                  
 23203                                  ;***********************************************************************
 23204                                  ; _$P_Chk_Pos_Control
 23205                                  ;
 23206                                  ; Function: Parse CONTROL block for a positional
 23207                                  ;
 23208                                  ; Input:     ES:BX -> CONTROL block
 23209                                  ;	     cs:SI -> _$P_STRING_BUF
 23210                                  ;
 23211                                  ; Output:    None
 23212                                  ;
 23213                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23214                                  ;
 23215                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23216                                  ;***********************************************************************
 23217                                  
 23218                                  _$P_Chk_Pos_Control:
 23219 00001618 50                      	push	ax			;AN000;
 23220                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23221 00001619 268B07                  	mov	ax,[es:bx]
 23222                                  	; 12/12/2022
 23223 0000161C A802                    	test	al,_$P_Repeat
 23224                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23225 0000161E 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23226                                  
 23227 00001620 2EFF06[1D14]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23228                                  _$P_CPC00:				;AN000;
 23229 00001625 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23230 00001629 7517                    	jne	short _$P_CPC01		;AN000;
 23231                                  
 23232                                  	; 12/12/2022
 23233 0000162B A801                    	test	al,_$P_Optional
 23234                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 23235 0000162D 7509                    	jnz	short _$P_CPC02		;AN000;
 23236                                  
 23237 0000162F 2EC706[1F14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 23238 00001636 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 23239                                  
 23240                                  _$P_CPC02:				;AN000;
 23241 00001638 50                      	push	ax			;AN000;
 23242                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 23243                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 23244                                  	; 14/08/2023
 23245 00001639 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23246 0000163C E89600                  	call	_$P_Fill_Result		;AN000;
 23247 0000163F 58                      	pop	ax			;AN000;
 23248 00001640 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 23249                                  
 23250                                  _$P_CPC01:				;AN000;
 23251 00001642 E81101                  	call	_$P_Check_Match_Flags	;AN000;
 23252                                  _$P_CPC_Exit:				;AN000;
 23253 00001645 58                      	pop	ax			;AN000;
 23254 00001646 C3                      	retn				;AN000;
 23255                                  
 23256                                  ;***********************************************************************
 23257                                  ; _$P_Chk_Key_Control
 23258                                  ;
 23259                                  ; Function: Parse CONTROL block for a keyword
 23260                                  ;
 23261                                  ; Input:     ES:BX -> CONTROL block
 23262                                  ;	     cs:SI -> _$P_STRING_BUF
 23263                                  ;
 23264                                  ; Output:    CY = 1 : not match
 23265                                  ;
 23266                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23267                                  ;
 23268                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23269                                  ;***********************************************************************
 23270                                  
 23271                                  ; 07/09/2023
 23272                                  ;_$P_Chk_Key_Control:
 23273                                  ;	stc				;AN000; this logic works when the KeySW
 23274                                  ;	retn				;AN000; is reset.
 23275                                  
 23276                                  ;***********************************************************************
 23277                                  ; _$P_Search_KEYorSW:
 23278                                  ;
 23279                                  ; Function: Seach specified keyword or switch from CONTROL
 23280                                  ;
 23281                                  ; Input:     ES:BX -> CONTROL block
 23282                                  ;	     cs:SI -> _$P_STRING_BUF
 23283                                  ;
 23284                                  ; Output:    CY = 1 : not match
 23285                                  ;
 23286                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 23287                                  ;***********************************************************************
 23288                                  
 23289                                  	; 25/10/2022 - Retro DOS v4.0
 23290                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 23291                                  
 23292                                  _$P_Search_KEYorSW:			;AN000;
 23293 00001647 55                      	push	bp			;AN000;
 23294 00001648 51                      	push	cx			;AN000;
 23295 00001649 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 23296 0000164D 30ED                    	xor	ch,ch			;AN000; and set it to cx
 23297                                  	;or	cx,cx			;AN000; No synonyms specified ?
 23298                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 23299                                  	; 14/08/2023
 23300 0000164F E30D                    	jcxz	_$P_KEYorSW_Not_Found
 23301                                  
 23302                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 23303                                  	; 25/10/2022
 23304 00001651 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 23305                                  	;lea	bp,[bx+9]
 23306                                  _$P_KEYorSW_Loop:			;AN000;
 23307 00001654 E8BE03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 23308 00001657 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 23309                                  
 23310 00001659 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 23311 0000165C E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 23312                                  _$P_KEYorSW_Not_Found:			;AN000;
 23313 0000165E F9                      	stc				;AN000; indicate not found in synonym list
 23314 0000165F EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 23315                                  
 23316                                  _$P_KEYorSW_Found:			;AN000;
 23317 00001661 2E892E[3214]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 23318 00001666 F8                      	clc				;AN000; indicate found
 23319                                  _$P_KEYorSW_Exit:			;AN000;
 23320 00001667 59                      	pop	cx			;AN000;
 23321 00001668 5D                      	pop	bp			;AN000;
 23322 00001669 C3                      	retn				;AN000;
 23323                                   
 23324                                  ;***********************************************************************
 23325                                  ; _$P_MoveBP_NUL
 23326                                  ;***********************************************************************
 23327                                  
 23328                                  _$P_MoveBP_NUL:
 23329                                  _$P_MBP_Loop:				;AN000;
 23330                                  	; 11/12/2022
 23331 0000166A 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 23332                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 23333                                  	; (SYSINIT:18DBh)
 23334                                   	;cmp     byte [es:bp+0],0
 23335 0000166F 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 23336                                  
 23337 00001671 45                      	inc	bp			;AN000; until
 23338 00001672 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 23339                                  
 23340                                  _$P_MBP_Exit:				;AN000;
 23341 00001674 45                      	inc	bp			;AN000; bp points to next to NULL
 23342 00001675 C3                      	retn				;AN000;
 23343                                  
 23344                                  ;***********************************************************************
 23345                                  ; _$P_Chk_SW_Control
 23346                                  ;
 23347                                  ; Function: Parse CONTROL block for a switch
 23348                                  ;
 23349                                  ; Input:     ES:BX -> CONTROL block
 23350                                  ;	     cs:SI -> _$P_STRING_BUF
 23351                                  ;
 23352                                  ; Output:    CY = 1 : not match
 23353                                  ;
 23354                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 23355                                  ;
 23356                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 23357                                  ;***********************************************************************
 23358                                  
 23359                                  _$P_Chk_SW_Control:
 23360                                  
 23361                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23362                                  	;or	byte [cs:_$P_Flags+1],10h
 23363 00001676 2E800E[2B14]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23364 0000167C E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23365 0000167F 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23366                                  
 23367                                  	;and	[cs:_$P_Flags+],0EFh
 23368 00001681 2E8026[2B14]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23369                                  					;AC034; reset the indicator previously set
 23370 00001687 50                      	push	ax			;AN000; 	      /switch:
 23371 00001688 2EA1[2E14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23372 0000168C 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23373 0000168E 2E0106[2C14]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23374 00001693 58                      	pop	ax			;AN000;
 23375                                  
 23376 00001694 2E8B36[2E14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23377 00001699 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23378 0000169D 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23379                                  
 23380 0000169F 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23381 000016A4 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23382                                  
 23383 000016A6 2EC706[1F14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23384 000016AD EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23385                                  
 23386                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23387                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23388 000016AF 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23389 000016B3 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23390                                  
 23391                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23392                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23393                                  	;test	word [es:bx],1
 23394                                  	; 12/12/2022
 23395                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23396 000016B5 26F60701                	test	byte [es:bx],_$P_Optional
 23397 000016B9 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23398                                  
 23399 000016BB 2EC706[1F14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23400 000016C2 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23401                                  
 23402                                  _$P_CSW00:				;AN000;
 23403 000016C4 E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23404 000016C7 F8                      	clc				;AN000; indicate match
 23405                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23406                                  	; 12/12/2022
 23407 000016C8 C3                      	retn
 23408                                  
 23409                                  _$P_Chk_SW_Err0: 			;AN000;
 23410 000016C9 F9                      	stc				;AN000; not found in switch synonym list
 23411                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23412                                  	; 12/12/2022
 23413 000016CA C3                      	retn	
 23414                                  
 23415                                  _$P_Chk_SW_Exit: 			;AN000;
 23416 000016CB 50                      	push	ax			;AN000;
 23417                                  	;mov	al,_$P_String		;AN000;
 23418                                  	;mov	ah,_$P_No_Tag		;AN000;
 23419                                  	; 14/08/2023
 23420 000016CC B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23421 000016CF E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 23422 000016D2 58                      	pop	ax			;AN000;
 23423 000016D3 F8                      	clc				;AN000;
 23424                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23425 000016D4 C3                      	retn				;AN000;
 23426                                  ;ELSE					;AN000;(of IF SwSW)
 23427                                  ;	stc				;AN000; this logic works when the SwSW
 23428                                  ;	retn				;AN000; is reset.
 23429                                  
 23430                                  ;***********************************************************************
 23431                                  ; _$P_Fill_Result
 23432                                  ;
 23433                                  ; Function: Fill the result buffer
 23434                                  ;
 23435                                  ; Input:    AH = Item tag
 23436                                  ;	    AL = type
 23437                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23438                                  ;		  AL = 2: DX has index(offset) into value list
 23439                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23440                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23441                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23442                                  ;			  amd CH has hundredths
 23443                                  ;		  AL = else: cs:SI points to returned string buffer
 23444                                  ;	    ES:BX -> CONTROL block
 23445                                  ;
 23446                                  ; Output:   None
 23447                                  ;
 23448                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23449                                  ;
 23450                                  ; Vars: _$P_DX(W)
 23451                                  ;***********************************************************************
 23452                                  
 23453                                  _$P_Fill_Result:
 23454 000016D5 57                      	push	di			;AN000;
 23455 000016D6 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23456                                  					;AN000; di points to result buffer
 23457 000016DA 2E893E[2314]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23458                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23459                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23460                                  	; 07/09/2023
 23461                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 23462 000016DF 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 23463                                  
 23464 000016E2 50                      	push	ax			;AN000;
 23465 000016E3 2EA1[3214]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23466 000016E7 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23467                                  					;AN000;   then set it to the result
 23468 000016EB 58                      	pop	ax			;AN000;
 23469                                  _$P_RLT04:				;AN000;
 23470 000016EC 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23471 000016EE 750A                    	jne	short _$P_RLT00		;AN000;
 23472                                  
 23473                                  _$P_RLT02:				;AN000;
 23474 000016F0 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23475 000016F4 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23476 000016F8 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23477                                  
 23478                                  _$P_RLT00:				;AN000;
 23479 000016FA 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23480 000016FC 7506                    	jne	short _$P_RLT01		;AN000;
 23481                                  
 23482 000016FE 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 23483                                  					;AN000; then store list index
 23484 00001702 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23485                                  
 23486                                  _$P_RLT01:				;AN000;
 23487 00001704 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23488 00001706 74E8                    	je	short _$P_RLT02		;AN000;
 23489                                  
 23490 00001708 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23491 0000170A 74E4                    	je	short _$P_RLT02		;AN000;
 23492                                  
 23493 0000170C 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23494 0000170E 7506                    	jne	short _$P_RLT03		;AN000;
 23495                                  
 23496 00001710 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23497 00001714 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23498                                  
 23499                                  _$P_RLT03:				;AN000;
 23500 00001716 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23501 00001718 750F                    	jne	short _$P_RLT05		;AN000;
 23502                                  
 23503 0000171A 2EA1[2C14]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23504 0000171E 40                      	inc	ax			;AN000; skip left Parentheses
 23505 0000171F 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23506 00001723 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23507 00001727 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23508                                  
 23509                                  _$P_RLT05:				;AN000;
 23510                                  ;------------------------  AL = 3, 5, or 9
 23511 00001729 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23512                                  					;AN000; store offset of STRING_BUF
 23513 0000172D 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23514                                  					;AN031; store segment of STRING_BUF
 23515 00001731 50                      	push	ax			;AN000;
 23516 00001732 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23517                                  					;AN000; need CAPS by file table?
 23518 00001737 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23519                                  
 23520 00001739 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23521 0000173B EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23522                                  
 23523                                  _$P_RLT_CAP00:				;AN000;
 23524 0000173D 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23525                                  					;AN000; need CAPS by char table ?
 23526 00001742 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23527                                  
 23528 00001744 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23529                                  _$P_RLT_CAP02:				;AN000;
 23530 00001746 E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23531                                  _$P_RLT_CAP01:				;AN000;
 23532 00001749 58                      	pop	ax			;AN000;
 23533 0000174A 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23534                                  					;AN000; removing colon at end ?
 23535 0000174F 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23536                                  
 23537 00001751 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23538                                  _$P_RLT_Exit:				;AN000;
 23539 00001754 5F                      	pop	di			;AN000;
 23540 00001755 C3                      	retn				;AN000;
 23541                                  
 23542                                  ;***********************************************************************
 23543                                  ; _$P_Check_Match_Flags
 23544                                  ;
 23545                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23546                                  ;	     result buffer
 23547                                  ;
 23548                                  ;	    Check for types in this order:
 23549                                  ;		Complex
 23550                                  ;		Date
 23551                                  ;		Time
 23552                                  ;		Drive
 23553                                  ;		Filespec
 23554                                  ;		Quoted String
 23555                                  ;		Simple String
 23556                                  ;
 23557                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23558                                  ;	     ES:BX -> CONTROL block
 23559                                  ;
 23560                                  ; Output:    None
 23561                                  ;
 23562                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23563                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23564                                  ;	     _$P_Drive_Format
 23565                                  ;***********************************************************************
 23566                                  
 23567                                  	; 25/10/2022 - Retro DOS v4.0
 23568                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23569                                  
 23570                                  	; 12/12/2022
 23571                                  _$P_Check_Match_Flags:
 23572 00001756 2EC606[C214]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23573                                  					;AN033;AC034;; clear filespec error flag.
 23574 0000175C 50                      	push	ax			;AN000;
 23575                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23576 0000175D 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23577 00001760 09C0                    	or	ax,ax			;AC035; test ax for zero
 23578 00001762 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 23579 00001764 50                      	push	ax			;AN000; (tm12)
 23580 00001765 53                      	push	bx			;AN000; (tm12)
 23581 00001766 52                      	push	dx			;AN000; (tm12)
 23582 00001767 57                      	push	di			;AN000; (tm12)
 23583 00001768 2EC706[1F14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23584                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 23585                                  	;mov	al,_$P_String		;AN000; (tm12)
 23586                                  	; 14/08/2023
 23587 0000176F B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 23588 00001772 E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23589 00001775 5F                      	pop	di			;AN000; (tm12)
 23590 00001776 5A                      	pop	dx			;AN000; (tm12)
 23591 00001777 5B                      	pop	bx			;AN000; (tm12)
 23592 00001778 58                      	pop	ax			;AN000; (tm12)
 23593                                  	; 12/12/2022
 23594                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23595                                  	; 12/12/2022
 23596                                  ;_$P_Mat: 				;AN000; (tm12)
 23597                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23598                                  _$P_Bridge:
 23599 00001779 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23600                                  	
 23601                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23602                                  	; (SYSINIT:19F9h)
 23603                                  	; 12/12/2022
 23604                                  	;nop	; db 90h
 23605                                  
 23606                                  ; 12/12/2022
 23607                                  _$P_Mat:
 23608                                  _$P_Match03:				;AN000;
 23609                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 23610                                  	; 14/08/2023
 23611 0000177B F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 23612 0000177E 7412                    	jz	short _$P_Match04	;AN000;
 23613                                  
 23614 00001780 2EC706[1F14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23615 00001787 E81E01                  	call	_$P_Value		;AN000; do process
 23616 0000178A 2E833E[1F14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23617 00001790 7557                    	jne	short _$P_Match_Exit	;AN000;
 23618                                  _$P_Match04:				;AN000;
 23619                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 23620                                  	; 14/08/2023
 23621 00001792 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 23622 00001795 7412                    	jz	short _$P_Match05	;AN000;
 23623                                  
 23624 00001797 2EC706[1F14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23625 0000179E E8E300                  	call	_$P_SValue		;AN000; do process
 23626 000017A1 2E833E[1F14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23627 000017A7 7540                    	jne	short _$P_Match_Exit	;AN000;
 23628                                  _$P_Match05:				;AN000;
 23629                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 23630                                  	; 14/08/2023
 23631 000017A9 F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 23632 000017AC 7415                    	jz	short _$P_Match06	;AN000;
 23633                                  
 23634 000017AE 2EC706[1F14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23635 000017B5 E8FB02                  	call	_$P_File_Format		;AN000; 1st, call file format
 23636 000017B8 E87B03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23637 000017BB 2E833E[1F14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23638 000017C1 7526                    	jne	short _$P_Match_Exit	;AN000;
 23639                                  _$P_Match06:				;AN000;
 23640                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 23641                                  	; 14/08/2023
 23642 000017C3 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 23643 000017C6 7412                    	jz	short _$P_Match07	;AN000;
 23644                                  
 23645 000017C8 2EC706[1F14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23646 000017CF E8E102                  	call	_$P_File_Format		;AN000; do process
 23647 000017D2 2E833E[1F14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23648 000017D8 750F                    	jne	short _$P_Match_Exit	;AN000;
 23649                                  _$P_Match07:				;AN000;
 23650                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 23651                                  	; 14/08/2023
 23652 000017DA F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 23653 000017DD 740A                    	jz	short _$P_Match09	;AN000;
 23654                                  
 23655 000017DF 2EC706[1F14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23656 000017E6 E8C301                  	call	_$P_Simple_String	;AN000; do process
 23657                                  _$P_Match09:				;AN000;
 23658                                  _$P_Match_Exit:				;AN000;
 23659 000017E9 2E833E[C214]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23660 000017EF 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23661 000017F1 2E833E[1F14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23662 000017F7 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23663 000017F9 2EC706[1F14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23664                                  _$P_Match2_Exit: 			;AN033;
 23665 00001800 58                      	pop	ax			;AN000;
 23666 00001801 C3                      	retn				;AN000;
 23667                                  
 23668                                  ;***********************************************************************
 23669                                  ; _$P_Remove_Colon;
 23670                                  ;
 23671                                  ; Function: Remove colon at end
 23672                                  ;
 23673                                  ; Input:    cs:SI points to string buffer to be examineed
 23674                                  ;
 23675                                  ; Output:   None
 23676                                  ;
 23677                                  ; Use:	_$P_Chk_DBCS
 23678                                  ;***********************************************************************
 23679                                  
 23680                                  _$P_Remove_Colon:
 23681 00001802 50                      	push	ax			;AN000;
 23682 00001803 56                      	push	si			;AN000;
 23683                                  _$P_RCOL_Loop:				;AN000;
 23684 00001804 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23685 00001807 08C0                    	or	al,al			;AN000; end of string ?
 23686 00001809 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23687                                  
 23688 0000180B 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23689 0000180D 750D                    	jne	short _$P_RCOL00	;AN000;
 23690                                  
 23691 0000180F 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23692 00001814 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23693                                  
 23694 00001816 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23695 0000181A EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23696                                  
 23697                                  _$P_RCOL00:				;AN000;
 23698 0000181C E81704                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23699 0000181F 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23700                                  
 23701 00001821 46                      	inc	si			;AN000; if yes, skip trailing byte
 23702                                  _$P_RCOL01:				;AN000;
 23703 00001822 46                      	inc	si			;AN000; si points to next byte
 23704 00001823 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23705                                  
 23706                                  _$P_RCOL_Exit:				;AN000;
 23707 00001825 5E                      	pop	si			;AN000;
 23708 00001826 58                      	pop	ax			;AN000;
 23709 00001827 C3                      	retn				;AN000;
 23710                                  
 23711                                  ;***********************************************************************
 23712                                  ; _$P_Do_CAPS_String;
 23713                                  ;
 23714                                  ; Function: Perform capitalization along with the file case map table
 23715                                  ;	    or character case map table.
 23716                                  ;
 23717                                  ; Input:    AL = 2 : Use character table
 23718                                  ;	    AL = 4 : Use file table
 23719                                  ;	    cs:SI points to string buffer to be capitalized
 23720                                  ;
 23721                                  ; Output:   None
 23722                                  ;
 23723                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23724                                  ;***********************************************************************
 23725                                  
 23726                                  _$P_Do_CAPS_String:
 23727 00001828 56                      	push	si			;AN000;
 23728 00001829 52                      	push	dx			;AN000;
 23729 0000182A 88C2                    	mov	dl,al			;AN000; save info id
 23730                                  
 23731                                  _$P_DCS_Loop:				;AN000;
 23732 0000182C 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23733 0000182F E80404                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23734 00001832 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23735                                  
 23736 00001834 08C0                    	or	al,al			;AN000; end of string ?
 23737 00001836 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23738                                  
 23739 00001838 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23740 0000183B 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23741 0000183E EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23742                                  _$P_DCS00:				;AN000;
 23743 00001840 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23744                                  _$P_DCS01:				;AN000;
 23745 00001841 46                      	inc	si			;AN000; si point to next byte
 23746 00001842 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23747                                  _$P_DCS_Exit:				;AN000;
 23748 00001844 5A                      	pop	dx			;AN000;
 23749 00001845 5E                      	pop	si			;AN000;
 23750 00001846 C3                      	retn
 23751                                  
 23752                                  ;***********************************************************************
 23753                                  ; _$P_Do_CAPS_Char;
 23754                                  ;
 23755                                  ; Function: Perform capitalization along with the file case map table
 23756                                  ;	    or character case map table.
 23757                                  ;
 23758                                  ; Input:    DL = 2 : Use character table
 23759                                  ;	    DL = 4 : Use file table
 23760                                  ;	    AL = character to be capitalized
 23761                                  ;
 23762                                  ; Output:   None
 23763                                  ;
 23764                                  ; Use:	INT 21h /w AH=65h
 23765                                  ;***********************************************************************
 23766                                  
 23767                                  _$P_Do_CAPS_Char:
 23768 00001847 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23769 00001849 730B                    	jae	short _$P_DCC_Go	;AN000;
 23770                                  
 23771 0000184B 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23772 0000184D 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23773                                  
 23774 0000184F 3C7A                    	cmp	al,"z"                  ;AN000;
 23775 00001851 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23776                                  
 23777 00001853 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23778                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 23779                                  	; 14/08/2023
 23780 00001855 C3                      	retn
 23781                                  
 23782                                  _$P_DCC_Go:				;AN000;
 23783 00001856 53                      	push	bx			;AN000;
 23784 00001857 06                      	push	es			;AN000;
 23785 00001858 57                      	push	di			;AN000;
 23786                                  
 23787                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23788                                  	;lea	di,[_$P_Char_CAP_Ptr]
 23789                                  	; 07/09/2023
 23790 00001859 BF[B414]                	mov	di,_$P_Char_CAP_Ptr
 23791                                  _$P_DCC00:				;AN000;
 23792 0000185C 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23793 0000185F 7415                    	je	short _$P_DCC01		;AN000; if no,
 23794                                  
 23795                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23796                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23797                                  ; call, regardless of what base register is currently be defined as cs.
 23798                                  
 23799 00001861 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23800 00001862 51                      	push	cx			;AN000;
 23801 00001863 52                      	push	dx			;AN000;
 23802                                  
 23803 00001864 0E                      	push	cs			;AC036; pass current base seg into
 23804                                  					;(Note: this used to push CS.  BUG...
 23805 00001865 07                      	pop	es			;AN000;   ES reg, required for
 23806                                  					;get extended country information
 23807                                  	;mov	al,dl ; function	;AN000; upper case table
 23808                                  	; 14/08/2023
 23809 00001866 92                      	xchg	ax,dx
 23810 00001867 B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 23811 00001869 BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 23812 0000186C B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 23813                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23814                                  	; 14/08/2023
 23815 0000186F 89DA                    	mov	dx,bx ; 0FFFFh
 23816                                  					;DI already set to point to buffer
 23817 00001871 CD21                    	int	21h			;AN000; es:di point to buffer that
 23818                                  					;now has been filled in with info
 23819 00001873 5A                      	pop	dx			;AN000;
 23820 00001874 59                      	pop	cx			;AN000;
 23821 00001875 58                      	pop	ax			;AN000;
 23822                                  
 23823                                  _$P_DCC01:				;AN000;
 23824                                  
 23825                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23826                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23827                                  ; regardless of which base reg is currently the cs reg.
 23828                                  
 23829                                  	; 14/08/2023
 23830                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23831                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23832 00001876 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 23833 0000187A 43                      	inc	bx			;AC035; add '2' to
 23834 0000187B 43                      	inc	bx			;AC035;  BX reg
 23835                                  					;AN000; skip length field
 23836 0000187C 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23837                                  	;xlat	es:[bx] 		;AN000; perform case map
 23838 0000187E 26                      	es
 23839 0000187F D7                      	xlat
 23840 00001880 5F                      	pop	di			;AN000;
 23841 00001881 07                      	pop	es			;AN000;
 23842 00001882 5B                      	pop	bx			;AN000;
 23843                                  _$P_CAPS_Ret:				;AN000;
 23844 00001883 C3                      	retn				;AN000;
 23845                                  
 23846                                  ;***********************************************************************
 23847                                  ; _$P_Value / _$P_SValue
 23848                                  ;
 23849                                  ; Function:  Make 32bit value from cs:SI and see value list
 23850                                  ;	     and make result buffer.
 23851                                  ;	     _$P_SValue is an entry point for the signed value
 23852                                  ;	     and this will simply call _$P_Value after the handling
 23853                                  ;	     of the sign character, "+" or "-"
 23854                                  ;
 23855                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23856                                  ;	     ES:BX -> CONTROL block
 23857                                  ;
 23858                                  ; Output:    None
 23859                                  ;
 23860                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23861                                  ;
 23862                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23863                                  ;***********************************************************************
 23864                                  
 23865                                  	; 26/10/2022 - Retro DOS v4.0
 23866                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23867                                  
 23868                                  _$P_SValue:				;AN000; when signed value here
 23869 00001884 50                      	push	ax			;AN000;
 23870 00001885 2E800E[2B14]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23871 0000188B 2E8026[2B14]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23872 00001891 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23873 00001894 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23874 00001896 740A                    	je	short _$P_SVal00	;AN000;
 23875                                  
 23876 00001898 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23877 0000189A 7507                    	jne	short _$P_Sval01	;AN000; else
 23878                                  
 23879 0000189C 2E800E[2B14]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23880                                  _$P_SVal00:				;AN000;
 23881 000018A2 46                      	inc	si			;AN000; skip sign char
 23882                                  _$P_Sval01:				;AN000;
 23883 000018A3 E80200                  	call	_$P_Value		;AN000; and process value
 23884 000018A6 58                      	pop	ax			;AN000;
 23885 000018A7 C3                      	retn
 23886                                  
 23887                                  ;***********************************************************************
 23888                                  
 23889                                  	; 26/10/2022
 23890                                  _$P_Value:				;AN000;
 23891 000018A8 50                      	push	ax			;AN000;
 23892 000018A9 51                      	push	cx			;AN000;
 23893 000018AA 52                      	push	dx			;AN000;
 23894 000018AB 56                      	push	si			;AN000;
 23895 000018AC 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23896 000018AE 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23897 000018B0 53                      	push	bx			;AN000; save control pointer
 23898                                  _$P_Value_Loop:				;AN000;
 23899 000018B1 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23900 000018B4 08C0                    	or	al,al			;AN000; end of line ?
 23901 000018B6 7442                    	jz	short _$P_Value00	;AN000;
 23902                                  
 23903 000018B8 E8E600                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23904 000018BB 7239                    	jc	short _$P_Value_Err0	;AN000;
 23905                                  
 23906 000018BD 30E4                    	xor	ah,ah			;AN000;
 23907 000018BF 89C5                    	mov	bp,ax			;AN000; save binary number
 23908 000018C1 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23909 000018C3 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23910 000018C5 E8C700                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23911 000018C8 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23912                                  
 23913 000018CA 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23914 000018CC 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23915 000018CE D1E2                    	shl	dx,1			;AN000; to have 4*x
 23916 000018D0 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23917 000018D2 E8BA00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23918 000018D5 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23919                                  
 23920 000018D7 D1E2                    	shl	dx,1			;AN000; to have 8*x
 23921 000018D9 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23922 000018DB E8B100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23923 000018DE 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23924                                  
 23925 000018E0 01DA                    	add	dx,bx			;AN000; now have 10*x
 23926 000018E2 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23927 000018E4 E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23928 000018E7 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23929                                  
 23930 000018E9 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23931 000018EB 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23932 000018EE E89E00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23933 000018F1 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23934                                  
 23935 000018F3 46                      	inc	si			;AN000; update pointer
 23936 000018F4 EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23937                                  ;
 23938                                  _$P_Value_Err0:				;AN000;
 23939 000018F6 5B                      	pop	bx			;AN000;
 23940 000018F7 E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 23941                                  ;
 23942                                  _$P_Value00:				;AN000;
 23943 000018FA 5B                      	pop	bx			;AN000; restore control pointer
 23944 000018FB 2EF606[2B14]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23945 00001901 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23946                                  
 23947 00001903 F7D1                    	not	cx			;AN000; +
 23948 00001905 F7D2                    	not	dx			;AN000; |- Make 2's complement
 23949 00001907 83C201                  	add	dx,1			;AN000; |
 23950 0000190A 83D100                  	adc	cx,0			;AN000; +
 23951                                  
 23952                                  _$P_Value01:				;AN000; / nval = 0
 23953 0000190D 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23954 00001911 268A04                  	mov	al,[es:si]		;AN000; get nval
 23955                                  	; 07/09/2023
 23956                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 23957                                  	;;*jne	short _$P_Value02	;AN000;
 23958                                  	;;* 07/07/2023
 23959                                  	;je	short _$P_Value05
 23960                                  	; 07/09/2023
 23961 00001914 08C0                    	or	al,al
 23962 00001916 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 23963                                  
 23964                                  	;mov	al,_$P_Number		;AN000; Set type
 23965                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23966                                  	; 07/07/2023
 23967                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 23968                                  	;*jmp	short _$P_Value_Exit	;AN000;
 23969                                  
 23970                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23971                                  	; (SYSINIT:1BA5h)
 23972                                  	; 12/12/2022
 23973                                  	;nop	; db  90h
 23974                                  
 23975                                  _$P_Value02:				;AN000; / nval = 1
 23976                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23977                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23978                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23979                                  
 23980 00001918 46                      	inc	si			;AN000;
 23981 00001919 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23982                                  	
 23983                                  	; 07/09/2023
 23984                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 23985                                  	;je	short _$P_Value03	;AN000; (tm07)
 23986 0000191C 08C0                    	or	al,al
 23987 0000191E 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 23988                                  
 23989 00001920 46                      	inc	si			;AN000; si points to 1st item_tag
 23990                                  _$P_Val02_Loop:				;AN000;
 23991 00001921 2EF606[2B14]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23992 00001927 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23993                                  
 23994 00001929 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23995 0000192D 7234                    	jb	short _$P_Val02_Next	;AN000;
 23996 0000192F 7706                    	ja	short _$P_Val_In	;AN000;
 23997                                  
 23998 00001931 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23999 00001935 722C                    	jb	short _$P_Val02_Next	;AN000;
 24000                                  
 24001                                  _$P_Val_In:				;AN000;
 24002 00001937 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 24003 0000193B 7726                    	ja	short _$P_Val02_Next	;AN000;
 24004 0000193D 7237                    	jb	short _$P_Val_Found	;AN000;
 24005                                  
 24006 0000193F 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 24007 00001943 771E                    	ja	short _$P_Val02_Next	;AN000;
 24008                                  
 24009 00001945 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 24010                                  
 24011                                  _$P_Val02_Sign:				;AN000;
 24012 00001947 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 24013 0000194B 7C16                    	jl	short _$P_Val02_Next	;AN000;
 24014 0000194D 7F06                    	jg	short _$P_SVal_In	;AN000;
 24015                                  
 24016 0000194F 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 24017 00001953 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 24018                                  
 24019                                  _$P_SVal_In:				;AN000;
 24020 00001955 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 24021 00001959 7F08                    	jg	short _$P_Val02_Next	;AN000;
 24022                                  
 24023 0000195B 7C19                    	jl	short _$P_Val_Found	;AN000;
 24024                                  
 24025 0000195D 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 24026                                  	;jg	short _$P_Val02_Next	;AN000;
 24027                                  	;jmp	short _$P_Val_Found	;AN000;
 24028                                  	; 14/08/2023
 24029 00001961 7E13                    	jng	short _$P_Val_Found
 24030                                  
 24031                                  _$P_Val02_Next:				;AN000;
 24032 00001963 83C609                  	add	si,_$P_Len_Range 	;AN000;
 24033 00001966 FEC8                    	dec	al			;AN000; loop nrng times in AL
 24034 00001968 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 24035                                  					; / Not found
 24036 0000196A 2EC706[1F14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 24037                                  	;mov	al,_$P_Number		;AN000;
 24038                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24039                                  _$P_Value05:		;* 14/08/2023
 24040                                  	; 14/08/2023
 24041 00001971 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24042 00001974 EB11                    	jmp	short _$P_Value_Exit	;AN000;
 24043                                  
 24044                                  _$P_Val_Found:				;AN000;
 24045 00001976 B001                    	mov	al,_$P_Number		;AN000;
 24046 00001978 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 24047 0000197B EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 24048                                  
 24049                                  _$P_Value03:				;AN000; / nval = 2
 24050                                  
 24051                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 24052                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 24053                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 24054                                  ;(tm07) inc	si			;AN000;
 24055                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 24056                                  ;	mov	ah,$P_Len_Range 	;AN000;
 24057                                  ;	mul	ah			;AN000;  Skip nrng field
 24058                                  ;	inc	ax			;AN000;
 24059                                  ;	add	si,ax			;AN000; si points to nnval
 24060                                  ;	mov	al,es:[si]		;AN000; get nnval
 24061                                  ;	inc	si			;AN000; si points to 1st item_tag
 24062                                  ;$P_Val03_Loop:				;AN000;
 24063                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 24064                                  ;	jne	$P_Val03_Next		;AN000;
 24065                                  ;
 24066                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 24067                                  ;	je	$P_Val_Found		;AN000;
 24068                                  ;
 24069                                  ;$P_Val03_Next:				;AN000;
 24070                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 24071                                  ;	dec	al			;AN000; loop nval times in AL
 24072                                  ;	jne	$P_Val03_Loop		;AN000;
 24073                                  ;					;AN000; / Not found
 24074                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 24075                                  ;	mov	al,$P_Number		;AN000;
 24076                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 24077                                  ;	jmp	short $P_Value_Exit	;AN000;
 24078                                  ;
 24079                                  ;ENDIF					;AN000;(of Val2SW)
 24080                                  ;$P_Value04:
 24081                                  
 24082                                  _$P_Value_Err:				;AN000;
 24083 0000197D 2EC706[1F14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24084                                  	;mov	al,_$P_String		;AN000; Set type
 24085                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24086                                  	; 14/08/2023
 24087 00001984 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24088                                  _$P_Value_Exit:				;AN000;
 24089 00001987 E84BFD                  	call	_$P_Fill_Result		;AN000;
 24090 0000198A 5E                      	pop	si			;AN000;
 24091 0000198B 5A                      	pop	dx			;AN000;
 24092 0000198C 59                      	pop	cx			;AN000;
 24093 0000198D 58                      	pop	ax			;AN000;
 24094 0000198E C3                      	retn				;AN000;
 24095                                  
 24096                                  ; 28/03/2019 - Retro DOS v4.0
 24097                                  
 24098                                  ;***********************************************************************
 24099                                  ; _$P_Check_OVF
 24100                                  ;
 24101                                  ; Function:  Check if overflow is occurred with consideration of
 24102                                  ;	     signed or un-signed numeric value
 24103                                  ;
 24104                                  ; Input:     Flag register
 24105                                  ;
 24106                                  ; Output:    CY = 1  :	Overflow
 24107                                  ;
 24108                                  ; Vars:     _$P_Flags(R)
 24109                                  ;***********************************************************************
 24110                                  
 24111                                  	; 26/10/2022
 24112                                  _$P_Check_OVF:
 24113 0000198F 9C                      	pushf				;AN000;
 24114 00001990 2EF606[2B14]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 24115 00001996 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 24116                                  
 24117 00001998 9D                      	popf				;AN000; by the CY bit
 24118 00001999 C3                      	retn				;AN000;
 24119                                  
 24120                                  _$P_COVF:				;AN000;
 24121 0000199A 9D                      	popf				;AN000; else,
 24122 0000199B 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 24123                                  
 24124 0000199D F8                      	clc				;AN000; indicate it with CY bit
 24125 0000199E C3                      	retn				;AN000; CY=0 means no overflow
 24126                                  
 24127                                  _$P_COVF00:				;AN000;
 24128                                  _$P_0099Err: ; 14/08/2023
 24129 0000199F F9                      	stc				;AN000; and CY=1 means overflow
 24130                                  _$P_0099Err2: ; 14/08/2023
 24131 000019A0 C3                      	retn				;AN000;
 24132                                  
 24133                                  ;***********************************************************************
 24134                                  ; _$P_0099;
 24135                                  ;
 24136                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 24137                                  ;
 24138                                  ; Input:     AL = character code
 24139                                  ;
 24140                                  ; Output:    CY = 1 : AL is not number
 24141                                  ;	     CY = 0 : AL contains binary value
 24142                                  ;***********************************************************************
 24143                                  
 24144                                  _$P_0099:
 24145 000019A1 3C30                    	cmp	al,"0"                  ;AN000;
 24146                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24147                                  	; 12/12/2022
 24148 000019A3 72FB                    	jb	short _$P_0099Err2  ; cf=1
 24149                                  
 24150 000019A5 3C39                    	cmp	al,"9"                  ;AN000;
 24151 000019A7 77F6                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24152                                  
 24153 000019A9 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 24154                                  	; 12/12/2022
 24155                                  	; cf=0	
 24156                                  	;clc				;AN000; indicate no error
 24157 000019AB C3                      	retn				;AN000;
 24158                                  
 24159                                  	; 14/08/2023
 24160                                  ;_$P_0099Err:				;AN000;
 24161                                  ;	stc				;AN000; indicate error
 24162                                  ;_$P_0099Err2: ; 12/12/2022	
 24163                                  ;	retn				;AN000;
 24164                                  
 24165                                  ;***********************************************************************
 24166                                  ; _$P_Simple_String
 24167                                  ;
 24168                                  ; Function:  See value list for the simple string
 24169                                  ;	     and make result buffer.
 24170                                  ;
 24171                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24172                                  ;	     ES:BX -> CONTROL block
 24173                                  ;
 24174                                  ; Output:    None
 24175                                  ;
 24176                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 24177                                  ;
 24178                                  ; Vars: _$P_RC(W)
 24179                                  ;***********************************************************************
 24180                                  
 24181                                  _$P_Simple_String:
 24182 000019AC 50                      	push	ax			;AN000;
 24183 000019AD 53                      	push	bx			;AN000;
 24184 000019AE 52                      	push	dx			;AN000;
 24185 000019AF 57                      	push	di			;AN000;
 24186 000019B0 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24187 000019B4 268A05                  	mov	al,[es:di]		;AN000; get nval
 24188 000019B7 08C0                    	or	al,al			;AN000; no value list ?
 24189 000019B9 7504                    	jnz	short _$P_Sim00		;AN000; then
 24190                                  
 24191 000019BB B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24192 000019BD EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24193                                  
 24194                                  _$P_Sim00:				;AN000;
 24195                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24196 000019BF 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24197 000019C1 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24198                                  
 24199 000019C3 47                      	inc	di			;AN000;
 24200 000019C4 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24201 000019C7 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24202 000019C9 F6E4                    	mul	ah			;AN000; Skip nrng field
 24203 000019CB 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24204 000019CC 01C7                    	add	di,ax			;AN000; di points to nnval
 24205 000019CE 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24206 000019D1 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24207 000019D3 F6E4                    	mul	ah			;AN000; Skip nnval field
 24208 000019D5 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24209 000019D6 01C7                    	add	di,ax			;AN000; di points to nstrval
 24210 000019D8 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24211 000019DB 47                      	inc	di			;AC035; add '2' to
 24212 000019DC 47                      	inc	di			;AC035;  DI reg
 24213                                  					;AN000; di points to 1st string in list
 24214                                  _$P_Sim_Loop:				;AN000;
 24215 000019DD 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24216 000019E0 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24217 000019E3 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24218                                  
 24219 000019E5 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24220 000019E8 FEC8                    	dec	al			;AN000; loop nstval times in AL
 24221 000019EA 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24222                                  					;AN000; / Not found
 24223 000019EC 2EC706[1F14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24224 000019F3 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24225 000019F5 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24226                                  
 24227                                  _$P_Sim_Found:				;AN000;
 24228 000019F7 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24229 000019FB B002                    	mov	al,_$P_List_Idx		;AN000;
 24230 000019FD 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 24231 00001A00 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 24232                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 24233                                  _$P_Sim01:				;AN000;
 24234 00001A02 2EC706[1F14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24235 00001A09 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24236                                  _$P_Sim_Exit:				;AN000;
 24237 00001A0B B003                    	mov	al,_$P_String		;AN000; Set type
 24238                                  _$P_Sim_Exit0:				;AN000;
 24239 00001A0D E8C5FC                  	call	_$P_Fill_Result		;AN000;
 24240 00001A10 5F                      	pop	di			;AN000;
 24241 00001A11 5A                      	pop	dx			;AN000;
 24242 00001A12 5B                      	pop	bx			;AN000;
 24243 00001A13 58                      	pop	ax			;AN000;
 24244 00001A14 C3                      	retn				;AN000;
 24245                                  
 24246                                  ;***********************************************************************
 24247                                  ; _$P_String_Comp:
 24248                                  ;
 24249                                  ; Function:  Compare two string
 24250                                  ;
 24251                                  ; Input:     cs:SI -> 1st string
 24252                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 24253                                  ;	     ES:BX -> CONTROL block
 24254                                  ;
 24255                                  ; Output:    CY = 1 if not match
 24256                                  ;
 24257                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 24258                                  ;
 24259                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 24260                                  ;***********************************************************************
 24261                                  
 24262                                  _$P_String_Comp:
 24263 00001A15 50                      	push	ax			;AN000;
 24264 00001A16 55                      	push	bp			;AN000;
 24265 00001A17 52                      	push	dx			;AN000;
 24266 00001A18 56                      	push	si			;AN000;
 24267 00001A19 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 24268                                  _$P_SCOM_Loop:				;AN000;
 24269 00001A1B 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 24270 00001A1E E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 24271 00001A21 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 24272                                  
 24273 00001A23 E821FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 24274                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 24275 00001A26 2EF606[2B14]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 24276 00001A2C 740D                    	jz	short _$P_SCOM04	;AN000;
 24277                                  
 24278 00001A2E 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 24279 00001A30 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 24280                                  
 24281 00001A32 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 24282 00001A37 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 24283                                  
 24284 00001A39 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 24285                                  
 24286                                  _$P_SCOM04:				;AN000;
 24287 00001A3B 2EF606[2B14]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 24288 00001A41 740E                    	jz	short _$P_SCOM03	;AN000;
 24289                                  
 24290 00001A43 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 24291 00001A45 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 24292                                  
 24293                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24294                                  	;cmp	byte [es:bp+0],_$P_NULL
 24295                                  	; 11/12/2022
 24296 00001A47 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 24297 00001A4C 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 24298                                  
 24299                                  _$P_SCOM05:				;AN000;   found a match
 24300 00001A4E 46                      	inc	si			;AN000; si points to just after "=" or ":"
 24301 00001A4F EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 24302                                  
 24303                                  _$P_SCOM03:				;AN000;
 24304                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 24305                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24306                                  	;cmp	al,[es:bp+0]
 24307                                  	; 11/12/2022
 24308 00001A51 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 24309 00001A55 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 24310                                  
 24311 00001A57 08C0                    	or	al,al			;AN000; end of line
 24312 00001A59 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 24313                                  
 24314                                  	; 12/12/2022
 24315                                  	;inc	si			;AN000; update operand pointer
 24316                                  	;inc	bp			;AN000;    and synonym pointer
 24317                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24318 00001A5B EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 24319                                  
 24320                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 24321                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24322                                  	;cmp	al,[es:bp+0]
 24323                                  	; 11/12/2022
 24324 00001A5D 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 24325 00001A61 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 24326                                  
 24327 00001A63 46                      	inc	si			;AN000; else, load next byte
 24328 00001A64 2E8A04                  	mov	al,[cs:si]		;AN000; and
 24329 00001A67 45                      	inc	bp			;AN000;
 24330                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24331                                  	;cmp	al,[es:bp+0]
 24332                                  	; 11/12/2022
 24333 00001A68 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 24334 00001A6C 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 24335                                  
 24336                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24337                                  	; 12/12/2022
 24338                                  _$P_SCOM01:
 24339 00001A6E 46                      	inc	si			;AN000; else update operand pointer
 24340 00001A6F 45                      	inc	bp			;AN000; 		and synonym pointer
 24341                                  ;_$P_SCOM01:				;AN000;
 24342 00001A70 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 24343                                  
 24344                                  _$P_SCOM_Differ0:			;AN000;
 24345                                  ;IF SwSW				;AN000;(tm10)
 24346 00001A72 2EF606[2B14]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 24347 00001A78 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 24348                                  
 24349                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24350                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 24351                                  	; 12/12/2022
 24352 00001A7A 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 24353 00001A7F 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 24354                                  
 24355                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24356                                  	;cmp	byte [es:bp+0],_$P_NULL
 24357                                  	; 11/12/2022
 24358 00001A81 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 24359                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 24360 00001A86 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 24361                                  
 24362                                  _$P_not_applicable:			;AN000;(tm10)
 24363                                  ;ENDIF					;AN000;(tm10)
 24364                                  
 24365                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24366                                  					;AN000; ignore colon option specified ?
 24367                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 24368                                  	; 12/12/2022
 24369 00001A88 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24370                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24371                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 24372 00001A8C 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 24373                                  
 24374 00001A8E 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 24375 00001A90 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 24376                                  
 24377                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24378                                  	;cmp	byte [es:bp+0],_$P_NULL
 24379                                  	; 11/12/2022
 24380 00001A92 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 24381 00001A97 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 24382                                  
 24383 00001A99 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 24384                                  
 24385                                  _$P_SCOM02:				;AN000;
 24386 00001A9B 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 24387 00001A9D 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 24388                                  
 24389                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24390                                  	;cmp	byte [es:bp+0],_$P_Colon
 24391                                  	; 11/12/2022
 24392 00001A9F 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 24393 00001AA4 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 24394                                  
 24395                                  _$P_SCOM_Differ: 			;AN000;
 24396 00001AA6 F9                      	stc				;AN000; indicate not found
 24397 00001AA7 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 24398                                  
 24399                                  _$P_SCOM_Same:				;AN000;
 24400                                  	; 12/12/2022
 24401                                  	; cf=0
 24402 00001AA9 2E8936[2E14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 24403                                  	; 12/12/2022
 24404                                  	;clc				;AN000; indicate found
 24405                                  _$P_SCOM_Exit:				;AN000;
 24406 00001AAE 5E                      	pop	si			;AN000;
 24407 00001AAF 5A                      	pop	dx			;AN000;
 24408 00001AB0 5D                      	pop	bp			;AN000;
 24409 00001AB1 58                      	pop	ax			;AN000;
 24410 00001AB2 C3                      	retn
 24411                                  
 24412                                  ; 30/03/2019
 24413                                  
 24414                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24415                                  
 24416                                  ;***********************************************************************
 24417                                  ; _$P_File_Format;
 24418                                  ;
 24419                                  ; Function:  Check if the input string is valid file spec format.
 24420                                  ;	     And set the result buffer.
 24421                                  ;
 24422                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24423                                  ;	     ES:BX -> CONTROL block
 24424                                  ;
 24425                                  ; Output:    None
 24426                                  ;
 24427                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24428                                  ;
 24429                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24430                                  ;	_$P_SaveSI_Cmpx(R)
 24431                                  ;***********************************************************************
 24432                                  
 24433                                  _$P_File_Format:
 24434 00001AB3 50                      	push	ax			;AN000;
 24435 00001AB4 57                      	push	di			;AN000;
 24436 00001AB5 56                      	push	si			;AN000;
 24437 00001AB6 2E8B3E[2C14]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24438                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24439 00001ABB 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24440 00001ABE 08C0                    	or	al,al			;AN000; end of line ?
 24441 00001AC0 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24442                                  
 24443 00001AC2 E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24444 00001AC5 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24445                                  
 24446 00001AC7 2EC606[C214]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24447                                  					;AN033;AC034;; set error flag- bad char.
 24448 00001ACD 5E                      	pop	si			;AN033;
 24449 00001ACE 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24450 00001AD2 5F                      	pop	di			;AN033;
 24451 00001AD3 EB3E                    	jmp	short _$P_FileF02	;AN033;
 24452                                  
 24453                                  _$P_FileF_Err:				;AN000;
 24454 00001AD5 5E                      	pop	si			;AN000;
 24455 00001AD6 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24456 00001ADA 5F                      	pop	di			;AN000;
 24457                                  
 24458                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24459                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24460                                  	; 12/12/2022
 24461 00001ADB 26F60701                	test	byte [es:bx],_$P_Optional
 24462                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24463                                  	;test	word [es:bx],_$P_Optional
 24464 00001ADF 7532                    	jnz	short _$P_FileF02	;AN000;
 24465                                  
 24466 00001AE1 2EC706[1F14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24467 00001AE8 EB29                    	jmp	short _$P_FileF02	;AN000;
 24468                                  
 24469                                  _$P_FileF03:				;AN000;
 24470 00001AEA 58                      	pop	ax			;AN000; discard save si
 24471 00001AEB 56                      	push	si			;AN000; save new si
 24472                                  _$P_FileF_Loop1: 			;AN000;
 24473 00001AEC 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24474 00001AEF 08C0                    	or	al,al			;AN000; end of line ?
 24475 00001AF1 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24476                                  
 24477 00001AF3 E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24478 00001AF6 740B                    	je	short _$P_FileF00	;AN000;
 24479                                  
 24480 00001AF8 E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24481 00001AFB 7302                    	jnc	short _$P_FileF01	;AN000;
 24482 00001AFD 47                      	inc	di			;AN000; if yes, skip next byte
 24483 00001AFE 46                      	inc	si			;AN000;
 24484                                  _$P_FileF01:				;AN000;
 24485 00001AFF 47                      	inc	di			;AN000;
 24486 00001B00 46                      	inc	si			;AN000;
 24487 00001B01 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24488                                  ;
 24489                                  _$P_FileF00:				;AN000;
 24490 00001B03 2EA2[2514]              	mov	[cs:_$P_Terminator],al	;AC034;
 24491 00001B07 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24492 00001B0B 47                      	inc	di			;AN000;
 24493 00001B0C 2E893E[2114]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24494                                  _$P_FileF_RLT:				;AN000;
 24495 00001B11 5E                      	pop	si			;AN000;
 24496 00001B12 5F                      	pop	di			;AN000;
 24497                                  _$P_FileF02:				;AN000;
 24498 00001B13 58                      	pop	ax			;AN000; (tm14)
 24499                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 24500                                  	; 14/08/2023
 24501 00001B14 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24502 00001B17 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24503                                  
 24504 00001B19 50                      	push	ax			;AN000;  (tm14)
 24505                                  	;mov	ah,_$P_No_Tag		;AN000; set
 24506                                  	;mov	al,_$P_File_Spec 	;AN000; result
 24507                                  	; 14/08/2023
 24508 00001B1A B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 24509                                  					      ; set result
 24510 00001B1D E8B5FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 24511 00001B20 58                      	pop	ax			;AN000;
 24512                                  
 24513                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24514 00001B21 C3                      	retn				;AN000;
 24515                                  
 24516                                  ;***********************************************************************
 24517                                  ; _$P_FileSp_Chk
 24518                                  ;
 24519                                  ; Function:  Check if the input byte is one of file special characters
 24520                                  ;
 24521                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24522                                  ;	     AL = character code to be examineed
 24523                                  ;
 24524                                  ; Output:    ZF = 1 , AL is one of special characters
 24525                                  ;***********************************************************************
 24526                                  
 24527                                  _$P_FileSp_Chk:
 24528 00001B22 53                      	push	bx			;AN000;
 24529 00001B23 51                      	push	cx			;AN000;
 24530                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24531                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 24532                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 24533                                  	; 07/09/2023
 24534 00001B24 BB[B914]                	mov	bx,_$P_FileSp_Char
 24535 00001B27 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 24536                                  _$P_FileSp_Loop: 			;AN000;
 24537 00001B2A 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24538 00001B2D 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24539                                  
 24540 00001B2F 43                      	inc	bx			;AN000;
 24541 00001B30 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24542                                  
 24543 00001B32 41                      	inc	cx			;AN000; reset ZF
 24544                                  _$P_FileSp_Exit: 			;AN000;
 24545 00001B33 59                      	pop	cx			;AN000;
 24546 00001B34 5B                      	pop	bx			;AN000;
 24547 00001B35 C3                      	retn
 24548                                  
 24549                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24550                                  
 24551                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24552                                  
 24553                                  ;***********************************************************************
 24554                                  ; _$P_Drive_Format;
 24555                                  ;
 24556                                  ; Function:  Check if the input string is valid drive only format.
 24557                                  ;	     And set the result buffer.
 24558                                  ;
 24559                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24560                                  ;	     ES:BX -> CONTROL block
 24561                                  ;
 24562                                  ; Output:    None
 24563                                  ;
 24564                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24565                                  ;
 24566                                  ; Vars: _$P_RC(W)
 24567                                  ;***********************************************************************
 24568                                  
 24569                                  _$P_Drive_Format:
 24570 00001B36 50                      	push	ax			;AN000;
 24571 00001B37 52                      	push	dx			;AN000;
 24572 00001B38 2E8A04                  	mov	al,[cs:si]		;AN000;
 24573 00001B3B 08C0                    	or	al,al			;AN000; if null string
 24574 00001B3D 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24575                                  
 24576 00001B3F E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24577 00001B42 722A                    	jc	short _$P_Drv_Err	;AN000;
 24578                                  
 24579 00001B44 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24580 00001B49 740D                    	je	short _$P_DrvF00	;AN000;
 24581                                  
 24582                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24583                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24584                                  	; 12/12/2022
 24585 00001B4B 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24586                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24587                                  	;test	word [es:bx],_$P_Ig_Colon
 24588 00001B4F 741D                    	jz	short _$P_Drv_Err	;AN000;
 24589                                  
 24590 00001B51 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24591 00001B56 7516                    	jne	short _$P_Drv_Err	;AN000;
 24592                                  
 24593                                  _$P_DrvF00:				;AN000;
 24594 00001B58 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24595 00001B5A 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24596 00001B5C 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 24597                                  
 24598 00001B5E 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24599 00001B60 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24600                                  
 24601 00001B62 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24602 00001B64 88C2                    	mov	dl,al			;AN000; set
 24603                                  	;mov	ah,_$P_No_Tag		;AN000; result
 24604                                  	;mov	al,_$P_Drive		;AN000; buffer
 24605                                  	; 08/07/2023
 24606 00001B66 B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 24607                                  					      ; set result buffer
 24608 00001B69 E869FB                  	call	_$P_Fill_Result		;AN000; to drive
 24609 00001B6C EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24610                                  
 24611                                  _$P_Drv_Err:				;AN000;
 24612 00001B6E 2EC706[1F14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24613                                  _$P_Drv_Exit:				;AN000;
 24614 00001B75 5A                      	pop	dx			;AN000;
 24615 00001B76 58                      	pop	ax			;AN000;
 24616 00001B77 C3                      	retn				;AN000;
 24617                                  
 24618                                  ;ENDIF					;AN000;(of DrvSW)
 24619                                  
 24620                                  ;***********************************************************************
 24621                                  ; _$P_Skip_Delim;
 24622                                  ;
 24623                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24624                                  ;	    and comma.
 24625                                  ;
 24626                                  ; Input:    DS:SI -> Command String
 24627                                  ;	    ES:DI -> Parameter List
 24628                                  ;
 24629                                  ; Output:   CY = 1 if the end of line encounterd
 24630                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24631                                  ;	    AL = Last examineed character
 24632                                  ;
 24633                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24634                                  ;
 24635                                  ; Vars:     _$P_Flags(R)
 24636                                  ;***********************************************************************
 24637                                  
 24638                                  _$P_Skip_Delim:
 24639                                  _$P_Skip_Delim_Loop:			;AN000;
 24640 00001B78 AC                      	lodsb				;AN000;
 24641 00001B79 E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24642 00001B7C 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24643                                  
 24644 00001B7E E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24645 00001B81 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24646                                  
 24647 00001B83 2EF606[2B14]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24648 00001B89 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24649                                  
 24650 00001B8B 2EF606[2B14]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24651                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24652                                  	; 14/08/2023
 24653                                  	; cf=0
 24654 00001B91 7505                    	jnz	short _$P_Skip_Delim_Exit
 24655 00001B93 C3                      	retn
 24656                                  
 24657                                  	;dec	si			;AN000; backup si for next call (tm08)
 24658                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24659                                  	; 12/12/2022
 24660                                  	; cf=0
 24661                                  	; 14/08/2023
 24662                                  	;jmp	short _$P_Skip_Delim_Exit
 24663                                  
 24664                                  _$P_Skip_Delim_CY:			;AN000;
 24665 00001B94 F9                      	stc				;AN000; indicate EOL
 24666 00001B95 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24667                                  
 24668                                  _$P_Skip_Delim_NCY:			;AN000;
 24669 00001B97 F8                      	clc				;AN000; indicate non delim
 24670                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24671 00001B98 4E                      	dec	si			;AN000;  backup index pointer
 24672                                  	; 14/08/2023
 24673                                  	; 12/12/2022
 24674                                  ;_$P_Exit_At_Extra:	 ; cf=0
 24675 00001B99 C3                      	retn				;AN000;
 24676                                  
 24677                                  	; 12/12/2022
 24678                                  ;_$P_Exit_At_Extra:			;AN000;
 24679                                  	;clc				;AN000; indicate extra delim
 24680                                  	;retn				;AN000;
 24681                                  
 24682                                  ;***********************************************************************
 24683                                  ; _$P_Chk_EOL;
 24684                                  ;
 24685                                  ; Function: Check if AL is one of End of Line characters.
 24686                                  ;
 24687                                  ; Input:    AL = character code
 24688                                  ;	    ES:DI -> Parameter List
 24689                                  ;
 24690                                  ; Output:   ZF = 1 if one of End of Line characters
 24691                                  ;**********************************************************************
 24692                                  
 24693                                  _$P_Chk_EOL:
 24694 00001B9A 53                      	push	bx			;AN000;
 24695 00001B9B 51                      	push	cx			;AN000;
 24696 00001B9C 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24697 00001B9E 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24698                                  
 24699 00001BA0 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24700 00001BA2 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24701                                  
 24702                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24703 00001BA4 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24704 00001BA6 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24705                                  ;ENDIF					;AN028;
 24706                                  
 24707 00001BA8 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24708                                  					;AN000; EOL character specified ?
 24709 00001BAD 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24710                                  
 24711 00001BAF 31DB                    	xor	bx,bx			;AN000;
 24712 00001BB1 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24713                                  					;AN000; get length of delimiter list
 24714 00001BB5 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24715                                  	; 14/08/2023
 24716 00001BB8 31C9                    	xor	cx,cx ; *
 24717 00001BBA 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24718 00001BBE 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24719                                  	; 14/08/2023
 24720                                  	;;xor	cx,cx			;AN000; Get number of extra character
 24721                                  	;xor	ch,ch ; *
 24722 00001BC0 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 24723                                  _$P_Chk_EOL_Loop:			;AN000;
 24724 00001BC3 43                      	inc	bx			;AN000;
 24725 00001BC4 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24726 00001BC7 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24727 00001BC9 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24728                                  	; 14/08/2023
 24729                                  	; cx=0
 24730                                  _$P_Chk_EOL_NZ:				;AN000;
 24731                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 24732                                  	; 14/08/2023
 24733 00001BCB 41                      	inc	cx  ; zf=0 (cx=1) ; *
 24734                                  _$P_Chk_EOL_Exit:			;AN000;
 24735 00001BCC 59                      	pop	cx			;AN000;
 24736 00001BCD 5B                      	pop	bx			;AN000;
 24737 00001BCE C3                      	retn
 24738                                  
 24739                                  ;***********************************************************************
 24740                                  ; _$P_Chk_Delim;
 24741                                  ;
 24742                                  ; Function: Check if AL is one of delimiter characters.
 24743                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24744                                  ;	    blanks.
 24745                                  ;
 24746                                  ; Input:    AL = character code
 24747                                  ;	    DS:SI -> Next Character
 24748                                  ;	    ES:DI -> Parameter List
 24749                                  ;
 24750                                  ; Output:   ZF = 1 if one of delimiter characters
 24751                                  ;	    SI points to the next character
 24752                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24753                                  ;***********************************************************************
 24754                                  
 24755                                  _$P_Chk_Delim:
 24756 00001BCF 53                      	push	bx			;AN000;
 24757 00001BD0 51                      	push	cx			;AN000;
 24758 00001BD1 2EC606[2514]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24759                                  					;AC034; Assume terminated by space
 24760                                  	;and	byte [cs:_$P_Flags20,0DFh
 24761 00001BD7 2E8026[2B14]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24762 00001BDD 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24763 00001BDF 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24764                                  
 24765 00001BE1 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24766 00001BE3 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24767                                  
 24768 00001BE5 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24769 00001BE7 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24770                                  
 24771                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 24772                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 24773                                  ;        Erdogan Tan - 14/08/2023
 24774                                  ;_$P_Chk_Delim00:
 24775                                  %if 0
 24776                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24777                                  _$P_Chk_Delim00: 			;AN000;
 24778                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24779                                  	jne	short _$P_Chk_Delim01	;AN000;
 24780                                  
 24781                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24782                                  	jne	short _$P_Chk_Delim01	;AN000;
 24783                                  
 24784                                  	mov	al,_$P_Space		;AN000;
 24785                                  	inc	si			;AN000; make si point to next character
 24786                                  	cmp	al,al			;AN000; Set ZF
 24787                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24788                                  %endif
 24789                                  
 24790                                  _$P_Chk_Delim01: 			;AN000;
 24791 00001BE9 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24792                                  					;AN000; delimiter character specified ?
 24793 00001BEE 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24794                                  
 24795                                  	;xor	cx,cx			;AN000;
 24796 00001BF0 30ED                    	xor	ch,ch
 24797                                  	;mov	cl,[es:di+3]
 24798 00001BF2 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24799                                  					;AN000; get length of delimiter list
 24800                                  	;or	cx,cx			;AN000; No extra Delim character ?
 24801                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 24802                                  	; 14/08/2023
 24803 00001BF6 E30B                    	jcxz	_$P_Chk_Delim_NZ
 24804                                  
 24805 00001BF8 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24806                                  _$P_Chk_Delim_Loop:			;AN000;
 24807 00001BFB 43                      	inc	bx			;AN000;
 24808 00001BFC 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24809 00001BFF 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24810                                  
 24811 00001C01 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24812                                  
 24813                                  _$P_Chk_Delim_NZ:			;AN000;
 24814                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 24815                                  	; 14/08/2023
 24816                                  	; cx=0 here
 24817 00001C03 41                      	inc	cx ; cx=1, zf=0
 24818                                  _$P_Chk_Delim_Exit:			;AN000;
 24819                                  _$P_ChkDfin:				;AN000;
 24820 00001C04 59                      	pop	cx			;AN000;
 24821 00001C05 5B                      	pop	bx			;AN000;
 24822 00001C06 C3                      	retn				;AN000;
 24823                                  
 24824                                  _$P_Chk_Delim_Exit0:			;AN000;
 24825 00001C07 2EA2[2514]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24826 00001C0B 2EF606[2B14]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24827 00001C11 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24828                                  
 24829 00001C13 2E800E[2B14]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24830                                  					;AC034; flag terminated extra delimiter or comma
 24831                                  _$P_No_Set_Extra:			;AN027;
 24832 00001C19 38C0                    	cmp	al,al			;AN000; set ZF
 24833 00001C1B EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24834                                  
 24835                                  
 24836                                  ;***********************************************************************
 24837                                  ; _$P_Chk_Switch;
 24838                                  ;
 24839                                  ; Function: Check if AL is the switch character not in first position of
 24840                                  ;	    _$P_STRING_BUF
 24841                                  ;
 24842                                  ; Input:    AL = character code
 24843                                  ;	    BX = current pointer within _$P_String_Buf
 24844                                  ;	    SI =>next char on command line (following the one in AL)
 24845                                  ;
 24846                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24847                                  ;		 position, and has no chance of being part of a date string,
 24848                                  ;		 i.e. should be treated as a delimiter.
 24849                                  
 24850                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24851                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24852                                  ;		 should not be treated as a delimiter.
 24853                                  ;
 24854                                  ; Vars:  _$P_Terminator(W)
 24855                                  
 24856                                  ; Use:	 _$P_0099
 24857                                  ;***********************************************************************
 24858                                  
 24859                                  _$P_Chk_Switch:
 24860                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24861                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 24862                                  	; 14/08/2023
 24863 00001C1D BD[3414]                	mov	bp,_$P_STRING_BUF
 24864                                  
 24865                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24866 00001C20 39EB                    	cmp	bx,bp			;AN000;
 24867 00001C22 7406                    	je	short _$P_STRUC_L2	;AN000;
 24868                                  
 24869                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24870 00001C24 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24871 00001C26 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24872                                  
 24873 00001C28 F9                      	stc				;AN020;not in first position and is slash
 24874                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24875                                  	; 12/12/2022
 24876 00001C29 C3                      	retn
 24877                                  
 24878                                  ; 12/12/2022
 24879                                  ;_$P_STRUC_L5:				;AN000;
 24880                                  ;	CLC				;AN020;not a slash
 24881                                  ;;	    .ENDIF			;AN020;
 24882                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24883                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24884                                  
 24885                                  _$P_STRUC_L2:				;AN000;
 24886                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24887 00001C2A 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24888 00001C2C 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24889                                  
 24890 00001C2E 2E800E[2B14]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24891                                  ;	    .ENDIF			;AN020;
 24892                                  
 24893                                  	; 12/12/2022
 24894                                  	; cf=0
 24895                                  	;retn
 24896                                  
 24897                                  _$P_STRUC_L5:
 24898                                  	; 12/12/2022
 24899                                  _$P_STRUC_L12:				;AN000;
 24900 00001C34 F8                      	clc				;AN020;CF=0 indicating first char
 24901                                  ;	.ENDIF				;AN020;
 24902                                  _$P_STRUC_L1:				;AN000;
 24903 00001C35 C3                      	retn				;AN000;
 24904                                  
 24905                                  ;**************************************************************************
 24906                                  ; _$P_Chk_DBCS:
 24907                                  ;
 24908                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24909                                  ;
 24910                                  ;  Input:
 24911                                  ;	  AL	= Code to be examineed
 24912                                  ;
 24913                                  ;  Output:
 24914                                  ;	  If CF is on then a lead byte of DBCS
 24915                                  ;
 24916                                  ; Use: INT 21h w/AH=63
 24917                                  ;
 24918                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24919                                  ;***************************************************************************
 24920                                  
 24921                                  _$P_Chk_DBCS:
 24922 00001C36 1E                      	push	ds			;AN000;
 24923 00001C37 56                      	push	si			;AN000;
 24924 00001C38 53                      	push	bx			;AN000; (tm11)
 24925                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24926                                  	;jne	short _$P_DBCS00	;AN000;
 24927                                  	; 14/08/2023
 24928 00001C39 2E8B36[2814]            	mov	si,[cs:_$P_DBCSEV_SEG]
 24929 00001C3E 21F6                    	and	si,si ; 0 ?
 24930 00001C40 7525                    	jnz	short _$P_DBCS00 ; already set
 24931 00001C42 50                      	push	ax			;AN000;
 24932 00001C43 1E                      	push	ds			;AN000; (tm11)
 24933 00001C44 51                      	push	cx			;AN000;
 24934 00001C45 52                      	push	dx			;AN000;
 24935 00001C46 57                      	push	di			;AN000;
 24936 00001C47 55                      	push	bp			;AN000;
 24937 00001C48 06                      	push	es			;AN000;
 24938                                  	; si = 0 ; 14/08/2023
 24939                                  	;xor	si,si			;AN000;
 24940 00001C49 8EDE                    	mov	ds,si ; 0		;AN000;
 24941 00001C4B B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24942 00001C4E CD21                    	int	21h			;AN000;
 24943                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24944 00001C50 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24945 00001C52 09DB                    	or	bx,bx			;AN000; (tm11)
 24946 00001C54 07                      	pop	es			;AN000;
 24947 00001C55 5D                      	pop	bp			;AN000;
 24948 00001C56 5F                      	pop	di			;AN000;
 24949 00001C57 5A                      	pop	dx			;AN000;
 24950 00001C58 59                      	pop	cx			;AN000;
 24951 00001C59 1F                      	pop	ds			;AN000; (tm11)
 24952 00001C5A 58                      	pop	ax			;AN000;
 24953 00001C5B 7424                    	jz	short _$P_NON_DBCS	;AN000;
 24954                                  _$P_DBCS02:				;AN000;
 24955 00001C5D 2E8936[2614]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24956 00001C62 2E891E[2814]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24957                                  _$P_DBCS00:				;AN000;
 24958                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24959                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24960                                  	; 14/08/2023
 24961 00001C67 2EC536[2614]            	lds	si,[cs:_$P_DBCSEV_OFF]
 24962                                  _$P_DBCS_LOOP:				;AN000;
 24963 00001C6C 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24964 00001C6F 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24965 00001C71 3A04                    	cmp	al,[si] 		;AN000;
 24966 00001C73 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24967 00001C75 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24968 00001C78 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24969 00001C7A F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24970 00001C7B EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24971                                  _$P_DBCS01:				;AN000;
 24972 00001C7D 46                      	inc	si			;AC035; add '2' to
 24973 00001C7E 46                      	inc	si			;AC035;  SI reg
 24974                                  					;AN000; get next vector
 24975 00001C7F EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24976                                  _$P_NON_DBCS:				;AN000;
 24977                                  	; 12/12/2022
 24978                                  	; cf=0
 24979                                  	;clc				;AN000; indicate SBCS
 24980                                  _$P_DBCS_EXIT:				;AN000;
 24981 00001C81 5B                      	pop	bx			;AN000; (tm11)
 24982 00001C82 5E                      	pop	si			;AN000;
 24983 00001C83 1F                      	pop	ds			;AN000;
 24984 00001C84 C3                      	retn				;AN000;
 24985                                  
 24986                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24987                                  ; ======================================================================
 24988                                  ; 27/03/2019 - Retro DOS v4.0
 24989                                  
 24990                                  ;control block definitions for parser.
 24991                                  ;-----------------------------------------------------------------------
 24992                                  ; buffer = [n | n,m] {/e}
 24993                                  
 24994                                  ; 30/03/2019
 24995                                  
 24996                                  struc p_parms
 24997 00000000 ????                    	resw	1	; dw ?
 24998 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24999 00000003 ??                      	resb	1	; db 1	; length is 1
 25000 00000004 ??                      	resb 	1	; db ';' ; delimiter
 25001                                  .size:
 25002                                  endstruc
 25003                                  
 25004                                  struc p_pos
 25005 00000000 ????                    	resw	1	; dw ?	; numeric value??
 25006 00000002 ????                    	resw	1	; dw ?	; function
 25007 00000004 ????                    	resw	1	; dw ?	; result value buffer
 25008                                  
 25009                                  ; note: by defining result_val before this structure, we could remove
 25010                                  ;  the "result_val" from every structure invocation
 25011                                  
 25012 00000006 ????                    	resw	1	; dw ?	; value list
 25013 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 25014                                  .size:
 25015                                  endstruc
 25016                                  
 25017                                  struc	p_range
 25018 00000000 ??                      	resb	1	; db 1	; range definition
 25019 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 25020 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 25021 00000003 ????????                	resd	1	; dd ?	; numeric min
 25022 00000007 ????????                	resd	1	; dd ?	; numeric max
 25023                                  .size:
 25024                                  endstruc
 25025                                  
 25026                                  ;-----------------------------------------------------------------------
 25027                                  
 25028                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25029                                  	; (SYSINIT:1F48h)
 25030                                  
 25031                                  ; buffer = [n | n,m] {/e}
 25032                                  
 25033                                  ;buf_parms p_parms <buf_parmsx>
 25034                                  buf_parms: 
 25035 00001C85 [8A1C]                  	dw	buf_parmsx
 25036 00001C87 01                      	db	1	; an extra delimiter list
 25037 00001C88 01                      	db	1	; length is 1
 25038 00001C89 3B                      	db	';'	; delimiter
 25039                                  
 25040                                  buf_parmsx:
 25041 00001C8A 0102[941C][A81C]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 25042 00001C90 01                      	db	1			; one switch
 25043 00001C91 [BC1C]                  	dw	sw_x_ctrl
 25044 00001C93 00                      	db	0			; no keywords
 25045                                  
 25046                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 25047                                  buf_pos1:
 25048 00001C94 0080                    	dw	8000h	; numeric value??
 25049 00001C96 0000                    	dw	0	; function
 25050 00001C98 [CE1C]                  	dw	result_val ; result value buffer	
 25051 00001C9A [9D1C]                  	dw	buf_range_1 ; value list
 25052 00001C9C 00                      	db	0  	; no switches/keywords
 25053                                  
 25054                                  ;buf_range_1 p_range <,,,1,99>		; M050
 25055                                  buf_range_1:
 25056 00001C9D 01                      	db	1	; range definition
 25057 00001C9E 01                      	db	1	; 1 definition of range
 25058 00001C9F 01                      	db	1	; item tag for this range
 25059 00001CA0 01000000                	dd	1	; numeric min
 25060 00001CA4 63000000                	dd	99	; numeric max
 25061                                  
 25062                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 25063                                  buf_pos2:
 25064 00001CA8 0180                    	dw	8001h
 25065 00001CAA 0000                    	dw	0
 25066 00001CAC [CE1C]                  	dw	result_val	
 25067 00001CAE [B11C]                  	dw	buf_range_2
 25068 00001CB0 00                      	db	0
 25069                                  
 25070                                  ;buf_range_2 p_range <,,,0,8>
 25071                                  buf_range_2:
 25072 00001CB1 01                      	db	1
 25073 00001CB2 01                      	db	1
 25074 00001CB3 01                      	db	1
 25075 00001CB4 00000000                	dd	0
 25076 00001CB8 08000000                	dd	8
 25077                                  
 25078                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 25079                                  sw_x_ctrl:
 25080 00001CBC 0000                    	dw	0
 25081 00001CBE 0000                    	dw	0
 25082 00001CC0 [CE1C]                  	dw	result_val	
 25083 00001CC2 [CD1C]                  	dw	noval
 25084 00001CC4 01                      	db	1	; 1 switch
 25085                                  	
 25086                                  switch_x:
 25087 00001CC5 2F5800                  	db	'/X',0		; M016
 25088                                  
 25089                                  p_buffers:
 25090 00001CC8 0000                    	dw	0	; local variables
 25091                                  p_h_buffers:
 25092 00001CCA 0000                    	dw	0
 25093                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25094                                  p_buffer_slash_x:
 25095 00001CCC 00                      	db	0 ; 31/03/2019
 25096                                  
 25097                                  ;-- common definitions -------------------------------------------------
 25098                                  
 25099 00001CCD 00                      noval:	db	0
 25100                                  
 25101                                  result_val: 	;label	byte
 25102 00001CCE 00                      	db	0		; type returned
 25103                                  result_val_itag:
 25104 00001CCF 00                      	db	0		; item tag returned
 25105                                  result_val_swoff:
 25106 00001CD0 0000                    	dw	0		; es:offset of the switch defined
 25107                                  rv_byte:	;label	byte
 25108 00001CD2 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 25109                                  
 25110                                  ;-----------------------------------------------------------------------
 25111                                  
 25112                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25113                                  	; (SYSINIT:1F99h)
 25114                                  
 25115                                  ; break = [ on | off ]
 25116                                  
 25117                                  ;brk_parms p_parms  <brk_parmsx>
 25118                                  brk_parms:
 25119 00001CD6 [DB1C]                  	dw	brk_parmsx
 25120 00001CD8 01                      	db	1	; an extra delimiter list
 25121 00001CD9 01                      	db	1	; length is 1
 25122 00001CDA 3B                      	db	';'	; delimiter
 25123                                  
 25124                                  brk_parmsx:
 25125 00001CDB 0101[E11C]              	dw	101h,brk_pos	; min,max = 1 positional
 25126 00001CDF 00                      	db	0		; no switches
 25127 00001CE0 00                      	db	0		; no keywords
 25128                                  
 25129                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25130                                  brk_pos:
 25131 00001CE1 0020                    	dw	2000h
 25132 00001CE3 0000                    	dw	0
 25133 00001CE5 [CE1C]                  	dw	result_val	
 25134 00001CE7 [EA1C]                  	dw	on_off_string
 25135 00001CE9 00                      	db	0
 25136                                  
 25137                                  on_off_string:	;label	byte
 25138 00001CEA 03                      	db	3		; signals that there is a string choice
 25139 00001CEB 00                      	db	0		; no range definition
 25140 00001CEC 00                      	db	0		; no numeric values choice
 25141 00001CED 02                      	db	2		; 2 strings for choice
 25142 00001CEE 01                      	db	1		; the 1st string tag
 25143 00001CEF [F41C]                  	dw	on_string
 25144 00001CF1 02                      	db	2		; the 2nd string tag
 25145 00001CF2 [F71C]                  	dw	off_string
 25146                                  
 25147                                  on_string:
 25148 00001CF4 4F4E00                  	db	"ON",0
 25149                                  off_string:
 25150 00001CF7 4F464600                	db	"OFF",0
 25151                                  
 25152                                  p_ctrl_break:
 25153 00001CFB 00                      	db	0	; local variable
 25154                                  
 25155                                  ;-----------------------------------------------------------------------
 25156                                  
 25157                                  	; 27/10/2022
 25158                                  
 25159                                  ; country = n {m {path}}
 25160                                  ; or
 25161                                  ; country = n,,path
 25162                                  
 25163                                  ;cntry_parms p_parms <cntry_parmsx>
 25164                                  cntry_parms:
 25165 00001CFC [011D]                  	dw	cntry_parmsx
 25166 00001CFE 01                      	db	1
 25167 00001CFF 01                      	db	1
 25168 00001D00 3B                      	db	';'
 25169                                  	
 25170                                  cntry_parmsx:
 25171 00001D01 0103[0B1D][1F1D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 25171 00001D07 [281D]             
 25172 00001D09 00                      	db	0		; no switches
 25173 00001D0A 00                      	db	0		; no keywords
 25174                                  
 25175                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 25176                                  cntry_pos1:
 25177 00001D0B 0080                    	dw	8000h
 25178 00001D0D 0000                    	dw	0
 25179 00001D0F [CE1C]                  	dw	result_val	
 25180 00001D11 [141D]                  	dw	cc_range
 25181 00001D13 00                      	db	0
 25182                                  
 25183                                  ;cc_range p_range <,,,1,999>
 25184                                  cc_range:
 25185 00001D14 01                      	db	1
 25186 00001D15 01                      	db	1
 25187 00001D16 01                      	db	1
 25188 00001D17 01000000                	dd	1
 25189 00001D1B E7030000                	dd	999
 25190                                  
 25191                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25192                                  cntry_pos2:
 25193 00001D1F 0180                    	dw	8001h
 25194 00001D21 0000                    	dw	0
 25195 00001D23 [CE1C]                  	dw	result_val	
 25196 00001D25 [141D]                  	dw	cc_range
 25197 00001D27 00                      	db	0
 25198                                  
 25199                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25200                                  cntry_pos3:
 25201 00001D28 0102                    	dw	201h
 25202 00001D2A 0000                    	dw	0
 25203 00001D2C [CE1C]                  	dw	result_val	
 25204 00001D2E [CD1C]                  	dw	noval
 25205 00001D30 00                      	db	0	
 25206                                  
 25207                                  p_cntry_code:
 25208 00001D31 0000                    	dw	0	; local variable
 25209                                  p_code_page:
 25210 00001D33 0000                    	dw	0	; local variable
 25211                                  
 25212                                  ;-----------------------------------------------------------------------
 25213                                  
 25214                                  	; 27/10/2022
 25215                                  
 25216                                  ; files = n
 25217                                  
 25218                                  ;files_parms p_parms <files_parmsx>
 25219                                  files_parms:
 25220 00001D35 [3A1D]                  	dw	files_parmsx
 25221 00001D37 01                      	db	1
 25222 00001D38 01                      	db	1
 25223 00001D39 3B                      	db	';'
 25224                                  
 25225                                  files_parmsx:
 25226 00001D3A 0101[401D]              	dw	101h,files_pos	; min,max 1 positional
 25227 00001D3E 00                      	db	0		; no switches
 25228 00001D3F 00                      	db	0		; no keywords
 25229                                  
 25230                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 25231                                  files_pos:
 25232 00001D40 0080                    	dw	8000h
 25233 00001D42 0000                    	dw	0
 25234 00001D44 [CE1C]                  	dw	result_val	
 25235 00001D46 [491D]                  	dw	files_range
 25236 00001D48 00                      	db	0
 25237                                  
 25238                                  ;files_range p_range <,,,8,255>
 25239                                  files_range:
 25240 00001D49 01                      	db	1
 25241 00001D4A 01                      	db	1
 25242 00001D4B 01                      	db	1
 25243 00001D4C 08000000                	dd	8
 25244 00001D50 FF000000                	dd	255
 25245                                  
 25246                                  p_files:
 25247 00001D54 00                      	db	0		; local variable
 25248                                  
 25249                                  ;-----------------------------------------------------------------------
 25250                                  
 25251                                  	; 27/10/2022
 25252                                  
 25253                                  ; fcbs = n,m
 25254                                  
 25255                                  ;fcbs_parms p_parms <fcbs_parmsx>
 25256                                  fcbs_parms:
 25257 00001D55 [5A1D]                  	dw	fcbs_parmsx
 25258 00001D57 01                      	db	1
 25259 00001D58 01                      	db	1
 25260 00001D59 3B                      	db	';'
 25261                                  
 25262                                  fcbs_parmsx:
 25263 00001D5A 0102[621D][761D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 25264 00001D60 00                      	db	0		; no switches
 25265 00001D61 00                      	db	0		; no keywords
 25266                                  
 25267                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 25268                                  fcbs_pos_1:
 25269 00001D62 0080                    	dw	8000h
 25270 00001D64 0000                    	dw	0
 25271 00001D66 [CE1C]                  	dw	result_val	
 25272 00001D68 [6B1D]                  	dw	fcbs_range
 25273 00001D6A 00                      	db	0
 25274                                  
 25275                                  ;fcbs_range p_range <,,,1,255>
 25276                                  fcbs_range:
 25277 00001D6B 01                      	db	1
 25278 00001D6C 01                      	db	1
 25279 00001D6D 01                      	db	1
 25280 00001D6E 01000000                	dd	1
 25281 00001D72 FF000000                	dd	255
 25282                                  
 25283                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 25284                                  fcbs_pos_2:
 25285 00001D76 0080                    	dw	8000h
 25286 00001D78 0000                    	dw	0
 25287 00001D7A [CE1C]                  	dw	result_val	
 25288 00001D7C [7F1D]                  	dw	fcbs_keep_range
 25289 00001D7E 00                      	db	0
 25290                                  
 25291                                  ;fcbs_keep_range p_range <,,,0,255>
 25292                                  fcbs_keep_range:
 25293 00001D7F 01                      	db	1
 25294 00001D80 01                      	db	1
 25295 00001D81 01                      	db	1
 25296 00001D82 00000000                	dd	0
 25297 00001D86 FF000000                	dd	255
 25298                                  
 25299 00001D8A 00                      p_fcbs:	db	0		; local variable
 25300 00001D8B 00                      p_keep:	db	0		; local variable
 25301                                  
 25302                                  ;-----------------------------------------------------------------------
 25303                                  
 25304                                  	; 27/10/2022
 25305                                  
 25306                                  ; lastdrive = x
 25307                                  
 25308                                  ;ldrv_parms p_parms <ldrv_parmsx>
 25309                                  ldrv_parms:
 25310 00001D8C [911D]                  	dw	ldrv_parmsx
 25311 00001D8E 01                      	db	1
 25312 00001D8F 01                      	db	1
 25313 00001D90 3B                      	db	';'
 25314                                  
 25315                                  ldrv_parmsx:
 25316 00001D91 0101[971D]              	dw	101h,ldrv_pos	; min,max = 1 positional
 25317 00001D95 00                      	db	0		; no switches
 25318 00001D96 00                      	db	0		; no keywords
 25319                                  
 25320                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 25321                                  ldrv_pos:				    ; remove colon at end
 25322 00001D97 1001                    	dw	110h
 25323 00001D99 1000                    	dw	10h
 25324 00001D9B [CE1C]                  	dw	result_val	
 25325 00001D9D [CD1C]                  	dw	noval
 25326 00001D9F 00                      	db	0
 25327                                  	
 25328 00001DA0 00                      p_ldrv:	db	0		; local variable
 25329                                  
 25330                                  ;-----------------------------------------------------------------------
 25331                                  
 25332                                  	; 27/10/2022
 25333                                  
 25334                                  ; stacks = n,m
 25335                                  
 25336                                  ;stks_parms p_parms <stks_parmsx>
 25337                                  stks_parms:
 25338 00001DA1 [A61D]                  	dw	stks_parmsx
 25339 00001DA3 01                      	db	1
 25340 00001DA4 01                      	db	1
 25341 00001DA5 3B                      	db	';'
 25342                                  
 25343                                  stks_parmsx:
 25344 00001DA6 0202[AE1D][C21D]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 25345 00001DAC 00                      	db	0		; no switches
 25346 00001DAD 00                      	db	0		; no keywords
 25347                                  
 25348                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 25349                                  stks_pos_1:
 25350 00001DAE 0080                    	dw	8000h
 25351 00001DB0 0000                    	dw	0
 25352 00001DB2 [CE1C]                  	dw	result_val	
 25353 00001DB4 [B71D]                  	dw	stks_range
 25354 00001DB6 00                      	db	0
 25355                                  
 25356                                  ;stks_range p_range <,,,0,64>
 25357                                  stks_range:
 25358 00001DB7 01                      	db	1
 25359 00001DB8 01                      	db	1
 25360 00001DB9 01                      	db	1
 25361 00001DBA 00000000                	dd	0
 25362 00001DBE 40000000                	dd	64
 25363                                  
 25364                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 25365                                  stks_pos_2:
 25366 00001DC2 0080                    	dw	8000h
 25367 00001DC4 0000                    	dw	0
 25368 00001DC6 [CE1C]                  	dw	result_val	
 25369 00001DC8 [CB1D]                  	dw	stk_size_range
 25370 00001DCA 00                      	db	0
 25371                                  
 25372                                  ;stk_size_range p_range <,,,0,512>
 25373                                  stk_size_range:
 25374 00001DCB 01                      	db	1
 25375 00001DCC 01                      	db	1
 25376 00001DCD 01                      	db	1
 25377 00001DCE 00000000                	dd	0
 25378 00001DD2 00020000                	dd	512	
 25379                                  
 25380                                  p_stack_count:
 25381 00001DD6 0000                    	dw	0	; local variable
 25382                                  p_stack_size:
 25383 00001DD8 0000                    	dw	0	; local variable
 25384                                  
 25385                                  ;-----------------------------------------------------------------------
 25386                                  
 25387                                  	; 27/10/2022
 25388                                  
 25389                                  ; multitrack = [ on | off ]
 25390                                  
 25391                                  ;mtrk_parms p_parms <mtrk_parmsx>
 25392                                  mtrk_parms:
 25393 00001DDA [DF1D]                  	dw	mtrk_parmsx
 25394 00001DDC 01                      	db	1
 25395 00001DDD 01                      	db	1
 25396 00001DDE 3B                      	db	';'
 25397                                  
 25398                                  mtrk_parmsx:
 25399 00001DDF 0101[E51D]              	dw	101h,mtrk_pos	; min,max = 1 positional
 25400 00001DE3 00                      	db	0		; no switches
 25401 00001DE4 00                      	db	0		; no keywords
 25402                                  
 25403                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25404                                  mtrk_pos:
 25405 00001DE5 0020                    	dw	2000h
 25406 00001DE7 0000                    	dw	0
 25407 00001DE9 [CE1C]                  	dw	result_val	
 25408 00001DEB [EA1C]                  	dw	on_off_string
 25409 00001DED 00                      	db	0
 25410                                  
 25411 00001DEE 00                      p_mtrk:	db	0		; local variable
 25412                                  
 25413                                  ;-----------------------------------------------------------------------
 25414                                  
 25415                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25416                                  	; (SYSINIT:20B2h)
 25417                                  
 25418                                  ; switches=/k
 25419                                  
 25420                                  ;swit_parms p_parms <swit_parmsx>
 25421                                  swit_parms:
 25422 00001DEF [F41D]                  	dw	swit_parmsx
 25423 00001DF1 01                      	db	1
 25424 00001DF2 01                      	db	1
 25425 00001DF3 3B                      	db	';'
 25426                                  
 25427                                  swit_parmsx:
 25428 00001DF4 0000                    	dw	0		; no positionals
 25429                                  	;db	5               ; # of switches
 25430                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25431 00001DF6 03                      	db	3
 25432 00001DF7 [FE1D]                  	dw	swit_k_ctrl	; /k control
 25433                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 25434                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 25435 00001DF9 [0A1E]                  	dw	swit_t_ctrl     ; /t control
 25436 00001DFB [161E]                  	dw	swit_w_ctrl     ; /w control
 25437 00001DFD 00                      	db	0		; no keywords
 25438                                  
 25439                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25440                                  swit_k_ctrl:
 25441 00001DFE 00000000[CE1C]-         	dw	0,0,result_val,noval
 25441 00001E04 [CD1C]             
 25442 00001E06 01                      	db	1
 25443 00001E07 2F4B00                  swit_k:	db	'/K',0
 25444                                  
 25445                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25446                                  ;
 25447                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25448                                  ;swit_n_ctrl:
 25449                                  ;	dw	0,0,result_val,noval
 25450                                  ;	db	1
 25451                                  ;swit_n: db	'/N',0
 25452                                  ;
 25453                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25454                                  ;swit_f_ctrl:
 25455                                  ;	dw	0,0,result_val,noval
 25456                                  ;	db	1
 25457                                  ;swit_f: db 	'/F',0
 25458                                  
 25459                                  	; 27/10/2022
 25460                                  
 25461                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25462                                  swit_t_ctrl:
 25463 00001E0A 00000000[CE1C]-         	dw	0,0,result_val,noval
 25463 00001E10 [CD1C]             
 25464 00001E12 01                      	db	1
 25465 00001E13 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25466                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25467                                  swit_w_ctrl:
 25468 00001E16 00000000[CE1C]-         	dw	0,0,result_val,noval
 25468 00001E1C [CD1C]             
 25469 00001E1E 01                      	db	1
 25470 00001E1F 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25471                                  
 25472                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25473                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25474                                  ;   in the above table to prevent the parsing code from complaining about them
 25475                                  
 25476 00001E22 00                      p_swit_k:	db     0	; local variable
 25477 00001E23 00                      p_swit_t:	db     0	; local variable			M059
 25478 00001E24 00                      p_swit_w:	db     0	; local variable			M063
 25479                                  
 25480                                  ;-----------------------------------------------------------------------
 25481                                  
 25482                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25483                                  	; (SYSINIT:20E8h)
 25484                                  
 25485                                  ; DOS = [ high | low ]
 25486                                  
 25487                                  ;dos_parms p_parms  <dos_parmsx>
 25488                                  dos_parms:
 25489 00001E25 [2A1E]                  	dw	dos_parmsx
 25490 00001E27 01                      	db	1
 25491 00001E28 01                      	db	1
 25492 00001E29 3B                      	db	';'
 25493                                  dos_parmsx:
 25494 00001E2A 01                      	db	1		; min parameters
 25495 00001E2B 02                      	db	2		; max parameters
 25496 00001E2C [321E]                  	dw	dos_pos		; 
 25497 00001E2E [321E]                  	dw	dos_pos		; 
 25498 00001E30 00                      	db	0		; no switches
 25499 00001E31 00                      	db	0		; no keywords
 25500                                  
 25501                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25502                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25503                                  dos_pos:
 25504 00001E32 00200000[CE1C]-         	dw	2000h,0,result_val,dos_strings
 25504 00001E38 [441E]             
 25505 00001E3A 00                      	db	0
 25506 00001E3B 00200000[CE1C]-         	dw	2000h,0,result_val,dos_strings
 25506 00001E41 [441E]             
 25507 00001E43 00                      	db	0	
 25508                                  
 25509                                  dos_strings:	;label	byte
 25510 00001E44 03                      	db	3		; signals that there is a string choice
 25511 00001E45 00                      	db	0		; no range definition
 25512 00001E46 00                      	db	0		; no numeric values choice
 25513 00001E47 04                      	db	4		; 4 strings for choice
 25514 00001E48 01                      	db	1		; the 1st string tag
 25515 00001E49 [541E]                  	dw	hi_string
 25516 00001E4B 02                      	db	2		; the 2nd string tag
 25517 00001E4C [591E]                  	dw	lo_string
 25518 00001E4E 03                      	db	3
 25519 00001E4F [5D1E]                  	dw	umb_string
 25520 00001E51 04                      	db	4
 25521 00001E52 [611E]                  	dw	noumb_string
 25522                                  
 25523 00001E54 4849474800              hi_string:	db	"HIGH",0
 25524 00001E59 4C4F5700                lo_string:	db	"LOW",0
 25525 00001E5D 554D4200                umb_string:	db	"UMB",0
 25526 00001E61 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25527                                  
 25528 00001E67 00                      p_dos_hi:	db	0	; local variable
 25529                                  				; BUGBUG : I dont know whether PARSER uses
 25530                                  				;          this variable or not
 25531                                  
 25532                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25533                                  
 25534                                  %if 0
 25535                                  
 25536                                  ;****************************************************************** RICHID ****
 25537                                  
 25538                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25539                                  
 25540                                  ; 30/03/2019 - Retro DOS v4.0
 25541                                  ;------------------------------------------------------------------------------
 25542                                  
 25543                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25544                                  ;
 25545                                  ;   Date:     May 14, 1992
 25546                                  ;
 25547                                  ;******************************************************************************
 25548                                  ;
 25549                                  ;   Modification log:
 25550                                  ;
 25551                                  ;     DATE    WHO      DESCRIPTION
 25552                                  ;   --------  -------  --------------------------------------------------------
 25553                                  ;   05/14/92  t-richj  Original
 25554                                  ;   06/21/92  t-richj  Final revisions before check-in
 25555                                  ;
 25556                                  ;******************************************************************************
 25557                                  ;
 25558                                  ; There are two primary definitions which need to be made, selectively, before
 25559                                  ; this include file should be used.  These are:
 25560                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25561                                  ;                declared as external.  Otherwise, variables will be declared
 25562                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25563                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25564                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25565                                  ;                (as only one module, sysconf.asm, includes this file).
 25566                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25567                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25568                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25569                                  ;
 25570                                  ;******************************************************************************
 25571                                  
 25572                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25573                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25574                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25575                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25576                                  ; space problem (it's just such a nice round number, eh?).
 25577                                  
 25578                                  MAXUMB	equ	16
 25579                                  
 25580                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25581                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25582                                  
 25583                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25584                                  SystemPSPOwner	equ	8
 25585                                  ;JapanPSPOwner	equ	9
 25586                                  
 25587                                  ; for LoadHigh and DeviceHigh:
 25588                                  ;
 25589                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25590                                  ;	          UnHideUMBs().
 25591                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25592                                  ;	           line.
 25593                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25594                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25595                                  ;	          given a command-line like "/L:3,500;4"
 25596                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25597                                  ;	          matching its index number was specified on the command-line;
 25598                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25599                                  ;	          will be set to 1.  All others will be set to 0.
 25600                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25601                                  ;	          specified by the user for a UMB (in the above example, all
 25602                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25603                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25604                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25605                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25606                                  ;	           for details).
 25607                                  
 25608                                  fInHigh:  db	0
 25609                                  fUmbTiny: db	0
 25610                                  SegLoad:  dw	0
 25611                                  UmbLoad:  db	0
 25612                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25613                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25614                                  fm_umb:   db	0
 25615                                  fm_strat: db	0
 25616                                  fm_argc:  db	0	
 25617                                  
 25618                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25619                                  ; UmbLoad is set to the UMB number given.
 25620                                  
 25621                                  UNSPECIFIED	equ	-1
 25622                                  
 25623                                  %endif
 25624                                  
 25625                                  ;****************************************************************** RICHID ****
 25626                                  
 25627                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25628                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25629                                  
 25630                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25631                                  ; (SYSINIT:212Bh)	
 25632                                  
 25633                                  		;public	DevEntry
 25634                                  
 25635 00001E68 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25636 00001E6A 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25637 00001E6C 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25638 00001E6E 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25639 00001E72 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25640                                  ; 27/10/2022 
 25641                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25642                                  ;
 25643 00001E76 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25644 00001E77 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25645 00001E79 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25646 00001E7B 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25647                                  ;
 25648 00001E7D 00000000                DevXMSAddr:	dd	0
 25649                                  ;
 25650 00001E81 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25651 00001E83 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25652                                  ;
 25653 00001E85 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25654                                  				;  is being loaded into UMB
 25655 00001E86 0000                    DevSizeOption:	dw	0	; SIZE= option
 25656                                  ;
 25657 00001E88 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25658 00001E89 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25659 00001E8B 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25660                                  ;
 25661 00001E93 00                      FirstUMBLinked:	db	0
 25662 00001E94 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25663 00001E96 00000000                DevCmdLine:	dd	0	; Current Command line
 25664 00001E9A 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25665                                  				; to use the file name in the command line
 25666                                  ;
 25667                                  ;	ifdef	dblspace_hooks
 25668                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25669                                  ;	endif
 25670                                  
 25671                                  ; ===========================================================================
 25672                                  
 25673                                  ; 31/03/2019 - Retro DOS v4.0
 25674                                  
 25675                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25676                                  ; (SYSINIT:215Eh)
 25677                                  
 25678                                  ;----------------------------------------------------------------------------
 25679                                  ;
 25680                                  ; procedure : doconf
 25681                                  ;
 25682                                  ;             Config file is parsed initially with this routine. For the
 25683                                  ;             Subsequent passes 'multi_pass' entry is used .
 25684                                  ;
 25685                                  ;----------------------------------------------------------------------------
 25686                                  
 25687                                  	; 27/10/2022
 25688                                  doconf:
 25689 00001E9B 0E                      	push	cs
 25690 00001E9C 1F                      	pop	ds
 25691                                  
 25692 00001E9D B80037                  	mov	ax,3700h
 25693                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25694 00001EA0 CD21                    	int	21h
 25695 00001EA2 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25696                                  
 25697                                  ; 27/10/2022
 25698                                  ;;ifdef	MULTI_CONFIG
 25699                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25700                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25701                                  ;;endif	;MULTI_CONFIG
 25702                                  
 25703 00001EA6 BA[1433]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25704 00001EA9 B8003D                  	mov	ax,3D00h
 25705                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25706 00001EAC F9                      	stc				;in case of int 24
 25707 00001EAD CD21                    	int	21h			;function request
 25708 00001EAF 7306                    	jnc	short noprob		; brif opened okay
 25709                                  
 25710                                  ; 27/10/2022
 25711                                  ;;ifdef	MULTI_CONFIG
 25712                                  ;      	call	kbd_read		; we still want to give the guy
 25713                                  ;					; a chance to select clean boot!
 25714                                  ;;endif					; (ie, no autoexec.bat processing)
 25715 00001EB1 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25716 00001EB6 C3                      	retn
 25717                                  noprob: 				;get file size (note < 64k!!)
 25718 00001EB7 89C3                    	mov	bx,ax  ; File handle
 25719 00001EB9 31C9                    	xor	cx,cx
 25720 00001EBB 31D2                    	xor	dx,dx
 25721                                  	;mov	ax,4202h
 25722 00001EBD B80242                  	mov	ax,(LSEEK<<8)|2
 25723 00001EC0 CD21                    	int	21h
 25724 00001EC2 A3[D203]                	mov	[count],ax
 25725                                  
 25726 00001EC5 31D2                    	xor	dx,dx
 25727                                  	;mov	ax,4200h
 25728 00001EC7 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25729 00001ECA CD21                    	int	21h
 25730                                  
 25731                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25732                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25733 00001ECC 8B16[A102]              	mov	dx,[top_of_cdss] 
 25734                                  
 25735 00001ED0 A1[D203]                	mov	ax,[count]
 25736 00001ED3 A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25737 00001ED6 E8D3F1                  	call	ParaRound
 25738 00001ED9 29C2                    	sub	dx,ax
 25739                                  
 25740                                  ; 27/10/2022
 25741                                  ;;ifdef	MULTI_CONFIG
 25742                                  ;;
 25743                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25744                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25745                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25746                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25747                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25748                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25749                                  ;;  of extra space, so here we account for it (the worst case of course is
 25750                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25751                                  ;;
 25752                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25753                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25754                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25755                                  ;;endif	;MULTI_CONFIG
 25756                                  
 25757 00001EDB 83EA11                  	sub	dx,11h			;room for header
 25758                                  	
 25759                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25760                                  	;mov	[CONFBOT],dx
 25761                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25762 00001EDE 8916[A102]              	mov	[top_of_cdss],dx
 25763 00001EE2 E8E8EC                  	call    TempCDS 
 25764                                  	; 11/12/2022
 25765                                  	; ds <> cs 
 25766 00001EE5 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25767                                   
 25768 00001EEA 8EDA                    	mov	ds,dx
 25769 00001EEC 8EC2                    	mov	es,dx
 25770                                  
 25771 00001EEE 31D2                    	xor	dx,dx
 25772 00001EF0 2E8B0E[D203]            	mov	cx,[cs:count]
 25773 00001EF5 B43F                    	mov	ah,3Fh
 25774                                  	;mov	ah,READ  ; 3Fh
 25775 00001EF7 F9                      	stc				;in case of int 24
 25776 00001EF8 CD21                    	int	21h			;function request
 25777 00001EFA 9C                      	pushf
 25778                                  
 25779                                  ; find the eof mark in the file. if present,then trim length.
 25780                                  
 25781 00001EFB 50                      	push	ax
 25782 00001EFC 57                      	push	di
 25783 00001EFD 51                      	push	cx
 25784 00001EFE B01A                    	mov	al,1Ah			; eof mark
 25785 00001F00 89D7                    	mov	di,dx			; point to buffer
 25786 00001F02 E305                    	jcxz	puteol			; no chars
 25787 00001F04 F2AE                    	repnz	scasb			; find end
 25788 00001F06 7501                    	jnz	short puteol		; none found and count exhausted
 25789                                  
 25790                                  ; we found a 1a. back up
 25791                                  
 25792 00001F08 4F                      	dec	di			; backup past 1Ah
 25793                                  
 25794                                  ;  just for the halibut, stick in an extra eol
 25795                                  
 25796                                  puteol:
 25797 00001F09 B00D                    	mov	al,cr ; 0Dh
 25798 00001F0B AA                      	stosb
 25799 00001F0C B00A                    	mov	al,lf  ;0Ah
 25800 00001F0E AA                      	stosb
 25801 00001F0F 29D7                    	sub	di,dx			; difference moved
 25802                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25803                                  	;mov	[cs:count],di		; new count
 25804                                  
 25805                                  	; 11/12/2022	
 25806                                  	; 31/03/2019 - Retro DOS v4.0
 25807 00001F11 0E                      	push	cs
 25808 00001F12 1F                      	pop	ds
 25809                                  
 25810 00001F13 893E[D203]              	mov	[count],di		; new count
 25811                                  
 25812 00001F17 59                      	pop	cx
 25813 00001F18 5F                      	pop	di
 25814 00001F19 58                      	pop	ax
 25815                                  
 25816                                  	; 11/12/2022
 25817                                  	; 27/10/2022
 25818                                  	;push	cs
 25819                                  	;pop	ds
 25820                                  
 25821 00001F1A 50                      	push	ax
 25822                                  	;mov	ah,CLOSE
 25823 00001F1B B43E                    	mov	ah,3Eh
 25824 00001F1D CD21                    	int	21h
 25825 00001F1F 58                      	pop	ax
 25826 00001F20 9D                      	popf
 25827 00001F21 7204                    	jc	short conferr 		;if not we've got a problem
 25828 00001F23 39C1                    	cmp	cx,ax
 25829 00001F25 742C                    	jz	short getcom		;couldn't read the file
 25830                                  conferr:
 25831 00001F27 BA[1433]                	mov	dx,config		;want to print config error
 25832 00001F2A E83E13                  	call	badfil
 25833                                  endconv:
 25834 00001F2D C3                      	retn
 25835                                  
 25836                                  ;----------------------------------------------------------------------------
 25837                                  ;
 25838                                  ; entry : multi_pass
 25839                                  ;
 25840                                  ;             called to execute device=,install= commands
 25841                                  ;
 25842                                  ;----------------------------------------------------------------------------
 25843                                  
 25844                                  	; 27/10/2022
 25845                                  multi_pass:
 25846 00001F2E 0E                      	push	cs
 25847 00001F2F 1F                      	pop	ds
 25848                                  
 25849 00001F30 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25850                                  ;jae_endconv:
 25851 00001F35 73F6                    	jae	short endconv 		; do nothing. just return.
 25852                                  
 25853                                  	;push	word [CONFBOT]
 25854                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25855 00001F37 FF36[A102]              	push	word [top_of_cdss]
 25856 00001F3B 07                      	pop	es			; es -> confbot
 25857                                  
 25858 00001F3C 8B36[D403]              	mov	si,[org_count]
 25859 00001F40 8936[D203]              	mov	[count],si		; set count
 25860 00001F44 31F6                    	xor	si,si ; 0
 25861 00001F46 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25862 00001F4A 8936[2B03]                      mov     [linecount],si		; reset linecount
 25863                                  
 25864 00001F4E E89E10                  	call	getchr
 25865 00001F51 EB06                    	jmp	short conflp
 25866                                  
 25867                                  getcom:
 25868 00001F53 E8820E                          call    organize                ; organize the file
 25869 00001F56 E89610                  	call	getchr
 25870                                  conflp: 
 25871 00001F59 72D2                    	jc	short endconv
 25872                                  
 25873 00001F5B FF06[2B03]                      inc     word [linecount]	; increase linecount
 25874                                  
 25875 00001F5F C606[1514]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25876 00001F64 C606[1814]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25877 00001F69 3C0A                    	cmp	al,lf			; linefeed?
 25878 00001F6B 7416                    	je	short blank_line	;  then ignore this line.
 25879                                  
 25880                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25881                                  %if 0
 25882                                  
 25883                                  ;ifdef	MULTI_CONFIG
 25884                                  
 25885                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25886                                  ;   number immediately following it....
 25887                                  
 25888                                          mov     [config_cmd],al         ; save original command code
 25889                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25890                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25891                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25892                                          je      short not_final		; no, line number is not embedded
 25893                                  
 25894                                          push    ax                      ;
 25895                                          call    getchr                  ; ignore end-of-image errors,
 25896                                          mov     ah,al                   ; because if there's an error
 25897                                          call    getchr                  ; fetching the line number that's
 25898                                          xchg    al,ah                   ; supposed to be there, the next
 25899                                          mov     [linecount],ax          ; getchr call will get the same error
 25900                                          pop     ax
 25901                                  ;
 25902                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25903                                  ;   which to obtain its original program name, it grovels through all of
 25904                                  ;   memory to find the filename that was used to exec it; it wants to find
 25905                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25906                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25907                                  ;   immediately before the filename, but since we are now storing line # info
 25908                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25909                                  ;   spot.
 25910                                  ;
 25911                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25912                                  ;   over the line number info, since we no longer need that info anyway. This
 25913                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25914                                  ;   retrieved.
 25915                                  ;
 25916                                          cmp	byte [multi_pass_id],2	; final pass?
 25917                                          jb	short not_final		; no
 25918                                          ;test	word [install_flag],have_install_cmd
 25919                                  	test	byte [install_flag],have_install_cmd ; 1
 25920                                          jz	short final		; no install cmds, so yes it is
 25921                                          cmp	byte [multi_pass_id],3	; final pass?
 25922                                          jb	short not_final		; no
 25923                                  final:                                  ;
 25924                                  	mov	[es:si],al		; save backward-compatible command code
 25925                                  not_final:                              ;
 25926                                  ;endif
 25927                                  
 25928                                  %endif
 25929 00001F6D 88C4                    	mov	ah,al
 25930 00001F6F E87D10                  	call	getchr
 25931 00001F72 7314                    	jnc	short tryi
 25932                                  
 25933 00001F74 803E[4903]02            	cmp	byte [multi_pass_id],2
 25934                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25935                                  	; 27/10/2022
 25936 00001F79 73B2                    	jnb	short endconv	
 25937 00001F7B E90107                  	jmp	badop
 25938                                  	
 25939                                  coff:	
 25940                                  	; 11/12/2022
 25941                                  	; ds = cs
 25942                                  	;push	cs
 25943                                  	;pop	ds
 25944 00001F7E E86510                  	call	newline
 25945 00001F81 EBD6                    	jmp	short conflp	; 13/05/2019
 25946                                  
 25947                                  blank_line:
 25948 00001F83 E86910                  	call	getchr
 25949 00001F86 EBD1                    	jmp	short conflp
 25950                                  
 25951                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25952                                  ; 11/12/2022
 25953                                  ; (there is not a jump or call to here from anywhere!)
 25954                                  ;coff_p:
 25955                                  	;push	cs
 25956                                  	;pop	ds
 25957                                  
 25958                                  ;to handle install= commands,we are going to use multi-pass.
 25959                                  ;the first pass handles the other commands and only set install_flag when
 25960                                  ;it finds any install command. the second pass will only handle the
 25961                                  ;install= command.
 25962                                  
 25963                                  ;------------------------------------------------------------------------------
 25964                                  ;install command
 25965                                  ;------------------------------------------------------------------------------
 25966                                  
 25967                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25968                                  	; (SYSINIT:2250h)
 25969                                  tryi:
 25970 00001F88 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25971 00001F8D 7503                    	jne	short not_init_pass
 25972 00001F8F E92301                  	jmp	multi_try_doshi
 25973                                  not_init_pass:
 25974 00001F92 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25975                                          ; 11/12/2022
 25976                                  	;je	short multi_pass_coff2	; now it is NOPs
 25977 00001F97 74E5                    	je	short coff
 25978                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25979                                  	;je	short multi_pass_coff	
 25980                                  					; This pass can be made use of if
 25981                                  					; we want do some config.sys process
 25982                                  					; after device drivers are loaded
 25983                                  					; and before install= commands
 25984                                  					; are processed
 25985                                  
 25986 00001F99 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25987 00001F9E 7411                    	je	short multi_try_i
 25988 00001FA0 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25989                                  	; 11/12/2022
 25990                                  	;je	short multi_pass_coff2
 25991 00001FA3 74D9                    	je	short coff
 25992                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25993                                  	;je	short multi_pass_coff	
 25994                                  
 25995                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25996                                  ;       but don't process them now.        
 25997                                          
 25998 00001FA5 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25999                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 26000                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26001 00001FA8 752A                    	jne	short tryb	
 26002                                  	
 26003                                  	;or	word [install_flag],have_install_cmd ; set the flag
 26004 00001FAA 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 26005                                  multi_pass_coff2:
 26006 00001FAF EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 26007                                  
 26008                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26009                                  ;precheck_installhigh:
 26010                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 26011                                  ;       jne     short tryb		; carry on with normal processing
 26012                                  ;	;or	word [install_flag],have_install_cmd
 26013                                  ;	or	byte [install_flag],have_install_cmd ; 1
 26014                                  ;       jmp	short coff
 26015                                  
 26016                                  multi_try_i:
 26017 00001FB1 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 26018                                  	;jne	short multi_try_n	; no, check for installhigh
 26019                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26020 00001FB4 7505                    	jne	short multi_pass_filter
 26021                                  
 26022                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26023                                  ;;ifdef	MULTI_CONFIG
 26024                                  ;       call    query_user              ; query the user if config_cmd
 26025                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26026                                  ;;endif
 26027                                  
 26028 00001FB6 E873F0                  	call	do_install_exec 	;install it.
 26029 00001FB9 EBC3                    	jmp	short coff		;to handle next install= command.
 26030                                  
 26031                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26032                                  %if 0
 26033                                  
 26034                                  multi_try_n:
 26035                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 26036                                          jne	short multi_pass_filter	; no. ignore this.
 26037                                  ;ifdef	MULTI_CONFIG
 26038                                          call    query_user              ; query the user if config_cmd
 26039                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26040                                  ;endif
 26041                                  
 26042                                  ;       The memory environment is in its normal DOS state, so do
 26043                                  ;       the standard calls to set the alloc strategy for loading high
 26044                                  
 26045                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 26046                                  	int	21h			;get alloc strategy
 26047                                  	mov	bx,ax
 26048                                          push    bx                      ; save for the return
 26049                                  
 26050                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 26051                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 26052                                  	int	21h			;set alloc strategy
 26053                                  
 26054                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 26055                                          int     21h                     ; get link state
 26056                                          xor     ah,ah                   ; clear top byte
 26057                                          push    ax                      ; save for return
 26058                                  
 26059                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 26060                                  	mov	bx,1
 26061                                  	int	21h			;link in UMBs
 26062                                  
 26063                                  	call	do_install_exec 	;install it.
 26064                                  
 26065                                          mov     ax,(ALLOCOPER<<8)|3
 26066                                          pop     bx                      ; recover original link state
 26067                                          int     21h
 26068                                          pop     bx                      ; recover original alloc strategy
 26069                                          mov     ax,(ALLOCOPER<<8)|1
 26070                                          int     21h
 26071                                  
 26072                                  	jmp	coff			;to handle next install= command.
 26073                                  
 26074                                  %endif
 26075                                  
 26076                                  multi_pass_filter:
 26077 00001FBB 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 26078 00001FBE 740A                    	je	short multi_pass_adjust
 26079 00001FC0 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 26080 00001FC3 7405                    	je	short multi_pass_adjust
 26081 00001FC5 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 26082 00001FC8 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 26083                                  
 26084                                  multi_pass_adjust:			; these commands need to
 26085 00001FCA FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 26086 00001FCE FF06[D203]              	inc	word [count]		;  for newline proc.
 26087                                  
 26088                                  multi_pass_coff:
 26089                                  	; 11/12/2022
 26090 00001FD2 EBAA                    	jmp	short coff		; to handle next install= commands.
 26091                                  
 26092                                  ;------------------------------------------------------------------------------
 26093                                  ; buffer command
 26094                                  ;------------------------------------------------------------------------------
 26095                                  
 26096                                  ;******************************************************************************
 26097                                  ;									      *
 26098                                  ; function: parse the parameters of buffers= command.			      *
 26099                                  ;									      *
 26100                                  ; input :								      *
 26101                                  ;	es:si -> parameters in command line.				      *
 26102                                  ; output:								      *
 26103                                  ;	buffers set							      *
 26104                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 26105                                  ;	h_buffers set if secondary buffer cache specified.		      *
 26106                                  ;									      *
 26107                                  ; subroutines to be called:						      *
 26108                                  ;	sysinit_parse							      *
 26109                                  ; logic:								      *
 26110                                  ; {									      *
 26111                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 26112                                  ;	set dx,cx to 0; 						      *
 26113                                  ;	reset buffer_slash_x;						      *
 26114                                  ;	while (end of command line)					      *
 26115                                  ;	{ sysinit_parse;						      *
 26116                                  ;	  if (no error) then						      *
 26117                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 26118                                  ;		    buffer_slash_x = 1					      *
 26119                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 26120                                  ;			  buffers = result_val._$P_picked_val;		      *
 26121                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 26122                                  ;	  else	{show error message;error exit} 			      *
 26123                                  ;	};								      *
 26124                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 26125                                  ; };									      *
 26126                                  ;									      *
 26127                                  ;******************************************************************************
 26128                                  
 26129                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26130                                  	; (SYSINIT:229Ch)
 26131                                  tryb:
 26132 00001FD4 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 26133 00001FD7 7557                    	jne	short tryc
 26134                                  
 26135                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26136                                  ;;ifdef	MULTI_CONFIG
 26137                                  ;       call    query_user              ; query the user if config_cmd
 26138                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 26139                                  ;;endif
 26140                                  
 26141                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26142                                  	; 18/12/2022
 26143 00001FD9 31C9                    	xor	cx,cx
 26144                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 26145 00001FDB 880E[CC1C]              	mov	[p_buffer_slash_x],cl ; 0
 26146                                  
 26147 00001FDF BF[851C]                	mov	di,buf_parms
 26148                                  	;xor	cx,cx	; 18/12/2022
 26149                                  	; 04/01/2023
 26150                                  	;mov	dx,cx
 26151                                  do7:
 26152 00001FE2 E87B06                  	call	sysinit_parse
 26153 00001FE5 7303                    	jnc	short if7		; parse error,
 26154                                  	; 04/01/2023
 26155                                  	;call	badparm_p		;  and show messages and end the search loop.
 26156                                  	;;jmp	short sr7
 26157                                  	; 31/12/2022
 26158                                  ;sr7:
 26159                                  	;jmp	coff
 26160                                  	; 04/01/2023
 26161 00001FE7 E9F405                  	jmp	badparm_p_coff
 26162                                  if7:
 26163 00001FEA 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26164 00001FED 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 26165                                  	;cmp	word [result_val_swoff],switch_x
 26166 00001FEF 813E[D01C][C51C]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 26167                                  	;jne	short if11
 26168                                  	; 31/12/2022
 26169 00001FF5 74EB                    	je	short do7 ;je short en11
 26170                                  
 26171                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 26172                                  	;jmp	short en11 ; 31/12/2022
 26173                                  if11:
 26174                                  	;mov	ax,[rv_dword]
 26175 00001FF7 A1[D21C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26176 00001FFA 83F901                  	cmp	cx,1
 26177 00001FFD 7505                    	jne	short if13
 26178                                  
 26179 00001FFF A3[C81C]                	mov	[p_buffers],ax
 26180                                  	;jmp	short en11
 26181                                  	; 31/12/2022
 26182 00002002 EBDE                    	jmp	short do7
 26183                                  if13:
 26184 00002004 A3[CA1C]                	mov	[p_h_buffers],ax
 26185                                  en11:
 26186 00002007 EBD9                    	jmp	short do7
 26187                                  en7:
 26188 00002009 833E[C81C]63            	cmp	word [p_buffers],99
 26189 0000200E 760B                    	jbe	short if18
 26190                                  
 26191                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26192                                  ;	jne	short if18
 26193                                  
 26194 00002010 E87806                  	call	badparm_p
 26195 00002013 C706[CA1C]0000          	mov	word [p_h_buffers],0
 26196 00002019 EB12                    	jmp	short sr7
 26197                                  if18:
 26198 0000201B A1[C81C]                	mov	ax,[p_buffers]	; we don't have any problem.
 26199 0000201E A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26200                                  
 26201 00002021 A1[CA1C]                	mov	ax,[p_h_buffers]
 26202 00002024 A3[9902]                	mov	[h_buffers],ax
 26203                                  
 26204                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26205                                  ;	mov	[buffer_slash_x],al
 26206                                  
 26207 00002027 A1[2B03]                	mov	ax,[linecount]
 26208 0000202A A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26209                                  	; 31/12/2022
 26210                                  	;jmp	short sr7
 26211                                  	; 04/01/2023
 26212                                  sr7:
 26213 0000202D E94EFF                  	jmp	coff
 26214                                  
 26215                                  ;------------------------------------------------------------------------------
 26216                                  ; break command
 26217                                  ;------------------------------------------------------------------------------
 26218                                  
 26219                                  ;****************************************************************************
 26220                                  ;									    *
 26221                                  ; function: parse the parameters of break = command.			    *
 26222                                  ;									    *
 26223                                  ; input :								    *
 26224                                  ;	es:si -> parameters in command line.				    *
 26225                                  ; output:								    *
 26226                                  ;	turn the control-c check on or off.				    *
 26227                                  ;									    *
 26228                                  ; subroutines to be called:						    *
 26229                                  ;	sysinit_parse							    *
 26230                                  ; logic:								    *
 26231                                  ; {									    *
 26232                                  ;	set di to brk_parms;						    *
 26233                                  ;	set dx,cx to 0; 						    *
 26234                                  ;	while (end of command line)					    *
 26235                                  ;	{ sysinit_parse;						    *
 26236                                  ;	  if (no error) then						    *
 26237                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 26238                                  ;		   set p_ctrl_break,on;					    *
 26239                                  ;	       else					  /*off 	 */ *
 26240                                  ;		   set p_ctrl_break,off;				    *
 26241                                  ;	  else {show message;error_exit};				    *
 26242                                  ;	};								    *
 26243                                  ;	if (no error) then						    *
 26244                                  ;	   dos function call to set ctrl_break check according to	    *
 26245                                  ; };									    *
 26246                                  ;									    *
 26247                                  ;****************************************************************************
 26248                                  
 26249                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26250                                  	; (SYSINIT:22FFh)
 26251                                  tryc:
 26252 00002030 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 26253 00002033 7534                    	jne	short trym
 26254                                  
 26255                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26256                                  ;;ifdef MULTI_CONFIG
 26257                                  ;       call    query_user              ; query the user if config_cmd
 26258                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 26259                                  ;;endif
 26260 00002035 BF[D61C]                	mov	di,brk_parms
 26261 00002038 31C9                    	xor	cx,cx
 26262                                  	; 04/01/2023
 26263                                  	;mov	dx,cx
 26264                                  do22:
 26265 0000203A E82306                  	call	sysinit_parse
 26266 0000203D 7303                    	jnc	short if22		; parse error
 26267                                  	;call	badparm_p		;  show message and end the search loop.
 26268                                  	;;jmp	short sr22
 26269                                  	; 31/12/2022
 26270                                  ;sr22:
 26271                                  	;jmp	coff
 26272                                  	; 04/01/2023
 26273 0000203F E99C05                  	jmp	badparm_p_coff
 26274                                  if22:
 26275 00002042 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26276 00002045 7415                    	je	short en22		; then end the $endloop
 26277                                  
 26278                                  	;cmp	byte [result_val_itag],1
 26279 00002047 803E[CF1C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26280 0000204C 7507                    	jne	short if26
 26281                                  
 26282 0000204E C606[FB1C]01            	mov	byte [p_ctrl_break],1	; turn it on
 26283                                  	;jmp	short en26
 26284                                  	; 31/12/2022
 26285 00002053 EBE5                    	jmp	short do22
 26286                                  if26:
 26287 00002055 C606[FB1C]00            	mov	byte [p_ctrl_break],0	; turn it off
 26288                                  en26:
 26289 0000205A EBDE                    	jmp	short do22		; we actually set the ctrl break
 26290                                  en22:
 26291 0000205C B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 26292 0000205E B001                    	mov	al,1
 26293 00002060 8A16[FB1C]              	mov	dl,[p_ctrl_break]
 26294 00002064 CD21                    	int	21h
 26295                                  	; 31/12/2022
 26296                                  	;jmp	short sr22
 26297                                  	; 04/01/2023
 26298                                  sr22:
 26299 00002066 E915FF                  	jmp	coff
 26300                                  
 26301                                  ;------------------------------------------------------------------------------
 26302                                  ; multitrack command
 26303                                  ;------------------------------------------------------------------------------
 26304                                  
 26305                                  ;******************************************************************************
 26306                                  ;									      *
 26307                                  ; function: parse the parameters of multitrack= command.		      *
 26308                                  ;									      *
 26309                                  ; input :								      *
 26310                                  ;	es:si -> parameters in command line.				      *
 26311                                  ; output:								      *
 26312                                  ;	turn multrk_flag on or off.					      *
 26313                                  ;									      *
 26314                                  ; subroutines to be called:						      *
 26315                                  ;	sysinit_parse							      *
 26316                                  ; logic:								      *
 26317                                  ; {									      *
 26318                                  ;	set di to brk_parms;						      *
 26319                                  ;	set dx,cx to 0; 						      *
 26320                                  ;	while (end of command line)					      *
 26321                                  ;	{ sysinit_parse;						      *
 26322                                  ;	  if (no error) then						      *
 26323                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 26324                                  ;		   set p_mtrk,on;					      *
 26325                                  ;	       else					  /*off 	 */   *
 26326                                  ;		   set p_mtrk,off;					      *
 26327                                  ;	  else {show message;error_exit};				      *
 26328                                  ;	};								      *
 26329                                  ;	if (no error) then						      *
 26330                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 26331                                  ;									      *
 26332                                  ; };									      *
 26333                                  ;									      *
 26334                                  ;******************************************************************************
 26335                                  
 26336                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26337                                  trym:
 26338 00002069 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 26339 0000206C 7569                    	jne	short tryu
 26340                                  
 26341                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26342                                  ;;ifdef	MULTI_CONFIG
 26343                                  ;       call    query_user      ; query the user if config_cmd
 26344                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 26345                                  ;;endif
 26346 0000206E BF[DA1D]                	mov	di,mtrk_parms
 26347 00002071 31C9                    	xor	cx,cx
 26348                                  	; 04/01/2023
 26349                                  	;mov	dx,cx
 26350                                  do31:
 26351 00002073 E8EA05                  	call	sysinit_parse
 26352 00002076 7303                    	jnc	short if31	; parse error
 26353                                  	;call	badparm_p	;  show message and end the search loop.
 26354                                  	;;jmp	short sr31
 26355                                  	; 31/12/2022
 26356                                  ;sr31:
 26357                                  	;jmp	coff
 26358                                  	; 04/01/2023
 26359 00002078 E96305                  	jmp	badparm_p_coff
 26360                                  if31:
 26361 0000207B 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 26362 0000207E 7415                    	je	short en31	; then end the $endloop
 26363                                  
 26364                                  	;cmp	byte [result_val_itag],1
 26365 00002080 803E[CF1C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 26366 00002085 7507                    	jne	short if35
 26367                                  
 26368 00002087 C606[EE1D]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 26369                                  	;jmp	short en35
 26370                                  	; 31/12/2022
 26371 0000208C EBE5                    	jmp	short do31
 26372                                  if35:
 26373 0000208E C606[EE1D]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 26374                                  en35:
 26375 00002093 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 26376                                  en31:
 26377 00002095 1E                      	push	ds
 26378                                  	;;mov	ax,Bios_Data ; 70h
 26379                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 26380                                  	; 21/10/2022
 26381 00002096 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 26382 00002099 8ED8                    	mov	ds,ax
 26383                                  
 26384 0000209B 2E803E[EE1D]00          	cmp	byte [cs:p_mtrk],0
 26385 000020A1 7508                    	jne	short if39
 26386                                  
 26387 000020A3 C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 26388 000020A9 EB06                    	jmp	short en39
 26389                                  if39:
 26390 000020AB C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 26391                                  en39:
 26392 000020B1 1F                      	pop	ds
 26393                                  	; 31/12/2022
 26394                                  	;jmp	short sr31
 26395                                  	; 04/01/2023
 26396                                  sr31:
 26397 000020B2 E9C9FE                  	jmp	coff
 26398                                  
 26399                                  ;----------------------------------------------------------------------------
 26400                                  ; DOS=HIGH/LOW command
 26401                                  ;----------------------------------------------------------------------------
 26402                                  
 26403                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26404                                  multi_try_doshi:
 26405 000020B5 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 26406 000020B8 7403                    	je	short it_is_h
 26407                                  skip_it:
 26408 000020BA E9FEFE                  	jmp	multi_pass_filter
 26409                                  it_is_h:				; M003 - removed initing DevUMB
 26410                                  					;	 & runhigh
 26411                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26412                                  ;;ifdef	MULTI_CONFIG
 26413                                  ;       call    query_user              ; query the user if config_cmd
 26414                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 26415                                  ;;endif
 26416 000020BD BF[251E]                	mov	di,dos_parms
 26417 000020C0 31C9                    	xor	cx,cx
 26418                                  	; 04/01/2023
 26419                                  	;mov	dx,cx
 26420                                  h_do_parse:
 26421 000020C2 E89B05                  	call	sysinit_parse
 26422 000020C5 7303                    	jnc	short h_parse_ok	; parse error
 26423                                  h_badparm:
 26424                                  	; 04/01/2023
 26425                                  	;call	badparm_p		; show message and end the search loop.
 26426                                  	;;jmp	short h_end
 26427                                  	; 11/12/2022
 26428                                  ;h_end:
 26429                                  	;jmp	coff
 26430                                  	; 04/01/2023
 26431 000020C7 E91405                  	jmp	badparm_p_coff	
 26432                                  h_parse_ok:
 26433 000020CA 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26434 000020CD 7405                    	je	short h_end		; then end the $endloop
 26435 000020CF E81006                  	call	ProcDOS
 26436 000020D2 EBEE                    	jmp	short h_do_parse
 26437                                  	; 11/12/2022
 26438                                  	; 04/01/2023
 26439                                  h_end:
 26440 000020D4 E9A7FE                  	jmp	coff
 26441                                  
 26442                                  ;-----------------------------------------------------------------------------
 26443                                  ; devicehigh command
 26444                                  ;-----------------------------------------------------------------------------
 26445                                  
 26446                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26447                                  tryu:
 26448 000020D7 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26449 000020DA 7539                    	jne	short tryd
 26450                                  
 26451                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26452                                  ;;ifdef	MULTI_CONFIG
 26453                                  ;       call    query_user              ; query the user if config_cmd
 26454                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26455                                  ;;endif
 26456                                  
 26457                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26458                                  ;	call	InitVar
 26459                                  ;	call	ParseSize		; process the size= option
 26460                                  ;	;jnc	short tryu_0
 26461                                  	
 26462                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26463                                  
 26464                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26465                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26466                                  	;mov	[cs:badparm_seg], es
 26467                                  	; 11/12/2022
 26468                                  	; ds = cs
 26469 000020DC 8936[1914]              	mov	[badparm_off], si
 26470 000020E0 8C06[1B14]              	mov	[badparm_seg], es
 26471                                  	;
 26472 000020E4 E86608                  	call	ParseSize
 26473 000020E7 7303                    	jnc	short tryu_2	; 28/10/2022
 26474                                  
 26475                                  	;call	badparm_p
 26476                                  	;jmp	coff
 26477                                  	; 04/01/2023
 26478 000020E9 E9F204                  	jmp	badparm_p_coff
 26479                                  
 26480                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26481                                  ;tryu_0:
 26482                                  ;	mov	ax,[cs:DevSizeOption]
 26483                                  ;	or	ax,ax
 26484                                  ;	jnz	short tryu_2
 26485                                  ;
 26486                                  ;	call	ParseVar
 26487                                  ;	jnc	short tryu_2
 26488                                  ;tryu_1:
 26489                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26490                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26491                                  ;	call	badparm_p		; so all we have to do is choke and
 26492                                  ;	jmp	coff			; die, rather verbosely.
 26493                                  
 26494                                  tryu_2:	
 26495 000020EC 56                      	push	si
 26496 000020ED 06                      	push	es
 26497                                  tryu_3:
 26498 000020EE 268A04                  	mov	al,[es:si]
 26499 000020F1 3C0D                    	cmp	al,cr
 26500 000020F3 740C                    	je	short tryu_4
 26501 000020F5 3C0A                    	cmp	al,lf
 26502 000020F7 7408                    	je	short tryu_4
 26503 000020F9 E8CE0E                  	call	delim
 26504 000020FC 7403                    	jz	short tryu_4
 26505 000020FE 46                      	inc	si
 26506 000020FF EBED                    	jmp	short tryu_3
 26507                                  tryu_4:	
 26508                                  	; 11/12/2022
 26509                                  	; ds = cs
 26510 00002101 A2[9A1E]                	mov	[DevSavedDelim],al
 26511                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26512                                  					;  it with null
 26513                                  	; 18/12/2022
 26514 00002104 29DB                    	sub	bx,bx
 26515 00002106 26881C                  	mov	[es:si],bl ; 0
 26516                                   	;mov	byte [es:si],0
 26517                                  
 26518 00002109 07                      	pop	es
 26519 0000210A 5E                      	pop	si
 26520                                  
 26521                                  ;------------------------------------------------------------------------------
 26522                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26523                                  ;------------------------------------------------------------------------------
 26524                                  
 26525                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26526                                  ;
 26527                                  ;	call	UmbTest			; See if UMBs are around...
 26528                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 26529                                  ;
 26530                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26531                                  ;	jmp	short LoadDevice
 26532                                  
 26533                                  ;------------------------------------------------------------------------------
 26534                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26535                                  ;------------------------------------------------------------------------------
 26536                                  
 26537                                  NrmTst:
 26538                                  	; 11/12/2022
 26539                                  	; ds = cs
 26540                                  	;;mov	byte [cs:DeviceHi],0
 26541                                  	;mov	byte [DeviceHi],0
 26542                                  	; 18/12/2022
 26543                                  	; bx = 0
 26544 0000210B 381E[761E]              	cmp	[DevUMB],bl ; 0
 26545                                  	;cmp	byte [DevUMB],0
 26546                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26547 0000210F 7417                    	je	short LoadDevice	; no, we don't
 26548                                  	;mov	byte [cs:DeviceHi],1
 26549                                  	; 11/12/2022
 26550                                  	;mov	byte [DeviceHi],1
 26551                                  	; 18/12/2022
 26552 00002111 FEC3                    	inc	bl ; mov bl,1 ; (*)
 26553                                  	; 11/12/2022
 26554                                  	;jmp	short LoadDevice2	; 11/12/2022
 26555 00002113 EB13                    	jmp	short LoadDevice
 26556                                  
 26557                                  ;------------------------------------------------------------------------------
 26558                                  ; device command
 26559                                  ;------------------------------------------------------------------------------
 26560                                  
 26561                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26562                                  	; (SYSINIT:2401h)
 26563                                  tryd:
 26564                                  	; 11/12/2022
 26565 00002115 31DB                    	xor 	bx, bx
 26566                                  	;
 26567 00002117 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26568 0000211A 7403                    	je	short gotd
 26569                                  skip_it2:
 26570 0000211C E93302                  	jmp	tryq
 26571                                  gotd:
 26572                                  
 26573                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26574                                  ;;ifdef	MULTI_CONFIG
 26575                                  ;       call    query_user              ; query the user if config_cmd
 26576                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26577                                  ;;endif
 26578                                  	; 11/12/2022
 26579                                  	; ds = cs
 26580                                  	;mov	byte [DeviceHi],0
 26581                                  	;mov	word [DevSizeOption],0
 26582 0000211F 891E[861E]              	mov	[DevSizeOption],bx ; 0
 26583 00002123 C606[9A1E]20            	mov	byte [DevSavedDelim],' '
 26584                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26585                                  	;mov	word [cs:DevSizeOption],0
 26586                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26587                                  					;  be replaced with a ' '
 26588                                  LoadDevice:                             ; device= or devicehigh= command.
 26589                                  	; 11/12/2022
 26590                                  	;mov	byte [DeviceHi],0
 26591 00002128 881E[851E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26592                                  LoadDevice2:
 26593                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26594                                  	;
 26595                                  	;push    cs
 26596                                          ;pop     ds
 26597                                  	;
 26598                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26599                                  	;mov	[bpb_addr+2],es
 26600                                  	;
 26601                                  	;mov	[DevCmdLine],si		; save it for ourself
 26602                                  	;mov	[DevCmdLine+2],es
 26603                                  	;
 26604                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26605                                  
 26606                                  	; 11/12/2022
 26607                                  	; ds = cs
 26608                                  	;mov	bx,cs
 26609                                  	;mov	ds,bx
 26610                                  
 26611                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26612 0000212C 8936[F803]              	mov	[bpb_addr],si
 26613                                  	;mov	[cs:bpb_addr+2],es
 26614 00002130 8C06[FA03]              	mov	[bpb_addr+2],es
 26615                                  
 26616                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26617 00002134 8936[961E]              	mov	[DevCmdLine],si
 26618                                  	;mov	[cs:DevCmdLine+2],es	
 26619 00002138 8C06[981E]              	mov	[DevCmdLine+2],es	
 26620                                  
 26621 0000213C E8E20E                  	call	round
 26622                                  	
 26623 0000213F E81B07                  	call	SizeDevice
 26624 00002142 7215                    	jc	short BadFile
 26625                                  
 26626                                  	; 11/12/2022
 26627                                  	; ds = cs
 26628                                  
 26629                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26630                                  
 26631                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26632                                  ;
 26633                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26634                                  ;
 26635                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26636                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26637                                  ;	jz	short DevConvLoad	; the actual load.
 26638                                  ;
 26639                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26640                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26641                                  ;
 26642                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26643                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26644                                  ;
 26645                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26646                                  ;
 26647                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26648                                  ;	or	ax,ax
 26649                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26650                                  ;
 26651                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26652                                  ;	jge	short DevConvLoad
 26653                                  ;
 26654                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26655                                  ;	call	StoLoadSize		; minsize for load UMB.
 26656                                  
 26657                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26658                                  
 26659                                  DevConvLoad:
 26660                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26661 00002144 E83206                  	call	InitDevLoad
 26662                                  
 26663                                  	; 11/12/2022
 26664                                  	; ds = cs
 26665 00002147 A1[6A1E]                	mov	ax,[DevLoadAddr]
 26666 0000214A 0306[681E]              	add	ax,[DevSize]
 26667 0000214E 7206                    	jc	short NoMem
 26668 00002150 3906[6C1E]              	cmp	[DevLoadEnd],ax
 26669 00002154 7312                    	jae	short LoadDev
 26670                                  	
 26671                                  	; 11/12/2022
 26672                                  	;mov	ax,[cs:DevLoadAddr]
 26673                                  	;add	ax,[cs:DevSize]
 26674                                  	;jc	short NoMem
 26675                                  	;cmp	[cs:DevLoadEnd],ax
 26676                                  	;jae	short LoadDev
 26677                                  NoMem:
 26678                                  	; 11/12/2022
 26679                                  	; ds = cs
 26680                                  	;jmp	mem_err
 26681 00002156 E9070F                  	jmp	mem_err2
 26682                                  
 26683                                  BadFile:
 26684                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26685                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26686                                  	;cmp    byte [es:si],' '
 26687                                          ;jae	short tryd_2
 26688 00002159 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26689 0000215D 7503                            jne	short tryd_2
 26690 0000215F E91D05                  	jmp	badop
 26691                                  tryd_2:
 26692 00002162 E80A11                  	call	badload
 26693 00002165 E916FE                  	jmp	coff
 26694                                  
 26695                                  LoadDev:
 26696 00002168 06                      	push	es
 26697 00002169 1F                      	pop	ds
 26698                                  
 26699 0000216A 89F2                    	mov	dx,si			;ds:dx points to file name
 26700 0000216C E83F07                  	call	ExecDev			; load device driver using exec call
 26701                                  badldreset:
 26702 0000216F 1E                      	push	ds
 26703 00002170 07                      	pop	es			;es:si back to config.sys
 26704 00002171 0E                      	push	cs
 26705 00002172 1F                      	pop	ds			;ds back to sysinit
 26706 00002173 72E4                    	jc	short BadFile
 26707                                  goodld:
 26708                                  	; 11/12/2022
 26709                                  	; ds = cs
 26710                                  
 26711 00002175 06                      	push	es
 26712 00002176 56                      	push	si
 26713 00002177 E85107                  	call	RemoveNull
 26714 0000217A 06                      	push	es
 26715 0000217B 56                      	push	si
 26716                                  
 26717 0000217C 0E                      	push	cs
 26718 0000217D 07                      	pop	es
 26719                                  
 26720 0000217E 1E                      	push	ds
 26721 0000217F 56                      	push	si
 26722                                  
 26723                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26724                                  	; 31/12/2022
 26725                                  	; ds = cs
 26726 00002180 C536[6E1E]              	lds	si,[DevEntry]
 26727                                  	
 26728                                  	;test	word [si+4],8000h
 26729                                  	; 11/12/2022
 26730 00002184 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26731                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26732 00002188 7511                    	jnz	short got_device_com_cont   ; no.
 26733                                  
 26734 0000218A 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26735                                  	;cmp	byte [si+32],26
 26736 0000218F 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26737 00002193 7206                    	jb	short got_device_com_cont
 26738                                  
 26739 00002195 5E                      	pop	si
 26740 00002196 1F                      	pop	ds
 26741                                  
 26742 00002197 5E                      	pop	si			; clear the stack
 26743 00002198 07                      	pop	es
 26744                                  
 26745                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26746                                  	;call	RetFromUM		; Do this before we leave
 26747                                  
 26748 00002199 EB55                    	jmp	short badnumblock
 26749                                  
 26750                                  got_device_com_cont:
 26751 0000219B 5E                      	pop	si
 26752 0000219C 1F                      	pop	ds
 26753                                  
 26754                                  	; 11/12/2022
 26755                                  	; ds = cs
 26756                                  
 26757 0000219D E86505                  	call	LieInt12Mem
 26758 000021A0 E8C405                  	call	UpdatePDB		; update the PSP:2 value M020
 26759                                  
 26760                                  	; 11/12/2022
 26761                                  	; ds = cs
 26762                                  	; 08/09/2023
 26763 000021A3 31C0                    	xor	ax, ax ; 0
 26764 000021A5 3806[1514]              	cmp	byte [multdeviceflag],al ; 0
 26765                                  	;cmp	byte [multdeviceflag],0
 26766                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26767                                  					;  driver in the file ; M027
 26768 000021A9 750B                    	jne	short skip_pass_limit	;		      ; M027
 26769                                  
 26770                                  	; 11/12/2022
 26771                                  	; ds = cs
 26772                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26773                                  	;mov	bx,[cs:DevLoadEnd]
 26774                                  	;mov	[cs:break_addr+2],bx
 26775                                  
 26776                                  	;mov	word [break_addr],0
 26777                                  	; 08/09/2023
 26778 000021AB A3[F403]                	mov	[break_addr],ax ; 0
 26779 000021AE 8B1E[6C1E]              	mov	bx,[DevLoadEnd]
 26780 000021B2 891E[F603]              	mov	[break_addr+2],bx
 26781                                  
 26782                                  skip_pass_limit:
 26783                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26784                                  ;	number of installed devices (including DblSpace drives) where
 26785                                  ;	"drivenumber" is the number that the next block device will
 26786                                  ;	be assigned to. Because some naughty device drivers (like
 26787                                  ;	interlnk) look at the internal DOS variable instead of the
 26788                                  ;	value we pass it, we'll temporarily stick our value into
 26789                                  ;	DOS DATA while we're initializing the device drivers.
 26790                                  ;
 26791                                  ;	Note that this will make it impossible for this device
 26792                                  ;	driver to access the DblSpace drive letters, whether
 26793                                  ;	they are swapped-hosts or unswapped compressed drives,
 26794                                  ;	during its initialization phase.
 26795                                  
 26796                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26797                                  	;push	ds
 26798                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26799                                  	;
 26800                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26801                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26802                                  	;mov	ah,al
 26803                                  	;
 26804                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26805                                  	;pop	ds
 26806                                  	;
 26807                                  	;push	ax			; save real sysi_numio/ncds in ax
 26808                                  
 26809                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26810                                  	; (SYSINIT:24B9h)
 26811                                  
 26812 000021B6 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26813 000021B9 E8AD0E                  	call	calldev 		; calldev (sdevstrat);
 26814 000021BC BB0800                  	mov	bx,SYSDEV.INT ; 8
 26815 000021BF E8A70E                  	call	calldev 		; calldev (sdevint);
 26816                                  
 26817                                  	; 11/12/2022
 26818                                  	; ds <> cs
 26819                                  
 26820                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26821                                  	;pop	ax			; get real sysi_numio value
 26822                                  	;push	ds
 26823                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26824                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26825                                  	;pop	ds
 26826                                  
 26827                                  	; 11/12/2022
 26828 000021C2 0E                      	push	cs
 26829 000021C3 1F                      	pop	ds
 26830                                  
 26831 000021C4 E86E05                  	call	TrueInt12Mem
 26832                                  
 26833                                  	; 11/12/2022
 26834                                  	; ds = cs
 26835                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26836                                  	;mov	[cs:DevBrkAddr],ax
 26837                                  	;mov	ax,[cs:break_addr+2]
 26838                                  	;mov	[cs:DevBrkAddr+2],ax
 26839 000021C7 A1[F403]                	mov	ax,[break_addr]	
 26840 000021CA A3[721E]                	mov	[DevBrkAddr],ax
 26841 000021CD A1[F603]                	mov	ax,[break_addr+2]
 26842 000021D0 A3[741E]                	mov	[DevBrkAddr+2],ax
 26843                                  
 26844                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26845                                  	;call	RetFromUM		; There we go... all done.
 26846                                  
 26847                                  	; 11/12/2022
 26848 000021D3 803E[761E]00            	cmp	byte [DevUMB],0	
 26849                                  	;cmp	byte [cs:DevUMB],0
 26850 000021D8 7403                    	je	short tryd_3
 26851 000021DA E8D208                  	call	AllocUMB
 26852                                  	; 31/12/2022
 26853                                  	; ds= cs
 26854                                  tryd_3:
 26855                                  
 26856                                  ;ifndef ROMDOS
 26857                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26858                                  
 26859                                  	; 11/12/2022
 26860                                  	; ds = cs
 26861                                  	
 26862                                  	;cmp	byte [cs:runhigh],0FFh
 26863 000021DD 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26864 000021E2 7503                    	jne	short tryd_4
 26865                                  	
 26866                                  	; 11/12/2022
 26867                                  	; ds = cs
 26868 000021E4 E8F3E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26869                                  tryd_4:
 26870                                  ;endif ; ROMDOS
 26871                                  
 26872 000021E7 5E                      	pop	si
 26873 000021E8 1F                      	pop	ds
 26874 000021E9 C60400                  	mov	byte [si],0		; *p = 0;
 26875                                  
 26876 000021EC 0E                      	push	cs
 26877 000021ED 1F                      	pop	ds
 26878                                  
 26879 000021EE EB1F                    	jmp	short was_device_com
 26880                                  
 26881                                  ;----------------------------------------------------------------------------
 26882                                  
 26883                                  ;02/04/2019 - Retro DOS v4.0
 26884                                  
 26885                                  badnumblock:
 26886 000021F0 0E                      	push	cs
 26887 000021F1 1F                      	pop	ds
 26888 000021F2 BA[6837]                	mov	dx,badblock
 26889 000021F5 E89F10                  	call	print
 26890                                  
 26891                                  ;------ fall thru -----------------------------------------------------------
 26892                                  
 26893                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26894                                  	
 26895                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26896                                  	
 26897 000021F8 5E                      	pop	si
 26898 000021F9 07                      	pop	es
 26899                                  
 26900 000021FA 0E                      	push	cs
 26901 000021FB 1F                      	pop	ds
 26902                                  
 26903                                  skip1_resetmemhi:
 26904                                  	; 11/12/2022
 26905                                  	; ds = cs
 26906 000021FC 833E[FD03]00            	cmp	word [configmsgflag],0
 26907                                  	;cmp	word [cs:configmsgflag],0
 26908 00002201 7409                    	je	short no_error_line_msg
 26909                                  
 26910 00002203 E8AD04                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26911                                  	; 11/12/2022
 26912                                  	; ds = cs
 26913                                  	;mov	word [cs:configmsgflag],0
 26914 00002206 C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26915                                  
 26916                                  no_error_line_msg:
 26917 0000220C E96FFD                  	jmp	coff
 26918                                  
 26919                                  ;----------------------------------------------------------------------------
 26920                                  
 26921                                  was_device_com:
 26922                                  	; 14/12/2022
 26923                                  	; ds = cs
 26924 0000220F A1[741E]                	mov	ax,[DevBrkAddr+2]
 26925                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26926 00002212 3B06[6C1E]              	cmp	ax,[DevLoadEnd]
 26927                                  	;cmp	ax,[cs:DevLoadEnd]
 26928 00002216 7605                    	jbe	short breakok
 26929                                  
 26930 00002218 5E                      	pop	si
 26931 00002219 07                      	pop	es
 26932 0000221A E93CFF                  	jmp	BadFile
 26933                                  
 26934                                  breakok:
 26935                                  	; 14/12/2022
 26936                                  	; ds = cs
 26937 0000221D C43E[6B02]              	les	di,[DOSINFO] 
 26938 00002221 C516[6E1E]              	lds	dx,[DevEntry]
 26939                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26940 00002225 89D6                    	mov	si,dx
 26941                                  
 26942                                  	; 14/11/2022
 26943                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26944                                  
 26945                                  	; 14/12/2022
 26946                                  	; ds <> cs
 26947                                  	
 26948                                  	;mov	ax,[si+4]
 26949 00002227 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26950                                  	; 12/12/2022
 26951 0000222A F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26952                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26953 0000222D 7426                    	jz	short isblock
 26954                                  
 26955                                  ;------ lets deal with character devices
 26956                                  
 26957 0000222F 2E800E[1814]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26958 00002235 E8C606                  	call	DevSetBreak		;go ahead and alloc mem for device
 26959                                  jc_edd:
 26960 00002238 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26961                                  
 26962                                  	; 12/12/2022
 26963 0000223A A801                    	test	al,ISCIN
 26964                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26965 0000223C 7408                    	jz	short tryclk
 26966                                  
 26967 0000223E 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26968 00002242 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26969                                  tryclk: 
 26970                                  	; 12/12/2022
 26971 00002246 A808                    	test	al,ISCLOCK
 26972                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26973 00002248 7408                    	jz	short golink
 26974                                  
 26975 0000224A 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26976 0000224E 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26977                                  golink: 
 26978 00002252 E9B000                  	jmp	linkit
 26979                                  
 26980                                  ;------ deal with block device drivers
 26981                                  
 26982                                  isblock:
 26983 00002255 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26984 00002259 08C0                    	or	al,al
 26985 0000225B 749B                    	jz	short erase_dev_do
 26986                                  	;mov	[si+10],al
 26987 0000225D 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26988                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26989                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26990                                  perdrv:
 26991 00002260 98                      	cbw				; warning no device > 127 units
 26992 00002261 89C1                    	mov	cx,ax
 26993 00002263 88E6                    	mov	dh,ah
 26994                                  	;mov	dl,[es:di+32]
 26995 00002265 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26996 00002269 88D4                    	mov	ah,dl
 26997 0000226B 00C4                    	add	ah,al			; check for too many devices
 26998 0000226D 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26999 00002270 7603                    	jbe	short ok_block
 27000 00002272 E97BFF                  	jmp	badnumblock
 27001                                  
 27002                                  ok_block:
 27003 00002275 2E800E[1814]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27004 0000227B E88006                  	call	DevSetBreak		; alloc the device
 27005 0000227E 72B8                    	jc	short jc_edd
 27006 00002280 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 27007                                  
 27008 00002284 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 27009 00002289 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 27010                                  perunit:
 27011 0000228E 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 27012                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27013                                  	; 11/12/2022
 27014 00002293 26C46E00                	les	bp,[es:bp]
 27015                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27016                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 27017                                  scandpb:
 27018                                  	;cmp	word [es:bp+25],-1
 27019 00002297 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 27020 0000229C 7406                    	je	short foundpb
 27021                                  	;les	bp,[es:bp+25]
 27022 0000229E 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 27023 000022A2 EBF3                    	jmp	short scandpb
 27024                                  foundpb:
 27025 000022A4 2EA1[721E]              	mov	ax,[cs:DevBrkAddr]
 27026 000022A8 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 27027 000022AC 2EA1[741E]              	mov	ax,[cs:DevBrkAddr+2]
 27028 000022B0 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 27029                                  
 27030 000022B4 2EC42E[721E]            	les	bp,[cs:DevBrkAddr]
 27031 000022B9 2E8306[721E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 27032                                  
 27033 000022BF E81B06                  	call	RoundBreakAddr
 27034                                  
 27035 000022C2 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 27036 000022C8 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 27037                                  
 27038 000022CD 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 27039 000022CF 43                      	inc	bx
 27040 000022D0 43                      	inc	bx			;point to next guy
 27041                                  	;mov	[es:bp+DPB.DRIVE],dx
 27042                                  	; 11/12/2022
 27043 000022D1 26895600                	mov	[es:bp],dx ; 13/05/2019
 27044                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27045                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 27046                                  	
 27047 000022D5 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 27048 000022D7 CD21                    	int	21h
 27049                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 27050                                  			; DS:SI -> BPB (BIOS Parameter Block)
 27051                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 27052                                  
 27053                                  	;mov	ax,[es:bp+2]
 27054 000022D9 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 27055 000022DD 06                      	push	es
 27056 000022DE 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 27057                                  	;cmp	ax,[es:di+10h]
 27058 000022E3 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 27059 000022E7 07                      	pop	es
 27060                                  	;jna	short iblk_1
 27061                                  	;jmp	short bad_bpb_size_sector
 27062                                  	; 29/10/2022
 27063 000022E8 775A                    	ja	short bad_bpb_size_sector
 27064                                  iblk_1:
 27065 000022EA 1E                      	push	ds
 27066 000022EB 52                      	push	dx
 27067                                  
 27068 000022EC 2EC516[6E1E]            	lds	dx,[cs:DevEntry]
 27069                                  	;mov	[es:bp+13h],dx
 27070 000022F1 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 27071                                  	;mov	[es:bp+15h],ds
 27072 000022F5 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 27073                                  
 27074 000022F9 5A                      	pop	dx
 27075 000022FA 1F                      	pop	ds
 27076                                  
 27077 000022FB 42                      	inc	dx
 27078 000022FC FEC6                    	inc	dh
 27079 000022FE E28E                    	loop	perunit
 27080                                  
 27081 00002300 0E                      	push	cs
 27082 00002301 1F                      	pop	ds
 27083                                  
 27084 00002302 E8C8E8                  	call	TempCDS 		; set cds for new drives
 27085                                  linkit:
 27086 00002305 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 27087 0000230A 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 27088 0000230E 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 27089                                  
 27090 00002312 2EC536[6E1E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 27091 00002317 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 27092 0000231B 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 27093 0000231F 8B04                    	mov	ax,[si]			;get pointer to next device
 27094 00002321 2EA3[6E1E]              	mov	[cs:DevEntry],ax	;and save it
 27095                                  
 27096 00002325 890C                    	mov	[si],cx			;link in the driver
 27097 00002327 895402                  	mov	[si+2],dx
 27098                                  enddev:
 27099 0000232A 5E                      	pop	si
 27100 0000232B 07                      	pop	es
 27101 0000232C 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 27102 0000232D 740B                    	jz	short coffj3
 27103                                  
 27104 0000232F 2EFE06[1514]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 27105 00002334 E8E905                  	call	DevBreak		; M009
 27106                                  	; 11/12/2022
 27107                                  	; ds = cs (DevBreak)
 27108                                  
 27109                                  	; 03/04/2019 - Retro DOS v4.0
 27110                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 27111 00002337 E93BFE                  	jmp	goodld			; otherwise pretend we loaded it in
 27112                                  coffj3: 
 27113                                  	; 18/12/2022
 27114                                  	; ax = 0
 27115 0000233A 2EA2[1514]              	mov	[cs:multdeviceflag],al ; 0
 27116                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 27117 0000233E E8DF05                  	call	DevBreak
 27118                                  	; 11/12/2022
 27119                                  	; ds = cs (DevBreak)
 27120                                  	
 27121                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 27122                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 27123                                  ;					;  created a bogus arena to try
 27124                                  ;					;  to protect some of its resident-
 27125                                  ;					;  init code.
 27126                                  	;call	CheckDoubleSpace
 27127 00002341 E93AFC                  	jmp	coff
 27128                                  
 27129                                  ;----------------------------------------------------------------------------
 27130                                  
 27131                                  ;CheckDoubleSpace:
 27132                                  ;;;;	ifdef	dblspace_hooks
 27133                                  ;
 27134                                  ;;	Now check for two special MagicDrv cases:
 27135                                  ;;
 27136                                  ;;       a) the last driver load was MagicDrv final placement:
 27137                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 27138                                  ;;
 27139                                  ;;       b) MagicDrv is currently in temporary home:
 27140                                  ;;          -> call it to give it a chance to mount and shuffle drives
 27141                                  ;
 27142                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 27143                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 27144                                  ;
 27145                                  ;;	Now inquire of driver whether it is present, and final located
 27146                                  ;
 27147                                  ;	mov	ax,multMagicdrv ; 4A11h
 27148                                  ;	mov	bx,MD_VERSION ; 0
 27149                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 27150                                  ;	or	ax,ax			; is it there?
 27151                                  ;	jnz	short no_more_magic_calls ; done if not
 27152                                  ;
 27153                                  ;	test	dx,8000h		; is it final placed?
 27154                                  ;	jnz	short magic_not_yet_home ;  skip if not
 27155                                  ;
 27156                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 27157                                  ;;	don't keep checking it, and add its number of drive letters
 27158                                  ;;	to drivenumber.
 27159                                  ;
 27160                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 27161                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 27162                                  ;;					;  the drive number we'll pass to the
 27163                                  ;;					;  next loadable block device.
 27164                                  ;
 27165                                  ;	jmp	short no_more_magic_calls ; and finished.
 27166                                  ;
 27167                                  ;magic_not_yet_home:
 27168                                  ;	push	es
 27169                                  ;	push	si
 27170                                  ;
 27171                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 27172                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 27173                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 27174                                  ;
 27175                                  ;	mov	bx,2
 27176                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 27177                                  ;;					;   by this many units
 27178                                  ;
 27179                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 27180                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 27181                                  ;;					;  sees this, to prevent bad things
 27182                                  ;;					;  from happening if people run the
 27183                                  ;;					;  new driver with an old BIOS
 27184                                  ;	call	far [cs:MagicBackdoor]
 27185                                  ;
 27186                                  ;	pop	si
 27187                                  ;	pop	es
 27188                                  ;
 27189                                  ;no_more_magic_calls:
 27190                                  ;
 27191                                  ;;;;	endif
 27192                                  ;	retn
 27193                                  
 27194                                  ; 03/04/2019 - Retro DOS v4.0
 27195                                  
 27196                                  bad_bpb_size_sector:
 27197 00002344 5E                      	pop	si
 27198 00002345 07                      	pop	es
 27199 00002346 BA[8A36]                	mov	dx,badsiz_pre
 27200 00002349 BB[6836]                	mov	bx,crlfm
 27201 0000234C E8260F                  	call	prnerr
 27202                                  
 27203 0000234F E92CFC                  	jmp	coff
 27204                                  
 27205                                  ;------------------------------------------------------------------------------
 27206                                  ; country command
 27207                                  ;      the syntax is:
 27208                                  ;	country=country id {,codepage {,path}}
 27209                                  ;	country=country id {,,path}	:default codepage id in dos
 27210                                  ;------------------------------------------------------------------------------
 27211                                  
 27212                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27213                                  	; (SYSINIT:2663h)
 27214                                  tryq:
 27215 00002352 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27216 00002355 7403                    	je	short tryq_cont
 27217                                  skip_it3:
 27218 00002357 E90801                  	jmp	tryf
 27219                                  tryq_cont:
 27220                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27221                                  ;;ifdef	MULTI_CONFIG
 27222                                  ;       call    query_user		; query the user if config_cmd
 27223                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27224                                  ;;endif
 27225                                  	; 14/12/2022
 27226                                  	; ds = cs
 27227                                  	; bx = 0
 27228                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27229                                  	;mov	word [cs:p_code_page],0
 27230 0000235A 881E[2033]              	mov	[cntry_drv],bl ; 0
 27231 0000235E 891E[331D]              	mov	[p_code_page],bx ; 0
 27232                                  	
 27233 00002362 BF[FC1C]                	mov	di,cntry_parms
 27234 00002365 31C9                    	xor	cx,cx
 27235                                  	; 04/01/2023
 27236                                  	;mov	dx,cx
 27237                                  do52:
 27238 00002367 E8F602                  	call	sysinit_parse
 27239 0000236A 730B                    	jnc	short if52		; parse error,check error code and
 27240                                  
 27241 0000236C E8E000                  	call	cntry_error		; show message and end the search loop.
 27242                                  	; 14/12/2022
 27243                                  	; ds = cs
 27244 0000236F C706[311D]FFFF          	mov	word [p_cntry_code],-1
 27245                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 27246 00002375 EB34                    	jmp	short sr52
 27247                                  if52:
 27248 00002377 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 27249 0000237A 742F                    	jz	short sr52		; then end the search loop
 27250                                  
 27251                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 27252                                  	; 14/12/2022
 27253                                  	; ds = cs
 27254 0000237C 803E[CE1C]01            	cmp	byte [result_val],_$P_Number	
 27255                                  	;cmp	byte [cs:result_val],_$P_Number
 27256 00002381 7512                    	jnz	short if56
 27257                                  
 27258                                  	;;mov	ax,[cs:rw_dword]
 27259                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27260                                  	; 14/12/2022
 27261 00002383 A1[D21C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27262 00002386 83F901                  	cmp	cx,1
 27263 00002389 7505                    	jne	short if57
 27264                                  
 27265                                  	;mov	[cs:p_cntry_code],ax
 27266                                  	; 14/12/2022
 27267 0000238B A3[311D]                	mov	[p_cntry_code],ax
 27268                                  
 27269                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27270                                  	;jmp	short en57
 27271                                  	; 12/12/2022
 27272                                  	;jmp	short en56
 27273 0000238E EBD7                    	jmp	short do52
 27274                                  
 27275                                  if57:
 27276                                  	;mov	[cs:p_code_page],ax
 27277                                  	; 14/12/2022
 27278                                  	; ds = cs
 27279 00002390 A3[331D]                	mov	[p_code_page],ax
 27280                                  en57:
 27281                                  	;jmp	short en56		; path entered
 27282                                  	; 12/12/2022
 27283 00002393 EBD2                    	jmp	short do52
 27284                                  
 27285                                  if56:
 27286 00002395 1E                      	push	ds
 27287 00002396 06                      	push	es
 27288 00002397 56                      	push	si
 27289 00002398 57                      	push	di
 27290                                  
 27291 00002399 0E                      	push	cs
 27292 0000239A 07                      	pop	es
 27293                                  
 27294                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 27295                                  	; 14/12/2022
 27296 0000239B C536[D21C]              	lds	si,[rv_dword]
 27297 0000239F BF[2033]                	mov	di,cntry_drv
 27298 000023A2 E8BF0E                  	call	move_asciiz
 27299                                  
 27300 000023A5 5F                      	pop	di
 27301 000023A6 5E                      	pop	si
 27302 000023A7 07                      	pop	es
 27303 000023A8 1F                      	pop	ds
 27304                                  
 27305                                  en56:
 27306 000023A9 EBBC                    	jmp	short do52
 27307                                  
 27308                                  sr52:
 27309                                  	; 14/12/2022
 27310                                  	; ds = cs
 27311 000023AB 833E[311D]FF            	cmp	word [p_cntry_code],-1
 27312                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 27313 000023B0 7509                    	jne	short tryq_open
 27314 000023B2 E9C9FB                  	jmp	coff
 27315                                  
 27316                                  tryqbad:				;"invalid country code or code page"
 27317 000023B5 F9                      	stc
 27318 000023B6 BA[D136]                	mov     dx,badcountry
 27319 000023B9 EB79                    	jmp     tryqchkerr
 27320                                  
 27321                                  tryq_open:
 27322                                  	; 14/12/2022
 27323                                  	; ds = cs
 27324 000023BB 803E[2033]00            	cmp	byte [cntry_drv],0
 27325                                  	;cmp	byte [cs:cntry_drv],0
 27326 000023C0 7405                    	je	short tryq_def
 27327 000023C2 BA[2033]                	mov	dx,cntry_drv
 27328 000023C5 EB03                    	jmp	short tryq_openit
 27329                                  
 27330                                  tryq_def:
 27331 000023C7 BA[2233]                	mov	dx,cntry_root
 27332                                  tryq_openit:
 27333 000023CA B8003D                  	mov	ax,3D00h		;open a file
 27334 000023CD F9                      	stc
 27335 000023CE CD21                    	int	21h
 27336 000023D0 7242                    	jc	short tryqfilebad	;open failure
 27337                                  
 27338                                  	; 14/12/2022
 27339                                  	; ds = cs
 27340 000023D2 A3[D803]                	mov	[cntryfilehandle],ax
 27341                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 27342 000023D5 89C3                    	mov	bx,ax
 27343 000023D7 A1[311D]                	mov	ax,[p_cntry_code]
 27344 000023DA 8B16[331D]              	mov	dx,[p_code_page]
 27345                                  	;mov	ax,[cs:p_cntry_code]
 27346                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 27347                                  	;mov	cx,[cs:memhi]
 27348 000023DE 8B0E[E003]              	mov	cx,[memhi]
 27349 000023E2 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 27350                                  					; M023
 27351                                  	; 14/12/2022
 27352                                  	; ds = cs
 27353 000023E6 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 27354                                  	;cmp	cx,[cs:ALLOCLIM]
 27355 000023EA 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 27356                                  
 27357 000023EC BE[2033]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 27358 000023EF 803C00                  	cmp	byte [si],0 		;default path?
 27359 000023F2 7502                    	jne	short tryq_set_for_dos
 27360                                  
 27361 000023F4 46                      	inc	si
 27362 000023F5 46                      	inc	si			;ds:si -> cntry_root
 27363                                  
 27364                                  tryq_set_for_dos:
 27365                                  	; 14/12/2022
 27366                                  	; ds = cs
 27367 000023F6 C43E[7702]              	les	di,[sysi_country]
 27368                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 27369 000023FA 57                      	push	di			;save di
 27370                                  	;add	di,8
 27371 000023FB 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 27372 000023FE E8630E                  	call	move_asciiz		;set the path to country.sys in dos.
 27373 00002401 5F                      	pop	di			;es:di -> country info tab again.
 27374                                  
 27375                                  	; 14/12/2022	
 27376 00002402 8B0E[E003]              	mov	cx,[memhi]
 27377                                  	;mov	cx,[cs:memhi]
 27378 00002406 8ED9                    	mov	ds,cx
 27379 00002408 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 27380 0000240A E8DF0C                  	call	setdoscountryinfo	;now do the job!!!
 27381                                  	; ds <> cs ; 14/12/2022
 27382 0000240D 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 27383                                  
 27384 0000240F 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 27385 00002412 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 27386                                  
 27387                                  tryqfilebad:
 27388 00002414 0E                      	push	cs
 27389 00002415 07                      	pop	es
 27390 00002416 2E803E[2033]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 27391 0000241C 7405                    	je	short tryqdefbad
 27392                                  
 27393 0000241E BE[2033]                	mov	si,cntry_drv
 27394 00002421 EB03                    	jmp	short tryqbadload
 27395                                  
 27396                                  tryqdefbad:				;default file has been used.
 27397 00002423 BE[2233]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 27398                                  tryqbadload:
 27399 00002426 E8460E                  	call	badload 		;ds will be restored to sysinit_seg
 27400                                  	;mov	cx,[cs:CONFBOT]
 27401                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27402                                  	;mov	cx,[cs:top_of_cdss]
 27403                                  	; 11/12/2022
 27404                                  	; ds = cs
 27405 00002429 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 27406 0000242D 8EC1                    	mov	es,cx			;restore es -> confbot.
 27407 0000242F EB13                    	jmp	short coffj4
 27408                                  
 27409                                  tryqmemory:
 27410 00002431 BA[1437]                	mov	dx,insufmemory
 27411                                  tryqchkerr:
 27412                                  	;mov	cx,[cs:CONFBOT]
 27413                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27414                                  	;mov	cx,[cs:top_of_cdss]
 27415                                  	; 12/12/2022
 27416 00002434 0E                      	push	cs
 27417 00002435 1F                      	pop	ds
 27418 00002436 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 27419 0000243A 8EC1                    	mov	es,cx			;restore es -> confbot seg
 27420                                  	;push	cs
 27421                                  	;pop	ds			;restore ds to sysinit_seg
 27422 0000243C 7306                    	jnc	short coffj4		;if no error,then exit
 27423                                  
 27424 0000243E E8560E                  	call	print			;else show error message
 27425 00002441 E86F02                  	call	error_line
 27426                                  coffj4:
 27427                                  	;mov	bx,[cs:cntryfilehandle]
 27428                                  	; 11/12/2022
 27429                                  	; ds = cs
 27430 00002444 8B1E[D803]              	mov	bx,[cntryfilehandle]
 27431 00002448 B43E                    	mov	ah,3Eh
 27432 0000244A CD21                    	int	21h			;close a file. don't care even if it fails.
 27433 0000244C E92FFB                  	jmp	coff
 27434                                  
 27435                                  ;--------------------------------------------
 27436                                  
 27437                                  cntry_error:
 27438                                  
 27439                                  ;function: show "invalid country code or code page" messages,or
 27440                                  ;		"error in country command" depending on the error code
 27441                                  ;		in ax returned by sysparse;
 27442                                  ;in:	ax - error code
 27443                                  ;	ds - sysinitseg
 27444                                  ;	es - confbot
 27445                                  ;out:	show message.  dx destroyed.
 27446                                  
 27447 0000244F 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27448 00002452 7505                    	jne	short if64
 27449 00002454 BA[D136]                	mov	dx,badcountry		;"invalid country code or code page"
 27450 00002457 EB03                    	jmp	short en64
 27451                                  if64:
 27452 00002459 BA[F736]                	mov	dx,badcountrycom	;"error in contry command"
 27453                                  en64:
 27454 0000245C E8380E                  	call	print
 27455                                  	;call	error_line
 27456                                  	;retn
 27457                                  	; 11/12/2022
 27458 0000245F E95102                  	jmp	error_line
 27459                                  
 27460                                  ;------------------------------------------------------------------------------
 27461                                  ; files command
 27462                                  ;------------------------------------------------------------------------------
 27463                                  
 27464                                  ;******************************************************************************
 27465                                  ; function: parse the parameters of files= command.			      *
 27466                                  ;									      *
 27467                                  ; input :								      *
 27468                                  ;	es:si -> parameters in command line.				      *
 27469                                  ; output:								      *
 27470                                  ;	variable files set.						      *
 27471                                  ;									      *
 27472                                  ; subroutines to be called:						      *
 27473                                  ;	sysinit_parse							      *
 27474                                  ; logic:								      *
 27475                                  ; {									      *
 27476                                  ;	set di points to files_parms;					      *
 27477                                  ;	set dx,cx to 0; 						      *
 27478                                  ;	while (end of command line)					      *
 27479                                  ;	{ sysinit_parse;						      *
 27480                                  ;	  if (no error) then						      *
 27481                                  ;	     files = result_val._$P_picked_val				      *
 27482                                  ;	  else								      *
 27483                                  ;	     error exit;						      *
 27484                                  ;	};								      *
 27485                                  ; };									      *
 27486                                  ;									      *
 27487                                  ;******************************************************************************
 27488                                  
 27489                                  tryf:
 27490 00002462 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27491 00002465 7523                    	jne	short tryl
 27492                                  
 27493                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27494                                  ;;ifdef	MULTI_CONFIG
 27495                                  ;       call    query_user              ; query the user if config_cmd
 27496                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 27497                                  ;;endif
 27498                                  
 27499                                  	; 14/12/2022
 27500                                  	; ds = cs
 27501                                  
 27502 00002467 BF[351D]                	mov	di,files_parms
 27503 0000246A 31C9                    	xor	cx,cx
 27504                                  	; 04/01/2023
 27505                                  	;mov	dx,cx
 27506                                  do67:
 27507 0000246C E8F101                  	call	sysinit_parse
 27508 0000246F 7303                    	jnc	short if67		; parse error
 27509                                  	;call	badparm_p		;  and show messages and end the search loop.
 27510                                  	;jmp	short sr67
 27511                                  	; 04/01/2023
 27512 00002471 E96A01                  	jmp	badparm_p_coff
 27513                                  if67:
 27514 00002474 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27515 00002477 7408                    	je	short en67		; then end the $endloop
 27516                                  
 27517                                  	; 14/12/2022
 27518                                  	; ds = cs
 27519                                  	;;mov	al,[cs:rv_dword]
 27520                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27521                                  	;mov	[cs:p_files],al		; save it temporarily
 27522                                  	;mov	al,[rv_dword]
 27523 00002479 A0[D21C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27524 0000247C A2[541D]                	mov	[p_files],al
 27525                                  
 27526 0000247F EBEB                    	jmp	short do67
 27527                                  en67:
 27528                                  	; 14/12/2022
 27529                                  	; ds = cs
 27530 00002481 A0[541D]                	mov	al,[p_files]
 27531 00002484 A2[9D02]                	mov	[FILES],al	
 27532                                  	;mov	al,[cs:p_files]
 27533                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27534                                  sr67:
 27535 00002487 E9F4FA                  	jmp	coff
 27536                                  
 27537                                  ; 04/04/2019 - Retro DOS v4.0
 27538                                  
 27539                                  ;------------------------------------------------------------------------------
 27540                                  ; lastdrive command
 27541                                  ;------------------------------------------------------------------------------
 27542                                  
 27543                                  ;******************************************************************************
 27544                                  ; function: parse the parameters of lastdrive= command. 		      *
 27545                                  ;									      *
 27546                                  ; input :								      *
 27547                                  ;	es:si -> parameters in command line.				      *
 27548                                  ; output:								      *
 27549                                  ;	set the variable num_cds.					      *
 27550                                  ;									      *
 27551                                  ; subroutines to be called:						      *
 27552                                  ;	sysinit_parse							      *
 27553                                  ; logic:								      *
 27554                                  ; {									      *
 27555                                  ;	set di points to ldrv_parms;					      *
 27556                                  ;	set dx,cx to 0; 						      *
 27557                                  ;	while (end of command line)					      *
 27558                                  ;	{ sysinit_parse;						      *
 27559                                  ;	  if (no error) then						      *
 27560                                  ;	     set num_cds to the returned value; 			      *
 27561                                  ;	  else	/*error exit*/						      *
 27562                                  ;	     error exit;						      *
 27563                                  ;	};								      *
 27564                                  ; };									      *
 27565                                  ;									      *
 27566                                  ;******************************************************************************
 27567                                  
 27568                                  tryl:
 27569 0000248A 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27570 0000248D 7523                    	jne	short tryp
 27571                                  
 27572                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27573                                  ;;ifdef	MULTI_CONFIG
 27574                                  ;       call    query_user      ; query the user if config_cmd
 27575                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27576                                  ;;endif
 27577                                  	; 14/12/2022
 27578                                  	; ds = cs
 27579                                  
 27580 0000248F BF[8C1D]                	mov	di,ldrv_parms
 27581 00002492 31C9                    	xor	cx,cx
 27582                                  	; 04/01/2023
 27583                                  	;mov	dx,cx
 27584                                  do73:
 27585 00002494 E8C901                  	call	sysinit_parse
 27586 00002497 7303                    	jnc	short if73	; parse error
 27587                                  	;call	badparm_p	;  and show messages and end the search loop.
 27588                                  	;jmp	short sr73
 27589                                  	; 04/01/2023
 27590 00002499 E94201                  	jmp	badparm_p_coff
 27591                                  if73:
 27592 0000249C 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27593 0000249F 7408                    	je	short en73	; then end the $endloop
 27594                                  
 27595                                  	; 14/12/2022
 27596                                  	; ds = cs
 27597                                  	;;mov	al,[cs:rv_dword]
 27598                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27599                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27600                                  
 27601                                  	;mov	al,[rv_dword]
 27602 000024A1 A0[D21C]                	mov	al,[rv_byte]
 27603 000024A4 A2[A01D]                	mov	[p_ldrv],al
 27604                                  
 27605 000024A7 EBEB                    	jmp	short do73
 27606                                  en73:
 27607                                  	; 14/12/2022
 27608                                  	; ds = cs
 27609 000024A9 A0[A01D]                	mov	al,[p_ldrv]
 27610 000024AC A2[A002]                	mov	[NUM_CDS],al
 27611                                  	;mov	al,[cs:p_ldrv]
 27612                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27613                                  sr73:
 27614 000024AF E9CCFA                  	jmp	coff
 27615                                  
 27616                                  ;--------------------------------------------------------------------------
 27617                                  ; setting drive parameters
 27618                                  ;--------------------------------------------------------------------------
 27619                                  
 27620                                  tryp:
 27621 000024B2 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27622 000024B5 7511                    	jne	short tryk
 27623                                  
 27624                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27625                                  ;;ifdef	MULTI_CONFIG
 27626                                  ;       call    query_user      ; query the user if config_cmd
 27627                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27628                                  ;;endif
 27629                                  
 27630 000024B7 E83708                  	call	parseline
 27631 000024BA 7209                    	jc	short trypbad
 27632 000024BC E85E07                  	call	setparms
 27633 000024BF E89207                  	call	diddleback
 27634                                  
 27635                                  ; No error check here, because setparms and diddleback have no error 
 27636                                  ; returns, and setparms as coded now can return with carry set. 
 27637                                  ;       jc	short trypbad
 27638                                  
 27639                                  	; 12/12/2022
 27640                                  	; cf = 0
 27641                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27642                                  	;jc	short trypbad
 27643                                  	
 27644 000024C2 E9B9FA                  	jmp	coff
 27645                                  trypbad:
 27646 000024C5 E9B701                  	jmp	badop
 27647                                  
 27648                                  ;--------------------------------------------------------------------------
 27649                                  ; setting internal stack parameters
 27650                                  ; stacks=m,n where
 27651                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27652                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27653                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27654                                  ;	any combinations that are not within the specified limits will
 27655                                  ;	result in "unrecognized command" error.
 27656                                  ;--------------------------------------------------------------------------
 27657                                  
 27658                                  ;**************************************************************************
 27659                                  ;									  *
 27660                                  ; function: parse the parameters of stacks= command.			  *
 27661                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27662                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27663                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27664                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27665                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27666                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27667                                  ;	    (or if "0,0" pair has been entered.)			  *
 27668                                  ; input :								  *
 27669                                  ;	es:si -> parameters in command line.				  *
 27670                                  ; output:								  *
 27671                                  ;	set the variables stack_count,stack_size.			  *
 27672                                  ;									  *
 27673                                  ; subroutines to be called:						  *
 27674                                  ;	sysinit_parse							  *
 27675                                  ; logic:								  *
 27676                                  ; {									  *
 27677                                  ;	set di points to stks_parms;					  *
 27678                                  ;	set dx,cx to 0; 						  *
 27679                                  ;	while (end of command line)					  *
 27680                                  ;	{ sysinit_parse;						  *
 27681                                  ;	  if (no error) then						  *
 27682                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27683                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27684                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27685                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27686                                  ;	     }								  *
 27687                                  ;	  else	/*error exit*/						  *
 27688                                  ;	     error exit;						  *
 27689                                  ;	};								  *
 27690                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27691                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27692                                  ;	 else error_exit;						  *
 27693                                  ; };									  *
 27694                                  ;**************************************************************************
 27695                                  
 27696                                  tryk:
 27697                                          ;if      stacksw
 27698                                  
 27699 000024C8 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27700 000024CB 7402                    	je	short do_tryk
 27701                                  skip_it4:
 27702 000024CD EB74                    	jmp	short trys	; 15/12/2022
 27703                                  do_tryk:
 27704                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27705                                  ;;ifdef	MULTI_CONFIG
 27706                                  ;       call    query_user              ; query the user if config_cmd
 27707                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27708                                  ;;endif
 27709                                  	; 14/12/2022
 27710                                  	; ds = cs
 27711                                  
 27712 000024CF BF[A11D]                	mov	di,stks_parms
 27713 000024D2 31C9                    	xor	cx,cx
 27714                                  	; 04/01/2023
 27715                                  	;mov	dx,cx
 27716                                  do79:
 27717 000024D4 E88901                  	call	sysinit_parse
 27718 000024D7 730B                    	jnc	short if79		; parse error
 27719                                  
 27720 000024D9 BA[8337]                	mov	dx,badstack		; "invalid stack parameter"
 27721 000024DC E8B80D                  	call	print			;  and show messages and end the search loop.
 27722 000024DF E8D101                  	call	error_line
 27723                                  	;jmp	sr79
 27724                                  	; 11/12/2022
 27725 000024E2 EB39                    	jmp	short sr79
 27726                                  if79:
 27727 000024E4 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27728 000024E7 7412                    	je	short en79		; then end the $endloop
 27729                                  
 27730                                  	; 14/12/2022
 27731                                  	; ds = cs
 27732                                  
 27733                                  	;;mov	ax,[cs:rv_dword]
 27734                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27735                                  	;mov	ax,[rv_dword]
 27736 000024E9 A1[D21C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27737                                  
 27738 000024EC 83F901                  	cmp	cx,1
 27739 000024EF 7505                    	jne	short if83
 27740                                  
 27741                                  	; 14/12/2022
 27742                                  	;mov	[cs:p_stack_count],ax
 27743                                  	;jmp	short en83
 27744 000024F1 A3[D61D]                	mov	[p_stack_count],ax
 27745 000024F4 EBDE                    	jmp	short do79
 27746                                  if83:
 27747                                  	; 14/12/2022
 27748                                  	;mov	[cs:p_stack_size],ax
 27749 000024F6 A3[D81D]                	mov	[p_stack_size],ax
 27750                                  en83:
 27751 000024F9 EBD9                    	jmp	short do79
 27752                                  en79:
 27753                                  	; 14/12/2022
 27754                                  	; ds = cs
 27755 000024FB A1[D61D]                	mov	ax,[p_stack_count]
 27756 000024FE 09C0                    	or	ax,ax
 27757 00002500 741E                    	jz	short if87		
 27758                                  
 27759                                  	; 14/12/2022
 27760                                  	;cmp	word [p_stack_count],0
 27761                                  	;;cmp	word [cs:p_stack_count],0
 27762                                  	;je	short if87
 27763                                  
 27764                                  	; 14/12/2022
 27765 00002502 83F808                  	cmp	ax, mincount ; 8
 27766                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27767                                  	; 15/12/2022
 27768 00002505 721F                    	jb	short en87
 27769 00002507 833E[D81D]20            	cmp	word [p_stack_size],minsize ; 32
 27770                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27771                                  	; 15/12/2022
 27772 0000250C 7218                    	jb	short en87
 27773                                  if94:
 27774                                  	; 14/12/2022
 27775                                  	; ds = cs
 27776                                  	; ax = [p_stack_count]
 27777                                  	;mov	ax,[p_stack_count]
 27778                                  	;;mov	ax,[cs:p_stack_count]
 27779 0000250E A3[8A02]                	mov	[stack_count],ax
 27780                                  	;mov	[cs:stack_count],ax
 27781                                  	;mov	ax,[cs:p_stack_size]
 27782 00002511 A1[D81D]                	mov	ax,[p_stack_size]
 27783                                  	;mov	[cs:stack_size],ax
 27784 00002514 A3[8C02]                	mov	[stack_size],ax
 27785                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27786 00002517 C706[8E02]FFFF          	mov	word [stack_addr],-1
 27787                                  sr79:
 27788 0000251D E95EFA                  	jmp	coff
 27789                                  
 27790                                  if87:
 27791                                  	; 14/12/2022
 27792 00002520 3906[D81D]              	cmp	[p_stack_size],ax ; 0
 27793 00002524 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27794                                  	;cmp	word [cs:p_stack_size],0
 27795                                  	;je	short if94
 27796                                  en87:
 27797                                  	; 15/12/2022
 27798                                  	; ([p_stack_count] is invalid, use default values)
 27799                                  	; 14/12/2022
 27800                                  	; ds = cs
 27801 00002526 C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27802 0000252C C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27803 00002532 C706[8E02]0000          	mov	word [stack_addr],0
 27804                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27805                                  	;				; reset to default value.
 27806                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27807                                  	;mov	word [cs:stack_addr],0
 27808                                  
 27809 00002538 BA[8337]                	mov	dx,badstack
 27810 0000253B E8590D                  	call	print
 27811 0000253E E87201                  	call	error_line
 27812 00002541 EBDA                    	jmp	short sr79
 27813                                  
 27814                                  ; 15/12/2022
 27815                                  %if 0
 27816                                  	mov	di,stks_parms
 27817                                  	xor	cx,cx
 27818                                  	; 04/01/2023
 27819                                  	;mov	dx,cx
 27820                                  do79:
 27821                                  	call	sysinit_parse
 27822                                  	jnc	short if79		; parse error
 27823                                  
 27824                                  	mov	dx,badstack		; "invalid stack parameter"
 27825                                  	call	print			;  and show messages and end the search loop.
 27826                                  	call	error_line
 27827                                  	;jmp	sr79
 27828                                  	; 11/12/2022
 27829                                  	jmp	short sr79
 27830                                  if79:
 27831                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27832                                  	je	short en79		; then end the $endloop
 27833                                  
 27834                                  	;mov	ax,[cs:rv_dword]
 27835                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27836                                  	cmp	cx,1
 27837                                  	jne	short if83
 27838                                  
 27839                                  	mov	[cs:p_stack_count],ax
 27840                                  	jmp	short en83
 27841                                  if83:
 27842                                  	mov	[cs:p_stack_size],ax
 27843                                  en83:
 27844                                  	jmp	short do79
 27845                                  en79:
 27846                                  	cmp	word [cs:p_stack_count],0
 27847                                  	je	short if87
 27848                                  
 27849                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27850                                  	jb	short ll88
 27851                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27852                                  	jnb	short if88
 27853                                  ll88:
 27854                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27855                                  if88:
 27856                                  	jmp	short en87
 27857                                  
 27858                                  	; 11/12/2022
 27859                                  if94:
 27860                                  	mov	ax,[cs:p_stack_count]
 27861                                  	mov	[cs:stack_count],ax
 27862                                  	mov	ax,[cs:p_stack_size]
 27863                                  	mov	[cs:stack_size],ax
 27864                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27865                                  sr79:
 27866                                  	jmp	coff
 27867                                  
 27868                                  if87:
 27869                                  	cmp	word [cs:p_stack_size],0
 27870                                  	je	short en87
 27871                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27872                                  en87:
 27873                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27874                                  	jne	short if94
 27875                                  
 27876                                  	mov	word [cs:stack_count],defaultcount ; 9
 27877                                  					; reset to default value.
 27878                                  	mov	word [cs:stack_size],defaultsize ; 128
 27879                                  	mov	word [cs:stack_addr],0
 27880                                  
 27881                                  	mov	dx,badstack
 27882                                  	call	print
 27883                                  	call	error_line
 27884                                  	jmp	short sr79
 27885                                  
 27886                                  %endif
 27887                                  
 27888                                  ; 11/12/2022
 27889                                  %if 0 
 27890                                  
 27891                                  if94:
 27892                                  	mov	ax,[cs:p_stack_count]
 27893                                  	mov	[cs:stack_count],ax
 27894                                  	mov	ax,[cs:p_stack_size]
 27895                                  	mov	[cs:stack_size],ax
 27896                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27897                                  sr79:
 27898                                  	jmp	coff
 27899                                  
 27900                                  %endif
 27901                                  
 27902                                  	;endif
 27903                                  
 27904                                  ;------------------------------------------------------------------------
 27905                                  ; shell command
 27906                                  ;------------------------------------------------------------------------
 27907                                  
 27908                                  trys:
 27909 00002543 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27910 00002546 753C                    	jne	short tryx
 27911                                  
 27912                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27913                                  ;;ifdef	MULTI_CONFIG
 27914                                  ;       call    query_user              ; query the user if config_cmd
 27915                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27916                                  ;       mov	byte [cs:newcmd],1
 27917                                  ;;endif
 27918                                  
 27919                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27920                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27921                                  	;mov	byte [cs:command_line+1],0
 27922                                  	; 15/12/2022
 27923                                  	; ds = cs
 27924 00002548 C606[AA02]00            	mov	byte [command_line+1],0
 27925                                  
 27926 0000254D BF[6E33]                        mov     di,commnd+1		; we already have the first char
 27927 00002550 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27928                                  storeshell:
 27929 00002553 E8990A                  	call	getchr
 27930 00002556 08C0                            or      al,al                   ; this is the normal case: "organize"
 27931 00002558 7419                            jz	short getshparms	; put a ZERO right after the filename
 27932                                  
 27933 0000255A 3C20                            cmp     al," "                  ; this may happen if there are no args
 27934 0000255C 7205                            jb	short endofshell	; I suppose...
 27935 0000255E 8805                    	mov	[di],al
 27936 00002560 47                      	inc	di
 27937                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27938                                          ;jb	short storeshell	; commnd (the filename)
 27939                                          ;jmp	short endofshell
 27940                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27941 00002561 EBF0                    	jmp	short storeshell
 27942                                  
 27943                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27944                                  ;getshparms:
 27945                                  ;	mov     byte [di],0		; zero-terminate the filename
 27946                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27947                                  ;
 27948                                  ;parmloop:
 27949                                  ;	call	getchr
 27950                                  ;	cmp	al," "
 27951                                  ;	jb	short endofparms
 27952                                  ;	mov	[di],al
 27953                                  ;	inc	di
 27954                                  ;	cmp     di,command_line+126
 27955                                  ;	jb	short parmloop
 27956                                  ;endofparms:
 27957                                  ;	mov     cx,di
 27958                                  ;	sub     cx,command_line+1
 27959                                  ;	mov     [cs:command_line],cl
 27960                                  ;
 27961                                  ;endofshell:
 27962                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27963                                  ;					; the command-line as the case may be)
 27964                                  ;skipline:
 27965                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27966                                  ;       je	short endofline		; the line: watch for ever-present LF
 27967                                  ;call	getchr
 27968                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27969                                  ;
 27970                                  ;endofline:
 27971                                  ;       jmp     conflp
 27972                                  
 27973                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27974                                  endofshell:
 27975 00002563 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27976                                  					; the command-line as the case may be)
 27977 00002566 E8860A                  	call	getchr
 27978                                  skipline:
 27979 00002569 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27980 0000256B 7403                    	je	short endofline		; the line: watch for ever-present LF
 27981 0000256D E87F0A                  	call	getchr
 27982                                  endofline:
 27983 00002570 E9E6F9                  	jmp     conflp
 27984                                  
 27985                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27986                                  getshparms:
 27987                                  	; 18/12/2022
 27988                                  	; al = 0
 27989 00002573 8805                    	mov	[di],al ; 0
 27990                                  	;mov	byte [di],0		; zero-terminate the filename
 27991 00002575 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27992                                  parmloop:
 27993 00002578 E8740A                  	call	getchr
 27994 0000257B 3C20                    	cmp	al," " ; 20h
 27995 0000257D 72E4                    	jb	short endofshell
 27996 0000257F 8805                    	mov	[di],al
 27997 00002581 47                      	inc	di
 27998 00002582 EBF4                    	jmp	short parmloop
 27999                                  
 28000                                  ;------------------------------------------------------------------------
 28001                                  ; fcbs command
 28002                                  ;------------------------------------------------------------------------
 28003                                  
 28004                                  ;************************************************************************
 28005                                  ; function: parse the parameters of fcbs= command.			*
 28006                                  ;									*
 28007                                  ; input :								*
 28008                                  ;	es:si -> parameters in command line.				*
 28009                                  ; output:								*
 28010                                  ;	set the variables fcbs,keep.					*
 28011                                  ;									*
 28012                                  ; subroutines to be called:						*
 28013                                  ;	sysinit_parse							*
 28014                                  ; logic:								*
 28015                                  ; {									*
 28016                                  ;	set di points to fcbs_parms;					*
 28017                                  ;	set dx,cx to 0; 						*
 28018                                  ;	while (end of command line)					*
 28019                                  ;	{ sysparse;							*
 28020                                  ;	  if (no error) then						*
 28021                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 28022                                  ;		   fcbs = result_val._$P_picked_val;			*
 28023                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 28024                                  ;		   keep = result_val._$P_picked_val;			*
 28025                                  ;	     }								*
 28026                                  ;	  else	/*error exit*/						*
 28027                                  ;	     error exit;						*
 28028                                  ;	};								*
 28029                                  ; };									*
 28030                                  ;************************************************************************
 28031                                  
 28032                                  tryx:
 28033 00002584 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 28034                                          ;jne	short try1
 28035                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28036 00002587 752F                    	jne	short tryy	; comment command
 28037                                  
 28038                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28039                                  ;;ifdef	MULTI_CONFIG
 28040                                  ;       call    query_user      ; query the user if config_cmd
 28041                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 28042                                  ;;endif
 28043                                  
 28044 00002589 BF[551D]                	mov	di,fcbs_parms
 28045 0000258C 31C9                    	xor	cx,cx
 28046                                  	; 04/01/2023
 28047                                  	;mov	dx,cx
 28048                                  do98:
 28049 0000258E E8CF00                  	call	sysinit_parse
 28050                                          ; 04/01/2023
 28051                                  	;jnc	short if98	; parse error
 28052                                          ;call	badparm_p	;  and show messages and end the search loop.
 28053                                  	;jmp	short sr98
 28054                                  	;------------------------
 28055                                  	; 04/01/2023
 28056 00002591 724B                    	jc	short badparm_p_coff
 28057                                  if98:
 28058 00002593 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28059 00002596 7412                    	je	short en98	; then end the $endloop
 28060                                  
 28061                                  	;;mov	al,[cs:rv_dword]
 28062                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28063                                  	; 15/12/2022
 28064                                  	; ds = cs
 28065 00002598 A0[D21C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28066 0000259B 83F901                  	cmp	cx,1		; the first positional?
 28067 0000259E 7505                    	jne	short if102
 28068                                  	;mov	[cs:p_fcbs],al
 28069                                  	; 15/12/2022
 28070 000025A0 A2[8A1D]                	mov	[p_fcbs],al
 28071                                  	;jmp	short en102
 28072 000025A3 EBE9                    	jmp	short do98
 28073                                  if102:
 28074                                  	;mov	[cs:p_keep],al
 28075                                  	; 15/12/2022
 28076 000025A5 A2[8B1D]                	mov	[p_keep],al
 28077                                  en102:
 28078 000025A8 EBE4                    	jmp	short do98
 28079                                  en98:
 28080                                  	; 15/12/2022
 28081                                  	; ds = cs
 28082 000025AA A0[8A1D]                	mov	al,[p_fcbs]
 28083 000025AD A2[9E02]                	mov	[FCBS],al
 28084 000025B0 C606[9F02]00            	mov	byte [KEEP],0
 28085                                  	;mov	al,[cs:p_fcbs]	 ; M017
 28086                                  	;mov	[cs:FCBS],al	 ; M017
 28087                                  	;mov	byte [cs:KEEP],0 ; M017
 28088                                  sr98:
 28089 000025B5 E9C6F9                  	jmp	coff
 28090                                  
 28091                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28092                                  ;-------------------------------------------------------------------------
 28093                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28094                                  ;		line number
 28095                                  ;-------------------------------------------------------------------------
 28096                                  
 28097                                  tryy:
 28098 000025B8 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28099 000025BB 750B                    	jne	short try0
 28100                                  
 28101                                  donothing:
 28102                                  	; 15/12/2022
 28103                                  	; ds = cs
 28104 000025BD FF0E[D603]              	dec	word [chrptr]
 28105 000025C1 FF06[D203]              	inc	word [count]
 28106                                  	; 02/11/2022
 28107                                  	;dec	word [cs:chrptr]
 28108                                  	;inc	word [cs:count]
 28109                                  
 28110 000025C5 E9B6F9                  	jmp	coff
 28111                                  
 28112                                  ;------------------------------------------------------------------------
 28113                                  ; rem command
 28114                                  ;------------------------------------------------------------------------
 28115                                  
 28116                                  try0:				; do nothing with this line.
 28117 000025C8 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 28118 000025CB 74F0                    	je	short donothing
 28119                                  
 28120                                  ; 07/04/2019 - Retro DOS v4.0
 28121                                  
 28122                                  ;-----------------------------------------------------------------------
 28123                                  ; switches command
 28124                                  ;-----------------------------------------------------------------------
 28125                                  
 28126                                  ;***********************************************************************
 28127                                  ;								       *
 28128                                  ; function: parse the option switches specified.		       *
 28129                                  ; note - this command is intended for the future use also.	       *
 28130                                  ; when we need to set system data flag,use this command.	       *
 28131                                  ;								       *
 28132                                  ; input :							       *
 28133                                  ;	es:si -> parameters in command line.			       *
 28134                                  ; output:							       *
 28135                                  ;	p_swit_k set if /k option chosen.			       *
 28136                                  ;								       *
 28137                                  ; subroutines to be called:					       *
 28138                                  ;	sysinit_parse						       *
 28139                                  ; logic:							       *
 28140                                  ; {								       *
 28141                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 28142                                  ;	set dx,cx to 0; 					       *
 28143                                  ;	while (end of command line)				       *
 28144                                  ;	{ sysinit_parse;					       *
 28145                                  ;	  if (no error) then					       *
 28146                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28147                                  ;		    p_swit_k = 1				       *
 28148                                  ;	       endif						       *
 28149                                  ;	  else {show error message;error exit}			       *
 28150                                  ;	};							       *
 28151                                  ; };								       *
 28152                                  ;								       *
 28153                                  ;***********************************************************************
 28154                                  
 28155                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28156                                  
 28157                                  try1:
 28158 000025CD 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28159 000025D0 7402                    	je	short do_try1	; switches= command entered?
 28160                                  skip_it5:
 28161                                  	;jmp	tryv
 28162                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28163 000025D2 EB7A                    	jmp	tryz
 28164                                  
 28165                                  do_try1:
 28166                                  
 28167                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28168                                  ;;ifdef	MULTI_CONFIG
 28169                                  ;       call    query_user      ; query the user if config_cmd
 28170                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28171                                  ;;endif
 28172                                  
 28173 000025D4 BF[EF1D]                	mov	di,swit_parms
 28174 000025D7 31C9                    	xor	cx,cx
 28175                                  	; 04/01/2023
 28176                                  	;mov	dx,cx
 28177                                  do110:
 28178 000025D9 E88400                  	call	sysinit_parse
 28179 000025DC 7306                    	jnc	short if110	; parse error
 28180                                  	;call	badparm_p	;  and show messages and end the search loop.
 28181                                  	;jmp	short sr110
 28182                                  	; -----------------------
 28183                                  	; 04/01/2023
 28184                                  badparm_p_coff:
 28185 000025DE E8AA00                  	call	badparm_p
 28186 000025E1 E99AF9                  	jmp	coff
 28187                                  	;------------------------
 28188                                  if110:
 28189 000025E4 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28190 000025E7 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28191                                  
 28192                                  	; 15/12/2022
 28193                                  	; ds = cs
 28194                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28195                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28196 000025E9 813E[D01C][071E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28197 000025EF 7507                    	jne	short if115	;				;M059
 28198                                  	; 15/12/2022
 28199 000025F1 C606[221E]01            	mov	byte [p_swit_k],1
 28200                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28201 000025F6 EBE1                    	jmp	short do110
 28202                                  if115:	
 28203                                  	; 15/12/2022							;M059
 28204                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28205                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28206 000025F8 813E[D01C][131E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28207 000025FE 7507                    	jne	short if116					;M059 M063
 28208                                  	; 15/12/2022
 28209 00002600 C606[231E]01            	mov	byte [p_swit_t],1
 28210                                  	;mov	byte [cs:p_swit_t],1				;M059
 28211 00002605 EBD2                    	jmp	short do110					;M059
 28212                                  if116:
 28213                                  	; 15/12/2022
 28214                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28215                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28216 00002607 813E[D01C][1F1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28217 0000260D 75CA                    	jne	short do110					;M063
 28218                                  	; 15/12/2022
 28219 0000260F C606[241E]01            	mov	byte [p_swit_w],1
 28220                                  	;mov	byte [cs:p_swit_w],1				;M063
 28221 00002614 EBC3                    	jmp	short do110					;M063
 28222                                  en110:
 28223                                  	; 15/12/2022
 28224                                  	; ds = cs
 28225 00002616 803E[221E]01            	cmp	byte [p_swit_k],1
 28226                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28227 0000261B 1E                      	push	ds
 28228                                  	;;mov	ax,Bios_Data
 28229                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28230                                  	; 21/10/2022
 28231 0000261C B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 28232 0000261F 8ED8                    	mov	ds,ax
 28233 00002621 750A                    	jne	short if117
 28234 00002623 C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 28235 00002628 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 28236                                  if117:
 28237                                  	; 15/12/2022
 28238                                  	; ds <> cs
 28239 0000262D 2EA0[231E]              	mov	al,[cs:p_swit_t]				;M059
 28240 00002631 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 28241                                  
 28242 00002634 2E803E[241E]00          	cmp	byte [cs:p_swit_w],0				;M063
 28243 0000263A 740E                    	je	short skip_dos_flag				;M063
 28244 0000263C 06                      	push	es
 28245 0000263D 53                      	push	bx
 28246 0000263E B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 28247 00002640 CD21                    	int	21h						;M063
 28248                                  			; DOS - 2+ internal - GET LIST OF LISTS
 28249                                  			; Return: ES:BX -> DOS list of lists
 28250                                  	;or	bytes [es:86h],2
 28251 00002642 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 28252 00002648 5B                      	pop	bx
 28253 00002649 07                      	pop	es
 28254                                  skip_dos_flag:							;M063
 28255 0000264A 1F                      	pop	ds
 28256                                  sr110:
 28257 0000264B E930F9                  	jmp	coff
 28258                                  
 28259                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28260                                  ;
 28261                                  ;tryv:
 28262                                  ;
 28263                                  ;;ifdef	MULTI_CONFIG
 28264                                  ;;------------------------------------------------------------------------
 28265                                  ;; set command (as in "set var=value<cr/lf>")
 28266                                  ;;------------------------------------------------------------------------
 28267                                  ;
 28268                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 28269                                  ;       jne	short tryn
 28270                                  ;       call    query_user      ; query the user if config_cmd
 28271                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 28272                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 28273                                  ;       jnc	short sr110	; no error
 28274                                  ;err:    
 28275                                  ;	call    error_line      ; whoops, display error in line XXX
 28276                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 28277                                  ;
 28278                                  ;;------------------------------------------------------------------------
 28279                                  ;; numlock command (as in "numlock=on|off")
 28280                                  ;;------------------------------------------------------------------------
 28281                                  ;tryn:
 28282                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 28283                                  ;       jne	short tryy            ;
 28284                                  ;       call    query_user      ; query thye user if config_cmd
 28285                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 28286                                  ;       call    set_numlock
 28287                                  ;       jc	short err
 28288                                  ;       jmp	short sr110	; all done
 28289                                  ;
 28290                                  ;;endif	;MULTI_CONFIG
 28291                                  
 28292                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28293                                  ;;-------------------------------------------------------------------------
 28294                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 28295                                  ;;		line number
 28296                                  ;;-------------------------------------------------------------------------
 28297                                  ;
 28298                                  ;tryy:
 28299                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 28300                                  ;	jne	short try0
 28301                                  ;donothing:
 28302                                  ;	dec	word [chrptr]
 28303                                  ;	inc	word [count]
 28304                                  ;	jmp	coff
 28305                                  ;
 28306                                  ;;------------------------------------------------------------------------
 28307                                  ;; rem command
 28308                                  ;;------------------------------------------------------------------------
 28309                                  ;
 28310                                  ;try0:				;do nothing with this line.
 28311                                  ;	cmp     ah,CONFIG_REM ; '0'
 28312                                  ;	je	short donothing
 28313                                  
 28314                                  ; 30/10/2022
 28315                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 28316                                  
 28317                                  ;------------------------------------------------------------------------
 28318                                  ; bogus command
 28319                                  ;------------------------------------------------------------------------
 28320                                  
 28321                                  tryz:
 28322 0000264E 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 28323                                  	;je	short donothing
 28324                                  	; 02/11/2022
 28325 00002651 740A                    	je	short tryz_donothing
 28326                                  
 28327 00002653 FF0E[D603]              	dec	word [chrptr]
 28328 00002657 FF06[D203]              	inc	word [count]
 28329 0000265B EB22                    	jmp	short badop
 28330                                  
 28331                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 28332                                  tryz_donothing:
 28333 0000265D E95DFF                  	jmp	donothing
 28334                                  
 28335                                  ; 07/04/2019 - Retro DOS v4.0
 28336                                  
 28337                                  ;------------------------------------------------------------------------------
 28338                                  
 28339                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28340                                  ;
 28341                                  ;
 28342                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 28343                                  ;;
 28344                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 28345                                  ;
 28346                                  ;CheckProtmanArena:
 28347                                  ;	push	es
 28348                                  ;	mov	ax,[cs:area]	; get our arena header
 28349                                  ;	dec	ax
 28350                                  ;	mov	es,ax
 28351                                  ;	add	ax,[es:3]	; find end of arena
 28352                                  ;	inc	ax
 28353                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 28354                                  ;	ja	short CheckProtmanDone
 28355                                  ;
 28356                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 28357                                  ;CheckProtmanDone:
 28358                                  ;	pop	es
 28359                                  ;	retn
 28360                                  
 28361                                  ;------------------------------------------------------------------------------
 28362                                  
 28363                                  sysinit_parse:
 28364                                  
 28365                                  ;------------------------------------------------------------------------------
 28366                                  ;set up registers for sysparse
 28367                                  ;in)	es:si -> command line in confbot
 28368                                  ;	di -> offset of the parse control definition.
 28369                                  ;
 28370                                  ;out)	calls sysparse.
 28371                                  ;	carry will set if parse error.
 28372                                  ;	*** the caller should check the eol condition by looking at ax
 28373                                  ;	*** after each call.
 28374                                  ;	*** if no parameters are found,then ax will contain a error code.
 28375                                  ;	*** if the caller needs to look at the synomym@ of the result,
 28376                                  ;	***  the caller should use cs:@ instead of es:@.
 28377                                  ;	cx register should be set to 0 at the first time the caller calls this
 28378                                  ;	 procedure.
 28379                                  ;	ax - exit code
 28380                                  ;	bl - terminated delimeter code
 28381                                  ;	cx - new positional ordinal
 28382                                  ;	si - set to pase scanned operand
 28383                                  ;	dx - selected result buffer
 28384                                  ;------------------------------------------------------------------------------
 28385                                  
 28386                                  	; 24/10/2022
 28387 00002660 06                      	push	es			;save es,ds
 28388 00002661 1E                      	push	ds
 28389                                  
 28390                                  	; 09/09/2023
 28391                                  	; ds = cs
 28392 00002662 8C06[1B14]              	mov	[badparm_seg],es	;save the pointer to the parm
 28393 00002666 8936[1914]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 28394                                  
 28395 0000266A 06                      	push	es
 28396 0000266B 1F                      	pop	ds			;now ds:si -> command line
 28397                                  
 28398 0000266C 0E                      	push	cs
 28399 0000266D 07                      	pop	es			;now es:di -> control definition
 28400                                  
 28401                                  	; 09/09/2023
 28402                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 28403                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 28404                                  
 28405                                  	;mov	dx,0
 28406                                  	; 04/01/2023
 28407 0000266E 29D2                    	sub	dx,dx ; 0
 28408 00002670 E850EE                  	call	SysParse
 28409                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 28410                                  	; 06/09/2023
 28411 00002673 21C0                    	and	ax,ax
 28412                                  
 28413                                  ;**cas note: when zero true after cmp, carry clear
 28414                                  
 28415                                  	;je	short ll4
 28416                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 28417                                  	; 12/12/2022
 28418 00002675 7405                    	je	short en4 ; cf=0
 28419 00002677 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 28420                                  	;jne	short if4
 28421                                  	; 12/12/2022
 28422 0000267A 7400                    	je	short en4 ; cf=0
 28423                                  	; 06/09/2023
 28424                                  	; cf=1
 28425                                  
 28426                                  ; 12/12/2022
 28427                                  ;ll4:
 28428                                  ;	; 12/12/2022
 28429                                  ;	; cf=0
 28430                                  ;	;clc
 28431                                  ;	jmp	short en4
 28432                                  
 28433                                  if4:
 28434                                  	; 24/10/2022
 28435                                  	; 06/09/2023 (cf=1)
 28436                                  	;stc
 28437                                  en4:
 28438 0000267C 1F                      	pop	ds
 28439 0000267D 07                      	pop	es
 28440 0000267E C3                      	retn
 28441                                  
 28442                                  ; 11/12/2022
 28443                                  %if 0
 28444                                  
 28445                                  ;----------------------------------------------------------------------------
 28446                                  ;
 28447                                  ; procedure : badop_p
 28448                                  ;
 28449                                  ;             same thing as badop,but will make sure to set ds register back
 28450                                  ;             to sysinitseg and return back to the caller.
 28451                                  ;
 28452                                  ;----------------------------------------------------------------------------
 28453                                  
 28454                                  badop_p:
 28455                                  	push	cs
 28456                                  	pop	ds		;set ds to configsys seg.
 28457                                  	mov	dx,badopm
 28458                                  	call	print
 28459                                          ;call	error_line
 28460                                  	;retn
 28461                                  	; 11/12/2022
 28462                                  	jmp	error_line
 28463                                  
 28464                                  %endif
 28465                                  
 28466                                  ;----------------------------------------------------------------------------
 28467                                  ;
 28468                                  ; label : badop
 28469                                  ;
 28470                                  ;----------------------------------------------------------------------------
 28471                                  
 28472                                  badop:	
 28473 0000267F BA[4436]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 28474 00002682 E8120C                  	call	print
 28475 00002685 E82B00                  	call	error_line	;show "error in config.sys ..." .
 28476 00002688 E9F3F8                  	jmp	coff
 28477                                  
 28478                                  ;----------------------------------------------------------------------------
 28479                                  ;
 28480                                  ; procedure : badparm_p
 28481                                  ;
 28482                                  ;             show "bad command or parameters - xxxxxx"
 28483                                  ;             in badparm_seg,badparm_off -> xxxxx
 28484                                  ;
 28485                                  ;----------------------------------------------------------------------------
 28486                                  
 28487                                  	; 24/10/2022
 28488                                  badparm_p:
 28489                                  	; 11/12/2022
 28490                                  	; ds = cs
 28491                                  	; 11/12/2022
 28492                                  	;push	ds ; *
 28493 0000268B 52                      	push	dx
 28494 0000268C 56                      	push	si
 28495                                  
 28496                                  	; 11/12/2022
 28497                                  	; ds = cs
 28498                                  	;push	cs
 28499                                  	;pop	ds
 28500                                  
 28501 0000268D BA[6B36]                	mov	dx,badparm
 28502 00002690 E8040C                  	call	print			; "bad command or parameters - "
 28503 00002693 C536[1914]              	lds	si,[badparm_ptr]
 28504                                  
 28505                                  ;	print "xxxx" until cr.
 28506                                  
 28507                                  do1:
 28508 00002697 8A14                    	mov	dl,[si]			; get next character
 28509 00002699 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 28510 0000269C 7407                    	je	short en1		; exit loop if so
 28511                                  
 28512 0000269E B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 28513 000026A0 CD21                    	int	21h			; display character
 28514 000026A2 46                      	inc	si			; next character
 28515 000026A3 EBF2                    	jmp	short do1
 28516                                  en1:
 28517 000026A5 0E                      	push	cs
 28518 000026A6 1F                      	pop	ds
 28519                                  
 28520 000026A7 BA[6836]                	mov	dx,crlfm
 28521 000026AA E8EA0B                  	call	print
 28522 000026AD E80300                  	call	error_line
 28523                                  
 28524 000026B0 5E                      	pop	si
 28525 000026B1 5A                      	pop	dx
 28526                                  	; 11/12/2022
 28527                                  	;pop	ds ; *
 28528                                  badparmp_ret:
 28529 000026B2 C3                      	retn
 28530                                  
 28531                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 28532                                  %if 0
 28533                                  
 28534                                  ;----------------------------------------------------------------------------
 28535                                  ;
 28536                                  ; procedure : getchr
 28537                                  ;
 28538                                  ;----------------------------------------------------------------------------
 28539                                  
 28540                                  	; 24/10/2022
 28541                                  getchr:
 28542                                  	; 12/12/2022
 28543                                  	;push	cx
 28544                                  	;mov	cx,[count]
 28545                                  	;jcxz	nochar
 28546                                  	; 12/12/2022
 28547                                  	cmp	word [count],1 
 28548                                  	jb	short nochar ; cf=1 ([count] = 0)
 28549                                  	
 28550                                  	mov	si,[chrptr]
 28551                                  	mov	al,[es:si]
 28552                                  	dec	word [count]
 28553                                  	inc	word [chrptr]
 28554                                  	; 12/12/202
 28555                                  	; cf=0
 28556                                  	;clc
 28557                                  ;get_ret:
 28558                                  	;pop	cx
 28559                                  	;retn
 28560                                  nochar: 
 28561                                  	; 12/12/2022
 28562                                  	; cf=1
 28563                                  	;stc
 28564                                  	;jmp	short get_ret
 28565                                  	
 28566                                  	retn
 28567                                  %endif
 28568                                  
 28569                                  ; 11/12/2022
 28570                                  %if 0
 28571                                  
 28572                                  ;----------------------------------------------------------------------------
 28573                                  ;
 28574                                  ; procedure : incorrect_order
 28575                                  ;
 28576                                  ;             show "incorrect order in config.sys ..." message.
 28577                                  ;
 28578                                  ;----------------------------------------------------------------------------
 28579                                  
 28580                                  incorrect_order:
 28581                                  	mov	dx,badorder
 28582                                  	call	print
 28583                                  	call	showlinenum
 28584                                  	retn
 28585                                  
 28586                                  %endif
 28587                                  
 28588                                  ;----------------------------------------------------------------------------
 28589                                  ;
 28590                                  ; procedure : error_line
 28591                                  ;
 28592                                  ;             show "error in config.sys ..." message.
 28593                                  ;
 28594                                  ;----------------------------------------------------------------------------
 28595                                  
 28596                                  	; 11/12/2022
 28597                                  	; 24/10/2022
 28598                                  error_line:
 28599                                  	; 11/12/2022
 28600                                  	; ds = cs
 28601                                  	;push	cs
 28602                                  	;pop	ds
 28603                                  
 28604 000026B3 BA[A037]                	mov	dx,errorcmd
 28605 000026B6 E8DE0B                  	call	print
 28606                                  	;call	showlinenum
 28607                                  	;retn
 28608                                  	; 11/12/2022
 28609                                  	;jmp	short shortlinemum
 28610                                  
 28611                                  ;----------------------------------------------------------------------------
 28612                                  ;
 28613                                  ; procedure : showlinenum
 28614                                  ;
 28615                                  ; convert the binary linecount to decimal ascii string in showcount
 28616                                  ; and display showcount at the current curser position.
 28617                                  ; in.) linecount
 28618                                  ;
 28619                                  ; out) the number is printed.
 28620                                  ;
 28621                                  ;----------------------------------------------------------------------------
 28622                                  
 28623                                  	; 11/12/2022
 28624                                  	; ds = cs
 28625                                  	; 24/10/2022
 28626                                  showlinenum:
 28627 000026B9 06                      	push	es
 28628                                  	; 11/12/2022
 28629                                  	;push	ds
 28630 000026BA 57                      	push	di
 28631                                  
 28632 000026BB 0E                      	push	cs
 28633 000026BC 07                      	pop	es		; es=cs
 28634                                  
 28635                                  	; 11/12/2022
 28636                                  	;push	cs
 28637                                  	;pop	ds
 28638                                  
 28639 000026BD BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28640 000026C0 B90A00                  	mov	cx,10		; decimal divide factor
 28641                                  	;mov	ax,[cs:linecount]
 28642                                  	; 11/12/2022
 28643 000026C3 A1[2B03]                	mov	ax,[linecount]
 28644                                  sln_loop:
 28645                                  	; 11/12/2022
 28646 000026C6 39C8                    	cmp	ax,cx ; < 10 ?
 28647                                  	;cmp	ax,10		; < 10?
 28648 000026C8 720C                    	jb	short sln_last
 28649                                  
 28650 000026CA 31D2                    	xor	dx,dx
 28651 000026CC F7F1                    	div	cx	; cx = 10
 28652 000026CE 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28653 000026D1 8815                    	mov	[di],dl
 28654 000026D3 4F                      	dec	di
 28655 000026D4 EBF0                    	jmp	short sln_loop
 28656                                  
 28657                                  sln_last:
 28658 000026D6 0C30                    	or	al,30h	; "0"
 28659 000026D8 8805                    	mov	[di],al
 28660 000026DA 89FA                    	mov	dx,di
 28661 000026DC E8B80B                  	call	print		; show it.
 28662 000026DF 5F                      	pop	di
 28663                                  	; 11/12/2022
 28664                                  	;pop	ds
 28665 000026E0 07                      	pop	es
 28666 000026E1 C3                      	retn
 28667                                  
 28668                                  ; 07/04/2019 - Retro DOS v4.0
 28669                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28670                                  
 28671                                  ;----------------------------------------------------------------------------
 28672                                  ;
 28673                                  ; procedure : ProcDOS
 28674                                  ;
 28675                                  ;	Process the result of DOS= parsing
 28676                                  ;
 28677                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28678                                  ;				= 2 for DOS=LOW
 28679                                  ;				= 3 for DOS=UMB
 28680                                  ;				= 4 for DOS=NOUMB
 28681                                  ;----------------------------------------------------------------------------
 28682                                  
 28683                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28684                                  	; (SYTSINIT:2AB5h)
 28685                                  ProcDOS:
 28686                                  	; 01/01/2023
 28687                                  	; ds = cs
 28688 000026E2 30E4                    	xor	ah,ah
 28689                                  	;;mov	al,[cs:result_val_itag]
 28690                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28691                                  	; 04/01/2023
 28692 000026E4 A0[CF1C]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28693 000026E7 48                      	dec	ax
 28694 000026E8 7415                    	jz	short pd_hi
 28695 000026EA 48                      	dec	ax
 28696 000026EB 740E                    	jz	short pd_lo
 28697 000026ED 48                      	dec	ax
 28698 000026EE 7405                    	jz	short pd_umb
 28699                                  	;;mov	byte [cs:DevUMB],0
 28700                                  	; 18/12/2022
 28701                                  	;mov	byte [cs:DevUMB],ah ; 0
 28702                                  	; 01/01/2023
 28703 000026F0 8826[761E]              	mov	byte [DevUMB],ah ; 0
 28704 000026F4 C3                      	retn
 28705                                  pd_umb:
 28706                                  	; 04/01/2023
 28707 000026F5 C606[761E]FF            	mov	byte [DevUMB],0FFh
 28708                                  	;mov	byte [cs:DevUMB],0FFh
 28709 000026FA C3                      	retn
 28710                                  pd_lo:
 28711                                  	; 04/01/2023
 28712 000026FB A2[6A02]                	mov	[runhigh],al ; 0
 28713                                  	; 18/12/2022
 28714                                  	;mov	[cs:runhigh],al ; 0
 28715                                  	;;mov	byte [cs:runhigh],0
 28716 000026FE C3                      	retn
 28717                                  pd_hi:
 28718                                  	; 04/01/2023
 28719 000026FF C606[6A02]FF            	mov	byte [runhigh],0FFh
 28720                                  	;mov	byte [cs:runhigh],0FFh
 28721                                  limx:	; 11/12/2022
 28722 00002704 C3                      	retn
 28723                                  
 28724                                  ;----------------------------------------------------------------------------
 28725                                  ;
 28726                                  ; procedure : LieInt12Mem
 28727                                  ;
 28728                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28729                                  ;		alloclim set to the limit of low memory.
 28730                                  ;
 28731                                  ;	Output : none
 28732                                  ;
 28733                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28734                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28735                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28736                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28737                                  ;	converted into Ks and stored in 40:13h
 28738                                  ;
 28739                                  ;----------------------------------------------------------------------------
 28740                                  
 28741                                  LieInt12Mem:
 28742                                  	; 11/12/2022
 28743                                  	; ds = cs
 28744 00002705 A1[A302]                	mov	ax,[ALLOCLIM]
 28745                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28746                                  					; assuming that it is 3Com
 28747 00002708 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28748 0000270B 740A                    	jz	short lim_set		; yes, lie to him differently
 28749                                  	; 13/05/2019
 28750                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28751                                  	;je	short limx		; no, don't lie
 28752                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28753                                  	; 11/12/2022
 28754                                  	; ds = cs
 28755 0000270D 803E[851E]00            	cmp	byte [DeviceHi],0
 28756 00002712 74F0                    	je	short limx
 28757 00002714 A1[6C1E]                	mov	ax,[DevLoadEnd]
 28758                                  lim_set:
 28759                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28760                                  	; 11/12/2022
 28761                                  	;call	SetInt12Mem
 28762                                  ;limx:
 28763                                  	;retn
 28764                                  	
 28765                                  	;jmp	short SetInt12Mem 
 28766                                  
 28767                                  ;----------------------------------------------------------------------------
 28768                                  ;
 28769                                  ; procedure : SetInt12Mem
 28770                                  ;
 28771                                  ;	Input : AX = Memory size to be set (in paras)
 28772                                  ;	Output : none
 28773                                  ;
 28774                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28775                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28776                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28777                                  ;	restoring the value of 40:13
 28778                                  ;
 28779                                  ;----------------------------------------------------------------------------
 28780                                  
 28781                                  	; 01/11/2022
 28782                                  SetInt12Mem:
 28783 00002717 1E                      	push	ds
 28784 00002718 BB4000                  	mov	bx,40h
 28785 0000271B 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28786 0000271D 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28787 00002721 2E891E[891E]            	mov	[cs:OldInt12Mem],bx	; save it
 28788 00002726 B106                    	mov	cl,6
 28789 00002728 D3E8                    	shr	ax,cl			; convert paras into Ks
 28790 0000272A A31300                  	mov	[13h],ax		; Lie
 28791 0000272D 2EC606[881E]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28792 00002733 1F                      	pop	ds
 28793                                  ;limx:
 28794 00002734 C3                      	retn
 28795                                  
 28796                                  ;----------------------------------------------------------------------------
 28797                                  ;
 28798                                  ; procedure : TrueInt12Mem
 28799                                  ;
 28800                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28801                                  ;			  = 0ffh if we are lying
 28802                                  ;		OldInt12Mem = Saved value of 40:13h
 28803                                  ;
 28804                                  ;	Output : none
 28805                                  ;
 28806                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28807                                  ;	and resets the flag which indicates that we were lying
 28808                                  ;
 28809                                  ;----------------------------------------------------------------------------
 28810                                  
 28811                                  TrueInt12Mem:
 28812                                  	; 11/12/2022
 28813                                  	; ds = cs
 28814 00002735 803E[881E]00            	cmp	byte [Int12Lied],0
 28815                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28816                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28817                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28818 0000273A 7412                    	je	short timx		; no, we weren't
 28819                                  	; 18/12/2022
 28820 0000273C B84000                  	mov	ax,40h
 28821 0000273F 8826[881E]              	mov	[Int12Lied],ah ; 0
 28822                                  	;mov	byte [Int12Lied],0
 28823                                  	;mov	byte [cs:Int12Lied],0
 28824 00002743 1E                      	push	ds
 28825                                  	;mov	ax,40h
 28826 00002744 8ED8                    	mov	ds,ax
 28827 00002746 2EA1[891E]              	mov	ax,[cs:OldInt12Mem]
 28828 0000274A A31300                  	mov	[13h],ax		; restore INT 12 memory
 28829 0000274D 1F                      	pop	ds
 28830                                  timx:
 28831 0000274E C3                      	retn
 28832                                  
 28833                                  ;----------------------------------------------------------------------------
 28834                                  ;
 28835                                  ; procedure : IsIt3Com?
 28836                                  ;
 28837                                  ;	Input : DevEntry = Seg:0 of device driver
 28838                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28839                                  ;		 else Zero flag is reset
 28840                                  ;
 28841                                  ;----------------------------------------------------------------------------
 28842                                  
 28843                                  IsIt3Com:
 28844                                  	; 11/12/2022
 28845                                  	; ds = cs
 28846 0000274F 1E                      	push	ds
 28847 00002750 06                      	push	es
 28848 00002751 56                      	push	si
 28849                                  	; 11/12/2022
 28850 00002752 C536[6E1E]              	lds	si,[DevEntry]
 28851                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28852 00002756 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28853 00002759 0E                      	push	cs
 28854 0000275A 07                      	pop	es
 28855 0000275B BF[8B1E]                	mov	di,ThreeComName
 28856 0000275E B90800                  	mov	cx,8			; name length
 28857 00002761 F3A6                    	rep	cmpsb
 28858 00002763 5E                      	pop	si
 28859 00002764 07                      	pop	es
 28860 00002765 1F                      	pop	ds
 28861 00002766 C3                      	retn
 28862                                  
 28863                                  ;M020 : BEGIN
 28864                                  ;----------------------------------------------------------------------------
 28865                                  
 28866                                  UpdatePDB:
 28867 00002767 1E                      	push	ds
 28868 00002768 B462                    	mov	ah,62h
 28869 0000276A CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28870 0000276C 8EDB                    	mov	ds,bx
 28871 0000276E 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28872                                  	;mov	[2],bx
 28873 00002773 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28874 00002777 1F                      	pop	ds
 28875 00002778 C3                      	retn
 28876                                  
 28877                                  ; M020 : END
 28878                                  
 28879                                  ;----------------------------------------------------------------------------
 28880                                  
 28881                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28882                                  
 28883                                  %if 0
 28884                                  
 28885                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28886                                  ;include highexit.inc	; umb's, etc
 28887                                  
 28888                                  ; ----------------------------------------------------------------------
 28889                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28890                                  ; ----------------------------------------------------------------------
 28891                                  ; 07/04/2019 - Retro DOS v4.0
 28892                                  
 28893                                  ;******************************************************************************
 28894                                  ;
 28895                                  ; This file contains routines needed to parse and implement user-given
 28896                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28897                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28898                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28899                                  ;
 28900                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28901                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28902                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28903                                  ;    DH/LH module opts
 28904                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28905                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28906                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28907                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28908                                  ; available during the load.
 28909                                  ;
 28910                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28911                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28912                                  ; upper-memory block which was not specified by the user... in addition, if
 28913                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28914                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28915                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28916                                  ; free any UMBs so allocated.
 28917                                  ;
 28918                                  ; When a device driver loads, there is the additional problem of allocating its
 28919                                  ; initial load site; this should be restricted to the first UMB specified on
 28920                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28921                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28922                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28923                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28924                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28925                                  ;
 28926                                  ;******************************************************************************
 28927                                  
 28928                                  SWTCH	equ	'/'		; Switch character
 28929                                  
 28930                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28931                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28932                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28933                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28934                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28935                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28936                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28937                                  
 28938                                  CR	equ	0Dh		; Carriage Return
 28939                                  LF	equ	0Ah		; Line Feed
 28940                                  TAB	equ	09h		; Tab character (^I)
 28941                                  
 28942                                  ; -----------------------------------------------------------------------------
 28943                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28944                                  ; -----------------------------------------------------------------------------
 28945                                  ; ENTRY:       None
 28946                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28947                                  ; ERROR EXIT:  None
 28948                                  ; USES:        Flags, variables in highvar.inc
 28949                                  ; -----------------------------------------------------------------------------
 28950                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28951                                  ; are largely ignored, but it is initialized nonetheless.
 28952                                  ; -----------------------------------------------------------------------------
 28953                                  
 28954                                  InitVar:
 28955                                  	;pushreg <ax, cx, di, es>
 28956                                  	push	ax
 28957                                  	push	cx
 28958                                  	push	di
 28959                                  	push	es
 28960                                  
 28961                                  	;dataseg es			;Point ES into appropriate data segment
 28962                                  	push	cs
 28963                                  	pop	es
 28964                                  
 28965                                  	xor	ax,ax
 28966                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28967                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28968                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28969                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28970                                  					;Later is the # of the 1st spec'd UMB
 28971                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28972                                  
 28973                                  	cld
 28974                                  
 28975                                  	mov	cx,MAXUMB ; 16		;For each entry
 28976                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28977                                  	rep	stosb			;	Store 0
 28978                                  
 28979                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28980                                  	mov	di,UmbSize		;on the UmbSize array,
 28981                                  	rep	stosw			;	Store 0
 28982                                  
 28983                                  	;normseg es			; Return ES
 28984                                  
 28985                                  	;popreg	<es, di, cx, ax>
 28986                                  	pop	es
 28987                                  	pop	di
 28988                                  	pop	cx
 28989                                  	pop	ax	 	
 28990                                  
 28991                                  	retn
 28992                                  
 28993                                  ; -----------------------------------------------------------------------------
 28994                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28995                                  ; -----------------------------------------------------------------------------
 28996                                  ; ENTRY   : None
 28997                                  ; EXIT    : None
 28998                                  ; ERROR   : None
 28999                                  ; USES    : Flags, fm_umb, fm_strat
 29000                                  ; -----------------------------------------------------------------------------
 29001                                  
 29002                                  FixMem:
 29003                                  	push	ax
 29004                                  	push	bx
 29005                                  	push	cx
 29006                                  	push	dx
 29007                                  	push	es
 29008                                  
 29009                                  	call	fm_link		; Link in UMBs
 29010                                  
 29011                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 29012                                  	jc	short fmX	; (if couldn't get it, leave now).
 29013                                  
 29014                                  	mov	es,ax		; It returns in AX, so move it to ES.
 29015                                  
 29016                                  ; - Walk MCB Chain ------------------------------------------------------------
 29017                                  
 29018                                  	xor	dx,dx		; We're keeping the address of the last MCB
 29019                                  	mov 	cx,dx		; in CX... and the last owner
 29020                                  	inc	dx		; in dx as we go through the loop:
 29021                                  
 29022                                  ; ------------------------------------------
 29023                                  ; FM10--DX  = last MCB's owner's PSP address
 29024                                  ;       CX  = last MCB's address (segment)
 29025                                  ; ------------------------------------------
 29026                                  
 29027                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 29028                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 29029                                  	or	bx,dx			; dx was owner of previous MCB
 29030                                  	jnz	short fm30		; If not both zero, don't cat.
 29031                                  
 29032                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 29033                                  
 29034                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 29035                                  	mov	es,cx			; Go back to prev MCB's address
 29036                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 29037                                  
 29038                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 29039                                  	;add	bx,1			; And add one for the header
 29040                                  	; 14/08/2023
 29041                                  	inc	bx
 29042                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 29043                                  
 29044                                  	; ---------------------------------------------------------------------
 29045                                  
 29046                                  fm30:	mov	cx,es			; Put this address on the stack
 29047                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 29048                                  
 29049                                  	mov	bx,es			; Move to the next MCB
 29050                                  	add	bx,[es:ARENA.SIZE]
 29051                                  	inc	bx
 29052                                  	mov	es,bx
 29053                                  
 29054                                  	;cmp	al,'Z'
 29055                                  	cmp	al,arena_signature_end
 29056                                  	jne	short fm10		; If signature != 'Z', there are more.
 29057                                  fmX:	
 29058                                  	call	fm_unlink		; Unlink UMBs
 29059                                  
 29060                                  	pop	es
 29061                                  	pop	dx
 29062                                  	pop	cx
 29063                                  	pop	bx
 29064                                  	pop	ax
 29065                                  
 29066                                  	retn
 29067                                  
 29068                                  ; -----------------------------------------------------------------------------
 29069                                  ;*** fm_link - links UMBs not already linked in
 29070                                  ; -----------------------------------------------------------------------------
 29071                                  ; ENTRY:    None
 29072                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 29073                                  ; ERROR:    None
 29074                                  ; USES:     AX, BX, fm_umb
 29075                                  ; -----------------------------------------------------------------------------
 29076                                  
 29077                                  fm_link:
 29078                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 29079                                  	int	21h			; Current link-state is now in al
 29080                                  
 29081                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 29082                                  	;
 29083                                  	;push	es
 29084                                  	;push	cs
 29085                                  	;pop	es
 29086                                  	;mov	[es:fm_umb],al
 29087                                  	;pop	es
 29088                                  	
 29089                                  	mov	[cs:fm_umb],al
 29090                                  
 29091                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29092                                  	mov	bx,1
 29093                                  	int	21h
 29094                                  	retn
 29095                                  
 29096                                  ; -----------------------------------------------------------------------------
 29097                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 29098                                  ; -----------------------------------------------------------------------------
 29099                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 29100                                  ; EXIT:     None
 29101                                  ; ERROR:    None
 29102                                  ; USES:     AX, BX
 29103                                  ; -----------------------------------------------------------------------------
 29104                                  
 29105                                  fm_unlink:
 29106                                  	xor	bx,bx
 29107                                  	
 29108                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29109                                  	;
 29110                                  	;push	ds
 29111                                  	;push	cs
 29112                                  	;pop	ds
 29113                                  	;mov	bl,[fm_umb]	
 29114                                  	;pop	ds
 29115                                  	
 29116                                  	mov	bl,[cs:fm_umb]
 29117                                  
 29118                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29119                                  	int	21h			; so just use that, and call int 21h
 29120                                  	retn
 29121                                  
 29122                                  ; 08/04/2019 - Retro DOS v4.0
 29123                                  
 29124                                  ; -----------------------------------------------------------------------------
 29125                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29126                                  ; laid out in highvar.inc
 29127                                  ; -----------------------------------------------------------------------------
 29128                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29129                                  ; EXIT:     ES:SI points to first character in child program name
 29130                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29131                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29132                                  ; -----------------------------------------------------------------------------
 29133                                  ; Error codes (in AX if carry set on return):
 29134                                  ;
 29135                                  PV_InvArg	equ	1	; Invalid argument passed
 29136                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29137                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29138                                  ;
 29139                                  ; This routine exects ES:SI to point to a string much like the following:
 29140                                  ;    "/S/L:1,200;2 module options"
 29141                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29142                                  ; required, though that's what this routine is supposed to parse.
 29143                                  ;
 29144                                  optS		equ	'S'	; /S
 29145                                  optL		equ	'L'	; /L:...
 29146                                  ;
 29147                                  ; -----------------------------------------------------------------------------
 29148                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29149                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29150                                  ;     lh /l:1,1000;2 print/d:lpt2
 29151                                  ; the arguments would look like (one per line):
 29152                                  ;     lh
 29153                                  ;     /l
 29154                                  ;     1
 29155                                  ;     1000
 29156                                  ;     2
 29157                                  ;     print
 29158                                  ;     /d
 29159                                  ;     :lpt2
 29160                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29161                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29162                                  ; of the number of arguments LH will need to skip in order to get to the
 29163                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29164                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29165                                  ; for:
 29166                                  ;    Each /L
 29167                                  ;    Each /S (there should be only one)
 29168                                  ;    Each UMB number (they follow ":" or ";")
 29169                                  ;    Each UMB size   (they follow ",")
 29170                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29171                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29172                                  ; -----------------------------------------------------------------------------
 29173                                  
 29174                                  ParseVar:
 29175                                  	;pushreg <di, ds, es>
 29176                                  	push	di
 29177                                  	push	ds
 29178                                  	push	es
 29179                                  
 29180                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 29181                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 29182                                  	cld
 29183                                  
 29184                                  ; ------------------------------------------------
 29185                                  ; PV10--ES:SI = any whitespace on the command-line
 29186                                  ; ------------------------------------------------
 29187                                  
 29188                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 29189                                  	call	isWhite
 29190                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 29191                                  	;cmp	al,'/'
 29192                                  	cmp	al,SWTCH
 29193                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 29194                                  
 29195                                  	dec	si		; Backup--it's now "odule options", and we need
 29196                                  	clc			; that "m" we just read (or whatever it is).
 29197                                  	jmp	short pvX	; Then return with carry clear == we're done.
 29198                                  
 29199                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 29200                                  	;toUpper al		; So we make it upper-case, and...
 29201                                  	and	al,0DFh
 29202                                  	;cmp	al,'S'
 29203                                  	cmp	al,optS		; just read 'S'?
 29204                                  	jne	short pv30
 29205                                  
 29206                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 29207                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29208                                  
 29209                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29210                                  	;
 29211                                  	;push	es
 29212                                  	;push	cs
 29213                                  	;pop	es
 29214                                  	;mov	[es:fUmbTiny],1	
 29215                                  	;pop	es
 29216                                  
 29217                                  	mov	byte [cs:fUmbTiny],1
 29218                                  
 29219                                  	jmp	short pv10	; possibly even "/L...".
 29220                                  
 29221                                  pv30:	;cmp	al,'L'
 29222                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 29223                                  	jne	short pvE1		; switch!
 29224                                  
 29225                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29226                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29227                                  
 29228                                  	call	parseL
 29229                                  	jnc	short pv10	; If no carry, go back and look for more
 29230                                  
 29231                                  	dec	si		; Else, back up and exit.
 29232                                  	jmp	short pvErr	; AX has already been set by parseL
 29233                                  
 29234                                  pvE1:	;mov	ax,3
 29235                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 29236                                  pvErr:	dec	si
 29237                                  	dec	si
 29238                                  	stc
 29239                                  pvX:	;popreg	<es, ds, di>
 29240                                  	pop	es
 29241                                  	pop	ds
 29242                                  	pop	di
 29243                                  	retn
 29244                                  
 29245                                  ; -----------------------------------------------------------------------------
 29246                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 29247                                  ; -----------------------------------------------------------------------------
 29248                                  ; ENTRY:    ES:SI points to colon
 29249                                  ; EXIT:     ES:SI points to first character not parsed
 29250                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 29251                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 29252                                  ; -----------------------------------------------------------------------------
 29253                                  ; If the string here is terminated with anything other than whitespace or a
 29254                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 29255                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 29256                                  ; makes sure the app /L: is reported as being the culprit.
 29257                                  ; -----------------------------------------------------------------------------
 29258                                  
 29259                                  parseL:
 29260                                  	lodsb
 29261                                  	cmp	al,':'		; Make sure they did /L:
 29262                                  	jne	short plE1	; If they didn't, return with carry set.
 29263                                  
 29264                                  ; ------------------------------------------
 29265                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 29266                                  ; ------------------------------------------
 29267                                  
 29268                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 29269                                  	jc	short plE2	; And error if it's a bad number.
 29270                                  	call	convUMB		; Convert any address to a UMB number
 29271                                  
 29272                                  	mov	cl,al		; Remember the UMB number
 29273                                  	call	stowUMB		; Mark this UMB # as used;
 29274                                  	jc	short plE2	; If it was already marked, it'll error
 29275                                  
 29276                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 29277                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29278                                  
 29279                                  	lodsb
 29280                                  	cmp	al,';'		; Did "umb;" ?
 29281                                  	je	short pl10	; Yep: go back and get another UMB.
 29282                                  
 29283                                  	call	isWhite		; Did "umb " ?
 29284                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 29285                                  
 29286                                  	call	isEOL		; Did "umb" ?
 29287                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29288                                  
 29289                                  	;cmp	al,'/'
 29290                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 29291                                  	je	short plSwX	; If so, back up ES:SI one character and return
 29292                                  
 29293                                  	cmp	al,','		; Did "umb," ?
 29294                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 29295                                  
 29296                                  ; --- Read a size -------------------------------------------------------------
 29297                                  
 29298                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 29299                                  	jc	short plE1	; And error if it's a bad size.
 29300                                  
 29301                                  	call	toPara		; Convert from bytes to paragraphs
 29302                                  
 29303                                  	call	stowSiz		; CL still has the UMB number for this routine
 29304                                  
 29305                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 29306                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 29307                                  
 29308                                  	lodsb
 29309                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 29310                                  	je	short pl10	;
 29311                                  
 29312                                  	call	isWhite		; Did it end with whitespace?
 29313                                  	jz	short plX	; If so, we're done here--go back.
 29314                                  
 29315                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 29316                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 29317                                  
 29318                                  	;cmp	al,'/'
 29319                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 29320                                  	je	short plSwX	; If so, again, we're done here.
 29321                                  plE1:	
 29322                                  	;mov	ax,1
 29323                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 29324                                  	dec	si
 29325                                  	stc
 29326                                  	retn
 29327                                  
 29328                                  plE2:	;mov	ax,2
 29329                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 29330                                  	; 12/12/2022
 29331                                  	; cf=1
 29332                                  	;stc
 29333                                  	retn
 29334                                  plSwX:	
 29335                                  	dec	si		; If we hit a '/' character, back up one char
 29336                                  				; so the whitespace checker will see it too.
 29337                                  plX:	; 12/12/2022
 29338                                  	; cf=0
 29339                                  	;clc			; Then just return with carry clear, so
 29340                                  	retn			; ParseVar will go about its business.
 29341                                  
 29342                                  ; -----------------------------------------------------------------------------
 29343                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 29344                                  ; -----------------------------------------------------------------------------
 29345                                  ; ENTRY:    None
 29346                                  ; EXIT:     None
 29347                                  ; ERROR:    None
 29348                                  ; USES:     fm_argc, flags
 29349                                  ; -----------------------------------------------------------------------------
 29350                                  
 29351                                  ;incArgc:
 29352                                  	;push	ax
 29353                                  
 29354                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 29355                                  
 29356                                  	;mov	al,[cs:fm_argc]
 29357                                  
 29358                                  	;inc	al		; Increment it,
 29359                                  
 29360                                  	;;putdata fm_argc, al	; And store it right back.
 29361                                  
 29362                                  	;mov	[cs:fm_argc],al
 29363                                  
 29364                                  	;pop	ax
 29365                                  	;retn
 29366                                  
 29367                                  ; -----------------------------------------------------------------------------
 29368                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 29369                                  ; -----------------------------------------------------------------------------
 29370                                  ; ENTRY:    AL contains character to test
 29371                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 29372                                  ; ERROR:    None
 29373                                  ; USES:     ZF
 29374                                  ; -----------------------------------------------------------------------------
 29375                                  
 29376                                  isEOL:
 29377                                  	cmp	al,0		; Null-terminator
 29378                                  	je	short ieX
 29379                                  	cmp	al,CR ; 0Dh	; Carriage Return
 29380                                  	je	short ieX
 29381                                  	cmp	al,LF ; 0Ah	; LineFeed
 29382                                  ieX:	
 29383                                  	retn
 29384                                  
 29385                                  ; -----------------------------------------------------------------------------
 29386                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 29387                                  ; -----------------------------------------------------------------------------
 29388                                  ; ENTRY:    AL contains character to test
 29389                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 29390                                  ; ERROR:    None
 29391                                  ; USES:     ZF
 29392                                  ; -----------------------------------------------------------------------------
 29393                                  
 29394                                  isWhite:
 29395                                  	cmp	al,' '		; Space
 29396                                  	je	short iwX
 29397                                  	cmp	al,'='		; Equals (treat as whitespace)
 29398                                  	je	short iwX
 29399                                  	cmp	al,tab ; 9	; Tab
 29400                                  iwX:	
 29401                                  	retn
 29402                                  
 29403                                  ; -----------------------------------------------------------------------------
 29404                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 29405                                  ; -----------------------------------------------------------------------------
 29406                                  ; ENTRY:    AL contains UMB number
 29407                                  ; EXIT:     None
 29408                                  ; ERROR:    None
 29409                                  ; USES:     Flags, variables in highvar.inc
 29410                                  ; -----------------------------------------------------------------------------
 29411                                  
 29412                                  unMarkUMB:
 29413                                  	push	ax
 29414                                  	push	bx
 29415                                  	push	di
 29416                                  	push	es
 29417                                  
 29418                                  	push	cs
 29419                                  	pop	es
 29420                                  
 29421                                  	xor	ah,ah
 29422                                  	mov	bx,ax
 29423                                  
 29424                                  	; 19/04/2019
 29425                                  	
 29426                                  	;mov	byte [es:bx+UmbUsed],0
 29427                                  	mov	[es:bx+UmbUsed],ah ; 0
 29428                                  
 29429                                  	cmp	[es:UmbLoad],al
 29430                                  	jne	short umu10
 29431                                  
 29432                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 29433                                  	mov	[es:UmbLoad],ah ; 0
 29434                                  umu10:	
 29435                                  	pop	es
 29436                                  	pop	di
 29437                                  	pop	bx
 29438                                  	pop	ax
 29439                                  	retn
 29440                                  
 29441                                  ; -----------------------------------------------------------------------------
 29442                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 29443                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 29444                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 29445                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 29446                                  ; -----------------------------------------------------------------------------
 29447                                  ; ENTRY:    AL contains UMB number, as specified by the user
 29448                                  ; EXIT:     None
 29449                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 29450                                  ; USES:     AX, Flags, variables in highvar.inc
 29451                                  ; -----------------------------------------------------------------------------
 29452                                  
 29453                                  stowUMB:
 29454                                  	cmp	al,MAXUMB ; 16
 29455                                  	jb	short su10
 29456                                  	stc
 29457                                  	retn			; Ooops-- UMB>=MAXUMB
 29458                                  su10:	
 29459                                  	push	bx
 29460                                  	push	di
 29461                                  	push	si
 29462                                  	push	ds
 29463                                  	push	es
 29464                                  	push	cs
 29465                                  	pop	es
 29466                                  	push	cs
 29467                                  	pop	ds
 29468                                  	
 29469                                  	;cmp	byte [UmbLoad],0FFh
 29470                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 29471                                  	jne	short su20
 29472                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 29473                                  su20:	
 29474                                  	or	al,al		; If they gave UMB 0, there's really nothing
 29475                                  	jz	short su30	; that we should do here.
 29476                                  
 29477                                  	mov	bl,al
 29478                                  	xor	bh,bh
 29479                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 29480                                  
 29481                                  	xchg	[es:bx+UmbUsed],al
 29482                                  
 29483                                  	or	al,al		; If it was already 1, then al==1... and that
 29484                                  	jz	short su30	; means an error.
 29485                                  
 29486                                  	stc			; OOOPS!  This one's been used before.  :(
 29487                                  su30:	
 29488                                  	pop	es
 29489                                  	pop	ds
 29490                                  	pop	si
 29491                                  	pop	di
 29492                                  	pop	bx
 29493                                  	retn
 29494                                  
 29495                                  ; -----------------------------------------------------------------------------
 29496                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 29497                                  ; -----------------------------------------------------------------------------
 29498                                  ; ENTRY:    CL contains UMB number, AX contains size
 29499                                  ; EXIT:     None
 29500                                  ; ERROR:    None
 29501                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 29502                                  ; -----------------------------------------------------------------------------
 29503                                  
 29504                                  ; 13/05/2019
 29505                                  
 29506                                  stowSiz:
 29507                                  	push	bx
 29508                                  	;push	di ; ?
 29509                                  	push	es
 29510                                  
 29511                                  	push	cs
 29512                                  	pop	es	
 29513                                  
 29514                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 29515                                  	mov	bh,0			;     bx==UMB number, AX==size
 29516                                  	shl	bl,1			;     bx==offset into array, AX=size
 29517                                  	mov	[es:bx+UmbSize],ax	; Store the size
 29518                                  	
 29519                                  	pop	es
 29520                                  	;pop	di ; ?
 29521                                  	pop	bx
 29522                                  
 29523                                  	retn
 29524                                  
 29525                                  ; -----------------------------------------------------------------------------
 29526                                  ;*** toDigit - converts a character-digit to its binary counterpart
 29527                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 29528                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 29529                                  ; A-F are considered valid iff gnradix is 16.
 29530                                  ; -----------------------------------------------------------------------------
 29531                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 29532                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 29533                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 29534                                  ; USES:     CL, Flags
 29535                                  ; -----------------------------------------------------------------------------
 29536                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29537                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29538                                  ; will be 10 or 16.
 29539                                  ; -----------------------------------------------------------------------------
 29540                                  
 29541                                  gnradix:
 29542                                  	dw	0		; Must be a word--16x16 multiplication
 29543                                  
 29544                                  toDigit:
 29545                                  	cmp	word [cs:gnradix],16
 29546                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 29547                                  
 29548                                  toDigit_hex:
 29549                                  	cmp	cl,'a'	; 61h
 29550                                  	jb	short td10
 29551                                  	cmp	cl,'f'	; 66h
 29552                                  	ja	short tdE	; Nothing valid above 'z' at all...
 29553                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29554                                  	;clc			; <- CLC is implicit from last SUB
 29555                                  	retn
 29556                                  td10:	
 29557                                  	cmp	cl,'A'  ; 41h
 29558                                  	jb	short td20	; Below 'A'?  Not a letter...
 29559                                  	cmp	cl,'F'	; 46h
 29560                                  	ja	short tdE	; Above 'F'?  Not a digit.
 29561                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29562                                  	;clc			; <- CLC is implicit from last SUB
 29563                                  	retn
 29564                                  toDigit_dec:
 29565                                  td20:	
 29566                                  	cmp	cl,'0'		; If less than zero,
 29567                                  	;jb	short tdE	; Done.
 29568                                  	jb	short tdEr ; 08/04/2019
 29569                                  	cmp	cl,'9'		; Or, if greater than nine,
 29570                                  	ja	short tdE	; Done.
 29571                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29572                                  	;clc			; <- CLC is implicit from last SUB
 29573                                  	retn
 29574                                  tdE:	
 29575                                  	stc
 29576                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29577                                  	retn
 29578                                  
 29579                                  ; -----------------------------------------------------------------------------
 29580                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29581                                  ; -----------------------------------------------------------------------------
 29582                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29583                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29584                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29585                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29586                                  ; -----------------------------------------------------------------------------
 29587                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29588                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29589                                  ; will be 10 or 16.
 29590                                  ; -----------------------------------------------------------------------------
 29591                                  
 29592                                  ; 08/04/2019 - Retro DOS v4.0
 29593                                  
 29594                                  GetXNum:
 29595                                  	;pushreg <bx, cx, ds>
 29596                                  	push	bx
 29597                                  	push	cx
 29598                                  	push	ds
 29599                                  
 29600                                  	cld
 29601                                  	xor	ax,ax
 29602                                  	xor	bx,bx
 29603                                  	xor	cx,cx
 29604                                  	xor	dx,dx			; Start with 0 (makes sense)
 29605                                  
 29606                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29607                                  
 29608                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29609                                  	;call	toDigit
 29610                                  	call	toDigit_dec
 29611                                  	jc	short gxnE		; If it's not a digit, leave now.
 29612                                  
 29613                                  	or	cl,cl
 29614                                  	jnz	short gxn20		; Doesn't have '0x'
 29615                                  	mov	cl,[es:si+1]
 29616                                  	cmp	cl,'x'			; Either 'x'...
 29617                                  	je	short gxn10
 29618                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29619                                  	jne	short gxn20
 29620                                  
 29621                                  gxn10:	
 29622                                  	mov	word [cs:gnradix], 16
 29623                                  	inc	si			; Since we read "0x", march over it.
 29624                                  	inc	si
 29625                                  
 29626                                  ; ------------------------------------------------------
 29627                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29628                                  ;        DX:AX = current total
 29629                                  ;        BX    = 0
 29630                                  ;        CH    = 0
 29631                                  ; ------------------------------------------------------
 29632                                  
 29633                                  gxn20:	
 29634                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29635                                  	inc	si
 29636                                  
 29637                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29638                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29639                                  
 29640                                  	call	mul32		; Multiply DX:AX by gnradix
 29641                                  	jc	short gxnX	; (if it's too big, error out)
 29642                                  
 29643                                  	add	ax,cx		; Add the digit
 29644                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29645                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29646                                  	;jmp	short gxn20
 29647                                  	jnc	short gxn20
 29648                                  gxnE:	
 29649                                  	;stc			; In this case, we need to set the carry
 29650                                  	jmp	short gxnX	; and leave--there were no digits given.
 29651                                  gxnQ:	
 29652                                  	dec	si		; Don't read in the offensive character.
 29653                                  	clc			; And clear carry, so they know it's okay.
 29654                                  gxnX:	
 29655                                  	pop	ds
 29656                                  	pop	cx
 29657                                  	pop	bx
 29658                                  	retn
 29659                                  
 29660                                  ; -----------------------------------------------------------------------------
 29661                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29662                                  ; -----------------------------------------------------------------------------
 29663                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29664                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29665                                  ; ERROR:   Carry set if number was too large
 29666                                  ; USES:    Flags, AX, DX
 29667                                  ; -----------------------------------------------------------------------------
 29668                                  
 29669                                  mul32:
 29670                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29671                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29672                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29673                                  	jc	short m32E	; Too big?
 29674                                  
 29675                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29676                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29677                                  
 29678                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29679                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29680                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29681                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29682                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29683                                  	retn
 29684                                  m32E:	
 29685                                  	pop	ax
 29686                                  	retn
 29687                                  
 29688                                  ; -----------------------------------------------------------------------------
 29689                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29690                                  ; -----------------------------------------------------------------------------
 29691                                  ; ENTRY:   DX:AX = the number to be divided
 29692                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29693                                  ; ERROR:   None
 29694                                  ; USES:    Flags, AX, DX
 29695                                  ; -----------------------------------------------------------------------------
 29696                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29697                                  ;       can't ensure a 386 host machine. Sorry.
 29698                                  ; -----------------------------------------------------------------------------
 29699                                  
 29700                                  toPara:
 29701                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29702                                  
 29703                                  	mov	cl,4		;
 29704                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29705                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29706                                  	mov	cl,12
 29707                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29708                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29709                                  
 29710                                  	pop	cx
 29711                                  	retn
 29712                                  
 29713                                  ; -----------------------------------------------------------------------------
 29714                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29715                                  ; -----------------------------------------------------------------------------
 29716                                  ; ENTRY:  Nothing
 29717                                  ; EXIT:   AX contains 0x9FFF for most systems
 29718                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29719                                  ; USES:   Flags, AX
 29720                                  ; -----------------------------------------------------------------------------
 29721                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29722                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29723                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29724                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29725                                  ; -----------------------------------------------------------------------------
 29726                                  
 29727                                  UmbHead:
 29728                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29729                                  
 29730                                  	;push	si ; ?
 29731                                  	;push	ds ; ? 
 29732                                  	;push	es
 29733                                  	;push	bx ; *	
 29734                                  
 29735                                  	; 09/04/2019
 29736                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29737                                  
 29738                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29739                                  	int	21h
 29740                                  
 29741                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29742                                  	cmp	ax,0FFFFh
 29743                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29744                                  
 29745                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29746                                  	;jmp	short uhX
 29747                                  	; 12/12/2022
 29748                                  	retn
 29749                                  uhE:	
 29750                                  	stc
 29751                                  uhX:	
 29752                                  	;pop	bx ; *
 29753                                  	;pop	es
 29754                                  	;pop	ds ; ?
 29755                                  	;pop	si ; ?
 29756                                  	retn
 29757                                  
 29758                                  ; -----------------------------------------------------------------------------
 29759                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29760                                  ; -----------------------------------------------------------------------------
 29761                                  ; ENTRY:  ES:0 should point to a valid MCB
 29762                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29763                                  ; USES:   Flags
 29764                                  ; -----------------------------------------------------------------------------
 29765                                  
 29766                                  isSysMCB:
 29767                                  	;push	ax
 29768                                  
 29769                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29770                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29771                                  	;je	short ism10
 29772                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29773                                  	;;je	short ism10
 29774                                  	;;jmp	short ismX		; Anything else isn't.
 29775                                  	;jne	short ismX
 29776                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29777                                  	jne	short ismX 
 29778                                  ism10:	
 29779                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29780                                  	;cmp	ax,'SC' ; 4353h
 29781                                  	cmp	word [es:ARENA.NAME],'SC'
 29782                                  ismX:	
 29783                                  	;pop	ax
 29784                                  	retn
 29785                                  
 29786                                  ; 09/04/2019 - Retro DOS v4.0
 29787                                  
 29788                                  ; -----------------------------------------------------------------------------
 29789                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29790                                  ; -----------------------------------------------------------------------------
 29791                                  ; ENTRY:  AX contains a segment address
 29792                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29793                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29794                                  ; USES:   Flags, AX
 29795                                  ; -----------------------------------------------------------------------------
 29796                                  ; An address in the following areas is treated as:
 29797                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29798                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29799                                  ;      ...
 29800                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29801                                  ; -----------------------------------------------------------------------------
 29802                                  
 29803                                  AddrToUmb:
 29804                                  	push	cx
 29805                                  	push	dx
 29806                                  	push	es
 29807                                  
 29808                                  	mov	dx,ax		; DX = address to search for
 29809                                  
 29810                                  	call	UmbHead		; AX = first segment
 29811                                  	jc	short atuE	; If it couldn't get it, error out.
 29812                                  
 29813                                  	; 14/08/2023
 29814                                  	;mov	es,ax ; *	; ES = first UMB segment
 29815                                  	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 29816                                  
 29817                                  	; 22/07/2023
 29818                                  atu10:
 29819                                  	mov	es,ax ; * ; ** ; 14/08/2023
 29820                                  ; ----------------------------------------
 29821                                  ; ATU10--ES - Current MCB address
 29822                                  ;        DX - Address given for conversion
 29823                                  ;        CX - Current UMB #
 29824                                  ; ----------------------------------------
 29825                                  
 29826                                  ;atu10:	
 29827                                  	;mov	ax,es ; * ; 14/08/2023
 29828                                          cmp	ax,dx		; Present segment >= given segment?
 29829                                  	jae	short atuX	; Yep--done.
 29830                                  
 29831                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29832                                  	jnz	short atu20
 29833                                  
 29834                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29835                                  atu20:	
 29836                                  	;mov	al,[es:ARENA.SIGNATURE]
 29837                                  	;cmp	al,arena_signature_end  ; 'Z'
 29838                                  	; 14/08/2023
 29839                                  	; ax = es
 29840                                  	;mov	ax,es ; **
 29841                                  	add	ax,[es:ARENA.SIZE]
 29842                                  	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 29843                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29844                                  
 29845                                  	;NextMCB es,ax
 29846                                  
 29847                                  	;mov	ax,es ; **
 29848                                  	;;add	ax,[es:3]
 29849                                  	;add	ax,[es:ARENA.SIZE]
 29850                                  	inc	ax
 29851                                  	; 14/08/2023
 29852                                  	;mov	es,ax ; *
 29853                                  	jmp	short atu10
 29854                                  
 29855                                  ; -----------------------------------------------------------------------------
 29856                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29857                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29858                                  ; -----------------------------------------------------------------------------
 29859                                  
 29860                                  atu30:	
 29861                                  	; 14/08/2023
 29862                                  	; ax = es + [es:ARENA.SIZE] 
 29863                                  	;mov	ax,es ; **
 29864                                  	;add	ax,[es:ARENA.SIZE] ; **
 29865                                  	cmp	ax,dx		; Present >= given?
 29866                                  	jae	short atuX	; Yep! It _was_ inside.
 29867                                  atuE:	
 29868                                  	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 29869                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29870                                  atuX:	
 29871                                  	mov	ax,cx		; Return the UMB number in AX
 29872                                  	
 29873                                  	pop	es	
 29874                                  	pop	dx
 29875                                  	pop	cx
 29876                                  	retn
 29877                                  
 29878                                  ; -----------------------------------------------------------------------------
 29879                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29880                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29881                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29882                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29883                                  ; -----------------------------------------------------------------------------
 29884                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29885                                  ; EXIT:   AX will contain a UMB number
 29886                                  ; ERROR:  None
 29887                                  ; USES:   Flags, AX
 29888                                  ; -----------------------------------------------------------------------------
 29889                                  
 29890                                  convUMB:
 29891                                  	cmp	word [cs:gnradix],16
 29892                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29893                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29894                                  ;cmp	ax,0FFFFh
 29895                                  	;jne	short cu10
 29896                                  	;inc	ax		; If too high, ignore it (make it conventional)
 29897                                  	; 14/08/2023
 29898                                  	inc	ax
 29899                                  	jz	short cu10	; If too high, ignore it (make it conventional)
 29900                                  	dec	ax
 29901                                  cu10:	
 29902                                  	retn
 29903                                  
 29904                                  ; -----------------------------------------------------------------------------
 29905                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29906                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29907                                  ; of the usual HIGH_FIRST.  See the code.
 29908                                  ; -----------------------------------------------------------------------------
 29909                                  ; ENTRY:  None
 29910                                  ; EXIT:   None
 29911                                  ; ERROR:  None
 29912                                  ; USES:   Flags, fm_umb, fm_strat
 29913                                  ; -----------------------------------------------------------------------------
 29914                                  
 29915                                  setUMBs:
 29916                                  	push	ax
 29917                                  	push	bx
 29918                                  	call	fm_link
 29919                                  	pop	bx
 29920                                  	pop	ax
 29921                                  	retn
 29922                                  
 29923                                  ; -----------------------------------------------------------------------------
 29924                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29925                                  ; -----------------------------------------------------------------------------
 29926                                  ; ENTRY:  None
 29927                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29928                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29929                                  ; ERROR:  None
 29930                                  ; USES:   Flags, fm_strat, fm_umb
 29931                                  ; -----------------------------------------------------------------------------
 29932                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29933                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29934                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29935                                  ; such that the load UMB is too small, and shouldn't be used.
 29936                                  ; -----------------------------------------------------------------------------
 29937                                  
 29938                                  loadLow:
 29939                                  	;push	ds
 29940                                  	;push	cs		; Point DS into appropriate data segment
 29941                                  	;pop	ds	
 29942                                  
 29943                                  	;mov	al,[UmbLoad]
 29944                                  	mov	al,[cs:UmbLoad]
 29945                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29946                                  	jne	short ll10
 29947                                  
 29948                                  	stc
 29949                                  ll15:
 29950                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29951                                  	;stc
 29952                                  	;jmp	short llX
 29953                                  	retn
 29954                                  ll10:	
 29955                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29956                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29957                                  
 29958                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29959                                  	retn
 29960                                  
 29961                                  	;mov	al,1
 29962                                  	;clc
 29963                                  ;llX:
 29964                                  	;pop	ds		; Return DS to where it was
 29965                                  	;retn
 29966                                  
 29967                                  ; -----------------------------------------------------------------------------
 29968                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29969                                  ; -----------------------------------------------------------------------------
 29970                                  ; ENTRY:  None
 29971                                  ; EXIT:   None
 29972                                  ; ERROR:  None
 29973                                  ; USES:   Flags, fm_strat, fm_umb
 29974                                  ; -----------------------------------------------------------------------------
 29975                                  
 29976                                  HideUMBs:
 29977                                  	push	ax
 29978                                  	push	cx
 29979                                  	push	ds
 29980                                  	push	es
 29981                                  
 29982                                  	call	UmbTest		; See if we REALLY linked in anything...
 29983                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29984                                  
 29985                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29986                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29987                                  
 29988                                  	;putdata fInHigh,1	; Remember that we're now running high
 29989                                  	mov	byte [cs:fInHigh],1
 29990                                  
 29991                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29992                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29993                                  
 29994                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29995                                  	je	short husX	; then we shouldn't do this loop:
 29996                                  
 29997                                  	xor	cx,cx
 29998                                  
 29999                                  ; -----------------------------------------------
 30000                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 30001                                  ; -----------------------------------------------
 30002                                  
 30003                                  hus10:	inc	cx		; For each UMB:
 30004                                  	cmp	cx,MAXUMB ; 16
 30005                                  	jae	short hus20
 30006                                  
 30007                                  	mov	al,cl		; (stopping as soon as we're outside of the
 30008                                  	push	es
 30009                                  	call	findUMB		; valid range of UMBs)
 30010                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 30011                                  	jc	short hus20
 30012                                  
 30013                                  	call	_hideUMB_	; hide what we need to hide.
 30014                                  
 30015                                  	jmp	short hus10
 30016                                  hus20:	
 30017                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 30018                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 30019                                  
 30020                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 30021                                  	jnz	short husX	; If not, we're done.
 30022                                  
 30023                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30024                                  husX:	
 30025                                  	pop	es
 30026                                  	pop	ds
 30027                                  	pop	cx
 30028                                  	pop	ax
 30029                                  	retn
 30030                                  
 30031                                  ; -----------------------------------------------------------------------------
 30032                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30033                                  ; -----------------------------------------------------------------------------
 30034                                  ; ENTRY:  None
 30035                                  ; EXIT:   AL == load UMB
 30036                                  ; ERROR:  None
 30037                                  ; USES:   Flags, AX
 30038                                  ; -----------------------------------------------------------------------------
 30039                                  
 30040                                  ;GetLoadUMB:
 30041                                  ;	;getdata al, UmbLoad
 30042                                  ;	push	ds
 30043                                  ;	push	cs
 30044                                  ;	pop	ds
 30045                                  ;	mov	al,[UmLoad]
 30046                                  ;	pop	ds
 30047                                  ;	retn
 30048                                  
 30049                                  ; -----------------------------------------------------------------------------
 30050                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30051                                  ; -----------------------------------------------------------------------------
 30052                                  ; ENTRY:  None
 30053                                  ; EXIT:   AX == load UMB minimum size
 30054                                  ; ERROR:  None
 30055                                  ; USES:   Flags, AX
 30056                                  ; -----------------------------------------------------------------------------
 30057                                  
 30058                                  GetLoadSize:
 30059                                  	; 09/04/2019 - Retro DOS v4.0
 30060                                  	mov	al,[cs:UmbLoad]
 30061                                  	jmp	short GetSize
 30062                                  
 30063                                  	;push	bx
 30064                                  	;;push	si
 30065                                  	;push	ds
 30066                                  	;push	cs
 30067                                  	;pop	ds
 30068                                  
 30069                                  	;mov	al,[UmbLoad]
 30070                                  
 30071                                  	;xor	ah,ah			;    ax==UMB
 30072                                  	;mov	bx,UmbSize		;    bx==array
 30073                                  	;shl	al,1	                ;    ax==offset
 30074                                  	;;add	ax,bx			;    ax==element index
 30075                                  	;;mov	si,ax			; ds:si==element index
 30076                                  
 30077                                  	;;lodsw				;    ax==size
 30078                                  
 30079                                  	;add	bx,ax
 30080                                  	;mov	ax,[bx]
 30081                                  
 30082                                  	;pop	ds
 30083                                  	;;pop	si
 30084                                  	;pop	bx
 30085                                  	;retn
 30086                                  
 30087                                  ; -----------------------------------------------------------------------------
 30088                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 30089                                  ; -----------------------------------------------------------------------------
 30090                                  ; ENTRY:  AL == a UMB number
 30091                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 30092                                  ; ERROR:  None
 30093                                  ; USES:   Flags, AX
 30094                                  ; -----------------------------------------------------------------------------
 30095                                  
 30096                                  GetSize:
 30097                                  	; 09/04/2019 - Retro DOS v4.0
 30098                                  
 30099                                  	push	bx
 30100                                  	;push	si
 30101                                  	;push	ds
 30102                                  	;push	cs
 30103                                  	;pop	ds
 30104                                  
 30105                                  	xor	ah,ah			;    ax==UMB
 30106                                  	mov	bx,UmbSize		;    bx==array
 30107                                  	shl	al,1	                ;    ax==offset
 30108                                  	;add	ax,bx			;    ax==element index
 30109                                  	;mov	si,ax			; ds:si==element index
 30110                                  
 30111                                  	;lodsw				;    ax==size
 30112                                  
 30113                                  	add	bx,ax
 30114                                  	;mov	ax,[bx]
 30115                                  	mov	ax,[cs:bx]
 30116                                  
 30117                                  	;pop	ds
 30118                                  	;pop	si
 30119                                  	pop	bx
 30120                                  	retn
 30121                                  
 30122                                  ; -----------------------------------------------------------------------------
 30123                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 30124                                  ; -----------------------------------------------------------------------------
 30125                                  ; ENTRY:   AL == new load UMB
 30126                                  ; EXIT:    None
 30127                                  ; ERROR:   None
 30128                                  ; USES:    Flags, AX
 30129                                  ; -----------------------------------------------------------------------------
 30130                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 30131                                  ;          time you would ever need this, so that's okay.
 30132                                  ; -----------------------------------------------------------------------------
 30133                                  
 30134                                  ;StoLoadUMB:
 30135                                  ;	;putdata UmbLoad, al
 30136                                  ;	push	es
 30137                                  ;	push	cs
 30138                                  ;	pop	es
 30139                                  ;	mov	[es:UmbLoad],al
 30140                                  ;	pop	es
 30141                                  ;	retn
 30142                                  
 30143                                  ; -----------------------------------------------------------------------------
 30144                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 30145                                  ; -----------------------------------------------------------------------------
 30146                                  ; ENTRY:  AL == new load size
 30147                                  ; EXIT:   None
 30148                                  ; ERROR:  None
 30149                                  ; USES:   Flags, AX
 30150                                  ; -----------------------------------------------------------------------------
 30151                                  
 30152                                  StoLoadSize:
 30153                                  	push	dx
 30154                                  
 30155                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 30156                                  	;
 30157                                  	;push	ds
 30158                                  	;push	cs
 30159                                  	;pop	ds
 30160                                  	;mov	dl,[UmbLoad]
 30161                                  	;pop	ds	
 30162                                  
 30163                                  	mov	dl,[cs:UmbLoad]
 30164                                  
 30165                                  	cmp	dl,UNSPECIFIED ; 0FFh
 30166                                  	je	short sls10
 30167                                  
 30168                                  	call	stowSiz			; We've got a function to do just this
 30169                                  sls10:	
 30170                                  	pop	dx
 30171                                  	retn
 30172                                  
 30173                                  ; -----------------------------------------------------------------------------
 30174                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 30175                                  ; -----------------------------------------------------------------------------
 30176                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 30177                                  ; EXIT:     None; free elements in UMB marked as hidden
 30178                                  ; ERROR:    None
 30179                                  ; USES:     Flags
 30180                                  ; -----------------------------------------------------------------------------
 30181                                  
 30182                                  hideUMB:
 30183                                  	push	ax
 30184                                  	push	es
 30185                                  
 30186                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 30187                                  	jc	short huX
 30188                                  
 30189                                  ; ------------------------------------------------
 30190                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 30191                                  ;            we're not in the same UMB, so exit.
 30192                                  ; ------------------------------------------------
 30193                                  
 30194                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30195                                  	jz	short huX	; If it is, we've finished the UMB.
 30196                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 30197                                  	or	word [es:ARENA.OWNER],0
 30198                                  	jnz	short hu20
 30199                                  
 30200                                  	call	hideMCB
 30201                                  hu20:	
 30202                                  	mov	al,[es:ARENA.SIGNATURE]
 30203                                  	cmp	al,arena_signature_end  ;'Z'
 30204                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 30205                                  
 30206                                  	;NextMCB es, ax		; Go on forward.
 30207                                  	mov     ax,es
 30208                                  	;add	ax,[es:3]
 30209                                  	add     ax,[es:ARENA.SIZE]
 30210                                  	inc     ax
 30211                                  	mov     es,ax
 30212                                  
 30213                                  	jmp	short hu10
 30214                                  huX:	
 30215                                  	pop	es
 30216                                  	pop	ax
 30217                                  	retn
 30218                                  
 30219                                  ; -----------------------------------------------------------------------------
 30220                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30221                                  ; -----------------------------------------------------------------------------
 30222                                  ; ENTRY:    None
 30223                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30224                                  ; ERROR:    None
 30225                                  ; USES:     Flags
 30226                                  ; -----------------------------------------------------------------------------
 30227                                  
 30228                                  isTiny:
 30229                                  	push	ax
 30230                                  
 30231                                  	;getdata al, fUmbTiny
 30232                                  	;
 30233                                  	;push	ds
 30234                                  	;push	cs
 30235                                  	;pop	ds
 30236                                  	;mov	al,[fUmbTiny]
 30237                                  	;pop	ds
 30238                                  
 30239                                  	mov	al,[cs:fUmbTiny]		
 30240                                  
 30241                                  	or	al,al
 30242                                  	pop	ax
 30243                                  	retn
 30244                                  
 30245                                  ; -----------------------------------------------------------------------------
 30246                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 30247                                  ; -----------------------------------------------------------------------------
 30248                                  ; ENTRY:    ES:0 should point to an MCB
 30249                                  ; EXIT:     ZF set if MCB is free, else !ZF
 30250                                  ; ERROR:    None
 30251                                  ; USES:     Flags
 30252                                  ; -----------------------------------------------------------------------------
 30253                                  
 30254                                  ;isFreeMCB:
 30255                                  ;	or	word [es:ARENA.OWNER],0
 30256                                  ;	retn
 30257                                  
 30258                                  ; -----------------------------------------------------------------------------
 30259                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 30260                                  ; -----------------------------------------------------------------------------
 30261                                  ; ENTRY:    ES:0 should point to an MCB
 30262                                  ; EXIT:     None; MCB marked as HIDDEN
 30263                                  ; ERROR:    None
 30264                                  ; USES:     None
 30265                                  ; -----------------------------------------------------------------------------
 30266                                  
 30267                                  hideMCB:
 30268                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30269                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 30270                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 30271                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 30272                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 30273                                  	retn
 30274                                  
 30275                                  ; -----------------------------------------------------------------------------
 30276                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 30277                                  ; -----------------------------------------------------------------------------
 30278                                  ; ENTRY:    ES:0 should point to an MCB
 30279                                  ; EXIT:     None; MCB marked as FREE
 30280                                  ; ERROR:    None
 30281                                  ; USES:     None
 30282                                  ; -----------------------------------------------------------------------------
 30283                                  
 30284                                  unHideMCB:
 30285                                  	push	ax
 30286                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 30287                                  	mov	ax,'  ' ; 2020h
 30288                                  	mov	[es:ARENA.NAME+0],ax
 30289                                  	mov	[es:ARENA.NAME+2],ax
 30290                                  	mov	[es:ARENA.NAME+4],ax
 30291                                  	mov	[es:ARENA.NAME+6],ax
 30292                                  	pop	ax
 30293                                  	retn
 30294                                  
 30295                                  ; -----------------------------------------------------------------------------
 30296                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 30297                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 30298                                  ; -----------------------------------------------------------------------------
 30299                                  ; ENTRY:    AL should be to a valid UMB number
 30300                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 30301                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 30302                                  ; USES:     Flags, ES
 30303                                  ; -----------------------------------------------------------------------------
 30304                                  
 30305                                  findUMB:
 30306                                  	push	ax
 30307                                  	push	cx
 30308                                  	push	dx
 30309                                  
 30310                                  	xor	ah,ah		; Zap ah, so al==ax
 30311                                  
 30312                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 30313                                  
 30314                                  	call	UmbHead		; Returns first UMB segment in AX
 30315                                  	mov	es,ax
 30316                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30317                                  
 30318                                  ; ---------------------------------------------
 30319                                  ; FU10--CX - This UMB number; 0 == conventional
 30320                                  ;       DX - The UMB number they're looking for
 30321                                  ;       ES - The current MCB address
 30322                                  ; ---------------------------------------------
 30323                                  
 30324                                  fu10:	
 30325                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 30326                                  	je	short fuX	; searching for--so exit.
 30327                                  
 30328                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30329                                  	jnz	short fu20
 30330                                  
 30331                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30332                                  fu20:	
 30333                                  	mov	al,[es:ARENA.SIGNATURE]
 30334                                  	cmp	al,arena_signature_end ; 'Z'
 30335                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 30336                                  
 30337                                  	;NextMCB es, ax		; Go on forward.
 30338                                  	mov     ax,es
 30339                                  	;add	ax,[es:3]
 30340                                  	add     ax,[es:ARENA.SIZE]
 30341                                  	inc     ax
 30342                                  	mov     es,ax
 30343                                  
 30344                                  	jmp	short fu10
 30345                                  fuE:	
 30346                                  	stc
 30347                                  fuX:
 30348                                  	pop	dx
 30349                                  	pop	cx
 30350                                  	pop	ax		; The address is already in ES.
 30351                                  	retn
 30352                                  
 30353                                  ; -----------------------------------------------------------------------------
 30354                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 30355                                  ; -----------------------------------------------------------------------------
 30356                                  ; ENTRY:    AL should be to a valid UMB number
 30357                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 30358                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 30359                                  ; USES:     Flags, ES
 30360                                  ; -----------------------------------------------------------------------------
 30361                                  
 30362                                  BigFree:
 30363                                  	push	bx
 30364                                  	push	cx
 30365                                  
 30366                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 30367                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 30368                                  
 30369                                  	xor	bx,bx			; Segment address of largest free MCB
 30370                                  	xor	cx,cx			; Size of largest free MCB
 30371                                  
 30372                                  ; ---------------------------------------------
 30373                                  ; BF10--ES - Current MCB address
 30374                                  ;       BX - Address of largest free MCB so far
 30375                                  ;       CX - Size of largest free MCB so far
 30376                                  ; ---------------------------------------------
 30377                                  
 30378                                  bf10:	
 30379                                  	call	isSysMCB		; If we've left the MCB, we're done.
 30380                                  	jz	short bf30
 30381                                  
 30382                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 30383                                  	or	word [es:ARENA.OWNER],0
 30384                                  	jnz	short bf20
 30385                                  
 30386                                  	mov	ax,[es:ARENA.SIZE]
 30387                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 30388                                  	cmp	cx,ax
 30389                                  	jg	short bf20		; Unless we're bigger,
 30390                                  
 30391                                  	mov	bx,es			; Store this new element's address,
 30392                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 30393                                  	mov	cx,ax
 30394                                  
 30395                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 30396                                  	cmp	al,arena_signature_end	; 'Z'
 30397                                  	jz	short bf30		; 'Z' means this was the last MCB.
 30398                                  
 30399                                  	;NextMCB es,ax		; Go on forward.
 30400                                  	mov     ax,es
 30401                                  	;add	ax,[es:3]
 30402                                  	add     ax,[es:ARENA.SIZE]
 30403                                  	inc     ax
 30404                                  	mov     es,ax
 30405                                  
 30406                                  	jmp	short bf10
 30407                                  
 30408                                  bf30:	mov	es,bx			; Return the address
 30409                                  	mov	ax,cx			; Return the size
 30410                                  	or	bx,bx
 30411                                  	jnz	short bfX		; (if size==0, there's nothing free)
 30412                                  bfE:	
 30413                                  	stc
 30414                                  bfX:
 30415                                  	pop	cx
 30416                                  	pop	bx
 30417                                  	retn
 30418                                  
 30419                                  ; -----------------------------------------------------------------------------
 30420                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 30421                                  ; -----------------------------------------------------------------------------
 30422                                  ; ENTRY:    AL should be to a valid UMB number
 30423                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 30424                                  ; ERROR:    None
 30425                                  ; USES:     Flags
 30426                                  ; -----------------------------------------------------------------------------
 30427                                  
 30428                                  isSpecified:
 30429                                  	push	ax
 30430                                  
 30431                                  	xor	bh,bh
 30432                                  	mov	bl,al
 30433                                  
 30434                                  	;getdata al, DS:UmbUsed[bx]
 30435                                  	;
 30436                                  	;push	ds
 30437                                  	;push	cs
 30438                                  	;pop	ds
 30439                                  	;mov	al,[bx+UmbUsed]
 30440                                  	;pop	ds
 30441                                  	
 30442                                  	mov	al,[cs:bx+UmbUsed]
 30443                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 30444                                  
 30445                                  	pop	ax
 30446                                  	retn
 30447                                  
 30448                                  ; -----------------------------------------------------------------------------
 30449                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 30450                                  ; -----------------------------------------------------------------------------
 30451                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 30452                                  ; EXIT:     None; MCB broken if carry clear
 30453                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 30454                                  ; USES:     Flags
 30455                                  ; -----------------------------------------------------------------------------
 30456                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 30457                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 30458                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 30459                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 30460                                  ; minimum for performing a split.
 30461                                  ; -----------------------------------------------------------------------------
 30462                                  
 30463                                  MIN_SPLIT_SIZE	equ	20h
 30464                                  
 30465                                  shrinkMCB:
 30466                                  	;pushreg <bx, cx, es>
 30467                                  	push	bx
 30468                                  	push	cx
 30469                                  	push	es
 30470                                  
 30471                                  	mov	bx,ax			; Move things around... and
 30472                                  	mov	ax,es			; save this one for later.
 30473                                  
 30474                                  	mov	cx,[es:ARENA.SIZE]
 30475                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 30476                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 30477                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 30478                                  	; 18/12/2022
 30479                                  	cmp	cx,bx
 30480                                  	jb	short smE ; (*)
 30481                                  
 30482                                  	mov	dl,[es:ARENA.SIGNATURE]
 30483                                  	mov	cx,[es:ARENA.SIZE]
 30484                                  
 30485                                  	mov	[es:ARENA.SIZE],bx
 30486                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 30487                                  
 30488                                  	add	ax,bx
 30489                                  	inc	ax
 30490                                  	mov	es,ax			; Move to new arena area
 30491                                  
 30492                                  	mov	ax,cx
 30493                                  	sub	ax,bx
 30494                                  	; 12/12/2022
 30495                                  	; ax > 0
 30496                                  	dec	ax			; And prepare the new size
 30497                                  
 30498                                  	; 18/12/2022
 30499                                  	mov	[es:ARENA.SIGNATURE],dl
 30500                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 30501                                  	mov	[es:ARENA.SIZE],ax
 30502                                  	;mov	ax,'  ' ; 2020h
 30503                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 30504                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 30505                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 30506                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 30507                                  
 30508                                  	; 18/12/2022
 30509                                  	call	freeMCB	; (**)
 30510                                  
 30511                                  	; 12/12/2022
 30512                                  	; cf=0
 30513                                  	;clc
 30514                                  	; 18/12/2022
 30515                                  	;jmp	short smX
 30516                                  smE:	
 30517                                  	; 18/12/2022
 30518                                  	; cf=1 (*)
 30519                                  	;stc
 30520                                  smX:	
 30521                                  	;popreg	<es, cx, bx>
 30522                                  	pop	es
 30523                                  	pop	cx
 30524                                  	pop	bx
 30525                                  	retn
 30526                                  
 30527                                  ; -----------------------------------------------------------------------------
 30528                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 30529                                  ; -----------------------------------------------------------------------------
 30530                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 30531                                  ; EXIT:     None; UMB is hidden as necessary
 30532                                  ; ERROR:    None
 30533                                  ; USES:     Flags, AX, CX
 30534                                  ; -----------------------------------------------------------------------------
 30535                                  ; PRIMARY LOGIC:
 30536                                  ;
 30537                                  ; If the UMB is specified in the DH/LH statement, then:
 30538                                  ;    If the largest free segment is too small (check specified size), then:
 30539                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 30540                                  ;    Else, if largest free segment is LARGER than specified size, then:
 30541                                  ;       If /S was given on the command-line, then:
 30542                                  ;          Break that element into two pieces
 30543                                  ;          Set a flag that we're shrinking
 30544                                  ;       Endif
 30545                                  ;    Endif
 30546                                  ; Endif
 30547                                  ; If the UMB is NOT specified (or was removed by the above):
 30548                                  ;    Hide all free elements in the UMB
 30549                                  ;    If the flag that we're shrinking was set, then:
 30550                                  ;       UN-hide the lower portion of the shrunken UMB
 30551                                  ;    ENDIF
 30552                                  ; ENDIF
 30553                                  ; -----------------------------------------------------------------------------
 30554                                  
 30555                                  _hideUMB_:
 30556                                  	push	bx
 30557                                  	push	dx
 30558                                  	push	es
 30559                                  
 30560                                  	mov	al,cl
 30561                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30562                                  	jz	short hu_20
 30563                                  
 30564                                  	mov	al,cl		; Retrieve the size of the largest
 30565                                  	call	BigFree		; free element in AX; put its address in ES
 30566                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 30567                                  
 30568                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30569                                  	mov	al,cl		; Retrieve the user's specified
 30570                                  	call	GetSize		; minimum size for this umb (into AX)
 30571                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 30572                                  
 30573                                  	or	ax,ax		; If they didn't specify one,
 30574                                  	jz	short hu_20	; Skip over all this.
 30575                                  
 30576                                  	cmp	ax,bx		; Ah... if (specified > max free)
 30577                                  	jbe	short hu_10
 30578                                  
 30579                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 30580                                  	call	unMarkUMB
 30581                                  	jmp	short hu_20
 30582                                  hu_10:	
 30583                                  	call	isTiny		; Returns ZF clear if user specified /S
 30584                                  	jz	short hu_20
 30585                                  
 30586                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30587                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30588                                  
 30589                                  	mov	dx,es
 30590                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30591                                  
 30592                                  hu_20:	mov	ax,cx
 30593                                  	call	isSpecified	; If they specified this UMB, we're done...
 30594                                  	jnz	short hu_X	; so leave.
 30595                                  
 30596                                  	xor	dx,dx
 30597                                  hu_30:	
 30598                                  	mov	al,cl
 30599                                  
 30600                                  	call	hideUMB		; Hides everything in UMB #al
 30601                                  
 30602                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30603                                  	jz	short hu_X	; So we should leave.
 30604                                  
 30605                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30606                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30607                                  hu_X:	
 30608                                  	pop	es
 30609                                  	pop	dx
 30610                                  	pop	bx
 30611                                  	retn
 30612                                  
 30613                                  ; -----------------------------------------------------------------------------
 30614                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30615                                  ; -----------------------------------------------------------------------------
 30616                                  ; Entry:  None
 30617                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30618                                  ; Error:  None
 30619                                  ; Uses:   Flags
 30620                                  ; -----------------------------------------------------------------------------
 30621                                  
 30622                                  UnFreeze:
 30623                                  	push	ax
 30624                                  	push	es
 30625                                  
 30626                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30627                                  	jc	short ufX
 30628                                  
 30629                                  	mov	es,ax
 30630                                  
 30631                                  ; ------------------------------
 30632                                  ; UF10--ES - Current MCB address
 30633                                  ; ------------------------------
 30634                                  
 30635                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30636                                  	jnz	short uf20
 30637                                  	call	unHideMCB
 30638                                  uf20:	
 30639                                  	mov	al,[es:ARENA.SIGNATURE]
 30640                                  
 30641                                  	cmp	al,arena_signature_end ; 'Z'
 30642                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30643                                  
 30644                                  	;NextMCB es, ax		; Go on forward.
 30645                                  	mov     ax,es
 30646                                  	;add	ax,[es:3]
 30647                                  	add     ax,[es:ARENA.SIZE]
 30648                                  	inc     ax
 30649                                  	mov     es,ax
 30650                                  
 30651                                  	jmp	short uf10
 30652                                  ufX:	
 30653                                  	pop	es
 30654                                  	pop	ax
 30655                                  	retn
 30656                                  
 30657                                  ; -----------------------------------------------------------------------------
 30658                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30659                                  ; -----------------------------------------------------------------------------
 30660                                  ; ENTRY:    ES:0 should point to an MCB
 30661                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30662                                  ; ERROR:    None
 30663                                  ; USES:     Flags
 30664                                  ; -----------------------------------------------------------------------------
 30665                                  
 30666                                  isFrozMCB:
 30667                                  	;push	ax
 30668                                  
 30669                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30670                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30671                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30672                                  	jne	short ifmX
 30673                                  
 30674                                  	;mov	ax,[es:ARENA.NAME+0]
 30675                                  	;cmp	ax,'FR' ; 5246h
 30676                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30677                                  	jne	short ifmX
 30678                                  	;mov	ax,[es:ARENA.NAME+2]
 30679                                  	;cmp	ax,'OZ' ; 5A4Fh
 30680                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30681                                  	jne	short ifmX
 30682                                  	;mov	ax,[es:ARENA.NAME+4]
 30683                                  	;cmp	ax,'EN' ; 4E45h
 30684                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30685                                  	jne	short ifmX
 30686                                  	;mov	ax,[es:ARENA.NAME+6]
 30687                                  	;cmp	ax,'  ' ; 2020h
 30688                                  	cmp	word [es:ARENA.NAME+6],'  '
 30689                                  ifmX:	
 30690                                  	;pop	ax
 30691                                  	retn
 30692                                  
 30693                                  ; -----------------------------------------------------------------------------
 30694                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30695                                  ; -----------------------------------------------------------------------------
 30696                                  ; ENTRY:    ES:0 should point to an MCB
 30697                                  ; EXIT:     None; MCB frozen
 30698                                  ; ERROR:    None
 30699                                  ; USES:     None
 30700                                  ; -----------------------------------------------------------------------------
 30701                                  
 30702                                  frezMCB:
 30703                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30704                                  	mov	word [es:ARENA.NAME+0],'FR'
 30705                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30706                                  	mov	word [es:ARENA.NAME+4],'EN'
 30707                                  	mov	word [es:ARENA.NAME+6],'  '
 30708                                  	retn
 30709                                  
 30710                                  ; -----------------------------------------------------------------------------
 30711                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30712                                  ; -----------------------------------------------------------------------------
 30713                                  ; Entry:  None
 30714                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30715                                  ; Error:  None
 30716                                  ; Uses:   Flags
 30717                                  ; -----------------------------------------------------------------------------
 30718                                  
 30719                                  FreezeUM:
 30720                                  	push	ax
 30721                                  	push	cx
 30722                                  	push	dx
 30723                                  	push	es
 30724                                  
 30725                                  	;call	GetLoadUMB
 30726                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30727                                  
 30728                                  	xor	ah,ah		; Zap ah, so al==ax
 30729                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30730                                  
 30731                                  	call	UmbHead		; Returns first UMB segment in AX
 30732                                  	mov	es,ax
 30733                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30734                                  
 30735                                  ; -----------------------------------------
 30736                                  ; FUM10--ES - Current MCB address
 30737                                  ;        CX - Current UMB number
 30738                                  ;        DX - UMB number to skip (load UMB)
 30739                                  ; -----------------------------------------
 30740                                  
 30741                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30742                                  	jnz	short fum20
 30743                                  
 30744                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30745                                  fum20:	
 30746                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30747                                  	je	short fum30	; freeze anything... so skip that section.
 30748                                  
 30749                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30750                                  	or	word [es:ARENA.OWNER],0
 30751                                  	jnz	short fum30	; either.
 30752                                  
 30753                                  	call	frezMCB
 30754                                  fum30:	
 30755                                  	mov	al,[es:ARENA.SIGNATURE]
 30756                                  	cmp	al,arena_signature_end ; 'Z'
 30757                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30758                                  
 30759                                  	;NextMCB es, ax		; Go on forward.
 30760                                  	mov     ax,es
 30761                                  	;add	ax,[es:3]
 30762                                  	add     ax,[es:ARENA.SIZE]
 30763                                  	inc     ax
 30764                                  	mov     es,ax
 30765                                  	
 30766                                  	jmp	short fum10
 30767                                  
 30768                                  fumX:	pop	es
 30769                                  	pop	dx
 30770                                  	pop	cx
 30771                                  	pop	ax
 30772                                  	retn
 30773                                  
 30774                                  ; -----------------------------------------------------------------------------
 30775                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30776                                  ; -----------------------------------------------------------------------------
 30777                                  ; ENTRY:    None
 30778                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30779                                  ; ERROR:    None
 30780                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30781                                  ; -----------------------------------------------------------------------------
 30782                                  
 30783                                  UmbTest:
 30784                                  	push	ax
 30785                                  	push	bx
 30786                                  	push	ds
 30787                                  	push	es
 30788                                  
 30789                                  	call	fm_link			; Link in UMBs (if not already linked)
 30790                                  	call	WalkMem			; Check to see if they're really linked
 30791                                  	pushf				; And remember what we found out
 30792                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30793                                  	popf				; And restore what we found out.
 30794                                  
 30795                                  	pop	es
 30796                                  	pop	ds
 30797                                  	pop	bx
 30798                                  	pop	ax
 30799                                  	retn
 30800                                  
 30801                                  ; -----------------------------------------------------------------------------
 30802                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30803                                  ; -----------------------------------------------------------------------------
 30804                                  ; ENTRY:    None
 30805                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30806                                  ; ERROR:    None
 30807                                  ; USES:     Flags
 30808                                  ; -----------------------------------------------------------------------------
 30809                                  
 30810                                  WalkMem:
 30811                                  	push	ax ; ?
 30812                                  	push	bx ; ?
 30813                                  	push	es ; ? no need to save contents of these registers ?
 30814                                  		   	
 30815                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30816                                  	int	21h
 30817                                  
 30818                                  	mov	ax,[es:bx-2]
 30819                                  	mov	es,ax
 30820                                  
 30821                                  ; ------------------------------
 30822                                  ; UM10: ES = Current MCB pointer
 30823                                  ; ------------------------------
 30824                                  
 30825                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30826                                  	cmp	al,arena_signature_end ;  'Z'
 30827                                  	je	short um20		; If signature == 'Z', hay no more.
 30828                                  
 30829                                  	;NextMCB es, bx			; Move to the next MCB
 30830                                  
 30831                                  	mov     bx,es
 30832                                  	;add	bx,[es:3]
 30833                                  	add     bx,[es:ARENA.SIZE]
 30834                                  	inc     bx
 30835                                  	mov     es,bx
 30836                                  		
 30837                                  	jmp	short um10		; And restart the loop.
 30838                                  um20:	
 30839                                  	mov	ax,es
 30840                                  
 30841                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30842                                  
 30843                                  	pop	es ; ?
 30844                                  	pop	bx ; ?
 30845                                  	pop	ax ; ?
 30846                                  	retn
 30847                                  
 30848                                  ; -----------------------------------------------------------------------------
 30849                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30850                                  ; -----------------------------------------------------------------------------
 30851                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30852                                  ; EXIT:     None
 30853                                  ; ERROR:    None
 30854                                  ; USES:     AX, BX
 30855                                  ; -----------------------------------------------------------------------------
 30856                                  
 30857                                  hl_unlink:
 30858                                  	xor	bh,bh
 30859                                  
 30860                                  	;getdata bl,fm_umb		; Restore original link-state
 30861                                  	;
 30862                                  	;push	ds
 30863                                  	;push	cs
 30864                                  	;pop	ds
 30865                                  	;mov	bl,[fm_umb]
 30866                                  	;pop	ds
 30867                                  
 30868                                  	mov	bl,[cs:fm_umb]
 30869                                  
 30870                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30871                                  	int	21h
 30872                                  	retn
 30873                                  
 30874                                  ; ----------------------------------------------------------------------
 30875                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30876                                  ; ----------------------------------------------------------------------
 30877                                  ; 09/04/2019 - Retro DOS v4.0
 30878                                  
 30879                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30880                                  ;   Date:     May 14, 1992
 30881                                  
 30882                                  ;   Modification log:
 30883                                  ;
 30884                                  ;     DATE    WHO      DESCRIPTION
 30885                                  ;   --------  -------  --------------------------------------------------------
 30886                                  ;   05/14/92  t-richj  Original
 30887                                  ;   06/21/92  t-richj  Final revisions before check-in
 30888                                  
 30889                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30890                                  
 30891                                  ; -----------------------------------------------------------------------------
 30892                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30893                                  ; -----------------------------------------------------------------------------
 30894                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30895                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30896                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30897                                  ; ERROR:  None
 30898                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30899                                  ; -----------------------------------------------------------------------------
 30900                                  
 30901                                  UnHideUMBs:
 30902                                  	push	ax		; Save ax for what we're about to do
 30903                                  
 30904                                  ; -----------------------------------------------------------------------------
 30905                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30906                                  ;    length of time. Those six constitute a check of whether or not we should
 30907                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30908                                  ;    will destroy the current link-state and memory-allocation strategy after
 30909                                  ;    every command execution.
 30910                                  ; -----------------------------------------------------------------------------
 30911                                  
 30912                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30913                                  	;
 30914                                  	;push	ds
 30915                                  	;push	cs
 30916                                  	;pop	ds
 30917                                  	;mov	al,[fInHigh]
 30918                                  	;pop	ds	
 30919                                  
 30920                                  	mov	al,[cs:fInHigh]
 30921                                  
 30922                                  	or	al,al
 30923                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30924                                  
 30925                                  	pop	ax		; then there's nothing to do here... so
 30926                                  	stc			; restore everything and return. Just like
 30927                                  	retn			; that.
 30928                                  uhu10:	
 30929                                  	call	linkumb		; Make sure UMBs are linked in.
 30930                                  	call	FreeUMBs
 30931                                  
 30932                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30933                                  	;
 30934                                  	;push	es
 30935                                  	;push	cs
 30936                                  	;pop	es
 30937                                  	;mov	byte [es:fInHigh],0
 30938                                  	;pop	ds	
 30939                                  
 30940                                  	mov	byte [cs:fInHigh],0	
 30941                                  
 30942                                  	call	he_unlink	; Unlink UMBs
 30943                                  
 30944                                  	pop	ax
 30945                                  	; 12/12/2022
 30946                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30947                                  	retn
 30948                                  
 30949                                  ; -----------------------------------------------------------------------------
 30950                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30951                                  ; -----------------------------------------------------------------------------
 30952                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30953                                  ; EXIT:     None
 30954                                  ; ERROR:    None
 30955                                  ; USES:     AX, BX
 30956                                  ; -----------------------------------------------------------------------------
 30957                                  
 30958                                  he_unlink:
 30959                                  	xor	bh, bh
 30960                                  
 30961                                  	;getdata bl, fm_umb	; Restore original link-state
 30962                                  	mov	bl,[cs:fm_umb]	
 30963                                  
 30964                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30965                                  	int	21h
 30966                                  	retn
 30967                                  
 30968                                  ; -----------------------------------------------------------------------------
 30969                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30970                                  ; -----------------------------------------------------------------------------
 30971                                  ; ENTRY:    None
 30972                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30973                                  ; ERROR:    None (ignore CF)
 30974                                  ; USES:     Flags
 30975                                  ; -----------------------------------------------------------------------------
 30976                                  
 30977                                  FreeUMBs:
 30978                                  	push	ax
 30979                                  	push	es
 30980                                  
 30981                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30982                                  	jc	short fusX
 30983                                  
 30984                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30985                                  fus10:	
 30986                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30987                                  	jnz	short fus20
 30988                                  	call	freeMCB
 30989                                  fus20:	   
 30990                                  	mov	al,[es:ARENA.SIGNATURE]
 30991                                  	cmp	al,arena_signature_end ; 'Z'
 30992                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30993                                  
 30994                                  	mov	ax,es
 30995                                  	add	ax,[es:ARENA.SIZE]
 30996                                  	inc	ax
 30997                                  	mov	es,ax		; Go on forward.
 30998                                  
 30999                                  	jmp	short fus10
 31000                                  fusX:	
 31001                                  	pop	es
 31002                                  	pop	ax
 31003                                  	retn
 31004                                  
 31005                                  ; -----------------------------------------------------------------------------
 31006                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 31007                                  ; -----------------------------------------------------------------------------
 31008                                  ; ENTRY:    ES:0 should point to an MCB
 31009                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 31010                                  ; ERROR:    None
 31011                                  ; USES:     Flags
 31012                                  ; -----------------------------------------------------------------------------
 31013                                  
 31014                                  isHideMCB:
 31015                                  	;push	ax
 31016                                  
 31017                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 31018                                  	jne	short ihm_x				; then check for HIDDEN
 31019                                  
 31020                                  	;mov	ax,[es:ARENA.NAME]
 31021                                  	;cmp	ax,'HI' ; 4948h
 31022                                  	cmp	word [es:ARENA.NAME+0],'HI'
 31023                                  	jne	short ihm_x
 31024                                  	;mov	ax,[es:ARENA.NAME+2]
 31025                                  	;cmp	ax,'DD' ; 4444h
 31026                                  	cmp	word [es:ARENA.NAME+2],'DD'
 31027                                  	jne	short ihm_x
 31028                                  	;mov	ax,[es:ARENA.NAME+4]
 31029                                  	;cmp	ax,'EN' ; 4E45h
 31030                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31031                                  	jne	short ihm_x
 31032                                  	;mov	ax,[es:ARENA.NAME+6]
 31033                                  	;cmp	ax,'  ' ; 2020h
 31034                                  	cmp	word [es:ARENA.NAME+6],'  '
 31035                                  ihm_x:	
 31036                                  	;pop	ax
 31037                                  	retn
 31038                                  
 31039                                  ; -----------------------------------------------------------------------------
 31040                                  ;*** freeMCB - marks as free the MCB at ES:0
 31041                                  ; -----------------------------------------------------------------------------
 31042                                  ; ENTRY:    ES:0 should point to an MCB
 31043                                  ; EXIT:     None; MCB free'd
 31044                                  ; ERROR:    None
 31045                                  ; USES:     AX
 31046                                  ; -----------------------------------------------------------------------------
 31047                                  
 31048                                  freeMCB:
 31049                                  	mov	word [es:ARENA.OWNER],0
 31050                                  	mov	ax,'  '
 31051                                  	mov	[es:ARENA.NAME+0],ax
 31052                                  	mov	[es:ARENA.NAME+2],ax
 31053                                  	mov	[es:ARENA.NAME+4],ax
 31054                                  	mov	[es:ARENA.NAME+6],ax
 31055                                  	retn
 31056                                  
 31057                                  ; -----------------------------------------------------------------------------
 31058                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 31059                                  ; -----------------------------------------------------------------------------
 31060                                  ; ENTRY:  Nothing
 31061                                  ; EXIT:   AX contains 0x9FFF for most systems
 31062                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 31063                                  ; USES:   Flags, AX
 31064                                  ; -----------------------------------------------------------------------------
 31065                                  
 31066                                  HeadUmb:
 31067                                  	; 13/05/2019
 31068                                  
 31069                                  	;push	si ; ?
 31070                                  	;push	ds ; ?
 31071                                  	;push	es
 31072                                  	;push	bx ; *
 31073                                  
 31074                                  	; 09/04/2019
 31075                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 31076                                  
 31077                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31078                                  	int	21h
 31079                                  			; DOS - 2+ internal - GET LIST OF LISTS
 31080                                  			; Return: ES:BX -> DOS list of lists
 31081                                  	;mov	ax,[es:8Ch]
 31082                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 31083                                  	cmp	ax,0FFFFh
 31084                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 31085                                  
 31086                                  	;clc				; Else, it isn't.
 31087                                  	;jmp	short xhu_x
 31088                                  xhu_e:	
 31089                                  	;stc
 31090                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 31091                                  xhu_x:	
 31092                                  	;pop	bx ; *
 31093                                  	;pop	es	
 31094                                  	;pop	ds ; ?
 31095                                  	;pop	si ; ?
 31096                                  	retn
 31097                                  
 31098                                  ; -----------------------------------------------------------------------------
 31099                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 31100                                  ; -----------------------------------------------------------------------------
 31101                                  ; ENTRY:    None
 31102                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 31103                                  ; ERROR:    None
 31104                                  ; USES:     AX, BX, fm_umb
 31105                                  ; -----------------------------------------------------------------------------
 31106                                  
 31107                                  linkumb:
 31108                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 31109                                  	int	21h			; Current link-state is now in al
 31110                                  
 31111                                  	or	al,al			; BUGBUG: proper check?
 31112                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 31113                                  
 31114                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31115                                  	mov	bx,1
 31116                                  	int	21h
 31117                                  lumbX:
 31118                                  	retn
 31119                                  
 31120                                  %endif
 31121                                  
 31122                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31123                                  ; (SYSINIT:2B5Fh)
 31124                                  
 31125                                  ; ----------------------------------------------------------------------
 31126                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 31127                                  ; ----------------------------------------------------------------------
 31128                                  ; 09/04/2019 - Retro DOS v4.0
 31129                                  
 31130                                  ;----------------------------------------------------------------------------
 31131                                  ;
 31132                                  ; procedure : InitDevLoad
 31133                                  ;
 31134                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 31135                                  ;			 = 1 indicates load in UMB:
 31136                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 31137                                  ;		                    = 1 indicates a DOS 5-style load
 31138                                  ;		DevSize  = Size of the device driver file in paras
 31139                                  ;
 31140                                  ;	Output : none
 31141                                  ;
 31142                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 31143                                  ;	Also sets up a header for the Device driver entry for mem utility
 31144                                  ;
 31145                                  ;----------------------------------------------------------------------------
 31146                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 31147                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 31148                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 31149                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 31150                                  ;----------------------------------------------------------------------------
 31151                                  
 31152                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31153                                  InitDevLoad:
 31154                                  	; 11/12/2022
 31155                                  	; ds = cs
 31156 00002779 803E[851E]00            	cmp	byte [DeviceHi],0
 31157                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 31158                                  	;je	short InitForLo		; no, init for lo mem
 31159 0000277E 741F                    	je	short initforlo_x ; 09/04/2019
 31160                                  
 31161                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31162                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 31163                                  ;	je	short InitForConv
 31164                                  ;
 31165                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 31166                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 31167                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 31168                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 31169                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 31170                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 31171                                  ;
 31172                                  ;	call	ShrinkUMB		; Stop using the old device arena
 31173                                  ;
 31174                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 31175                                  ;	call	FreezeUM		; Hide everything BUT the load area
 31176                                  ;	call	GetUMBForDev		; And grab that load area as needed
 31177                                  ;	pushf
 31178                                  ;	call	UnFreeze		; Then unhide everything frozen
 31179                                  ;	popf
 31180                                  ;
 31181                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 31182                                  ;
 31183                                  ;	jmp	short InitForHi
 31184                                  
 31185                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31186                                  	; (SYSINIT:2B67h)
 31187                                  InitForConv:
 31188                                  	; 11/12/2022
 31189                                  	; ds = cs
 31190 00002780 E83700                  	call	SpaceInUMB		; Do we have space left in the
 31191                                  					;  current UMB ?
 31192 00002783 7308                    	jnc	short InitForHi		; yes, we have
 31193 00002785 E83F04                  	call	ShrinkUMB		; shrink the current UMB in use
 31194 00002788 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 31195 0000278B 720D                    	jc	short InitForLo		; we didn't succeed, so load
 31196                                  					;  in low memory
 31197                                  InitForHi:
 31198                                  	; 11/12/2022
 31199                                  	; ds = cs
 31200                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 31201                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 31202                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 31203 0000278D A1[7B1E]                	mov	ax,[DevUMBFree]
 31204 00002790 8B16[771E]              	mov	dx,[DevUMBAddr]
 31205 00002794 0316[791E]              	add	dx,[DevUMBSize]
 31206 00002798 EB0C                    	jmp	short idl1
 31207                                  
 31208                                  InitForLo:
 31209                                  	; 11/12/2022
 31210                                  	; ds = cs
 31211                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 31212 0000279A C606[851E]00            	mov	byte [DeviceHi],0
 31213                                  initforlo_x:
 31214                                  	; 11/12/2022
 31215                                  	; ds = cs
 31216                                  					;  into UMB indicate that
 31217                                  					;  we are loading low
 31218                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 31219                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 31220 0000279F A1[E003]                	mov	ax,[memhi]
 31221 000027A2 8B16[A302]              	mov	dx,[ALLOCLIM]
 31222                                  idl1:
 31223 000027A6 E86600                  	call	DevSetMark		; setup a sub-arena for DD
 31224                                  	; 11/12/2022
 31225                                  	; ds = cs
 31226                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 31227                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 31228                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 31229                                  	;mov	[cs:DevEntry+2],ax
 31230 000027A9 A3[6A1E]                	mov	[DevLoadAddr],ax
 31231 000027AC 8916[6C1E]              	mov	[DevLoadEnd],dx
 31232 000027B0 C706[6E1E]0000          	mov	word [DevEntry],0
 31233 000027B6 A3[701E]                	mov	[DevEntry+2],ax
 31234 000027B9 C3                      	retn
 31235                                  
 31236                                  ;----------------------------------------------------------------------------
 31237                                  ;
 31238                                  ; procedure : SpaceInUMB?
 31239                                  ;
 31240                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 31241                                  ;	Output : Carry set if no space in UMB
 31242                                  ;		 Carry clear if Space is available for the device in
 31243                                  ;		   current UMB
 31244                                  ;
 31245                                  ;----------------------------------------------------------------------------
 31246                                  
 31247                                  SpaceInUMB:
 31248                                  	; 11/12/2022
 31249                                  	; ds = cs
 31250                                  	;mov	ax,[cs:DevUMBSize]
 31251                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 31252                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 31253 000027BA A1[791E]                	mov	ax,[DevUMBSize]
 31254 000027BD 0306[771E]              	add	ax,[DevUMBAddr]		; End of UMB
 31255 000027C1 2B06[7B1E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 31256                                  	; 11/12/2022
 31257                                  	;or	ax,ax			; Nospace ?
 31258                                  	;jnz	short spcinumb1
 31259                                  	;stc
 31260                                  	;retn
 31261                                  	; 11/12/2022
 31262 000027C5 83F801                  	cmp	ax,1
 31263 000027C8 7205                    	jb	short spcinumb2	; cf=1
 31264                                  spcinumb1:
 31265 000027CA 48                      	dec	ax			; space for sub-arena
 31266                                  	; 11/12/2022
 31267                                  	; ds = cs
 31268 000027CB 3B06[681E]              	cmp	ax,[DevSize]
 31269                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 31270                                  spcinumb2:
 31271 000027CF C3                      	retn
 31272                                  
 31273                                  ;----------------------------------------------------------------------------
 31274                                  ;
 31275                                  ; procedure : PrepareMark
 31276                                  ;
 31277                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 31278                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 31279                                  ;
 31280                                  ;----------------------------------------------------------------------------
 31281                                  
 31282                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31283                                  ;
 31284                                  ;PrepareMark:
 31285                                  ;	push	ds
 31286                                  ;	mov	ds,ax
 31287                                  ;	mov	word [ARENA.OWNER],8
 31288                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 31289                                  ;	pop	ds
 31290                                  ;
 31291                                  ;	inc	ax
 31292                                  ;	mov	[cs:DevUMBAddr],ax
 31293                                  ;	mov	[cs:DevUMBFree],ax
 31294                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31295                                  ;	retn
 31296                                  
 31297                                  ;----------------------------------------------------------------------------
 31298                                  ;
 31299                                  ; procedure : GetUMBForDev
 31300                                  ;
 31301                                  ;	Input : DevSize
 31302                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 31303                                  ;		 the device.
 31304                                  ;		 If success carry clear
 31305                                  ;
 31306                                  ;	Allocates the biggest UMB for loading devices and updates
 31307                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 31308                                  ;	UMB.
 31309                                  ;
 31310                                  ;	This routine relies on the fact that all of the low memory
 31311                                  ;	is allocated, and any DOS alloc calls should return memory
 31312                                  ;	from the UMB pool.
 31313                                  ;
 31314                                  ;----------------------------------------------------------------------------
 31315                                  
 31316                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31317                                  	; (SYSINIT:2BC6h)
 31318                                  
 31319                                  GetUMBForDev:
 31320                                  	; 11/12/2022
 31321                                  	; ds = cs
 31322 000027D0 BBFFFF                  	mov	bx,0FFFFh
 31323 000027D3 B80048                  	mov	ax,4800h
 31324 000027D6 CD21                    	int	21h
 31325                                  		; DOS - 2+ - ALLOCATE MEMORY
 31326                                  		; BX = number of 16-byte paragraphs desired
 31327                                  
 31328 000027D8 09DB                    	or	bx,bx
 31329                                  	;jz	short gufd_err
 31330                                  	; 09/09/2023
 31331 000027DA 742E                    	jz	short gufd_error ; bx = 0
 31332                                  
 31333 000027DC 4B                      	dec	bx
 31334                                  	; 11/12/2022
 31335                                  	; ds = cs
 31336 000027DD 391E[681E]              	cmp	[DevSize],bx
 31337                                  	;cmp	[cs:DevSize],bx
 31338 000027E1 7725                    	ja	short gufd_err
 31339                                  
 31340 000027E3 43                      	inc	bx
 31341                                  
 31342 000027E4 B80048                  	mov	ax,4800h
 31343 000027E7 CD21                    	int	21h
 31344 000027E9 721D                    	jc	short gufd_err
 31345                                  
 31346                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31347                                  	;dec	ax
 31348                                  	;call	PrepareMark
 31349                                  	;
 31350                                  PrepareMark:
 31351 000027EB 1E                      	push	ds
 31352 000027EC 48                      	dec	ax
 31353 000027ED 8ED8                    	mov	ds,ax
 31354 000027EF C70601000800            	mov	word [ARENA.OWNER],8
 31355 000027F5 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 31356 000027FB 40                      	inc	ax
 31357 000027FC 1F                      	pop	ds
 31358                                  	; 11/12/2022
 31359                                  	; ds = cs
 31360                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 31361                                  	;mov	[cs:DevUMBAddr],ax
 31362                                  	;mov	[cs:DevUMBFree],ax
 31363                                  gufd_x:		; 09/09/2023
 31364 000027FD 891E[791E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 31365 00002801 A3[771E]                	mov	[DevUMBAddr],ax
 31366 00002804 A3[7B1E]                	mov	[DevUMBFree],ax
 31367                                  	;
 31368                                  	; 11/12/2022
 31369                                  	; cf=0
 31370                                  	;clc				; mark no error
 31371 00002807 C3                      	retn
 31372                                  
 31373                                  	; 09/09/2023
 31374                                  %if 1
 31375                                  gufd_err:
 31376 00002808 31DB                    	xor	bx,bx ; 0
 31377                                  gufd_error:
 31378 0000280A 31C0                    	xor	ax,ax ; 0
 31379 0000280C F9                      	stc	; cf=1
 31380 0000280D EBEE                    	jmp	short gufd_x	
 31381                                  %endif
 31382                                  
 31383                                  ; 09/09/2023
 31384                                  %if 0
 31385                                  gufd_err:
 31386                                  	xor	ax,ax ; 0
 31387                                  	; 11/12/2022
 31388                                  	; ds = cs
 31389                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 31390                                  	;mov	[cs:DevUMBAddr],ax
 31391                                  	;mov	[cs:DevUMBFree],ax
 31392                                  	mov	[DevUMBSize],ax		; erase the previous values
 31393                                  	mov	[DevUMBAddr],ax
 31394                                  	mov	[DevUMBFree],ax
 31395                                  	stc
 31396                                  	retn
 31397                                  %endif
 31398                                  
 31399                                  ;----------------------------------------------------------------------------
 31400                                  ;
 31401                                  ; procedure : DevSetMark
 31402                                  ;
 31403                                  ;	Input : AX - Free segment were device is going to be loaded
 31404                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 31405                                  ;
 31406                                  ;	Creates a sub-arena for the device driver
 31407                                  ;	puts 'D' marker in the sub-arena
 31408                                  ;	Put the owner of the sub-arena as (AX+1)
 31409                                  ;	Copies the file name into sub-arena name field
 31410                                  ;
 31411                                  ;	Size field of the sub-arena will be set only at succesful
 31412                                  ;	completion of Device load.
 31413                                  ;
 31414                                  ;----------------------------------------------------------------------------
 31415                                  
 31416                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31417                                  	; (SYSINIT:2C13h)
 31418                                  
 31419                                  DevSetMark:
 31420 0000280F 06                      	push	es
 31421 00002810 57                      	push	di
 31422 00002811 1E                      	push	ds
 31423 00002812 56                      	push	si
 31424 00002813 8EC0                    	mov	es,ax
 31425 00002815 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 31426 0000281B 40                      	inc	ax
 31427 0000281C 26A30100                	mov	[es:devmark.seg],ax
 31428                                  
 31429                                  ;-------------- Copy file name
 31430                                  
 31431 00002820 50                      	push	ax			; save load addr
 31432                                  
 31433                                  	; 09/09/2023
 31434                                  	; ds = cs
 31435                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 31436 00002821 C536[F803]              	lds	si,[bpb_addr]
 31437                                  
 31438 00002825 89F7                    	mov	di,si
 31439 00002827 FC                      	cld
 31440                                  dsm_again:
 31441 00002828 AC                      	lodsb
 31442 00002829 3C3A                    	cmp	al,':'
 31443 0000282B 7504                    	jne	short isit_slash
 31444 0000282D 89F7                    	mov	di,si
 31445 0000282F EBF7                    	jmp	short dsm_again
 31446                                  isit_slash:
 31447 00002831 3C5C                    	cmp	al, '\'
 31448 00002833 7504                    	jne	short isit_null
 31449 00002835 89F7                    	mov	di,si
 31450 00002837 EBEF                    	jmp	short dsm_again
 31451                                  isit_null:
 31452 00002839 08C0                    	or	al,al
 31453 0000283B 75EB                    	jnz	short dsm_again
 31454 0000283D 89FE                    	mov	si,di
 31455                                  
 31456 0000283F BF0800                  	mov	di,devmark.filename ; 8
 31457 00002842 B90800                  	mov	cx,8			; maximum 8 characters
 31458                                  dsm_next_char:
 31459 00002845 AC                      	lodsb
 31460 00002846 08C0                    	or	al, al
 31461 00002848 7407                    	jz	short blankout
 31462 0000284A 3C2E                    	cmp	al, '.'
 31463 0000284C 7403                    	je	short blankout
 31464 0000284E AA                      	stosb
 31465 0000284F E2F4                    	loop	dsm_next_char
 31466                                  blankout:
 31467 00002851 E304                    	jcxz	dsm_exit
 31468 00002853 B020                    	mov	al, ' '
 31469 00002855 F3AA                    	rep	stosb			; blank out the rest
 31470                                  dsm_exit:
 31471 00002857 58                      	pop	ax			; restore load addr
 31472 00002858 5E                      	pop	si
 31473 00002859 1F                      	pop	ds
 31474 0000285A 5F                      	pop	di
 31475 0000285B 07                      	pop	es
 31476 0000285C C3                      	retn
 31477                                  
 31478                                  ;----------------------------------------------------------------------------
 31479                                  ;
 31480                                  ; procedure : SizeDevice
 31481                                  ;
 31482                                  ;	Input : ES:SI - points to device file to be sized
 31483                                  ;
 31484                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 31485                                  ;
 31486                                  ;	Calculates the size of the device file in paras and stores it
 31487                                  ;	in DevSize
 31488                                  ;
 31489                                  ;----------------------------------------------------------------------------
 31490                                  
 31491                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31492                                  SizeDevice:
 31493                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31494                                  	; 11/12/2022 ; *
 31495 0000285D 1E                      	push	ds ; *
 31496 0000285E 06                      	push	es
 31497 0000285F 1F                      	pop	ds
 31498 00002860 89F2                    	mov	dx,si			; ds:dx -> file name
 31499 00002862 B8003D                  	mov	ax,3D00h		; open
 31500 00002865 CD21                    	int	21h
 31501 00002867 7243                    	jc	short sd_err		; open failed
 31502                                  
 31503 00002869 89C3                    	mov	bx,ax			; BX - file handle
 31504 0000286B B80242                  	mov	ax,4202h		; seek
 31505 0000286E 31C9                    	xor	cx,cx
 31506 00002870 89CA                    	mov	dx,cx			; to end of file
 31507 00002872 CD21                    	int	21h
 31508 00002874 722F                    	jc	short sd_close		; did seek fail (impossible)
 31509 00002876 83C00F                  	add	ax,15			; para convert
 31510 00002879 83D200                  	adc	dx,0
 31511 0000287C F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 31512 00002880 7409                    	jz	short szdev1		; no
 31513 00002882 2EC706[681E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 31514                                  					; assuming that we fail later
 31515 00002889 EB1A                    	jmp	short sd_close
 31516                                  szdev1:
 31517 0000288B B104                    	mov	cl,4			; convert it to paras
 31518 0000288D D3E8                    	shr	ax,cl
 31519 0000288F B10C                    	mov	cl,12
 31520 00002891 D3E2                    	shl	dx,cl
 31521 00002893 09D0                    	or	ax,dx
 31522                                  	;
 31523                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31524 00002895 2E3B06[861E]            	cmp     ax,[cs:DevSizeOption]
 31525                                  	;ja	short szdev2
 31526                                  	; 14/08/2023
 31527 0000289A 7305                    	jnb	short szdev2
 31528                                  
 31529 0000289C 2EA1[861E]              	mov     ax,[cs:DevSizeOption]
 31530                                  	; 12/12/2022
 31531 000028A0 F8                      	clc
 31532                                  szdev2:
 31533 000028A1 2EA3[681E]              	mov	[cs:DevSize],ax		; save file size
 31534                                  
 31535                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31536                                  	; 12/12/2022
 31537                                  	; cf=0
 31538                                  	;clc
 31539                                  sd_close:
 31540 000028A5 9C                      	pushf				; let close not spoil our
 31541                                  					;  carry flag
 31542 000028A6 B8003E                  	mov	ax,3E00h		; close
 31543 000028A9 CD21                    	int	21h			; we are not checking for err
 31544 000028AB 9D                      	popf
 31545                                  sd_err:
 31546                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31547                                  	; 11/12/2022 ; *
 31548 000028AC 1F                      	pop     ds ; *
 31549 000028AD C3                      	retn
 31550                                  
 31551                                  ;----------------------------------------------------------------------------
 31552                                  ;
 31553                                  ; procedure : ExecDev
 31554                                  ;
 31555                                  ;	Input : ds:dx -> device to be executed
 31556                                  ;		DevLoadAddr - contains where device has to be loaded
 31557                                  ;
 31558                                  ;	Output : Carry if error
 31559                                  ;		 Carry clear if no error
 31560                                  ;
 31561                                  ;	Loads a device driver using the 4b03h function call
 31562                                  ;
 31563                                  ;----------------------------------------------------------------------------
 31564                                  
 31565                                  	; 01/11/2022
 31566                                  ExecDev:
 31567 000028AE 2E8B1E[6A1E]            	mov	bx,[cs:DevLoadAddr]
 31568 000028B3 2E891E[811E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 31569                                  					;  block for exec with
 31570                                  					;  Load address
 31571 000028B8 2E891E[831E]            	mov	[cs:DevExecReloc],bx
 31572 000028BD 8CCB                    	mov	bx,cs
 31573 000028BF 8EC3                    	mov	es,bx
 31574 000028C1 BB[811E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 31575 000028C4 B003                    	mov	al,3	; (load program only)
 31576 000028C6 B44B                    	mov	ah,EXEC ; 4Bh
 31577 000028C8 CD21                    	int	21h			;load in the device driver
 31578                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 31579                                  		; DS:DX -> ASCIZ filename
 31580                                  		; ES:BX -> parameter block
 31581                                  		; AL = subfunction 
 31582 000028CA C3                      	retn
 31583                                  
 31584                                  ;----------------------------------------------------------------------------
 31585                                  ;
 31586                                  ; procedure : RetFromUM
 31587                                  ;
 31588                                  ;	Input : None
 31589                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31590                                  ;		 ConvLoad clear if did.
 31591                                  ;
 31592                                  ;	Prepares memory for more devices after returning from loading one
 31593                                  ;	using the DOS 6 options (/L:... etc).
 31594                                  ;
 31595                                  ;----------------------------------------------------------------------------
 31596                                  
 31597                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31598                                  ;RetFromUM:
 31599                                  ;	pushf
 31600                                  ;	mov	byte [cs:ConvLoad],1
 31601                                  ;	call	UnHideUMBs
 31602                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 31603                                  ;	mov	byte [cs:ConvLoad],0
 31604                                  ;rfUM1:	
 31605                                  ;	popf
 31606                                  ;	retn
 31607                                  
 31608                                  ;----------------------------------------------------------------------------
 31609                                  ;
 31610                                  ; procedure : RemoveNull
 31611                                  ;
 31612                                  ;	Input : ES:SI points to a null terminated string
 31613                                  ;
 31614                                  ;	Output : none
 31615                                  ;
 31616                                  ;	Replaces the null at the end of a string with blank
 31617                                  ;
 31618                                  ;----------------------------------------------------------------------------
 31619                                  
 31620                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31621                                  	; (SYSINIT:2CCEh)
 31622                                  RemoveNull:
 31623                                  	; 11/12/2022
 31624                                  	; ds = cs
 31625                                  rn_next:
 31626 000028CB 268A1C                  	mov	bl,[es:si]
 31627 000028CE 08DB                    	or	bl,bl			; null ?
 31628 000028D0 7403                    	jz	short rn_gotnull
 31629 000028D2 46                      	inc	si			; advance the pointer
 31630 000028D3 EBF6                    	jmp	short rn_next
 31631                                  rn_gotnull:
 31632                                  	; 11/12/2022
 31633 000028D5 8A1E[9A1E]              	mov	bl,[DevSavedDelim]
 31634                                  	;mov	bl,[cs:DevSavedDelim]
 31635 000028D9 26881C                  	mov	[es:si],bl		; replace null with blank
 31636                                  	; 02/11/2022
 31637                                  ; 11/12/2022
 31638                                  rba_ok:		; 10/04/2019
 31639 000028DC C3                      	retn
 31640                                  
 31641                                  ;----------------------------------------------------------------------------
 31642                                  ;
 31643                                  ; procedure : RoundBreakAddr
 31644                                  ;
 31645                                  ;	Input : DevBrkAddr
 31646                                  ;	Output : DevBrkAddr
 31647                                  ;
 31648                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31649                                  ;
 31650                                  ;----------------------------------------------------------------------------
 31651                                  
 31652                                  RoundBreakAddr:
 31653 000028DD 2EA1[721E]              	mov	ax,[cs:DevBrkAddr]
 31654 000028E1 E8C8E7                  	call	ParaRound
 31655 000028E4 2E0106[741E]            	add	[cs:DevBrkAddr+2],ax
 31656 000028E9 2EC706[721E]0000        	mov	word [cs:DevBrkAddr],0
 31657 000028F0 2EA1[6C1E]              	mov	ax,[cs:DevLoadEnd]
 31658 000028F4 2E3906[741E]            	cmp	[cs:DevBrkAddr+2],ax
 31659 000028F9 76E1                    	jbe	short rba_ok
 31660 000028FB E96007                  	jmp	mem_err
 31661                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31662                                  	; 11/12/2022
 31663                                  ;rba_ok:
 31664                                  ;	retn
 31665                                  
 31666                                  ;----------------------------------------------------------------------------
 31667                                  ;
 31668                                  ; procedure : DevSetBreak
 31669                                  ;
 31670                                  ;	Input : DevBrkAddr
 31671                                  ;	Output : Carry set if Device returned Init failed
 31672                                  ;		 Else carry clear
 31673                                  ;
 31674                                  ;----------------------------------------------------------------------------
 31675                                  
 31676                                  DevSetBreak:
 31677 000028FE 50                      	push	ax
 31678                                  
 31679 000028FF 2EA1[741E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31680 00002903 2E803E[1514]00          	cmp	byte [cs:multdeviceflag],0
 31681 00002909 750F                    	jne	short set_break_continue ;do not check it.
 31682 0000290B 2E3B06[6A1E]            	cmp	ax,[cs:DevLoadAddr]
 31683 00002910 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31684                                  
 31685                                  	;cmp	word [cs:DevBrkAddr],0
 31686                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31687                                  	; 12/12/2022
 31688 00002912 2E833E[721E]01          	cmp	word [cs:DevBrkAddr],1
 31689 00002918 7204                    	jb	short break_failed
 31690                                  
 31691                                  set_break_continue:
 31692 0000291A E8C0FF                  	call	RoundBreakAddr
 31693                                  	; 12/12/2022
 31694 0000291D F8                      	clc
 31695                                  break_failed:
 31696 0000291E 58                      	pop	ax
 31697                                  	;clc
 31698 0000291F C3                      	retn
 31699                                  
 31700                                  	; 12/12/2022
 31701                                  ;break_failed:
 31702                                  	;pop	ax
 31703                                  	;stc
 31704                                  	;retn
 31705                                  
 31706                                  ;----------------------------------------------------------------------------
 31707                                  ;
 31708                                  ; procedure : DevBreak
 31709                                  ;
 31710                                  ;	Input : DevLoadAddr & DevBrkAddr
 31711                                  ;	Output : none
 31712                                  ;
 31713                                  ;	Marks a succesful install of a device driver
 31714                                  ;	Sets device size field in sub-arena &
 31715                                  ;	Updates Free ptr in UMB or adjusts memhi
 31716                                  ;
 31717                                  ;----------------------------------------------------------------------------
 31718                                  
 31719                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31720                                  DevBreak:
 31721                                  	;push	ds ; 11/12/2022
 31722                                  
 31723                                  	; 11/12/2022
 31724 00002920 0E                      	push	cs
 31725 00002921 1F                      	pop	ds
 31726                                  	;mov	ax,[cs:DevLoadAddr]
 31727                                  	;mov	bx,[cs:DevBrkAddr+2]
 31728 00002922 A1[6A1E]                	mov	ax,[DevLoadAddr]
 31729 00002925 8B1E[741E]              	mov	bx,[DevBrkAddr+2]
 31730                                  	; 11/12/2022
 31731 00002929 1E                      	push	ds
 31732                                  
 31733 0000292A 48                      	dec	ax			; seg of sub-arena
 31734 0000292B 8ED8                    	mov	ds,ax
 31735 0000292D 40                      	inc	ax			; Back to Device segment
 31736 0000292E 29D8                    	sub	ax,bx
 31737 00002930 F7D8                    	neg	ax			; size of device in paras
 31738 00002932 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31739                                  	
 31740                                  	; 11/12/2022
 31741 00002935 1F                      	pop	ds
 31742                                  	; ds = cs
 31743                                   	
 31744 00002936 803E[851E]00            	cmp	byte [DeviceHi],0
 31745                                  	;cmp	byte [cs:DeviceHi],0
 31746 0000293B 7405                    	je	short db_lo
 31747                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31748                                  	;jmp	short db_exit
 31749                                  	; 11/12/2022
 31750 0000293D 891E[7B1E]              	mov	[DevUMBFree],bx
 31751 00002941 C3                      	retn	
 31752                                  db_lo:
 31753                                  	; 11/12/2022
 31754                                  	; ds = cs
 31755                                  	;mov	[cs:memhi],bx
 31756                                  	;mov	word [cs:memlo],0
 31757 00002942 891E[E003]              	mov	[memhi],bx
 31758 00002946 C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31759                                  db_exit:
 31760                                  	;pop	ds ; 11/12/2022
 31761                                  sd_ret:		; 09/09/2023
 31762 0000294C C3                      	retn
 31763                                  
 31764                                  ; 10/04/2019 - Retro DOS v4.0
 31765                                  
 31766                                  ;----------------------------------------------------------------------------
 31767                                  ;
 31768                                  ; procedure : ParseSize
 31769                                  ;
 31770                                  ;	Parses the command line for SIZE= command
 31771                                  ;
 31772                                  ;	ES:SI = command line to parsed
 31773                                  ;
 31774                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31775                                  ;	updates the DevSizeOption variable with value supplied
 31776                                  ;	in SIZE=option
 31777                                  ;	Returns carry if the SIZE option was invalid
 31778                                  ;
 31779                                  ;----------------------------------------------------------------------------
 31780                                  
 31781                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31782                                  	; (SYSINIT:2D5Ah)
 31783                                  
 31784                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization & BugFix)
 31785                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 31786                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 31787                                  ParseSize:
 31788                                  	;push	bx
 31789                                  	;mov	bx,si
 31790                                  
 31791                                  	; 09/09/2023
 31792 0000294D 56                      	push	si ; * ; mov bx,si
 31793                                  
 31794                                  	; 11/12/2022
 31795                                  	; ds = cs
 31796                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31797                                  	;mov	[cs:DevCmdLine],si
 31798                                  	;mov	[cs:DevCmdLine+2],es
 31799 0000294E C706[861E]0000          	mov	word [DevSizeOption],0 ; init the value
 31800 00002954 8936[961E]              	mov	[DevCmdLine],si
 31801 00002958 8C06[981E]              	mov	[DevCmdLine+2],es	
 31802 0000295C E82400                  	call	SkipDelim
 31803 0000295F 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31804 00002964 7528                    	jne	short ps_no_size
 31805 00002966 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31806 0000296C 7520                    	jne	short ps_no_size
 31807 0000296E 268A4404                	mov	al,[es:si+4]
 31808 00002972 E85506                  	call	delim
 31809                                  	;jne	short ps_no_size
 31810                                  	; 22/07/2023 - 09/09/2023 (cf=0)
 31811 00002975 7518                    	jne	short ps_no_size_2 ; cf=0 here
 31812 00002977 83C605                  	add	si,5
 31813 0000297A E81400                  	call	GetHexNum
 31814 0000297D 7210                    	jc	short ps_err
 31815                                  	; 11/12/2022
 31816                                  	; ds = cs
 31817                                  	;mov	[cs:DevSizeOption],ax
 31818 0000297F A3[861E]                	mov	[DevSizeOption],ax
 31819                                  	
 31820                                  	; 09/09/2023
 31821 00002982 58                      	pop	ax  ; * (discard previous si value on top of stack)
 31822                                  
 31823                                  ;	call	SkipDelim ; **
 31824                                  ;	
 31825                                  ;	; 22/07/2023
 31826                                  ;;ps_no_size_2:
 31827                                  ;	; cf = 0
 31828                                  ;	retn
 31829                                  
 31830                                  	; 09/09/2023
 31831                                  	;jmp	short SkipDelim
 31832                                  
 31833                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 31834                                  %if 1
 31835                                  	; 01/11/2022
 31836                                  SkipDelim:
 31837                                  sd_next_char:
 31838 00002983 268A04                  	mov	al,[es:si]
 31839 00002986 E84106                  	call	delim
 31840 00002989 75C1                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 31841 0000298B 46                      	inc	si
 31842 0000298C EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31843                                  	; 11/12/2022
 31844                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31845                                  ;sd_ret:
 31846                                  	;retn
 31847                                  %endif
 31848                                  
 31849                                  	;;;call	SkipDelim ; **
 31850                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31851                                  	;mov	bx,si
 31852                                  ps_no_size:
 31853                                  	;mov	si,bx
 31854                                  	;pop	bx
 31855 0000298E F8                      	clc	; cf=0
 31856                                  	;retn
 31857                                  	; 11/12/2022
 31858                                  ps_err:		; cf=1
 31859                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 31860                                  	; 09/09/2023
 31861 0000298F 5E                      	pop	si ; * ; mov si,bx
 31862                                  ;sd_ret:	; cf=?
 31863 00002990 C3                      	retn
 31864                                  
 31865                                  ;ps_err:
 31866                                  	; 02/11/2022
 31867                                  	;pop	bx
 31868                                  	;stc
 31869                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31870                                  	; 11/12/2022
 31871                                  	; cf=1
 31872                                  	;stc
 31873                                  	; 11/12/2022
 31874                                  ;sd_ret: 
 31875                                  	; 22/07/2023
 31876                                  	; 12/04/2019
 31877                                  	;retn
 31878                                  
 31879                                  ; 12/04/2019 - Retro DOS v4.0
 31880                                  
 31881                                  ;----------------------------------------------------------------------------
 31882                                  ;
 31883                                  ; procedure : SkipDelim
 31884                                  ;
 31885                                  ;	Skips delimiters in the string pointed to by ES:SI
 31886                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31887                                  ;
 31888                                  ;----------------------------------------------------------------------------
 31889                                  
 31890                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 31891                                  %if 0
 31892                                  	; 01/11/2022
 31893                                  SkipDelim:
 31894                                  sd_next_char:
 31895                                  	mov	al,[es:si]
 31896                                  	call	delim
 31897                                  	jnz	short sd_ret
 31898                                  	inc	si
 31899                                  	jmp	short sd_next_char ; 01/11/2022
 31900                                  	; 11/12/2022
 31901                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31902                                  ;sd_ret:
 31903                                  	;retn
 31904                                  %endif
 31905                                  
 31906                                  ;----------------------------------------------------------------------------
 31907                                  ;
 31908                                  ; procedure : GetHexNum
 31909                                  ;
 31910                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31911                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31912                                  ;
 31913                                  ;	Returns in AX the number number of paras equivalent to the
 31914                                  ;	hex number of bytes specified by the hexadecimal string.
 31915                                  ;
 31916                                  ;	Returns carry in case it encountered a non-hex character or
 31917                                  ;	if it encountered crlf
 31918                                  ;
 31919                                  ;----------------------------------------------------------------------------
 31920                                  
 31921                                  ; 13/05/2019
 31922                                  
 31923                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31924                                  	; (SYSINIT:2DA5h)
 31925                                  GetHexNum:
 31926 00002991 31C0                    	xor	ax,ax
 31927 00002993 31D2                    	xor	dx,dx
 31928                                  ghn_next:
 31929 00002995 268A1C                  	mov	bl,[es:si]
 31930 00002998 80FB0D                  	cmp	bl,cr  ; 0Dh
 31931 0000299B 7436                    	je	short ghn_err
 31932 0000299D 80FB0A                  	cmp	bl,lf  ; 0Ah
 31933 000029A0 7431                    	je	short ghn_err
 31934 000029A2 50                      	push	ax
 31935 000029A3 88D8                    	mov	al,bl
 31936 000029A5 E82206                  	call	delim
 31937 000029A8 58                      	pop	ax
 31938                                  	; 04/01/2023
 31939 000029A9 B90400                  	mov	cx,4
 31940 000029AC 7410                    	jz	short ghn_into_paras
 31941 000029AE E82400                  	call	GetNibble
 31942                                  	;jc	short ghn_err
 31943                                  	; 11/12/2022
 31944 000029B1 7221                    	jc	short ghn_ret ; cf=1
 31945                                  	; 04/01/2023
 31946                                  	;mov	cx,4
 31947                                  ghn_shift1:
 31948 000029B3 D1E0                    	shl	ax,1
 31949 000029B5 D1D2                    	rcl	dx,1
 31950 000029B7 E2FA                    	loop	ghn_shift1
 31951 000029B9 08D8                    	or	al,bl
 31952 000029BB 46                      	inc	si
 31953 000029BC EBD7                    	jmp	short ghn_next
 31954                                  ghn_into_paras:
 31955 000029BE 83C00F                  	add	ax,15
 31956 000029C1 83D200                  	adc	dx,0
 31957 000029C4 F7C2F0FF                	test	dx,0FFF0h
 31958 000029C8 7509                    	jnz	short ghn_err
 31959                                  	; 04/01/2023
 31960                                  	;mov	cx,4
 31961                                  ghn_shift2:
 31962 000029CA F8                      	clc
 31963 000029CB D1DA                    	rcr	dx,1
 31964 000029CD D1D8                    	rcr	ax,1
 31965 000029CF E2F9                    	loop	ghn_shift2
 31966 000029D1 F8                      	clc
 31967 000029D2 C3                      	retn
 31968                                  	; 11/12/2022
 31969                                  ghn_err:
 31970                                  gnib_err:
 31971 000029D3 F9                      	stc
 31972                                  ghn_ret:
 31973                                  gnib_ret:
 31974 000029D4 C3                      	retn
 31975                                  
 31976                                  ;----------------------------------------------------------------------------
 31977                                  ;
 31978                                  ; procedure : GetNibble
 31979                                  ;
 31980                                  ;	Convert one nibble (hex digit) in BL into binary
 31981                                  ;
 31982                                  ;	Retruns binary value in BL
 31983                                  ;
 31984                                  ;	Returns carry if BL contains non-hex digit
 31985                                  ;
 31986                                  ;----------------------------------------------------------------------------
 31987                                  
 31988                                  GetNibble:
 31989 000029D5 80FB30                  	cmp	bl,'0'
 31990                                  	;jb	short gnib_err
 31991                                  	; 11/12/2022
 31992 000029D8 72FA                    	jb	short gnib_ret ; cf=1
 31993 000029DA 80FB39                  	cmp	bl,'9'
 31994 000029DD 7704                    	ja	short is_it_hex
 31995 000029DF 80EB30                  	sub	bl,'0'		; clc
 31996 000029E2 C3                      	retn
 31997                                  is_it_hex:
 31998 000029E3 80FB41                  	cmp	bl,'A'
 31999                                  	;jb	short gnib_err
 32000                                  	; 11/12/2022
 32001 000029E6 72EC                    	jb	short gnib_ret ; cf=1
 32002 000029E8 80FB46                  	cmp	bl,'F'
 32003 000029EB 77E6                    	ja	short gnib_err ; 11/12/2022
 32004 000029ED 80EB37                  	sub	bl,'A'- 10	; clc
 32005 000029F0 C3                      	retn
 32006                                  
 32007                                  	; 11/12/2022
 32008                                  ;gnib_err:
 32009                                  ;	stc
 32010                                  ;gnib_ret:
 32011                                  ;	retn
 32012                                  
 32013                                  ;============================================================================
 32014                                  
 32015                                  ; 12/04/2019 - Retro DOS v4.0
 32016                                  
 32017                                  ; umb.inc (MSDOS 6.0, 1991)
 32018                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 32019                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 32020                                  
 32021                                  XMM_REQUEST_UMB	equ 10h
 32022                                  XMM_RELEASE_UMB	equ 11h
 32023                                  
 32024                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32025                                  
 32026                                  ;---------------------------------------------------------------------------
 32027                                  ;
 32028                                  ; Procedure Name	: umb_insert
 32029                                  ;
 32030                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 32031                                  ;			: BX = seg address of UMB to be linked in
 32032                                  ;			: DX = size of UMB to be linked in paras
 32033                                  ;			; DS = data
 32034                                  ;
 32035                                  ; Outputs		: links the UMB into the arena chain
 32036                                  ;
 32037                                  ; Uses			: AX, CX, ES, DX, BX
 32038                                  ;
 32039                                  ;---------------------------------------------------------------------------
 32040                                  
 32041                                  umb_insert:
 32042 000029F1 1E                      	push	ds
 32043                                  
 32044                                  	; 31/12/2022
 32045                                  	; ds = cs
 32046                                  
 32047                                  	;mov	ds,[cs:DevDOSData]
 32048 000029F2 8E1E[941E]              	mov	ds,[DevDOSData] ; 31/12/2022 
 32049                                  	;mov	ds,[8Ch]
 32050 000029F6 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 32051 000029FA 8CD8                    	mov	ax,ds
 32052 000029FC 8EC0                    	mov	es,ax
 32053                                  ui_next:
 32054 000029FE 39D8                    	cmp	ax,bx			; Q: is current block above
 32055                                  					;    new block
 32056 00002A00 770F                    	ja	short ui_insert		; Y: insert it
 32057                                  					; Q: is current block the
 32058                                  					;    last
 32059 00002A02 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32060 00002A08 745C                    	je	short ui_append		; Y: append new block to chain
 32061                                  					; N: get next block
 32062 00002A0A 8ED8                    	mov	ds,ax			; M005
 32063                                  	;call	get_next		; ax = es = next block
 32064 00002A0C E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 32065 00002A0F EBED                    	jmp	short ui_next
 32066                                  
 32067                                  ui_insert:
 32068 00002A11 8CD9                    	mov	cx,ds			; ds = previous arena
 32069 00002A13 41                      	inc	cx			; top of previous block
 32070                                  
 32071 00002A14 29D9                    	sub	cx,bx
 32072 00002A16 F7D9                    	neg	cx			; cx = size of used block
 32073                                  	;mov	byte [0],'M'
 32074 00002A18 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32075                                  	;mov	word [1],8
 32076 00002A1D C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 32077                                  	;mov	[3],cx
 32078 00002A23 890E0300                	mov	[ARENA.SIZE],cx	
 32079                                  	;mov	word [8],4353h ; 'SC'
 32080 00002A27 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 32081                                  
 32082                                  ; prepare the arena at start of new block
 32083                                  
 32084 00002A2D 8EC3                    	mov	es,bx
 32085 00002A2F 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32086 00002A35 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 32087                                  					; mark as free
 32088 00002A3C 83EA02                  	sub	dx,2			; make room for arena at
 32089                                  					; start & end of new block
 32090 00002A3F 2689160300              	mov	[es:ARENA.SIZE],dx
 32091                                  
 32092                                  ; prepare arena at end of new block
 32093                                  	
 32094 00002A44 01D3                    	add	bx,dx
 32095 00002A46 43                      	inc	bx
 32096 00002A47 8EC3                    	mov	es,bx			; es=arena at top of new block
 32097 00002A49 43                      	inc	bx			; bx=top of new block
 32098                                  
 32099                                  					; ax contains arena just above
 32100                                  					; this block
 32101 00002A4A 29D8                    	sub	ax,bx			; ax = size of used block
 32102                                  	
 32103 00002A4C 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32104 00002A52 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32105 00002A59 26A30300                	mov	[es:ARENA.SIZE],ax	
 32106 00002A5D 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32107                                  
 32108 00002A64 EB47                    	jmp	short ui_done
 32109                                  
 32110                                  ui_append:
 32111                                  					; es = arena of last block	
 32112 00002A66 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 32113 00002A6B 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 32114                                  					; going to rsrv on top of this 
 32115                                  					; block for the next arena.
 32116                                  	; 13/05/2019
 32117 00002A71 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32118                                  
 32119 00002A77 89C1                    	mov	cx,ax			; cx=top of prev block-1
 32120 00002A79 40                      	inc	ax
 32121 00002A7A 29D8                    	sub	ax,bx			; ax=top of prev block - 
 32122                                  					;    seg. address of new block
 32123 00002A7C F7D8                    	neg	ax
 32124                                  
 32125 00002A7E 8EC1                    	mov	es,cx			; ds = arena of unused block
 32126                                  
 32127 00002A80 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32128 00002A86 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32129 00002A8D 26A30300                	mov	[es:ARENA.SIZE],ax	
 32130 00002A91 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 32131                                  
 32132                                  ; prepare the arena at start of new block
 32133 00002A98 8EC3                    	mov	es,bx
 32134 00002A9A 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 32135 00002AA0 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 32136                                  					; mark as free
 32137 00002AA7 4A                      	dec	dx			; make room for arena
 32138 00002AA8 2689160300              	mov	[es:ARENA.SIZE],dx	
 32139                                  ui_done:
 32140                                  uc_done: ; 31/12/2022 ; *!
 32141 00002AAD 1F                      	pop	ds
 32142                                  	; ds = cs ; 31/12/2022
 32143                                  ;uc_done:	; 18/12/2022
 32144                                  au_exit:	; 09/09/2023
 32145 00002AAE C3                      	retn
 32146                                  
 32147                                  ;----------------------------------------------------------------------------
 32148                                  ;
 32149                                  ; procedure : AllocUMB
 32150                                  ;
 32151                                  ;	Allocate all UMBs and link it to DOS arena chain
 32152                                  ;
 32153                                  ;----------------------------------------------------------------------------
 32154                                  
 32155                                  AllocUMB:
 32156                                  	; 31/12/2022
 32157                                  	; ds = cs
 32158 00002AAF E84700                  	call	InitAllocUMB		; link in the first UMB
 32159 00002AB2 72FA                    	jc	short au_exit		; quit on error
 32160                                  au_next:
 32161 00002AB4 E87000                  	call	umb_allocate		; allocate
 32162 00002AB7 7205                    	jc	short au_coalesce
 32163 00002AB9 E835FF                  	call	umb_insert		; & insert till no UMBs
 32164 00002ABC EBF6                    	jmp	short au_next
 32165                                  au_coalesce:
 32166                                  	; 09/09/2023
 32167                                  ;	call	umb_coalesce		; coalesce all UMBs
 32168                                  ;au_exit:
 32169                                  ;	; 31/12/2022
 32170                                  ;	; ds = cs
 32171                                  ;	retn
 32172                                  
 32173                                  	; 09/09/2023
 32174                                  	;jmp	short umb_coalesce
 32175                                  
 32176                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32177                                  
 32178                                  ;----------------------------------------------------------------------------
 32179                                  ;
 32180                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 32181                                  ;
 32182                                  ;	Coalesce adds the block following the argument to the argument block,
 32183                                  ;	iff it's free. Coalesce is usually used to join free blocks, but
 32184                                  ;	some callers (such as $setblock) use it to join a free block to it's
 32185                                  ;	preceeding allocated block.
 32186                                  ;
 32187                                  ;	EXIT	'C' clear if OK
 32188                                  ;		  (ds) unchanged, this block updated
 32189                                  ;		  (ax) = address of next block, IFF not at end
 32190                                  ;		'C' set if arena trashed
 32191                                  ;	USES	cx, di, ds, es
 32192                                  ;
 32193                                  ;----------------------------------------------------------------------------
 32194                                  
 32195                                  umb_coalesce:
 32196                                  	; 31/12/2022
 32197                                  	; ds = cs
 32198 00002ABE 1E                      	push	ds ; *!
 32199                                  
 32200 00002ABF 31FF                    	xor	di, di
 32201                                  
 32202                                  	;mov	es,[cs:DevDOSData]
 32203                                  	; 31/12/2022
 32204 00002AC1 8E06[941E]              	mov	es,[DevDOSData]
 32205 00002AC5 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 32206                                  uc_nextfree:
 32207 00002ACA 8CC0                    	mov	ax,es
 32208 00002ACC 8ED8                    	mov	ds,ax
 32209                                  	;cmp	[es:1],di
 32210 00002ACE 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 32211 00002AD3 7407                    	je	short uc_again		; Y: try to coalesce with next block
 32212                                  					; N: get next arena
 32213 00002AD5 E86B00                  	call	get_next		; es, ax = next arena
 32214 00002AD8 72D3                    	jc	short uc_done	; *!
 32215 00002ADA EBEE                    	jmp	short uc_nextfree
 32216                                  uc_again:
 32217 00002ADC E86400                  	call	get_next		; ES, AX <- next block
 32218 00002ADF 72CC                    	jc	short uc_done	; *!
 32219                                  uc_check:
 32220 00002AE1 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 32221 00002AE6 75E2                    	jne	short uc_nextfree	; N: get next free arena
 32222                                  					; Y: coalesce
 32223 00002AE8 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 32224 00002AED 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 32225                                  	;add	[3],cx
 32226 00002AEE 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 32227 00002AF2 268A0D                  	mov     cl,[es:di]              ; move up signature
 32228 00002AF5 880D                    	mov     [di],cl
 32229 00002AF7 EBE3                    	jmp     short uc_again		; try again
 32230                                  
 32231                                  	; 18/12/2022
 32232                                  ;uc_done:
 32233                                  	;retn
 32234                                  
 32235                                  ;----------------------------------------------------------------------------
 32236                                  ;
 32237                                  ; procedure : InitAllocUMB
 32238                                  ;
 32239                                  ;----------------------------------------------------------------------------
 32240                                  
 32241                                  InitAllocUMB:
 32242                                  	; 31/12/2022
 32243                                  	; ds = cs
 32244 00002AF9 E820DF                  	call	IsXMSLoaded
 32245 00002AFC 7527                    	jnz	short iau_err		; quit on no XMS driver
 32246 00002AFE B452                    	mov	ah,52h
 32247 00002B00 CD21                    	int	21h			; get DOS DATA seg
 32248                                  	; 31/12/2022
 32249                                  	; ds = cs
 32250                                  	;mov	[cs:DevDOSData],es	; & save it for later
 32251 00002B02 8C06[941E]              	mov	[DevDOSData],es		; & save it for later
 32252 00002B06 B81043                  	mov	ax,4310h
 32253 00002B09 CD2F                    	int	2Fh
 32254                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 32255                                  	;mov	[cs:DevXMSAddr+2],es
 32256 00002B0B 891E[7D1E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 32257 00002B0F 8C06[7F1E]              	mov	[DevXMSAddr+2],es	
 32258                                  	; 31/12/2022
 32259 00002B13 803E[931E]00            	cmp	byte [FirstUMBLinked],0 
 32260                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 32261                                  	;jne	short ia_1		; quit if we already did it
 32262                                  	; 12/12/2022
 32263 00002B18 770A                    	ja	short ia_1 ; cf=0
 32264 00002B1A E83900                  	call	LinkFirstUMB		; else link the first UMB
 32265                                  	;jc	short iau_err
 32266                                  	; 12/12/2022
 32267 00002B1D 7207                    	jc	short iau_err2  ; cf=1
 32268                                  	; 31/12/2022
 32269                                  	; ds = cs
 32270 00002B1F C606[931E]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32271                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 32272                                  ia_1:
 32273                                  	; 12/12/2022
 32274                                  	; cf=0
 32275                                  	;clc
 32276 00002B24 C3                      	retn
 32277                                  iau_err:
 32278 00002B25 F9                      	stc
 32279                                  iau_err2:
 32280 00002B26 C3                      	retn
 32281                                  
 32282                                  ;-------------------------------------------------------------------------
 32283                                  ;
 32284                                  ; Procedure Name	: umb_allocate
 32285                                  ;
 32286                                  ; Inputs		: DS = data
 32287                                  ;
 32288                                  ; Outputs		: if UMB available
 32289                                  ;				Allocates the largest available UMB and 
 32290                                  ;			  	BX = segment of allocated block
 32291                                  ;				DX = size of allocated block
 32292                                  ;				NC
 32293                                  ;			  else 
 32294                                  ;				CY
 32295                                  ;
 32296                                  ; Uses			: BX, DX
 32297                                  ;
 32298                                  ;-------------------------------------------------------------------------
 32299                                  
 32300                                  umb_allocate:
 32301                                  	; 31/12/2022
 32302                                  	; ds = cs
 32303 00002B27 50                      	push	ax
 32304 00002B28 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32305 00002B2A BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 32306                                  					;   possible
 32307                                  	; 31/12/2022
 32308 00002B2D FF1E[7D1E]              	call	far [DevXMSAddr]
 32309                                  	;call	far [cs:DevXMSAddr]
 32310                                  					; dx now contains the size of
 32311                                  					; the largest UMB
 32312 00002B31 09D2                    	or	dx,dx
 32313 00002B33 740B                    	jz	short ua_err
 32314                                  	
 32315 00002B35 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 32316                                  
 32317                                  	; 31/12/2022
 32318 00002B37 FF1E[7D1E]              	call	far [DevXMSAddr]
 32319                                  	;call	far [cs:DevXMSAddr]
 32320                                  
 32321 00002B3B 83F801                  	cmp	ax,1			; Q: was the reqst successful
 32322                                  	;jne	short ua_err		; N: error
 32323                                  	; 14/08/2023
 32324 00002B3E 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 32325                                  ua_err:
 32326 00002B40 F9                      	stc	
 32327                                  
 32328                                  	;clc
 32329                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32330                                  	; 12/12/2022
 32331                                  	; cf=0
 32332                                  	;clc 
 32333                                  ua_done:
 32334 00002B41 58                      	pop	ax
 32335 00002B42 C3                      	retn
 32336                                  	; 14/08/2023
 32337                                  ;ua_err:
 32338                                  	;stc
 32339                                  	;jmp	short ua_done
 32340                                  
 32341                                  ; 13/04/2019 - Retro DOS v4.0
 32342                                  
 32343                                  ;----------------------------------------------------------------------------
 32344                                  ;
 32345                                  ;**	get_next - Find Next item in Arena
 32346                                  ;
 32347                                  ;	ENTRY	dS - pointer to block head
 32348                                  ;	EXIT	AX,ES - pointers to next head
 32349                                  ;		'C' set if arena damaged
 32350                                  ;
 32351                                  ;----------------------------------------------------------------------------
 32352                                  
 32353                                  	; 01/11/2022
 32354                                  get_next:
 32355 00002B43 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 32356 00002B48 740A                    	je	short gn_err
 32357                                  _get_next_:
 32358 00002B4A 8CD8                    	mov     ax,ds                   ; ax=current block
 32359 00002B4C 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 32360 00002B50 40                      	inc     ax                      ; remember that header!
 32361 00002B51 8EC0                    	mov	es,ax
 32362                                  	;clc
 32363                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32364                                  	; 11/12/2022
 32365                                  	; cf=0
 32366                                  	;clc
 32367 00002B53 C3                      	retn
 32368                                  gn_err:
 32369 00002B54 F9                      	stc
 32370                                  	; 11/12/2022	
 32371                                  lfu_err:	 ; cf=1
 32372 00002B55 C3                      	retn
 32373                                  
 32374                                  ;----------------------------------------------------------------------------
 32375                                  ;
 32376                                  ; procedure : LinkFirstUMB
 32377                                  ;
 32378                                  ;----------------------------------------------------------------------------
 32379                                  
 32380                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32381                                  	; (SYSINIT:2F81h)
 32382                                  LinkFirstUMB:
 32383                                  	; 31/12/2022
 32384                                  	; ds = cs
 32385 00002B56 E8CEFF                  	call	umb_allocate
 32386 00002B59 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 32387                                  
 32388                                  ; bx = segment of allocated UMB
 32389                                  ; dx = size of UMB
 32390                                  
 32391                                  	; 31/12/2022
 32392                                  	; ds = cs
 32393                                  
 32394 00002B5B CD12                    	int	12h			; ax = size of memory
 32395 00002B5D B106                    	mov	cl,6
 32396 00002B5F D3E0                    	shl	ax,cl			; ax = size in paragraphs
 32397                                  
 32398 00002B61 89C1                    	mov	cx,ax			; cx = size in paras
 32399 00002B63 29D8                    	sub	ax,bx			; ax = - size of unused block
 32400                                  
 32401 00002B65 F7D8                    	neg	ax
 32402                                  
 32403                                  	;sub	cx,1			; cx = first umb_arena
 32404                                  	; 09/09/2023
 32405 00002B67 49                      	dec	cx
 32406 00002B68 8EC1                    	mov	es,cx			; es = first umb_arena
 32407                                  	
 32408 00002B6A 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32409 00002B70 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32410                                  					
 32411 00002B77 26A30300                	mov	[es:ARENA.SIZE],ax	
 32412 00002B7B 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32413                                  
 32414                                  ; put in the arena for the first UMB
 32415                                  
 32416 00002B82 8EC3                    	mov	es,bx			; es has first free umb seg
 32417 00002B84 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32418 00002B8A 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 32419                                  					; mark as free 
 32420 00002B91 4A                      	dec	dx			; make room for arena
 32421 00002B92 2689160300              	mov	[es:ARENA.SIZE],dx	
 32422                                  
 32423                                  	;mov	es,[cs:DevDOSData]
 32424                                  	; 31/12/2022
 32425 00002B97 8E06[941E]              	mov	es,[DevDOSData] ; ds = cs
 32426 00002B9B BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 32427 00002B9E 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 32428                                  					;  data segment with the arena
 32429                                  					;  just below Top of Mem
 32430                                  
 32431                                  ; we must now scan the arena chain and update the size of the last arena
 32432                                  
 32433 00002BA1 BF2400                  	mov	di,DOS_ARENA ; 24h
 32434 00002BA4 268E05                  	mov	es,[es:di]		; es = start arena
 32435 00002BA7 31FF                    	xor	di,di
 32436                                  ;scan_next
 32437                                  ; 09/12/2022
 32438                                  scannext:
 32439 00002BA9 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 32440 00002BAD 740C                    	je	short got_last
 32441                                  	
 32442 00002BAF 8CC0                    	mov	ax,es
 32443 00002BB1 2603060300              	add	ax,[es:ARENA.SIZE]
 32444 00002BB6 40                      	inc	ax
 32445 00002BB7 8EC0                    	mov	es,ax
 32446                                  	;jmp	short scan_next
 32447                                  	; 09/12/2022
 32448 00002BB9 EBEE                    	jmp	short scannext
 32449                                  got_last:
 32450                                  	;sub	word [es:ARENA.SIZE],1
 32451                                  	; 09/09/2023
 32452 00002BBB 26FF0E0300              	dec	word [es:ARENA.SIZE]
 32453                                  
 32454 00002BC0 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32455                                  	;clc
 32456                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32457                                  	; 11/12/2022
 32458                                  	; cf=0
 32459                                  	;clc
 32460 00002BC6 C3                      	retn
 32461                                  
 32462                                  ; 11/12/2022
 32463                                  ;;lfu_err:
 32464                                  ;	;stc
 32465                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32466                                  ;	; 11/12/2022
 32467                                  ;	; cf=1
 32468                                  ;	;stc
 32469                                  ;	retn
 32470                                  
 32471                                  ;----------------------------------------------------------------------------
 32472                                  ;
 32473                                  ; procedure : ShrinkUMB
 32474                                  ;
 32475                                  ;	Shrinks the current UMB in use, so that the unused portions
 32476                                  ;	of the UMB is given back to the DOS free mem pool
 32477                                  ;
 32478                                  ;----------------------------------------------------------------------------
 32479                                  
 32480                                  ShrinkUMB:
 32481                                  	; 12/12/2022
 32482                                  	; ds = cs
 32483 00002BC7 833E[771E]00            	cmp	word [DevUMBAddr],0
 32484                                  	;cmp	word [cs:DevUMBAddr],0
 32485 00002BCC 7421                    	je	short su_exit
 32486 00002BCE 06                      	push	es
 32487 00002BCF 53                      	push	bx
 32488                                  	; 12/12/2022
 32489                                  	;mov	bx,[cs:DevUMBFree]
 32490                                  	;sub	bx,[cs:DevUMBAddr]
 32491                                  	;mov	es,[cs:DevUMBAddr]
 32492 00002BD0 8B1E[7B1E]              	mov	bx,[DevUMBFree]
 32493 00002BD4 2B1E[771E]              	sub	bx,[DevUMBAddr]
 32494 00002BD8 8E06[771E]              	mov	es,[DevUMBAddr]
 32495                                  	
 32496 00002BDC B8004A                  	mov	ax,4A00h
 32497 00002BDF CD21                    	int	21h
 32498                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 32499                                  		; ES = segment address of block to change
 32500                                  		; BX = new size in paragraphs
 32501 00002BE1 8CC0                    	mov	ax,es
 32502 00002BE3 48                      	dec	ax
 32503 00002BE4 8EC0                    	mov	es,ax
 32504 00002BE6 26C70601000800          	mov	word [es:ARENA.OWNER],8
 32505 00002BED 5B                      	pop	bx
 32506 00002BEE 07                      	pop	es
 32507                                  su_exit:
 32508 00002BEF C3                      	retn
 32509                                  
 32510                                  ;----------------------------------------------------------------------------
 32511                                  ;
 32512                                  ; procedure : UnlinkUMB
 32513                                  ;
 32514                                  ;	Unlinks the UMBs from the DOS arena chain
 32515                                  ;
 32516                                  ;----------------------------------------------------------------------------
 32517                                  
 32518                                  UnlinkUMB:
 32519                                  	; 12/12/2022
 32520                                  	; ds = cs
 32521 00002BF0 1E                      	push	ds
 32522 00002BF1 06                      	push	es
 32523                                  	; 12/12/2022
 32524 00002BF2 803E[931E]00            	cmp	byte [FirstUMBLinked],0
 32525                                  	;cmp	byte [cs:FirstUMBLinked],0
 32526 00002BF7 7420                    	je	short ulu_x		; nothing to unlink
 32527                                  	; 12/12/2022
 32528 00002BF9 8E06[941E]              	mov	es,[DevDOSData]
 32529                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 32530 00002BFD 268E1E2400              	mov	ds,[es:DOS_ARENA]
 32531 00002C02 268B3E8C00              	mov	di,[es:UMB_ARENA]
 32532                                  ulu_next:
 32533 00002C07 E839FF                  	call	get_next
 32534 00002C0A 720D                    	jc	short ulu_x
 32535 00002C0C 39C7                    	cmp	di,ax			; is the next one UMB ?
 32536 00002C0E 7404                    	je	short ulu_found
 32537 00002C10 8ED8                    	mov	ds,ax
 32538 00002C12 EBF3                    	jmp	short ulu_next
 32539                                  ulu_found:
 32540                                  	;mov	byte [0],'Z'
 32541 00002C14 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32542                                  ulu_x:
 32543 00002C19 07                      	pop	es
 32544 00002C1A 1F                      	pop	ds
 32545 00002C1B C3                      	retn
 32546                                  
 32547                                  ; ----------------------------------------------------------------------
 32548                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 32549                                  ; ----------------------------------------------------------------------
 32550                                  ; 14/04/2019 - Retro DOS v4.0
 32551                                  
 32552                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 32553                                  ;
 32554                                  ; Summary:
 32555                                  ;
 32556                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 32557                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 32558                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 32559                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 32560                                  ;   and/or config.inc for the full list.
 32561                                  ;
 32562                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 32563                                  ;   configuration support. blockname is either MENU, which contains one
 32564                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 32565                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 32566                                  ;   INCLUDE allows the current block to name another block for inclusion
 32567                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 32568                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 32569                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 32570                                  ;
 32571                                  ; Example:
 32572                                  ;
 32573                                  ;   [menu]
 32574                                  ;   menuitem=misc,Miscellaneous
 32575                                  ;   menuitem=network,Network Configuration
 32576                                  ;   menudefault=network,15
 32577                                  ;
 32578                                  ;   [network]
 32579                                  ;   include misc
 32580                                  ;   device=foo
 32581                                  ;
 32582                                  ;   [misc]
 32583                                  ;   device=bar
 32584                                  ;   include alternate
 32585                                  ;
 32586                                  ;   [alternate]
 32587                                  ;   device=tar
 32588                                  ;
 32589                                  ;
 32590                                  ;   When the menu is displayed
 32591                                  ;
 32592                                  ;    1. Miscellaneous
 32593                                  ;    2. Network Configuration
 32594                                  ;
 32595                                  ;   #2 is highlighted as the default option, and will be automatically
 32596                                  ;   selected after 15 seconds. It will invoke the following lines in the
 32597                                  ;   following order:
 32598                                  ;
 32599                                  ;       DEVICE=BAR
 32600                                  ;       DEVICE=TAR
 32601                                  ;       DEVICE=FOO
 32602                                  ;
 32603                                  
 32604                                  ;MULTI_CONFIG equ 1
 32605                                  
 32606                                  ; the following depend on the positions of the various letters in switchlist
 32607                                  
 32608                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 32609                                  
 32610                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 32611                                  flagdrive	equ 00001000b ; 8 
 32612                                  flagcyln	equ 00010000b ; 16
 32613                                  flagseclim	equ 00100000b ; 32
 32614                                  flagheads	equ 01000000b ; 64
 32615                                  flagff		equ 10000000b ; 128
 32616                                  
 32617                                  ;----------------------------------------------------------------------------
 32618                                  ; 19/04/2019 - Retro DOS v4.0
 32619                                  
 32620                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 32621                                  
 32622                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32623                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 32624                                  
 32625 00002C1C 00                      insert_blank:	db 	0
 32626                                  
 32627                                  ;----------------------------------------------------------------------------
 32628                                  ;
 32629                                  ; procedure : setparms
 32630                                  ;
 32631                                  ; the following set of routines is used to parse the drivparm = command in
 32632                                  ; the config.sys file to change the default drive parameters.
 32633                                  ;
 32634                                  ;----------------------------------------------------------------------------
 32635                                  
 32636                                  setparms:
 32637 00002C1D 1E                      	push	ds
 32638 00002C1E 50                      	push	ax
 32639 00002C1F 53                      	push	bx
 32640 00002C20 51                      	push	cx
 32641 00002C21 52                      	push	dx
 32642                                  
 32643 00002C22 0E                      	push	cs
 32644 00002C23 1F                      	pop	ds
 32645                                  
 32646 00002C24 31DB                    	xor	bx,bx
 32647 00002C26 8A1E[A635]              	mov	bl,[drive]
 32648                                  	; 18/12/2022
 32649 00002C2A 43                      	inc	bx
 32650                                  	;inc	bl			; get it correct for ioctl call
 32651                                  					; (1=a,2=b...)
 32652 00002C2B BA[7E34]                	mov	dx,deviceparameters
 32653                                  	;mov	ah,IOCTL ; 44h
 32654                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 32655                                  	; 14/08/2023
 32656 00002C2E B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 32657                                  	;mov	ch,RAWIO ; 8
 32658                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 32659                                  	; 14/08/2023
 32660 00002C31 B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 32661 00002C34 CD21                    	int	21h
 32662                                  
 32663                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32664                                  ;
 32665                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 32666                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 32667                                  ;	; 21/10/2022
 32668                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 32669                                  ;	mov	ds,ax			; set Bios_Data segment
 32670                                  ;
 32671                                  ;	test	word [cs:switches],flagec35 ; 4
 32672                                  ;	jz	short not_ec35
 32673                                  
 32674                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32675                                  	;test	word [switches],flagec35 ; 4
 32676                                  	; 12/12/2022
 32677 00002C36 F606[A735]04            	test	byte [switches],flagec35 ; 4
 32678 00002C3B 7411                    	jz	short eot_ok
 32679                                  
 32680                                  	;mov	cl,[cs:drive]		; which drive was this for?
 32681                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32682 00002C3D 8A0E[A635]              	mov	cl,[drive]
 32683 00002C41 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 32684 00002C44 8ED8                    	mov	ds,ax	
 32685                                  
 32686 00002C46 B001                    	mov	al,1			; assume drive 0
 32687 00002C48 D2E0                    	shl	al,cl			; set proper bit depending on drive
 32688                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32689 00002C4A 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32690                                  
 32691                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32692                                  ;
 32693                                  ;not_ec35:
 32694                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32695                                  ;;	sectors per track than any old ones.
 32696                                  ;
 32697                                  ;	;mov	al,[cs:deviceparameters+20]
 32698                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32699                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32700                                  ;	cmp	al,[EOT]
 32701                                  ;	jbe	short eot_ok
 32702                                  ;	mov	[EOT],al
 32703                                  
 32704                                  eot_ok:
 32705 00002C4E 5A                      	pop	dx			; fix up all the registers
 32706 00002C4F 59                      	pop	cx
 32707 00002C50 5B                      	pop	bx
 32708 00002C51 58                      	pop	ax
 32709 00002C52 1F                      	pop	ds ; 13/05/2019
 32710 00002C53 C3                      	retn
 32711                                  
 32712                                  ;----------------------------------------------------------------------------
 32713                                  ;
 32714                                  ; procedure : diddleback
 32715                                  ;
 32716                                  ; replace default values for further drivparm commands
 32717                                  ;
 32718                                  ;----------------------------------------------------------------------------
 32719                                  
 32720                                  diddleback:
 32721 00002C54 1E                      	push	ds
 32722 00002C55 0E                      	push	cs
 32723 00002C56 1F                      	pop	ds
 32724                                  	;mov	word [deviceparameters+4],80
 32725 00002C57 C706[8234]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32726                                  	;mov	byte [deviceparameters+1],2
 32727 00002C5D C606[7F34]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32728                                  	;mov	word [deviceparameters+2],0
 32729 00002C62 C706[8034]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32730 00002C68 C706[A735]0000          	mov	word [switches],0	    ; zero all switches
 32731 00002C6E 1F                      	pop	ds
 32732 00002C6F C3                      	retn
 32733                                  
 32734                                  ; 04/01/2023
 32735                                  %if 0
 32736                                  
 32737                                  ; 15/04/2019 - Retro DOS v4.0
 32738                                  
 32739                                  ;----------------------------------------------------------------------------
 32740                                  ;
 32741                                  ; procedure : parseline
 32742                                  ;
 32743                                  ; entry point is parseline. al contains the first character in command line.
 32744                                  ;
 32745                                  ;----------------------------------------------------------------------------
 32746                                  
 32747                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32748                                  	; (SYSINIT:30ACh)
 32749                                  
 32750                                  parseline:
 32751                                  	push	ds
 32752                                  
 32753                                  	push	cs
 32754                                  	pop	ds
 32755                                  
 32756                                  nextswtch:
 32757                                  	cmp	al,cr			; carriage return?
 32758                                  	je	short done_line
 32759                                  	cmp	al,lf			; linefeed?
 32760                                  	je	short put_back		; put it back and done
 32761                                  
 32762                                  ; anything less or equal to a space is ignored.
 32763                                  
 32764                                  	cmp	al,' '                  ; space?
 32765                                  	jbe	short getnext		; skip over space
 32766                                  	cmp	al,'/'
 32767                                  	je	short getparm
 32768                                  	stc				; mark error invalid-character-in-input
 32769                                  	jmp	short exitpl
 32770                                  
 32771                                  getparm:
 32772                                  	call	check_switch
 32773                                  	mov	[switches],bx		; save switches read so far
 32774                                  	jc	short swterr
 32775                                  getnext:
 32776                                  	call	getchr
 32777                                  	jc	short done_line
 32778                                  	jmp	short nextswtch
 32779                                  swterr:
 32780                                  	jmp	short exitpl		; exit if error
 32781                                  
 32782                                  done_line:
 32783                                  	; 12/12/2022
 32784                                  	test	byte [switches],flagdrive ; 8
 32785                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32786                                  	jnz	short okay
 32787                                  	stc				; mark error no-drive-specified
 32788                                  	jmp	short exitpl
 32789                                  
 32790                                  okay:
 32791                                  	mov	ax,[switches]
 32792                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32793                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32794                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32795                                  	;clc			    ; everything is fine
 32796                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32797                                  	; 12/12/2022
 32798                                  	; cf=0
 32799                                  	;clc
 32800                                  	call	setdeviceparameters
 32801                                  exitpl:
 32802                                  	pop	ds
 32803                                  	retn
 32804                                  put_back:
 32805                                  	inc	word [count]		; one more char to scan
 32806                                  	dec	word [chrptr]		; back up over linefeed
 32807                                  	jmp	short done_line
 32808                                  
 32809                                  %endif
 32810                                  
 32811                                  ;----------------------------------------------------------------------------
 32812                                  ;
 32813                                  ; procedure : check_switch
 32814                                  ;
 32815                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32816                                  ; gets the number, if any required, following the switch. the switch and the
 32817                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32818                                  ; error.
 32819                                  ;
 32820                                  ;----------------------------------------------------------------------------
 32821                                  
 32822                                  ; 09/09/2023
 32823                                  
 32824                                  err_swtch:
 32825 00002C70 31CB                    	xor	bx,cx			; remove this switch from the records
 32826                                  err_check:
 32827 00002C72 F9                      	stc
 32828                                  err_chk:
 32829                                  done_swtch:	; 09/09/2023 (cf=0)
 32830 00002C73 C3                      	retn
 32831                                  
 32832                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32833                                  
 32834                                  check_switch:
 32835 00002C74 E87803                  	call	getchr
 32836                                  	;jc	short err_check
 32837 00002C77 72FA                    	jc	short err_chk
 32838 00002C79 24DF                            and     al,0DFh                 ; convert it to upper case
 32839 00002C7B 3C41                    	cmp	al,'A'
 32840                                  	;jb	short err_check
 32841 00002C7D 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32842 00002C7F 3C5A                    	cmp	al,'Z'
 32843 00002C81 77EF                    	ja	short err_check
 32844                                  
 32845 00002C83 06                      	push	es
 32846                                  
 32847 00002C84 0E                      	push	cs
 32848 00002C85 07                      	pop	es
 32849                                  
 32850                                  	;mov	cl,[switchlist]		; get number of valid switches
 32851                                  	;mov	ch,0
 32852                                  	;mov	di,1+switchlist		; point to string of valid switches
 32853                                  	; 09/09/2023
 32854 00002C86 BF[3A36]                	mov	di,switchlist
 32855 00002C89 8A0D                    	mov	cl,[di]
 32856 00002C8B B500                    	mov	ch,0
 32857 00002C8D 47                      	inc	di	; 1+switchlist
 32858                                  
 32859 00002C8E F2AE                    	repne	scasb
 32860                                  
 32861 00002C90 07                      	pop	es
 32862 00002C91 75DF                    	jnz	short err_check
 32863                                  
 32864 00002C93 B80100                  	mov	ax,1
 32865 00002C96 D3E0                    	shl	ax,cl			; set bit to indicate switch
 32866 00002C98 8B1E[A735]              	mov	bx,[switches]		; get switches so far
 32867 00002C9C 09C3                    	or	bx,ax			; save this with other switches
 32868 00002C9E 89C1                    	mov	cx,ax
 32869                                  	; 12/12/2022
 32870 00002CA0 A8F8                    	test	al,switchnum ; 0F8h
 32871                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32872 00002CA2 74CF                    	jz	short done_swtch
 32873                                  
 32874 00002CA4 E84803                  	call	getchr
 32875 00002CA7 72C7                    	jc	short err_swtch
 32876                                  
 32877 00002CA9 3C3A                    	cmp	al,':'
 32878 00002CAB 75C3                    	jne	short err_swtch
 32879                                  
 32880 00002CAD E83F03                  	call	getchr
 32881 00002CB0 53                      	push	bx			; preserve switches
 32882                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32883                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32884                                  	; 12/12/2022
 32885                                  	; ds = cs
 32886 00002CB1 C606[2A03]20            	mov	byte [sepchr],' '
 32887 00002CB6 E8DB03                  	call	getnum
 32888                                  	;mov	byte [cs:sepchr],0
 32889                                  	; 12/12/2022
 32890 00002CB9 C606[2A03]00            	mov	byte [sepchr],0
 32891 00002CBE 5B                      	pop	bx			; restore switches
 32892                                  
 32893                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32894                                  ; not check for carry set here. if there is an error, it will be detected
 32895                                  ; further on (hopefully).
 32896                                  
 32897                                  	; 09/09/2023
 32898                                  	;call	process_num
 32899                                  	;jmp	short process_num
 32900                                  
 32901                                  ;done_swtch:
 32902                                  ;	;clc
 32903                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32904                                  ;	; 12/12/2022
 32905                                  ;	; cf=0
 32906                                  ;	;clc
 32907                                  ;	retn
 32908                                  
 32909                                  ;----------------------------------------------------------------------------
 32910                                  ;
 32911                                  ; procedure : process_num
 32912                                  ;
 32913                                  ; this routine takes the switch just input, and the number following (if any),
 32914                                  ; and sets the value in the appropriate variable. if the number input is zero
 32915                                  ; then it does nothing - it assumes the default value that is present in the
 32916                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32917                                  ;
 32918                                  ;----------------------------------------------------------------------------
 32919                                  
 32920                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32921                                  	; (SYSINIT:3156h)
 32922                                  process_num:
 32923 00002CBF 850E[A735]              	test	[switches],cx		; if this switch has been done before,
 32924 00002CC3 752B                    	jnz	short done_ret		; ignore this one.
 32925                                  	; 12/12/2022
 32926 00002CC5 F6C108                  	test	cl,flagdrive ; 8
 32927                                  	;test	cx,flagdrive ; 8
 32928 00002CC8 7404                    	jz	short try_f
 32929 00002CCA A2[A635]                	mov	byte [drive],al
 32930                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32931                                  	;jmp	short done_ret
 32932                                  	; 12/12/2022
 32933                                  	; cf=0
 32934 00002CCD C3                      	retn	; 13/05/2019
 32935                                  try_f:
 32936                                  	; 12/12/2022
 32937 00002CCE F6C180                  	test	cl,flagff ; 80h
 32938                                  	;test	cx,flagff ; 80h
 32939 00002CD1 7404                    	jz	short try_t
 32940                                  
 32941                                  ; ensure that we do not get bogus form factors that are not supported
 32942                                  
 32943                                  	;mov	[deviceparameters+1],al
 32944 00002CD3 A2[7F34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32945                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32946                                  	;jmp	short done_ret
 32947                                  	; 12/12/2022
 32948                                  	; cf=0
 32949 00002CD6 C3                      	retn	; 13/05/2019
 32950                                  try_t:
 32951 00002CD7 09C0                    	or	ax,ax
 32952 00002CD9 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32953                                  	; 12/12/2022
 32954 00002CDB F6C110                  	test	cl,flagcyln ; 10h
 32955                                  	;test	cx,flagcyln ; 10h
 32956 00002CDE 7404                    	jz	short try_s
 32957                                  
 32958                                  	;mov	[deviceparameters+4],ax
 32959 00002CE0 A3[8234]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32960                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32961                                  	;jmp	short done_ret
 32962                                  	; 12/12/2022
 32963                                  	; cf=0
 32964 00002CE3 C3                      	retn	; 13/05/2019
 32965                                  try_s:
 32966                                  	; 12/12/2022
 32967 00002CE4 F6C120                  	test	cl,flagseclim ; 20h
 32968                                  	;test	cx,flagseclim ; 20h
 32969 00002CE7 7404                    	jz	short try_h
 32970 00002CE9 A3[A435]                	mov	[slim],ax
 32971                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32972                                  	;jmp	short done_ret
 32973                                  	; 12/12/2022
 32974                                  	; cf=0
 32975 00002CEC C3                      	retn	; 13/05/2019
 32976                                  
 32977                                  ; must be for number of heads
 32978                                  
 32979                                  try_h:
 32980 00002CED A3[A235]                	mov	[hlim],ax
 32981                                  done_ret:
 32982                                  	;clc
 32983                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32984                                  	; 12/12/2022
 32985                                  	; cf=0 (test instruction resets cf)
 32986                                  	;clc
 32987 00002CF0 C3                      	retn
 32988                                  
 32989                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32990                                  %if 1
 32991                                  
 32992                                  ; 15/04/2019 - Retro DOS v4.0
 32993                                  
 32994                                  ;----------------------------------------------------------------------------
 32995                                  ;
 32996                                  ; procedure : parseline
 32997                                  ;
 32998                                  ; entry point is parseline. al contains the first character in command line.
 32999                                  ;
 33000                                  ;----------------------------------------------------------------------------
 33001                                  
 33002                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33003                                  	; (SYSINIT:30ACh)
 33004                                  parseline:
 33005                                  	; 04/01/2023
 33006                                  	; ds = cs ; *
 33007                                  
 33008                                  	;push	ds ; *
 33009                                  
 33010                                  	;push	cs ; *
 33011                                  	;pop	ds ; *
 33012                                  
 33013                                  nextswtch:
 33014 00002CF1 3C0D                    	cmp	al,cr			; carriage return?
 33015 00002CF3 741C                    	je	short done_line
 33016 00002CF5 3C0A                    	cmp	al,lf			; linefeed?
 33017 00002CF7 7421                    	je	short put_back		; put it back and done
 33018                                  
 33019                                  ; anything less or equal to a space is ignored.
 33020                                  
 33021 00002CF9 3C20                    	cmp	al,' '                  ; space?
 33022 00002CFB 760F                    	jbe	short getnext		; skip over space
 33023 00002CFD 3C2F                    	cmp	al,'/'
 33024 00002CFF 7402                    	je	short getparm
 33025 00002D01 F9                      	stc				; mark error invalid-character-in-input
 33026                                  	;jmp	short exitpl
 33027                                  	; 04/01/2023
 33028                                  swterr:
 33029 00002D02 C3                      	retn
 33030                                  
 33031                                  getparm:
 33032 00002D03 E86EFF                  	call	check_switch
 33033 00002D06 891E[A735]              	mov	[switches],bx		; save switches read so far
 33034 00002D0A 72F6                    	jc	short swterr
 33035                                  getnext:
 33036 00002D0C E8E002                  	call	getchr
 33037                                  	;jc	short done_line
 33038                                  	;jmp	short nextswtch
 33039                                  	; 04/01/2023
 33040 00002D0F 73E0                    	jnc	short nextswtch
 33041                                  ;swterr:
 33042                                  	;jmp	short exitpl		; exit if error
 33043                                  
 33044                                  done_line:
 33045                                  	; 12/12/2022
 33046 00002D11 F606[A735]08            	test	byte [switches],flagdrive ; 8
 33047                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33048 00002D16 750C                    	jnz	short okay
 33049 00002D18 F9                      	stc				; mark error no-drive-specified
 33050                                  	;jmp	short exitpl
 33051                                  	; 04/01/2023
 33052 00002D19 C3                      	retn
 33053                                  
 33054                                  ;exitpl:
 33055                                  	; 04/01/2023
 33056                                  	; ds = cs
 33057                                  	;;pop	ds ; *
 33058                                  	;retn
 33059                                  
 33060                                  put_back:
 33061 00002D1A FF06[D203]              	inc	word [count]		; one more char to scan
 33062 00002D1E FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 33063 00002D22 EBED                    	jmp	short done_line
 33064                                  
 33065                                  okay:
 33066 00002D24 A1[A735]                	mov	ax,[switches]
 33067 00002D27 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33068 00002D2A A3[8034]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33069 00002D2D C706[A434]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33070                                  	;clc			    ; everything is fine
 33071                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33072                                  	; 12/12/2022
 33073                                  	; cf=0
 33074                                  	;clc
 33075                                  	;call	setdeviceparameters
 33076                                  	; 04/01/2023
 33077                                  	;jmp	short setdeviceparameters
 33078                                  
 33079                                  %endif
 33080                                  
 33081                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 33082                                  
 33083                                  ;----------------------------------------------------------------------------
 33084                                  ;
 33085                                  ; procedure : setdeviceparameters
 33086                                  ;
 33087                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 33088                                  ; system based on the form factor. it is assumed that the bpbs for the
 33089                                  ; various form factors are present in the bpbtable. for hard files,
 33090                                  ; the recommended bpb is the same as the bpb on the drive.
 33091                                  ; no attempt is made to preserve registers since we are going to jump to
 33092                                  ; sysinit straight after this routine.
 33093                                  ;
 33094                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 33095                                  ;	  we always return no carry
 33096                                  ;
 33097                                  ;	note:  there is a routine by the same name in msdioctl.asm
 33098                                  ;
 33099                                  ;----------------------------------------------------------------------------
 33100                                  
 33101                                  ; 15/04/2019 - Retro DOS v4.0
 33102                                  
 33103                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33104                                  setdeviceparameters:
 33105                                  	; 04/01/2023
 33106                                  	; ds = cs
 33107                                  	
 33108 00002D33 06                      	push	es
 33109                                  
 33110 00002D34 0E                      	push	cs
 33111 00002D35 07                      	pop	es
 33112                                  
 33113 00002D36 31DB                    	xor	bx,bx
 33114 00002D38 8A1E[7F34]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 33115 00002D3C 80FB00                  	cmp	bl,DEV_5INCH ; 0
 33116 00002D3F 7506                    	jne	short got_80
 33117                                  
 33118 00002D41 C706[8234]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33119                                  							; 48 tpi=40 cyl
 33120                                  got_80:
 33121 00002D47 D1E3                    	shl	bx,1			; get index into bpb table
 33122 00002D49 8BB7[2636]              	mov	si,[bpbtable+bx]	; get address of bpb
 33123                                  
 33124                                  	;mov	di,deviceparameters+7	
 33125                                  	; 02/11/2022
 33126 00002D4D BF[8534]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 33127 00002D50 B91F00                  	mov	cx,A_BPB.size ; 31
 33128 00002D53 FC                      	cld
 33129                                  	;repe	movsb
 33130                                  	; 02/11/2022
 33131 00002D54 F3A4                    	rep	movsb
 33132                                  
 33133 00002D56 07                      	pop	es
 33134                                  
 33135                                  	; 12/12/2022
 33136 00002D57 F606[A735]20            	test	byte [switches],flagseclim ; 20h
 33137                                  	;test	word [switches],flagseclim ; 20h
 33138 00002D5C 7406                    	jz	short see_heads
 33139                                  
 33140 00002D5E A1[A435]                	mov	ax,[slim]
 33141                                  	;mov	[deviceparameters+20],ax
 33142 00002D61 A3[9234]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 33143                                  
 33144                                  see_heads:
 33145                                  	; 12/12/2022
 33146 00002D64 F606[A735]40            	test	byte [switches],flagheads ; 40h
 33147                                  	;test	word [switches],flagheads ; 40h
 33148 00002D69 7406                    	jz	short heads_not_altered
 33149                                  
 33150 00002D6B A1[A235]                	mov	ax,[hlim]
 33151                                  	;mov	[deviceparameters+22],ax	
 33152 00002D6E A3[9434]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 33153                                  
 33154                                  heads_not_altered:
 33155                                  
 33156                                  ; set up correct media descriptor byte and sectors/cluster
 33157                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 33158                                  
 33159                                  	;mov	byte [deviceparameters+9],2
 33160                                  	; 02/11/2022
 33161                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 33162                                  	; 04/01/2023
 33163 00002D71 B80200                  	mov	ax,2	
 33164 00002D74 A2[8734]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 33165                                  
 33166 00002D77 B3F0                    	mov	bl,0F0h			; get default mediabyte
 33167                                  
 33168                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 33169                                  
 33170                                  	;mov	bh,[deviceparameters+17]
 33171                                  	; 02/11/2022
 33172 00002D79 8A3E[8F34]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 33173                                  
 33174                                  	; 04/01/2023
 33175                                  	; ax = 2
 33176 00002D7D 3906[9434]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 33177                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 33178 00002D81 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 33179                                  
 33180 00002D83 7524                    	jne	short only_one_head	; one head, do one head stuff
 33181                                  
 33182                                  ;	two head drives will use the mediadescriptor from the bpb
 33183                                  
 33184 00002D85 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 33185                                  
 33186                                  ;	two sided drives have two special cases to look for. One is
 33187                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 33188                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 33189                                  ;	   one sector/cluster.
 33190                                  
 33191                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 33192                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 33193                                  ;	   type of 2 headed drive is all set.
 33194                                  
 33195 00002D87 833E[9234]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 33196 00002D8C 7509                    	jne	short not_144m
 33197 00002D8E 833E[8234]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33198 00002D93 7502                    	jne	short not_144m
 33199                                  
 33200                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 33201                                  
 33202 00002D95 EB24                    	jmp	short got_one_secperclus_drive
 33203                                  
 33204                                  ;	check for 320K
 33205                                  
 33206                                  not_144m:
 33207 00002D97 833E[8234]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33208 00002D9C 7521                    	jne	short got_correct_mediad
 33209 00002D9E 833E[9234]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33210 00002DA3 751A                    	jne	short got_correct_mediad
 33211                                  
 33212 00002DA5 B3FC                    	mov	bl,0FCh
 33213 00002DA7 EB16                    	jmp	short got_correct_mediad
 33214                                  
 33215                                  only_one_head:
 33216                                  
 33217                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 33218                                  
 33219 00002DA9 803E[7F34]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 33220 00002DAE 740B                    	je	short got_one_secperclus_drive
 33221                                  
 33222                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 33223                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 33224                                  ;	  besides 8 will be considered 0fch
 33225                                  
 33226 00002DB0 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 33227 00002DB2 833E[9234]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33228                                  	; 12/12/2022
 33229 00002DB7 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 33230                                  
 33231 00002DB9 B3FE                    	mov	bl,0FEh			; 160K mediaid
 33232                                  
 33233                                  ;	we've either got a one sided drive, or a 1.44M drive
 33234                                  ;	  either case we'll use 1 sector per cluster instead of 2
 33235                                  
 33236                                  got_one_secperclus_drive:
 33237                                  	; 04/01/2023
 33238                                  	; ax = 2
 33239 00002DBB 48                      	dec	ax  ; ax = 1
 33240 00002DBC A2[8734]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 33241                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 33242                                  
 33243                                  got_correct_mediad:
 33244 00002DBF 881E[8F34]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 33245                                  
 33246                                  ;	 Calculate the correct number of Total Sectors on medium
 33247                                  
 33248 00002DC3 A1[8234]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 33249 00002DC6 F726[9434]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 33250 00002DCA F726[9234]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33251 00002DCE A3[8D34]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 33252 00002DD1 F8                      	clc				; we currently return no errors
 33253                                  
 33254 00002DD2 C3                      	retn
 33255                                  
 33256                                  ;	M047 -- end rewritten routine
 33257                                  
 33258                                  ;----------------------------------------------------------------------------
 33259                                  ;
 33260                                  ; procedure : organize
 33261                                  ;
 33262                                  ;----------------------------------------------------------------------------
 33263                                  
 33264                                  ; 09/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 33265                                  %if 1
 33266                                  end_commd_line:
 33267 00002DD3 AA                      	stosb				; store line feed char in buffer for the linecount.
 33268                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33269                                  	; 03/01/2023
 33270                                  	; ds = cs
 33271                                  	;mov	byte [com_level],0
 33272                                  	;jmp	short org1
 33273                                  	; 09/09/2023
 33274 00002DD4 EB11                    	jmp	short org0
 33275                                  nochar1:
 33276 00002DD6 F9                      	stc
 33277 00002DD7 C3                      	retn
 33278                                  %endif
 33279                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33280                                  	; (SYSINIT:3234h)
 33281                                  
 33282                                  organize:
 33283                                  	; 04/01/2023
 33284                                  	; ds = cs
 33285 00002DD8 8B0E[D203]              	mov	cx,[count]
 33286                                  	;mov	cx,[cs:count]
 33287 00002DDC E3F8                    	jcxz	nochar1
 33288                                  
 33289                                  ;ifndef	MULTI_CONFIG
 33290                                  ;
 33291                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 33292                                  ;;   because we the case of values in SET commands preserved
 33293                                  ;
 33294                                  ;	call	mapcase
 33295                                  ;endif
 33296                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33297 00002DDE E82502                  	call	mapcase
 33298                                  
 33299 00002DE1 31F6                    	xor	si,si
 33300 00002DE3 89F7                    	mov	di,si
 33301 00002DE5 31C0                    	xor	ax,ax
 33302                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 33303                                  	;;mov	byte [cs:com_level],0
 33304                                  	; 12/12/2022
 33305                                  	;mov	[cs:com_level],al ; 0
 33306                                  	; 04/01/2023
 33307                                  	; ds = cs
 33308                                  	; 09/09/2023
 33309                                  	;mov	[com_level],al ; 0
 33310                                  org0:
 33311 00002DE7 C606[CC03]00            	mov	byte [com_level],0 ; 09/09/2023
 33312                                  org1:
 33313 00002DEC E8A501                  	call	skip_comment
 33314 00002DEF 74E2                    	jz	short end_commd_line	; found a comment string and skipped.
 33315 00002DF1 E88A01                  	call	get2			; not a comment string. then get a char.
 33316 00002DF4 3C0A                    	cmp	al,lf ; 0Ah
 33317 00002DF6 74DB                    	je	short end_commd_line	; starts with a blank line.
 33318 00002DF8 3C20                    	cmp	al,' ' ; 20h
 33319 00002DFA 76F0                    	jbe	short org1		; skip leading control characters
 33320                                  	; 09/09/2023
 33321                                  	;jmp	short findit
 33322                                  
 33323                                  ; 09/09/2023
 33324                                  %if 0
 33325                                  end_commd_line:
 33326                                  	stosb				; store line feed char in buffer for the linecount.
 33327                                  	;mov	byte [cs:com_level],0	; reset the command level.
 33328                                  	; 03/01/2023
 33329                                  	; ds = cs
 33330                                  	mov	byte [com_level],0
 33331                                  	jmp	short org1
 33332                                  
 33333                                  nochar1:
 33334                                  	stc
 33335                                  	retn
 33336                                  %endif
 33337                                  
 33338                                  findit:
 33339 00002DFC 51                      	push	cx
 33340 00002DFD 56                      	push	si
 33341 00002DFE 57                      	push	di
 33342 00002DFF 89F5                    	mov	bp,si
 33343 00002E01 4D                      	dec	bp
 33344 00002E02 BE[ED33]                        mov     si,comtab		; prepare to search command table
 33345 00002E05 B500                    	mov	ch,0
 33346                                  findcom:
 33347 00002E07 89EF                    	mov	di,bp
 33348 00002E09 8A0C                    	mov	cl,[si]
 33349 00002E0B 46                      	inc	si
 33350 00002E0C E324                    	jcxz	nocom
 33351                                  
 33352                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33353                                  
 33354                                  ;ifdef	MULTI_CONFIG
 33355                                  ;
 33356                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 33357                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 33358                                  ;;   anything in particular)
 33359                                  ;
 33360                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 33361                                  ;       je	short semicolon
 33362                                  ;loopcom:
 33363                                  ;       mov     al,[es:di]
 33364                                  ;       inc     di
 33365                                  ;       and     al,~20h ; 0DFh		; force upper case
 33366                                  ;       inc     si                      ; compare to byte @es:di
 33367                                  ;       cmp     al,[si-1]
 33368                                  ;       loope   loopcom
 33369                                  ;;else
 33370                                  ;;	repe	cmpsb
 33371                                  ;endif
 33372                                  	; 02/11/2022
 33373 00002E0E F3A6                    	repe	cmpsb
 33374                                  
 33375 00002E10 9F                      	lahf
 33376 00002E11 01CE                            add     si,cx                   ; bump to next position without affecting flags
 33377 00002E13 9E                      	sahf
 33378 00002E14 AC                              lodsb                           ; get indicator letter
 33379 00002E15 75F0                    	jnz	short findcom
 33380 00002E17 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 33381 00002E1B 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 33382 00002E1D 26803D0A                	cmp	byte [es:di],lf
 33383 00002E21 740A                    	je	short gotcom0
 33384                                  
 33385                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33386                                  ;
 33387                                  ;;ifdef	MULTI_CONFIG
 33388                                  ;
 33389                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 33390                                  ;
 33391                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 33392                                  ;       je	short gotcom0
 33393                                  ;;endif
 33394                                  ;	push	ax
 33395                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 33396                                  ;
 33397                                  ;;ifdef	MULTI_CONFIG
 33398                                  ;
 33399                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 33400                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 33401                                  ;;   stored in the CONFIG.SYS memory image.
 33402                                  ;
 33403                                  ;       cmp     al,'?'                  ; explicit interactive command?
 33404                                  ;       jne	short no_query		; no
 33405                                  ;       pop     ax                      ; yes, so retrieve the original code
 33406                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 33407                                  ;       jmp     short gotcom0           ;
 33408                                  ;semicolon:
 33409                                  ;       mov     al,CONFIG_REM
 33410                                  ;       jmp     short gotcom0
 33411                                  ;no_query:
 33412                                  ;;endif  ;MULTI_CONFIG
 33413                                  
 33414                                  	; 02/11/2022
 33415 00002E23 50                      	push	ax
 33416 00002E24 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 33417                                  
 33418 00002E27 E8A001                  	call	delim
 33419                                  no_delim:
 33420 00002E2A 58                      	pop	ax
 33421 00002E2B 75DA                    	jnz	short findcom
 33422                                  gotcom0:
 33423 00002E2D 5F                      	pop	di
 33424 00002E2E 5E                      	pop	si
 33425 00002E2F 59                      	pop	cx
 33426 00002E30 EB0F                    	jmp	short gotcom
 33427                                  nocom:
 33428 00002E32 5F                      	pop	di
 33429 00002E33 5E                      	pop	si
 33430 00002E34 59                      	pop	cx
 33431 00002E35 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 33432 00002E37 AA                      	stosb				; save indicator char.
 33433                                  _skipline:
 33434 00002E38 E84301                  	call	get2
 33435 00002E3B 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 33436 00002E3D 75F9                            jne     short _skipline
 33437 00002E3F EB92                    	jmp	short end_commd_line	; handle next command line
 33438                                  gotcom:
 33439 00002E41 AA                              stosb                           ; save indicator char in buffer
 33440                                  
 33441                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33442                                  ;;ifdef	MULTI_CONFIG
 33443                                  ;
 33444                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 33445                                  ;;   it screws up the direct comparisons below.
 33446                                  ;
 33447                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33448                                  ;;endif
 33449                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 33450                                  ;
 33451                                  ;;ifdef	MULTI_CONFIG
 33452                                  ;
 33453                                  ;;   There is no whitespace/delimiter between the "begin block" character
 33454                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 33455                                  ;;   skipping code
 33456                                  ;
 33457                                  ;       cmp     al,CONFIG_BEGIN
 33458                                  ;       je	short org31
 33459                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 33460                                  ;       je      short no_mapcase
 33461                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 33462                                  ;       je      short no_mapcase
 33463                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 33464                                  ;       je      short no_mapcase
 33465                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 33466                                  ;       je      short no_mapcase
 33467                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 33468                                  ;no_mapcase:
 33469                                  ;;endif
 33470                                  
 33471                                  	; 02/11/2022
 33472                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 33473                                  	; 04/01/2023
 33474                                  	; ds = cs
 33475 00002E42 A2[D003]                	mov	[cmd_indicator],al
 33476                                  org2:	
 33477 00002E45 E83601                  	call    get2                    ; skip the command name until delimiter
 33478 00002E48 3C0A                            cmp     al,lf
 33479 00002E4A 740B                    	je	short org21
 33480 00002E4C 3C0D                    	cmp	al,cr
 33481 00002E4E 7407                    	je	short org21
 33482                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33483                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 33484                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 33485                                  
 33486 00002E50 E87701                  	call	delim
 33487 00002E53 75F0                            jnz	short org2
 33488 00002E55 EB02                    	jmp	short org3
 33489                                  org21:					;if cr or lf then
 33490 00002E57 4E                      	dec	si			; undo si, cx register
 33491 00002E58 41                      	inc	cx			;  and continue
 33492                                  org3:	
 33493                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 33494                                  	;je	short get_cmt_token
 33495                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33496                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33497                                  	;;je	short org_file
 33498                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 33499                                  	;je	short org_file
 33500                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33501                                          ;;je	short org_file
 33502                                  	;; 02/11/2022
 33503                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 33504                                  	;je	short org_file
 33505                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 33506                                  	;je	short org_file
 33507                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 33508                                  	;je	short org_switch
 33509                                  
 33510                                  	; 04/01/2023
 33511                                  	; ds = cs
 33512                                  
 33513 00002E59 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 33514 00002E5E 7456                    	je	short get_cmt_token
 33515                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33516                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33517                                  	;je	short org_file
 33518 00002E60 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 33519 00002E65 7429                    	je	short org_file
 33520                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 33521                                          ;je	short org_file
 33522                                  	; 02/11/2022
 33523 00002E67 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 33524 00002E6C 7422                    	je	short org_file
 33525 00002E6E 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 33526 00002E73 741B                    	je	short org_file
 33527 00002E75 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 33528 00002E7A 7403                    	je	short org_switch
 33529                                  	
 33530                                  org31:
 33531 00002E7C E99500                  	jmp	org4
 33532                                  
 33533                                  org_switch:
 33534 00002E7F E81201                  	call	skip_comment
 33535 00002E82 7472                    	jz	short end_commd_line_brdg
 33536                                  
 33537 00002E84 E8F700                  	call	get2
 33538 00002E87 E84801                  	call	org_delim
 33539 00002E8A 74F3                    	jz	short org_switch
 33540                                  
 33541 00002E8C AA                      	stosb
 33542 00002E8D E99300                  	jmp	org5
 33543                                  
 33544                                  org_file:			; get the filename and put 0 at end
 33545 00002E90 E80101                  	call	skip_comment
 33546 00002E93 7464                    	jz	short org_put_zero
 33547                                  
 33548 00002E95 E8E600                  	call	get2		; not a comment
 33549 00002E98 E82F01                  	call	delim
 33550 00002E9B 74F3                    	jz	short org_file	; skip the possible delimiters
 33551                                  
 33552 00002E9D AA                      	stosb			; copy the first non delim char found in buffer
 33553                                  
 33554                                  org_copy_file:
 33555 00002E9E E8F300                  	call	skip_comment	; comment char in the filename?
 33556 00002EA1 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 33557                                  
 33558 00002EA3 E8D800                  	call	get2
 33559 00002EA6 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 33560 00002EA8 7457                    	je	short end_file_slash ; this will be the special case.
 33561                                  
 33562 00002EAA AA                      	stosb			; save the char. in buffer
 33563 00002EAB E81C01                  	call	delim
 33564 00002EAE 7459                    	jz	short end_copy_file
 33565                                  
 33566 00002EB0 3C20                    	cmp	al, ' '
 33567 00002EB2 77EA                    	ja	short org_copy_file ; keep copying
 33568 00002EB4 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 33569                                  
 33570                                  get_cmt_token:			; get the token. just max. 2 char.
 33571 00002EB6 E8C500                  	call	get2
 33572 00002EB9 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 33573 00002EBB 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 33574 00002EBD 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 33575 00002EBF 74F5                    	je	short get_cmt_token ;  character.)
 33576 00002EC1 3C3D                    	cmp	al,'='		; = is special in this case.
 33577 00002EC3 74F1                    	je	short get_cmt_token
 33578 00002EC5 3C0D                    	cmp	al,cr
 33579 00002EC7 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 33580 00002EC9 3C0A                    	cmp	al,lf
 33581 00002ECB 7422                    	je	short get_cmt_end
 33582                                  
 33583                                  	; 04/01/2023
 33584                                  	; ds = cs
 33585                                  	;mov	[cs:cmmt1],al	; store it
 33586                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 33587 00002ECD A2[CE03]                	mov	[cmmt1],al	; store it
 33588 00002ED0 C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 33589 00002ED5 E8A600                  	call	get2
 33590 00002ED8 3C20                    	cmp	al,' ' ; 20h
 33591 00002EDA 7413                    	je	short get_cmt_end
 33592 00002EDC 3C09                    	cmp	al,tab ; 9
 33593 00002EDE 740F                    	je	short get_cmt_end
 33594 00002EE0 3C0D                    	cmp	al,cr  ; 0Dh
 33595 00002EE2 740B                    	je	short get_cmt_end
 33596 00002EE4 3C0A                    	cmp	al,lf  ; 0Ah
 33597 00002EE6 740E                    	je	short end_commd_line_brdg
 33598                                  
 33599                                  	;mov	[cs:cmmt2],al
 33600                                  	;inc	byte [cs:cmmt]
 33601                                  	; 04/01/2023
 33602 00002EE8 A2[CF03]                	mov	[cmmt2],al
 33603 00002EEB FE06[CD03]              	inc	byte [cmmt]
 33604                                  
 33605                                  get_cmt_end:
 33606 00002EEF E88C00                  	call	get2
 33607 00002EF2 3C0A                    	cmp	al,lf
 33608 00002EF4 75F9                    	jne	short get_cmt_end	; skip it.
 33609                                  end_commd_line_brdg: 
 33610 00002EF6 E9DAFE                  	jmp	end_commd_line		; else jmp to end_commd_line
 33611                                  
 33612                                  org_put_zero:				; make the filename in front of
 33613 00002EF9 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 33614 00002EFD 47                      	inc	di
 33615 00002EFE E9D2FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 33616                                  
 33617                                  end_file_slash: 			; al = "/" option char.
 33618 00002F01 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 33619 00002F05 47                      	inc	di			; and
 33620 00002F06 AA                      	stosb				; store "/" after that.
 33621 00002F07 EB1A                    	jmp	short org5		; continue with the rest of the line
 33622                                  
 33623                                  end_copy_file:
 33624 00002F09 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 33625 00002F0E 3C0A                    	cmp	al,lf
 33626 00002F10 74E4                    	je	short end_commd_line_brdg
 33627 00002F12 EB0F                    	jmp	short org5
 33628                                  
 33629                                  org4:					; org4 skips all delimiters after the command name except for '/'
 33630 00002F14 E87D00                  	call	skip_comment
 33631 00002F17 74DD                    	jz	short end_commd_line_brdg
 33632                                  
 33633 00002F19 E86200                  	call	get2
 33634 00002F1C E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 33635 00002F1F 74F3                    	jz	short org4
 33636 00002F21 EB08                    	jmp	short org51
 33637                                  
 33638                                  org5:					; rest of the line
 33639 00002F23 E86E00                  	call	skip_comment		; comment?
 33640 00002F26 74CE                    	jz	short end_commd_line_brdg
 33641 00002F28 E85300                  	call	get2			; not a comment.
 33642                                  
 33643                                  org51:
 33644 00002F2B AA                      	stosb				; copy the character
 33645 00002F2C 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 33646 00002F2E 743A                    	je	short at_quote
 33647 00002F30 3C20                    	cmp	al,' '  ; 20h
 33648 00002F32 77EF                    	ja	short org5
 33649                                  					; M051 - Start
 33650                                  	; 04/01/2023
 33651                                  	; ds = cs
 33652 00002F34 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 33653                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 33654 00002F39 7514                    	jne	short not_dh		; N: 
 33655 00002F3B 3C0A                    	cmp	al,lf			; Q: is this line feed
 33656 00002F3D 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 33657 00002F3F 3C0D                    	cmp	al,cr			; Q: is this a cr
 33658 00002F41 75E0                    	jne	short org5		; N: 
 33659 00002F43 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 33660 00002F48 AA                      	stosb				; put cr after blank
 33661 00002F49 FE06[1C2C]              	inc	byte [insert_blank]
 33662                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 33663                                  					; inserted
 33664 00002F4D EBD4                    	jmp	short org5
 33665                                  not_dh:					; M051 - End
 33666                                  
 33667 00002F4F 3C0A                    	cmp	al,lf			; line feed?
 33668 00002F51 740F                    	je	short org1_brdg		; handles the next command line.
 33669 00002F53 EBCE                    	jmp	short org5		; handles next char in this line.
 33670                                  
 33671                                  org_dhlf:				; M051 - Start
 33672                                  	; 04/01/2023
 33673                                  	; ds = cs
 33674 00002F55 803E[1C2C]01            	cmp	byte [insert_blank],1
 33675                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 33676 00002F5A 7406                    	je	short org1_brdg		; Y:
 33677 00002F5C 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 33678 00002F61 AA                      	stosb				; put lf after blank
 33679                                  					; M051 - End
 33680                                  org1_brdg:
 33681 00002F62 C606[1C2C]00            	mov	byte [insert_blank],0 
 33682                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 33683                                  					; M051: devicehigh
 33684 00002F67 E982FE                  	jmp	org1
 33685                                  
 33686                                  at_quote:
 33687 00002F6A 803E[CC03]00            	cmp	byte [com_level],0
 33688                                  	;cmp	byte [cs:com_level],0
 33689 00002F6F 7407                    	je	short up_level
 33690                                  	;mov	byte [cs:com_level],0	; reset it.
 33691 00002F71 C606[CC03]00            	mov	byte [com_level],0
 33692 00002F76 EBAB                    	jmp	short org5
 33693                                  
 33694                                  up_level:
 33695                                  	;inc	byte [cs:com_level]	; set it.
 33696 00002F78 FE06[CC03]              	inc	byte [com_level]
 33697 00002F7C EBA5                    	jmp	short org5
 33698                                  
 33699                                  ;----------------------------------------------------------------------------
 33700                                  ;
 33701                                  ; procedure : get2
 33702                                  ;
 33703                                  ;----------------------------------------------------------------------------
 33704                                  
 33705                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33706                                  	; (SYSINIT:33FAh)
 33707                                  	; 04/01/2023
 33708                                  get2:
 33709 00002F7E E304                    	jcxz	noget
 33710                                  	;
 33711                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33712                                  	;;lods	byte ptr es:[si]
 33713                                  	; 12/12/2022
 33714 00002F80 26                      	es	
 33715 00002F81 AC                      	lodsb
 33716                                  	;mov	al, [es:si]
 33717                                  	;inc	si
 33718                                  	;
 33719 00002F82 49                      	dec	cx
 33720 00002F83 C3                      	retn
 33721                                  noget:
 33722 00002F84 59                      	pop	cx
 33723                                  	; 04/01/2023
 33724                                  	; ds = cs
 33725                                  	;mov	[cs:count],di ; 13/05/2019
 33726                                  	;mov	[cs:org_count],di
 33727 00002F85 893E[D203]              	mov	[count],di
 33728 00002F89 893E[D403]              	mov	[org_count],di
 33729 00002F8D 31F6                    	xor	si,si
 33730                                  	;mov	[cs:chrptr],si
 33731 00002F8F 8936[D603]              	mov	[chrptr],si
 33732                                  
 33733                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33734                                  ;;ifndef MULTI_CONFIG
 33735                                  ;;	retn
 33736                                  ;;else
 33737                                  ;
 33738                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 33739                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33740                                  ;;   and the new boot menu stuff...
 33741                                  ;
 33742                                  ;	mov     cx,di
 33743                                  ;	jmp     menu_check
 33744                                  ;;endif
 33745                                  
 33746                                  	; 02/11/2022
 33747 00002F93 C3                      	retn
 33748                                  
 33749                                  ;----------------------------------------------------------------------------
 33750                                  ;
 33751                                  ; procedure : skip_comment
 33752                                  ;
 33753                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33754                                  ;in) es:si-> string
 33755                                  ;	 cx -> length.
 33756                                  ;out) zero flag not set if not found a comment string.
 33757                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33758                                  ;	  the line feed character at this moment when return.
 33759                                  ;	  ax register destroyed.
 33760                                  ;	  if found, si, cx register adjusted accordingly.
 33761                                  ;
 33762                                  ;----------------------------------------------------------------------------
 33763                                  
 33764                                  	; 04/01/2023 - Retro DOS v4.0
 33765                                  
 33766                                  skip_comment:
 33767 00002F94 E3EE                    	jcxz	noget		; get out of the organize routine.
 33768                                  
 33769                                  	; 04/01/2023
 33770                                  	; ds = cs	
 33771                                  
 33772 00002F96 803E[CC03]00            	cmp	byte [com_level],0
 33773                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33774 00002F9B 752C                    	jne	short no_commt	 ; (not inside quotations)
 33775                                  
 33776 00002F9D 803E[CD03]01            	cmp	byte [cmmt],1
 33777                                  	;cmp	byte [cs:cmmt],1
 33778 00002FA2 7225                    	jb	short no_commt
 33779                                  
 33780 00002FA4 268A04                  	mov	al,[es:si]
 33781                                  	
 33782 00002FA7 3806[CE03]              	cmp	[cmmt1],al
 33783                                  	;cmp	[cs:cmmt1],al
 33784 00002FAB 751C                    	jne	short no_commt
 33785                                  
 33786 00002FAD 803E[CD03]02            	cmp	byte [cmmt],2
 33787                                  	;cmp	byte [cs:cmmt],2
 33788 00002FB2 750A                    	jne	short skip_cmmt
 33789                                  
 33790 00002FB4 268A4401                	mov	al,[es:si+1]
 33791                                  	
 33792 00002FB8 3806[CF03]              	cmp	[cmmt2],al
 33793                                  	;cmp	[cs:cmmt2],al
 33794 00002FBC 750B                    	jne	short no_commt
 33795                                  skip_cmmt:
 33796 00002FBE E3C4                    	jcxz	noget		; get out of organize routine.
 33797 00002FC0 268A04                  	mov	al,[es:si]
 33798 00002FC3 46                      	inc	si
 33799 00002FC4 49                      	dec	cx
 33800 00002FC5 3C0A                    	cmp	al,lf		; line feed?
 33801 00002FC7 75F5                    	jne	short skip_cmmt
 33802                                  no_commt:
 33803 00002FC9 C3                      	retn
 33804                                  
 33805                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33806                                  %if 0
 33807                                  
 33808                                  ;ifdef	MULTI_CONFIG
 33809                                  
 33810                                  ;----------------------------------------------------------------------------
 33811                                  ;
 33812                                  ;   kbd_read: wait for keystroke
 33813                                  ;
 33814                                  ;   INPUT
 33815                                  ;       DS == CS == sysinitseg
 33816                                  ;
 33817                                  ;   OUTPUT
 33818                                  ;       Carry SET to clean boot, CLEAR otherwise
 33819                                  ;
 33820                                  ;   OTHER REGS USED
 33821                                  ;       All
 33822                                  ;
 33823                                  ;   HISTORY
 33824                                  ;       Created 16-Nov-1992 by JeffPar
 33825                                  ;
 33826                                  ;----------------------------------------------------------------------------
 33827                                  
 33828                                  kbd_read:
 33829                                          test    byte [bDisableUI],2
 33830                                          jnz     short kbd_nodelay
 33831                                  
 33832                                          push    ds              ; the bios timer tick count is incremented
 33833                                          sub     ax,ax           ; 18.2 times per second;
 33834                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33835                                  	;mov	dx,[046Ch]	; get initial value
 33836                                  kbd_loop:
 33837                                          mov     ah,1            ;
 33838                                          int     16h             ; peek the keyboard
 33839                                          jnz	short kbd_loopdone ; something's there, get out
 33840                                          mov     ah,2            ; peek the shift states
 33841                                          int     16h             ;
 33842                                          test    al,03h          ; either right or left shift key bits set?
 33843                                          jnz	short kbd_loopdone ; yes
 33844                                          mov     ax,[046Ch]	;
 33845                                  	;sub	ax,dx           ; get difference
 33846                                  	; 15/04/2019 - Retro DOS v4.0
 33847                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33848                                  
 33849                                  	cmp     al,37           ; reached limit?
 33850                                          jb	short kbd_loop	; not yet
 33851                                  kbd_loopdone:
 33852                                          pop     ds              ; delay complete!
 33853                                  kbd_nodelay:
 33854                                          sub     bx,bx           ; assume clean boot
 33855                                          mov     ah,2            ; peek the shift states
 33856                                          int     16h             ;
 33857                                          test    al,03h          ; either right or left shift key bits set?
 33858                                          jz      short kbd_notshift ; no
 33859                                          inc     bx              ; yes
 33860                                          inc     bx
 33861                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33862                                  	or	byte [bQueryOpt],4
 33863                                  kbd_notshift:                   ;
 33864                                          mov     ah,1            ; peek the keyboard
 33865                                          int     16h             ;
 33866                                          jz	short kbd_test	; no key present
 33867                                          or      al,al           ; is it a function key?
 33868                                          jnz	short kbd_test	; no
 33869                                  
 33870                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33871                                          cmp     ah,62h          ; CTRL F5
 33872                                          je	short kbd_cfg_bypass
 33873                                  	
 33874                                          cmp     ah,3Fh          ; F5 function key?
 33875                                          jne	short kbd_notf5	; no
 33876                                  kbd_cfg_bypass:
 33877                                          mov     dx,_$CleanMsg
 33878                                          call    print
 33879                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33880                                  	or	byte [bQueryOpt],4           ;
 33881                                          jmp     short kbd_eat   ; yes, clean boot selected
 33882                                  kbd_notf5:
 33883                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33884                                          cmp     ah,65h          ; CTRL F8
 33885                                          je	short kbd_cfg_confirm
 33886                                  
 33887                                          cmp     ah,42h          ; F8 function key?
 33888                                          jne	short kbd_exit	; no
 33889                                  kbd_cfg_confirm:
 33890                                          mov     dx,_$InterMsg
 33891                                          call    print           ;
 33892                                          mov     bl,1            ; yes, interactive-boot option enabled
 33893                                          mov     [bQueryOpt],bl  ; change default setting
 33894                                  kbd_eat:                        ;
 33895                                          mov     ah,0            ;
 33896                                          int     16h             ; eat the key we assumed was a signal
 33897                                          mov	byte [secElapsed],-1
 33898                                          or      bx,bx           ;
 33899                                          jz	short kbd_clean	;
 33900                                  kbd_test:                       ;
 33901                                          cmp     bl,2            ;
 33902                                          jb	short kbd_exit	;
 33903                                  kbd_clean:                      ;
 33904                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33905                                          stc                     ; set carry to indicate abort
 33906                                          retn			;
 33907                                  kbd_exit:                       ;
 33908                                          clc                     ; clear carry to indicate success
 33909                                          retn			;
 33910                                  
 33911                                  ;----------------------------------------------------------------------------
 33912                                  ;
 33913                                  ;   set_numlock: set numlock LED
 33914                                  ;
 33915                                  ;   INPUT
 33916                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33917                                  ;
 33918                                  ;   OUTPUT
 33919                                  ;       None
 33920                                  ;
 33921                                  ;   OTHER REGS USED
 33922                                  ;       None
 33923                                  ;
 33924                                  ;   HISTORY
 33925                                  ;       Created 16-Nov-1992 by JeffPar
 33926                                  ;
 33927                                  ;----------------------------------------------------------------------------
 33928                                  
 33929                                  set_numlock:
 33930                                          push    ax
 33931                                          push    ds
 33932                                          sub     ax,ax
 33933                                          mov     ds,ax
 33934                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33935                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33936                                          jne	short not_off	; no
 33937                                          and     byte [0417h],~20h ; 0DFh
 33938                                          jmp     short set_done
 33939                                  not_off:
 33940                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33941                                          stc
 33942                                          jne	short set_done	; no
 33943                                          or      byte [0417h],20h
 33944                                  set_done:
 33945                                          pop     ds
 33946                                          pop     ax
 33947                                          retn
 33948                                  
 33949                                  ; 16/04/2019 - Retro DOS v4.0
 33950                                  
 33951                                  ;----------------------------------------------------------------------------
 33952                                  ;
 33953                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33954                                  ;
 33955                                  ;   INPUT
 33956                                  ;       CX == "organized" config.sys memory image length
 33957                                  ;    ES:SI -> "organized" config.sys memory image
 33958                                  ;       DS == CS == sysinitseg
 33959                                  ;
 33960                                  ;   OUTPUT
 33961                                  ;       Same as above;  the idea is that menu_check simply transforms
 33962                                  ;       a block-structured config.sys image into a conventional image,
 33963                                  ;       based on the user's block selection and any other boot-time options
 33964                                  ;       the user may have employed...
 33965                                  ;
 33966                                  ;   OTHER REGS USED
 33967                                  ;       All
 33968                                  ;
 33969                                  ;   NOTES
 33970                                  ;       [count] and [org_count] are set to the new config.sys image length
 33971                                  ;
 33972                                  ;   HISTORY
 33973                                  ;       Created 16-Mar-1992 by JeffPar
 33974                                  ;
 33975                                  ;----------------------------------------------------------------------------
 33976                                  
 33977                                  menu_check:
 33978                                  
 33979                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33980                                  ;   disable clean/interactive boot options
 33981                                  
 33982                                          push    cx              ;
 33983                                          push    si              ;
 33984                                          sub     bx,bx           ; remains ZERO until first block
 33985                                  swchk_loop:                     ;
 33986                                          call    get_char        ; get first char of current line
 33987                                          jc	short swchk_end	; hit eof
 33988                                          cmp     al,CONFIG_BEGIN ;
 33989                                          jne	short swchk_next1 ;
 33990                                          inc     bx              ; remember that we've seen a block
 33991                                          jmp     short swchk_nextline
 33992                                  swchk_next1:                    ;
 33993                                          cmp     al,CONFIG_NUMLOCK
 33994                                          jne	short swchk_next2 ;
 33995                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33996                                          jnz	short swchk_nextline ; before the first block
 33997                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33998                                          mov     byte [es:si-1],CONFIG_REM
 33999                                          jmp     short swchk_nextline
 34000                                  swchk_next2:                    ;
 34001                                          cmp     al,CONFIG_SWITCHES
 34002                                          jne	short swchk_nextline ; this line ain't it
 34003                                  swchk_scan:                     ;
 34004                                          call    get_char        ; look for /N or /F
 34005                                  swchk_scan1:                    ;
 34006                                          cmp     al,LF           ; end of line?
 34007                                          je	short swchk_nextline ; yes
 34008                                          cmp     al,'/'          ; switch-char?
 34009                                          jne	short swchk_scan ; no
 34010                                          call    get_char        ;
 34011                                          and     al,~20h ; 0DFh	; convert to upper case
 34012                                          cmp     al,[swit_n+1]
 34013                                          jne	short swchk_scan2 ; no
 34014                                          or      byte [bDisableUI],1
 34015                                          jmp	short swchk_scan ; continue looking for switches of interest
 34016                                  swchk_scan2:                    ;
 34017                                          cmp     al,[swit_f+1]
 34018                                          jne	short swchk_scan1 ; no
 34019                                          or      byte [bDisableUI],2
 34020                                          jmp     short swchk_scan ; continue looking for switches of interest
 34021                                  swchk_nextline:                 ;
 34022                                          call    skip_opt_line   ;
 34023                                          jmp     short swchk_loop ;
 34024                                  swchk_end:                      ;
 34025                                          pop     si              ;
 34026                                          pop     cx              ;
 34027                                  
 34028                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 34029                                  ;   the DisableUI flag is still clear
 34030                                  
 34031                                          test    byte [bDisableUI],1
 34032                                          jnz	short menu_search
 34033                                  ;
 34034                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 34035                                  ;   there is anything at all in the keyboard buffer
 34036                                  ;
 34037                                          call    kbd_read
 34038                                          jnc	short menu_search
 34039                                          jmp	menu_abort
 34040                                  
 34041                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 34042                                  
 34043                                  menu_search:
 34044                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 34045                                          mov     di,szMenu	;
 34046                                          call    find_block      ; find the MENU block
 34047                                          jnc	short menu_found ;
 34048                                          mov     byte [szBoot],0
 34049                                          jmp	no_selection ; not found
 34050                                  
 34051                                  ;   Process the requested menu color(s)
 34052                                  
 34053                                  menu_color:
 34054                                          push    cx              ;
 34055                                          push    dx              ;
 34056                                          mov     dx,0007h        ; default color setting
 34057                                          call    get_number	; get first number
 34058                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 34059                                          mov     ch,bl           ; save it in CH
 34060                                          and     dl,0F0h         ;
 34061                                          or      dl,bl           ;
 34062                                          call    delim           ; did we hit a delimiter
 34063                                          jne	short check_color ; no, all done
 34064                                          call    get_number	; get next number
 34065                                          and     bl,0Fh		; second # is background color (for high nibble)
 34066                                          mov     dh,bl           ; save it in DH
 34067                                          and     dl,0Fh		;
 34068                                          mov     cl,4            ;
 34069                                          shl     bl,cl           ;
 34070                                          or      dl,bl           ;
 34071                                  check_color:                    ;
 34072                                          cmp     ch,dh           ; are foreground/background the same?
 34073                                          jne	short set_color	; no
 34074                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 34075                                  set_color:
 34076                                          mov     [bMenuColor],dl ;
 34077                                          pop     dx              ;
 34078                                          pop     cx              ;
 34079                                          jmp	menu_nextitem
 34080                                  
 34081                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 34082                                  ;   above is there simply to alleviate short jump problems)
 34083                                  
 34084                                  menu_found:
 34085                                          mov     byte [bDefBlock],1
 34086                                          mov     word [offDefBlock],0
 34087                                          mov     byte [secTimeOut],-1
 34088                                          and     byte [bQueryOpt],~2 ; 0FDh
 34089                                  
 34090                                          call    skip_opt_line   ; skip to next line
 34091                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 34092                                  
 34093                                  ;   Process the menu block now
 34094                                  
 34095                                  menu_process:
 34096                                          call    get_char        ; get first char of current line
 34097                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 34098                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34099                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 34100                                          je	short to_menu_getdefault
 34101                                          cmp     al,CONFIG_SUBMENU
 34102                                          je	short menu_item	; go process sub-menu
 34103                                          cmp     al,CONFIG_MENUITEM
 34104                                          je	short menu_item	; go process menu item
 34105                                          cmp     al,CONFIG_MENUDEFAULT
 34106                                          je	short menu_default ; go process menu default
 34107                                          cmp     al,CONFIG_MENUCOLOR
 34108                                          je	short menu_color ; go process menu color
 34109                                          cmp     al,CONFIG_NUMLOCK
 34110                                          je	short menu_numlock ;
 34111                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 34112                                          je	short menu_nextitem ;
 34113                                          call    any_delim       ; allow blank lines and such
 34114                                          je	short menu_nextitem ;
 34115                                          stc                     ;
 34116                                          call    print_error     ; non-MENU command!
 34117                                          jmp     short menu_nextitem
 34118                                  menu_numlock:
 34119                                          call    set_numlock
 34120                                          jmp     short menu_nextitem
 34121                                  to_menu_getdefault:
 34122                                          jmp     short menu_getdefault
 34123                                  
 34124                                  ;   Save the offset of the default block name, we'll need it later
 34125                                  
 34126                                  menu_default:
 34127                                          mov     [offDefBlock],si; save address of default block name
 34128                                          cmp     byte [secElapsed],0
 34129                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 34130                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 34131                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 34132                                          call    skip_delim      ; something is typed
 34133                                          jc	short menu_nextitem ;
 34134                                          mov     si,bx           ;
 34135                                          call    get_number      ; get number (of seconds for timeout)
 34136                                          cmp     bl,90           ; limit it to a reasonable number
 34137                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 34138                                          mov     bl,90           ;  display function can handle)
 34139                                  timeout_ok:                     ;
 34140                                          mov     [secTimeOut],bl ;
 34141                                  timeout_skip:
 34142                                          jmp     short menu_nextitem
 34143                                  
 34144                                  ;   Verify that this is a valid menu item by searching for the named block
 34145                                  
 34146                                  menu_item:
 34147                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 34148                                          jae	short menu_nextitem ;
 34149                                          mov     di,si           ; DS:DI -> block name to search for
 34150                                          call    srch_block      ;
 34151                                          je	short menu_itemfound ;
 34152                                          stc                     ;
 34153                                          call    print_error     ; print error and pause
 34154                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 34155                                  
 34156                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 34157                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 34158                                  ;   and CX are unmodified
 34159                                  
 34160                                  menu_itemfound:
 34161                                          inc     dx              ; otherwise, increment total block count
 34162                                          mov     bx,dx           ; and use it to index the arrays of offsets
 34163                                          mov	[abBlockType+bx],al
 34164                                          add     bx,bx           ; of recorded block names and descriptions
 34165                                  
 34166                                  ;   There should be a description immediately following the block name on
 34167                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 34168                                  ;   description...
 34169                                  
 34170                                          mov     [aoffBlockName+bx],si
 34171                                          mov     [aoffBlockDesc+bx],si
 34172                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 34173                                          call    skip_token      ;
 34174                                          jc	short menu_nextitem ; hit eol/eof
 34175                                          call    skip_delim      ;
 34176                                          jc	short menu_nextitem ; hit eol/eof
 34177                                          xchg    bx,di           ;
 34178                                          mov     [aoffBlockDesc+bx],di
 34179                                  
 34180                                  menu_nextitem:
 34181                                          call    skip_opt_line   ;
 34182                                          jmp     menu_process    ; go back for more lines
 34183                                  
 34184                                  ;   Display menu items now, after determining which one is default
 34185                                  
 34186                                  menu_getdefault:
 34187                                          or      dl,dl           ; where there any valid blocks at all?
 34188                                          jnz	short menu_valid ; yes
 34189                                          sub     bx,bx           ; no, so force autoselect of 0
 34190                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 34191                                  menu_valid:
 34192                                          sub     bx,bx           ;
 34193                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 34194                                          mov     di,[offDefBlock];
 34195                                          or      di,di           ; does a default block exist?
 34196                                          jz	short menu_nodefault ; no
 34197                                          inc     bx              ; yes, walk name table, looking for default
 34198                                  menu_chkdefault:
 34199                                          push    bx              ;
 34200                                          add     bx,bx           ;
 34201                                          mov     si,[aoffBlockName+bx]
 34202                                          mov     cx,128          ; arbitrary maximum length of a name
 34203                                          push    ds              ;
 34204                                          push    es              ;
 34205                                          pop     ds              ;
 34206                                          call    comp_names      ; is this block the same as the default?
 34207                                          pop     ds              ;
 34208                                          pop     bx              ;
 34209                                          je	short menu_setdefault ; yes
 34210                                          inc     bx              ;
 34211                                          cmp     bl,[bMaxBlock]  ; all done searching?
 34212                                          jbe	short menu_chkdefault ; not yet
 34213                                  menu_nodefault:
 34214                                          mov     bl,1            ; if no default, force default to #1
 34215                                  menu_setdefault:
 34216                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 34217                                  
 34218                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 34219                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 34220                                  ;   supposed to skip menu display and run with the specified default block;
 34221                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 34222                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 34223                                  ;   with no timeout)
 34224                                  
 34225                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 34226                                          jne	short menu_display ; no
 34227                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 34228                                          jnz	short menu_display ; yes, so *don't* assume default after all
 34229                                          jmp     not_topmenu	;
 34230                                  
 34231                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 34232                                  
 34233                                  menu_display:
 34234                                          mov     ah,0Fh          ; get current video mode
 34235                                          int     10h             ;
 34236                                          mov     ah,00h          ; just re-select that mode
 34237                                          int     10h             ;
 34238                                          push    es              ;
 34239                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 34240                                          mov     es,ax           ; and save the current (default) video page
 34241                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 34242                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 34243                                          mov     al,[es:0062h]   ;
 34244                                          mov     [bCRTPage],al   ;
 34245                                          mov     ax,[bMenuPage]	; select new page for menu
 34246                                          int     10h             ;
 34247                                          mov     ax,0600h        ; clear entire screen
 34248                                          mov     bh,[bMenuColor] ; using this color
 34249                                          sub     cx,cx           ; upper left row/col
 34250                                          ;mov	dl,[es:CRT_Cols] 
 34251                                          mov	dl,[es:4Ah]
 34252                                  	dec     dl              ;
 34253                                          ;mov	dh,[es:CRT_Rows];
 34254                                          mov	dh,[es:84h]
 34255                                  	or      dh,dh           ; # of rows valid?
 34256                                          jnz	short menu_clear ; hopefully
 34257                                          mov     dh,[bLastRow]   ; no, use a default
 34258                                  menu_clear:
 34259                                          int     10h             ; clear the screen using the req. attribute
 34260                                          pop     es              ;
 34261                                          mov     [bLastRow],dh   ; save DH
 34262                                          mov     dx,_$MenuHeader
 34263                                          call    print           ; cursor now on row 3 (numbered from 0)
 34264                                  
 34265                                          test    byte [bDisableUI],1
 34266                                          jnz     short menu_nostatus
 34267                                          mov     bh,[bMenuPage]  ;
 34268                                          mov     dh,[bLastRow]   ; restore DH
 34269                                          mov     dl,0            ; print the status line on row DH, col 0,
 34270                                          mov     ah,02h          ; now that we can trash the cursor position
 34271                                          int     10h             ;
 34272                                          mov     dx,_$StatusLine
 34273                                          call    print           ;
 34274                                          mov     ah,3            ; get cursor position
 34275                                          int     10h             ;
 34276                                          sub     dl,2            ;
 34277                                          mov     [bLastCol],dl   ; save column where status char will go
 34278                                  
 34279                                  menu_nostatus:
 34280                                          mov     bx,1            ; now prepare to display all the menu items
 34281                                  menu_disploop:
 34282                                          call    print_item	; print item #BL
 34283                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 34284                                          cmp     bl,[bMaxBlock]  ; all done?
 34285                                          jbe	short menu_disploop ; not yet
 34286                                  
 34287                                  ;   Set cursor position to just below the menu items
 34288                                  
 34289                                          mov     dl,0            ; select column
 34290                                          mov     dh,bl           ;
 34291                                          add     dh,4            ; select row below menu
 34292                                          mov     bh,[bMenuPage]  ;
 34293                                          mov     ah,02h          ; set cursor position beneath the block list
 34294                                          int     10h             ;
 34295                                  
 34296                                          mov     dx,_$MenuPrmpt
 34297                                          call    print           ;
 34298                                          call    select_item     ; make a selection, return # in BX
 34299                                          mov     dx,crlfm	
 34300                                          call    print           ;
 34301                                          push    word [bDisableUI]
 34302                                          or      byte [bDisableUI],1
 34303                                          call    show_status     ; clear the status line now
 34304                                          pop     word [bDisableUI]
 34305                                  
 34306                                  ;   Now begins the "re-organization" process...
 34307                                  
 34308                                  menu_autoselect:
 34309                                          cmp     bx,-1           ; clean boot requested?
 34310                                          jne	short normal_boot ; no
 34311                                          call    disable_autoexec; basically, add a /D to the command.com line
 34312                                  menu_abort:
 34313                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 34314                                          jmp	menu_exit	;
 34315                                  
 34316                                  normal_boot:
 34317                                          cmp     bx,-2           ; back to top-level menu?
 34318                                          jne	short not_topmenu ; no
 34319                                          mov     cx,[count]      ; yes, start all over
 34320                                          sub     si,si           ;
 34321                                          jmp     menu_search
 34322                                  
 34323                                  not_topmenu:
 34324                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 34325                                          jne	short not_submenu
 34326                                          add     bx,bx           ;
 34327                                          mov     di,[aoffBlockName+bx]
 34328                                          call    srch_block      ; THIS CANNOT FAIL!
 34329                                          mov     si,di           ;
 34330                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 34331                                          jmp     menu_found
 34332                                  
 34333                                  not_submenu:
 34334                                          add     bx,bx           ; get BX -> name of selected block
 34335                                          mov     bx,[aoffBlockName+bx]
 34336                                  
 34337                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 34338                                  ;   the offset relative to ES of the block name to be processed (along with
 34339                                  ;   all the "common" lines of course)
 34340                                  
 34341                                  no_selection:
 34342                                          mov     [offDefBlock],bx; save selection
 34343                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 34344                                          sub     si,si           ;
 34345                                          push    ds              ;
 34346                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 34347                                          sub     di,di           ;
 34348                                  
 34349                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 34350                                  ;
 34351                                  ;   Work our way through the config.sys image again, this time copying
 34352                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 34353                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 34354                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 34355                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 34356                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 34357                                  ;
 34358                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 34359                                  ;   stack we're running on, then we should check it inside copy_block
 34360                                  
 34361                                  copyblock_loop:
 34362                                          push    bx              ; save selected block name
 34363                                          call    copy_block      ; process (named or common) block
 34364                                          pop     bx              ;
 34365                                          jc	short move_config ; hit eof
 34366                                  
 34367                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 34368                                  
 34369                                  copyblock_begin:
 34370                                          push    ax              ;
 34371                                          push    cx              ;
 34372                                          push    si              ;
 34373                                          push    di              ; always do "common" blocks
 34374                                          mov     di,szCommon
 34375                                          push    ds              ;
 34376                                          push    cs              ;
 34377                                          pop     ds              ;
 34378                                          call    comp_names      ;
 34379                                          pop     ds              ;
 34380                                          pop     di              ;
 34381                                          pop     si              ;
 34382                                          pop     cx              ;
 34383                                          pop     ax              ;
 34384                                          je	short copyblock_check
 34385                                          or      bx,bx           ; is there a block name to check?
 34386                                          jz	short copyblock_skip ; no
 34387                                          push    di              ;
 34388                                          mov     di,bx           ; check block against given block name
 34389                                          push    ds              ;
 34390                                          push    es              ;
 34391                                          pop     ds              ;
 34392                                          call    comp_names      ; is this the block we really want to do?
 34393                                          pop     ds              ;
 34394                                          pop     di              ;
 34395                                  copyblock_check:
 34396                                          jc	short move_config ; hit eof
 34397                                          jne	short copyblock_skip  ;
 34398                                          call    skip_opt_line   ;
 34399                                          jmp	short copyblock_loop 
 34400                                  
 34401                                  copyblock_skip:                 ;
 34402                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 34403                                          call    get_char        ;
 34404                                          jc	short move_config ; hit eof
 34405                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34406                                          cmp     al,CONFIG_BEGIN ;
 34407                                          je	short copyblock_begin
 34408                                          jmp     short copyblock_skip ; anything else is just skipped
 34409                                  ;
 34410                                  ;   To create as little risk to the rest of SysInit as little as possible,
 34411                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 34412                                  ;   copy the new config.sys image to "confbot"
 34413                                  ;
 34414                                  move_config:
 34415                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 34416                                          push    cx              ;
 34417                                  ;
 34418                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 34419                                  ;   since the configuration name only currently exists in the "confbot" area
 34420                                  ;
 34421                                   	;mov	cx,7
 34422                                  	mov     cx,szMenu-szBoot-1
 34423                                          mov     si,szBoot	; first copy the CONFIG= part
 34424                                          inc     di              ; skip a byte, in case absolutely nothing
 34425                                                                  ; was copied to the workspace, because we always
 34426                                                                  ; zero the first byte of the workspace (below)
 34427                                  copy_boot: 
 34428                                  	;lods    byte ptr cs:[si];
 34429                                          cs
 34430                                  	lodsb
 34431                                  	mov     [di],al         ;
 34432                                          inc     di              ;
 34433                                          loop    copy_boot       ;
 34434                                  
 34435                                          push    es              ; then copy the configuration name
 34436                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 34437                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 34438                                          or      si,si           ; valid?
 34439                                          jnz	short l1	; yes
 34440                                          push    cs              ;
 34441                                          pop     es              ;
 34442                                          mov     si,szCommon
 34443                                  l1:     mov     al,[es:si]      ;
 34444                                          call    any_delim       ;
 34445                                          je	short l2	;
 34446                                          mov     [di],al         ;
 34447                                          inc     si              ;
 34448                                          inc     di              ;
 34449                                          loop    l1              ;
 34450                                  l2:     mov     byte [di],lf	; terminate the configuration string
 34451                                          pop     es              ;
 34452                                  
 34453                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 34454                                  
 34455                                          sub     di,di           ;
 34456                                          mov     [cs:config_envlen],di
 34457                                          sub     si,si           ;
 34458                                          pop     cx              ; recover the size of "config_wrkseg"
 34459                                  
 34460                                          push    cx              ;
 34461                                          rep     movsb           ; moved!
 34462                                          pop     cx              ;
 34463                                          mov     ax,ds           ;
 34464                                          pop     ds              ;
 34465                                  
 34466                                  ;   Now that the config_wrkseg is available once again, we shall
 34467                                  ;   use it to create an environment. The first thing to go in will be
 34468                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 34469                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 34470                                  ;   is empty.
 34471                                  
 34472                                          push    es              ;
 34473                                          mov     es,ax           ;
 34474                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 34475                                          mov     byte [es:0],0	;empty the environment block
 34476                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 34477                                          pop     es
 34478                                  
 34479                                  ;   Before returning, restore the default video page setting but do NOT
 34480                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 34481                                  ;   displayed on a different page, then it's because we don't want to see
 34482                                  ;   all the device driver/TSR goop (which goes to the default page)
 34483                                  
 34484                                  menu_done:
 34485                                          cmp     byte [bMenuPage],0
 34486                                          je	short menu_exit	;
 34487                                          push    es              ;
 34488                                          mov     ax,40h          ;
 34489                                          mov     es,ax           ;
 34490                                          mov     ax,[wCRTStart]  ;
 34491                                          mov     [es:004Eh],ax   ;
 34492                                          mov     al,[bCRTPage]   ;
 34493                                          mov     [es:0062h],al   ;
 34494                                          pop     es              ;
 34495                                  menu_exit:
 34496                                          mov     [count],cx      ; set new counts
 34497                                          mov     [org_count],cx  ;
 34498                                          sub     si,si           ; always return ES:SI pointing to config.sys
 34499                                          retn
 34500                                  
 34501                                  ;----------------------------------------------------------------------------
 34502                                  ;
 34503                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 34504                                  ;
 34505                                  ;   INPUT
 34506                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 34507                                  ;
 34508                                  ;   OUTPUT
 34509                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 34510                                  ;       carry set if error (eg, missing =); clear otherwise
 34511                                  ;
 34512                                  ;   OTHER REGS USED
 34513                                  ;       None
 34514                                  ;
 34515                                  ;   NOTES
 34516                                  ;       None
 34517                                  ;
 34518                                  ;   HISTORY
 34519                                  ;       Created 29-Mar-1992 by JeffPar
 34520                                  ;
 34521                                  ;----------------------------------------------------------------------------
 34522                                  
 34523                                  copy_envvar:
 34524                                          push    cx              ;
 34525                                          push    si              ;
 34526                                          push    ds              ;
 34527                                          push    es              ;
 34528                                          push    es              ;
 34529                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 34530                                          pop     ds                 ; DS:SI to point to envvar
 34531                                  
 34532                                  ;   Have to calculate the length of the variable name (and if we hit
 34533                                  ;   the end of the line before we hit '=', then it's curtains for this
 34534                                  ;   config.sys line)
 34535                                  ;
 34536                                  ;   The check for NULL is important because copy_envvar is also used to copy
 34537                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 34538                                  ;   menu block existed (in order to prevent the creation of an environment)
 34539                                  
 34540                                          sub     cx,cx           ;
 34541                                  copy_varlen:                    ;
 34542                                          lodsb                   ;
 34543                                          or      al,al           ; NULL?
 34544                                          stc                     ;
 34545                                          jz	short copy_envexit ; yes, abort
 34546                                          cmp     al,cr          ;
 34547                                          stc                     ;
 34548                                          je	short copy_envexit
 34549                                          cmp     al,lf          ;
 34550                                          stc                     ;
 34551                                          je	short copy_envexit
 34552                                          inc     cx              ;
 34553                                          cmp     al,'='          ;
 34554                                          jne	short copy_varlen
 34555                                          mov     al,0            ;
 34556                                          mov     ah,[si]         ; save char after '='
 34557                                          sub     si,cx           ; back up to given varname
 34558                                          dec     cx              ; CX == # of bytes in varname
 34559                                          sub     di,di           ; start looking for DS:SI at ES:0
 34560                                  copy_varsrch:
 34561                                          cmp     byte [es:di],al
 34562                                          je	short copy_envprep ; search failed, just copy var
 34563                                          mov     bx,di           ; ES:BX -> start of this varname
 34564                                          push    cx              ;
 34565                                          push    si              ;
 34566                                          repe    cmpsb           ;
 34567                                          pop     si              ;
 34568                                          pop     cx              ;
 34569                                          jne	short copy_varnext ; no match, skip to next varname
 34570                                          cmp     byte [es:di],'='
 34571                                          jne     short copy_varnext ; no match, there's more characters
 34572                                  
 34573                                  ;   Previous occurrence of variable has been found; determine the
 34574                                  ;   entire length and then destroy it
 34575                                  
 34576                                          mov     cx,-1           ;
 34577                                          repne   scasb           ; guaranteed to get null (since we put it there)
 34578                                          push    si              ;
 34579                                          mov     si,di           ;
 34580                                          mov     di,bx           ;
 34581                                          mov     cx,[cs:config_envlen]
 34582                                          sub     cx,si           ; destroy variable now
 34583                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 34584                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 34585                                  
 34586                                  	rep	; 0F3h
 34587                                  	es	; 26h
 34588                                  	movsb	; 0A4h
 34589                                  
 34590                                  	pop     si
 34591                                  copy_envprep:
 34592                                          cmp     ah,cr          ; if there is nothing after the '='
 34593                                          je	short copy_envdel ; then just exit with variable deleted
 34594                                          cmp     ah,lf           ;
 34595                                          je	short copy_envdel
 34596                                          jmp     short copy_envloop
 34597                                  
 34598                                  copy_varnext:                   ;
 34599                                          push    cx              ;
 34600                                          mov     cx,-1           ;
 34601                                          repne   scasb           ;
 34602                                          pop     cx              ;
 34603                                          jmp	short copy_varsrch
 34604                                  
 34605                                  copy_envloop:                   ;
 34606                                          lodsb                   ;
 34607                                          cmp     al,cr           ;
 34608                                          je	short copy_envdone
 34609                                          cmp     al,lf           ;
 34610                                          je	short copy_envdone
 34611                                          stosb                   ;
 34612                                          jmp     short copy_envloop
 34613                                  
 34614                                  copy_envdone:                   ;
 34615                                          sub     al,al           ; do SUB to clear carry as well
 34616                                          stosb                   ; always null-terminate these puppies
 34617                                  copy_envdel:                    ;
 34618                                          mov     [es:di],al      ; and stick another null to terminate the env.
 34619                                          mov     [cs:config_envlen],di
 34620                                  
 34621                                  copy_envexit:                   ;
 34622                                          pop     es              ;
 34623                                          pop     ds              ;
 34624                                          pop     si              ;
 34625                                          pop     cx              ;
 34626                                  
 34627                                  copy_done:	; 18/12/2022
 34628                                          retn
 34629                                  
 34630                                  ;----------------------------------------------------------------------------
 34631                                  ;
 34632                                  ;   copy_block:  copy the current block to the new config.sys workspace
 34633                                  ;
 34634                                  ;   INPUT
 34635                                  ;       CX == remaining bytes in "organized" config.sys memory image
 34636                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 34637                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 34638                                  ;             config.sys image) where the current block is to be copied
 34639                                  ;
 34640                                  ;   OUTPUT
 34641                                  ;       Same as above
 34642                                  ;       AL also equals the last character read from the organized image
 34643                                  ;
 34644                                  ;   OTHER REGS USED
 34645                                  ;       All
 34646                                  ;
 34647                                  ;   NOTES
 34648                                  ;       None
 34649                                  ;
 34650                                  ;   HISTORY
 34651                                  ;       Created 16-Mar-1992 by JeffPar
 34652                                  ;
 34653                                  ;----------------------------------------------------------------------------
 34654                                  
 34655                                  copy_block:
 34656                                          call    get_char        ; check for include
 34657                                          jc	short copy_done	;
 34658                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34659                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 34660                                          je	short copy_done ;
 34661                                  
 34662                                          cmp     al,CONFIG_INCLUDE ; 'J'
 34663                                          mov     al,ah           ; AL == the original line code
 34664                                          jne	short copy_line	; not an "include" line
 34665                                  
 34666                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 34667                                  ;   never try to include the block again (no infinite include loops please),
 34668                                  ;   then search for the named block and call copy_block again.
 34669                                  
 34670                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 34671                                          push    di              ;
 34672                                  
 34673                                          mov     di,szMenu
 34674                                          call    comp_names_safe ; don't allow INCLUDE MENU
 34675                                          je	short copy_skip	;
 34676                                  
 34677                                          mov     di,szCommon
 34678                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 34679                                          je	short copy_skip	;
 34680                                  
 34681                                          mov     di,si           ; try to find the block
 34682                                          call    srch_block      ;
 34683                                          mov     dx,di           ;
 34684                                          pop     di              ;
 34685                                          jne	short copy_error ; no such block
 34686                                          push    cx              ;
 34687                                          mov     cx,bx           ;
 34688                                          push    si              ;
 34689                                          dec     dx              ;
 34690                                          mov     si,dx           ;
 34691                                          call    skip_line       ; skip the rest of the "block name" line
 34692                                          call    copy_block      ; and copy in the rest of that block
 34693                                          pop     si              ;
 34694                                          pop     cx              ;
 34695                                          sub     al,al           ; force skip_opt_line to skip...
 34696                                          jmp     short copy_nextline
 34697                                  
 34698                                  copy_skip:
 34699                                          pop     di
 34700                                  copy_error:
 34701                                          clc                     ;
 34702                                          call    print_error     ; note that carry is clear, no pause
 34703                                          jmp     short copy_nextline
 34704                                  
 34705                                  ;   Copy the line at ES:SI to the current location at DS:DI
 34706                                  
 34707                                  copy_line:
 34708                                          mov     [di],al         ;
 34709                                          inc     di              ;
 34710                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 34711                                          jb	short copy_nextline ; no
 34712                                          cmp     byte [cs:config_multi],0
 34713                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 34714                                          call    get_linenum	; BX == line # of line @ES:SI
 34715                                          mov     [di],bx         ; stash it immediately following the line code
 34716                                          inc     di              ;
 34717                                          inc     di              ;
 34718                                          jmp     short copy_next ;
 34719                                  copy_loop:                      ;
 34720                                          call    get_char        ;
 34721                                          jc	short copy_done ; end of file
 34722                                          mov     [di],al         ;
 34723                                          inc     di              ;
 34724                                  copy_next:
 34725                                          cmp     al,lf ; 0Ah	; done with line?
 34726                                          jne	short copy_loop	; nope
 34727                                  
 34728                                  copy_nextline:
 34729                                          call    skip_opt_line   ;
 34730                                          jmp     short copy_block
 34731                                  
 34732                                  	; 18/12/2022
 34733                                  ;copy_done:
 34734                                          ;retn
 34735                                  
 34736                                  ;----------------------------------------------------------------------------
 34737                                  ;
 34738                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34739                                  ;
 34740                                  ;   INPUT
 34741                                  ;    ES:SI -> some line in the config.sys memory image
 34742                                  ;
 34743                                  ;   OUTPUT
 34744                                  ;       BX == line # (relative to 1)
 34745                                  ;
 34746                                  ;   OTHER REGS USED
 34747                                  ;       DX
 34748                                  ;
 34749                                  ;   NOTES
 34750                                  ;       None
 34751                                  ;
 34752                                  ;   HISTORY
 34753                                  ;       Created 16-Mar-1992 by JeffPar
 34754                                  ;
 34755                                  ;----------------------------------------------------------------------------
 34756                                  
 34757                                  get_linenum:
 34758                                          push    ax              ;
 34759                                          sub     bx,bx           ; BX == line # (to be returned)
 34760                                          push    cx              ;
 34761                                          mov     dx,si           ; DX == the offset we're looking for
 34762                                          push    si              ;
 34763                                          mov     cx,[cs:count]   ;
 34764                                          sub     si,si           ; prepare to scan entire file
 34765                                  get_linenum_loop:               ;
 34766                                          call    skip_line       ;
 34767                                          jc	short get_linenum_done
 34768                                          inc     bx              ;
 34769                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34770                                          jb	short get_linenum_loop ; no
 34771                                  get_linenum_done:               ;
 34772                                          pop     si              ;
 34773                                          pop     cx              ;
 34774                                          pop     ax              ;
 34775                                          retn
 34776                                  
 34777                                  ;----------------------------------------------------------------------------
 34778                                  ;
 34779                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34780                                  ;
 34781                                  ;   INPUT
 34782                                  ;       ES -> config.sys image
 34783                                  ;    ES:DI -> block name to find
 34784                                  ;
 34785                                  ;   OUTPUT
 34786                                  ;       ZF flag set, if found
 34787                                  ;    ES:DI -> just past the name in the block heading, if found
 34788                                  ;       BX == # bytes remaining from that point, if found
 34789                                  ;
 34790                                  ;   OTHER REGS USED
 34791                                  ;       None
 34792                                  ;
 34793                                  ;   NOTES
 34794                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34795                                  ;       config.sys image, not merely the remaining portion, and that it
 34796                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34797                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34798                                  ;
 34799                                  ;   HISTORY
 34800                                  ;       Created 16-Mar-1992 by JeffPar
 34801                                  ;
 34802                                  ;----------------------------------------------------------------------------
 34803                                  
 34804                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34805                                          push    ax              ;
 34806                                          push    cx              ;
 34807                                          mov     cx,[cs:count]   ;
 34808                                          push    si              ;
 34809                                          sub     si,si           ;
 34810                                          push    ds              ;
 34811                                          push    es              ;
 34812                                          pop     ds              ;
 34813                                          call    find_block      ;
 34814                                          mov     di,si           ;
 34815                                          mov     bx,cx           ;
 34816                                          pop     ds              ;
 34817                                          pop     si              ;
 34818                                          pop     cx              ;
 34819                                          pop     ax              ;
 34820                                  find_exit: ; 16/04/2019
 34821                                          retn			;
 34822                                  
 34823                                  ;----------------------------------------------------------------------------
 34824                                  ;
 34825                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34826                                  ;
 34827                                  ;   INPUT
 34828                                  ;    DS:DI -> block name to find
 34829                                  ;    ES:SI -> remainder of config.sys image
 34830                                  ;       CX == remaining size of config.sys image
 34831                                  ;
 34832                                  ;   OUTPUT
 34833                                  ;       ZF flag set, if found (also, CF set if EOF)
 34834                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34835                                  ;       CX == # bytes remaining from that point
 34836                                  ;
 34837                                  ;   OTHER REGS USED
 34838                                  ;       AX
 34839                                  ;
 34840                                  ;   NOTES
 34841                                  ;       This differs from "srch_block" in that it searches only the
 34842                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34843                                  ;       pointing to where the search left off, and that it takes a pointer
 34844                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34845                                  ;
 34846                                  ;   HISTORY
 34847                                  ;       Created 16-Mar-1992 by JeffPar
 34848                                  ;
 34849                                  ;----------------------------------------------------------------------------
 34850                                  
 34851                                  find_block:
 34852                                          call    get_char        ; get line code
 34853                                          jc	short find_exit	; end of file
 34854                                          and     al,~CONFIG_OPTION_QUERY
 34855                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34856                                          je	short check_line ; no
 34857                                          cmp     al,CONFIG_INCLUDE
 34858                                          jne	short next_line	;
 34859                                          or	byte [cs:config_multi],1
 34860                                          jmp     short next_line ;
 34861                                  check_line:
 34862                                          or      byte [cs:config_multi],1
 34863                                          call    comp_names      ; compare block names
 34864                                          jbe	short find_exit	; end of file, or names matched
 34865                                  next_line:
 34866                                          call    skip_opt_line   ; no, so skip to next line
 34867                                          jmp	short find_block  ;
 34868                                  ;find_exit:
 34869                                  ;	retn
 34870                                  
 34871                                  ;----------------------------------------------------------------------------
 34872                                  ;
 34873                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34874                                  ;
 34875                                  ;   INPUT
 34876                                  ;    DS:DI -> keyword to compare
 34877                                  ;    ES:SI -> position in config.sys
 34878                                  ;       CX == remaining bytes in config.sys
 34879                                  ;
 34880                                  ;   OUTPUT
 34881                                  ;       ZF flag set, if match (also, CF set if EOF)
 34882                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34883                                  ;       CX == # bytes remaining from that point
 34884                                  ;
 34885                                  ;   OTHER REGS USED
 34886                                  ;       AX
 34887                                  ;
 34888                                  ;   NOTES
 34889                                  ;       None
 34890                                  ;
 34891                                  ;   HISTORY
 34892                                  ;       Created 16-Mar-1992 by JeffPar
 34893                                  ;
 34894                                  ;----------------------------------------------------------------------------
 34895                                  
 34896                                  comp_names:
 34897                                          push    di              ;
 34898                                  comp_loop:                      ;
 34899                                          call    get_char        ;
 34900                                          jc	short comp_exit	;
 34901                                          call    any_delim       ; is next character a delimiter?
 34902                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34903                                          je	short comp_almost ; yes, it *could* be a match
 34904                                          inc     di              ;
 34905                                          and     ax,~2020h ; 0DFDFh 
 34906                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34907                                          cmp     al,ah           ; match?
 34908                                          je	short comp_loop ; yes, keep looking at the characters
 34909                                          clc                     ; prevent erroneous eof indication: clear carry
 34910                                  comp_exit:                      ;
 34911                                          pop     di              ;
 34912                                          retn			;
 34913                                  comp_almost:                    ;
 34914                                          xchg    al,ah           ; we don't know for sure if it's a match
 34915                                          call    any_delim       ; until we verify that the second string has
 34916                                          xchg    al,ah           ; been exhausted also...
 34917                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34918                                  
 34919                                  ;----------------------------------------------------------------------------
 34920                                  
 34921                                  comp_names_safe:
 34922                                          push    ax
 34923                                          push    cx
 34924                                          push	si
 34925                                          push    ds
 34926                                          push    cs
 34927                                          pop     ds
 34928                                          call    comp_names
 34929                                          pop     ds
 34930                                  	pop	si
 34931                                          pop     cx
 34932                                          pop     ax
 34933                                          retn
 34934                                  
 34935                                  ;----------------------------------------------------------------------------
 34936                                  ;
 34937                                  ;   print_item:  display menu item #BL
 34938                                  ;
 34939                                  ;   INPUT
 34940                                  ;       BL == menu item # to display
 34941                                  ;
 34942                                  ;   OUTPUT
 34943                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34944                                  ;
 34945                                  ;   OTHER REGS USED
 34946                                  ;       None
 34947                                  ;
 34948                                  ;   NOTES
 34949                                  ;       This function saves/restores the current cursor position, so you
 34950                                  ;       needn't worry about it.
 34951                                  ;
 34952                                  ;   HISTORY
 34953                                  ;       Created 16-Mar-1992 by JeffPar
 34954                                  ;
 34955                                  ;----------------------------------------------------------------------------
 34956                                  
 34957                                  print_item:		; prints menu item #BL (1 to N)
 34958                                          push    ax              ;
 34959                                          push    bx              ;
 34960                                          push    cx              ;
 34961                                          push    dx              ;
 34962                                          push    si              ;
 34963                                          mov     ah,03h          ; get cursor position
 34964                                          mov     bh,[bMenuPage]  ; always page zero
 34965                                          int     10h             ; DH/DL = row/column
 34966                                          push    dx              ; save it
 34967                                          mov     ah,02h          ; set cursor position
 34968                                          mov     dh,bl           ;
 34969                                          add     dh,3            ;
 34970                                          mov     dl,5            ;
 34971                                          int     10h             ; set cursor position for correct row/col
 34972                                          mov     al,bl           ;
 34973                                          add     al,'0'          ; convert menu item # to ASCII digit
 34974                                          mov     ah,[bMenuColor] ; normal attribute
 34975                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34976                                          jne	short print_other ; no
 34977                                          or      ah,70h          ; yes, set bgnd color to white
 34978                                          mov     ch,ah           ;
 34979                                          mov     cl,4            ;
 34980                                          rol     ch,cl           ;
 34981                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34982                                          jne	short print_other ; no
 34983                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34984                                  print_other:                    ;
 34985                                          mov     bh,0            ;
 34986                                          add     bx,bx           ;
 34987                                          mov     di,[aoffBlockDesc+bx]
 34988                                          mov     bl,ah           ; put the attribute in the correct register now
 34989                                          mov     bh,[bMenuPage]  ; get correct video page #
 34990                                          mov     ah,09h          ; write char/attr
 34991                                          mov     cx,1            ;
 34992                                          int     10h             ;
 34993                                          inc     dl              ; increment column
 34994                                          mov     ah,02h          ;
 34995                                          int     10h             ;
 34996                                          ;mov	ax,0900h+'.'    ;
 34997                                          mov	ax,092Eh
 34998                                  	int     10h             ; display '.'
 34999                                          inc     dl              ; increment column
 35000                                          mov     ah,02h          ;
 35001                                          int     10h             ;
 35002                                          ;mov	ax,0900h+' '    ;
 35003                                          mov	ax,0920h
 35004                                  	int     10h             ; display ' '
 35005                                          inc     dl              ; increment column
 35006                                          mov     ah,02h          ;
 35007                                          int     10h             ;
 35008                                          push    es              ;
 35009                                  print_loop:                     ;
 35010                                          mov     al,[es:di]	; get a character of the description
 35011                                          inc     di              ;
 35012                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 35013                                          jne	short print_nontab ;
 35014                                          mov     al,' '          ;
 35015                                  print_nontab:                   ;
 35016                                          cmp     al,' '          ;
 35017                                          jb	short print_done ; stop at the 1st character < space
 35018                                          cmp     al,'$'          ;
 35019                                          je	short print_done ; also stop on $
 35020                                          mov     ah,09h          ; display function #
 35021                                          int     10h             ;
 35022                                          inc     dl              ; increment column
 35023                                          cmp     dl,78           ; far enough?
 35024                                          jae	short print_done ; yes
 35025                                          mov     ah,02h          ;
 35026                                          int     10h             ;
 35027                                          jmp     print_loop      ;
 35028                                  print_done:                     ;
 35029                                          pop     es              ;
 35030                                          pop     dx              ;
 35031                                          mov     ah,02h          ;
 35032                                          int     10h             ; restore previous row/col
 35033                                          pop     si              ;
 35034                                          pop     dx              ;
 35035                                          pop     cx              ;
 35036                                          pop     bx              ;
 35037                                          pop     ax              ;
 35038                                          retn			;
 35039                                  
 35040                                  ;----------------------------------------------------------------------------
 35041                                  ;
 35042                                  ;   select_item:  wait for user to select menu item, with time-out
 35043                                  ;
 35044                                  ;   INPUT
 35045                                  ;       None
 35046                                  ;
 35047                                  ;   OUTPUT
 35048                                  ;       BX == menu item # (1-N), or -1 for clean boot
 35049                                  ;       Selected menu item highlighted
 35050                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 35051                                  ;
 35052                                  ;   OTHER REGS USED
 35053                                  ;       None
 35054                                  ;
 35055                                  ;   NOTES
 35056                                  ;       None
 35057                                  ;
 35058                                  ;   HISTORY
 35059                                  ;       Created 16-Mar-1992 by JeffPar
 35060                                  ;
 35061                                  ;----------------------------------------------------------------------------
 35062                                  
 35063                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 35064                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 35065                                          mov     al,bl           ;
 35066                                          call    disp_num        ;
 35067                                          call    show_status     ; display current interactive status
 35068                                          cmp     byte [secTimeOut],-1
 35069                                          je	short input_key	; no time-out, just go to input
 35070                                          mov     ah,GET_TIME ; 2Ch
 35071                                          int     21h             ;
 35072                                          mov     bh,dh           ; BH = initial # of seconds
 35073                                  check_time:
 35074                                          mov     al,[secTimeOut] ;
 35075                                          sub     al,[secElapsed] ;
 35076                                          jae	short show_time	;
 35077                                          or      byte [bQueryOpt],2  ; disable all further prompting
 35078                                          mov     byte [secElapsed],0
 35079                                          jmp	select_done	; time's up!
 35080                                  show_time:
 35081                                          push    bx              ;
 35082                                          mov     bl,al           ; save # in BL
 35083                                          mov     bh,[bMenuPage]  ;
 35084                                          mov     ah,03h          ; get cursor position
 35085                                          int     10h             ;
 35086                                          push    dx              ;
 35087                                  	add	dl,8		; move cursor to the right
 35088                                          mov     ah,02h          ; set cursor position
 35089                                          int     10h             ;
 35090                                          mov     dx,_$TimeOut
 35091                                          call    print           ; print the "Time remaining: " prompt
 35092                                          mov     al,bl           ; recover # from BL
 35093                                          cbw                     ; this works because AL is always <= 90
 35094                                          mov     cl,10           ;
 35095                                          div     cl              ; AL = tens digit, AH = ones digit
 35096                                          mov     cl,ah           ;
 35097                                          add     al,'0'          ;
 35098                                          mov     ah,0Eh          ;
 35099                                          int     10h             ; write TTY tens digit
 35100                                          mov     al,cl           ;
 35101                                          add     al,'0'          ;
 35102                                          mov     ah,0Eh          ;
 35103                                          int     10h             ; write TTY ones digit
 35104                                          pop     dx
 35105                                          mov     ah,02h          ; set cursor position back to where it was
 35106                                          int     10h             ;
 35107                                          pop     bx              ;
 35108                                  input_key:
 35109                                          mov     ah,RAW_CON_IO ; 6
 35110                                          mov     dl,0FFh         ; input request
 35111                                          int     21h             ;
 35112                                          jnz	short got_key	;
 35113                                          cmp     byte [secTimeOut],-1; is there a time-out?
 35114                                          je	short input_key	; no, just go back to input
 35115                                          mov     ah,GET_TIME     ;
 35116                                          int     21h             ; DH = seconds
 35117                                          mov     ah,dh           ;
 35118                                          sub     dh,bh           ; should generally be zero or one
 35119                                          mov     bh,ah           ;
 35120                                          jnc	short got_time	;
 35121                                          mov     dh,1            ; it wrapped back to zero, so assume one
 35122                                  got_time:
 35123                                          or      dh,dh           ; any change?
 35124                                          jz	short input_key	; no
 35125                                          add     [secElapsed],dh ;
 35126                                          jmp	short check_time ;
 35127                                  got_key:
 35128                                          push    ax              ;
 35129                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 35130                                          xchg    [secTimeOut],ax
 35131                                          cmp     al,-1           ; was time-out already disabled?
 35132                                          je	short timeout_disabled ; yes
 35133                                          push    bx              ; let's disable # seconds display
 35134                                          mov     ax,0A20h        ; write multiple spaces
 35135                                          mov     bx,[bMenuColor]
 35136                                          mov     cx,80           ; 80 of them, to be safe
 35137                                          int     10h             ; to completely obliterate # seconds display
 35138                                          pop     bx   		;
 35139                                  
 35140                                  timeout_disabled:
 35141                                          pop     ax              ;
 35142                                          or      al,al           ; extended key pressed?
 35143                                          jnz	short normal_key ; no
 35144                                          int     21h             ; get the next part of the key then
 35145                                          jz	short input_key	; hmmm, what happened to the second part?
 35146                                  
 35147                                          cmp     al,48h          ; up arrow?
 35148                                          jne	short not_up	; no
 35149                                          cmp     bl,1            ; are we as up as up can get?
 35150                                          jbe	short input_key	; yes, ignore it
 35151                                          dec     byte [bDefBlock] ;
 35152                                          call    print_item      ; re-print the current item
 35153                                          dec     bl              ; and then print the new current item
 35154                                          jmp     short print1
 35155                                  not_up:
 35156                                          cmp     al,50h          ; down arrow?
 35157                                          jne	short not_down	; no
 35158                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 35159                                          jae	short to_input_key ; yes, ignore it
 35160                                          inc     byte [bDefBlock] ;
 35161                                          call    print_item      ; re-print the current item
 35162                                          inc     bx              ; and then print the new current item
 35163                                  print1: 
 35164                                  	mov     al,bl           ;
 35165                                  print2: 
 35166                                  	call    print_item      ;
 35167                                          call    disp_num        ;
 35168                                  to_input_key:
 35169                                          jmp     input_key       ;
 35170                                  not_down:
 35171                                          test    byte [bDisableUI],1
 35172                                          jnz	short to_input_key ; don't allow F8 or F5
 35173                                          cmp     al,42h          ; F8 function key?
 35174                                          jne	short not_f8	; no
 35175                                          xor     byte [bQueryOpt],1
 35176                                          call    show_status     ;
 35177                                          jmp     input_key	;
 35178                                  not_f8:
 35179                                          cmp     al,3Fh          ; F5 function key?
 35180                                          jne	short to_input_key ; no
 35181                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 35182                                          mov     al,' '          ; don't want to display anything really;
 35183                                          jmp     short disp_input; just want to display the cr/lf sequence...
 35184                                  
 35185                                  normal_key:
 35186                                          cmp     al,0Dh          ; Enter?
 35187                                          je	short select_done ; yes
 35188                                          cmp     al,08h          ; backspace?
 35189                                          jne	short not_backspace ; no
 35190                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 35191                                          retn			;
 35192                                  not_backspace:
 35193                                          sub     al,'0'          ; is greater than '0'?
 35194                                          jbe	short to_input_key ; no
 35195                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 35196                                          ja	short to_input_key ; no
 35197                                          mov	[bDefBlock],al  ;
 35198                                          call    print_item      ; redisplay the current selection
 35199                                          mov     bl,al           ; set new selection
 35200                                          jmp	short print2
 35201                                  
 35202                                  select_done:
 35203                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 35204                                          mov     al,bl           ;
 35205                                          add     al,'0'          ; convert it into a digit, then display it
 35206                                  
 35207                                  	; fall into disp_input
 35208                                  
 35209                                  ; 16/04/2019 - Retro DOS v4.0
 35210                                  
 35211                                  ;----------------------------------------------------------------------------
 35212                                  ;
 35213                                  ;   disp_input:  display a single character + cr/lf
 35214                                  ;
 35215                                  ;   INPUT
 35216                                  ;       AL == character to display
 35217                                  ;
 35218                                  ;   OUTPUT
 35219                                  ;       None
 35220                                  ;
 35221                                  ;   OTHER REGS USED
 35222                                  ;       None
 35223                                  ;
 35224                                  ;   NOTES
 35225                                  ;       This function is used not only for the menu input selection but
 35226                                  ;       also for the interactive line prompting (the y/n/a thing).
 35227                                  ;
 35228                                  ;   HISTORY
 35229                                  ;       Created 16-Mar-1992 by JeffPar
 35230                                  ;
 35231                                  ;----------------------------------------------------------------------------
 35232                                  
 35233                                  disp_input:
 35234                                          push    ax
 35235                                          cmp     al,' '
 35236                                          jae	short disp_ok
 35237                                          mov     al,' '
 35238                                  disp_ok:
 35239                                          mov     dl,al
 35240                                          mov     ah,STD_CON_OUTPUT ; 2
 35241                                          int     21h
 35242                                          mov     dx,crlfm
 35243                                          call    print
 35244                                          pop     ax
 35245                                          retn
 35246                                  
 35247                                  ;----------------------------------------------------------------------------
 35248                                  
 35249                                  disp_num:
 35250                                          push    bx
 35251                                          add     al,'0'
 35252                                          mov     ah,0Ah
 35253                                          mov     bx,[bMenuColor]
 35254                                          mov     cx,1
 35255                                          int     10h
 35256                                          pop     bx
 35257                                          retn
 35258                                  
 35259                                  ;----------------------------------------------------------------------------
 35260                                  ;
 35261                                  ;   show_status:  display current interactive mode setting (on/off/none)
 35262                                  ;
 35263                                  ;   INPUT
 35264                                  ;       None
 35265                                  ;
 35266                                  ;   OUTPUT
 35267                                  ;       None
 35268                                  ;
 35269                                  ;   OTHER REGS USED
 35270                                  ;       None
 35271                                  ;
 35272                                  ;   NOTES
 35273                                  ;       None
 35274                                  ;
 35275                                  ;   HISTORY
 35276                                  ;       Created 16-Mar-1992 by JeffPar
 35277                                  ;
 35278                                  ;----------------------------------------------------------------------------
 35279                                  
 35280                                  show_status:
 35281                                          push    bx              ; BL = video page #
 35282                                          mov     bx,[bMenuColor]
 35283                                          mov     ah,03h          ; get cursor position
 35284                                          int     10h             ;
 35285                                          push    dx              ; save it
 35286                                          mov     ah,02h          ; set cursor position
 35287                                          mov     dx,[bLastCol]   ; set correct row/col
 35288                                          test    byte [bDisableUI],1
 35289                                          jz	short show_onoff ; just show on/off
 35290                                          mov     dl,0            ;
 35291                                          int     10h             ;
 35292                                          mov     ax,0A20h        ; write multiple spaces
 35293                                          mov     cx,80           ; 80 of them, to be exact
 35294                                          int     10h             ; to obliterate the status line
 35295                                          jmp     short show_done ;
 35296                                  show_onoff: 
 35297                                          int     10h
 35298                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 35299                                  		; AL = character, BH = display page - alpha mode
 35300                                  		; BL = color of character (graphics mode, PCjr only)
 35301                                  		; CX = number of times to write character
 35302                                  
 35303                                          mov     al,[_$NO]	; assume OFF
 35304                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 35305                                          jne	short show_noton ; no
 35306                                          mov     al,[_$YES]	; yes
 35307                                  show_noton:                     ;
 35308                                          mov     ah,0Eh          ; write TTY
 35309                                          int     10h             ;
 35310                                  show_done:                      ;
 35311                                          pop     dx              ;
 35312                                          mov     ah,02h          ;
 35313                                          int     10h             ; restore original cursor position
 35314                                          pop     bx              ;
 35315                                          retn			;
 35316                                  
 35317                                  ; 16/04/2019 - Retro DOS v4.0
 35318                                  
 35319                                  ;----------------------------------------------------------------------------
 35320                                  ;
 35321                                  ;   skip_token: advances ES:SI/CX past the current token
 35322                                  ;
 35323                                  ;   INPUT
 35324                                  ;    ES:SI -> position in config.sys
 35325                                  ;       CX == remaining bytes in config.sys
 35326                                  ;
 35327                                  ;   OUTPUT
 35328                                  ;       CF set if EOL/EOF hit
 35329                                  ;       AL == 1st char of delimiter
 35330                                  ;    ES:SI -> just past the delimiter
 35331                                  ;       CX == # bytes remaining from that point
 35332                                  ;
 35333                                  ;   OTHER REGS USED
 35334                                  ;       AX
 35335                                  ;
 35336                                  ;   NOTES
 35337                                  ;       None
 35338                                  ;
 35339                                  ;   HISTORY
 35340                                  ;       Created 16-Mar-1992 by JeffPar
 35341                                  ;
 35342                                  ;----------------------------------------------------------------------------
 35343                                  
 35344                                  skip_token:
 35345                                          call    get_char
 35346                                          jc	short skip_token_done
 35347                                          call    any_delim
 35348                                          jne	short skip_token
 35349                                  skip_check_eol:
 35350                                          cmp     al,cr ; 0Dh
 35351                                          je	short skip_token_eol
 35352                                          cmp     al,lf ; 0Ah
 35353                                          je	short skip_token_eol
 35354                                          clc
 35355                                          ;jmp	short skip_token_done
 35356                                  	retn
 35357                                  skip_token_eol:
 35358                                          stc
 35359                                  skip_token_done:
 35360                                          retn
 35361                                  
 35362                                  ;----------------------------------------------------------------------------
 35363                                  ;
 35364                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 35365                                  ;
 35366                                  ;   INPUT
 35367                                  ;    ES:SI -> position in config.sys
 35368                                  ;       CX == remaining bytes in config.sys
 35369                                  ;
 35370                                  ;   OUTPUT
 35371                                  ;       CF set if EOF hit
 35372                                  ;       AL == 1st char of token
 35373                                  ;    ES:SI -> just past the token
 35374                                  ;       CX == # bytes remaining from that point
 35375                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 35376                                  ;
 35377                                  ;   OTHER REGS USED
 35378                                  ;       AX
 35379                                  ;
 35380                                  ;   NOTES
 35381                                  ;       None
 35382                                  ;
 35383                                  ;   HISTORY
 35384                                  ;       Created 16-Mar-1992 by JeffPar
 35385                                  ;
 35386                                  ;----------------------------------------------------------------------------
 35387                                  
 35388                                  skip_delim:       ; returns carry set if eol/eof
 35389                                          call    get_char        ;
 35390                                          lea     bx,[si-1]       ; also returns BX -> next token
 35391                                          jc	short skip_token_done ;
 35392                                          call    delim           ;
 35393                                          je	short skip_delim ;
 35394                                          jmp	short skip_check_eol  ; 13/05/2019
 35395                                  
 35396                                  ;----------------------------------------------------------------------------
 35397                                  ;
 35398                                  ;   skip_opt_line: same as skip_line provided AL != LF
 35399                                  ;
 35400                                  ;   INPUT
 35401                                  ;       AL == last character read
 35402                                  ;    ES:SI -> position in config.sys
 35403                                  ;       CX == remaining bytes in config.sys
 35404                                  ;
 35405                                  ;   OUTPUT
 35406                                  ;       CF set if EOF hit
 35407                                  ;       AL == 1st char of new line
 35408                                  ;    ES:SI -> just past 1st char of new line
 35409                                  ;       CX == # bytes remaining from that point
 35410                                  ;
 35411                                  ;   OTHER REGS USED
 35412                                  ;       AX
 35413                                  ;
 35414                                  ;   NOTES
 35415                                  ;       In other words, the purpose here is to skip to the next line,
 35416                                  ;       unless ES:SI is already sitting at the front of the next line (which
 35417                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 35418                                  ;
 35419                                  ;   HISTORY
 35420                                  ;       Created 16-Mar-1992 by JeffPar
 35421                                  ;
 35422                                  ;----------------------------------------------------------------------------
 35423                                  
 35424                                  skip_opt_line:
 35425                                          cmp     al,lf ; 0Ah
 35426                                          je	short skip_line_done
 35427                                       
 35428                                  	; fall into skip_line
 35429                                  
 35430                                  ;----------------------------------------------------------------------------
 35431                                  ;
 35432                                  ;   skip_line: skip to the next line
 35433                                  ;
 35434                                  ;   INPUT
 35435                                  ;    ES:SI -> position in config.sys
 35436                                  ;       CX == remaining bytes in config.sys
 35437                                  ;
 35438                                  ;   OUTPUT
 35439                                  ;       CF set if EOF hit
 35440                                  ;    ES:SI -> just past 1st char of new line
 35441                                  ;       CX == # bytes remaining from that point
 35442                                  ;
 35443                                  ;   OTHER REGS USED
 35444                                  ;       AX
 35445                                  ;
 35446                                  ;   NOTES
 35447                                  ;       None
 35448                                  ;
 35449                                  ;   HISTORY
 35450                                  ;       Created 16-Mar-1992 by JeffPar
 35451                                  ;
 35452                                  ;----------------------------------------------------------------------------
 35453                                  
 35454                                  skip_line:
 35455                                          call    get_char
 35456                                          jc	short skip_line_done
 35457                                          cmp     al,lf ; 0Ah
 35458                                          jne	short skip_line
 35459                                  skip_line_done:
 35460                                  num_done:	; 18/12/2022
 35461                                          retn
 35462                                  
 35463                                  ;----------------------------------------------------------------------------
 35464                                  ;
 35465                                  ;   get_number: return binary equivalent of numeric string
 35466                                  ;
 35467                                  ;   INPUT
 35468                                  ;    ES:SI -> position in config.sys
 35469                                  ;       CX == remaining bytes in config.sys
 35470                                  ;
 35471                                  ;   OUTPUT
 35472                                  ;       AL == non-digit encountered
 35473                                  ;       BX == binary #
 35474                                  ;    ES:SI -> just past 1st non-digit
 35475                                  ;       CX == # bytes remaining from that point
 35476                                  ;
 35477                                  ;   OTHER REGS USED
 35478                                  ;       AX
 35479                                  ;
 35480                                  ;   NOTES
 35481                                  ;       None
 35482                                  ;
 35483                                  ;   HISTORY
 35484                                  ;       Created 16-Mar-1992 by JeffPar
 35485                                  ;
 35486                                  ;----------------------------------------------------------------------------
 35487                                  
 35488                                  ; 13/05/2019
 35489                                  
 35490                                  get_number:
 35491                                          sub     bx,bx           ; BX = result
 35492                                  num_loop:
 35493                                          call    get_char        ;
 35494                                          jc	short num_done	;
 35495                                          cmp     al,'0'          ; convert to value
 35496                                          jb	short num_done	; no more number
 35497                                          cmp     al,'9'          ;
 35498                                          ja	short num_done	;
 35499                                          push    ax              ;
 35500                                          mov     ax,10           ;
 35501                                          push    dx              ;
 35502                                          mul     bx              ;
 35503                                          pop     dx              ;
 35504                                          mov     bx,ax           ;
 35505                                          pop     ax              ;
 35506                                          sub     al,'0'          ;
 35507                                          cbw                     ;
 35508                                          add     bx,ax           ;
 35509                                          jmp	short num_loop	;
 35510                                  
 35511                                  	; 18/12/2022
 35512                                  ;num_done:
 35513                                          ;retn
 35514                                  
 35515                                  ;----------------------------------------------------------------------------
 35516                                  ;
 35517                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 35518                                  ;
 35519                                  ;   INPUT
 35520                                  ;    ES:SI -> position in config.sys
 35521                                  ;       CX == remaining bytes in config.sys
 35522                                  ;
 35523                                  ;   OUTPUT
 35524                                  ;       AL == next character
 35525                                  ;    ES:SI -> just past next character
 35526                                  ;       CX == # bytes remaining from that point
 35527                                  ;
 35528                                  ;   OTHER REGS USED
 35529                                  ;       AX
 35530                                  ;
 35531                                  ;   NOTES
 35532                                  ;       None
 35533                                  ;
 35534                                  ;   HISTORY
 35535                                  ;       Created 16-Mar-1992 by JeffPar
 35536                                  ;
 35537                                  ;----------------------------------------------------------------------------
 35538                                  
 35539                                  get_char:
 35540                                          sub     cx,1            ; use SUB to set carry,zero
 35541                                          jb	short get_fail	; out of data
 35542                                          ;lods	byte ptr es:[si] ;
 35543                                  	es	
 35544                                  	lodsb
 35545                                          mov     ah,al           ;
 35546                                          retn			;
 35547                                  get_fail:                       ; restore CX to zero
 35548                                          mov     cx,0            ; leave carry set, zero not set
 35549                                  nearby_ret:
 35550                                          retn
 35551                                  
 35552                                  ;----------------------------------------------------------------------------
 35553                                  ;
 35554                                  ;   query_user: ask user whether to execute current config.sys command
 35555                                  ;
 35556                                  ;   INPUT
 35557                                  ;       AL == current command code
 35558                                  ;    ES:SI -> current command line in config.sys
 35559                                  ;    config_cmd == current command code, but with QUERY bit intact
 35560                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 35561                                  ;
 35562                                  ;   OUTPUT
 35563                                  ;       CF set if command should be ignored (it is also REM'ed out)
 35564                                  ;
 35565                                  ;   OTHER REGS USED
 35566                                  ;       BX, CX, DX, DI
 35567                                  ;
 35568                                  ;   NOTES
 35569                                  ;       None
 35570                                  ;
 35571                                  ;   HISTORY
 35572                                  ;       Created 16-Mar-1992 by JeffPar
 35573                                  ;
 35574                                  ;----------------------------------------------------------------------------
 35575                                  
 35576                                  	; 12/12/2022
 35577                                  query_user:
 35578                                          test    byte [bQueryOpt],4	; answer no to everything?
 35579                                          ;jz	short qu_1		;
 35580                                          ; 12/12/2022
 35581                                  	;jmp	short skip_all		;
 35582                                  	jnz	short skip_all
 35583                                  qu_1:
 35584                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 35585                                          jnz	short nearby_ret	; yes (and return carry clear!)
 35586                                          push    ax                      ;
 35587                                          mov     al,[config_cmd]         ;
 35588                                          test    byte [bQueryOpt],1	; query every command?
 35589                                          jnz	short query_all		; yes
 35590                                          test    al,CONFIG_OPTION_QUERY  ;
 35591                                          ;jnz	short query_all		;
 35592                                          ; 12/12/2022
 35593                                  	;jmp	short do_cmd		;
 35594                                  	jz	short do_cmd ; cf=0
 35595                                  query_all:
 35596                                  
 35597                                  ;   Search for the command code (AL) in "comtab", and then print
 35598                                  ;   out the corresponding keyword, followed by the rest of the actual
 35599                                  ;   line pointed to by ES:SI
 35600                                  
 35601                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 35602                                          mov     dx,_$AutoPrmpt    	;
 35603                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35604                                          jz	short generic_prompt	; config_cmd must have been 0
 35605                                  
 35606                                          mov     dh,al                   ; save config_cmd in DH
 35607                                          sub     bx,bx                   ;
 35608                                          mov     di,comtab		;
 35609                                  find_match:                             ;
 35610                                          mov     bl,[di]                 ; get size of current keyword
 35611                                          or      bl,bl                   ;
 35612                                          jz	short line_print	; end of table
 35613                                          inc     di                      ;
 35614                                          cmp     al,[di+bx]              ; match?
 35615                                          je	short cmd_match		; yes
 35616                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 35617                                  	; 13/05/2019	
 35618                                          jmp	short find_match	; loop
 35619                                  cmd_match:                              ;
 35620                                          mov     cl,[di-1]               ;
 35621                                          mov     ch,0                    ;
 35622                                          mov     ah,STD_CON_OUTPUT ; 2
 35623                                  cmd_print:                              ;
 35624                                          mov     al,[di]                 ;
 35625                                          inc     di                      ;
 35626                                          mov     dl,al                   ;
 35627                                          int     21h                     ;
 35628                                          loop    cmd_print               ;
 35629                                          mov     dl,'='                  ;
 35630                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 35631                                          jne	short cmd_notset	;
 35632                                          mov     dl,' '                  ;
 35633                                  cmd_notset:
 35634                                          int     21h                     ; '=' looks funny on SET commands
 35635                                  line_print:                             ;
 35636                                  	;lods	byte ptr es:[si]        ;
 35637                                          es
 35638                                  	lodsb
 35639                                  	or      al,al                   ;
 35640                                          jnz	short non_null		;
 35641                                          mov     al,' '                  ;
 35642                                  non_null:                               ;
 35643                                          cmp     al,' '                  ; control code?
 35644                                          jb	short prompt_user	; yes, assume end of line
 35645                                          jne	short non_space		;
 35646                                          cmp     byte [es:si],' '	;
 35647                                          jb	short prompt_user	;
 35648                                  non_space:                              ;
 35649                                          mov     dl,al                   ;
 35650                                          mov     ah,STD_CON_OUTPUT ; 2	;
 35651                                          int     21h                     ;
 35652                                          jmp	short line_print	;
 35653                                  prompt_user:                            ;
 35654                                          mov     dx,_$InterPrmpt		;
 35655                                  
 35656                                  generic_prompt:
 35657                                          call    print                   ;
 35658                                  input_loop:                             ;
 35659                                          mov     ah,0                    ; read a key
 35660                                          int     16h                     ;
 35661                                          or      al,al                   ; is it a function key?
 35662                                          jnz	short not_func		; no
 35663                                          cmp     ah,3Fh                  ; F5 function key?
 35664                                          jne	short input_loop	; no
 35665                                          mov     al,[_$NO]                  ;
 35666                                          or      byte [bQueryOpt],4	; no more queries
 35667                                          jmp     short legal_char        ;
 35668                                  not_func:
 35669                                          and     al,~20h ; 0DFh		; converting to upper case
 35670                                          cmp     al,[_$NO]		; verify character is legal
 35671                                          je	short legal_char	;
 35672                                          cmp     al,[_$YES]		;
 35673                                          je	short legal_char	;
 35674                                          cmp     byte [config_cmd],0	;
 35675                                          je	short input_loop	; don't allow Esc on this query
 35676                                          cmp     al,1Bh                  ; Esc?
 35677                                          jne	short input_loop	;
 35678                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 35679                                          mov     al,[_$YES]
 35680                                  legal_char:                             ;
 35681                                          call    disp_input              ;
 35682                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 35683                                  
 35684                                          cmp     al,[_$NO]		; process line?
 35685                                          je	short skip_cmd		; no
 35686                                  	; 12/12/2022
 35687                                  	clc
 35688                                  do_cmd:
 35689                                  	pop     ax			;
 35690                                  	; 12/12/2022
 35691                                  	; cf=0
 35692                                  	;clc				; just do the command
 35693                                  	retn
 35694                                  
 35695                                  skip_cmd:
 35696                                  	pop     ax			;
 35697                                  skip_all:
 35698                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 35699                                  	stc
 35700                                  	retn
 35701                                  
 35702                                  ;----------------------------------------------------------------------------
 35703                                  ;
 35704                                  ;   print_error: displays multi-config error conditions
 35705                                  ;
 35706                                  ;   INPUT
 35707                                  ;    Carry set to pause, clear to not
 35708                                  ;    ES:SI -> current command line in config.sys
 35709                                  ;
 35710                                  ;   OUTPUT
 35711                                  ;       None
 35712                                  ;
 35713                                  ;   OTHER REGS USED
 35714                                  ;       None
 35715                                  ;
 35716                                  ;   NOTES
 35717                                  ;       None
 35718                                  ;
 35719                                  ;   HISTORY
 35720                                  ;       Created 16-Mar-1992 by JeffPar
 35721                                  ;
 35722                                  ;----------------------------------------------------------------------------
 35723                                  
 35724                                  print_error:
 35725                                          push    ax
 35726                                          push    bx
 35727                                          push    cx
 35728                                          push    dx
 35729                                          push    ds
 35730                                          push    cs
 35731                                          pop     ds
 35732                                          pushf
 35733                                          call    get_linenum
 35734                                          mov     [linecount],bx
 35735                                          call    error_line
 35736                                          popf
 35737                                          jnc	short pe_ret
 35738                                          mov     dx,_$PauseMsg
 35739                                          call    print
 35740                                          mov     ax,0C07h		; flush input buffer, then wait for key
 35741                                          int     21h			; wait for a key
 35742                                          or      al,al			; extended key?
 35743                                          jnz	short pe_1		; no
 35744                                          mov     ah,07h			; yes
 35745                                          int     21h			; eat it too
 35746                                  pe_1:     
 35747                                  	mov     dx,crlfm
 35748                                          call    print
 35749                                  pe_ret: 
 35750                                  	pop     ds
 35751                                          pop     dx
 35752                                          pop     cx
 35753                                          pop     bx
 35754                                          pop     ax
 35755                                  	retn
 35756                                  
 35757                                  ;----------------------------------------------------------------------------
 35758                                  
 35759                                  ;   This function is very simple:  it merely prepends a "/D" to the
 35760                                  ;   command-line for the shell;  this (undocumented) switch disables
 35761                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35762                                  ;   displayed when there's no AUTOEXEC.BAT.
 35763                                  
 35764                                  disable_autoexec:
 35765                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35766                                  	; 17/04/2019 - Retro DOS v4.0
 35767                                  
 35768                                  	test	byte [bQueryOpt],4
 35769                                  	jz	short disable_exit
 35770                                  	test	byte [dae_flag],1
 35771                                  	jnz	short disable_exit
 35772                                  	or	byte [dae_flag],1
 35773                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35774                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35775                                  	mov     dx,'D ' ; 2044h
 35776                                  dae_1:
 35777                                          ;mov	al,[def_swchr]
 35778                                  	mov     al,[command_line-1]     ; get default switchchar
 35779                                          or      al,al                   ; anything there?
 35780                                          jz	short disable_exit	; no, disable_autoexec already called
 35781                                          mov     bl,[command_line]       ;
 35782                                          mov     bh,0                    ; BX == command-line length
 35783                                          mov     cx,bx                   ;
 35784                                          add     bl,3                    ;
 35785                                          cmp     bl,126                  ;
 35786                                          ja	short disable_exit	;
 35787                                          mov     [command_line],bl       ; update length
 35788                                          add     bx,command_line+1	; make sure we move the NULL too
 35789                                          inc     cx                      ; (just for consistency sake)
 35790                                  disable_loop:                           ;
 35791                                          mov     ah,[bx-3]               ;
 35792                                          mov     [bx],ah                 ;
 35793                                          dec     bx                      ;
 35794                                          loop    disable_loop            ;
 35795                                          mov     [bx-2],al               ;
 35796                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35797                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35798                                          ;mov	byte [command_line-1],0 ;
 35799                                  disable_exit:                           ;
 35800                                          retn
 35801                                  
 35802                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35803                                  	cmp     byte [bQueryOpt],1
 35804                                  	jnz     short disable_exit
 35805                                  	test	byte [dae_flag],2
 35806                                  	jnz     short disable_exit
 35807                                  	or      byte [dae_flag],2
 35808                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 35809                                  	jmp     short dae_1
 35810                                  
 35811                                  ;endif  ;MULTI_CONFIG
 35812                                  
 35813                                  %endif	; 02/11/2022
 35814                                  
 35815                                  
 35816                                  ; 19/04/2019 - Retro DOS v4.0
 35817                                  
 35818                                  ;----------------------------------------------------------------------------
 35819                                  ;
 35820                                  ; procedure : delim
 35821                                  ;
 35822                                  ;----------------------------------------------------------------------------
 35823                                  
 35824                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35825                                  ;
 35826                                  ;;ifdef	MULTI_CONFIG
 35827                                  ;
 35828                                  ;any_delim:
 35829                                  ;       cmp     al,cr
 35830                                  ;       je	short delim_ret
 35831                                  ;       cmp     al,lf
 35832                                  ;       je	short delim_ret
 35833                                  ;       cmp     al,'['
 35834                                  ;       je	short delim_ret
 35835                                  ;       cmp     al,']'
 35836                                  ;       je	short delim_ret
 35837                                  ;
 35838                                  ;;endif  ;MULTI_CONFIG
 35839                                  
 35840                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35841                                  	; (SYSINIT:3450h)	
 35842                                  delim:
 35843 00002FCA 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35844 00002FCC 7417                    	je	short delim_ret
 35845                                  
 35846 00002FCE 3C00                    	cmp	al,0		; special case for sysinit!!!
 35847 00002FD0 7413                    	je	short delim_ret
 35848                                  
 35849                                  org_delim:			; used by organize routine except for getting
 35850 00002FD2 3C20                    	cmp	al,' '          ; the filename.
 35851 00002FD4 740F                    	je	short delim_ret
 35852 00002FD6 3C09                            cmp     al,tab ; 9
 35853 00002FD8 740B                    	je	short delim_ret
 35854 00002FDA 3C3D                    	cmp	al,'='
 35855 00002FDC 7407                    	je	short delim_ret
 35856 00002FDE 3C2C                    	cmp	al,','
 35857 00002FE0 7403                    	je	short delim_ret
 35858 00002FE2 3C3B                    	cmp	al,';'
 35859                                  
 35860                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35861                                  ;ifdef	MULTI_CONFIG
 35862                                  ;   Make sure there's no chance of a false EOF indication
 35863 00002FE4 F8                      	clc	; 09/09/2023 ('SkipDelim' must not be return with cf=1)
 35864                                  ;endif
 35865                                  	; 02/11/2022
 35866                                  delim_ret:
 35867                                  nl_ret:	; 10/09/2023
 35868 00002FE5 C3                      	retn
 35869                                  
 35870                                  ;----------------------------------------------------------------------------
 35871                                  ;
 35872                                  ; procedure : newline
 35873                                  ;
 35874                                  ;  newline returns with first character of next line
 35875                                  ;
 35876                                  ;----------------------------------------------------------------------------
 35877                                  
 35878                                  newline:
 35879 00002FE6 E80600                  	call	getchr			;skip non-control characters
 35880 00002FE9 72FA                    	jc	short nl_ret
 35881 00002FEB 3C0A                    	cmp	al,lf			;look for line feed
 35882 00002FED 75F7                    	jne	short newline
 35883                                  
 35884                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 35885                                  	;call	getchr
 35886                                  ;nl_ret:
 35887                                  	;retn
 35888                                  	; 10/09/2023
 35889                                  	;jmp	short getchr
 35890                                  
 35891                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 35892                                  %if 1
 35893                                  
 35894                                  ;----------------------------------------------------------------------------
 35895                                  ;
 35896                                  ; procedure : getchr
 35897                                  ;
 35898                                  ;----------------------------------------------------------------------------
 35899                                  
 35900                                  	; 24/10/2022
 35901                                  getchr:
 35902                                  	; 12/12/2022
 35903                                  	;push	cx
 35904                                  	;mov	cx,[count]
 35905                                  	;jcxz	nochar
 35906                                  	; 12/12/2022
 35907 00002FEF 833E[D203]01            	cmp	word [count],1 
 35908 00002FF4 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 35909                                  	
 35910 00002FF6 8B36[D603]              	mov	si,[chrptr]
 35911 00002FFA 268A04                  	mov	al,[es:si]
 35912 00002FFD FF0E[D203]              	dec	word [count]
 35913 00003001 FF06[D603]              	inc	word [chrptr]
 35914                                  	; 12/12/202
 35915                                  	; cf=0
 35916                                  	;clc
 35917                                  ;get_ret:
 35918                                  	;pop	cx
 35919                                  	;retn
 35920                                  nochar: 
 35921                                  	; 12/12/2022
 35922                                  	; cf=1
 35923                                  	;stc
 35924                                  	;jmp	short get_ret
 35925                                  	
 35926 00003005 C3                      	retn
 35927                                  %endif
 35928                                  
 35929                                  ;----------------------------------------------------------------------------
 35930                                  ; 
 35931                                  ; procedure : mapcase
 35932                                  ;
 35933                                  ;----------------------------------------------------------------------------
 35934                                  
 35935                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35936                                  mapcase:
 35937 00003006 51                      	push	cx
 35938 00003007 56                      	push	si
 35939 00003008 1E                      	push	ds
 35940                                  
 35941 00003009 06                      	push	es
 35942 0000300A 1F                      	pop	ds
 35943                                  
 35944                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35945                                  ;;ifdef	MULTI_CONFIG
 35946                                  ;
 35947                                  ;	mov	bl,al                   ; same cmd code this line
 35948                                  ;;else
 35949                                  ;;	xor	si,si
 35950                                  ;;endif
 35951                                  	; 02/11/2022
 35952 0000300B 31F6                    	xor	si, si
 35953                                  
 35954                                  convloop:
 35955 0000300D AC                      	lodsb
 35956 0000300E 3C61                    	cmp	al,'a'
 35957 00003010 7209                    	jb	short noconv
 35958 00003012 3C7A                    	cmp	al,'z'
 35959 00003014 7705                    	ja	short noconv
 35960 00003016 2C20                    	sub	al,20h
 35961 00003018 8844FF                  	mov	[si-1],al
 35962                                  noconv:
 35963                                  
 35964                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35965                                  ;;ifdef	MULTI_CONFIG
 35966                                  ;;
 35967                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35968                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35969                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35970                                  ;;   anything after the "=" in a SET)
 35971                                  ;;
 35972                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35973                                  ;       jne	short check_eol		; no, just check for end-of-line
 35974                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35975                                  ;       je	short convdone		; yes
 35976                                  ;check_eol:
 35977                                  ;       cmp     al,cr
 35978                                  ;       je	short convdone
 35979                                  ;       cmp     al,lf
 35980                                  ;       je	short convdone
 35981                                  ;;endif
 35982                                  	
 35983                                  	; 02/11/2022
 35984 0000301B E2F0                    	loop	convloop
 35985                                  convdone:
 35986 0000301D 1F                      	pop	ds
 35987 0000301E 5E                      	pop	si
 35988 0000301F 59                      	pop	cx
 35989 00003020 C3                      	retn
 35990                                  
 35991                                  ;----------------------------------------------------------------------------
 35992                                  ;
 35993                                  ; procedure : round
 35994                                  ;
 35995                                  ; round the values in memlo and memhi to paragraph boundary.
 35996                                  ; perform bounds check.
 35997                                  ;
 35998                                  ;----------------------------------------------------------------------------
 35999                                  
 36000                                  round:
 36001                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36002 00003021 1E                      	push	ds
 36003 00003022 0E                      	push	cs
 36004 00003023 1F                      	pop	ds
 36005                                  
 36006 00003024 50                      	push	ax
 36007                                  	;mov	ax,[cs:memlo]
 36008 00003025 A1[DE03]                	mov	ax,[memlo]
 36009                                  
 36010 00003028 E881E0                  	call	ParaRound		; para round up
 36011                                  
 36012                                  	;add	[cs:memhi],ax
 36013 0000302B 0106[E003]              	add	[memhi],ax
 36014                                  	;mov	word [cs:memlo],0
 36015 0000302F C706[DE03]0000          	mov	word [memlo],0
 36016                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 36017 00003035 A1[E003]                	mov	ax,[memhi]
 36018                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 36019 00003038 3B06[A302]              	cmp	ax,[ALLOCLIM]
 36020 0000303C 7320                    	jae	short mem_err
 36021                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 36022 0000303E F606[1814]02            	test	byte [setdevmarkflag],for_devmark ; 2
 36023 00003043 7416                    	jz	short skip_set_devmarksize
 36024 00003045 06                      	push	es
 36025 00003046 56                      	push	si
 36026                                  	;mov	si,[cs:devmark_addr]
 36027 00003047 8B36[1614]              	mov	si,[devmark_addr]
 36028 0000304B 8EC6                    	mov	es,si
 36029 0000304D 29F0                    	sub	ax,si
 36030 0000304F 48                      	dec	ax
 36031                                  	;mov	[es:3],ax
 36032 00003050 26A30300                	mov	[es:devmark.size],ax	; paragraph
 36033                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 36034 00003054 8026[1814]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 36035 00003059 5E                      	pop	si
 36036 0000305A 07                      	pop	es
 36037                                  skip_set_devmarksize:
 36038 0000305B 58                      	pop	ax
 36039                                  
 36040                                  	; 10/09/2023
 36041 0000305C 1F                      	pop	ds
 36042                                  
 36043                                  	; 11/12/2022
 36044                                  	; cf = 0
 36045                                  	; 02/11/2022
 36046                                  	;clc	; ? (not needed here)	; clear carry
 36047 0000305D C3                      	retn
 36048                                  
 36049                                  ;----------------------------------------------------------------------------
 36050                                  
 36051                                  mem_err:
 36052                                  	; 11/12/2022
 36053 0000305E 0E                      	push	cs
 36054 0000305F 1F                      	pop	ds
 36055                                  mem_err2:
 36056 00003060 BA[4137]                	mov	dx,badmem
 36057                                  	;push	cs
 36058                                  	;pop	ds
 36059 00003063 E83102                  	call	print
 36060 00003066 E9E8D7                  	jmp	stall
 36061                                  
 36062                                  ;----------------------------------------------------------------------------
 36063                                  ;
 36064                                  ; procedure : calldev
 36065                                  ;
 36066                                  ;----------------------------------------------------------------------------
 36067                                  
 36068                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36069                                  	; (SYSINIT:34E0h)
 36070                                  calldev:
 36071 00003069 2E8E1E[701E]            	mov	ds,[cs:DevEntry+2]
 36072 0000306E 2E031E[6E1E]            	add	bx,[cs:DevEntry]	; do a little relocation
 36073 00003073 8B07                    	mov	ax,[bx]
 36074                                  
 36075 00003075 2EFF36[6E1E]            	push	word [cs:DevEntry]
 36076 0000307A 2EA3[6E1E]              	mov	[cs:DevEntry],ax
 36077 0000307E BB[E603]                	mov	bx,packet
 36078 00003081 2EFF1E[6E1E]            	call	far [cs:DevEntry]
 36079 00003086 2E8F06[6E1E]            	pop	word [cs:DevEntry]
 36080 0000308B C3                      	retn
 36081                                  
 36082                                  ;----------------------------------------------------------------------------
 36083                                  ;
 36084                                  ; procedure : todigit
 36085                                  ;
 36086                                  ;----------------------------------------------------------------------------
 36087                                  
 36088                                  todigit:
 36089 0000308C 2C30                    	sub	al,'0'
 36090                                  	;jb	short notdig  ; 02/11/2022
 36091                                  	; 12/12/2022
 36092 0000308E 7203                    	jb	short notdig2
 36093                                  	;cmp	al,9
 36094                                  	;ja	short notdig
 36095                                  	;clc
 36096                                  	;retn
 36097                                  	; 12/12/2022
 36098 00003090 3C0A                    	cmp	al,10
 36099 00003092 F5                      	cmc
 36100                                  notdig:
 36101                                  	;stc
 36102                                  notdig2:
 36103 00003093 C3                      	retn
 36104                                  
 36105                                  ;----------------------------------------------------------------------------
 36106                                  ;
 36107                                  ; procedure : getnum
 36108                                  ;
 36109                                  ; getnum parses a decimal number.
 36110                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 36111                                  ; error), if number is bad carry is set, zero is set, ax=0.
 36112                                  ;
 36113                                  ;----------------------------------------------------------------------------
 36114                                  
 36115                                  getnum:
 36116 00003094 53                      	push	bx
 36117 00003095 31DB                    	xor	bx,bx			; running count is zero
 36118                                  b2:
 36119 00003097 E8F2FF                  	call	todigit 		; do we have a digit ?
 36120 0000309A 7247                    	jc	short badnum		; no, bomb
 36121                                  
 36122 0000309C 93                      	xchg	ax,bx			; put total in ax
 36123 0000309D 53                      	push	bx			; save digit (0 to 9)
 36124                                  	;mov	bx,10			; base of arithmetic
 36125                                  	; 12/12/2022
 36126 0000309E B30A                    	mov	bl,10
 36127 000030A0 F7E3                    	mul	bx			; shift by one decimal digit
 36128 000030A2 5B                      	pop	bx			; get back digit (0 to 9)
 36129 000030A3 00D8                    	add	al,bl			; get total
 36130 000030A5 80D400                  	adc	ah,0			; make that 16 bits
 36131 000030A8 7239                    	jc	short badnum		; too big a number
 36132                                  
 36133 000030AA 93                      	xchg	ax,bx			; stash total
 36134                                  
 36135 000030AB E841FF                  	call	getchr			;get next digit
 36136 000030AE 722D                    	jc	short b1		; no more characters
 36137 000030B0 3C20                    	cmp	al,' ' 			; space?
 36138 000030B2 741F                    	je	short b15		; then end of digits
 36139 000030B4 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 36140 000030B6 741B                    	je	short b15		; then end of digits.
 36141 000030B8 3C09                    	cmp	al, tab ; 9		; tab
 36142 000030BA 7417                    	je	short b15
 36143 000030BC 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 36144 000030C1 7410                    	je	short b15
 36145 000030C3 3C2F                    	cmp	al,'/'			; see if another switch follows
 36146                                  	;nop				; cas - remnant of old bad code
 36147                                  	;nop
 36148                                  	; 12/12/2022
 36149                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36150                                  	;nop
 36151                                  	;nop
 36152 000030C5 740C                    	je	short b15
 36153 000030C7 3C0A                    	cmp	al,lf			; line-feed?
 36154 000030C9 7408                    	je	short b15
 36155 000030CB 3C0D                    	cmp	al,cr			; carriage return?
 36156 000030CD 7404                    	je	short b15
 36157 000030CF 08C0                    	or	al,al			; end of line separator?
 36158 000030D1 75C4                    	jnz	short b2		; no, try as a valid char...
 36159                                  b15:
 36160 000030D3 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 36161 000030D8 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 36162                                  b1:
 36163 000030DD 89D8                    	mov	ax,bx			; get proper count
 36164 000030DF 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 36165 000030E1 5B                      	pop	bx
 36166 000030E2 C3                      	retn
 36167                                  badnum:
 36168                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36169                                  	;mov	byte [cs:sepchr],0
 36170 000030E3 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 36171                                  	; 12 /12/2022
 36172 000030E5 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 36173 000030E9 5B                      	pop	bx
 36174 000030EA F9                      	stc				; and carry set
 36175 000030EB C3                      	retn
 36176                                  
 36177                                  ;****************************************************************************
 36178                                  
 36179                                  setdoscountryinfo:
 36180                                  
 36181                                  ;----------------------------------------------------------------------------
 36182                                  ;input: es:di -> pointer to dos_country_cdpg_info
 36183                                  ;	ds:0  -> buffer.
 36184                                  ;	si = 0
 36185                                  ;	ax = country id
 36186                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 36187                                  ;	bx = file handle
 36188                                  ;	this routine can handle maximum 438 country_data entries.
 36189                                  ;
 36190                                  ;output: dos_country_cdpg_info set.
 36191                                  ;	 carry set if any file read failure or wrong information in the file.
 36192                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 36193                                  ;	 codepage_id in the file.
 36194                                  ;----------------------------------------------------------------------------
 36195                                  
 36196                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36197                                  
 36198 000030EC 57                      	push	di
 36199 000030ED 50                      	push	ax
 36200 000030EE 52                      	push	dx
 36201                                  
 36202 000030EF 31C9                    	xor	cx,cx
 36203 000030F1 31D2                    	xor	dx,dx
 36204 000030F3 B80002                  	mov	ax,512			;read 512 bytes
 36205 000030F6 E84301                  	call	readincontrolbuffer	;read the file header
 36206 000030F9 724A                    	jc	short setdosdata_fail
 36207                                  
 36208 000030FB 06                      	push	es
 36209 000030FC 56                      	push	si
 36210                                  
 36211 000030FD 0E                      	push	cs
 36212 000030FE 07                      	pop	es
 36213                                  
 36214 000030FF BF[6333]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 36215 00003102 B90800                  	mov	cx,8			;length of the signature
 36216 00003105 F3A6                    	repz	cmpsb
 36217                                  
 36218 00003107 5E                      	pop	si
 36219 00003108 07                      	pop	es
 36220 00003109 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 36221                                  
 36222 0000310B 83C612                  	add	si,18			;si -> county info type
 36223 0000310E 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 36224 00003111 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 36225                                  
 36226 00003113 46                      	inc	si			;si -> file offset
 36227 00003114 8B14                    	mov	dx,[si]			;get the info file offset.
 36228 00003116 8B4C02                  	mov	cx,[si+2]
 36229 00003119 B80018                  	mov	ax,6144			;read 6144 bytes.
 36230 0000311C E81D01                  	call	readincontrolbuffer	;read info
 36231 0000311F 7224                    	jc	short setdosdata_fail
 36232                                  
 36233 00003121 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 36234 00003123 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 36235 00003127 771C                    	ja	short setdosdata_fail
 36236                                  
 36237 00003129 46                      	inc	si
 36238 0000312A 46                      	inc	si			;si -> entry information packet
 36239 0000312B 5A                      	pop	dx			;restore code page id
 36240 0000312C 58                      	pop	ax			;restore country id
 36241 0000312D 5F                      	pop	di
 36242                                  
 36243                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 36244 0000312E 3B4402                  	cmp	ax,[si+2]		;compare country_id
 36245 00003131 7509                    	jne	short setdoscntry_next
 36246                                  
 36247                                  	;cmp	dx,0			;no user specified code page ?
 36248                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 36249                                  	; 10/09/2023
 36250 00003133 09D2                    	or	dx,dx ; cmp dx,0
 36251 00003135 7413                    	jz	short setdoscntry_any_codepage
 36252 00003137 3B5404                  	cmp	dx,[si+4]		;compare code page id
 36253 0000313A 7411                    	je	short setdoscntry_got_it
 36254                                  
 36255                                  setdoscntry_next:
 36256 0000313C 0334                    	add	si,[si]			;next entry
 36257 0000313E 46                      	inc	si
 36258 0000313F 46                      	inc	si			;take a word for size of entry itself
 36259 00003140 E2EC                    	loop	setdoscntry_find
 36260                                  
 36261                                  	;mov	cx,-1			;signals that bad country id entered.
 36262                                  	; 10/09/2023
 36263 00003142 49                      	dec	cx ; 0 -> -1
 36264                                  setdoscntry_fail:
 36265 00003143 F9                      	stc
 36266 00003144 C3                      	retn
 36267                                  
 36268                                  setdosdata_fail:
 36269 00003145 5E                      	pop	si
 36270 00003146 59                      	pop	cx
 36271 00003147 5F                      	pop	di
 36272 00003148 EBF9                    	jmp	short setdoscntry_fail
 36273                                  
 36274                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 36275 0000314A 8B5404                  	mov	dx,[si+4]
 36276                                  
 36277                                  setdoscntry_got_it:			;found the matching entry
 36278 0000314D 2E8916[6B33]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 36279 00003152 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 36280 00003155 8B4C0C                  	mov	cx,[si+12]
 36281 00003158 B80002                  	mov	ax,512 			;read 512 bytes
 36282 0000315B E8DE00                  	call	readincontrolbuffer
 36283 0000315E 72E3                    	jc	short setdoscntry_fail
 36284                                  
 36285 00003160 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 36286 00003162 46                      	inc	si
 36287 00003163 46                      	inc	si			;si -> first entry
 36288                                  
 36289                                  setdoscntry_data:
 36290 00003164 57                      	push	di			;es:di -> dos_country_cdpg_info
 36291 00003165 51                      	push	cx			;save # of entry left
 36292 00003166 56                      	push	si			;si -> current entry in control buffer
 36293                                  
 36294 00003167 8A4402                  	mov	al,[si+2]		;get data entry id
 36295 0000316A E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 36296 0000316D 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 36297                                  
 36298 0000316F 8B5404                  	mov	dx,[si+4]		;get offset of data
 36299 00003172 8B4C06                  	mov	cx,[si+6]
 36300 00003175 B80042                  	mov	ax,4200h
 36301 00003178 F9                      	stc
 36302 00003179 CD21                    	int	21h			;move pointer
 36303 0000317B 72C8                    	jc	short setdosdata_fail
 36304                                  
 36305 0000317D BA0002                  	mov	dx,512			;start of data buffer
 36306 00003180 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 36307 00003183 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 36308 00003185 F9                      	stc
 36309 00003186 CD21                    	int	21h			;read the country.sys data
 36310 00003188 72BB                    	jc	short setdosdata_fail 	;read failure
 36311                                  
 36312 0000318A 39C8                    	cmp	ax,cx
 36313 0000318C 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 36314                                  
 36315 0000318E 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 36316 00003191 8B4C06                  	mov	cx,[si+6]
 36317 00003194 B80042                  	mov	ax,4200h
 36318 00003197 F9                      	stc
 36319 00003198 CD21                    	int	21h			;move pointer back again
 36320 0000319A 72A9                    	jc	short setdosdata_fail
 36321                                  
 36322 0000319C 56                      	push	si
 36323 0000319D BE0802                  	mov	si,(512+8)		;get length of the data from the file
 36324 000031A0 8B0C                    	mov	cx,[si]
 36325 000031A2 5E                      	pop	si
 36326 000031A3 BA0002                  	mov	dx,512			;start of data buffer
 36327 000031A6 83C10A                  	add	cx,10			;signature + a word for the length itself
 36328 000031A9 B43F                    	mov	ah,3Fh			;read the data from the file.
 36329 000031AB F9                      	stc
 36330 000031AC CD21                    	int	21h
 36331 000031AE 7295                    	jc	short setdosdata_fail
 36332                                  
 36333 000031B0 39C8                    	cmp	ax,cx
 36334 000031B2 7591                    	jne	short setdosdata_fail
 36335                                  
 36336 000031B4 8A4402                  	mov	al,[si+2]		;save data id for future use.
 36337 000031B7 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 36338 000031BA 8B0C                    	mov	cx,[si]			;get the length of the file
 36339 000031BC 41                      	inc	cx			;take care of a word for lenght of tab
 36340 000031BD 41                      	inc	cx			;itself.
 36341 000031BE 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 36342 000031C2 7781                    	ja	short setdosdata_fail
 36343                                  
 36344                                  	;if	bugfix
 36345 000031C4 E83100                  	call	setdbcs_before_copy
 36346                                  	;endif
 36347                                  
 36348 000031C7 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 36349 000031C9 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 36350                                  
 36351 000031CB 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 36352                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 36353 000031CF 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 36354                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 36355                                  	
 36356 000031D3 57                      	push	di			;save di
 36357                                  
 36358                                  	;push	ax
 36359                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 36360                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 36361                                  	;pop	ax
 36362                                  	; 10/09/2023
 36363 000031D4 2EFF36[6B33]            	push	word [cs:cntrycodepage_id]
 36364 000031D9 8F4404                  	pop	word [si+4]
 36365                                  
 36366                                  setdoscntry_mov:
 36367 000031DC F3A4                    	rep	movsb			;copy the table into dos
 36368 000031DE 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 36369 000031E0 7509                    	jne	short setdoscntry_data_next
 36370                                  
 36371 000031E2 5F                      	pop	di			;restore di
 36372 000031E3 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 36373                                  	;pop	word [es:di+26]		;restore
 36374 000031E7 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 36375                                  	;pop	word [es:di+24]
 36376                                  
 36377                                  setdoscntry_data_next:
 36378 000031EB 5E                      	pop	si			;restore control buffer pointer
 36379 000031EC 59                      	pop	cx			;restore # of entries left
 36380 000031ED 5F                      	pop	di			;restore pointer to dso_country_cdpg
 36381 000031EE 0334                    	add	si,[si]			;try to get the next entry
 36382 000031F0 46                      	inc	si
 36383 000031F1 46                      	inc	si			;take a word of entry length itself
 36384 000031F2 49                      	dec	cx
 36385                                  	; 10/09/2023
 36386 000031F3 741B                    	jz	short setdoscntry_ok 
 36387                                  	;cmp	cx,0
 36388                                  	;je	short setdoscntry_ok
 36389 000031F5 E96CFF                  	jmp	setdoscntry_data
 36390                                  
 36391                                  	; 18/12/2022
 36392                                  ;setdoscntry_ok:
 36393                                  	;retn
 36394                                  
 36395                                  ;----------------------------------------------------------------------------
 36396                                  
 36397                                  	;if	bugfix
 36398                                  
 36399                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36400                                  
 36401                                  setdbcs_before_copy:
 36402 000031F8 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 36403 000031FA 7514                    	jne	short sdbcsbc		; jump if not
 36404                                  	
 36405                                  	; 10/09/2023
 36406 000031FC 50                      	push	ax
 36407 000031FD 31C0                    	xor	ax,ax
 36408 000031FF 263905                  	cmp	[es:di],ax ; 0
 36409 00003202 740B                    	je	short sdbcsbc_pop
 36410                                  	
 36411                                  	;cmp	word [es:di],0		; zero byte data block?
 36412                                  	;je	short sdbcsbc		; jump if so
 36413                                  
 36414 00003204 57                      	push	di
 36415                                  	; 10/09/2023
 36416                                  	;push	ax
 36417 00003205 51                      	push	cx
 36418 00003206 268B0D                  	mov	cx,[es:di]		; load block length
 36419                                  	;add	di,2			; points actual data
 36420 00003209 47                      	inc	di
 36421 0000320A 47                      	inc	di
 36422                                  	;xor	al,al			; fill bytes
 36423 0000320B F3AA                    	rep	stosb			; clear data block
 36424 0000320D 59                      	pop	cx
 36425                                  	;pop	ax
 36426 0000320E 5F                      	pop	di
 36427                                  
 36428                                  sdbcsbc_pop:	; 10/09/2023
 36429 0000320F 58                      	pop	ax
 36430                                  sdbcsbc:
 36431                                  setdoscntry_ok:	; 18/12/2022
 36432 00003210 C3                      	retn
 36433                                  
 36434                                  	;endif
 36435                                  
 36436                                  ;----------------------------------------------------------------------------
 36437                                  
 36438                                  getcountrydestination:
 36439                                  
 36440                                  ;----------------------------------------------------------------------------
 36441                                  ;get the destination address in the dos country info table.
 36442                                  ;
 36443                                  ;input: al - data id
 36444                                  ;	es:di -> dos_country_cdpg_info
 36445                                  ;on return:
 36446                                  ;	es:di -> destination address of the matching data id
 36447                                  ;	carry set if no matching data id found in dos.
 36448                                  ;----------------------------------------------------------------------------
 36449                                  
 36450                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36451                                  
 36452 00003211 51                      	push	cx
 36453                                  	;add	di,74
 36454 00003212 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 36455                                  					;skip the reserved area, syscodepage etc.
 36456 00003215 268B0D                  	mov	cx,[es:di]		;get the number of entries
 36457 00003218 47                      	inc	di
 36458 00003219 47                      	inc	di			;si -> the first start entry id
 36459                                  
 36460                                  getcntrydest:
 36461 0000321A 263805                  	cmp	byte [es:di],al
 36462 0000321D 7413                    	je	short getcntrydest_ok
 36463                                  
 36464 0000321F 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 36465 00003223 7405                    	je	short getcntrydest_1
 36466                                  
 36467 00003225 83C705                  	add	di,5			;next data id
 36468 00003228 EB03                    	jmp	short getcntrydest_loop
 36469                                  
 36470                                  getcntrydest_1:
 36471                                  	;add	di,41
 36472 0000322A 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 36473                                  getcntrydest_loop:
 36474 0000322D E2EB                    	loop	getcntrydest
 36475 0000322F F9                      	stc
 36476                                  	;jmp	short getcntrydest_exit
 36477                                  getcntrydest_exit:
 36478                                  	; 10/09/2023
 36479 00003230 59                      	pop	cx
 36480 00003231 C3                      	retn
 36481                                  
 36482                                  getcntrydest_ok:
 36483                                  	; 10/09/2023
 36484 00003232 47                      	inc	di
 36485                                  
 36486                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 36487                                  ;	jne	short getcntrydest_ok1
 36488                                  ;
 36489                                  ;	;inc	di			;now di -> cccountryinfolen
 36490                                  ;	jmp	short getcntrydest_exit
 36491                                  
 36492                                  	; 10/09/2023
 36493 00003233 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 36494 00003235 74F9                    	je	short getcntrydest_exit
 36495                                  
 36496                                  getcntrydest_ok1:
 36497                                  	;les	di,[es:di+1]		;get the destination in es:di
 36498                                  	; 10/09/2023
 36499 00003237 26C43D                  	les	di,[es:di]
 36500                                  ;getcntrydest_exit:
 36501 0000323A 59                      	pop	cx
 36502 0000323B C3                      	retn
 36503                                  
 36504                                  ;----------------------------------------------------------------------------
 36505                                  
 36506                                  readincontrolbuffer:
 36507                                  
 36508                                  ;----------------------------------------------------------------------------
 36509                                  ;move file pointer to cx:dx
 36510                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 36511                                  ;si will be set to 0 hence ds:si points to the control buffer.
 36512                                  ;
 36513                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 36514                                  ;	 be moved.
 36515                                  ;	 ax - # of bytes to read
 36516                                  ;	 bx - file handle
 36517                                  ;	 ds - buffer seg.
 36518                                  ;return: the control data information is read into ds:0 - ds:0200.
 36519                                  ;	 cx,dx value destroyed.
 36520                                  ;	 carry set if error in reading file.
 36521                                  ;----------------------------------------------------------------------------
 36522                                  
 36523 0000323C 50                      	push	ax			;# of bytes to read
 36524 0000323D B80042                  	mov	ax,4200h
 36525 00003240 F9                      	stc
 36526 00003241 CD21                    	int	21h			;move pointer
 36527 00003243 59                      	pop	cx			;# of bytes to read
 36528 00003244 7209                    	jc	short ricb_exit
 36529                                  
 36530 00003246 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 36531 00003248 31F6                    	xor	si,si
 36532 0000324A B43F                    	mov	ah,3Fh			;read into the buffer
 36533 0000324C F9                      	stc
 36534 0000324D CD21                    	int	21h			;should be less than 1024 bytes.
 36535                                  ricb_exit:
 36536 0000324F C3                      	retn
 36537                                  
 36538                                  ;----------------------------------------------------------------------------
 36539                                  
 36540                                  ;! set_country_path procedure is not called from anywhere !
 36541                                  ; Erdogan Tan - 04/08/2023 (Retro DOS v4.2)
 36542                                  %if 0
 36543                                  
 36544                                  set_country_path:
 36545                                  
 36546                                  ;----------------------------------------------------------------------------
 36547                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 36548                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 36549                                  ;     assumes current directory is the root directory.
 36550                                  ;out: ds:di -> full path (cntry_drv).
 36551                                  ;     set the cntry_drv string from the country=,,path command.
 36552                                  ;     ds, es, si value saved.
 36553                                  ;----------------------------------------------------------------------------
 36554                                  
 36555                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 36556                                  	; (SYSINIT:4EF4h)
 36557                                  
 36558                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 36559                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:36DDh)
 36560                                  
 36561                                  	push	si
 36562                                  
 36563                                  	push	ds			;switch ds, es
 36564                                  	push	es
 36565                                  	pop	ds
 36566                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 36567                                  
 36568                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 36569                                  	jc	short scp_default_drv 	;no, use current default drive.
 36570                                  
 36571                                  	mov	al,[si]
 36572                                  	inc	si
 36573                                  	inc	si			;si -> next char after ":"
 36574                                  	jmp	short scp_setdrv
 36575                                  
 36576                                  scp_default_drv:
 36577                                  	mov	ah,19h
 36578                                  	int	21h
 36579                                  	add	al,"A"			;convert it to a character.
 36580                                  
 36581                                  scp_setdrv:
 36582                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 36583                                  	mov	di,cntry_path
 36584                                  	mov	al,[si]
 36585                                  	cmp	al, "\"
 36586                                  	je	short scp_root_dir
 36587                                  
 36588                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 36589                                  	;je	short scp_root_dir
 36590                                  	;jmp	short scp_path
 36591                                  	; 04/01/2023
 36592                                  	jne	short scp_path
 36593                                  
 36594                                  scp_root_dir:
 36595                                  	dec	di			;di -> cntry_root
 36596                                  scp_path:
 36597                                  	call	move_asciiz		;copy it
 36598                                  
 36599                                  	mov	di,cntry_drv
 36600                                  scpath_exit:
 36601                                  
 36602                                  	push	ds			;switch ds, es
 36603                                  	push	es
 36604                                  	pop	ds
 36605                                  	pop	es			;ds, es value restored
 36606                                  
 36607                                  	pop	si
 36608                                  	retn
 36609                                  
 36610                                  %endif
 36611                                  
 36612                                  ;----------------------------------------------------------------------------
 36613                                  
 36614                                  chk_drive_letter:
 36615                                  
 36616                                  ;check if ds:[si] is a drive letter followed by ":".
 36617                                  ;assume that every alpha character is already converted to upper case.
 36618                                  ;carry set if not.
 36619                                  
 36620                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 36621                                  
 36622 00003250 50                      	push	ax
 36623 00003251 803C41                  	cmp	byte [si],"A"
 36624                                  	;jb	short cdletter_no
 36625 00003254 720C                    	jb	short cdletter_exit
 36626 00003256 803C5A                  	cmp	byte [si],"Z"
 36627 00003259 7706                    	ja	short cdletter_no
 36628 0000325B 807C013A                	cmp	byte [si+1],":"
 36629                                  	;jne	short cdletter_no
 36630                                  	;jmp	short cdletter_exit
 36631                                  	; 10/09/2023
 36632 0000325F 7401                    	je	short cdletter_exit
 36633                                  
 36634                                  cdletter_no:
 36635 00003261 F9                      	stc
 36636                                  cdletter_exit:
 36637 00003262 58                      	pop	ax
 36638 00003263 C3                      	retn
 36639                                  
 36640                                  ;----------------------------------------------------------------------------
 36641                                  
 36642                                  move_asciiz:
 36643                                  
 36644                                  ;in: ds:si -> source es:di -> target
 36645                                  ;out: copy the string until 0.
 36646                                  ;assumes there exists a 0.
 36647                                  
 36648                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 36649                                  
 36650                                  masciiz_loop:
 36651                                  	; 10/09/2023
 36652 00003264 F604FF                  	test	byte [si],0FFh
 36653 00003267 A4                      	movsb
 36654                                  	;cmp	byte [si-1],0	; was it 0?
 36655                                  	;jne	short masciiz_loop
 36656 00003268 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 36657 0000326A C3                      	retn
 36658                                  
 36659                                  
 36660                                  ;----------------------------------------------------------------------------
 36661                                  
 36662                                  ;	ds:dx points to string to output (asciz)
 36663                                  ;
 36664                                  ;	prints <badld_pre> <string> <badld_post>
 36665                                  
 36666                                  badfil:
 36667 0000326B 0E                      	push	cs
 36668 0000326C 07                      	pop	es
 36669                                  
 36670 0000326D 89D6                    	mov	si,dx
 36671                                  badload:
 36672 0000326F BA[AB36]                	mov	dx,badld_pre	; want to print config error
 36673 00003272 BB[6836]                	mov	bx,crlfm
 36674                                  prnerr:
 36675 00003275 0E                      	push	cs
 36676 00003276 1F                      	pop	ds ; *
 36677 00003277 E81D00                  	call	print
 36678                                  prn1:
 36679 0000327A 268A14                  	mov	dl,[es:si]
 36680 0000327D 08D2                    	or	dl,dl
 36681 0000327F 7407                    	jz	short prn2
 36682 00003281 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 36683 00003283 CD21                    	int	21h
 36684 00003285 46                      	inc	si
 36685 00003286 EBF2                    	jmp	short prn1
 36686                                  prn2:
 36687 00003288 89DA                    	mov	dx,bx
 36688 0000328A E80A00                  	call	print
 36689                                  	; 11/12/2022
 36690                                  	; ds = cs ; *
 36691 0000328D 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 36692                                  	;cmp	byte [cs:donotshownum],1 
 36693 00003292 7407                    	je	short prnexit
 36694                                  	
 36695                                  	; 18/12/2022
 36696                                  	;call	error_line
 36697 00003294 E91CF4                  	jmp	error_line
 36698                                  ;prnexit:
 36699                                  	;retn
 36700                                  
 36701                                  ;----------------------------------------------------------------------------
 36702                                  
 36703                                  print:
 36704 00003297 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 36705 00003299 CD21                    	int	21h
 36706                                  prnexit:	; 18/12/2022
 36707 0000329B C3                      	retn
 36708                                  
 36709                                  ;----------------------------------------------------------------------------
 36710                                  
 36711                                  ;  open device pointed to by dx, al has access code
 36712                                  ;   if unable to open do a device open null device instead
 36713                                  
 36714                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36715                                  	; (SYSINIT:3764h)
 36716                                  open_dev:
 36717 0000329C E80500                  	call	open_file
 36718 0000329F 7309                    	jnc	short open_dev3
 36719                                  
 36720                                  open_dev1:
 36721 000032A1 BA[0433]                	mov	dx,nuldev
 36722                                  	; 18/12/2022
 36723                                  	;call	open_file
 36724                                  ;of_retn:
 36725                                  	;retn
 36726                                  	; 18/12/2022
 36727                                  	;jmp	short open_file
 36728                                  open_file:
 36729 000032A4 B43D                    	mov	ah,OPEN	; 3Dh
 36730 000032A6 F9                      	stc
 36731 000032A7 CD21                    	int	21h
 36732                                  of_retn:	; 18/12/2022
 36733 000032A9 C3                      	retn
 36734                                  
 36735                                  open_dev3:
 36736 000032AA 89C3                    	mov	bx,ax			; handle from open to bx
 36737                                  	;;xor	ax,ax			; get device info
 36738                                  	;;mov	ah,IOCTL ; 44h
 36739                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 36740                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36741                                  	;xor	ax,ax
 36742                                  	;mov	ah,44h	; IOCTL
 36743                                  	; 11/12/2022
 36744 000032AC B80044                  	mov	ax,4400h ; IOCTL<<8 
 36745                                  
 36746 000032AF CD21                    	int	21h
 36747                                  
 36748 000032B1 F6C280                  	test	dl,10000000b ; 80h
 36749 000032B4 75F3                    	jnz	short of_retn
 36750                                  
 36751 000032B6 B43E                    	mov	ah,CLOSE ; 3Eh
 36752 000032B8 CD21                    	int	21h
 36753 000032BA EBE5                    	jmp	short open_dev1
 36754                                  
 36755                                  ;----------------------------------------------------------------------------
 36756                                  
 36757                                  ; 18/12/2022
 36758                                  %if 0
 36759                                  open_file:
 36760                                  	mov	ah,OPEN	; 3Dh
 36761                                  	stc
 36762                                  	int	21h
 36763                                  	retn
 36764                                  %endif
 36765                                  
 36766                                  ;----------------------------------------------------------------------------
 36767                                  
 36768                                  ; test int24. return back to dos with the fake user response of "fail"
 36769                                  
 36770                                  int24:
 36771 000032BC B003                    	mov	al,3			; fail the system call
 36772 000032BE CF                      	iret				; return back to dos.
 36773                                  
 36774                                  ; 19/04/2019 - Retro DOS v4.0
 36775                                  
 36776                                  ;----------------------------------------------------------------------------
 36777                                  ; DATA
 36778                                  ;----------------------------------------------------------------------------
 36779                                  
 36780                                  ;include copyrigh.inc			; copyright statement
 36781                                  
 36782                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 36783                                  
 36784                                  ;MsDosVersion6Copyr:
 36785                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 36786                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 36787                                  
 36788                                  ; 22/10/2022
 36789                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 36790                                  
 36791                                  ; 28/12/2022
 36792                                  %if 0
 36793                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36794                                  MsDosVersion5Copyr:
 36795                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 36796                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 36797                                  %endif
 36798                                  
 36799                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36800                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36801                                  ; 20/04/2019 - Retro DOS v4.0
 36802                                  ;BOOTMES:
 36803                                  ;	db      13
 36804                                  ;	db      10
 36805                                  ;	db      "MS-DOS version "
 36806                                  ;	db      MAJOR_VERSION + "0"
 36807                                  ;	db      "."
 36808                                  ;	db      (MINOR_VERSION / 10) + "0"
 36809                                  ;	db      (MINOR_VERSION % 10) + "0"
 36810                                  ;	db      13,10
 36811                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 36812                                  ;	; 22/10/2022
 36813                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 36814                                  ;	;
 36815                                  ;	db	0
 36816                                  
 36817                                  	; 12/12/2022
 36818 000032BF 00                      	db	0
 36819                                  ; 12/12/2022
 36820                                  BOOTMES:
 36821 000032C0 0D0A                    	db	13,10
 36822                                  	;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 36823                                  	; 28/12/2022
 36824 000032C2 526574726F20444F53-     	db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 36824 000032CB 2076342E3120284D6F-
 36824 000032D4 646966696564204D53-
 36824 000032DD 444F5320352E302920 
 36825 000032E6 0D0A                    	db	13,10
 36826                                  	;db	"by Erdogan Tan [2022] "
 36827 000032E8 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 36827 000032F1 6E2054616E205B3230-
 36827 000032FA 32335D20           
 36828 000032FE 0D0A                    	db	13,10
 36829 00003300 0D0A2400                	db	13,10,"$",0
 36830                                  
 36831 00003304 4E554C00                nuldev:	db	"NUL",0
 36832 00003308 434F4E00                condev:	db	"CON",0
 36833 0000330C 41555800                auxdev:	db	"AUX",0
 36834 00003310 50524E00                prndev:	db	"PRN",0
 36835                                  
 36836                                  ;IFDEF	CONFIGPROC
 36837 00003314 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 36837 0000331D 595300             
 36838                                  
 36839 00003320 413A                    cntry_drv:  db	"A:"
 36840 00003322 5C                      cntry_root: db	"\"
 36841 00003323 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 36841 0000332C 595300             
 36842                                  	    ;db	52 dup (0)
 36843 0000332F 00<rep 34h>             	    times 52 db 0	
 36844                                  
 36845                                  country_file_signature:
 36846 00003363 FF434F554E545259        	db	0FFh,'COUNTRY'
 36847                                  
 36848                                  cntrycodepage_id: 
 36849 0000336B 0000                    	dw	0 	
 36850                                  
 36851                                  ;ENDIF ; CONFIGPROC
 36852                                  
 36853                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36854                                  ;;ifdef	MULTI_CONFIG
 36855                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 36856                                  ;tmplate: db	64                      ; must precede commnd
 36857                                  ;;endif
 36858                                  	; 02/11/2022
 36859                                  	;db	12                      ; size of commnd line (excl. null)
 36860                                  
 36861 0000336D 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36861 00003376 434F4D00           
 36862                                  	;db	51 dup (0)
 36863 0000337A 00<rep 33h>             	times	51 db 0
 36864                                  ;endif
 36865                                  
 36866                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36867                                  ;;ifdef	MULTI_CONFIG
 36868                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36869                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 36870                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36871                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36872                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 36873                                  ;	 db	9,"A:\DOS /P",0		;
 36874                                  ;def_swchr:	
 36875                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 36876                                  ;;endif
 36877                                  
 36878                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36879                                  ;command_line:
 36880                                  ;	db	2,"/P"			; default command.com args
 36881                                  ;	;db	125 dup (0)
 36882                                  ;	times	125 db 0
 36883                                  
 36884                                  pathstring:
 36885                                  	;db	64 dup (0)
 36886 000033AD 00<rep 40h>             	times	64 db 0
 36887                                  
 36888                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36889                                  %if 0
 36890                                  
 36891                                  dae_flag:
 36892                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36893                                  
 36894                                  ;ifdef	MULTI_CONFIG
 36895                                  
 36896                                  MAX_MULTI_CONFIG equ 10
 36897                                  
 36898                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36899                                  
 36900                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36901                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36902                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36903                                  bLastCol:	db      0               ; ending column on status line
 36904                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36905                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36906                                                                          ; 2=disable default 2-second delay
 36907                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36908                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36909                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36910                                  bDefBlock:	db      1               ; default block #
 36911                                  bMaxBlock:	db      0               ; maxmimum block #
 36912                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36913                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36914                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36915                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36916                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36917                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36918                                  
 36919                                  szBoot:		db      "CONFIG=",0
 36920                                  szMenu:		db      "MENU",0
 36921                                  szCommon:	db      "COMMON",0
 36922                                  
 36923                                  ;endif	;MULTI_CONFIG
 36924                                  
 36925                                  comtab:	 ; label byte
 36926                                  
 36927                                  ;            cmd len    command         cmd code
 36928                                  ;            -------    -------         --------
 36929                                  
 36930                                  ;ifdef MULTI_CONFIG
 36931                                          db      1,      "[",            CONFIG_BEGIN
 36932                                  ;endif
 36933                                          db      5,      "BREAK",        CONFIG_BREAK
 36934                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36935                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36936                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36937                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36938                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36939                                          db      3,      "DOS",          CONFIG_DOS
 36940                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36941                                          db      4,      "FCBS",         CONFIG_FCBS
 36942                                          db      5,      "FILES",        CONFIG_FILES
 36943                                  ;ifdef MULTI_CONFIG
 36944                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36945                                  ;endif
 36946                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36947                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36948                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36949                                  ;ifdef MULTI_CONFIG
 36950                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36951                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36952                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36953                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36954                                  ;endif
 36955                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36956                                  ;ifdef MULTI_CONFIG
 36957                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36958                                  ;endif
 36959                                          db      3,      "REM",          CONFIG_REM
 36960                                  ;ifdef MULTI_CONFIG
 36961                                          db      3,      "SET",          CONFIG_SET
 36962                                  ;endif
 36963                                          db      5,      "SHELL",        CONFIG_SHELL
 36964                                  ;if    STACKSW
 36965                                          db      6,      "STACKS",       CONFIG_STACKS
 36966                                  ;endif
 36967                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36968                                  	db	0
 36969                                  %endif
 36970                                  
 36971                                  comtab:
 36972                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36973                                  	; (SYSINIT:38EDh)
 36974 000033ED 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36975 000033F6 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36976 000033FD 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36977 00003405 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36977 0000340E 474855             
 36978 00003411 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36979 00003418 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36980 0000341E 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36980 00003427 454C               
 36981 00003429 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36981 00003432 434B4D             
 36982 00003435 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36982 0000343E 50                 
 36983 0000343F 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36984 00003447 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36985 00003450 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36986 00003457 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36987 00003460 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36988 00003469 0352454D30              	db      3,      "REM",          CONFIG_REM
 36989 0000346E 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36989 00003477 31                 
 36990 00003478 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36991 0000347D 00                      	db	0
 36992                                  
 36993                                  deviceparameters:	
 36994                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36995                                  devp.specialfunc:	; deviceparameters +
 36996 0000347E 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36997                                  devp.devtype:
 36998 0000347F 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36999                                  devp.devattr:
 37000 00003480 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 37001                                  devp.cylinders:
 37002 00003482 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 37003                                  
 37004 00003484 00<rep 11Eh>            	times	286	db 0
 37005                                  	
 37006 000035A2 0200                    hlim:	dw	2
 37007 000035A4 0900                    slim:	dw	9
 37008                                  
 37009 000035A6 00                      drive:	db	0
 37010                                  
 37011                                  switches:
 37012 000035A7 0000                    	dw	0
 37013                                  
 37014                                  ; the following are the recommended bpbs for the media that
 37015                                  ; we know of so far.
 37016                                  
 37017                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37018                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 37019                                  
 37020                                  ; 48 tpi diskettes
 37021                                  
 37022 000035A9 0002                    bpb48t	dw	512
 37023 000035AB 02                      	db	2
 37024 000035AC 0100                    	dw	1
 37025 000035AE 02                      	db	2
 37026 000035AF 7000                    	dw	112
 37027 000035B1 D002                    	dw	2*9*40 ; 720
 37028 000035B3 FD                      	db	0FDh
 37029 000035B4 0200                    	dw	2
 37030 000035B6 0900                    	dw	9
 37031 000035B8 0200                    	dw	2
 37032 000035BA 00000000                	dd	0
 37033 000035BE 00000000                        dd      0
 37034                                  
 37035                                  ; 96tpi diskettes
 37036                                  
 37037 000035C2 0002                    bpb96t:	dw	512
 37038 000035C4 01                      	db	1
 37039 000035C5 0100                    	dw	1
 37040 000035C7 02                      	db	2
 37041 000035C8 E000                    	dw	224
 37042 000035CA 6009                    	dw	2*15*80 ; 2400
 37043 000035CC F9                      	db	0F9h
 37044 000035CD 0700                    	dw	7
 37045 000035CF 0F00                    	dw	15
 37046 000035D1 0200                    	dw	2
 37047 000035D3 00000000                	dd	0
 37048 000035D7 00000000                        dd      0
 37049                                  
 37050                                  ; 3 1/2 inch diskette bpb
 37051                                  
 37052 000035DB 0002                    bpb35:	dw	512
 37053 000035DD 02                      	db	2
 37054 000035DE 0100                    	dw	1
 37055 000035E0 02                      	db	2
 37056 000035E1 7000                    	dw	112
 37057 000035E3 A005                    	dw	2*9*80 ; 1440
 37058 000035E5 F9                      	db	0F9h
 37059 000035E6 0300                    	dw	3
 37060 000035E8 0900                    	dw	9
 37061 000035EA 0200                    	dw	2
 37062 000035EC 00000000                	dd	0
 37063 000035F0 00000000                        dd      0
 37064                                        
 37065 000035F4 0002                    bpb35h:	dw	512
 37066 000035F6 01                      	db	1
 37067 000035F7 0100                    	dw	1
 37068 000035F9 02                      	db	2
 37069 000035FA E000                    	dw	224
 37070 000035FC 400B                    	dw	2*18*80 ; 2880
 37071 000035FE F0                      	db	0F0h
 37072 000035FF 0900                    	dw	9
 37073 00003601 1200                    	dw	18
 37074 00003603 0200                    	dw	2
 37075 00003605 00000000                	dd	0
 37076 00003609 00000000                        dd      0
 37077                                  
 37078                                  ; m037 - BEGIN
 37079                                  
 37080 0000360D 0002                    bpb288:	dw	512
 37081 0000360F 02                      	db	2
 37082 00003610 0100                    	dw	1
 37083 00003612 02                      	db	2
 37084 00003613 F000                    	dw	240
 37085 00003615 8016                    	dw	2*36*80 ; 5760
 37086 00003617 F0                      	db	0F0h
 37087 00003618 0900                    	dw	9
 37088 0000361A 2400                    	dw	36
 37089 0000361C 0200                    	dw	2
 37090 0000361E 00000000                	dd	0
 37091 00003622 00000000                        dd      0
 37092                                  
 37093                                  ; m037 - END
 37094                                  
 37095                                  ; 12/05/2019
 37096                                  
 37097                                  align 2
 37098                                  
 37099                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37100                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 37101                                  
 37102 00003626 [A935]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 37103 00003628 [C235]                  	    dw	    bpb96t		; 96tpi drives
 37104 0000362A [DB35]                  	    dw	    bpb35		; 3.5" drives
 37105                                  ; the following are not supported, so default to 3.5" media layout
 37106 0000362C [DB35]                  	    dw	    bpb35		; not used - 8" drives
 37107 0000362E [DB35]                  	    dw	    bpb35		; not used - 8" drives
 37108 00003630 [DB35]                  	    dw	    bpb35		; not used - hard files
 37109 00003632 [DB35]                  	    dw	    bpb35		; not used - tape drives
 37110 00003634 [F435]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 37111 00003636 [DB35]                  	    dw	    bpb35		; ERIMO				m037
 37112 00003638 [0D36]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 37113                                  
 37114                                  switchlist: 
 37115 0000363A 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 37116                                  
 37117                                  ;----------------------------------------------------------------------------
 37118                                  ; Messages
 37119                                  ;----------------------------------------------------------------------------
 37120                                  
 37121                                  ; 19/04/2019 - Retro DOS v4.0
 37122                                  
 37123                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 37124                                  
 37125 00003643 00                      	db 	0
 37126                                  
 37127                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37128                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 37129                                  
 37130                                  badopm:
 37131 00003644 0D0A                    	db	0Dh,0Ah 
 37132 00003646 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 37132 0000364F 7A656420636F6D6D61-
 37132 00003658 6E6420696E20434F4E-
 37132 00003661 4649472E535953     
 37133                                  crlfm:
 37134 00003668 0D0A24                  	db	0Dh,0Ah,'$'
 37135                                  badparm:
 37136 0000366B 0D0A                    	db	0Dh,0Ah
 37137 0000366D 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 37137 00003676 6E64206F7220706172-
 37137 0000367F 616D6574657273202D-
 37137 00003688 2024               
 37138                                  badsiz_pre:
 37139 0000368A 0D0A                    	db	0Dh,0Ah
 37140 0000368C 536563746F72207369-     	db	'Sector size too large in file $'
 37140 00003695 7A6520746F6F206C61-
 37140 0000369E 72676520696E206669-
 37140 000036A7 6C652024           
 37141                                  badld_pre:
 37142 000036AB 0D0A                    	db	0Dh,0Ah
 37143 000036AD 426164206F72206D69-     	db	'Bad or missing $'
 37143 000036B6 7373696E672024     
 37144                                  badcom:
 37145 000036BD 436F6D6D616E642049-     	db	'Command Interpreter',0
 37145 000036C6 6E7465727072657465-
 37145 000036CF 7200               
 37146                                  badcountry:
 37147 000036D1 0D0A                    	db	0Dh,0Ah
 37148 000036D3 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 37148 000036DC 6F756E74727920636F-
 37148 000036E5 6465206F7220636F64-
 37148 000036EE 6520706167650D0A24 
 37149                                  badcountrycom:
 37150 000036F7 0D0A                    	db	0Dh,0Ah
 37151 000036F9 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 37151 00003702 434F554E5452592063-
 37151 0000370B 6F6D6D616E640D0A24 
 37152                                  insufmemory:
 37153 00003714 0D0A                    	db	0Dh,0Ah
 37154 00003716 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 37154 0000371F 656E74206D656D6F72-
 37154 00003728 7920666F7220434F55-
 37154 00003731 4E5452592E53595320-
 37154 0000373A 66696C650D0A24     
 37155                                  badmem:
 37156 00003741 0D0A                    	db	0Dh,0Ah
 37157 00003743 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 37157 0000374C 74696F6E20746F6F20-
 37157 00003755 6C6172676520666F72-
 37157 0000375E 206D656D6F72790D0A-
 37157 00003767 24                 
 37158                                  badblock:
 37159 00003768 0D0A                    	db	0Dh,0Ah
 37160 0000376A 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 37160 00003773 626C6F636B20646576-
 37160 0000377C 696365730D0A24     
 37161                                  badstack:
 37162 00003783 0D0A                    	db	0Dh,0Ah
 37163 00003785 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 37163 0000378E 5441434B2070617261-
 37163 00003797 6D65746572730D0A24 
 37164                                  	; 18/12/2022
 37165                                  ;badorder:
 37166                                  	;db	0Dh,0Ah
 37167                                  	;db	'Incorrect order in CONFIG.SYS line $'
 37168                                  errorcmd:
 37169 000037A0 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 37169 000037A9 434F4E4649472E5359-
 37169 000037B2 53206C696E652024   
 37170                                  
 37171                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37172                                  %if 0
 37173                                  
 37174                                  OnOff:	db	'ON'
 37175                                  OnOff2:	db	'OFF'
 37176                                  
 37177                                  StartMsg:
 37178                                  	db	'Starting MS-DOS...',0Dh,0Ah
 37179                                  	db	0Ah,0
 37180                                  _$PauseMsg:
 37181                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 37182                                  _$CleanMsg:
 37183                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 37184                                  _$InterMsg:
 37185                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 37186                                  _$MenuHeader:
 37187                                  	db	0Dh,0Ah
 37188                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 37189                                  	db	'  =======================',0Dh,0Ah,'$'
 37190                                  _$MenuPrmpt:
 37191                                  	db	'  Enter a choice: $'
 37192                                  _$StatusLine:
 37193                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 37194                                  	db	'and AUTOEXEC.BAT [ ]$'
 37195                                  _$InterPrmpt:
 37196                                  	db	' [Y,N]?$'
 37197                                  _$YES:	db	'YES$'
 37198                                  _$NO:	db	'NO $'
 37199                                  _$TimeOut:
 37200                                  	db	'Time remaining: $'
 37201                                  badcomprmpt:
 37202                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 37203                                  	db	0Dh,0Ah,'$'
 37204                                  _$AutoPrmpt:
 37205                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 37206                                  
 37207                                  %endif
 37208                                  
 37209                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37210                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 37211                                  
 37212                                  TooManyDrivesMsg:
 37213 000037BA 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 37213 000037C3 4C6F676963616C2064-
 37213 000037CC 726976657320706173-
 37213 000037D5 74205A3A2065786973-
 37213 000037DE 7420616E642077696C-
 37213 000037E7 6C2062652069676E6F-
 37213 000037F0 7265640D0A24       
 37214                                  
 37215                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 37216                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 37217                                  	;db	7 dup(0)
 37218                                  
 37219                                  	;times	7 db 0
 37220                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37221                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 37222                                  	; 09/12/2022
 37223                                  	;times 4 db 0
 37224                                  
 37225                                  ;----------------------------------------------------------------------------
 37226                                  		; 09/12/2022
 37227                                  		;db 0
 37228                                  
 37229                                  number3div	equ ($-SYSINIT$)
 37230                                  number3mod	equ (number3div % 16)
 37231                                  
 37232                                  %if number3mod>0 & number3mod<16
 37233 000037F6 00<rep Ah>              		times (16-number3mod) db 0
 37234                                  %endif
 37235                                  
 37236                                  ;----------------------------------------------------------------------------
 37237                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37238                                  ;----------------------------------------------------------------------------
 37239                                  
 37240                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 37241                                  
 37242                                  ;----------------------------------------------------------------------------
 37243                                  ; 20/04/2019 - Retro DOS v4.0
 37244                                  
 37245                                  ; 09/12/2022
 37246                                  ;
 37247                                  ;bss_start:
 37248                                  ;
 37249                                  ;ABSOLUTE bss_start
 37250                                  ;
 37251                                  ;alignb 16
 37252                                  
 37253                                  SI_end:  ; SI_end equ $
 37254                                  
 37255                                  ;----------------------------------------------------------------------------
 37256                                  
 37257                                  ;sysinitseg	ends
 37258                                  
 37259                                  ; ***************************************************************************
 37260                                  
 37261                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 37262                                  
 37263                                  SYSINITSIZE	equ SI_end - SYSINIT$
 37264                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 37265                                  
 37266                                  ;----------------------------------------------------------------------------
 37267                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 37268                                  ;----------------------------------------------------------------------------
 37269                                  
 37270                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 37271                                  ;----------------------------------------------------------------------------
 37272                                  ;----------------------------------------------------------------------------
 37273                                  
 37274                                  ; ----------------------------------------------------------------------------
 37275                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 37276                                  ; ----------------------------------------------------------------------------
 37277                                  ; 18/03/2019 - Retro DOS v4.0 
 37278                                  ; 11/06/2018 - Retro DOS v3.0 
 37279                                  
 37280                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 37281                                  		;; 28/06/2019 ('msdos6.s') 
 37282                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 37283                                  		
 37284                                  		; 29/12/2022
 37285 00003800 <bin 8EFAh>             		incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 37286                                  		
 37287                                  		;; 28/12/2022 (BugFix)
 37288                                  		;; 22/12/2022
 37289                                  		;; 21/12/2022 ('msdos5.s')
 37290                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 37291                                  	
 37292                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 37293                                  
 37294                                  align 2
 37295                                  
 37296                                  ; 21/12/2022
 37297                                  ;END_OF_KERNEL:
 37298                                  END_OF_KERNEL equ $
 37299                                  
 37300                                  ;=============================================================================
 37301                                  ;	END
 37302                                  ;=============================================================================
 37303                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 37304                                  ; ------------------------------
 37305                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
