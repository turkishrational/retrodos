     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 09/07/2024 - Retro DOS v4.1 (Previous: 07/07/2024)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E95617                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [8808]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [EC06]                  		dw strategy
   940 0000002B [F706]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [EC06]                  		dw strategy
   946 0000003D [1807]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [EC06]                  		dw strategy
   952 0000004F [FC06]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [EC06]                  		dw strategy
   958 00000061 [3007]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [EC06]                  		dw strategy
   967 00000073 [3507]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [EC06]                  		dw strategy
   985 00000083 [1807]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [EC06]                  		dw strategy
   991 00000095 [0307]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [EC06]                  		dw strategy
   997 000000A7 [0A07]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [EC06]                  		dw strategy
  1011 000000C0 [1107]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [EC06]                  		dw strategy
  1017 000000D2 [1E07]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [EC06]                  		dw strategy
  1027 000000E4 [2407]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [EC06]                  		dw strategy
  1033 000000F6 [2A07]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275                                  ; 22/12/2023
  1276                                  %if 0
  1277                                  sm92:		db 3			; .spf
  1278                                  		db 9			; .spt
  1279                                  		db 112	; 70h		; .cdire
  1280                                  		dw 1440	; 2*9*80	; .csec
  1281                                  		db 2			; .spau
  1282                                  		db 2			; .chead
  1283                                  %endif
  1284                                  
  1285 000004DE 00                      keyrd_func:	db 0			
  1286 000004DF 01                      keysts_func:	db 1			
  1287 000004E0 00                      printdev:	db 0			; printer device index
  1288                                  
  1289                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1290 000004E1 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1291                                  
  1292 000004E9 0000                    daycnt:		dw 0			
  1293 000004EB 00                      t_switch:	db 0			; flag for updating daycnt
  1294 000004EC 00                      havecmosclock:	db 0			
  1295 000004ED 13                      base_century:	db 19			
  1296 000004EE 50                      base_year:	db 80			
  1297 000004EF 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1297 000004F8 1F1E1F             
  1298 000004FB [F314]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1299 000004FD 7000                    		dw 70h ; 17/10/2022	
  1300 000004FF [2214]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1301 00000501 7000                    		dw 70h ; 17/10/2022
  1302 00000503 00                      set_id_flag:	db 0			; flag for getbp routine
  1303 00000504 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1304 0000050D 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1305 00000516 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1305 0000051F 202000             
  1306                                  
  1307                                  ; 22/12/2023
  1308                                  saved_word:
  1309 00000522 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1310 00000524 0000                    start_sec_h:	dw 0			; starting sector number high word
  1311                                  ; 22/12/2023
  1312                                  ;saved_word:	dw 0			; tempory saving place for a word
  1313 00000526 0000                    multrk_flag:	dw 0			
  1314 00000528 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1315 00000529 0000                    vretry_cnt:	dw 0			
  1316 0000052B 0000                    soft_ecc_cnt:	dw 0			
  1317 0000052D 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1318 0000052E 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1319                                  
  1320                                  ; variables for msdioctl.asm module
  1321                                  
  1322                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1323                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1324                                  ;	n	bytes per sector
  1325                                  ;      ---	----------------
  1326                                  ;	0	      128
  1327                                  ;	1	      256
  1328                                  ;	2	      512
  1329                                  ;	3	     1024
  1330                                  
  1331                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1332                                  ;					; we support (was 40 in dos 3.2)
  1333                                  
  1334 00000530 2400                    sectorspertrack: dw 36			
  1335 00000532 00000102                tracktable:	db 0, 0, 1, 2		
  1336 00000536 00000202                		db 0, 0, 2, 2
  1337 0000053A 00000302                		db 0, 0, 3, 2
  1338 0000053E 00000402                		db 0, 0, 4, 2
  1339 00000542 00000502                		db 0, 0, 5, 2
  1340 00000546 00000602                		db 0, 0, 6, 2
  1341 0000054A 00000702                		db 0, 0, 7, 2
  1342 0000054E 00000802                		db 0, 0, 8, 2
  1343 00000552 00000902                		db 0, 0, 9, 2
  1344 00000556 00000A02                		db 0, 0, 10, 2
  1345 0000055A 00000B02                		db 0, 0, 11, 2
  1346 0000055E 00000C02                		db 0, 0, 12, 2
  1347 00000562 00000D02                		db 0, 0, 13, 2
  1348 00000566 00000E02                		db 0, 0, 14, 2
  1349 0000056A 00000F02                		db 0, 0, 15, 2
  1350 0000056E 00001002                		db 0, 0, 16, 2
  1351 00000572 00001102                		db 0, 0, 17, 2
  1352 00000576 00001202                		db 0, 0, 18, 2
  1353 0000057A 00001302                		db 0, 0, 19, 2
  1354 0000057E 00001402                		db 0, 0, 20, 2
  1355 00000582 00001502                		db 0, 0, 21, 2
  1356 00000586 00001602                		db 0, 0, 22, 2
  1357 0000058A 00001702                		db 0, 0, 23, 2
  1358 0000058E 00001802                		db 0, 0, 24, 2
  1359 00000592 00001902                		db 0, 0, 25, 2
  1360 00000596 00001A02                		db 0, 0, 26, 2
  1361 0000059A 00001B02                		db 0, 0, 27, 2
  1362 0000059E 00001C02                		db 0, 0, 28, 2
  1363 000005A2 00001D02                		db 0, 0, 29, 2
  1364 000005A6 00001E02                		db 0, 0, 30, 2
  1365 000005AA 00001F02                		db 0, 0, 31, 2
  1366 000005AE 00002002                		db 0, 0, 32, 2
  1367 000005B2 00002102                		db 0, 0, 33, 2
  1368 000005B6 00002202                		db 0, 0, 34, 2
  1369 000005BA 00002302                		db 0, 0, 35, 2
  1370 000005BE 00002402                		db 0, 0, 36, 2
  1371 000005C2 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1372                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1373                                  					; times	((4*63)	- 144) db 0
  1374                                  
  1375                                  ;-----------------------------------------------------------------------------
  1376                                  
  1377                                  ; this is a real ugly place to put this
  1378                                  ; it should really go in the bds
  1379                                  
  1380 0000062E 00                      mediatype:	db 0			
  1381 0000062F 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1382                                  					; type for format call
  1383 00000630 00                      had_format_error: db 0			; 1 if the previous format operation
  1384                                  					; failed.
  1385                                  
  1386                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1387                                  ; the one passed by "new roms" before we perform a format operation. the old
  1388                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1389                                  ; this table does not contain the previously saved dpt.
  1390                                  		
  1391 00000631 FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1392 00000635 FF                      model_byte:	db 0FFh			; model	byte set at init time
  1393 00000636 00                      secondary_model_byte: db 0
  1394                                  		
  1395 00000637 00                      int19sem:	db 0			; indicate that all int 19
  1396                                  					; initialization is complete
  1397                                  		
  1398                                  ;; we assume the following remain contiguous and their order doesn't change
  1399                                  ;i19_lst:
  1400                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1401                                  ;	public	int19old&aa
  1402                                  ;		db	aa&h	; store the number as a byte
  1403                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1404                                  ;	endm
  1405                                  
  1406                                  ; 21/10/2022
  1407                                  
  1408 00000638 02                      i19_lst:	db 2			
  1409                                  					; Int19old&aa
  1410 00000639 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1411 0000063D 08                      		db 8
  1412 0000063E FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1413 00000642 09                      		db 9
  1414 00000643 FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1415 00000647 0A                      		db 0Ah
  1416 00000648 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1417 0000064C 0B                      		db 0Bh
  1418 0000064D FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1419 00000651 0C                      		db 0Ch
  1420 00000652 FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1421 00000656 0D                      		db 0Dh
  1422 00000657 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1423 0000065B 0E                      		db 0Eh
  1424 0000065C FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1425 00000660 70                      		db 70h
  1426 00000661 FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1427 00000665 72                      		db 72h
  1428 00000666 FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1429 0000066A 73                      		db 73h
  1430 0000066B FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1431 0000066F 74                      		db 74h
  1432 00000670 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1433 00000674 76                      		db 76h
  1434 00000675 FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1435 00000679 77                      		db 77h
  1436 0000067A FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1437                                  
  1438                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1439                                  
  1440                                  ;-----------------------------------------------------------------------------
  1441                                  
  1442 0000067E [5403]                  dskdrvs:	dw fdrive1	
  1443 00000680 [B803]                  		dw fdrive2
  1444 00000682 [1C04]                  		dw fdrive3
  1445 00000684 [8004]                  		dw fdrive4
  1446                                  
  1447                                  ;M011 -- made all hard drive stuff variable
  1448                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1449 00000686 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1450                                  
  1451                                  ;-----------------------------------------------------------------------------
  1452                                  
  1453                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1454                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1455                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1456                                  
  1457                                  ;variables for dynamic relocatable modules
  1458                                  ;these should be stay resident.
  1459                                  
  1460 000006B2 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1461                                  					; for p12 machine
  1462                                  
  1463                                  ; data structures for real-time date and time
  1464                                  			
  1465 000006B6 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1466                                  
  1467 000006BA 0000                    month_table:	dw 0			; january
  1468 000006BC 1F00                    		dw 31			; february
  1469 000006BE 3B00                    		dw 59
  1470 000006C0 5A00                    		dw 90
  1471 000006C2 7800                    		dw 120
  1472 000006C4 9700                    		dw 151
  1473 000006C6 B500                    		dw 181
  1474 000006C8 D400                    		dw 212
  1475 000006CA F300                    		dw 243
  1476 000006CC 1101                    		dw 273
  1477 000006CE 3001                    		dw 304
  1478 000006D0 4E01                    		dw 334			; december
  1479                                  
  1480 000006D2 0000                    daycnt2:	dw 0			
  1481 000006D4 00                      feb29:		db 0			; february 29 in a leap	year flag
  1482                                  
  1483                                  ;-----------------------------------------------------------------------------
  1484                                  ;
  1485                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1486                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1487                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1488                                  
  1489                                  ; ----------------------------------------------------------------------------
  1490                                  
  1491                                  ;************************************************************************
  1492                                  ;*									*
  1493                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1494                                  ;*	  are plugged in by seg_reinit.					*
  1495                                  ;*									*
  1496                                  ;************************************************************************
  1497                                  
  1498                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1499                                  ; BIOSCODE_SEGMENT equ 2C7h
  1500                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1501                                  
  1502                                  ; 01/10/2022 - Erdogan Tan
  1503                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1504                                  ;  addresses, they will be changed to table labels later)
  1505                                  
  1506                                  ; 09/12/2022
  1507                                  %if 0
  1508                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1509                                  					; at 2C7h:43h =	70h:25B3h
  1510                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1511                                  					; at 2C7h:396h = 70h:2906h
  1512                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1513                                  					; at 2C7h:1302h	= 70h:3872h
  1514                                  i13x:		dw 154Bh, 2C7h		; i13z
  1515                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1516                                  %endif
  1517                                  
  1518                                  ; 09/12/2022
  1519 000006D5 [4300]9902              cdev:		dw chardev_entry, IOSYSCODESEG
  1520 000006D9 [8B03]9902              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1521 000006DD [7912]9902              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1522 000006E1 [A414]9902              i13x:		dw i13z, IOSYSCODESEG
  1523                                  
  1524                                  end_BC_entries:	; 15/10/2022
  1525                                  
  1526                                  ;************************************************************************
  1527                                  ;*									*
  1528                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1529                                  ;*									*
  1530                                  ;************************************************************************
  1531                                  
  1532                                  cbreak:					
  1533 000006E5 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1534                                  					; indicate break key set
  1535                                  intret:					
  1536 000006EB CF                      		iret
  1537                                  
  1538                                  ; =============== S U B	R O U T	I N E ========================================
  1539                                  
  1540                                  
  1541                                  ;************************************************************************
  1542                                  ;*									*
  1543                                  ;*	strategy - store es:bx (device driver request packet)		*
  1544                                  ;*		     away at [ptrsav] for next driver function call	*
  1545                                  ;*									*
  1546                                  ;************************************************************************
  1547                                  
  1548                                  strategy:	; proc far		
  1549 000006EC 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1550                                  					; away at [ptrsav] for next driver function call
  1551 000006F1 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1552 000006F6 CB                      		retf
  1553                                  
  1554                                  ; ----------------------------------------------------------------------------
  1555                                  
  1556                                  ;************************************************************************
  1557                                  ;*									*
  1558                                  ;*	device driver entry points. these are the initial		*
  1559                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1560                                  ;*	  in the case of our resident drivers, they'll just		*
  1561                                  ;*	  stick a fake return address on the stack which		*
  1562                                  ;*	  points to dispatch tables and possibly some unit		*
  1563                                  ;*	  numbers, and then call through a common entry point		*
  1564                                  ;*	  which can take care of a20 switching				*
  1565                                  ;*									*
  1566                                  ;************************************************************************
  1567                                  
  1568                                  ; 01/10/2022 - Erdogan Tan
  1569                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1570                                  ;  addresses, they will be changed to table labels later)
  1571                                  
  1572                                  ; 09/12/2022
  1573                                  
  1574                                  con_entry:				
  1575 000006F7 E84000                  		call	cdev_entry
  1576                                  ; ----------------------------------------------------------------------------
  1577                                  		;dw 0E4h		; con_table
  1578 000006FA [E300]                  		dw con_table	
  1579                                  					; 2C7h:0E4h = 70h:2654h
  1580                                  ; ----------------------------------------------------------------------------
  1581                                  
  1582                                  prn0_entry:				
  1583 000006FC E83B00                  		call	cdev_entry
  1584                                  ; ----------------------------------------------------------------------------
  1585                                  		;dw 0FBh		; prn_table
  1586 000006FF [FA00]                  		dw prn_table
  1587                                  					; 2C7h:0FBh = 70h:266Bh
  1588 00000701 0000                    		db 0, 0
  1589                                  ; ----------------------------------------------------------------------------
  1590                                  
  1591                                  prn1_entry:				
  1592 00000703 E83400                  		call	cdev_entry
  1593                                  ; ----------------------------------------------------------------------------
  1594                                  		;dw 0FBh		; prn_table
  1595 00000706 [FA00]                  		dw prn_table
  1596                                  					; 2C7h:0FBh = 70h:266Bh
  1597 00000708 0001                    		db 0, 1
  1598                                  ; ----------------------------------------------------------------------------
  1599                                  
  1600                                  prn2_entry:				
  1601 0000070A E82D00                  		call	cdev_entry
  1602                                  ; ----------------------------------------------------------------------------
  1603                                  		;dw 0FBh		; prn_table
  1604 0000070D [FA00]                  		dw prn_table
  1605                                  					; 2C7h:0FBh = 70h:266Bh
  1606 0000070F 0102                    		db 1, 2
  1607                                  ; ----------------------------------------------------------------------------
  1608                                  
  1609                                  prn3_entry:				
  1610 00000711 E82600                  		call	cdev_entry
  1611                                  ; ----------------------------------------------------------------------------
  1612                                  		;dw 0FBh		; prn_table
  1613 00000714 [FA00]                  		dw prn_table
  1614                                  					; 2C7h:0FBh = 70h:266Bh
  1615 00000716 0203                    		db 2, 3
  1616                                  ; ----------------------------------------------------------------------------
  1617                                  
  1618                                  aux0_entry:				
  1619 00000718 E81F00                  		call	cdev_entry
  1620                                  ; ----------------------------------------------------------------------------
  1621                                  		;dw 130h		; aux_table
  1622 0000071B [2F01]                  		dw aux_table
  1623                                  					; 2C7h:130h = 70h:26A0h
  1624 0000071D 00                      		db 0
  1625                                  ; ----------------------------------------------------------------------------
  1626                                  
  1627                                  aux1_entry:				
  1628 0000071E E81900                  		call	cdev_entry
  1629                                  ; ----------------------------------------------------------------------------
  1630                                  		;dw 130h		; aux_table
  1631 00000721 [2F01]                  		dw aux_table
  1632                                  					; 2C7h:130h = 70h:26A0h
  1633 00000723 01                      		db 1
  1634                                  ; ----------------------------------------------------------------------------
  1635                                  
  1636                                  aux2_entry:				
  1637 00000724 E81300                  		call	cdev_entry
  1638                                  ; ----------------------------------------------------------------------------
  1639                                  		;dw 130h		; aux_table
  1640 00000727 [2F01]                  		dw aux_table
  1641                                  					; 2C7h:130h = 70h:26A0h
  1642 00000729 02                      		db 2
  1643                                  ; ----------------------------------------------------------------------------
  1644                                  
  1645                                  aux3_entry:				
  1646 0000072A E80D00                  		call	cdev_entry
  1647                                  ; ----------------------------------------------------------------------------
  1648                                  		;dw 130h		; aux_table
  1649 0000072D [2F01]                  		dw aux_table
  1650                                  					; 2C7h:130h = 70h:26A0h
  1651 0000072F 03                      		db 3
  1652                                  ; ----------------------------------------------------------------------------
  1653                                  
  1654                                  tim_entry:				
  1655 00000730 E80700                  		call	cdev_entry
  1656                                  ; ----------------------------------------------------------------------------
  1657                                  		;dw 147h		; tim_table
  1658 00000733 [4601]                  		dw tim_table
  1659                                  					; 2C7h:147h = 70h:26B7h
  1660                                  ; ----------------------------------------------------------------------------
  1661                                  
  1662                                  ; 15/10/2022
  1663                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1664                                  ; 09/12/2022
  1665                                  DSKTBL equ dsktbl
  1666                                  
  1667                                  dsk_entry:				
  1668 00000735 E80200                  		call	cdev_entry
  1669                                  ; ----------------------------------------------------------------------------
  1670                                  		;dw 4A2h		; dsktbl
  1671 00000738 [9104]                  		dw DSKTBL		; 09/12/2022
  1672                                  					; 2C7h:4A2h = 70h:2A12h
  1673                                  
  1674                                  ; =============== S U B	R O U T	I N E ========================================
  1675                                  
  1676                                  ;************************************************************************
  1677                                  ;*									*
  1678                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1679                                  ;*	This code assumes that if Segment of Device request packet is	*
  1680                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1681                                  ;*	A20 is already on.						*
  1682                                  ;*									*
  1683                                  ;************************************************************************
  1684                                  
  1685                                  cdev_entry:	; proc near		
  1686 0000073A 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1687 00000740 740D                    		jz	short ce_enter_codeseg
  1688                                  				; optimized for DOS in HMA
  1689 00000742 50                      		push	ax
  1690 00000743 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1691 00000747 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1692 0000074C 58                      		pop	ax
  1693 0000074D 7505                    		jnz	short not_from_dos
  1694                                  				; jump is coded this way to fall thru
  1695                                  				; in 99.99% of the cases
  1696                                  ce_enter_codeseg:
  1697 0000074F 2EFF2E[D506]            		jmp	far [cs:cdev]			
  1698                                  		;jmp	dword ptr cs:cdev
  1699                                  ;-----------------------------------------------------------------------------
  1700                                  
  1701                                  not_from_dos:				
  1702 00000754 E86200                  		call	EnsureA20On
  1703 00000757 EBF6                    		jmp	short ce_enter_codeseg
  1704                                  
  1705                                  ;************************************************************************
  1706                                  ;*									*
  1707                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1708                                  ;*	   character in al on the display using int 10h ttywrite	*
  1709                                  ;*									*
  1710                                  ;************************************************************************
  1711                                  
  1712                                  outchr:					
  1713 00000759 50                      		push	ax		; int 29h handler
  1714 0000075A 56                      		push	si
  1715 0000075B 57                      		push	di
  1716 0000075C 55                      		push	bp
  1717 0000075D 53                      		push	bx
  1718 0000075E B40E                    		mov	ah, 0Eh
  1719 00000760 BB0700                  		mov	bx, 7
  1720 00000763 CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1721                                  					; AL = character, BH = display page (alpha modes)
  1722                                  					; BL = foreground color	(graphics modes)
  1723 00000765 5B                      		pop	bx
  1724 00000766 5D                      		pop	bp
  1725 00000767 5F                      		pop	di
  1726 00000768 5E                      		pop	si
  1727 00000769 58                      		pop	ax
  1728 0000076A CF                      		iret
  1729                                  ;-----------------------------------------------------------------------------
  1730                                  
  1731                                  ;************************************************************************
  1732                                  ;*									*
  1733                                  ;*	block13 - our int13 hooker					*
  1734                                  ;*									*
  1735                                  ;************************************************************************
  1736                                  
  1737                                  block13:				
  1738 0000076B 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1739 00000771 7408                    		jz	short skipa20
  1740 00000773 E85400                  		call	IsA20Off	; A20 Off?
  1741 00000776 7503                    		jnz	short skipa20
  1742 00000778 E84300                  		call	EnableA20	; assure a20 enabled
  1743                                  
  1744                                  skipa20:				
  1745 0000077B 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1746 00000780 9C                      		pushf			; fake interrupt
  1747 00000781 2EFF1E[E106]            		call	far [cs:i13x]
  1748                                  		;call	dword ptr cs:i13x
  1749                                  					; call through Bios_Code entry table
  1750 00000786 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1751 0000078B CA0200                  		retf	2
  1752                                  
  1753                                  ; =============== S U B	R O U T	I N E =======================================
  1754                                  
  1755                                  ; the int13 hook calls back here to call-through to the ROM
  1756                                  ; this is necessary because some people have extended their
  1757                                  ; ROM BIOSs to use ds as a parameter/result register and
  1758                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1759                                  
  1760                                  call_orig13:	; proc far		
  1761 0000078E 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1762 00000792 9C                      		pushf			; simulate an int13
  1763 00000793 2EFF1E[B400]            		call	far [cs:Orig13]
  1764                                  		;call	cs:Orig13
  1765 00000798 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1766 0000079D 0E                      		push	cs
  1767 0000079E 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1768                                  
  1769 0000079F 9C                      		pushf
  1770                                  		; 10/12/2022
  1771                                  		; ds = cs
  1772 000007A0 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1773                                  		;cmp	byte [cs:inHMA], 0
  1774 000007A5 7408                    		jz	short corig13_popf_retf
  1775 000007A7 E82000                  		call	IsA20Off
  1776 000007AA 7503                    		jnz	short corig13_popf_retf
  1777 000007AC E80F00                  		call	EnableA20
  1778                                  corig13_popf_retf:			
  1779 000007AF 9D                      		popf
  1780 000007B0 CB                      		retf
  1781                                  
  1782                                  ;-----------------------------------------------------------------------------
  1783                                  
  1784                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1785                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1786                                  
  1787 000007B1 9000FFFF                HiMem:		dd 0FFFF0090h		
  1788 000007B5 80000000                LoMem:		dd 80h
  1789                                  
  1790                                  ; ----------------------------------------------------------------------------			
  1791                                  
  1792                                  ; =============== S U B	R O U T	I N E ========================================
  1793                                  
  1794                                  
  1795                                  ;************************************************************************
  1796                                  ;*									*
  1797                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1798                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1799                                  ;*									*
  1800                                  ;************************************************************************
  1801                                  
  1802                                  EnsureA20On:	; proc near		
  1803 000007B9 E80E00                  		call	IsA20Off
  1804                                  		;jz	short EnableA20
  1805                                  		;retn
  1806                                  		; 18/12/2022
  1807 000007BC 750B                    		jnz	short A20On_retn	
  1808                                  
  1809                                  ; =============== S U B	R O U T	I N E ========================================
  1810                                  
  1811                                  
  1812                                  EnableA20:	; proc near		
  1813 000007BE 50                      		push	ax
  1814 000007BF 53                      		push	bx
  1815 000007C0 B405                    		mov	ah, 5	 ; local enable a20
  1816                                  		;call	cs:xms
  1817 000007C2 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1818 000007C7 5B                      		pop	bx
  1819 000007C8 58                      		pop	ax
  1820                                  A20On_retn:	; 18/12/2022	
  1821 000007C9 C3                      		retn
  1822                                  
  1823                                  ; =============== S U B	R O U T	I N E ========================================
  1824                                  
  1825                                  
  1826                                  IsA20Off:	; proc near		
  1827 000007CA 1E                      		push	ds
  1828 000007CB 06                      		push	es
  1829 000007CC 51                      		push	cx
  1830 000007CD 56                      		push	si
  1831 000007CE 57                      		push	di
  1832 000007CF 2EC536[B107]            		lds	si, [cs:HiMem]
  1833 000007D4 2EC43E[B507]            		les	di, [cs:LoMem]
  1834 000007D9 B90800                  		mov	cx, 8
  1835 000007DC F3A7                    		repe cmpsw
  1836 000007DE 5F                      		pop	di
  1837 000007DF 5E                      		pop	si
  1838 000007E0 59                      		pop	cx
  1839 000007E1 07                      		pop	es
  1840 000007E2 1F                      		pop	ds
  1841 000007E3 C3                      		retn
  1842                                  
  1843                                  ; ----------------------------------------------------------------------------
  1844                                  
  1845                                  DisableA20:
  1846 000007E4 50                      		push	ax
  1847 000007E5 53                      		push	bx
  1848 000007E6 B406                    		mov	ah, 6		; local disable A20
  1849 000007E8 2EFF1E[0E00]            		call	far [cs:xms]
  1850                                  		;call	cs:xms
  1851 000007ED 5B                      		pop	bx
  1852 000007EE 58                      		pop	ax
  1853 000007EF C3                      		retn
  1854                                  
  1855                                  ; ----------------------------------------------------------------------------
  1856                                  
  1857                                  ;************************************************************************
  1858                                  ;*									*
  1859                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1860                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1861                                  ;*									*
  1862                                  ;************************************************************************
  1863                                  
  1864                                  int19:					
  1865 000007F0 0E                      		push	cs
  1866 000007F1 1F                      		pop	ds
  1867 000007F2 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1868 000007F6 B90500                  		mov	cx, 5		; NUMROMVECTORS
  1869                                  		;mov	si, offset RomVectors
  1870 000007F9 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1871                                  next_int:				
  1872 000007FC AC                      		lodsb			; get int number
  1873 000007FD 98                      		cbw			; assume < 128
  1874 000007FE D1E0                    		shl	ax, 1
  1875 00000800 D1E0                    		shl	ax, 1		; int *	4
  1876 00000802 89C7                    		mov	di, ax
  1877 00000804 AD                      		lodsw
  1878 00000805 AB                      		stosw
  1879 00000806 AD                      		lodsw
  1880 00000807 AB                      		stosw			; install the saved vector
  1881 00000808 E2F2                    		loop	next_int
  1882 0000080A 803E[3706]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1883 0000080F 7422                    		jz	short doint19
  1884 00000811 BE[3806]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1885                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1886 00000814 B90E00                  		mov	cx, 14		; num_i19
  1887                                  
  1888                                  i19_restore_loop:			
  1889 00000817 AC                      		lodsb			; get interrupt	number
  1890 00000818 98                      		cbw			; assume < 128
  1891 00000819 89C7                    		mov	di, ax
  1892 0000081B AD                      		lodsw			; get original vector offset
  1893 0000081C 89C3                    		mov	bx, ax		; save it
  1894 0000081E AD                      		lodsw
  1895 0000081F 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1896 00000822 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1897 00000824 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1898 00000827 7408                    		jz	short i19_restor_1
  1899 00000829 01FF                    		add	di, di
  1900 0000082B 01FF                    		add	di, di
  1901 0000082D 93                      		xchg	ax, bx
  1902 0000082E AB                      		stosw
  1903 0000082F 93                      		xchg	ax, bx
  1904 00000830 AB                      		stosw			; put the vector back
  1905                                  
  1906                                  i19_restor_1:				
  1907 00000831 E2E4                    		loop	i19_restore_loop
  1908                                  
  1909                                  doint19:				
  1910 00000833 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1911 00000838 7403                    		jz	short SkipVDisk
  1912 0000083A E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1913                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1914                                  					; the memory above 1MB during a	warm boot.
  1915                                  SkipVDisk:				
  1916 0000083D CD19                    		int	19h		; DISK BOOT
  1917                                  					; causes reboot	of disk	system
  1918                                  
  1919                                  ; =============== S U B	R O U T	I N E ========================================
  1920                                  
  1921                                  ;-----------------------------------------------------------------------------
  1922                                  ;
  1923                                  ; procedure : int15
  1924                                  ;
  1925                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1926                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1927                                  ;		is running high, it Erases the VDISK header
  1928                                  ;		present at 1MB boundary
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------
  1931                                  
  1932                                  ; 16/10/2022
  1933                                  ;DELKEY		equ	53h
  1934                                  ;ROMDATASEG	equ	40h
  1935                                  KBFLAG		equ	17h
  1936                                  ;CTRLSTATE	equ	04h
  1937                                  ;ALTSTATE	equ	08h
  1938                                  
  1939                                  Int15:		; proc near		
  1940                                  		;cmp	ax, 4F00h+DELKEY
  1941 0000083F 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1942 00000842 7405                    		jz	short int15_1
  1943 00000844 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1944                                  		;jmp	cs:Old15
  1945                                  ; ----------------------------------------------------------------------------
  1946                                  
  1947                                  int15_1:				
  1948 00000849 1E                      		push	ds
  1949 0000084A 50                      		push	ax
  1950 0000084B B84000                  		mov	ax, 40h		; ROMDATASEG
  1951 0000084E 8ED8                    		mov	ds, ax
  1952                                  		;mov	al, ds:17h	; [KBFLAG]
  1953                                  		; 16/10/2022
  1954 00000850 A01700                  		mov	al, [KBFLAG]
  1955 00000853 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1956 00000855 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1957 00000857 750C                    		jnz	short int15_2
  1958 00000859 0E                      		push	cs
  1959 0000085A 1F                      		pop	ds
  1960 0000085B 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1961 00000860 7403                    		jz	short int15_2
  1962 00000862 E80800                  		call	EraseVDiskHead
  1963                                  int15_2:				
  1964 00000865 58                      		pop	ax
  1965 00000866 1F                      		pop	ds
  1966 00000867 F9                      		stc
  1967 00000868 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1968                                  		;jmp	cs:Old15
  1969                                  
  1970                                  ; =============== S U B	R O U T	I N E ========================================
  1971                                  
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  ;
  1974                                  ; procedure : EraseVDiskHead
  1975                                  ;
  1976                                  ;		Erases the VDisk Header present in the 1MB boundary
  1977                                  ;
  1978                                  ;-----------------------------------------------------------------------------
  1979                                  
  1980                                  EraseVDiskHead:	; proc near		
  1981 0000086D 50                      		push	ax
  1982 0000086E 51                      		push	cx
  1983 0000086F 57                      		push	di
  1984 00000870 06                      		push	es
  1985 00000871 E845FF                  		call	EnsureA20On
  1986 00000874 B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1987 00000877 8EC0                    		mov	es, ax
  1988 00000879 BF1000                  		mov	di, 10h		; point	to VDISK header
  1989 0000087C B91000                  		mov	cx, 10h		; size of vdisk	header
  1990 0000087F 31C0                    		xor	ax, ax
  1991 00000881 F3AB                    		rep stosw		; clear	it
  1992 00000883 07                      		pop	es
  1993 00000884 5F                      		pop	di
  1994 00000885 59                      		pop	cx
  1995 00000886 58                      		pop	ax
  1996 00000887 C3                      		retn
  1997                                  
  1998                                  ; ----------------------------------------------------------------------------
  1999                                  
  2000                                  ;************************************************************************
  2001                                  ;*									*
  2002                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  2003                                  ;*	  it returns through one of the three functions that follow.	*
  2004                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  2005                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2006                                  ;*									*
  2007                                  ;************************************************************************
  2008                                  
  2009                                  int_2f:		
  2010 00000888 2EFF2E[DD06]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2011                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2012                                  
  2013                                  ; ----------------------------------------------------------------------------
  2014                                  
  2015                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2016                                  ; note:  is it really necessary to transiton out and then back in?
  2017                                  ;	 It's not as if this is a really speed critical function.
  2018                                  ;	 might as well do whatever's most compact.
  2019                                  
  2020                                  i2f_dskentry:				
  2021 0000088D E9A5FE                  		jmp	dsk_entry
  2022                                  
  2023                                  ; ----------------------------------------------------------------------------
  2024                                  
  2025                                  ;************************************************************************
  2026                                  ;*									*
  2027                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2028                                  ;*		is done. presently does nothing. affects no		*
  2029                                  ;*		registers!						*
  2030                                  ;*									*
  2031                                  ;************************************************************************
  2032                                  
  2033                                  ; 09/12/2022
  2034                                  ; re_init_:
  2035                                  re_init:				; called back by sysinit after
  2036 00000890 CB                      		retf			; a bunch of stuff is done.
  2037                                  					; presently does nothing
  2038                                  
  2039                                  ; ----------------------------------------------------------------------------
  2040                                  
  2041                                  ;SR; WIN386 support
  2042                                  
  2043                                  ; WIN386 instance data structure
  2044                                  ;
  2045                                  ; Here is a Win386 startup info structure which we set up and to which
  2046                                  ; we return a pointer when Win386 initializes.
  2047                                  
  2048 00000891 0300                    Win386_SI:	db 3, 0			; SI_Version
  2049                                  					; Startup Info for Win386
  2050 00000893 00000000                SI_Next:	dd 0			; pointer to next info structure
  2051 00000897 00000000                		dd 0			; a field we don't need
  2052 0000089B 00000000                		dd 0			; another field	we don't need
  2053 0000089F [A308]                  SI_Instance:	dw Instance_Table
  2054 000008A1 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2055                                  
  2056                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2057                                  ; areas. Note that the address and size of the hardware stacks must
  2058                                  ; be calculated and inserted at boot time.
  2059                                  
  2060 000008A3 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2061 000008A7 0200                    		dw 2			; ... 2	bytes
  2062 000008A9 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2063 000008AD 1400                    		dw 14h			; ... 14H bytes
  2064 000008AF [0C00]                  		dw altah		; a con	device buffer...
  2065 000008B1 7000                    		dw 70h			; Bios_Data segment
  2066 000008B3 0100                    		dw 1			; ... 1 byte
  2067                                  
  2068                                  NextStack:
  2069                                  
  2070                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2071                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2072                                  ;	That's just fine as long as these are the last items
  2073                                  ;	in the instance list since the first item is initialized
  2074                                  ;	to 0000 at load time.
  2075                                  
  2076 000008B5 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2077 000008B9 0200                    		dw 2			; ... 2 bytes
  2078 000008BB 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2079 000008BF 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2080 000008C1 00000000                		dd 0			; terminate the	instance table
  2081                                  
  2082                                  					;SR;
  2083 000008C5 00                      IsWin386:	db 0			; Flag to indicate whether
  2084                                  					; Win386 is running or not
  2085                                  ;-----------------------------------------------------------------------------
  2086                                  
  2087                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2088                                  ;when we call it including checking of A20. The code being only about 
  2089                                  ;30 bytes, we might as well put it in BIOS_DATA
  2090                                  
  2091                                  V86_Crit_SetFocus:			
  2092 000008C6 57                      		push	di
  2093 000008C7 06                      		push	es
  2094 000008C8 53                      		push	bx
  2095 000008C9 50                      		push	ax
  2096 000008CA 31FF                    		xor	di, di
  2097 000008CC 8EC7                    		mov	es, di
  2098 000008CE BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2099 000008D1 B88416                  		mov	ax, 1684h	; Get API entry	point
  2100 000008D4 CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2101                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2102                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2103 000008D6 8CC0                    		mov	ax, es
  2104 000008D8 09F8                    		or	ax, di
  2105 000008DA 740A                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2106                                  					; Set up stack frame to	simulate a call.
  2107 000008DC 0E                      		push	cs
  2108                                  		;;mov	ax,offset Skip
  2109                                  		;mov	ax,Skip
  2110                                  		;push	ax
  2111                                  		; 08/10/2023
  2112 000008DD 68[E608]                		push	Skip
  2113 000008E0 06                      		push	es
  2114 000008E1 57                      		push	di		; API far call address
  2115 000008E2 B80100                  		mov	ax, 1		; SetFocus function number
  2116 000008E5 CB                      		retf			; do the call
  2117                                  ;-----------------------------------------------------------------------------
  2118                                  
  2119                                  Skip:					
  2120 000008E6 58                      		pop	ax
  2121 000008E7 5B                      		pop	bx
  2122 000008E8 07                      		pop	es
  2123 000008E9 5F                      		pop	di
  2124 000008EA CB                      		retf
  2125                                  
  2126                                  ;End WIN386 support
  2127                                  
  2128                                  ; ----------------------------------------------------------------------------
  2129                                  
  2130                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2131                                  
  2132                                  ; 09/12/2022
  2133                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2134                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2135                                  ; (followings are in sysinit segment)
  2136                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2137                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2138                                  ;DEVICELIST	equ 273h
  2139                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2140                                  ;MEMORYSIZE	equ 292h	
  2141                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2142                                  ;DEFAULTDRIVE	equ 296h
  2143                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2144                                  ;;currentdoslocation equ 271h
  2145                                  ;CURRENTDOSLOCATION equ 271h
  2146                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2147                                  ;SYSINITSTART	equ 267h
  2148                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2149                                  ; 18/10/2022
  2150                                  ;toomanydrivesflag equ 3FFh 
  2151                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2152                                  
  2153                                  ; ----------------------------------------------------------------------------
  2154                                  
  2155 000008EB FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2156                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2157                                  					; (procedure in	SYSINIT	segment)
  2158                                  ; 17/10/2022
  2159 000008ED [0E0A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2160 000008EF 3304                    		dw SYSINITSEG	
  2161                                  
  2162                                  ;SR;
  2163                                  ; A communication block has been setup between the DOS and the BIOS. All
  2164                                  ;the data starting from SysinitPresent will be part of the data block. 
  2165                                  ;Right now, this is the only data being communicated. It can be expanded 
  2166                                  ;later to add more stuff
  2167                                  
  2168 000008F1 00                      SysinitPresent:	db 0			
  2169 000008F2 0000                    endfloppy:	db 0, 0
  2170                                  
  2171                                  ; ----------------------------------------------------------------------------			
  2172                                  
  2173                                  ; Bios_Data ends
  2174                                  	
  2175                                  ; Possibly disposable BIOS data
  2176                                  ; This data follows the	regular	BIOS data,
  2177                                  ; and is part of the same group.
  2178                                  
  2179 000008F4 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2179 000008FD 202000             
  2180                                  					; null volume id
  2181 00000900 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2181 00000909 202000             
  2182                                  					; vid scratch buffer
  2183 0000090C 80                      harddrv:	db 80h			
  2184                                  
  2185                                  end96tpi:
  2186                                  
  2187                                  ;;*********************************************************************
  2188                                  ;;memory allocation for bdss
  2189                                  ;;*********************************************************************
  2190                                  ;
  2191                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2192                                  ;
  2193                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2194                                  ;
  2195                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2196                                  
  2197 0000090D FFFF                    bdss:		dw 0FFFFh		
  2198 0000090F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000918 0210000000F8       
  2199 0000091E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000927 000000000000000003 
  2200 00000930 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 00000939 00000000000000     
  2201 00000940 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 00000949 000000000000000000 
  2202 00000952 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 0000095B 4E414D45           
  2203 0000095F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 00000968 46415431           
  2204 0000096C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 00000971 FFFF                    		dw 0FFFFh
  2206 00000973 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 0000097C 0210000000F8       
  2207 00000982 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 0000098B 000000000000000003 
  2208 00000994 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 0000099D 00000000000000     
  2209 000009A4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 000009AD 000000000000000000 
  2210 000009B6 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 000009BF 4E414D45           
  2211 000009C3 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 000009CC 46415431           
  2212 000009D0 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 000009D5 FFFF                    		dw 0FFFFh
  2214 000009D7 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 000009E0 0210000000F8       
  2215 000009E6 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 000009EF 000000000000000003 
  2216 000009F8 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A01 00000000000000     
  2217 00000A08 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A11 000000000000000000 
  2218 00000A1A 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A23 4E414D45           
  2219 00000A27 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A30 46415431           
  2220 00000A34 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000A39 FFFF                    		dw 0FFFFh
  2222 00000A3B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000A44 0210000000F8       
  2223 00000A4A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000A53 000000000000000003 
  2224 00000A5C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000A65 00000000000000     
  2225 00000A6C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000A75 000000000000000000 
  2226 00000A7E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000A87 4E414D45           
  2227 00000A8B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000A94 46415431           
  2228 00000A98 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000A9D FFFF                    		dw 0FFFFh
  2230 00000A9F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000AA8 0210000000F8       
  2231 00000AAE 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000AB7 000000000000000003 
  2232 00000AC0 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000AC9 00000000000000     
  2233 00000AD0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000AD9 000000000000000000 
  2234 00000AE2 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000AEB 4E414D45           
  2235 00000AEF 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000AF8 46415431           
  2236 00000AFC 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B01 FFFF                    		dw 0FFFFh
  2238 00000B03 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B0C 0210000000F8       
  2239 00000B12 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B1B 000000000000000003 
  2240 00000B24 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B2D 00000000000000     
  2241 00000B34 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000B3D 000000000000000000 
  2242 00000B46 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000B4F 4E414D45           
  2243 00000B53 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000B5C 46415431           
  2244 00000B60 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000B65 FFFF                    		dw 0FFFFh
  2246 00000B67 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000B70 0210000000F8       
  2247 00000B76 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000B7F 000000000000000003 
  2248 00000B88 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000B91 00000000000000     
  2249 00000B98 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000BA1 000000000000000000 
  2250 00000BAA 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000BB3 4E414D45           
  2251 00000BB7 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000BC0 46415431           
  2252 00000BC4 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000BC9 FFFF                    		dw 0FFFFh
  2254 00000BCB 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000BD4 0210000000F8       
  2255 00000BDA 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000BE3 000000000000000003 
  2256 00000BEC 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000BF5 00000000000000     
  2257 00000BFC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C05 000000000000000000 
  2258 00000C0E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C17 4E414D45           
  2259 00000C1B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C24 46415431           
  2260 00000C28 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C2D FFFF                    		dw 0FFFFh
  2262 00000C2F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000C38 0210000000F8       
  2263 00000C3E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000C47 000000000000000003 
  2264 00000C50 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000C59 00000000000000     
  2265 00000C60 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000C69 000000000000000000 
  2266 00000C72 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000C7B 4E414D45           
  2267 00000C7F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000C88 46415431           
  2268 00000C8C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000C91 FFFF                    		dw 0FFFFh
  2270 00000C93 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000C9C 0210000000F8       
  2271 00000CA2 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000CAB 000000000000000003 
  2272 00000CB4 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000CBD 00000000000000     
  2273 00000CC4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000CCD 000000000000000000 
  2274 00000CD6 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000CDF 4E414D45           
  2275 00000CE3 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000CEC 46415431           
  2276 00000CF0 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000CF5 FFFF                    		dw 0FFFFh
  2278 00000CF7 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D00 0210000000F8       
  2279 00000D06 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D0F 000000000000000003 
  2280 00000D18 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D21 00000000000000     
  2281 00000D28 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D31 000000000000000000 
  2282 00000D3A 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000D43 4E414D45           
  2283 00000D47 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000D50 46415431           
  2284 00000D54 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000D59 FFFF                    		dw 0FFFFh
  2286 00000D5B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000D64 0210000000F8       
  2287 00000D6A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000D73 000000000000000003 
  2288 00000D7C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000D85 00000000000000     
  2289 00000D8C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000D95 000000000000000000 
  2290 00000D9E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000DA7 4E414D45           
  2291 00000DAB 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000DB4 46415431           
  2292 00000DB8 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000DBD FFFF                    		dw 0FFFFh
  2294 00000DBF 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000DC8 0210000000F8       
  2295 00000DCE 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000DD7 000000000000000003 
  2296 00000DE0 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000DE9 00000000000000     
  2297 00000DF0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000DF9 000000000000000000 
  2298 00000E02 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E0B 4E414D45           
  2299 00000E0F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E18 46415431           
  2300 00000E1C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E21 FFFF                    		dw 0FFFFh
  2302 00000E23 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E2C 0210000000F8       
  2303 00000E32 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000E3B 000000000000000003 
  2304 00000E44 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000E4D 00000000000000     
  2305 00000E54 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000E5D 000000000000000000 
  2306 00000E66 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000E6F 4E414D45           
  2307 00000E73 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000E7C 46415431           
  2308 00000E80 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000E85 FFFF                    		dw 0FFFFh
  2310 00000E87 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000E90 0210000000F8       
  2311 00000E96 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000E9F 000000000000000003 
  2312 00000EA8 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000EB1 00000000000000     
  2313 00000EB8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000EC1 000000000000000000 
  2314 00000ECA 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000ED3 4E414D45           
  2315 00000ED7 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000EE0 46415431           
  2316 00000EE4 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000EE9 FFFF                    		dw 0FFFFh
  2318 00000EEB 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000EF4 0210000000F8       
  2319 00000EFA 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F03 000000000000000003 
  2320 00000F0C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F15 00000000000000     
  2321 00000F1C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F25 000000000000000000 
  2322 00000F2E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000F37 4E414D45           
  2323 00000F3B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000F44 46415431           
  2324 00000F48 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000F4D FFFF                    		dw 0FFFFh
  2326 00000F4F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000F58 0210000000F8       
  2327 00000F5E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000F67 000000000000000003 
  2328 00000F70 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000F79 00000000000000     
  2329 00000F80 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000F89 000000000000000000 
  2330 00000F92 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00000F9B 4E414D45           
  2331 00000F9F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00000FA8 46415431           
  2332 00000FAC 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 00000FB1 FFFF                    		dw 0FFFFh
  2334 00000FB3 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 00000FBC 0210000000F8       
  2335 00000FC2 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00000FCB 000000000000000003 
  2336 00000FD4 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 00000FDD 00000000000000     
  2337 00000FE4 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 00000FED 000000000000000000 
  2338 00000FF6 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 00000FFF 4E414D45           
  2339 00001003 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000100C 46415431           
  2340 00001010 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001015 FFFF                    		dw 0FFFFh
  2342 00001017 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 00001020 0210000000F8       
  2343 00001026 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000102F 000000000000000003 
  2344 00001038 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 00001041 00000000000000     
  2345 00001048 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 00001051 000000000000000000 
  2346 0000105A 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 00001063 4E414D45           
  2347 00001067 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 00001070 46415431           
  2348 00001074 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 00001079 FFFF                    		dw 0FFFFh
  2350 0000107B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 00001084 0210000000F8       
  2351 0000108A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001093 000000000000000003 
  2352 0000109C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 000010A5 00000000000000     
  2353 000010AC 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 000010B5 000000000000000000 
  2354 000010BE 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 000010C7 4E414D45           
  2355 000010CB 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 000010D4 46415431           
  2356 000010D8 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 000010DD FFFF                    		dw 0FFFFh
  2358 000010DF 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 000010E8 0210000000F8       
  2359 000010EE 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 000010F7 000000000000000003 
  2360 00001100 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001109 00000000000000     
  2361 00001110 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001119 000000000000000000 
  2362 00001122 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 0000112B 4E414D45           
  2363 0000112F 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 00001138 46415431           
  2364 0000113C 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 00001141 FFFF                    		dw 0FFFFh
  2366 00001143 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 0000114C 0210000000F8       
  2367 00001152 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 0000115B 000000000000000003 
  2368 00001164 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 0000116D 00000000000000     
  2369 00001174 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 0000117D 000000000000000000 
  2370 00001186 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 0000118F 4E414D45           
  2371 00001193 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000119C 46415431           
  2372 000011A0 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 000011A5 FFFF                    		dw 0FFFFh
  2374 000011A7 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 000011B0 0210000000F8       
  2375 000011B6 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 000011BF 000000000000000003 
  2376 000011C8 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 000011D1 00000000000000     
  2377 000011D8 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 000011E1 000000000000000000 
  2378 000011EA 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 000011F3 4E414D45           
  2379 000011F7 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 00001200 46415431           
  2380 00001204 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001209 FFFF                    		dw 0FFFFh
  2382 0000120B 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001214 0210000000F8       
  2383 0000121A 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001223 000000000000000003 
  2384 0000122C 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 00001235 00000000000000     
  2385 0000123C 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 00001245 000000000000000000 
  2386 0000124E 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 00001257 4E414D45           
  2387 0000125B 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 00001264 46415431           
  2388 00001268 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 0000126D FFFF                    		dw 0FFFFh
  2390 0000126F 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2390 00001278 0210000000F8       
  2391 0000127E 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2391 00001287 000000000000000003 
  2392 00001290 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2392 00001299 00000000000000     
  2393 000012A0 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2393 000012A9 000000000000000000 
  2394 000012B2 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2394 000012BB 4E414D45           
  2395 000012BF 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2395 000012C8 46415431           
  2396 000012CC 3220202000              		db 32h,	20h, 20h, 20h, 0
  2397 000012D1 00                      		db 0
  2398                                  
  2399                                  ;---------------------------------------------------------------------------
  2400                                  ; Possibly disposable data, goes at end of data group
  2401                                  ;***************************************************************************
  2402                                  
  2403                                  ; Possibly disposable data, goes at end of data group
  2404                                  
  2405                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2406                                  ;
  2407                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2408                                  ;		(dl) = drive number (80h or 81h).
  2409                                  ;		(dh) = head number.
  2410                                  ;		(ch) = cylinder number.
  2411                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2412                                  ;		(al) = number of sectors.
  2413                                  ;		(es:bx) = address of read buffer.
  2414                                  ;		for more on register contents see rom bios listing.
  2415                                  ;		stack set up for return by an iret.
  2416                                  ;
  2417                                  ;	exit:	(ah) = status of current operation.
  2418                                  ;		(cy) = 1 if failed, 0 if successful.
  2419                                  ;		for other register contents see rom bios listing.
  2420                                  ;
  2421                                  ;	uses:	
  2422                                  ;
  2423                                  ;
  2424                                  ;	warning: uses old13 vector for non-read calls.
  2425                                  ;		does direct calls to the at rom.
  2426                                  ;		does segment arithmatic.
  2427                                  ;
  2428                                  ;	effects: performs disk i/o operation.
  2429                                  
  2430                                  ; 16/10/2022
  2431                                  ; 28/05/2019
  2432                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2433                                  
  2434                                  ;* offsets into cmd_block for registers
  2435                                  
  2436                                  pre_comp equ 0	;write pre-compensation
  2437                                  sec_cnt	 equ 1	;sector count
  2438                                  sec_num	 equ 2	;sector number
  2439                                  cyl_low	 equ 3	;cylinder number, low part
  2440                                  cyl_high equ 4	;cylinder number, high part
  2441                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2442                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2443                                  cmd_reg  equ 6	;command register
  2444                                  
  2445                                  ; 01/10/2022
  2446                                  disk_status1	equ 74h
  2447                                  hf_num		equ 75h
  2448                                  control_byte	equ 76h
  2449                                  
  2450                                  ibm_disk_io:				
  2451 000012D2 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2452 000012D5 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2453 000012D7 80FC02                  		cmp	ah, 2
  2454 000012DA 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2455 000012DC 80FC0A                  		cmp	ah, 0Ah
  2456 000012DF 7405                    		jz	short atd2	; and call 0Ah (read long).
  2457                                  atd1:
  2458 000012E1 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2459                                  		;jmp	cs:Old13	; use rom int 13h handler
  2460                                  ;-----------------------------------------------------------------------------
  2461                                  
  2462                                  atd2:					
  2463 000012E6 53                      		push	bx
  2464 000012E7 51                      		push	cx
  2465 000012E8 52                      		push	dx
  2466 000012E9 57                      		push	di
  2467 000012EA 1E                      		push	ds
  2468 000012EB 06                      		push	es
  2469 000012EC 50                      		push	ax
  2470 000012ED B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2471                                  					; establish bios segment addressing
  2472 000012F0 8ED8                    		mov	ds, ax
  2473                                  		; 16/10/2022
  2474 000012F2 C606740000              		mov	byte [disk_status1], 0
  2475                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2476                                  					; initially no error code.
  2477 000012F7 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2478 000012FA 3A167500                		cmp	dl, [hf_num]
  2479                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2480 000012FE 7207                    		jb	short atd3	; disk number in range
  2481                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2482 00001300 C606740001              		mov	byte [disk_status1], 1
  2483 00001305 EB20                    		jmp	short atd4	; disk number out of range error,
  2484                                  					; return
  2485                                  ; ----------------------------------------------------------------------------
  2486                                  
  2487                                  atd3:					
  2488 00001307 53                      		push	bx
  2489 00001308 8CC0                    		mov	ax, es
  2490 0000130A C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2491 0000130D 01D8                    		add	ax, bx
  2492 0000130F 8EC0                    		mov	es, ax
  2493 00001311 5B                      		pop	bx
  2494 00001312 83E30F                  		and	bx, 0Fh
  2495 00001315 0E                      		push	cs
  2496 00001316 E8DF00                  		call	check_dma
  2497 00001319 720C                    		jb	short atd4	; abort if dma across segment boundary
  2498 0000131B 58                      		pop	ax
  2499 0000131C 50                      		push	ax
  2500 0000131D E81A00                  		call	setcmd		; set up command block for disk op
  2501 00001320 BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2502 00001323 EE                      		out	dx, al		; write out command modifier
  2503 00001324 E86B00                  		call	docmd		; carry out command
  2504                                  ; ----------------------------------------------------------------------------
  2505                                  
  2506                                  atd4:	
  2507                                  
  2508                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2509                                  ;	      and save a couple bytes while were at it.
  2510                                  				
  2511 00001327 58                      		pop	ax
  2512                                  		;mov	ah, ds:74h	; [disk_status1]
  2513 00001328 8A267400                		mov	ah, [disk_status1]
  2514 0000132C 08E4                    		or	ah, ah
  2515 0000132E 7401                    		jz	short atd5
  2516 00001330 F9                      		stc
  2517                                  atd5:					
  2518 00001331 07                      		pop	es
  2519 00001332 1F                      		pop	ds
  2520 00001333 5F                      		pop	di
  2521 00001334 5A                      		pop	dx
  2522 00001335 59                      		pop	cx
  2523 00001336 5B                      		pop	bx
  2524 00001337 CA0200                  		retf	2		; far return, dropping flags
  2525                                  
  2526                                  ; =============== S U B	R O U T	I N E ========================================
  2527                                  
  2528                                  ;***	setcmd - set up cmd_block for the disk operation
  2529                                  ;
  2530                                  ;	entry:	(ds) = bios data segment.
  2531                                  ;		(es:bx) in seg:000x form.
  2532                                  ;		other registers as in int 13h call
  2533                                  ;	
  2534                                  ;	exit:	cmd_block set up for disk read call.
  2535                                  ;		control_byte set up for disk operation.
  2536                                  ;		(al) = control byte modifier
  2537                                  ;
  2538                                  ;	sets the fields of cmd_block using the register contents
  2539                                  ;	and the contents of the disk parameter block for the given drive.
  2540                                  ;
  2541                                  ;	warning: (ax) destroyed.
  2542                                  ;		does direct calls to the at rom.
  2543                                  
  2544                                  setcmd:		; proc near		
  2545                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2546                                  		; 16/10/2022
  2547 0000133A A24300                  		mov	[cmd_block+sec_cnt], al
  2548                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2549 0000133D C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2550 00001342 80FC02                  		cmp	ah, 2
  2551 00001345 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2552 00001347 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2553                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2554                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2555                                  setc1:					
  2556 0000134C 88C8                    		mov	al, cl
  2557 0000134E 243F                    		and	al, 3Fh		; mask sector number
  2558                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2559                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2560 00001350 A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2561 00001353 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2562 00001357 88C8                    		mov	al, cl
  2563 00001359 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2564                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2565 0000135C A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2566 0000135F 89D0                    		mov	ax, dx
  2567 00001361 C0E004                  		shl	al, 4		; drive	number
  2568 00001364 80E40F                  		and	ah, 0Fh
  2569 00001367 08E0                    		or	al, ah		; head number
  2570 00001369 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2571                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2572 0000136B A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2573 0000136E 06                      		push	es
  2574 0000136F 53                      		push	bx
  2575 00001370 0E                      		push	cs
  2576 00001371 E85C00                  		call	get_vec
  2577 00001374 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2578                                  			 		; write pre-comp from disk parameters
  2579 00001378 C1E802                  		shr	ax, 2
  2580                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2581 0000137B A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2582                                  					; only use low part
  2583 0000137E 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2584                                  					; control byte modifier
  2585 00001382 5B                      		pop	bx
  2586 00001383 07                      		pop	es
  2587                                  		;mov	ah, ds:76h	; [control_byte]
  2588 00001384 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2589 00001388 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2590 0000138B 08C4                    		or	ah, al
  2591                                  		;mov	ds:76h,	ah
  2592 0000138D 88267600                		mov	[control_byte], ah ; mov [76h],al
  2593 00001391 C3                      		retn
  2594                                  
  2595                                  ; =============== S U B	R O U T	I N E ========================================
  2596                                  
  2597                                  ;***	docmd - carry out read operation to at hard disk
  2598                                  ;
  2599                                  ;	entry:	(es:bx) = address for read in data.
  2600                                  ;		cmd_block set up for disk read.
  2601                                  ;
  2602                                  ;	exit:	buffer at (es:bx) contains data read.
  2603                                  ;		disk_status1 set to error code (0 if success).
  2604                                  ;
  2605                                  ;	
  2606                                  ;
  2607                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2608                                  ;		no check is made for dma boundary overrun.
  2609                                  ;
  2610                                  ;	effects: programs disk controller.
  2611                                  ;		performs disk input.
  2612                                  
  2613                                  docmd:		; proc near		
  2614 00001392 89DF                    		mov	di, bx
  2615 00001394 0E                      		push	cs
  2616 00001395 E84000                  		call	command
  2617 00001398 7535                    		jnz	short doc3
  2618                                  doc1:					
  2619 0000139A 0E                      		push	cs
  2620 0000139B E84200                  		call	waitt		; wait for controller to complete read
  2621 0000139E 752F                    		jnz	short doc3
  2622 000013A0 B90001                  		mov	cx, 256		; 256 words per sector
  2623 000013A3 BAF001                  		mov	dx, 1F0h	; hf_port
  2624 000013A6 FC                      		cld			; string op goes up
  2625 000013A7 FA                      		cli			; disable interrupts
  2626                                  					; (bug was forgetting this)
  2627                                  
  2628                                  ;	M062 -- some of these old machines have intermittent failures
  2629                                  ;		when the read is done at full speed. Instead of using
  2630                                  ;		a string rep instruction, we'll use a loop. There is
  2631                                  ;		a slight performance hit, but it only affects these
  2632                                  ;		very old machines with an exact date code match, and
  2633                                  ;		it makes said machines more reliable
  2634                                  ;
  2635                                  ;M062	repz	insw		;read in sector
  2636                                  
  2637                                  rsct_loop:				
  2638 000013A8 6D                      		insw
  2639 000013A9 E2FD                    		loop	rsct_loop
  2640 000013AB FB                      		sti
  2641                                  		; 16/10/2022
  2642 000013AC F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2643                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2644                                  					; (ds =	40h)
  2645 000013B1 7410                    		jz	short doc2	; no ecc bytes to read.
  2646 000013B3 0E                      		push	cs
  2647 000013B4 E83100                  		call	wait_drq	; wait for controller to complete read
  2648 000013B7 7216                    		jb	short doc3
  2649 000013B9 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2650 000013BC BAF001                  		mov	dx, 1F0h	; hf_port
  2651 000013BF FA                      		cli
  2652 000013C0 F36C                    		rep insb		; read in ecc
  2653 000013C2 FB                      		sti
  2654                                  doc2:					
  2655 000013C3 0E                      		push	cs
  2656 000013C4 E82900                  		call	check_status
  2657 000013C7 7506                    		jnz	short doc3	; operation failed
  2658                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2659 000013C9 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2660 000013CD 75CB                    		jnz	short doc1	; loop while more sectors to read
  2661                                  doc3:					
  2662 000013CF C3                      		retn
  2663                                  
  2664                                  ; =============== S U B	R O U T	I N E ========================================
  2665                                  
  2666                                  ;***	define where the rom routines are actually located
  2667                                  ;	   in the buggy old AT BIOS that we might need to
  2668                                  ;	   install a special level of int13 handler for
  2669                                  
  2670                                  ; 16/10/2022
  2671                                  
  2672                                  romsegment 	equ 0F000h  ; segment
  2673                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2674                                  romwait		equ 2E7Fh   ; offset in romsegment
  2675                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2676                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2677                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2678                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2679                                  romfret		equ 0FF65h  ; far return in rom	
  2680                                  
  2681                                  ;***	get_vec - get pointer to hard disk parameters.
  2682                                  ;
  2683                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2684                                  ;
  2685                                  ;	exit:	(es:bx) = address of disk parameters table.
  2686                                  ;
  2687                                  ;	uses:	ax for segment computation.
  2688                                  ;
  2689                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2690                                  ;	or 70h (disk 1).
  2691                                  ;	
  2692                                  ;	warning: (ax) destroyed.
  2693                                  ;		this does a direct call to the at rom.
  2694                                  
  2695                                  get_vec:	; proc near		
  2696                                  		;push	0FF65h		; romfret ; far	return in rom
  2697                                  		;jmp	far ptr	0F000h:2F8Eh
  2698                                  		; 16/10/2022
  2699 000013D0 6865FF                  		push	romfret		; far return in rom
  2700 000013D3 EA8E2F00F0              		jmp	romsegment:romget_vec
  2701                                  
  2702                                  ; =============== S U B	R O U T	I N E ========================================
  2703                                  
  2704                                  ;***	command - send contents of cmd_block to disk controller.
  2705                                  ;
  2706                                  ;	entry:	control_byte 
  2707                                  ;		cmd_block - set up with values for hard disk controller.
  2708                                  ;
  2709                                  ;	exit:	disk_status1 = error code.
  2710                                  ;		nz if error, zr for no error.
  2711                                  ;
  2712                                  ;
  2713                                  ;	warning: (ax), (cx), (dx) destroyed.
  2714                                  ;		does a direct call to the at rom.
  2715                                  ;
  2716                                  ;	effects: programs disk controller.
  2717                                  
  2718                                  command:	; proc near		
  2719                                  		;push	0FF65h		; romfret ; far	return in rom
  2720                                  		;jmp	far ptr	0F000h:2E1Eh
  2721                                  		; 16/10/2022
  2722 000013D8 6865FF                  		push	romfret		; far return in rom
  2723 000013DB EA1E2E00F0              		jmp	romsegment:romcommand
  2724                                  
  2725                                  ; =============== S U B	R O U T	I N E ========================================
  2726                                  
  2727                                  ;***	waitt - wait for disk interrupt
  2728                                  ;
  2729                                  ;	entry:	nothing.
  2730                                  ;
  2731                                  ;	exit:	disk_status1 = error code.
  2732                                  ;		nz if error, zr if no error.
  2733                                  ;
  2734                                  ;
  2735                                  ;	warning: (ax), (bl), (cx) destroyed.
  2736                                  ;		does a direct call to the at rom.
  2737                                  ;		
  2738                                  ;	effects: calls int 15h, function 9000h.
  2739                                  
  2740                                  waitt:		; proc near		
  2741                                  		;push	0FF65h		; romfret ; far	return in rom
  2742                                  		;jmp	far ptr	0F000h:2E7Fh
  2743                                  		; 16/10/2022
  2744 000013E0 6865FF                  		push	romfret		; far return in rom
  2745 000013E3 EA7F2E00F0              		jmp	romsegment:romwait
  2746                                  
  2747                                  ; =============== S U B	R O U T	I N E ========================================
  2748                                  
  2749                                  ;***	wait_drq - wait for data request.
  2750                                  ;
  2751                                  ;	entry:	nothing.
  2752                                  ;
  2753                                  ;	exit:	disk_status1 = error code.
  2754                                  ;		cy if error, nc if no error.
  2755                                  ;
  2756                                  ;	warning: (al), (cx), (dx) destroyed.
  2757                                  ;		does a direct call to the at rom.
  2758                                  
  2759                                  wait_drq:	; proc near		
  2760                                  		;push	0FF65h		; romfret ; far	return in rom
  2761                                  		;jmp	far ptr	0F000h:2EE2h
  2762                                  		; 16/10/2022
  2763 000013E8 6865FF                  		push	romfret		; far return in rom
  2764 000013EB EAE22E00F0              		jmp	romsegment:romwait_drq
  2765                                  
  2766                                  ; =============== S U B	R O U T	I N E ========================================
  2767                                  
  2768                                  ;***	check_status - check hard disk status.
  2769                                  ;
  2770                                  ;	entry:	nothing.
  2771                                  ;
  2772                                  ;	exit:	disk_status1 = error code.
  2773                                  ;		nz if error, zr if no error.
  2774                                  ;
  2775                                  ;	warning: (ax), (cx), (dx) destroyed.
  2776                                  ;		does a direct call to the at rom.
  2777                                  
  2778                                  check_status:	; proc near		
  2779                                  		;push	0FF65h		; romfret ; far	return in rom
  2780                                  		;jmp	far ptr	0F000h:2EF8h
  2781                                  		; 16/10/2022
  2782 000013F0 6865FF                  		push	romfret		; far return in rom
  2783 000013F3 EAF82E00F0              		jmp	romsegment:romcheck_status
  2784                                  
  2785                                  ; =============== S U B	R O U T	I N E ========================================
  2786                                  
  2787                                  ;***	check_dma - check for dma overrun 64k segment.
  2788                                  ;
  2789                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2790                                  ;		cmd_block set up for operation.
  2791                                  ;
  2792                                  ;	exit:	disk_status1 - error code.
  2793                                  ;		cy if error, nc if no error.
  2794                                  ;
  2795                                  ;	warning: does a direct call to the at rom.
  2796                                  
  2797                                  check_dma:	; proc near		
  2798                                  		;push	0FF65h		; romfret ; far	return in rom
  2799                                  		;jmp	far ptr	0F000h:2F69h
  2800                                  		; 16/10/2022
  2801 000013F8 6865FF                  		push	romfret		; far return in rom
  2802 000013FB EA692F00F0              		jmp	romsegment:romcheck_dma
  2803                                  
  2804                                  ;-----------------------------------------------------------------------------
  2805                                  
  2806                                  endatrom:
  2807                                  
  2808                                  ; ----------------------------------------------------------------------------
  2809                                  
  2810                                  ;; M015 -- begin changes
  2811                                  ;;
  2812                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2813                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2814                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2815                                  ;; If our init code detects this error, it will install this
  2816                                  ;; special Int13 hook through the same mechanism that was set
  2817                                  ;; up for the IBM patch above. This code is also dynamically
  2818                                  ;; relocated by MSINIT.
  2819                                  
  2820                                  compaq_disk_io:
  2821 00001400 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2822                                  					;
  2823                                  					; the following	label defines the end of the at	rom patch.
  2824                                  					; this is used at configuration	time.
  2825                                  					;
  2826                                  					; warning!!!
  2827                                  					; this code will be dynamically	relocated by msinit
  2828 00001403 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2829                                  no_hookit:				
  2830                                  		;jmp	cs:Old13
  2831                                  		; 16/10/2022
  2832 00001405 2EFF2E[0601]            		jmp	far [cs:Old13]
  2833                                  
  2834                                  ; ----------------------------------------------------------------------------
  2835                                  
  2836                                  mebbe_hookit:				
  2837 0000140A 80FA80                  		cmp	dl, 80h
  2838 0000140D 72F6                    		jb	short no_hookit
  2839 0000140F 1E                      		push	ds
  2840 00001410 50                      		push	ax
  2841 00001411 B84000                  		mov	ax, 40h
  2842 00001414 8ED8                    		mov	ds, ax
  2843 00001416 58                      		pop	ax
  2844 00001417 9C                      		pushf
  2845                                  		;call	cs:Old13
  2846                                  		; 16/10/2022
  2847 00001418 2EFF1E[0601]            		call	far [cs:Old13]
  2848 0000141D 1F                      		pop	ds
  2849 0000141E CA0200                  		retf	2
  2850                                  
  2851                                  ; ----------------------------------------------------------------------------
  2852                                  
  2853 00001421 00                      end_compaq_i13hook: db 0			
  2854                                  
  2855                                  ; =============== S U B	R O U T	I N E ========================================
  2856                                  
  2857                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2858                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2859                                  
  2860                                  daycnt_to_day:	; proc far
  2861                                  
  2862                                  ; entry: [daycnt] = number of days since 1-1-80
  2863                                  ;
  2864                                  ; return: ch - century in bcd
  2865                                  ;	  cl - year in bcd
  2866                                  ;	  dh - month in bcd
  2867                                  ;	  dl - day in bcd
  2868                                  
  2869                                  		; 16/10/2022		
  2870 00001422 2EFF36[E904]            		push	word [cs:daycnt] ; save daycnt
  2871 00001427 2E813E[E904]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2872                                  					; # days from 1-1-1980 to 1-1-2000
  2873 0000142E 730E                    		jnb	short century20
  2874 00001430 2EC606[ED04]13          		mov	byte [cs:base_century], 19
  2875 00001436 2EC606[EE04]50          		mov	byte [cs:base_year], 80
  2876 0000143C EB13                    		jmp	short years
  2877                                  ; ----------------------------------------------------------------------------
  2878                                  		
  2879                                  century20:				
  2880 0000143E 2EC606[ED04]14          		mov	byte [cs:base_century], 20
  2881 00001444 2EC606[EE04]00          		mov	byte [cs:base_year], 0
  2882 0000144A 2E812E[E904]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2883                                  					; adjust daycnt
  2884                                  years:					
  2885 00001451 31D2                    		xor	dx, dx
  2886 00001453 2EA1[E904]              		mov	ax, [cs:daycnt]
  2887 00001457 BBB505                  		mov	bx, 1461	; (366+365*3)
  2888                                  					; # of days in a Leap year block
  2889 0000145A F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2890 0000145C 2E8916[E904]            		mov	[cs:daycnt], dx	; save daycnt left
  2891 00001461 B304                    		mov	bl, 4
  2892 00001463 F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2893 00001465 2E0006[EE04]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2894 0000146A 2EFF06[E904]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2895 0000146F 2E813E[E904]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2896 00001476 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2897 00001478 2EFE06[EE04]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2898 0000147D 2E812E[E904]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2899 00001484 B90300                  		mov	cx, 3		; And next three years are normal
  2900                                  regularyear:				
  2901 00001487 2E813E[E904]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2902 0000148E 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2903 00001490 2EFE06[EE04]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2904 00001495 2E812E[E904]6D01        		sub	word [cs:daycnt], 365	;   }
  2905 0000149C E2E9                    		loop	regularyear	; }
  2906                                  					;
  2907                                  					; should never fall through loop
  2908                                  leapyear:				
  2909 0000149E 2EC606[F004]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2910                                  					; change month table.
  2911                                  yeardone:				
  2912 000014A4 31DB                    		xor	bx, bx
  2913 000014A6 31D2                    		xor	dx, dx
  2914 000014A8 2EA1[E904]              		mov	ax, [cs:daycnt]
  2915                                  		;mov	si, offset month_tab
  2916 000014AC BE[EF04]                		mov	si, month_tab	; 19/10/2022
  2917 000014AF B90C00                  		mov	cx, 12
  2918                                  months:					
  2919 000014B2 FEC3                    		inc	bl
  2920                                  
  2921                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2922                                  		;mov	dl, [cs:si]
  2923                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2924                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2925                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2926                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2927                                  		
  2928 000014B4 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2929 000014B6 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2930                                  					; dh=0
  2931 000014B8 7605                    		jbe	short month_done
  2932 000014BA 46                      		inc	si		; next month
  2933 000014BB 29D0                    		sub	ax, dx		; adjust daycnt
  2934 000014BD E2F3                    		loop	months		;
  2935                                  					; should never fall through loop
  2936                                  month_done:				
  2937 000014BF 2EC606[F004]1C          		mov	byte [cs:month_tab+1], 28
  2938                                  					; restore month table value
  2939 000014C5 88DA                    		mov	dl, bl
  2940 000014C7 2E8A36[EE04]            		mov	dh, [cs:base_year]
  2941 000014CC 2E8A0E[ED04]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2942 000014D1 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2943                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2944                                  					; dl = bcd day,	al = month
  2945 000014D6 86D0                    		xchg	dl, al
  2946 000014D8 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2947                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2948 000014DD 86F0                    		xchg	dh, al
  2949 000014DF 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2950                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2951 000014E4 86C8                    		xchg	cl, al
  2952 000014E6 2EFF1E[FB04]            		call	far [cs:bintobcd]
  2953                                  		;call	cs:bintobcd	; ch = bcd century
  2954 000014EB 88C5                    		mov	ch, al
  2955 000014ED 2E8F06[E904]            		pop	word [cs:daycnt] ; restore original value
  2956 000014F2 CB                      		retf
  2957                                  
  2958                                  enddaycnttoday:	
  2959                                  
  2960                                  ; =============== S U B	R O U T	I N E ========================================
  2961                                  
  2962                                  bin_to_bcd:	; proc far		; real time clock support
  2963                                  
  2964                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2965                                  ;into a bcd value in al. ah destroyed.	
  2966                                  		
  2967 000014F3 51                      		push	cx		
  2968 000014F4 D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2969 000014F6 B104                    		mov	cl, 4
  2970 000014F8 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2971 000014FA 08E0                    		or	al, ah
  2972 000014FC 59                      		pop	cx
  2973 000014FD CB                      		retf
  2974                                  
  2975                                  ; ----------------------------------------------------------------------------
  2976                                  
  2977                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2978                                  ; resume facility. the system clock needs to be reset after resume.
  2979                                  
  2980                                  ; the following routine is executed at resume time when the system
  2981                                  ; powered on after suspension. it reads the real time clock and
  2982                                  ; resets the system time and date, and then irets.
  2983                                  
  2984                                  ; warning!!! this code will be dynamically relocated by msinit.
  2985                                  
  2986                                  int6c:					
  2987 000014FE 0E                      		push	cs
  2988 000014FF 1F                      		pop	ds
  2989 00001500 8F06[B206]              		pop	word [int6c_ret_addr]	; pop off return address
  2990 00001504 8F06[B406]              		pop	word [int6c_ret_addr+2]
  2991 00001508 9D                      		popf
  2992 00001509 E81300                  		call	read_real_date	; get the date from the clock
  2993 0000150C FA                      		cli
  2994 0000150D 8936[E904]              		mov	[daycnt], si	; update dos copy of date
  2995 00001511 FB                      		sti
  2996 00001512 E8CB00                  		call	read_real_time	; get the time from the	rtc
  2997 00001515 FA                      		cli
  2998 00001516 B401                    		mov	ah, 1
  2999 00001518 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  3000                                  					; CX:DX	= clock	count
  3001                                  					; Return: time of day set
  3002 0000151A FB                      		sti
  3003                                  		;jmp	int6c_ret_addr	; long jump
  3004                                  		; 16/10/2022
  3005 0000151B FF2E[B206]              		jmp	far [int6c_ret_addr] ; long jump
  3006                                  
  3007                                  ; =============== S U B	R O U T	I N E ========================================
  3008                                  
  3009                                  ;   read_real_date reads real-time clock for date and returns the number
  3010                                  ;   of days elapsed since 1-1-80 in si
  3011                                  
  3012                                  read_real_date:	; proc near		
  3013 0000151F 50                      		push	ax
  3014 00001520 51                      		push	cx
  3015 00001521 52                      		push	dx
  3016 00001522 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3017 00001524 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3018                                  					; Return: CX:DX	= clock	count
  3019                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3020                                  					; midnight
  3021                                  					; Otherwise, AL	> 0
  3022 00001526 5A                      		pop	dx
  3023 00001527 59                      		pop	cx
  3024 00001528 58                      		pop	ax
  3025 00001529 50                      		push	ax
  3026 0000152A 53                      		push	bx
  3027 0000152B 51                      		push	cx
  3028 0000152C 52                      		push	dx
  3029 0000152D 2EC706[D206]0100        		mov	word [cs:daycnt2], 1
  3030                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3031 00001534 B404                    		mov	ah, 4
  3032 00001536 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3033                                  					; Return: DL = day in BCD
  3034                                  					; DH = month in	BCD
  3035                                  					; CL = year in BCD
  3036                                  					; CH = century (19h or 20h)
  3037 00001538 7303                    		jnb	short read_ok
  3038 0000153A E99300                  		jmp	r_d_ret
  3039                                  ;-----------------------------------------------------------------------------
  3040                                  
  3041                                  read_ok:				
  3042 0000153D 882E[B606]              		mov	[bin_date_time], ch
  3043 00001541 880E[B706]              		mov	[bin_date_time+1], cl
  3044 00001545 8836[B806]              		mov	[bin_date_time+2], dh
  3045 00001549 8816[B906]              		mov	[bin_date_time+3], dl
  3046 0000154D 2EC706[D206]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3047 00001554 E84201                  		call	bcd_verify	; verify bcd values in range
  3048 00001557 7277                    		jb	short r_d_ret	;  some	value out of range
  3049 00001559 2EC706[D206]0300        		mov	word [cs:daycnt2], 3
  3050 00001560 E8E600                  		call	date_verify
  3051 00001563 726B                    		jb	short r_d_ret
  3052 00001565 2EC706[D206]0000        		mov	word [cs:daycnt2], 0
  3053 0000156C E8AA00                  		call	in_bin
  3054 0000156F A0[B706]                		mov	al, [bin_date_time+1]
  3055 00001572 98                      		cbw
  3056 00001573 803E[B606]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3057 00001578 7503                    		jnz	short century_19 ; no
  3058 0000157A 83C064                  		add	ax, 100		; add in a century
  3059                                  
  3060                                  century_19:				
  3061 0000157D 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3062 00001580 B104                    		mov	cl, 4		; leap year every 4
  3063 00001582 F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3064 00001584 88E3                    		mov	bl, ah		; save odd years
  3065 00001586 98                      		cbw			; zero ah
  3066 00001587 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3067                                  					; # of days in leap year blocks
  3068 0000158A F7E1                    		mul	cx
  3069 0000158C 2EA3[D206]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3070 00001590 88D8                    		mov	al, bl		; get odd years	count
  3071 00001592 98                      		cbw
  3072 00001593 09C0                    		or	ax, ax
  3073 00001595 740C                    		jz	short leap_year
  3074 00001597 B96D01                  		mov	cx, 365		; days in year
  3075 0000159A F7E1                    		mul	cx
  3076 0000159C 2E0106[D206]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3077 000015A1 EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3078                                  					; possibly account for a leap day
  3079                                  ;-----------------------------------------------------------------------------
  3080                                  
  3081                                  leap_year:				
  3082 000015A3 803E[B806]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3083 000015A8 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3084                                  leap_adjustment:			
  3085 000015AA 2EFF06[D206]            		inc	word [cs:daycnt2] ; account for leap day
  3086                                  no_leap_adjustment:			
  3087 000015AF 8A0E[B906]              		mov	cl, [bin_date_time+3] ; get days of month
  3088 000015B3 30ED                    		xor	ch, ch
  3089 000015B5 49                      		dec	cx		; because of offset from day 1,	not day	0
  3090 000015B6 2E010E[D206]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3091 000015BB 8A0E[B806]              		mov	cl, [bin_date_time+2] ; get month
  3092 000015BF 30ED                    		xor	ch, ch
  3093 000015C1 49                      		dec	cx		; january starts at offset 0
  3094 000015C2 D1E1                    		shl	cx, 1		; word offset
  3095 000015C4 BE[BA06]                		mov	si, month_table
  3096 000015C7 01CE                    		add	si, cx
  3097                                  		; 16/10/2022
  3098                                  		; ds must be same with cs here, if so..
  3099                                  		; what for cs: prefixes are used !?)
  3100                                  		; mov	ax, [cs:si]
  3101                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3102 000015C9 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3103                                  					; get #	days in	previous months
  3104 000015CB 2E0106[D206]            		add	[cs:daycnt2], ax
  3105                                  r_d_ret:				
  3106 000015D0 2E8B36[D206]            		mov	si, [cs:daycnt2]
  3107 000015D5 5A                      		pop	dx
  3108 000015D6 59                      		pop	cx
  3109 000015D7 5B                      		pop	bx
  3110 000015D8 58                      		pop	ax
  3111 000015D9 C3                      		retn
  3112                                  
  3113                                  ;-----------------------------------------------------------------------------
  3114                                  
  3115                                  r_t_retj:				
  3116 000015DA 31C9                    		xor	cx, cx
  3117 000015DC 31D2                    		xor	dx, dx
  3118 000015DE EB38                    		jmp	short r_t_ret
  3119                                  
  3120                                  ; =============== S U B	R O U T	I N E ========================================
  3121                                  
  3122                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3123                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3124                                  
  3125                                  read_real_time:	; proc near		
  3126 000015E0 B402                    		mov	ah, 2
  3127 000015E2 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3128                                  					; Return: CH = hours in	BCD
  3129                                  					; CL = minutes in BCD
  3130                                  					; DH = seconds in BCD
  3131 000015E4 72F4                    		jb	short r_t_retj
  3132 000015E6 882E[B606]              		mov	[bin_date_time], ch ; hours
  3133 000015EA 880E[B706]              		mov	[bin_date_time+1], cl ; minutes
  3134 000015EE 8836[B806]              		mov	[bin_date_time+2], dh ; seconds
  3135 000015F2 C606[B906]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3136 000015F7 E89F00                  		call	bcd_verify
  3137 000015FA 72DE                    		jb	short r_t_retj
  3138 000015FC E88500                  		call	time_verify
  3139 000015FF 72D9                    		jb	short r_t_retj
  3140 00001601 E81500                  		call	in_bin		; from bcd to bin
  3141 00001604 8A2E[B606]              		mov	ch, [bin_date_time]
  3142 00001608 8A0E[B706]              		mov	cl, [bin_date_time+1]
  3143 0000160C 8A36[B806]              		mov	dh, [bin_date_time+2]
  3144 00001610 8A16[B906]              		mov	dl, [bin_date_time+3]
  3145                                  		; 16/10/2022
  3146                                  		; 17/09/2022
  3147                                  		; 31/05/2019
  3148 00001614 FF1E[D906]              		call	far [ttticks] 
  3149                                  		;call	dword ptr ttticks ; note: indirect far call
  3150                                  					; cx:dx	= number of ticks
  3151                                  					; (at 18.2 ticks per sec.)
  3152                                  r_t_ret:				
  3153 00001618 C3                      		retn
  3154                                  
  3155                                  ; =============== S U B	R O U T	I N E =======================================
  3156                                  
  3157                                  ;   in_bin converts bin_date_time values from bcd to bin
  3158                                  
  3159                                  in_bin:		; proc near		
  3160 00001619 A0[B606]                		mov	al, [bin_date_time] ; century or hours
  3161 0000161C E81F00                  		call	bcd_to_bin
  3162 0000161F A2[B606]                		mov	[bin_date_time], al
  3163 00001622 A0[B706]                		mov	al, [bin_date_time+1] ; years or minutes
  3164 00001625 E81600                  		call	bcd_to_bin
  3165 00001628 A2[B706]                		mov	[bin_date_time+1], al
  3166 0000162B A0[B806]                		mov	al, [bin_date_time+2] ; months or seconds
  3167 0000162E E80D00                  		call	bcd_to_bin
  3168 00001631 A2[B806]                		mov	[bin_date_time+2], al
  3169 00001634 A0[B906]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3170 00001637 E80400                  		call	bcd_to_bin
  3171 0000163A A2[B906]                		mov	[bin_date_time+3], al
  3172 0000163D C3                      		retn
  3173                                  
  3174                                  ; =============== S U B	R O U T	I N E =======================================
  3175                                  
  3176                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3177                                  ;   a binary representation in al
  3178                                  ;   ah is destroyed
  3179                                  
  3180                                  bcd_to_bin:	; proc near		
  3181 0000163E 88C4                    		mov	ah, al
  3182 00001640 240F                    		and	al, 0Fh
  3183 00001642 B104                    		mov	cl, 4
  3184 00001644 D2EC                    		shr	ah, cl
  3185 00001646 D50A                    		aad
  3186 00001648 C3                      		retn
  3187                                  
  3188                                  ; =============== S U B	R O U T	I N E ========================================
  3189                                  
  3190                                  ;   date_verify loosely checks bcd date values to be in range
  3191                                  ;   in bin_date_time
  3192                                  
  3193                                  date_verify:	; proc near		
  3194 00001649 803E[B606]20            		cmp	byte [bin_date_time], 20h ; century check
  3195 0000164E 7732                    		ja	short date_error
  3196 00001650 740E                    		jz	short century_20 ; jmp in 21th century
  3197 00001652 803E[B606]19            		cmp	byte [bin_date_time], 19h ; century check
  3198                                  		;jb	short date_error
  3199                                  		; 12/12/2022
  3200 00001657 722A                    		jb	short date_err2
  3201 00001659 803E[B706]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3202                                  		;jb	short date_error
  3203                                  		; 12/12/2022
  3204 0000165E 7223                    		jb	short date_err2
  3205                                  century_20:				
  3206 00001660 803E[B706]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3207 00001665 771B                    		ja	short date_error
  3208 00001667 803E[B806]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3209 0000166C 7714                    		ja	short date_error
  3210 0000166E 803E[B806]00            		cmp	byte [bin_date_time+2], 0
  3211                                  		;jbe	short date_error
  3212 00001673 760D                    		jna	short date_error
  3213 00001675 803E[B906]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3214 0000167A 7706                    		ja	short date_error
  3215                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3216                                  		;;jbe	short date_error
  3217                                  		;jna	short date_error
  3218                                  		; 12/12/2022
  3219                                  		; cf=0
  3220                                  		;clc
  3221                                  		; 12/12/2022
  3222 0000167C 803E[B906]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3223 00001681 C3                      		retn
  3224                                  ;-----------------------------------------------------------------------------
  3225                                  
  3226                                  date_error:				
  3227 00001682 F9                      		stc
  3228                                  date_err2:
  3229 00001683 C3                      		retn
  3230                                  
  3231                                  ; =============== S U B	R O U T	I N E ========================================
  3232                                  
  3233                                  ; time_verify very loosely checks bcd date values to be in range
  3234                                  ; in bin_date_time
  3235                                  
  3236                                  time_verify:	; proc near		
  3237 00001684 803E[B606]24            		cmp	byte [bin_date_time], 24h ; hour check
  3238 00001689 770C                    		ja	short time_error
  3239 0000168B 803E[B706]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3240 00001690 7705                    		ja	short time_error
  3241                                  		; 12/12/2022h
  3242                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3243                                  		;ja	short time_error
  3244                                  		;clc
  3245                                  		;retn
  3246                                  		; 12/12/2022
  3247 00001692 803E[B806]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3248                                  time_error:
  3249                                  bv_error:	
  3250 00001697 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3251 00001698 C3                      		retn
  3252                                  
  3253                                  ; ----------------------------------------------------------------------------
  3254                                  
  3255                                  ;time_error:				
  3256                                  		;stc
  3257                                  		;retn
  3258                                  
  3259                                  ; =============== S U B	R O U T	I N E ========================================
  3260                                  
  3261                                  ;   bcd_verify checks values in bin_date_time to be valid
  3262                                  ;   bcd numerals.  carry set if any nibble out of range
  3263                                  
  3264                                  bcd_verify:	; proc near		
  3265 00001699 B90400                  		mov	cx, 4		; 4 bytes to check
  3266 0000169C BB[B606]                		mov	bx, bin_date_time
  3267                                  bv_loop:				
  3268 0000169F 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3269 000016A1 88C4                    		mov	ah, al
  3270 000016A3 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3271                                  					; is 1's place in range?
  3272 000016A6 3C0A                    		cmp	al, 10
  3273 000016A8 77ED                    		ja	short bv_error	; jmp out of range
  3274 000016AA D0EC                    		shr	ah, 1
  3275 000016AC D0EC                    		shr	ah, 1
  3276 000016AE D0EC                    		shr	ah, 1
  3277 000016B0 D0EC                    		shr	ah, 1
  3278 000016B2 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3279 000016B5 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3280 000016B8 77DD                    		ja	short bv_error	; jmp out of range
  3281 000016BA 43                      		inc	bx		; next byte
  3282 000016BB 49                      		dec	cx
  3283 000016BC 75E1                    		jnz	short bv_loop
  3284 000016BE F8                      		clc			; set success flag
  3285 000016BF C3                      		retn
  3286                                  ; ----------------------------------------------------------------------------
  3287                                  
  3288                                  		; 12/12/2022
  3289                                  ;bv_error:				
  3290                                  		;stc			; set error flag
  3291                                  		;retn
  3292                                  
  3293                                  ; ----------------------------------------------------------------------------
  3294                                  
  3295                                  endk09:
  3296                                  
  3297                                  ; ----------------------------------------------------------------------------
  3298                                  
  3299                                  ;------------------------------------------------------------------------
  3300                                  ;									:
  3301                                  ;	System initialization						:
  3302                                  ;									:
  3303                                  ;	The entry conditions are established by the bootstrap		:
  3304                                  ;	loader and are considered unknown. The following jobs		:
  3305                                  ;	will be performed by this module:				:
  3306                                  ;									:
  3307                                  ;	1.	All device initialization is performed			:
  3308                                  ;	2.	A local stack is set up and DS:SI are set		:
  3309                                  ;		to point to an initialization table. Then		:
  3310                                  ;		an inter-segment call is made to the first		:
  3311                                  ;		byte of the dos 					:
  3312                                  ;	3.	Once the dos returns from this call the ds		:
  3313                                  ;		register has been set up to point to the start		:
  3314                                  ;		of free memory. The initialization will then		:
  3315                                  ;		load the command program into this area 		:
  3316                                  ;		beginning at 100 hex and transfer control to		:
  3317                                  ;		this program.						:
  3318                                  ;									:
  3319                                  ;------------------------------------------------------------------------
  3320                                  
  3321                                  ; 01/10/2022
  3322                                  ; 08/01/2018 - Retro DOS v4.0
  3323                                  
  3324                                  ; drvfat must be the first location of freeable space!
  3325                                  
  3326                                  
  3327                                  align 2
  3328                                  		;db 90h
  3329                                  
  3330                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3331                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3332                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3333                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3334                                  	
  3335 000016C0 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3336                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3337                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3338                                  ;doscnt:	dw 0			; how many sectors to read
  3339 000016C2 00                      fbigfat:	db 0			; flags	for drive
  3340                                  ;fatloc:	dw 0			; seg addr of fat sector
  3341 000016C3 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3342 000016C5 80                      rom_drv_num:	db 80h			; rom drive number
  3343                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3344                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3345                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3346                                  
  3347                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3348                                  ; call to determine drive parameters.
  3349                                  
  3350 000016C6 02                      num_heads:	db 2			; number of heads returned by rom
  3351 000016C7 09                      sec_trk:	db 9			; sec/trk returned by rom
  3352 000016C8 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3353 000016C9 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3354                                  
  3355                                  ; ----------------------------------------------------------------------------
  3356                                  
  3357 000016CA 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3358 000016D2 0008010270000000        		dw 2048, 513, 112, 0
  3359 000016DA 0020020400010000        		dw 8192, 1026, 256, 0
  3360 000016E2 A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3361 000016EA FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3362                                  					; the assumption of total fat size <= 128 kb,
  3363                                  					; and the maximum size of fat entry = 16 bit.
  3364                                  
  3365 000016F2 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3365 000016FB 00                 
  3366                                  					; for compatibility.
  3367 000016FC 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3367 00001705 00                 
  3368                                  					; fbig = 40h
  3369 00001706 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3369 0000170F 00                 
  3370 00001710 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3370 00001719 00                 
  3371 0000171A 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3371 00001723 00                 
  3372 00001724 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3372 0000172D 00                 
  3373 0000172E 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3373 00001737 00                 
  3374                                  					
  3375                                  ; ----------------------------------------------------------------------------
  3376                                  
  3377                                  ;******************************************************
  3378                                  ;variables for mini disk initialization
  3379                                  ;******************************************************
  3380                                  
  3381                                  ; 01/10/2022
  3382                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3383                                  
  3384 00001738 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3385 00001739 00                      hnum:		db 0			; real number of hardfiles
  3386 0000173A [7E06]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3387 0000173C [0D09]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3388                                  					; of bds table. needed to figure out
  3389                                  					; the dosdatasg address.
  3390 0000173E 0000                    mini_hdlim:	dw 0			
  3391 00001740 0000                    mini_seclim:	dw 0
  3392                                  
  3393                                  ;end of mini disk init variables **********************
  3394                                  
  3395                                  ; ----------------------------------------------------------------------------
  3396                                  			
  3397 00001742 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3398                                  
  3399                                  ; 13/12/2022
  3400                                  %if 0
  3401                                  
  3402                                  ;align 2
  3403                                  		db  90h	
  3404                                  
  3405                                  ; the following are the recommended bpbs for the media that we know of so far.
  3406                                  
  3407                                  ;struc bpbx
  3408                                  ;   resw 1 ; 512
  3409                                  ;   resb 1
  3410                                  ;   resw 1 ; 1
  3411                                  ;   resb 1 ; 2
  3412                                  ;   resw 1
  3413                                  ;   resw 1
  3414                                  ;   resb 1
  3415                                  ;   resw 1
  3416                                  ;   resw 1
  3417                                  ;   resw 1 ; 2
  3418                                  ;   resw 1
  3419                                  ;   resw 1 ; hidden sector high
  3420                                  ;   resd 1 ; extended total sectors
  3421                                  ;.size:
  3422                                  ;endstruc
  3423                                  
  3424                                  ; 08/01/2019 - Retro DOS v4.0
  3425                                  
  3426                                  ; 20/04/2019
  3427                                  
  3428                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3429                                  
  3430                                  ; 09/12/2022
  3431                                  BPB48T:
  3432                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3433                                  		; 48 tpi diskettes	;
  3434                                  		dw	512		; physical sector size in bytes
  3435                                  		db	2		; sectors/allocation unit
  3436                                  		dw	1		; reserved sectors for dos
  3437                                  		db	2		; number of allocation tables
  3438                                  		dw	112		; number of directory entries
  3439                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3440                                  		db	0FDh		; media descriptor
  3441                                  		dw	2		; number of fat sectors
  3442                                  		dw	9		; sectors per track
  3443                                  		dw	2		; heads
  3444                                  		dw	0		; hidden sector count (low word)
  3445                                  		dw	0		; hidden sector (high)
  3446                                  		dw	0		; number of sectors (low)
  3447                                  		dw	0		; number of sectors (high)					
  3448                                  
  3449                                  		db 90h
  3450                                  ;align 2
  3451                                  BPB96T:
  3452                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3453                                  		; 96 tpi diskettes	;
  3454                                  		dw	512		; physical sector size in bytes
  3455                                  		db	1		; sectors/allocation unit
  3456                                  		dw	1		; reserved sectors for dos
  3457                                  		db	2		; number of allocation tables
  3458                                  		dw	224		; number of directory entries
  3459                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3460                                  		db	0F9h		; media descriptor
  3461                                  		dw	7		; number of fat sectors
  3462                                  		dw	15		; sectors per track
  3463                                  		dw	2		; heads
  3464                                  		dw	0		; hidden sector count (low word)
  3465                                  		dw	0		; hidden sector (high)
  3466                                  		dw	0		; number of sectors (low)
  3467                                  		dw	0		; number of sectors (high)
  3468                                  
  3469                                  		db 90h
  3470                                  ;align 2
  3471                                  BPB35:
  3472                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3473                                  		; 3.5" diskettes - 720 KB ;		
  3474                                  		dw	512		; physical sector size in bytes
  3475                                  		db	2		; sectors/allocation unit
  3476                                  		dw	1		; reserved sectors for dos
  3477                                  		db	2		; number of allocation tables
  3478                                  		dw	112		; number of directory entries
  3479                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3480                                  		db	0F9h		; media descriptor
  3481                                  		dw	3		; number of fat sectors
  3482                                  		dw	9		; sectors per track
  3483                                  		dw	2		; heads
  3484                                  		dw	0		; hidden sector count (low word)
  3485                                  		dw	0		; hidden sector (high)
  3486                                  		dw	0		; number of sectors (low)
  3487                                  		dw	0		; number of sectors (high)
  3488                                  
  3489                                  		db 90h
  3490                                  ;align 2
  3491                                  
  3492                                  ;align 2
  3493                                  ;BPB144:
  3494                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3495                                  ;
  3496                                  ;		dw	512		; physical sector size in bytes
  3497                                  ;		db	1		; sectors/allocation unit
  3498                                  ;		dw	1		; reserved sectors for dos
  3499                                  ;		db	2		; number of allocation tables
  3500                                  ;		dw	224		; number of directory entries
  3501                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3502                                  ;		db	0F0h		; media descriptor
  3503                                  ;		dw	9		; number of fat sectors
  3504                                  ;		dw	18		; sectors per track
  3505                                  ;		dw	2		; heads
  3506                                  ;		dw	0		; hidden sector count (low word)
  3507                                  ;		dw	0		; hidden sector (high)
  3508                                  ;		dw	0		; number of sectors (low)
  3509                                  ;		dw	0		; number of sectors (high)
  3510                                  ;
  3511                                  ;		db 90h
  3512                                  ;align 2
  3513                                  
  3514                                  BPB288:
  3515                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3516                                  		; 3.5" diskettes - 2.88 MB ;	 
  3517                                  		dw	512		; physical sector size in bytes
  3518                                  		db	2		; sectors/allocation unit
  3519                                  		dw	1		; reserved sectors for dos
  3520                                  		db	2		; number of allocation tables
  3521                                  		dw	240		; number of directory entries
  3522                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3523                                  		db	0F0h		; media descriptor
  3524                                  		dw	3		; number of fat sectors
  3525                                  		dw	9		; sectors per track
  3526                                  		dw	2		; heads
  3527                                  		dw	0		; hidden sector count (low word)
  3528                                  		dw	0		; hidden sector (high)
  3529                                  		dw	0		; number of sectors (low)
  3530                                  		dw	0		; number of sectors (high)
  3531                                  
  3532                                  		db 90h			;
  3533                                  ;align 2
  3534                                  
  3535                                  %endif
  3536                                  
  3537                                  ; ----------------------------------------------------------------------------
  3538                                  					; align	2
  3539                                  ; 09/12/2022
  3540                                  %if 0
  3541                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3542                                  		dw bpb96t		; 96tpi	drives
  3543                                  		dw bpb35		; 3.5" drives
  3544                                  		dw bpb35		; unused 8" diskette
  3545                                  		dw bpb35		; unused 8" diskette
  3546                                  		dw bpb35		; used for hard	disk
  3547                                  		dw bpb35		; used for tape	drive
  3548                                  		dw bpb35		; FFOTHER
  3549                                  		dw bpb35		; ERIMO
  3550                                  		dw bpb288		; 2.88MB drive
  3551                                  		;
  3552                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3553                                  %endif
  3554                                  
  3555                                  ; 13/12/2022
  3556                                  %if 0
  3557                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3558                                  		dw BPB96T		; 96tpi	drives
  3559                                  		dw BPB35		; 3.5" drives
  3560                                  		dw BPB35		; unused 8" diskette
  3561                                  		dw BPB35		; unused 8" diskette
  3562                                  		dw BPB35		; used for hard	disk
  3563                                  		dw BPB35		; used for tape	drive
  3564                                  		dw BPB35		; FFOTHER
  3565                                  		dw BPB35		; ERIMO
  3566                                  		dw BPB288		; 2.88MB drive
  3567                                  		;
  3568                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3569                                  
  3570                                  %endif
  3571                                  
  3572                                  ; ----------------------------------------------------------------------------
  3573                                  
  3574                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3575                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3576                                  ;	  will not yet be moved to its final resting place, so we know
  3577                                  ;	  it'll be low.
  3578                                  ;
  3579                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3580                                  ;	  the function you want to call in Bios_Code. This routine will
  3581                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3582                                  ;	  will get executed when the utility function finishes. It will
  3583                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3584                                  ;	  and a retf
  3585                                  
  3586                                  ; 16/10/2022
  3587                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3588                                  ; 09/12/2022
  3589                                  BC_RETF equ bc_retf
  3590                                  
  3591                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3592                                  					; 2C7h:0C8h = 70h:2638h
  3593 0000174B [C800]                  		dw BC_RETF
  3594                                  
  3595                                  ; ----------------------------------------------------------------------------
  3596                                  
  3597                                  call_bios_code:	; proc far			
  3598 0000174D 2EFF36[4B17]            		push	word [cs:addr_of_bcretf] 
  3599                                  					; set up near return to far return
  3600 00001752 2EFF36[D706]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3601 00001757 55                      		push	bp		; save offset of utility function
  3602 00001758 CB                      		retf			; far jump to (DOS)BIOS code
  3603                                  
  3604                                  ; ----------------------------------------------------------------------------
  3605                                  		
  3606                                  		; 20/12/2022
  3607                                  ;flp_drvs	db 0			
  3608                                  
  3609                                  ; ----------------------------------------------------------------------------
  3610                                  
  3611                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3612                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3613                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3614                                  
  3615                                  ;-----------------------------------------------------------------------------
  3616                                  ; entry point from boot sector
  3617                                  ;-----------------------------------------------------------------------------
  3618                                  
  3619                                  init:		; 27/12/2018
  3620                                  		; MSDOS 6.0 (MSINIT.ASM)
  3621                                  		;=============================================================
  3622                                  		;
  3623                                  		; entry from boot sector. the register contents are:
  3624                                  		;
  3625                                  		;   dl = int 13 drive number we booted from
  3626                                  		;   ch = media byte
  3627                                  		;   bx = first data sector on disk.
  3628                                  		;   ax = first data sector (high)
  3629                                  		;   di = sectors/fat for the boot media.
  3630                                  
  3631                                  		; 07/04/2018
  3632                                  		;=============================================================
  3633                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3634                                                  ; DL = [bsDriveNumber]
  3635                                  		; DH = [bsMedia]
  3636                                  		; AX = [bsSectors] ; Total sectors
  3637                                  		; DS = 0, SS = 0
  3638                                  		; BP = 7C00h
  3639                                  
  3640                                  		; 29/09/2023
  3641                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  3642                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  3643                                  	
  3644                                  ; 20/12/2022
  3645                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3646                                  %if 0	
  3647                                  		cli
  3648                                  
  3649                                  		push	ax
  3650                                  		xor	ax, ax
  3651                                  		mov	ds, ax
  3652                                  		pop	ax
  3653                                  %endif
  3654                                  
  3655                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3656                                  
  3657                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3658                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3659                                  
  3660                                  ;-----------------------------------------------------------------------------
  3661                                  ; initialization - stage 1
  3662                                  ;-----------------------------------------------------------------------------
  3663                                  ; 02/06/2018 - Retro DOS v3.0
  3664                                  		
  3665                                  		; 21/12/2022
  3666                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3667                                  		;mov	bx, 60h
  3668                                  		;mov	es, bx
  3669                                  		;mov	si, bp
  3670                                  		;sub	di, di
  3671                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3672                                  		;;mov	cl, 35
  3673                                  		;rep	movsw
  3674                                  
  3675 00001759 0E                      		push	cs
  3676 0000175A 1F                      		pop	ds
  3677                                  
  3678                                  		; 20/03/2019 - Retro DOS v4.0
  3679                                  		;cli		; turn interrupts off while manupulating stack
  3680                                  		;mov	ss, cx	; set stack segment register
  3681 0000175B BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3682                                  		;sti		; turn interrupts on
  3683                                  
  3684                                  		; 27/03/2018
  3685                                  		;mov	cx, KERNEL_SIZE	; words !
  3686                                  
  3687                                  		; 20/03/2019
  3688 0000175E B90080                  		mov	cx, 32768 ; 65536 bytes
  3689                                  
  3690                                  		; 21/12/2022
  3691                                  		; 07/04/2018
  3692 00001761 BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3693                                  		;mov	bl, KERNEL_SEGMENT
  3694 00001764 8EC3                    		mov	es, bx
  3695 00001766 31FF                    		xor	di, di
  3696 00001768 89FE                    		mov	si, di
  3697                                  		
  3698                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3699                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3700 0000176A F3A5                    		rep	movsw
  3701                                  
  3702                                  		; 20/03/2019 - Retro DOS v4.0
  3703 0000176C 53                      		push	bx
  3704 0000176D 68[7117]                		push	init0
  3705 00001770 CB                      		retf
  3706                                  init0:	
  3707                                  		; 20/12/2022
  3708                                  		; (combined kernel file > 64KB)
  3709                                  
  3710                                  		; 20/03/2019
  3711 00001771 B520                    		mov	ch, 20h
  3712 00001773 8ED9                    		mov	ds, cx ; 2000h
  3713                                  		;mov	cx, 1070h
  3714 00001775 B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3715 00001778 8EC1                    		mov	es, cx
  3716                                  		
  3717                                  		; 21/12/2022
  3718                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3719                                  		; 28/09/2023
  3720                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  3721                                  
  3722                                  		;mov	cx, KERNEL_SIZE - 32768
  3723                                  		; 28/09/2023 (BugFix)
  3724 0000177A B90000                  		mov	cx, NXWORDCOUNT
  3725                                  		;shr	cx, 1 ; 28/09/2023
  3726                                  		;xor	si, si
  3727                                  		;xor	di, di
  3728 0000177D F3A5                    		rep	movsw
  3729                                  
  3730                                  		; 28/09/2023
  3731                                  		;; 17/06/2018 
  3732                                  		;mov	ds, bx
  3733                                  		;; 21/03/2019
  3734                                  		;mov	es, bx
  3735                                  ;init0:
  3736                                  ;		;push	es
  3737                                  ;		push	bx ; 20/03/2019
  3738                                  ;		push	init1 ; 07/04/2018
  3739                                  ;		retf	; jump to 0070h:init1
  3740                                  ;init:
  3741                                  init1:
  3742                                  		; 20/12/2022
  3743                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3744                                  		; for full MSDOS compatibility.
  3745                                  
  3746 0000177F 8EC1                    		mov	es, cx ; 0
  3747 00001781 8ED9                    		mov	ds, cx ; 0
  3748                                  
  3749 00001783 B82205                  		mov	ax, SEC9
  3750                                  
  3751                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3752 00001786 B378                    		mov	bl, 1Eh*4
  3753                                  				; INT 1Eh points to diskette parms table
  3754                                  
  3755                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3756                                   		; (do not move the DPT if is not original ROMBIOS table)
  3757                                  
  3758                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3759                                  		;;jnz	short mov_dpt
  3760                                  
  3761                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3762                                  		;je	short dont_mov_dpt
  3763                                  
  3764                                  		;mov	si, [bx] ; [1Eh*4]		
  3765                                  ;mov_dpt:
  3766                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3767 00001788 C537                    		lds	si, [bx]
  3768 0000178A 89C7                    		mov	di, ax  ; SEC9
  3769 0000178C B10B                    		mov	cl, 11
  3770                                  		;cld
  3771 0000178E F3A4                    		rep	movsb
  3772                                  
  3773                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3774 00001790 8ED9                    		mov	ds, cx ; 0
  3775 00001792 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3776 00001794 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3777                                  ;dont_mov_dpt:
  3778                                  
  3779                                  ; 20/12/2022 - Retro DOS v4.0
  3780                                  %if 0
  3781                                  		; 27/12/2018 - Retro DOS v4.0
  3782                                  		; 'Starting MS-DOS...' message
  3783                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3784                                  		; (0070h:96A3h)
  3785                                  
  3786                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3787                                  		mov     ah, 0Eh
  3788                                  		;bh = 0
  3789                                          	mov     bl, 7		; "normal" attribute and page
  3790                                  startmsg_nxt_chr:  
  3791                                  		lodsb
  3792                                  		or	al, al
  3793                                          	jz	short startmsg_ok
  3794                                         
  3795                                  		int	10h		; video write
  3796                                          	jmp	short startmsg_nxt_chr
  3797                                  
  3798                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3799                                  
  3800                                  startmsg_ok:
  3801                                  
  3802                                  %endif
  3803                                  
  3804                                  ;-----------------------------------------------------------------------------
  3805                                  ; initialization - stage 2
  3806                                  ;-----------------------------------------------------------------------------
  3807                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3808                                  
  3809                                  
  3810                                  ; 19/03/2018
  3811                                  ; Retro DOS v2.0 (24/02/2018)
  3812                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3813                                  
  3814                                  ;------------------------------------------------------------------------
  3815                                  ;									:
  3816                                  ;	System initialization						:
  3817                                  ;									:
  3818                                  ;	The entry conditions are established by the bootstrap		:
  3819                                  ;	loader and are considered unknown. The following jobs		:
  3820                                  ;	will be performed by this module:				:
  3821                                  ;									:
  3822                                  ;	1.	All device initialization is performed			:
  3823                                  ;	2.	A local stack is set up and DS:SI are set		:
  3824                                  ;		to point to an initialization table. Then		:
  3825                                  ;		an inter-segment call is made to the first		:
  3826                                  ;		byte of the dos 					:
  3827                                  ;	3.	Once the dos returns from this call the ds		:
  3828                                  ;		register has been set up to point to the start		:
  3829                                  ;		of free memory. The initialization will then		:
  3830                                  ;		load the command program into this area 		:
  3831                                  ;		beginning at 100 hex and transfer control to		:
  3832                                  ;		this program.						:
  3833                                  ;									:
  3834                                  ;------------------------------------------------------------------------
  3835                                  		
  3836                                  		; 20/12/2022
  3837                                  		; ----------------------
  3838                                  		; Registers
  3839                                  		; ----------------------
  3840                                  		; DL = [bsDriveNumber]
  3841                                  		; DH = [bsMedia]
  3842                                  		; DS = 0, ES = 0, SS = 0
  3843                                  		; BP = 7C00h
  3844                                  		; SP = 700h
  3845                                  		; ----------------------
  3846                                  		; CX = 0				
  3847                                  
  3848                                  ; 02/10/2022 - 20/12/2022
  3849                                  ; ------------------------------------------------------------------------------
  3850                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3851                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3852                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3853                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3854                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3855                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3856                                  ; ------------------------------------------------------------------------------
  3857                                  
  3858                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3859                                  ;
  3860                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3861                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3862                                  ;;	data sector of the bios.
  3863                                  ;
  3864                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3865                                  ;		mov	[cs:bios_l], bx
  3866                                  
  3867                                  ; with the following information from msload, we don't need the
  3868                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3869                                  ;     limitation of msbio.com file.
  3870                                  
  3871                                  		; 14/12/2023
  3872                                  		; 21/12/2022
  3873                                  		;cli
  3874                                  
  3875 00001797 0E                      		push	cs		; Save a peck of interrupt vectors...
  3876 00001798 07                      		pop	es
  3877                                  		;push	cx
  3878                                  		;push	di
  3879                                  		; 20/12/2022
  3880 00001799 B105                    		mov	cl, 5
  3881                                  		;mov	cx, 5		; NUMROMVECTORS
  3882                                  					; no. of rom vectors to	be saved
  3883                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3884 0000179B BE[0001]                		mov	si, RomVectors
  3885                                  
  3886                                  		; 14/12/2023
  3887 0000179E FA                      		cli
  3888                                  next_int_:		
  3889 0000179F 2E                      		cs	; 16/10/2022
  3890 000017A0 AC                      		lodsb		
  3891                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3892 000017A1 98                      		cbw			; ax = interrupt number
  3893 000017A2 D1E0                    		shl	ax, 1
  3894 000017A4 D1E0                    		shl	ax, 1		; int no * 4
  3895 000017A6 89C7                    		mov	di, ax		; interrupt vector address
  3896 000017A8 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3897                                  					; saving address in di
  3898                                  		;lodsw			; movsw
  3899                                  		;stosw
  3900                                  		;lodsw			; movsw
  3901                                  		;stosw			; save the vector
  3902                                  		; 20/12/2022
  3903 000017AA A5                      		movsw
  3904 000017AB A5                      		movsw		
  3905                                  
  3906 000017AC 87F7                    		xchg	si, di
  3907 000017AE E2EF                    		loop	next_int_
  3908                                  		
  3909                                  		;pop	di
  3910                                  		;pop	cx
  3911                                  
  3912                                  ; we need to save int13 in two places in case we are running on an at.
  3913                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3914                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3915                                  ; rom int13 routine, we must have that rom address also stored away.
  3916                                  
  3917                                  		; 20/12/2022
  3918                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3919                                  		;mov	[cs:Orig13], ax
  3920                                  		;mov	ax, [cs:Old13+2]
  3921                                  		;mov	[cs:Orig13+2], ax
  3922                                  
  3923                                  		; 14/12/2023
  3924                                  		;cli
  3925                                  
  3926                                  		; 16/10/2022
  3927 000017B0 C7064C00[6B07]          		mov	word [13h*4], block13
  3928                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3929                                  					; set up int 13	for new	action
  3930 000017B6 8C0E4E00                		mov	[13h*4+2], cs
  3931                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3932 000017BA C7065400[3F08]          		mov	word [15h*4], Int15
  3933                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3934                                  					; set up int 15	for new	action
  3935 000017C0 8C0E5600                		mov	[15h*4+2], cs
  3936                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3937 000017C4 C7066400[F007]          		mov	word [19h*4], int19
  3938                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3939                                  					; set up int 19	for new	action
  3940 000017CA 8C0E6600                		mov	[19h*4+2], cs
  3941                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3942                                  
  3943                                  		; 20/12/2022
  3944 000017CE 0E                      		push	cs
  3945 000017CF 1F                      		pop	ds
  3946                                  		
  3947 000017D0 A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3948 000017D3 A3[B400]                		mov	[Orig13], ax
  3949 000017D6 A1[0801]                		mov	ax, [Old13+2]
  3950 000017D9 A3[B600]                		mov	[Orig13+2], ax
  3951                                  					; ;
  3952 000017DC FB                      		sti
  3953 000017DD CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3954                                  					; Return: AX = equipment flag bits
  3955                                  
  3956                                  ; we have to support a system that does not have any diskette
  3957                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3958                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3959                                  ; otherwise, the system has only hardfiles.
  3960                                  ;
  3961                                  ; important thing is that still, for compatibility reason, the drive letter
  3962                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3963                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3964                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3965                                  ; drives will get "invalid drive letter ..." message. we are going to
  3966                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3967                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3968                                  
  3969                                  ; check the register returned by the equipment determination interrupt
  3970                                  ; we have to handle the case of no diskettes in the system by faking
  3971                                  ; two dummy drives.
  3972                                  ;
  3973                                  ; if the register indicates that we do have floppy drives we don't need
  3974                                  ; to do anything special.
  3975                                  ;
  3976                                  ; if the register indicates that we don't have any floppy drives then
  3977                                  ; what we need to do is set the fakefloppydrv variable, change the
  3978                                  ; register to say that we do have floppy drives and then go to execute
  3979                                  ; the code which starts at notsingle. this is because we can skip the
  3980                                  ; code given below which tries to find if there are one or two drives
  3981                                  ; since we already know about this.
  3982                                  
  3983                                  		; 06/05/2019 - Retro DOS v4.0
  3984 000017DF 88C1                    		mov	cl, al
  3985                                  
  3986                                  		; 12/12/2022
  3987 000017E1 A801                    		test	al, 1
  3988                                  		;test	ax, 1		; floppy drives	present	?
  3989 000017E3 751E                    		jnz	short normalfloppydrv ;	yes.
  3990                                  
  3991                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3992                                  ; whether it is an old ROM BIOS or a new one
  3993                                  ;
  3994                                  ; WARNING !!!
  3995                                  ;
  3996                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3997                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3998                                  
  3999                                  		; 20/12/2022
  4000                                  		;push	ax
  4001                                  		;push	bx
  4002                                  		;push	cx
  4003 000017E5 52                      		push	dx
  4004                                  		;push	di
  4005 000017E6 06                      		push	es
  4006 000017E7 B408                    		mov	ah, 8
  4007 000017E9 B200                    		mov	dl, 0
  4008 000017EB CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4009                                  					; DL = drive number
  4010                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4011                                  					; DL = number of consecutive drives
  4012                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4013 000017ED 7202                    		jc	short _gdskp_error
  4014                                  		;;mov	[cs:flp_drvs], dl
  4015                                  		; 20/12/2022
  4016                                  		; ds = cs
  4017                                  		;mov	[flp_drvs], dl
  4018 000017EF 88D1                    		mov	cl, dl
  4019                                  _gdskp_error:	
  4020                                  		; 20/12/2022			
  4021 000017F1 07                      		pop	es
  4022                                  		;pop	di
  4023 000017F2 5A                      		pop	dx
  4024                                  		;pop	cx
  4025                                  		;pop	bx
  4026                                  		;pop	ax
  4027                                  		
  4028 000017F3 720E                    		jc	short normalfloppydrv
  4029                                  					; if error it is an old ROM BIOS
  4030                                  					; so, lets assume that ROM BIOS lied
  4031                                  		; 20/12/2022
  4032                                  		; ds = cs
  4033                                  		;cmp	byte [flp_drvs], 0
  4034                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4035                                  		;jz	short _set_fake_flpdrv
  4036                                  		;;mov	al, [cs:flp_drvs]
  4037                                  		;mov	al, [flp_drvs]
  4038                                  		;;dec	al		; make it zero based
  4039                                  		;; 18/12/2022
  4040                                  		;dec	ax
  4041                                  		;jmp	short got_num_flp_drvs
  4042                                  		
  4043                                  		; 20/12/2022
  4044 000017F5 08C9                    		or	cl, cl ; [flp_drvs]
  4045 000017F7 7403                    		jz	short _set_fake_flpdrv		
  4046 000017F9 49                      		dec	cx	
  4047 000017FA EB0B                    		jmp	short got_num_flp_drvs
  4048                                  ; ----------------------------------------------------------------------------
  4049                                  
  4050                                  _set_fake_flpdrv:
  4051                                  		; 20/12/2022
  4052                                  		; ds = cs
  4053                                  		;inc	cl	; cl = 1
  4054                                  		; 14/12/2023
  4055 000017FC 41                      		inc	cx	; cl = 1
  4056 000017FD 880E[C916]              		mov	[fakefloppydrv], cl ; 1
  4057                                  		;mov	byte [fakefloppydrv], 1
  4058                                  		;;mov	byte [cs:fakefloppydrv], 1
  4059                                  					; we don't have any floppy drives.
  4060                                  		; 20/12/2022
  4061                                  		;mov	ax, 1
  4062 00001801 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4063                                  ; ----------------------------------------------------------------------------
  4064                                  
  4065                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4066                                  		; 20/12/2022
  4067                                  		;rol	al, 1		; there	exist floppy drives.
  4068                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4069 00001803 D0C1                    		rol	cl, 1
  4070 00001805 D0C1                    		rol	cl, 1
  4071                                  got_num_flp_drvs:			
  4072                                  		;;and	ax, 3		; only look at bits 0 &	1
  4073                                  		; 18/12/2022
  4074                                  		;and	al, 3
  4075                                  		; 20/12/2022
  4076 00001807 80E103                  		and	cl, 3
  4077 0000180A 7505                    		jnz	short notsingle	; zero means single drive system
  4078                                  		; 20/12/2022
  4079 0000180C 41                      		inc	cx
  4080                                  		;inc	ax		; pretend it's a two drive system
  4081                                  settwodrive:				; set this to two fakedrives
  4082                                  		; 20/12/2022
  4083                                  		; ds = cs
  4084 0000180D FE06[7800]              		inc	byte [single]
  4085                                  		;inc	byte [cs:single] ; remember this
  4086                                  notsingle:	
  4087                                  		; 20/12/2022
  4088                                  		;inc	ax		; ax has number	of drives, 2-4
  4089                                  		;			; is also 0 indexed boot drive if we
  4090                                  		;			; booted off hard file
  4091                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4092                                  
  4093                                  		; 20/12/2022
  4094                                  		;inc	cl	; cl >= 2
  4095                                  		; 14/12/2023
  4096 00001811 41                      		inc	cx	; cl >= 2
  4097                                  
  4098                                  ; 16/10/2022
  4099                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4100                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4101                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4102                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4103                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4104                                  SEC9	EQU	522h	; address of disk parameters
  4105                                  CHROUT	EQU	29h
  4106                                  LSTDRV	EQU     504h
  4107                                  
  4108                                  ; determine whether we booted from floppy or hard disk...
  4109                                  
  4110                                  		; 20/12/2022
  4111 00001812 88C8                    		mov	al, cl	; 26/05/2019
  4112                                  
  4113 00001814 F6C280                  		test	dl, 80h		; boot from floppy ?
  4114 00001817 7502                    		jnz	short gothrd	; no.
  4115 00001819 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4116                                  gothrd:					
  4117                                  
  4118                                  ; MSDOS 6.0
  4119                                  ;   ax = 0-based drive we booted from
  4120                                  ;   bios_l, bios_h set.
  4121                                  ;   cl = number of floppies including fake one
  4122                                  ;   ch = media byte
  4123                                  
  4124                                  ; Retro DOS 4.0 - 27/12/2018 
  4125                                  ;  (from Retro DOS v2.0 boot sector)
  4126                                  ;   dl = int 13 drive number we booted from
  4127                                  ;   dh = media byte
  4128                                  
  4129                                  		; 20/12/2022
  4130 0000181B 88F5                    		mov	ch, dh		; 01/07/2018
  4131                                  
  4132                                  		; cl = number of floppies
  4133                                  		; ch = media byte
  4134                                  
  4135                                  		; set up local stack
  4136                                  
  4137                                  		; 20/12/2022
  4138                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4139                                  					; bios_l, bios_h set.
  4140                                  					; cl = number of floppies including fake one
  4141                                  					; ch = media byte
  4142                                  		; 20/12/2022
  4143                                  		; es = ds = cs
  4144                                  		; ss = 0
  4145                                  		; sp = 700h
  4146                                  
  4147                                  		; 20/12/2022
  4148                                  		;cli
  4149                                  		;mov	ss, dx		; set stack segment and stack pointer
  4150                                  		;mov	sp, 700h
  4151                                  		;sti
  4152                                  
  4153 0000181D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4154                                  		
  4155 0000181E 88EC                    		mov	ah, ch		; FAT ID to AH
  4156 00001820 50                      		push	ax ; (**)	; save boot drive number and media byte
  4157                                  		
  4158                                  ; let model_byte, secondary_model_byte be set here!!!
  4159                                  
  4160 00001821 B4C0                    		mov	ah, 0C0h
  4161 00001823 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4162 00001825 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4163 00001827 80FC00                  		cmp	ah, 0
  4164 0000182A 7510                    		jnz	short no_rom_system_conf
  4165                                  
  4166                                  ;		; 20/12/2022
  4167                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4168                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4169                                  ;
  4170                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4171                                  ;
  4172                                  ;		on return:
  4173                                  ;		CF = 0 if successful
  4174                                  ;		   = 1 if error
  4175                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4176                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4177                                  ;
  4178                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4179                                  ;
  4180                                  ;		Offset Size	     Description
  4181                                  ;
  4182                                  ;		  00   word   length of descriptor (8 minimum)
  4183                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4184                                  ;		  03   byte   secondary model byte
  4185                                  ;		  04   byte   BIOS revision level (zero based)
  4186                                  ;		  05   byte   feature information, see below
  4187                                  ;		  06   dword  reserved
  4188                                  
  4189                                  		; 20/12/2022
  4190                                  		; ds = cs
  4191 0000182C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4192 00001830 A2[3506]                		mov	[model_byte], al
  4193                                  		;mov	[cs:model_byte], al
  4194                                  					; get/save model byte
  4195 00001833 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4196 00001837 A2[3606]                		mov	[secondary_model_byte], al
  4197                                  		;mov	[cs:secondary_model_byte], al
  4198                                  					; get/save secondary model byte
  4199 0000183A EB0C                    		jmp	short turn_timer_on
  4200                                  ;-----------------------------------------------------------------------------
  4201                                  
  4202                                  no_rom_system_conf:			
  4203 0000183C BEFFFF                  		mov	si, 0FFFFh
  4204 0000183F 8EC6                    		mov	es, si
  4205                                  		; 20/12/2022
  4206 00001841 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4207 00001845 A2[3506]                		mov	[model_byte], al
  4208                                  		;mov	[cs:model_byte], al ; save model byte
  4209                                  turn_timer_on:				
  4210 00001848 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4211 0000184A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4212                                  					; AKPORT
  4213                                  
  4214                                  ; some olivetti m24 machines have an 8530 serial communications
  4215                                  ; chip installed at io address 50h and 52h. if we're running
  4216                                  ; on one of those, we must inhibit the normal aux port initialization
  4217                                  
  4218                                  		; 20/12/2022
  4219                                  		; ds = cs
  4220 0000184C 803E[3506]00            		cmp	byte [model_byte], 0
  4221                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4222 00001851 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4223                                  					; (except olivetti m24)
  4224 00001853 E466                    		in	al, 66h		; is 8530 installed?
  4225 00001855 A820                    		test	al, 20h
  4226 00001857 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4227 00001859 B00F                    		mov	al, 0Fh		; double check
  4228 0000185B E650                    		out	50h, al
  4229 0000185D E450                    		in	al, 50h
  4230 0000185F A801                    		test	al, 1		; this test was	copied from olivetti
  4231 00001861 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4232                                  
  4233                                  not_olivetti_m24:
  4234 00001863 B003                    		mov	al, 3		; init com4
  4235 00001865 E84008                  		call	aux_init
  4236 00001868 B002                    		mov	al, 2		; init com3
  4237 0000186A E83B08                  		call	aux_init
  4238 0000186D B001                    		mov	al, 1		; init com2
  4239 0000186F E83608                  		call	aux_init
  4240 00001872 30C0                    		xor	al, al		; init com1
  4241 00001874 E83108                  		call	aux_init
  4242                                  
  4243                                  skip_aux_port_init:			
  4244 00001877 B002                    		mov	al, 2		; init lpt3
  4245 00001879 E82408                  		call	print_init
  4246 0000187C B001                    		mov	al, 1		; init lpt2
  4247 0000187E E81F08                  		call	print_init
  4248 00001881 30C0                    		xor	al, al		; init lpt1
  4249 00001883 E81A08                  		call	print_init
  4250                                  
  4251 00001886 31D2                    		xor	dx, dx	; 0
  4252 00001888 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4253 0000188A 8EC2                    		mov	es, dx
  4254 0000188C 31C0                    		xor	ax, ax
  4255                                  		; 16/10/2022
  4256 0000188E BF3405                  		mov	di, INITSPOT	; 0534h
  4257                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4258                                  					; IBM wants 4 zeros here
  4259 00001891 AB                      		stosw
  4260 00001892 AB                      		stosw
  4261 00001893 8CC8                    		mov	ax, cs		; fetch	segment
  4262 00001895 C7066C00[E506]          		mov	word [BRKADR], cbreak
  4263                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4264                                  					; break	entry point
  4265 0000189B A36E00                  		mov	[BRKADR+2], ax		
  4266                                  		;mov	ds:6Eh,	ax	; vector for break
  4267 0000189E C706A400[5907]          		mov	word [CHROUT*4], outchr
  4268                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4269 000018A4 A3A600                  		mov	[CHROUT*4+2], ax
  4270                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4271                                  
  4272 000018A7 BF0400                  		mov	di, 4
  4273 000018AA BB[EB06]                		mov	bx, intret ; 19/10/2022
  4274                                  		;mov	bx, offset intret ; intret (cs:intret)
  4275                                  					; will initialize rest of interrupts
  4276 000018AD 93                      		xchg	ax, bx
  4277 000018AE AB                      		stosw			; location 4
  4278 000018AF 93                      		xchg	ax, bx		; cs:
  4279 000018B0 AB                      		stosw			; int 1	; location 6
  4280 000018B1 83C704                  		add	di, 4
  4281 000018B4 93                      		xchg	ax, bx
  4282 000018B5 AB                      		stosw			; location 12
  4283 000018B6 93                      		xchg	ax, bx		; cs:
  4284 000018B7 AB                      		stosw			; int 3	; location 14
  4285 000018B8 93                      		xchg	ax, bx
  4286 000018B9 AB                      		stosw			; location 16
  4287 000018BA 93                      		xchg	ax, bx		; cs:
  4288 000018BB AB                      		stosw			; int 4	; location 18
  4289                                  
  4290                                  
  4291                                  ;		; 20/12/2022
  4292                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4293                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4294                                  ;	
  4295                                  ;		50:00	byte	Print screen status byte
  4296                                  ;				 00 = PrtSc not active,
  4297                                  ;				 01 = PrtSc in progress
  4298                                  ;				 FF = error
  4299                                  ;		50:01  3 bytes	Used by BASIC
  4300                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4301                                  ;		50:05  10bytes	POST work area
  4302                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4303                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4304                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4305                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4306                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4307                                  ;		50:20	word	DOS dynamic storage
  4308                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4309                                  ;		50:30	4bytes	MODE command
  4310                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4311                                  
  4312 000018BC 89160005                		mov	[0500h], dx ; 0
  4313                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4314 000018C0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4315                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4316                                  
  4317                                  ; we need to initialize the cs:motorstartup variable from the disk
  4318                                  ; parameter table at sec9. the offsets in this table are defined in
  4319                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4320                                  
  4321 000018C4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4322                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4323                                  					; [522h+0Ah]
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327 000018C7 2EA2[2601]              		mov	[cs:motorstartup], al
  4328 000018CB 2E803E[3506]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4329 000018D1 720B                    		jb	short no_diddle	; no
  4330 000018D3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4331                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4332                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4333 000018D9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4334                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4335                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4336                                  no_diddle:				
  4337 000018DE CD12                    		int	12h		; MEMORY SIZE -
  4338                                  					; Return: AX = number of contiguous 1K blocks of memory
  4339 000018E0 B106                    		mov	cl, 6
  4340 000018E2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4341                                  		
  4342                                  		; 20/12/2022
  4343                                  		; 03/07/2018 - 27/12/2018
  4344                                  		;pop	cx ; (**)
  4345                                  		;mov	[cs:drvfat], cx
  4346                                  		
  4347 000018E4 50                      		push	ax ; (*)	; save real top	of memory
  4348                                  
  4349                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4350                                  
  4351                                  ;M068 - BEGIN
  4352                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4353                                  
  4354                                  		; 20/12/2022
  4355                                  		; ds = 0
  4356                                  
  4357                                  		;push	ds
  4358                                  		;push	bx		; pushes not required but since this
  4359                                  					; happens to be a last minute change
  4360                                  					; & since it is only init code.
  4361                                  		;xor	bx, bx
  4362                                  		;mov	ds, bx
  4363                                  
  4364                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  4365                                  		;mov	bx, [2Fh*4]
  4366                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4367                                  		;mov	ds, [2Fh*4+2]
  4368                                  		; 29/09/2023
  4369 000018E5 C51EBC00                		lds	bx, [2Fh*4]
  4370                                  
  4371 000018E9 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4372                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4373 000018EE 750F                    		jnz	short SkipRPL
  4374 000018F0 807F054C                		cmp	byte [bx+5], 'L'
  4375                                  		;cmp	byte ptr [bx+5], 'L'
  4376 000018F4 7509                    		jnz	short SkipRPL
  4377 000018F6 89C2                    		mov	dx, ax		; get TOM into DX
  4378 000018F8 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4379 000018FB CD2F                    		int	2Fh		; Get new TOM from any RPL
  4380 000018FD 89D0                    		mov	ax, dx
  4381                                  SkipRPL:	
  4382                                  		; 20/12/2022
  4383                                  		;pop	bx
  4384                                  		;pop	ds
  4385                                  
  4386                                  ;M068 - END
  4387                                  		; 20/12/2022
  4388                                  		; 27/12/2018
  4389 000018FF 0E                      		push	cs
  4390 00001900 1F                      		pop	ds
  4391                                  
  4392                                  		; 18/03/2019 - Retro DOS v4.0
  4393                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4394                                  		;mov	[cs:fatloc], ax	; location to read fat
  4395                                  
  4396                                  		; 01/07/2018
  4397                                  		; 08/04/2018
  4398                                  		; 28/03/2018
  4399                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4400 00001901 83E840                  		sub	ax, 64
  4401 00001904 A3[C316]                		mov	[init_bootseg], ax ; 20/12/2022
  4402                                  		;mov	[cs:init_bootseg], ax
  4403                                  
  4404                                  		; 27/12/2018 - Retro DOS v4.0
  4405                                  		;;pop	ax ; (*)	; get back real top of memory
  4406                                  		;pop	dx ; (*)
  4407                                  		; 29/09/2023 (BugFix)
  4408 00001907 58                      		pop	ax ; (*)	; get back real top of memory
  4409                                  
  4410                                  		; 20/12/2022
  4411                                  		; 27/12/2018
  4412 00001908 59                      		pop	cx ; (**)
  4413 00001909 890E[C016]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4414                                  
  4415                                  		; 20/12/2022
  4416                                  
  4417                                  		;mov	dx, 46Dh	; SYSINIT segment
  4418 0000190D BA3304                  		mov	dx, SYSINITSEG	; 17/10/2022
  4419 00001910 8EDA                    		mov	ds, dx
  4420                                  
  4421                                  ; set pointer to resident device driver chain
  4422                                  
  4423                                  		; 17/10/2022
  4424 00001912 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4425                                  		;mov	word [273h], res_dev_list
  4426                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4427                                  					; [SYSINIT+DEVICE_LIST]
  4428 00001918 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4429                                  		;mov	[275h], cs
  4430                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4431                                  
  4432 0000191C A3[9202]                		mov	[MEMORYSIZE], ax
  4433                                  		;mov	[292h], ax
  4434                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4435                                  
  4436 0000191F FEC1                    		inc	cl
  4437 00001921 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4438                                  		;mov	[296h], cl
  4439                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4440                                  
  4441 00001925 C706[7102]B107          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4442                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4443                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4444                                  					; dos_load_seg
  4445                                  
  4446                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4447                                  ; printer cards. we initialize this value to point to an iret only if
  4448                                  ;
  4449                                  ; 1) the original segment points to storage inside valid ram.
  4450                                  ;
  4451                                  ; 2) the original segment is 0F000:xxxx
  4452                                  
  4453                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4454                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4455                                  		;mov	es, ax
  4456                                  		; 20/12/2022
  4457                                  		;push	ds ; SYSINITSEG
  4458                                  		;pop	es
  4459 0000192B 8EC2                    		mov	es, dx ; SYSINITSEG
  4460 0000192D 31C0                    		xor	ax, ax ; 0
  4461 0000192F 8ED8                    		mov	ds, ax		; segment 0
  4462                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4463 00001931 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4464                                  		; 18/10/2022
  4465 00001934 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4466                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4467 00001939 7605                    		jbe	short resetintf
  4468 0000193B 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4469 0000193E 750A                    		jnz	short keepintf
  4470                                  resetintf:	
  4471 00001940 C7063C00[EB06]          		mov	word [0Fh*4], intret			
  4472                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4473 00001946 8C0E3E00                		mov	word [0Fh*4+2], cs
  4474                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4475                                  keepintf:				
  4476                                  ; end important
  4477                                  
  4478                                  ; 17/10/2022
  4479                                  ; 28/12/2018 - Retro DOS v4.0
  4480                                  
  4481                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4482                                  ;
  4483                                  ; we will check if the system has ibm extended keyboard by
  4484                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4485                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4486                                  ; for the extended keyboard function. use cx as the temporary register.
  4487                                  
  4488                                  		; 20/12/2022
  4489                                  		; ds = 0
  4490                                  		;xor	cx, cx
  4491                                  		;mov	ds, cx
  4492                                  
  4493 0000194A 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4494                                  
  4495                                  		; 20/12/2022
  4496                                  		; 20/03/2019
  4497 0000194E 0E                      		push	cs
  4498 0000194F 1F                      		pop	ds
  4499                                  
  4500                                  		;test	cl, 00010000b ; 10h
  4501 00001950 F6C110                  		test	cl, 10h		; extended keyboard ?
  4502 00001953 740A                    		jz	short org_key	; no, original keyboard
  4503                                  
  4504                                  		; 20/12/2022
  4505                                  		;  ds = cs
  4506 00001955 C606[DE04]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4507 0000195A C606[DF04]11            		mov	byte [keysts_func], 11h
  4508                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4509                                  		;mov	byte [cs:keysts_func], 11h
  4510                                  					; change for extended keyboard functions
  4511                                  org_key:
  4512                                  
  4513                                  ; 02/06/2018 - Retro DOS v3.0
  4514                                  
  4515                                  ;**************************************************************
  4516                                  ;	will initialize the number of drives
  4517                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4518                                  ;	the indications are as follows:
  4519                                  ;
  4520                                  ;	bits	7	6	drives
  4521                                  ;		0	0	1
  4522                                  ;		0	1	2
  4523                                  ;		1	0	3
  4524                                  ;		1	1	4
  4525                                  ;**************************************************************
  4526                                  		
  4527                                  		; 20/12/2022
  4528                                  		; ds = cs		
  4529                                  		;push	cs
  4530                                  		;pop	ds
  4531                                  		; 21/12/2022
  4532                                  		;push	cs
  4533                                  		;pop	es
  4534                                  
  4535 0000195F E88508                  		call	cmos_clock_read	; If cmos clock	exists,
  4536                                  					; then set the system time according to	that.
  4537                                  					; also,	reset the cmos clock rate.
  4538                                  		; 18/10/2022
  4539                                  		;mov	word ptr BData_start, offset harddrv ;
  4540                                  					; set up pointer to hdrive
  4541                                  		; 02/10/2022
  4542 00001962 C706[0000][0C09]        		mov	word [hdrv_pat], harddrv 
  4543                                  		
  4544                                  		; 20/12/2022
  4545                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4546 00001968 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4547 00001969 30E4                    		xor	ah, ah		; chuck	fat id byte
  4548 0000196B A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4549 0000196E A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4550 00001971 D1E0                    		shl	ax, 1
  4551 00001973 0106[3A17]              		add	[last_dskdrv_table], ax
  4552                                  
  4553                                  		; 14/12/2023
  4554                                  		; 13/12/2023 - Retro DOS v4.1 IO.SYS
  4555                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS
  4556                                  		; ---------------------------------- 
  4557                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS (IBMBIO.COM)
  4558                                  		; ((MSDOS 6.22 IO.SYS & PCDOS 7.1 IBMBIO.COM))
  4559                                  		; ........
  4560 00001977 1E                      		push    ds
  4561 00001978 B800F0                  		mov     ax, 0F000h
  4562 0000197B 8ED8                    		mov     ds, ax
  4563                                  
  4564 0000197D 813EEAFF434F            		cmp	word [0FFEAh], 'CO' ; 'COMPAQ'
  4565 00001983 751F                    		jne	short skip_mode2
  4566 00001985 813EECFF4D50            		cmp	word [0FFECh], 'MP'
  4567 0000198B 7517                    		jne	short skip_mode2
  4568 0000198D 813EEEFF4151            		cmp	word [0FFEEh], 'AQ'
  4569 00001993 750F                    		jne	short skip_mode2
  4570                                  
  4571 00001995 B800E4                  		mov	ax, 0E400h	; get advanced system info (COMPAQ ROMBIOS)
  4572 00001998 CD15                    		int	15h
  4573 0000199A 7208                    		jc	short skip_mode2
  4574                                  		; 10/12/2023
  4575                                  		; PCDOS 7.1 IBMBIO.COM
  4576                                  		;or	bx, 0           ; or bx,40h ; enable mode 2
  4577                                  					; (MSDOS 6.0)
  4578                                  		; MSDOS 6.22 IO.SYS
  4579 0000199C 83CB40                  		or	bx, 40h		; enable mode 2 (dual harddisk controller)
  4580 0000199F B880E4                  		mov	ax, 0E480h      ; set advanced system info (COMPAQ ROMBIOS)
  4581 000019A2 CD15                    		int	15h
  4582                                  skip_mode2:
  4583 000019A4 1F                      		pop	ds
  4584                                  		; ........
  4585                                  
  4586 000019A5 B280                    		mov	dl, 80h
  4587 000019A7 B408                    		mov	ah, 8
  4588 000019A9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4589                                  					; DL = drive number
  4590                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4591                                  					; DL = number of consecutive drives
  4592                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4593 000019AB 7204                    		jc	short enddrv
  4594 000019AD 8816[3917]              		mov	[hnum], dl	; save number of hard disk drives
  4595                                  enddrv:
  4596                                  		; 21/12/2022
  4597 000019B1 0E                      		push	cs
  4598 000019B2 07                      		pop	es
  4599                                  
  4600                                  ; scan the list of drives to determine their type. we have three flavors of
  4601                                  ; diskette drives:
  4602                                  ;
  4603                                  ;   48tpi drives    we do nothing special for them
  4604                                  ;   96tpi drives    mark the fact that they have changeline support.
  4605                                  ;   3.5"  drives    mark changeline support and small.
  4606                                  ;
  4607                                  ; the following code uses registers for certain values:
  4608                                  ;
  4609                                  ;   dl - physical drive
  4610                                  ;   ds:di - points to current bds
  4611                                  ;   cx - flag bits for bds
  4612                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4613                                  					
  4614 000019B3 30D2                    		xor	dl, dl
  4615                                  
  4616                                  		; 20/12/2022
  4617                                  		; ds = cs
  4618                                  		; 17/06/2018		 
  4619                                  		;push	cs
  4620                                  		;pop	ds
  4621                                  
  4622 000019B5 C606[2C01]09            		mov	byte [eot], 9
  4623 000019BA BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4624                                  					; to set aside two bdss	for the	two fake floppy	drives
  4625                                  
  4626                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4627                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4628                                  
  4629                                  ; check to see if we are faking floppy drives. if not we don't
  4630                                  ; do anything special. if we are faking floppy drives we need
  4631                                  ; to set aside two bdss for the two fake floppy drives. we
  4632                                  ; don't need to initalise any fields though. so starting at start_bds
  4633                                  ; use the link field in the bds structure to go to the second bds
  4634                                  ; in the list and initalise it's link field to -1 to set the end of
  4635                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4636                                  ; the bds for harddrives.
  4637                                  
  4638 000019BD 803E[C916]01            		cmp	byte [fakefloppydrv], 1
  4639 000019C2 750B                    		jnz	short loop_drive
  4640 000019C4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4641                                  					; di <-	first bds link
  4642 000019C6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4643                                  					; di <-	second bds link
  4644 000019C8 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4645 000019CC E90801                  		jmp	dohard		; allocate/initialise bds for harddrives
  4646                                  ;-----------------------------------------------------------------------------
  4647                                  
  4648                                  loop_drive:				
  4649 000019CF 3A16[7500]              		cmp	dl, [drvmax]
  4650 000019D3 7203                    		jb	short got_more
  4651 000019D5 E9FB00                  		jmp	done_drives
  4652                                  ;-----------------------------------------------------------------------------
  4653                                  
  4654                                  got_more:				
  4655                                  		; 14/12/2023
  4656                                  		;xor	cx, cx		; zero all flags
  4657                                  
  4658 000019D8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4659                                  					; get next bds
  4660 000019DA B600                    		mov	dh, 0		; ff48tpi
  4661                                  					; set form factor to 48	tpi
  4662 000019DC C606[C816]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  4663                                  		
  4664                                  		; 21/12/2022
  4665                                  		;push	ds
  4666                                  		;push	di
  4667                                  		; 14/12/2023 ; *
  4668                                  		;push	cx ; *+ ; cx = 0
  4669 000019E1 52                      		push	dx ; *+
  4670 000019E2 57                      		push	di ; *
  4671 000019E3 06                      		push	es ; es=cs=ds ; 21/12/2022
  4672                                  		; 14/12/2023
  4673 000019E4 52                      		push	dx ; *++
  4674                                  
  4675 000019E5 B408                    		mov	ah, 8
  4676 000019E7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4677                                  					; DL = drive number
  4678                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4679                                  					; DL = number of consecutive drives
  4680                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4681                                  		; 14/12/2023
  4682 000019E9 5B                      		pop	bx ; *++
  4683                                  		;jc	short noparmsfromrom
  4684                                  		; 14/12/2023
  4685 000019EA 7303                    		jnc	short chk_pfr
  4686 000019EC E98000                  		jmp	noparmsfromrom
  4687                                  
  4688                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4689                                  ; in this case, we are going to put bogus informations to bds table.
  4690                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4691                                  ; they are calculated at the later time. this is just for the diagnostic
  4692                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4693                                  ; this should only happen with drive b.
  4694                                  
  4695                                  chk_pfr:
  4696 000019EF 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4697 000019F2 7505                    		jnz	short pfr_ok
  4698                                  
  4699                                  		;mov	ch, 39		; rom gave wrong info.
  4700                                  		;mov	cl, 9		; let's default to 360k.
  4701                                  		; 20/12/2022
  4702 000019F4 B90927                  		mov	cx, 2709h
  4703                                  
  4704 000019F7 B601                    		mov	dh, 1
  4705                                  pfr_ok:					
  4706 000019F9 FEC6                    		inc	dh		; make number of heads 1-based
  4707 000019FB FEC5                    		inc	ch		; make number of cylinders 1-based
  4708 000019FD 8836[C616]              		mov	[num_heads], dh	; save parms returned by rom
  4709 00001A01 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4710 00001A04 880E[C716]              		mov	[sec_trk], cl
  4711 00001A08 882E[C816]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4712                                  
  4713                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4714                                  
  4715 00001A0C 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4716                                  		;jbe	short eot_ok
  4717                                  		; 09/12/2022
  4718                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4719                                  		; 14/08/2023
  4720 00001A10 7604                    		jbe	short eotok
  4721 00001A12 880E[2C01]              		mov	[eot], cl
  4722                                  ;eot_ok:					
  4723                                  eotok:
  4724                                  
  4725                                  ; 14/12/2023
  4726                                  ; 13/12/2023 ('chk_changeline' procedure)
  4727                                  %if 0
  4728                                  		pop	es ; es=cs=ds ; 21/12/2022
  4729                                  		pop	di ; 13/12/2023 ; *
  4730                                  		; 13/12/2023 ; *
  4731                                  		pop	dx ; *+
  4732                                  		;pop	cx ; *+
  4733                                  		;pop	di
  4734                                  		; 21/12/2022
  4735                                  		;pop	ds
  4736                                  
  4737                                  		; 14/12/2023
  4738                                  		; 13/12/2023 - Retro DOS v4.0 & v4.1 IO.SYS - BugFix ; +*+
  4739                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1AAAh)
  4740                                  
  4741                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS - BugFix ; +*+
  4742                                  		; (MSDOS 5.0 & MSDOS 6.22 IO.SYS both have a bug here,
  4743                                  		;  they does not save CX,DX registers before INT 13h func 15h)
  4744                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4745                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4746                                  		;  -- ref: Ralf Brown's Interrupt List --
  4747                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4748                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4749                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4750                                  
  4751                                  		; 13/12/2023
  4752                                  		;push	cx ; *+ ; save flags (cx=0)
  4753                                  		;push	dx ; *+ ; save drive number (DL)
  4754                                  		; bl = dl = drive number ; *++
  4755                                  
  4756                                  ; Check	for presence of	changeline
  4757                                  
  4758                                  		mov	ah, 15h
  4759                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4760                                  					; DL = drive ID
  4761                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4762                                  					; CX:DX	= number of sectors on the media
  4763                                  		; 13/12/2023
  4764                                  		;pop	dx ; *+ ; restore drive number (in DL)
  4765                                  		;pop	cx ; *+ ; restore flags (cx=0)
  4766                                  		mov	cx, 0 ; 13/12/2023
  4767                                  		mov	dx, bx ; *++ ; bl = drive number
  4768                                  		jc	short changeline_done
  4769                                  
  4770                                  		cmp	ah, 2		; check	for presence of	changeline
  4771                                  		jnz	short changeline_done
  4772                                  
  4773                                  ; we have a drive with change line support.
  4774                                  
  4775                                  		or	cl, 2		; fchangeline
  4776                                  					; signal type
  4777                                  		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4778                                  %endif
  4779                                  		; 14/12/2023
  4780 00001A16 E83800                  		call	chk_changeline
  4781                                  		;jc	short changeline_done
  4782                                  
  4783                                  ; we now try to set up the form factor for the types of media that we know
  4784                                  ; and can recognise. for the rest, we set the form factor as "other".
  4785                                  
  4786                                  changeline_done:			
  4787 00001A19 803E[C816]28            		cmp	byte [num_cyln], 40
  4788 00001A1E 750B                    		jnz	short try_80
  4789 00001A20 803E[C716]09            		cmp	byte [sec_trk], 9
  4790 00001A25 765F                    		jbe	short nextdrive
  4791                                  gotother:				
  4792 00001A27 B607                    		mov	dh, 7		; ffOther
  4793                                  					; we have a "strange" medium
  4794 00001A29 EB5B                    		jmp	short nextdrive
  4795                                  ;-----------------------------------------------------------------------------
  4796                                  
  4797                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4798                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4799                                  
  4800                                  try_80:					
  4801 00001A2B 803E[C816]50            		cmp	byte [num_cyln], 80
  4802 00001A30 75F5                    		jnz	short gotother
  4803 00001A32 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4804 00001A34 803E[C716]24            		cmp	byte [sec_trk], 36 ; is it	?
  4805 00001A39 744B                    		jz	short nextdrive	; yeah,	go update
  4806                                  
  4807                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4808                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4809                                  		;mov	dh, ff144
  4810                                  		;cmp	byte [sec_trk], 18
  4811                                  		;je	short nextdrive
  4812                                  
  4813 00001A3B 803E[C716]0F            		cmp	byte [sec_trk], 15
  4814 00001A40 740B                    		jz	short got96
  4815                                  		
  4816 00001A42 803E[C716]09            		cmp	byte [sec_trk], 9
  4817 00001A47 75DE                    		jnz	short gotother
  4818                                  		
  4819 00001A49 B602                    		mov	dh, 2 ; ffSmall
  4820 00001A4B EB39                    		jmp	short nextdrive
  4821                                  ; ----------------------------------------------------------------------------
  4822                                  
  4823                                  got96:					
  4824 00001A4D B601                    		mov	dh, 1 ; ff96tpi
  4825 00001A4F EB35                    		jmp	short nextdrive
  4826                                  
  4827                                  ; ----------------------------------------------------------------------------
  4828                                  		
  4829                                  		; 14/12/2023
  4830                                  		; 13/12/2023 - Retro DOS v4.1 IO.SYS
  4831                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS
  4832                                  		; 10/12/2023 - Retro DOS v5.0 IO.SYS/IBMBIO.COM
  4833                                  		; check change line feature (and set fhave96 if there is)
  4834                                  		; (common procedure for 'eotok:' and 'noparmsfromrom:')
  4835                                  chk_changeline:
  4836 00001A51 59                      		pop	cx ; near call return address
  4837                                  
  4838 00001A52 07                      		pop	es ; es=cs=ds ; 21/12/2022
  4839 00001A53 5F                      		pop	di ; 12/12/2023 ; *
  4840                                  		; 12/12/2023 ; *
  4841 00001A54 5A                      		pop	dx ; *+
  4842                                  
  4843 00001A55 51                      		push	cx ; near call return address
  4844                                  
  4845                                  ; Check	for presence of	changeline
  4846                                  
  4847                                  		; 12/12/2023 - BugFix ; * ; +*+
  4848                                  		; (MSDOS 6.22 IO.SYS has a bug here,
  4849                                  		;  it does not save CX,DX registers before INT 13h func 15h)
  4850                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4851                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4852                                  		;  -- ref: Ralf Brown's Interrupt List --
  4853                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4854                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4855                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4856                                  
  4857                                  		; 12/12/2023
  4858                                  		;push	dx ; *+ ; save drive number (DL) - Retro DOS v4.2
  4859                                  		; bl = dl = drive number ; *++
  4860                                  
  4861 00001A56 B415                    		mov	ah, 15h
  4862 00001A58 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4863                                  					; DL = drive ID
  4864                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4865                                  					; CX:DX	= number of sectors on the media
  4866                                  		; 12/12/2023
  4867                                  		;pop	dx ; *+ ; restore drive number (in DL)
  4868 00001A5A B90000                  		mov	cx, 0  ; flags
  4869 00001A5D 89DA                    		mov	dx, bx ; *++ ; bl = drive number
  4870 00001A5F 720D                    		jc	short chk_chgl_1
  4871                                  
  4872 00001A61 80FC02                  		cmp	ah, 2		; is there changeline?
  4873 00001A64 7508                    		jne	short chk_chgl_2 ; *
  4874                                  
  4875 00001A66 80C902                  		or	cl, 2
  4876                                  		;or	cl, ah ; 2
  4877 00001A69 C606[7700]01            		mov	byte [fhave96], 1 ; fchangeline
  4878                                  		; cf = 0
  4879                                  chk_chgl_1:
  4880                                  chk_chgl_2:
  4881 00001A6E C3                      		retn
  4882                                  
  4883                                  ;chk_chgl_2:	; *
  4884                                  ;		; 10/12/2023
  4885                                  ;		; ah = 1 ; harddisk type (ah = 3) return not possible here for floppies 
  4886                                  ;		;stc
  4887                                  ;		; cf = 1
  4888                                  ;		retn
  4889                                  
  4890                                  ; ----------------------------------------------------------------------------
  4891                                  
  4892                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4893                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4894                                  
  4895                                  noparmsfromrom:
  4896                                  
  4897                                  ; 14/12/2023				
  4898                                  ; 13/12/2023 ('chk_changeline' procedure)
  4899                                  %if 0				
  4900                                  		pop	es ; es=cs=ds ; 21/12/2022
  4901                                  		; 13/12/2023
  4902                                  		; bl = drive number ; *++
  4903                                  		; 13/12/2023 ; *
  4904                                  		pop	di ; *
  4905                                  		pop	dx ; *+
  4906                                  		;pop	cx ; *+ ; cx = 0 ; 13/12/2023
  4907                                  		; 13/12/2023
  4908                                  		;pop	di
  4909                                  		; 21/12/2022
  4910                                  		;pop	ds
  4911                                  
  4912                                  		mov	ah, 15h
  4913                                  		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4914                                  					; DL = drive ID
  4915                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4916                                  					; CX:DX	= number of sectors on the media
  4917                                  		; 13/12/2023 - BugFix ; +*+
  4918                                  		; (MSDOS 5.0 & 6.22 IO.SYS bug) ; +*+
  4919                                  		; (some ROMBIOSs fix this BUG but return with false)
  4920                                  		; -- ref: Ralf Brown's Interrupt List --
  4921                                  		;pop	cx ; *+
  4922                                  		mov	cx, 0 ; 13/12/2023
  4923                                  		mov	dx, bx ; *++
  4924                                  		jc	short nextdrive
  4925                                  
  4926                                  		cmp	ah, 2		; is there changeline?
  4927                                  		jnz	short nextdrive
  4928                                  
  4929                                  		or	cl, 2
  4930                                  		mov	byte [fhave96], 1 ; fchangeline
  4931                                  %endif
  4932                                  		; 14/12/2023
  4933 00001A6F E8DFFF                  		call	chk_changeline
  4934 00001A72 7212                    		jc	short nextdrive
  4935                                  		
  4936                                  		; change line support, [fhave96] = 1
  4937                                  
  4938 00001A74 C606[C816]50            		mov	byte [num_cyln], 80
  4939 00001A79 B601                    		mov	dh, 1
  4940 00001A7B B00F                    		mov	al, 15
  4941 00001A7D 3A06[2C01]              		cmp	al, [eot]
  4942 00001A81 7603                    		jbe	short nextdrive
  4943 00001A83 A2[2C01]                		mov	[eot], al
  4944                                  ; ----------------------------------------------------------------------------
  4945                                  
  4946                                  ;eot_ok2:
  4947                                  nextdrive:				
  4948 00001A86 80C920                  		or	cl, 20h	; fi_own_physical
  4949                                  					; set this true	for all	drives
  4950 00001A89 88D7                    		mov	bh, dl		; save int13 drive number
  4951                                  
  4952                                  ; we need to do special things if we have a single drive system and are setting
  4953                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4954                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4955                                  ; we detect the presence of this situation by examining the flag single for the
  4956                                  ; value 2.
  4957 00001A8B 803E[7800]02            		cmp	byte [single], 2
  4958 00001A90 7505                    		jnz	short not_special
  4959 00001A92 FECF                    		dec	bh		; int13	drive number same for logical drive
  4960 00001A94 80F120                  		xor	cl, 20h	; fi_own_physical
  4961                                  					; reset	ownership flag for logical drive
  4962                                  not_special:
  4963                                  
  4964                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4965                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4966                                  ; form factor is of type "ffother".
  4967                                  				
  4968 00001A97 31C0                    		xor	ax, ax		; fill BDS for drive
  4969 00001A99 A0[C616]                		mov	al, [num_heads]
  4970 00001A9C 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4971 00001A9F A0[C716]                		mov	al, [sec_trk]
  4972 00001AA2 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4973 00001AA5 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4974 00001AA8 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4975 00001AAB 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4976 00001AAE 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4977 00001AB1 8A1E[C816]              		mov	bl, [num_cyln]
  4978 00001AB5 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4979 00001AB8 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4980 00001ABD 7510                    		jnz	short no_single
  4981                                  		; 14/12/2023
  4982 00001ABF FE06[7800]              		inc	byte [single]	; [single] = 2
  4983                                  		;mov	byte [single], 2 ; Don't forget we have
  4984                                  					; single drive system
  4985                                  		; 18/12/2022
  4986 00001AC3 80C910                  		or	cl, 10h
  4987                                  		;or	cx, 10h	; fi_am_mult
  4988                                  					; set that this	is one of several drives
  4989 00001AC6 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4990                                  					; save flags
  4991 00001AC9 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4992                                  					; move to next BDS in list
  4993 00001ACB FEC2                    		inc	dl		; add a	number
  4994 00001ACD EBB7                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4995                                  ; ----------------------------------------------------------------------------
  4996                                  
  4997                                  no_single:				
  4998                                  		;inc	dl
  4999                                  		; 18/12/2022
  5000 00001ACF 42                      		inc	dx
  5001 00001AD0 E9FCFE                  		jmp	loop_drive
  5002                                  ; ----------------------------------------------------------------------------
  5003                                  
  5004                                  done_drives:	
  5005                                  		;mov	word [di+BDS.link], -1			
  5006 00001AD3 C705FFFF                		mov	word [di], -1	; set link to null
  5007                                  
  5008                                  ; set up all the hard drives in	the system
  5009                                  
  5010                                  		; 20/12/2022
  5011                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  5012                                  dohard:					
  5013 00001AD7 8A36[3917]              		mov	dh, [hnum]
  5014 00001ADB 08F6                    		or	dh, dh		; done if no hardfiles
  5015 00001ADD 7459                    		jz	short static_configure
  5016 00001ADF B280                    		mov	dl, 80h
  5017                                  dohard1:				
  5018 00001AE1 52                      		push	dx
  5019 00001AE2 8B3E[3C17]              		mov	di, [end_of_bdss]
  5020 00001AE6 8A1E[7500]              		mov	bl, [drvmax]
  5021 00001AEA B700                    		mov	bh, 0		; first	primary	partition (or active)
  5022 00001AEC E8CA01                  		call	sethard
  5023 00001AEF 7208                    		jb	short hardfile_err
  5024 00001AF1 E8A906                  		call	dmax_check	; error	if already 26 drives
  5025 00001AF4 7303                    		jnb	short hardfile_err
  5026 00001AF6 E8B906                  		call	xinstall_bds	; insert new bds into linked list
  5027                                  hardfile_err:
  5028 00001AF9 5A                      		pop	dx
  5029                                  		;inc	dl		; next hard drive
  5030                                  		; 14/12/2023
  5031 00001AFA 42                      		inc	dx
  5032 00001AFB FECE                    		dec	dh
  5033 00001AFD 75E2                    		jnz	short dohard1
  5034                                  
  5035                                  ; end of physical drive	initialization
  5036                                  
  5037                                  ; *** do not change the position of the following statement.
  5038                                  ; *** domini routine will use [drvmax] value for the start of the logical
  5039                                  ; *** drive number of mini disk(s).
  5040                                  					
  5041 00001AFF E8AF05                  		call	domini		; for setting up mini disks, if found
  5042                                  
  5043                                  ; -- begin added section
  5044                                  
  5045 00001B02 8A36[3917]              		mov	dh, [hnum]	; we already know this is >0
  5046 00001B06 B280                    		mov	dl, 80h
  5047                                  dohardx1:				
  5048 00001B08 B701                    		mov	bh, 1		; do all subsequent primary partitions
  5049                                  dohardx2:				
  5050 00001B0A 52                      		push	dx
  5051 00001B0B 53                      		push	bx
  5052 00001B0C 8B3E[3C17]              		mov	di, [end_of_bdss]
  5053 00001B10 8A1E[7500]              		mov	bl, [drvmax]
  5054 00001B14 E8A201                  		call	sethard
  5055 00001B17 720E                    		jb	short dohardx4	; move to next hardfile	if error
  5056 00001B19 E88106                  		call	dmax_check	; make sure <=26 drives
  5057 00001B1C 7309                    		jnb	short dohardx4	; skip if error
  5058 00001B1E E89106                  		call	xinstall_bds	; insert new bds into linked list
  5059 00001B21 5B                      		pop	bx		; get partition	number
  5060 00001B22 5A                      		pop	dx		; restore physical drive counts
  5061 00001B23 FEC7                    		inc	bh
  5062 00001B25 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  5063                                  ; ----------------------------------------------------------------------------
  5064                                  
  5065                                  dohardx4:
  5066 00001B27 5B                      		pop	bx		; unjunk partition number from stack
  5067 00001B28 5A                      		pop	dx		; restore physical drive counts
  5068                                  		;inc	dl		; next hard drive
  5069                                  		; 14/12/2023
  5070 00001B29 42                      		inc	dx
  5071 00001B2A FECE                    		dec	dh
  5072 00001B2C 75DA                    		jnz	short dohardx1
  5073                                  
  5074                                  ; -- end changed section
  5075                                  
  5076                                  ;******************************************************************************
  5077                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  5078                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  5079                                  ; than two diskette drives
  5080                                  ;
  5081                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  5082                                  ;		as usual and then rescan the bds chain to adjust the  drive
  5083                                  ;		letters. to do this, scan for disk drives and assign logical
  5084                                  ;		drive number starting from 2 and then rescan diskette drives
  5085                                  ;		and assign next to the last logical drive number of last disk
  5086                                  ;		drive to the 3rd and 4th diskette drives.
  5087                                  ;******************************************************************************
  5088                                  
  5089 00001B2E 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  5090                                  		;jbe	short static_configure ; no - no need for remapping
  5091 00001B33 7603                    		jbe	short no_remap
  5092 00001B35 E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  5093                                  no_remap:
  5094                                  
  5095                                  ; End of drive initialization.
  5096                                  
  5097                                  ; ----------------------------------------------------------------------------
  5098                                  
  5099                                  ;we now decide, based on the configurations available so far, what
  5100                                  ;code or data we need to keep as a stay resident code. the following table
  5101                                  ;shows the configurations under consideration. they are listed in the order
  5102                                  ;of their current position memory.
  5103                                  ;
  5104                                  ;configuration will be done in two ways:
  5105                                  ;
  5106                                  ;first, we are going to set "static configuration". static configuration will
  5107                                  ;consider from basic configuration to endof96tpi configuration. the result
  5108                                  ;of static configuration will be the address the dynamic configuration will
  5109                                  ;use to start with.
  5110                                  ;
  5111                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  5112                                  ;involves possible relocation of code or data. dynamic configuration routine
  5113                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  5114                                  ;code individually. after these operation, [dosdatasg] will be set.
  5115                                  ;this will be the place sysinit routine will relocate msdos module for good.
  5116                                  
  5117                                  ; -- begin changed section
  5118                                  ;
  5119                                  ;   1.	 basic configuration for msbio (endfloppy)
  5120                                  ;   2.   end96tpi	; a system that supports "change line error"
  5121                                  ;   3.	 end of bdss	; end of bdss for hard disks
  5122                                  ;   4.	 endatrom	;some of at rom fix module.
  5123                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  5124                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  5125                                  ;
  5126                                  
  5127                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  5128                                  
  5129                                  static_configure:			
  5130 00001B38 8B3E[3C17]              		mov	di, [end_of_bdss]
  5131 00001B3C 81FF[0D09]              		cmp	di, bdss	; 19/10/2022
  5132                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  5133 00001B40 750D                    		jnz	short dynamic_configure	; that's the end, then
  5134                                  		; 18/10/2022
  5135 00001B42 BF[0D09]                		mov	di, end96tpi
  5136                                  		;mov	di, offset harddrv ; end96tpi
  5137                                  					; keep everything up to	end96tpi
  5138 00001B45 803E[7700]00            		cmp	byte [fhave96], 0
  5139 00001B4A 7503                    		jnz	short dynamic_configure
  5140                                  		
  5141 00001B4C BF[F208]                		mov	di, endfloppy
  5142                                  dynamic_configure:
  5143                                  		; 20/12/2022
  5144                                  		;push	cs
  5145                                  		;pop	es
  5146                                  		
  5147                                  		; 14/12/2023
  5148                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSDATA:2268h)
  5149                                  		; (MSDOS 6.22 IO.SYS - BIOSDATA:1C34h)
  5150                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1BEEh)
  5151 00001B4F FC                      		cld	; clear direction flag is not necessary here !?
  5152                                  			; because there will not be a running program
  5153                                  			; which will set direction flag as backward (std)
  5154                                  
  5155                                  ; -- end changed section
  5156                                  
  5157                                  		; 20/12/2022
  5158                                  		; ds = cs <> es
  5159                                  		; ss = 0
  5160                                  		; sp = 700h
  5161                                  
  5162                                  		; 14/12/2023
  5163 00001B50 BE00F0                  		mov	si, 0F000h
  5164 00001B53 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  5165                                  
  5166 00001B55 803E[3506]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  5167                                  		;jnz	short checkcmosclock
  5168                                  		; 14/12/2023
  5169 00001B5A 751E                    		jnz	short checkcompaqbug ; no
  5170 00001B5C 803E[3917]00            		cmp	byte [hnum], 0	; No hard file?
  5171                                  		;jz	short checkcmosclock
  5172 00001B61 7417                    		jz	short checkcompaqbug
  5173 00001B63 97                      		xchg	ax, di		; save allocation pointer in ax
  5174                                  		; 14/12/2023
  5175                                  		;mov	si, 0F000h
  5176                                  		;mov	es, si		; ES ->	ROM BIOS segment
  5177 00001B64 BE[4217]                		mov	si, bios_date	; "01/10/84"
  5178 00001B67 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  5179 00001B6A B90900                  		mov	cx, 9		; bdate_l
  5180                                  					; Only patch ROM for bios 01/10/84
  5181 00001B6D F3A6                    		repe cmpsb		; check	for date + zero	on end
  5182 00001B6F 97                      		xchg	ax, di		; restore allocation pointer
  5183                                  
  5184                                  ; M015 -- begin changes
  5185                                  
  5186                                  		;jnz	short checkcmosclock
  5187                                  		; 02/10/2022
  5188 00001B70 7508                    		jnz	short checkcompaqbug
  5189                                  
  5190                                  ; install at rom fix
  5191                                  
  5192                                  		; 19/10/2022
  5193                                  		;mov	cx, offset endatrom
  5194 00001B72 B9[0014]                		mov	cx, endatrom
  5195                                  		;mov	si, offset ibm_disk_io
  5196 00001B75 BE[D212]                		mov	si, ibm_disk_io
  5197 00001B78 EB46                    		jmp	short install_int13_patch
  5198                                  ; ----------------------------------------------------------------------------
  5199                                  
  5200                                  ; M065 -- begin changes
  5201                                  ;
  5202                                  ; On certain systems with Western Digital disk controllers, the
  5203                                  ; following detection scheme caused an unpredictable and serious
  5204                                  ; failure. In particular, they've implemented a nonstandard
  5205                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5206                                  ; what happens to be at es:[bx] and other memory locations indexed
  5207                                  ; off of it.
  5208                                  ;
  5209                                  ; Compaq was unable to tell us exactly which kind of systems have
  5210                                  ; the bug, except that they guarantee that the bug was fixed in
  5211                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5212                                  ; string, and then look for date codes before 08/04/86 to decide
  5213                                  ; when to install the hook.
  5214                                  
  5215                                  ;checkcmosclock:
  5216                                  ; 02/10/2022				
  5217                                  checkcompaqbug:
  5218                                  		; 20/12/2022
  5219                                  		; es = 0F000h
  5220                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5221                                  		;mov	es, ax
  5222                                  
  5223                                  		; 19/10/2022
  5224 00001B7A 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5225                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5226 00001B81 754B                    		jnz	short not_compaq_patch
  5227 00001B83 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5228                                  		;cmp	word ptr es:0FFECh, 'PM'
  5229 00001B8A 7542                    		jnz	short not_compaq_patch
  5230 00001B8C 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5231                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5232 00001B93 7539                    		jnz	short not_compaq_patch
  5233                                  
  5234                                  ; We're running on a COMPAQ. Now look at the date code.
  5235                                  
  5236 00001B95 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5237 00001B99 86E0                    		xchg	ah, al
  5238 00001B9B 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5239                                  		;cmp	ax, '86'        ; 3836h
  5240                                  					; is it	86?
  5241 00001B9E 772E                    		ja	short not_compaq_patch
  5242 00001BA0 7218                    		jb	short do_compaq_patch
  5243 00001BA2 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5244 00001BA6 86E0                    		xchg	ah, al
  5245 00001BA8 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5246                                  		;cmp	ax, '08'        ; 3038h
  5247                                  					; is it	08?
  5248 00001BAB 7721                    		ja	short not_compaq_patch
  5249 00001BAD 720B                    		jb	short do_compaq_patch
  5250 00001BAF 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5251 00001BB3 86E0                    		xchg	ah, al
  5252 00001BB5 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5253                                  		;cmp	ax, '04'        ; 3034h
  5254                                  					; is it	04?
  5255 00001BB8 7314                    		jnb	short not_compaq_patch
  5256                                  
  5257                                  do_compaq_patch:			
  5258 00001BBA B9[2114]                		mov	cx, end_compaq_i13hook
  5259                                  		;mov	si, endatrom
  5260                                  		; 14/12/2023
  5261 00001BBD BE[0014]                		mov	si, compaq_disk_io ; endatrom
  5262                                  
  5263                                  install_int13_patch:			
  5264 00001BC0 0E                      		push	cs
  5265 00001BC1 07                      		pop	es
  5266                                  		; 18/10/2022
  5267 00001BC2 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5268 00001BC6 8C0E[B600]              		mov	[Orig13+2], cs
  5269 00001BCA 29F1                    		sub	cx, si		; size of rom fix module
  5270 00001BCC F3A4                    		rep movsb		; relocate it
  5271                                  
  5272                                  ; M065 -- end changes
  5273                                  
  5274                                  ; ----------------------------------------------------------------------------
  5275                                  not_compaq_patch:			; M065
  5276                                  		; 17/10/2022
  5277                                  checkcmosclock:	
  5278                                  		; 18/10/2022		
  5279 00001BCE 0E                      		push	cs
  5280 00001BCF 07                      		pop	es
  5281                                  
  5282                                  		; 20/12/2022
  5283                                  		; ds = cs = es
  5284                                  		; ss = 0
  5285                                  		; sp = 700h
  5286                                  
  5287 00001BD0 803E[EC04]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5288 00001BD5 7518                    		jnz	short checkk09	; no
  5289                                  
  5290 00001BD7 893E[FF04]              		mov	word [daycnttoday], di
  5291                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5292 00001BDB B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5293 00001BDE BE[2214]                		mov	si, daycnt_to_day
  5294 00001BE1 F3A4                    		rep movsb
  5295 00001BE3 893E[FB04]              		mov	word [bintobcd], di
  5296                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5297                                  					; let original segment stay
  5298 00001BE7 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5299 00001BEA BE[F314]                		mov	si, bin_to_bcd
  5300 00001BED F3A4                    		rep movsb
  5301                                  checkk09:				
  5302 00001BEF 57                      		push	di ; ? ; save ? ; 20/12/2022
  5303 00001BF0 B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5304 00001BF3 B301                    		mov	bl, 1		; wait for 1 clock tick
  5305 00001BF5 268A3D                  		mov	bh, [es:di]
  5306 00001BF8 F9                      		stc			; Assume we will fail
  5307 00001BF9 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5308                                  					; AL = condition type, BH = condition compare or mask value
  5309                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5310                                  					; DX = I/O port	address	if AL bit 4 set
  5311                                  					; 14/12/2023
  5312                                  					; ES:DI = user byte if AL bit 4 clear
  5313 00001BFB 5F                      		pop	di ; ?
  5314 00001BFC 721B                    		jc	short configdone ; 20/12/2022
  5315                                  
  5316 00001BFE C606[7900]01            		mov	byte [fhavek09], 1
  5317                                  					; remember we have a k09 type
  5318 00001C03 1E                      		push	ds
  5319 00001C04 31C0                    		xor	ax, ax
  5320 00001C06 8ED8                    		mov	ds, ax
  5321                                  		
  5322 00001C08 893EB001                		mov	[6Ch*4], di
  5323                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5324                                  					; new int 6ch handler
  5325                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5326 00001C0C 8C0EB201                		mov	word [6Ch*4+2], cs
  5327 00001C10 1F                      		pop	ds
  5328                                  		; 20/12/2022
  5329                                  		; ds = cs = es
  5330 00001C11 BE[FE14]                		mov	si, int6c
  5331 00001C14 B9C201                  		mov	cx, endk09-int6c ; 459
  5332                                  		;mov	cx, 459		; endk09 - int6c
  5333                                  					; size of k09 routine
  5334 00001C17 F3A4                    		rep movsb		;
  5335                                  					; set up config	stuff for sysinit
  5336                                  ; ----------------------------------------------------------------------------
  5337                                  ; Set up config stuff for SYSINIT
  5338                                  
  5339                                  ; 17/10/2022
  5340                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5341                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5342                                  ; 09/12/2022
  5343                                  SETDRIVE equ SetDrive
  5344                                  GETBP equ GetBp
  5345                                  		
  5346                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5347                                  configdone:
  5348                                  		; 14/12/2023
  5349                                  		; ds = cs
  5350                                  		;push	cs		; di is	final ending address of	msbio.
  5351                                  		;pop	ds
  5352                                  		
  5353 00001C19 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5354                                  		; 10/12/2022
  5355                                  		;shr	di, 1
  5356                                  		;shr	di, 1
  5357                                  		;shr	di, 1
  5358                                  		;shr	di, 1
  5359 00001C1C B104                    		mov	cl, 4
  5360 00001C1E D3EF                    		shr	di, cl		
  5361                                  		; 10/12/2022
  5362                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5363                                  		; 19/10/2022 - Temporary !
  5364                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5365                                  		; 14/08/2023
  5366 00001C20 83C770                  		add	di, 70h
  5367 00001C23 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5368                                  
  5369                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5370                                  
  5371                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5372                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5373                                  	     
  5374                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5375                                  
  5376                                  ; 14/12/2023
  5377                                  ; ----------------------------------------------------------------------------
  5378                                  ; ----------------------------------------------------------------------------
  5379                                  %if 0
  5380                                  		mov	ax, [drvfat]	; get drive and	fat id
  5381                                  		; 22/12/2022
  5382                                  		; Note: SETDRIVES uses AL (drive number) only
  5383                                  		mov	bp, SETDRIVE
  5384                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5385                                  					; at 2C7h:4D7h = 70h:2A47h
  5386                                  		push	cs		; simulate far call
  5387                                  		call	call_bios_code	; get bds for drive
  5388                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5389                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5390                                  		push	cs
  5391                                  		call	call_bios_code
  5392                                  
  5393                                  	; resort to funky old segment definitions for now
  5394                                  
  5395                                  		; 22/12/2022
  5396                                  		;push	es		; copy bds to ds:di
  5397                                  		;pop	ds
  5398                                  
  5399                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5400                                  	;
  5401                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5402                                  	;	  back. Apparently it was what actually setup es: for the following
  5403                                  	; cas----
  5404                                  
  5405                                  		; 22/12/2022
  5406                                  		;xor	di, di
  5407                                  		;mov	al, [es:di]	; get fat id byte
  5408                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5409                                  		;mov	[es:drvfat+1], al
  5410                                  		;mov	ax, [es:drvfat]
  5411                                  		
  5412                                  		; 22/12/2022
  5413                                  		; ds = cs
  5414                                  	;;;	mov	al, [drvfat]
  5415                                  
  5416                                  	; cas -- why do a SECOND setdrive here???
  5417                                  
  5418                                  		; 22/12/2022
  5419                                  		;push	es		; save whatever's in es
  5420                                  		;push	ds		; copy bds to es:di
  5421                                  		;pop	es
  5422                                  		;push	cs		; copy Bios_Data to ds
  5423                                  		;pop	ds
  5424                                  	
  5425                                  	; 22/12/2022
  5426                                  	;;;	mov	bp, SETDRIVE
  5427                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5428                                  	;;;	push	cs		; simulate far call
  5429                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5430                                  	
  5431                                  		; 22/12/2022
  5432                                  		;push	es		; copy bds back to ds:di
  5433                                  		;pop	ds
  5434                                  		;pop	es		; pop whatever was in es
  5435                                  
  5436                                  	; Now we load in the MSDOS.SYS file
  5437                                  
  5438                                  	; 22/12/2022
  5439                                  	; -----
  5440                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5441                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5442                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5443                                  	;				; get size of fat on media
  5444                                  	;	;mov	es:16DEh, bl
  5445                                  	;	mov	[es:fbigfat], bl
  5446                                  	;	mov	cl, [di+8]
  5447                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5448                                  	;	;sub	es:16D8h, ax
  5449                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5450                                  	;				; need a logical sector number that will
  5451                                  	;				; be used by getclus(diskrd procedure)
  5452                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5453                                  	;	;sbb	es:16DAh, ax
  5454                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5455                                  	; -----
  5456                                  		
  5457                                  	; -----	; 22/12/2022
  5458                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5459                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5460                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5461                                  					; get size of fat on media
  5462                                  		mov	[fbigfat], bl
  5463                                  		mov	cl, [es:di+8]
  5464                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5465                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5466                                  					; need a logical sector number that will
  5467                                  					; be used by getclus(diskrd procedure)
  5468                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5469                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5470                                  	; ------
  5471                                  
  5472                                  		xor	ch, ch	 ; cx = sectors/cluster
  5473                                  
  5474                                  	; the boot program has left the directory at 0:500h
  5475                                  
  5476                                  		push	ds
  5477                                  		xor	di, di
  5478                                  		mov	ds, di
  5479                                  		mov	bx, [53Ah]
  5480                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5481                                  					; (First cluster field of 2nd dir entry
  5482                                  					; of root directory in the buffer at 500h)
  5483                                  		pop	ds
  5484                                  loadit:
  5485                                  		mov	ax, SYSINITSEG	; 46Dh
  5486                                  		;mov	ax, 46Dh	; sysinit segment
  5487                                  		mov	es, ax
  5488                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5489                                  		;mov	es, [es:271h]
  5490                                  
  5491                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5492                                  ; ----------------------------------------------------------------------------
  5493                                  ;iseof:
  5494                                  		;;test	byte [cs:fbigfat], fbig
  5495                                  		;test	byte [cs:fbigfat], 40h ; fbig
  5496                                  		; 12/12/2023
  5497                                  		; ds = cs
  5498                                  		test	byte [fbigfat], 40h ; fbig
  5499                                  		jnz	short eofbig
  5500                                  		cmp	bx, 0FF7h
  5501                                  		jmp	short iseofx
  5502                                  ; ----------------------------------------------------------------------------
  5503                                  
  5504                                  eofbig:
  5505                                  		cmp	bx, 0FFF7h
  5506                                  iseofx:
  5507                                  		jb	short loadit	; keep loading until cluster = eof
  5508                                  %endif
  5509                                  ; ----------------------------------------------------------------------------
  5510                                  ; ----------------------------------------------------------------------------
  5511                                  
  5512 00001C27 E8BD03                  		call	setdrvparms	; 
  5513                                  
  5514                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5515                                  		;jmp	far 46Dh:267h
  5516 00001C2A EA[6702]3304            		jmp	SYSINITSEG:SYSINITSTART
  5517                                  
  5518                                  ; =============== S U B	R O U T	I N E ========================================
  5519                                  
  5520                                  ; Following are subroutines to support resident device driver initialization
  5521                                  ;
  5522                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5523                                  
  5524                                  ;	M035 -- begin changed section
  5525                                  
  5526                                  ;******************************************************************************
  5527                                  ; module name: remap
  5528                                  ;
  5529                                  ; descriptive name: all the code for himem that could be separated from msbio
  5530                                  ;
  5531                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5532                                  ;	     letters) if more than two diskette drives on the system.
  5533                                  ;
  5534                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5535                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5536                                  ;	       letters. to do this, scan for disk drives and assign logical
  5537                                  ;	       drive number starting from 2 and then rescan diskette drives
  5538                                  ;	       and assign next to the last logical drive number of last disk
  5539                                  ;	       drive to the 3rd and 4th diskette drives.
  5540                                  
  5541                                  ; input:       none
  5542                                  ; exit:	drive letters have been remapped in bds chain
  5543                                  ; exit error:  none
  5544                                  ; called from: msinit
  5545                                  ;
  5546                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5547                                  ;	  found in the system
  5548                                  ;	  this function assumes that there are no more than 26 drives assigned
  5549                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5550                                  ;	  this function assumes that the first entries in the chain are
  5551                                  ;	   floppy drives, and all the rest are hard drives
  5552                                  ;	  will alter the boot drive if necessary to reflect remapping
  5553                                  ;
  5554                                  ;******************************************************************************
  5555                                  
  5556                                  ; 17/10/2022
  5557                                  ; 02/10/2022
  5558                                  
  5559                                  remap:		; proc near
  5560                                  
  5561                                  		; 15/12/2023
  5562                                  		; ds = cs
  5563                                  		;mov	di, [cs:start_bds] ; get first bds
  5564 00001C2F 8B3E[1901]              		mov	di, [start_bds]
  5565                                  
  5566                                  ; search for 1st fixed disk physical drive num
  5567                                  
  5568                                  drive_loop:
  5569 00001C33 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5570                                  					; first	hard disk??
  5571 00001C37 7409                    		jz	short fdrv_found ; yes,	continue
  5572 00001C39 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5573                                  					; get next bds,	assume segment
  5574 00001C3B 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  5575 00001C3E 75F3                    		jnz	short drive_loop ; loop	if not
  5576 00001C40 EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5577                                  
  5578                                  ;------------------------------------------------------------------------------
  5579                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5580                                  ;logical drive nums to 3, 4, 5 etc.
  5581                                  ;------------------------------------------------------------------------------
  5582                                  
  5583                                  fdrv_found:
  5584 00001C42 B002                    		mov	al, 2		; start	with logical drv num=2
  5585                                  fdrv_loop:
  5586 00001C44 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5587 00001C47 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5588                                  					; ds:di--> next	bds
  5589                                  		;inc	al		; set num for next drive
  5590                                  		; 18/12/2022
  5591 00001C49 40                      		inc	ax
  5592 00001C4A 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  5593 00001C4D 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  5594                                  
  5595                                  ;------------------------------------------------------------------------------
  5596                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5597                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5598                                  ; any more.
  5599                                  ;------------------------------------------------------------------------------
  5600                                  
  5601                                  		;mov	di, [cs:start_bds] ; [start_bds]
  5602                                  		; 15/12/2023
  5603 00001C4F 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  5604 00001C53 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5605                                  					; ds:di-->bds2
  5606                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5607 00001C55 8A26[2501]              		mov	ah, [dsktnum]
  5608 00001C59 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5609                                  remap_loop1:
  5610 00001C5C 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5611                                  					; set new num to next floppy
  5612 00001C5E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5613 00001C61 FEC0                    		inc	al		; new number for next floppy
  5614 00001C63 FECC                    		dec	ah		; count down extra floppies
  5615 00001C65 75F5                    		jnz	short remap_loop1
  5616                                  
  5617                                  ; now we've got to adjust the boot drive if we reassigned it
  5618                                  
  5619                                  		; 15/12/2023
  5620                                  		;mov	al, [cs:drvfat]
  5621 00001C67 A0[C016]                		mov	al, [drvfat]
  5622 00001C6A 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5623 00001C6C 721D                    		jb	short rmap_exit
  5624                                  		;sub	al, [cs:dsktnum]
  5625 00001C6E 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  5626 00001C72 7204                    		jb	short remap_boot_flop ;	brif so
  5627                                  
  5628                                  ; we've got to remap the boot hard drive
  5629                                  ; subtract the number of EXTRA floppies from it
  5630                                  
  5631 00001C74 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5632 00001C76 EB04                    		jmp	short remap_change_boot_drv
  5633                                  ; ---------------------------------------------------------------------------
  5634                                  
  5635                                  ; we've got to remap the boot floppy.
  5636                                  ; add the number of hard drive partitions to it
  5637                                  
  5638                                  remap_boot_flop:
  5639                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5640                                  		; 15/12/2023
  5641 00001C78 0206[7500]              		add	al, [drvmax]
  5642                                  remap_change_boot_drv:			
  5643                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  5644 00001C7C A2[C016]                		mov	[drvfat], al
  5645 00001C7F FEC0                    		inc	al
  5646 00001C81 1E                      		push	ds
  5647 00001C82 BF3304                  		mov	di, SYSINITSEG	; 46Dh
  5648                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  5649                                  		;;mov	di, 46Dh	; SYSINIT segment
  5650 00001C85 8EDF                    		mov	ds, di
  5651 00001C87 A2[9602]                		mov	[DEFAULTDRIVE], al
  5652                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5653                                  					; pass it to sysinit as	well
  5654 00001C8A 1F                      		pop	ds ; ds = cs
  5655                                  rmap_exit:
  5656 00001C8B C3                      		retn
  5657                                  
  5658                                  ; =============== S U B	R O U T	I N E =======================================
  5659                                  
  5660                                  ; 17/10/2022
  5661                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5662                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5663                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5664                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5665                                  ;**************************************************
  5666                                  ; getboot - get the boot sector for a hard disk
  5667                                  ;
  5668                                  ; Reads the boot sector from a specified drive into
  5669                                  ; a buffer at the top of memory.
  5670                                  ;
  5671                                  ; dl = int13 drive number to read boot sector for
  5672                                  ;**************************************************
  5673                                  
  5674                                  ; 17/10/2022
  5675                                  bootbias equ 200h
  5676                                  
  5677                                  getboot:	; proc near
  5678                                  		
  5679                                  		; 15/12/2023
  5680                                  		; ds = cs
  5681                                  		
  5682                                  		; 08/04/2018
  5683                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5684                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5685                                  		; 02/10/2022 - Retro DOS v4.0
  5686                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5687                                  
  5688                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  5689                                  		; 15/12/2023
  5690 00001C8C A1[C316]                		mov	ax, [init_bootseg]
  5691 00001C8F 8EC0                    		mov	es, ax
  5692                                  
  5693                                  		; 17/10/2022
  5694 00001C91 BB0002                  		mov	bx, bootbias ; 200h
  5695                                  		;mov	bx, 200h	; bootbias
  5696                                  					; load BX, ES:BX is where sector goes
  5697 00001C94 B80102                  		mov	ax, 201h
  5698 00001C97 30F6                    		xor	dh, dh
  5699 00001C99 B90100                  		mov	cx, 1
  5700 00001C9C CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5701                                  					; AL = number of sectors to read, CH = track, CL = sector
  5702                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5703                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5704 00001C9E 7209                    		jb	short erret
  5705                                  		; 17/10/2022
  5706 00001CA0 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5707                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5708                                  					; Dave Litton magic word?
  5709 00001CA7 7401                    		jz	short norm_ret	; yes
  5710                                  erret:
  5711 00001CA9 F9                      		stc
  5712                                  norm_ret:
  5713 00001CAA C3                      		retn
  5714                                  
  5715                                  ; ---------------------------------------------------------------------------
  5716                                  		
  5717                                  		; 16/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0)
  5718                                  
  5719                                  chk_partition_type:
  5720                                  		; 16/12/2023
  5721 00001CAB 268A07                  		mov	al, [es:bx]	; partition type
  5722                                  
  5723                                  		; see if partitiontype == 1, 4, 6
  5724 00001CAE 3C01                    		cmp	al, 1		; FAT12
  5725 00001CB0 7406                    		je	short chk_ptype_retn
  5726 00001CB2 3C04                    		cmp	al, 4		; FAT16 CHS (<= 32MB)
  5727 00001CB4 7402                    		je	short chk_ptype_retn
  5728 00001CB6 3C06                    		cmp	al, 6		; FAT16 BIG CHS (> 32MB)
  5729                                  chk_ptype_retn:
  5730                                  		; zf = 1 -> primary DOS partition
  5731                                  		; zf = 0 -> not a primary DOS partition
  5732 00001CB8 C3                      		retn
  5733                                  
  5734                                  ; =============== S U B	R O U T	I N E =======================================
  5735                                  
  5736                                  ; 28/12/2018 - Retro DOS v4.0 
  5737                                  
  5738                                  ;***************************************************************************
  5739                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5740                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5741                                  ;   our own logical sectors start. we also read in our boot sector to
  5742                                  ;   determine version number
  5743                                  ;
  5744                                  ;   inputs:	dl is rom drive number (80...)
  5745                                  ;		bh is partition number (0....) 
  5746                                  ;		ds:di points to bds
  5747                                  ;   outputs:	carry clear -> bpb is filled in
  5748                                  ;		carry set   -> bpb is left uninitialized due to error
  5749                                  ;	trashes (at least) si, cx
  5750                                  ;	MUST PRESERVE ES:!!!!
  5751                                  ;***************************************************************************
  5752                                  
  5753                                  sethard:	; proc near
  5754                                  		; 16/12/2023
  5755                                  		; 14/08/2023
  5756                                  		; ds = cs = BIOSDATA
  5757 00001CB9 57                      		push	di
  5758 00001CBA 53                      		push	bx
  5759                                  		;push	ds  ; ds = cs = BIOSDATA ; 14/08/2023
  5760 00001CBB 06                      		push	es
  5761 00001CBC 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5762 00001CBF 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5763 00001CC2 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5764                                  					; fnon_removable
  5765 00001CC6 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5766                                  					; ffHardFile
  5767 00001CCA C606[C216]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5768 00001CCF 88FE                    		mov	dh, bh		; partition number
  5769 00001CD1 52                      		push	dx
  5770 00001CD2 B408                    		mov	ah, 8
  5771 00001CD4 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5772                                  					; DL = drive number
  5773                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5774                                  					; DL = number of consecutive drives
  5775                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5776 00001CD6 FEC6                    		inc	dh
  5777 00001CD8 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5778 00001CDB 5A                      		pop	dx
  5779 00001CDC 7249                    		jb	short setret	; error	if no hard disk
  5780 00001CDE 80E13F                  		and	cl, 3Fh
  5781 00001CE1 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5782 00001CE4 52                      		push	dx		; save partition number
  5783 00001CE5 E8A4FF                  		call	getboot
  5784 00001CE8 5A                      		pop	dx		; restore partition number
  5785 00001CE9 723C                    		jb	short setret
  5786 00001CEB BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5787                                  
  5788                                  ; The first 'active' partition is 00, the second is 01....
  5789                                  ;   then the remainder of the 'primary' but non-active partitions
  5790                                  
  5791                                  act_part:
  5792 00001CEE 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5793 00001CF3 740B                    		jz	short no_act	; no
  5794                                  ; 16/12/2023
  5795                                  %if 0
  5796                                  		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5797                                  		jz	short got_good_act
  5798                                  		cmp	byte [es:bx], 4
  5799                                  		jz	short got_good_act
  5800                                  		cmp	byte [es:bx], 6
  5801                                  		jnz	short no_act
  5802                                  %endif
  5803                                  		; 16/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0)
  5804                                  		; check if it is a primary dos partition
  5805                                  
  5806 00001CF5 E8B3FF                  		call	chk_partition_type
  5807 00001CF8 7506                    		jne	short no_act
  5808                                  
  5809                                  got_good_act:
  5810 00001CFA 08F6                    		or	dh, dh		; is this our target partition #?
  5811 00001CFC 742D                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5812 00001CFE FECE                    		dec	dh		; count	down
  5813                                  no_act:
  5814 00001D00 83C310                  		add	bx, 16
  5815 00001D03 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5816                                  					; last entry done?
  5817 00001D07 75E5                    		jnz	short act_part	; no, process next entry
  5818 00001D09 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5819                                  					; restore original value of bx
  5820                                  
  5821                                  ; Now scan the non-active partitions
  5822                                  
  5823                                  get_primary:				
  5824 00001D0C 26F647FC80              		test	byte [es:bx-4], 80h
  5825 00001D11 750B                    		jnz	short not_prim	; we've already scanned
  5826                                  					; the ACTIVE ones
  5827                                  ; 16/12/2023
  5828                                  %if 0
  5829                                  		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5830                                  		jz	short got_prim
  5831                                  		cmp	byte [es:bx], 4
  5832                                  		jz	short got_prim
  5833                                  		cmp	byte [es:bx], 6
  5834                                  		jnz	short not_prim
  5835                                  %endif
  5836                                  		; 16/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0)
  5837                                  		; check if it is a primary dos partition
  5838                                  
  5839 00001D13 E895FF                  		call	chk_partition_type
  5840 00001D16 7506                    		jne	short not_prim
  5841                                  
  5842                                  got_prim:
  5843 00001D18 08F6                    		or	dh, dh		; is this our target partition?
  5844 00001D1A 740F                    		jz	short set2
  5845 00001D1C FECE                    		dec	dh
  5846                                  not_prim:
  5847 00001D1E 83C310                  		add	bx, 16
  5848 00001D21 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5849 00001D25 75E5                    		jnz	short get_primary ; loop till we've gone through table
  5850                                  setret:					
  5851 00001D27 F9                      		stc			; error	return
  5852 00001D28 E98502                  		jmp	ret_hard_err
  5853                                  
  5854                                  ; ---------------------------------------------------------------------------
  5855                                  
  5856                                  ;  until we get the real logical boot record and get the bpb,
  5857                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5858                                  ;  for the convenience of the computation.
  5859                                  ;
  5860                                  ;  at the end of this procedure, if a bpb information is gotten from
  5861                                  ;  the valid boot record, then we are going to use those bpb information
  5862                                  ;  without change.
  5863                                  ;
  5864                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5865                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5866                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5867                                  
  5868                                  set2:
  5869                                  		; 14/08/2023
  5870                                  		; ds = cs = BIOSDATA segment (0070h)
  5871 00001D2B 8816[C516]              		mov	[rom_drv_num], dl
  5872                                  		;mov	[cs:rom_drv_num], dl
  5873                                  			; save the rom bios drive number we are handling now.
  5874 00001D2F 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5875 00001D33 268B5706                		mov	dx, [es:bx+6]
  5876                                  
  5877                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5878                                  ; sectors should be allowed	
  5879                                  
  5880 00001D37 83E801                  		sub	ax, 1
  5881 00001D3A 83DA00                  		sbb	dx, 0
  5882 00001D3D 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5883 00001D41 2613570A                		adc	dx, [es:bx+10]
  5884 00001D45 7305                    		jnc	short okdrive
  5885 00001D47 800E[C216]80            		or	byte [fbigfat], 80h ; ftoobig
  5886                                  okdrive:
  5887 00001D4C 268B4704                		mov	ax, [es:bx+4]
  5888 00001D50 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5889                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5890 00001D53 268B4706                		mov	ax, [es:bx+6]
  5891 00001D57 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5892 00001D5A 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5893 00001D5E 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5894 00001D62 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5895 00001D65 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5896                                  					; bpb->maxsec =	p->partitionlength
  5897                                  		;cmp	dx, 0
  5898                                  		;ja	short okdrive_1
  5899                                  		; 16/12/2023
  5900 00001D68 09D2                    		or	dx, dx
  5901 00001D6A 7505                    		jnz	short okdrive_1
  5902 00001D6C 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5903 00001D6F 72B6                    		jb	short setret	; return -1;
  5904                                  okdrive_1:
  5905                                  		;mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5906                                  		;mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5907                                  		; 16/12/2023
  5908                                  		;push	ax ; *
  5909 00001D71 8B4519                  		mov	ax, [di+19h]	; [di+BDS.hiddensecs+2]
  5910 00001D74 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5911                                  					; usually equal	to the # of sec/trk.
  5912 00001D76 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5913                                  		; 16/12/2023
  5914                                  		;push	ax
  5915                                  		;mov	ax, dx
  5916 00001D79 31D2                    		xor	dx, dx
  5917 00001D7B F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5918                                  					; (track)temp_h:ax + (sector)dx
  5919                                  		; 17/10/2022
  5920                                  		;mov	[cs:temp_h], ax
  5921                                  		; 14/08/2023 (ds=cs)
  5922 00001D7D A3[2205]                		mov	[temp_h], ax
  5923                                  		; 16/12/2023
  5924                                  		;pop	ax ; *
  5925 00001D80 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5926 00001D83 F7F3                    		div	bx
  5927 00001D85 88D1                    		mov	cl, dl
  5928 00001D87 FEC1                    		inc	cl
  5929                                  		;xor	bx, bx
  5930                                  		; 16/12/2023
  5931                                  		; bh = 0
  5932 00001D89 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5933                                  		;push	ax ; *
  5934 00001D8C 31D2                    		xor	dx, dx
  5935                                  		;;mov	ax, [cs:temp_h]
  5936                                  		;mov	ax, [temp_h] ; 14/08/2023
  5937                                  		; 16/12/2023
  5938 00001D8E 8706[2205]              		xchg	ax, [temp_h] ; * (push ax)
  5939 00001D92 F7F3                    		div	bx
  5940                                  		;;mov	[cs:temp_h], ax
  5941                                  		;mov	[temp_h], ax ; 14/08/2023
  5942                                  		;pop	ax ; *
  5943                                  		; 16/12/2023
  5944 00001D94 8706[2205]              		xchg	ax, [temp_h] ; * (pop ax)
  5945 00001D98 F7F3                    		div	bx		; dl is head, ax is cylinder
  5946                                  		; 14/08/2023 (ds=cs)
  5947 00001D9A 833E[2205]00            		cmp	word [temp_h], 0
  5948                                  		;cmp	word [cs:temp_h], 0
  5949                                  		;ja	short setret_brdg ; exceeds the	limit of int 13h
  5950                                  		; 16/12/2023
  5951 00001D9F 7786                    		ja	short setret
  5952 00001DA1 3D0004                  		cmp	ax, 1024
  5953                                  		;ja	short setret_brdg ; exceeds the	limit of int 13h
  5954                                  		; 16/12/2023
  5955 00001DA4 7781                    		ja	short setret
  5956                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5957                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5958                                  			; ('ja' must be 'jnb')
  5959                                  okdrive_2:
  5960                                   		; 28/07/2019
  5961                                  ; dl is head.
  5962                                  ; ax is cylinder
  5963                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5964                                  
  5965                                  ;*** for mini disks ***
  5966                                  
  5967 00001DA6 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5968                                  					; check	for mini disk
  5969 00001DAA 7503                    		jnz	short oknotmini	; not mini disk.
  5970 00001DAC 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5971                                  					; set the physical track number
  5972                                  oknotmini:
  5973                                  ;*** end of added logic for mini disk
  5974                                  				
  5975 00001DAF D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5976 00001DB1 D0CC                    		ror	ah, 1		; two bits of upper byte
  5977 00001DB3 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5978 00001DB6 08E1                    		or	cl, ah		; move two bits	to correct spot
  5979 00001DB8 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5980                                  					; cl is	sector + 2 high	bits of	cylinder
  5981 00001DBA 88D6                    		mov	dh, dl		; dh is	head
  5982                                  		
  5983                                  		; 14/08/2023 (ds=cs)
  5984 00001DBC 8A16[C516]              		mov	dl, [rom_drv_num]
  5985                                  		;mov	dl, [cs:rom_drv_num] ; dl is drive number
  5986                                  
  5987                                  
  5988                                  ; cl is sector + 2 high bits of cylinder
  5989                                  ; ch is low 8 bits of cylinder
  5990                                  ; dh is head
  5991                                  ; dl is drive
  5992                                  
  5993                                  ; for convenience, we are going to read the logical boot sector
  5994                                  ; into cs:disksector area.
  5995                                  
  5996                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5997                                  ; is to be read in is cs:disksector.
  5998                                  
  5999 00001DC0 0E                      		push	cs
  6000 00001DC1 07                      		pop	es
  6001 00001DC2 BB[4E01]                		mov	bx, disksector	; for convenience,
  6002                                  					; we are going to read the logical boot	sector
  6003                                  					; into cs:disksector area.
  6004 00001DC5 B80102                  		mov	ax, 201h
  6005 00001DC8 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6006                                  					; AL = number of sectors to read, CH = track, CL = sector
  6007                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6008                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6009                                  		; 16/12/2023
  6010 00001DCA 7303                    		jnc	short set3_read_ok
  6011                                  set3_err:
  6012 00001DCC E9E101                  		jmp	ret_hard_err
  6013                                  
  6014                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  6015                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  6016                                  ; media if we recognize the version number.
  6017                                  
  6018                                  set3_read_ok:
  6019                                  		; 14/08/2023
  6020                                  		;mov	bx, disksector	; BIOSDATA:014Eh ; MSDOS 6.21 ; 11/08/2023
  6021                                  					; BIOSDATA:0152h ; PCDOS 7.1 IBMBIO.COM
  6022                                  		; 18/12/2023
  6023                                  		;push	bx ; +
  6024                                  		;push	ax ; (not necessary)
  6025                                  
  6026                                  		; 16/12/2023
  6027                                  		;cmp	word [bx+1FEh], 0AA55h
  6028                                  		;jne	short invalid_boot_record
  6029                                  		
  6030                                  		; 14/08/2023
  6031                                  		; ds = cs = BIOSDATA segment ('disksector:' is in BIOSDATA) 
  6032 00001DCF 803FE9                  		cmp	byte [bx], 0E9h
  6033                                  		;cmp	byte [cs:bx], 0E9h ; is it a near jump?
  6034 00001DD2 740B                    		je	short check_1_ok ; yes
  6035 00001DD4 803FEB                  		cmp	byte [bx], 0EBh
  6036                                  		;cmp	byte [cs:bx], 0EBh ; is it a short jump?
  6037 00001DD7 7523                    		jne	short invalid_boot_record ; no
  6038 00001DD9 807F0290                		cmp	byte [bx+2], 90h
  6039                                  		;cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  6040 00001DDD 751D                    		jne	short invalid_boot_record ; no, invalid bs ; 11/08/2023
  6041                                  check_1_ok:
  6042                                  
  6043                                  ; 18/12/2023
  6044                                  %if 0	
  6045                                  		; 14/08/2023			
  6046                                  		mov	bx, disksector+11 ; disksector+EXT_BOOT.BPB
  6047                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  6048                                  					; point	to the bpb in the boot record
  6049                                  		;mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  6050                                  		mov	al, [bx+10] ; 14/08/2023 
  6051                                  					; get the mediadescriptor byte
  6052                                  		and	al, 0F0h	; mask off low nibble
  6053                                  		cmp	al, 0F0h	; is high nibble = 0Fh?
  6054                                  		jne	short invalid_boot_record ; no,	invalid	boot record
  6055                                  		;cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  6056                                  		cmp	word [bx], 512 ; 14/08/2023
  6057                                  		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  6058                                  
  6059                                  check2_ok:				; yes, mediadescriptor ok.
  6060                                  		mov	al, [bx+2] ; 14/08/2023
  6061                                  		;mov	al, [cs:bx+2]	; now make sure that
  6062                                  					; the sectorspercluster	is
  6063                                  					; a power of 2
  6064                                  					;
  6065                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  6066                                  					; get the sectorspercluster
  6067                                  %endif
  6068                                  		; 18/12/2023
  6069                                  		; bx = disksector
  6070 00001DDF 8A4715                  		mov	al, [bx+21]	; [bx+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  6071                                  					; get the mediadescriptor byte
  6072 00001DE2 24F0                    		and	al, 0F0h	; mask off low nibble
  6073 00001DE4 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  6074 00001DE6 7514                    		jne	short invalid_boot_record ; no, invalid boot record
  6075 00001DE8 817F0B0002              		cmp	word [bx+11], 512 ; [bx+EXT_BOOT.BPB+EBPB.BYTESPERSECTOR]
  6076 00001DED 750D                    		jne	short invalid_boot_record ; invalidate non 512 byte sectors
  6077                                  
  6078                                  check2_ok:	; yes, mediadescriptor ok.
  6079 00001DEF 8A470D                  		mov	al, [bx+13]	; now make sure that
  6080                                  					; the sectorspercluster is
  6081                                  					; a power of 2
  6082                                  					;
  6083                                  					; [bx++EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  6084                                  					; get the sectorspercluster
  6085                                  
  6086 00001DF2 08C0                    		or	al, al		; is it	zero?
  6087 00001DF4 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  6088                                  
  6089                                  ck_power_of_two:			
  6090 00001DF6 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  6091 00001DF8 73FC                    		jnc	short ck_power_of_two
  6092 00001DFA 7406                    		jz	short valid_boot_record
  6093                                  
  6094                                  invalid_boot_record:			
  6095                                  		; 18/12/2023
  6096                                  		;pop	ax
  6097                                  		;pop	bx ; +
  6098 00001DFC E9FE00                  		jmp	unknown		; jump to invalid boot record
  6099                                  					; unformatted or illegal media.
  6100                                  	; 14/08/2023	
  6101                                  ; ---------------------------------------------------------------------------
  6102                                  ; 16/12/2023
  6103                                  ;setret_brdg:
  6104                                  ;		jmp	setret
  6105                                  ; ---------------------------------------------------------------------------
  6106                                  
  6107                                  unknown3_0_j:				
  6108 00001DFF E9FF00                  		jmp	unknown3_0	; legally formatted media,
  6109                                  					; although, content might be bad.
  6110                                  ; ---------------------------------------------------------------------------
  6111                                  
  6112                                  valid_boot_record:
  6113                                  		; 18/12/2023
  6114                                  		;pop	ax
  6115                                  		;pop	bx ; +
  6116                                  		
  6117                                  		; 18/12/2023
  6118                                  		; bx = offset disksector ; +
  6119                                  
  6120                                  ; Signature found. Now check version.
  6121                                  
  6122                                  		; 14/08/2023
  6123 00001E02 817F08322E              		cmp	word [bx+8], '2.'
  6124                                  		;cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  6125                                  		;;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  6126 00001E07 7506                    		jnz	short try5
  6127 00001E09 807F0A30                		cmp	byte [bx+10], '0'
  6128                                  		;cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  6129                                  		;;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  6130                                  		; 14/08/2023
  6131                                  		;jnz	short try5
  6132                                  		;jmp	short copybpb
  6133 00001E0D 7425                    		jz	short copybpb
  6134                                  
  6135                                  	; 14/08/2023
  6136                                  ; ---------------------------------------------------------------------------
  6137                                  ;
  6138                                  ;setret_brdg:				
  6139                                  ;		jmp	setret
  6140                                  ; ---------------------------------------------------------------------------
  6141                                  ;
  6142                                  ;unknown3_0_j:				
  6143                                  ;		jmp	unknown3_0	; legally formatted media,
  6144                                  ;					; although, content might be bad.
  6145                                  ; ---------------------------------------------------------------------------
  6146                                  
  6147                                  try5:					
  6148 00001E0F E8A201                  		call	cover_fdisk_bug
  6149                                  
  6150                                  ; see if it is an os2 signature
  6151                                  
  6152                                  		; 14/08/2023
  6153                                  		; ds = cs = BIOSDATA segment
  6154 00001E12 817F08302E              		cmp	word [bx+8], '0.'
  6155                                  		;cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  6156                                  		;;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  6157 00001E17 750C                    		jnz	short no_os2
  6158 00001E19 8A4707                  		mov	al, [bx+7] ; 12/08/2023
  6159                                  		;mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  6160 00001E1C 2C31                    		sub	al, '1'
  6161                                  		;sub	al, 31h		; '1'
  6162 00001E1E 24FE                    		and	al, 0FEh
  6163 00001E20 7412                    		jz	short copybpb	; accept either	'1' or '2'
  6164 00001E22 E9D800                  		jmp	unknown
  6165                                  ; ---------------------------------------------------------------------------
  6166                                  
  6167                                  ; no os2 signature, this is to check for real dos versions
  6168                                  
  6169                                  no_os2:					
  6170                                  		; 14/08/2023
  6171                                  		; ds = cs = BIOSDATA
  6172 00001E25 817F08332E              		cmp	word [bx+8], '3.'			
  6173                                  		;cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  6174                                  		;;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  6175 00001E2A 72D3                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  6176                                  					; do not trust it, but still legal.
  6177 00001E2C 7506                    		jnz	short copybpb	; honor	os2 boot record
  6178                                  					; or dos 4.0 version
  6179 00001E2E 807F0A31                		cmp	byte [bx+10], '1' ; 14/08/2023
  6180                                  		;cmp	byte [cs:bx+10], '1'
  6181                                  		;;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  6182 00001E32 72CB                    		jb	short unknown3_0_j ; if version >= 3.1, then o.k.
  6183                                  copybpb:
  6184                                  
  6185                                  ; 03/10/2022
  6186                                  
  6187                                  ; we have a valid boot sector. use the bpb in it to build the
  6188                                  ; bpb in bios. it is assumed that only
  6189                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  6190                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  6191                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  6192                                  ; need to be set (all other values in already). fbigfat is also set.
  6193                                  
  6194                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  6195                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  6196                                  ; and system id according to the boot record.
  6197                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  6198                                  
  6199                                  		; 10/12/2022
  6200                                  		; (number of FATs optimization)
  6201 00001E34 BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  6202                                  		;;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  6203                                  		;mov	cl, [cs:si+05h]
  6204                                  		; 14/08/2023
  6205                                  		; ds = cs = BIOSDATA segment (0070h)
  6206 00001E37 8A4C05                  		mov	cl, [si+05h] ; number of FATs
  6207                                  
  6208 00001E3A 807C1B29                		cmp	byte [si+1Bh], 29h ; 14/08/2023
  6209                                  		;cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  6210                                  		;;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  6211                                  					; [disksector+EXT_BOOT.SIG]
  6212                                  					; EXT_BOOT_SIGNATURE
  6213 00001E3E 753A                    		jnz	short copybpb_fat ; conventional fat system
  6214                                  
  6215                                  		; 03/10/2022
  6216                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  6217                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  6218                                  		;	     number of FATs must be 2 ; =*?=
  6219                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  6220                                  		;
  6221                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  6222                                  
  6223                                  		; 10/12/2022
  6224                                  		;cmp	byte [cs:disksector+10h], 0
  6225                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  6226                                  		;jnz	short copybpb_fat ; a fat system.
  6227 00001E40 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  6228 00001E42 7536                    		jnz	short copybpb_fat ; a fat system.
  6229                                  
  6230                                  ; non fat based	media.
  6231                                  
  6232 00001E44 57                      		push	di  ; BDS
  6233                                  		; 14/08/2023
  6234                                  		;push	ds  ; ds = cs = BIOSDATA segment
  6235                                  
  6236                                  		; 17/12/2023
  6237                                  		; es = ds = cs
  6238                                  		;push	ds
  6239                                  		;pop	es
  6240                                  
  6241                                  		; 14/08/2023
  6242                                  		; ds = cs
  6243                                  		;push	cs
  6244                                  		;pop	ds
  6245                                  
  6246                                  		; 10/12/2022
  6247                                  		; (number of FATs optimization)
  6248                                  		; SI = disksector+11
  6249                                  		; 17/10/2022
  6250                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6251                                  		;mov	si, disksector+11
  6252 00001E45 83C706                  		add	di, 6		; add di,BDS.BPB
  6253                                  
  6254                                  ; just for completeness, we'll make sure that total_sectors and
  6255                                  ; big_total_sectors aren't both zero. I've seen examples of
  6256                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  6257                                  ; got that way. If it occurs, then use the values from the
  6258                                  ; partition table.
  6259                                  
  6260                                  		; 18/12/2022
  6261 00001E48 29C9                    		sub	cx, cx 
  6262                                  
  6263                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  6264                                  		;jnz	short already_nonz 
  6265                                  		;			; how about big_total?
  6266                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  6267                                  		;jnz	short already_nonz ; we're okay if any are != 0
  6268                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6269                                  		;jnz	short already_nonz
  6270                                  
  6271                                  		; 14/08/2023
  6272                                  		; ds = cs = BIOSDATA segment (0070h)
  6273                                  
  6274                                  		; 18/12/2022
  6275                                  		;cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  6276                                  		; 14/08/2023
  6277 00001E4A 394C08                  		cmp	[si+8], cx ; 0
  6278 00001E4D 751C                    		jnz	short already_nonz
  6279                                  					     	; how about big_total?
  6280                                  		;cmp	[cs:si+15h], cx ; 0 	; [cs:si+EBPB.BIGTOTALSECTORS]
  6281                                  		; 14/08/2023
  6282 00001E4F 394C15                  		cmp	[si+15h], cx ; 0
  6283 00001E52 7517                    		jnz	short already_nonz	; we're okay if any are != 0
  6284                                  		;cmp	[cs:si+17h], cx ; 0  	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6285 00001E54 394C17                  		cmp	[si+17h], cx ; 0
  6286 00001E57 7512                    		jnz	short already_nonz
  6287                                  
  6288                                  ; now let's copy the values from the partition table (now in the BDS)
  6289                                  ; into the BPB in the boot sector buffer, before they get copied back.
  6290                                  
  6291 00001E59 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  6292                                  		; 14/08/2023
  6293                                  		;mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  6294 00001E5C 894408                  		mov	[si+8], ax
  6295 00001E5F 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  6296                                  		;mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  6297 00001E62 894415                  		mov	[si+15h], ax
  6298 00001E65 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  6299                                  		;mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6300 00001E68 894417                  		mov	[si+17h], ax
  6301                                  
  6302                                  already_nonz:	
  6303                                  		; 18/12/2022
  6304                                  		; cx = 0
  6305 00001E6B B119                    		mov	cl, 25
  6306                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  6307 00001E6D F3A4                    		rep movsb
  6308                                  	
  6309                                  		; 17/12/2023 (BugFix and optimization)
  6310                                  		;pop	ds ; (BugFix)
  6311 00001E6F 5F                      		pop	di ; BDS
  6312                                  		;
  6313                                  		;push	es ; (BugFix)
  6314                                  		;push	ds
  6315                                  		;pop	es
  6316                                  		;push	cs
  6317                                  		;pop	ds
  6318                                  
  6319                                  		; 14/08/2023
  6320 00001E70 BD[2807]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  6321                                  		; 18/12/2022
  6322                                  		;mov	bp, mov_media_ids
  6323                                  		;;mov	bp, 751h	; mov_media_ids
  6324                                  					; at 2C7h:751h = 70h:2CC1h
  6325                                  					; set volume id, systemid, serial.
  6326 00001E73 0E                      		push	cs		; simulate far call
  6327 00001E74 E8D6F8                  		call	call_bios_code
  6328                                  		; 14/08/2023
  6329                                  		; ds = cs = es
  6330                                  		;push	es
  6331                                  		;pop	ds
  6332                                  		;pop	es ; (BugFix) ; 17/12/2023
  6333 00001E77 E92F01                  		jmp	goodret
  6334                                  ; ---------------------------------------------------------------------------
  6335                                  
  6336                                  ; ****** cas ---
  6337                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6338                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6339                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6340                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6341                                  ; from the boot sector into the DPB anyway, we've just been using
  6342                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6343                                  ; we'll go ahead and copy it into the DPB, except in the case
  6344                                  ; that it equals zero, in which case we just use the values in
  6345                                  ; the DPB from the partition table.
  6346                                  
  6347                                  ; 17/10/2022
  6348                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6349                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6350                                  ; 09/12/2022
  6351                                  MOVMEDIAIDS equ mov_media_ids
  6352                                  CLEARIDS equ clear_ids
  6353                                  ; 11/09/2023
  6354                                  CLEARIDS_X equ clear_ids_x
  6355                                  
  6356                                  copybpb_fat:
  6357                                  		; 10/12/2022
  6358                                  		; (number of FATs optimization)
  6359                                  		; SI = disksector+11				
  6360                                  		; 17/10/2022
  6361                                  		;mov	si, disksector+11
  6362                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6363                                  					; cs:si	-> bpb in boot
  6364 00001E7A 31D2                    		xor	dx, dx
  6365                                  		; 14/08/2023
  6366                                  		; ds = cs = BIOSDATA segment (0070h)
  6367 00001E7C 8B4408                  		mov	ax, [si+8]
  6368                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6369                                  					; get totsec from boot sec
  6370 00001E7F 09C0                    		or	ax, ax
  6371 00001E81 7514                    		jnz	short copy_totsec ; if non zero, use that
  6372 00001E83 8B4415                  		mov	ax, [si+15h] ; 12/08/2023
  6373                                  		;mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6374                                  					; get the big version
  6375                                  					; (32 bit total	sectors)
  6376 00001E86 8B5417                  		mov	dx, [si+17h] ; 12/08/2023
  6377                                  		;mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6378                                  		; 10/12/2022
  6379                                  		; (number of FATs optimization)
  6380                                  		; CL = number of FATs (2 or 1) 
  6381 00001E89 89D3                    		mov	bx, dx		; see if it is a big zero
  6382 00001E8B 09C3                    		or	bx, ax
  6383 00001E8D 7508                    		jnz	short copy_totsec
  6384                                  			; screw it. it was bogus.
  6385 00001E8F 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6386 00001E92 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6387 00001E95 EB06                    		jmp	short fat_big_small
  6388                                  
  6389                                  		;mov	cx, dx
  6390                                  		;or	cx, ax		; see if it is a big zero
  6391                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6392                                  copy_totsec:				
  6393 00001E97 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6394                                  					; make DPB match boot sec
  6395 00001E9A 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6396                                  
  6397                                  		; 10/12/2022
  6398                                  ;totsec_already_set:			
  6399                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6400                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6401                                  
  6402                                  ; determine fat entry size.
  6403                                  
  6404                                  fat_big_small:
  6405                                  
  6406                                  ;at this moment dx;ax = total sector number
  6407                                  
  6408                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6409                                  ;from the BPB on the disk
  6410                                  				
  6411                                  		; 14/08/2023
  6412                                  		; ds = cs = BIOSDATA segment (0070h)
  6413                                  				
  6414 00001E9D 8B5C03                  		mov	bx, [si+3]
  6415                                  		;mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6416                                  					; get #reserved_sectors	from BPB
  6417 00001EA0 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6418                                  					; update BDS field
  6419 00001EA3 29D8                    		sub	ax, bx
  6420 00001EA5 83DA00                  		sbb	dx, 0		; update the count
  6421                                  		; 14/08/2023
  6422 00001EA8 8B5C0B                  		mov	bx, [si+0Bh]
  6423                                  		;mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6424                                  					; bx = sectors/fat
  6425 00001EAB 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6426                                  					; set in bds bpb
  6427                                  		; 10/12/2022
  6428                                  		; (number of FATs optimization)
  6429                                  		; CL = number of FATs (2 or 1) 
  6430                                  		;dec	cl ; *
  6431                                  		; 18/12/2022
  6432 00001EAE 49                      		dec	cx ; *
  6433 00001EAF D3E3                    		shl	bx, cl
  6434                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6435                                  		
  6436 00001EB1 29D8                    		sub	ax, bx		; sub #	fat sectors
  6437 00001EB3 83DA00                  		sbb	dx, 0
  6438 00001EB6 8B5C06                  		mov	bx, [si+6] ; 14/08/2023
  6439                                  		;mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6440                                  					; # root entries
  6441 00001EB9 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6442                                  					; set in bds bpb
  6443 00001EBC B104                    		mov	cl, 4
  6444 00001EBE D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6445 00001EC0 29D8                    		sub	ax, bx		; sub #	dir sectors
  6446 00001EC2 83DA00                  		sbb	dx, 0		;
  6447                                  					; dx:ax	now contains the
  6448                                  					; # of data sectors
  6449 00001EC5 31C9                    		xor	cx, cx ; *
  6450 00001EC7 8A4C02                  		mov	cl, [si+2] ; 14/08/2023
  6451                                  		;mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6452                                  					; sectors per cluster
  6453 00001ECA 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6454                                  					; set in bios bpb
  6455 00001ECD 50                      		push	ax
  6456 00001ECE 89D0                    		mov	ax, dx
  6457 00001ED0 31D2                    		xor	dx, dx
  6458 00001ED2 F7F1                    		div	cx		; cx = sectors per cluster
  6459                                  		; 14/08/2023 (ds=cs)
  6460 00001ED4 A3[2205]                		mov	[temp_h], ax
  6461                                  		;mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6462                                  					; # clusters.
  6463 00001ED7 58                      		pop	ax
  6464 00001ED8 F7F1                    		div	cx
  6465                                  		;cmp	word [cs:temp_h], 0
  6466 00001EDA 833E[2205]00            		cmp	word [temp_h], 0 ; 14/08/2023
  6467 00001EDF 7714                    		ja	short toobig_ret ; too big cluster number
  6468 00001EE1 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6469                                  					; is this 16-bit fat?
  6470 00001EE4 7205                    		jb	short copymediaid ; no,	small fat
  6471                                  		; 17/10/2022
  6472 00001EE6 800E[C216]40            		or	byte [fbigfat], 40h
  6473                                  		;or	ds:fbigfat, 40h	; fbig
  6474                                  					; 16 bit fat
  6475                                  copymediaid:				
  6476                                  		; 17/12/2023
  6477                                  		; es = ds = cs
  6478                                  		
  6479                                  		;push	es
  6480                                  		;push	ds
  6481                                  		;pop	es
  6482                                  
  6483                                  		; 14/08/2023
  6484                                  		; ds = cs = BIOSDATA
  6485                                  		;push	cs
  6486                                  		;pop	ds
  6487                                  		; 17/10/2022
  6488 00001EEB BD[2807]                		mov	bp, MOVMEDIAIDS
  6489                                  		;mov	bp, 751h	; mov_media_ids
  6490                                  					; at 2C7h:751h = 70h:2CC1h
  6491                                  					; copy filesys_id, volume label
  6492 00001EEE 0E                      		push	cs		; simulate far call
  6493 00001EEF E85BF8                  		call	call_bios_code
  6494                                  
  6495                                  		; 14/08/2023
  6496                                  		;push	es
  6497                                  		;pop	ds
  6498                                  		; 17/12/2023
  6499                                  		;pop	es
  6500                                  
  6501 00001EF2 E99600                  		jmp	massage_bpb	; now final check for bpb info
  6502                                  					; and return.
  6503                                  ; ---------------------------------------------------------------------------
  6504                                  
  6505                                  toobig_ret:				
  6506                                  		; 14/08/2023 (ds=cs=BIOSDATA)
  6507 00001EF5 800E[C216]80            		or	byte [fbigfat], 80h ; ftoobig
  6508                                  		;or	byte [cs:fbigfat], 80h ; ftoobig 
  6509                                  					; too big (32 bit clust #) for FAT16
  6510 00001EFA E9AC00                  		jmp	goodret		; still	drive letter is	assigned
  6511                                  					; but useless. to big for
  6512                                  					; current pc dos fat file system
  6513                                  ; ---------------------------------------------------------------------------
  6514                                  
  6515                                  unknown:	
  6516                                  		; 12/12/2022
  6517 00001EFD 804D2402                		or	byte [di+24h], 02h			
  6518                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6519                                  					; unformatted_media
  6520                                  					; Set unformatted media	flag.
  6521                                  
  6522                                  ; the boot signature may not be	recognizable,
  6523                                  ; but we should	try and	read it	anyway.
  6524                                  
  6525                                  unknown3_0:				
  6526 00001F01 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6527                                  					; [di+BDS.totalsecs32+2]
  6528 00001F04 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6529 00001F07 BE[F216]                		mov	si, disktable2
  6530                                  
  6531                                  scan:					
  6532                                  		;cmp	dx, [cs:si]	; total sectors hw
  6533                                  		; 14/08/2023 (ds=cs)
  6534 00001F0A 3B14                    		cmp	dx, [si] 
  6535 00001F0C 720C                    		jb	short gotparm
  6536 00001F0E 7705                    		ja	short scan_next
  6537                                  		;cmp	ax, [cs:si+2]	; total sectors lw
  6538 00001F10 3B4402                  		cmp	ax, [si+2]
  6539 00001F13 7605                    		jbe	short gotparm
  6540                                  
  6541                                  scan_next:				
  6542 00001F15 83C60A                  		add	si, 10		; 5*2
  6543 00001F18 EBF0                    		jmp	short scan	; covers upto 512 mb media
  6544                                  ; ---------------------------------------------------------------------------
  6545                                  
  6546                                  gotparm:				
  6547 00001F1A 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6548                                  		;or	ds:fbigfat, cl
  6549                                  		; 17/10/2022
  6550 00001F1D 080E[C216]              		or	[fbigfat], cl	; (fbig flag, 40h or 0) ; 08/08/2023
  6551                                  		; 14/08/2023
  6552                                  		; ds = cs = BIOSDATA
  6553 00001F21 8B4C04                  		mov	cx, [si+4]
  6554                                  		;mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6555                                  					; cl = log base 2 of ch
  6556 00001F24 8B5406                  		mov	dx, [si+6]
  6557                                  		;mov	dx, [cs:si+6]	; dx = number of root dir entries
  6558                                  
  6559                                  ; now calculate size of fat table
  6560                                  
  6561 00001F27 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6562                                  					; save number of (root)	dir entries
  6563 00001F2A 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6564 00001F2D 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6565 00001F30 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6566                                  					; save sectors per cluster
  6567                                  		; 17/10/2022
  6568 00001F33 F606[C216]40            		test	byte [fbigfat], 40h
  6569                                  		;test	ds:fbigfat, 40h	; fbig
  6570                                  					; if (fbigfat)
  6571 00001F38 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6572                                  
  6573                                  ; we don't need to change "small fat" logic since it is gauranteed
  6574                                  ; that double word total sector will not use 12 bit fat (unless
  6575                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6576                                  ; so in this case we assume dx = 0 !!
  6577                                  
  6578 00001F3A 31DB                    		xor	bx, bx		; (12 bit fat)
  6579 00001F3C 88EB                    		mov	bl, ch
  6580 00001F3E 4B                      		dec	bx
  6581 00001F3F 01C3                    		add	bx, ax		; dx=0
  6582 00001F41 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6583 00001F43 43                      		inc	bx		; BDS.secperclus
  6584 00001F44 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6585 00001F47 89DE                    		mov	si, bx
  6586 00001F49 D1EB                    		shr	bx, 1
  6587 00001F4B 01F3                    		add	bx, si
  6588 00001F4D 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6589 00001F51 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6590 00001F53 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6591                                  					; save number of fat sectors
  6592 00001F56 EB33                    		jmp	short massage_bpb
  6593                                  ; ---------------------------------------------------------------------------
  6594                                  
  6595                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6596                                  
  6597                                  dobig:					
  6598 00001F58 B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6599 00001F5A 52                      		push	dx		; save total sectors (high)
  6600 00001F5B 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6601 00001F5E D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6602 00001F60 29D0                    		sub	ax, dx
  6603 00001F62 5A                      		pop	dx
  6604 00001F63 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6605 00001F66 83E801                  		sub	ax, 1
  6606 00001F69 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6607                                  					; total	secs - reserved	secs - root dir	secs
  6608 00001F6C B302                    		mov	bl, 2
  6609 00001F6E 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6610                                  					; bx = 256 * BDS.secperclus + 2
  6611                                  
  6612                                  ; I don't understand why to add bx here!!!
  6613                                  
  6614                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6615                                  		; 27/09/2022
  6616                                  		; (Microsoft FAT32 File	System Specification,
  6617                                  		; December 2000, Page 21)
  6618                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6619                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6620                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6621                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6622                                  		
  6623                                  					; dx:ax = TmpVal1, bx = TmpVal2
  6624 00001F71 01D8                    		add	ax, bx		; 
  6625 00001F73 83D200                  		adc	dx, 0		; dx:ax = TmpVal1+TmpVal2
  6626 00001F76 83E801                  		sub	ax, 1		
  6627 00001F79 83DA00                  		sbb	dx, 0		; dx:ax = TmpVal1+TmpVal2-1
  6628                                  
  6629                                  ; assuming dx in the table will never be bigger than bx.
  6630                                  
  6631 00001F7C F7F3                    		div	bx		; BDS.fatsecs =
  6632                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6633 00001F7E 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6634                                  					; number of fat	sectors
  6635                                  
  6636                                  ; now, set the default filesys_id, volume label, serial number
  6637                                  
  6638                                  		; 14/08/2023
  6639                                  		; [di+1Fh] = [fbigfat]
  6640                                  		;
  6641                                  		;;mov	bl, ds:fbigfat
  6642                                  		;; 17/10/2022
  6643                                  		;mov	bl, [fbigfat]
  6644                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6645                                  
  6646                                  		; 14/08/2023
  6647                                  		;push	ds ; ds = cs = BIOSDATA
  6648                                  
  6649                                  		; 17/12/2023
  6650                                  		; es = ds = cs 
  6651                                  		;push	ds
  6652                                  		;pop	es
  6653                                  
  6654                                  		; 14/08/2023 
  6655                                  		; ds = cs = BIOSDATA
  6656                                  		;push	cs
  6657                                  		;pop	ds
  6658                                  		; 11/09/2023
  6659 00001F81 A0[C216]                		mov	al, [fbigfat]
  6660 00001F84 BD[CB05]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6661                                  		; 17/10/2022
  6662                                  		;mov	bp, CLEARIDS
  6663                                  		;;mov	bp, 5D9h	; clear_ids
  6664                                  					; at 2C7h:5D9h = 70h:2B49h
  6665                                  					; at BIOSCODE:06ABh
  6666                                  					;	in PCDOS 7.1 IBMBIO.COM
  6667 00001F87 0E                      		push	cs
  6668 00001F88 E8C2F7                  		call	call_bios_code
  6669                                  
  6670                                  		; 14/08/2023
  6671                                  		;pop	ds ; ds = cs = BIOSDATA
  6672                                  
  6673                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6674                                  ; set according to the partition information. we are going to
  6675                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6676                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6677                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6678                                  ; we don't do this for the bpb information from the boot record. we
  6679                                  ; are not going to change the bpb information from the boot record.
  6680                                  
  6681                                  massage_bpb:
  6682                                  		; 14/08/2023
  6683                                  		; [di+1Fh] = [fbigfat]
  6684                                  		;
  6685                                  		;; 12/12/2022
  6686                                  		;mov	bl, [fbigfat]
  6687                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6688                                  		;			; set size of fat on media
  6689                                  		;
  6690 00001F8B 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6691 00001F8E 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6692                                  		; 11/09/2023
  6693 00001F91 09D2                    		or	dx, dx
  6694 00001F93 7514                    		jnz	short goodret	
  6695                                  		;cmp	dx, 0		; double word total sectors?
  6696                                  		;;ja	short goodret	; don't have to change it.
  6697                                  		;; 12/12/2022
  6698                                  		;ja	short short goodret2
  6699                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6700                                  		;ja	short goodret	; don't have to change it.
  6701                                  		; 12/12/2022
  6702 00001F95 395519                  		cmp	[di+19h], dx ; 0
  6703                                  		;ja	short goodret2
  6704 00001F98 770F                    		ja	short goodret	; 11/09/2023
  6705 00001F9A 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6706                                  		;jb	short goodret
  6707                                  		; 12/12/2022
  6708                                  		;jc	short goodret
  6709 00001F9D 7209                    		jc	short goodret_clc ; 11/09/2023
  6710 00001F9F 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6711 00001FA2 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6712                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6713                                  		; 12/12/2022
  6714 00001FA5 89551B                  		mov	[di+1Bh], dx ; 0
  6715                                  goodret_clc:
  6716                                  		; 11/09/2023
  6717 00001FA8 F8                      		clc 
  6718                                  goodret:
  6719                                  		;mov	bl, ds:fbigfat
  6720                                  		; 11/09/2023
  6721                                  		; 12/12/2022
  6722                                  		; 17/10/2022
  6723 00001FA9 8A1E[C216]              		mov	bl, [fbigfat]
  6724 00001FAD 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6725                                  					; set size of fat on media
  6726                                  		; 11/09/2023
  6727                                  		;clc
  6728                                  ret_hard_err:
  6729                                  		; 12/12/2022
  6730                                  goodret2:
  6731 00001FB0 07                      		pop	es
  6732                                  		;pop	ds	; ds = cs = BIOSDATA ; 14/08/2023
  6733 00001FB1 5B                      		pop	bx
  6734 00001FB2 5F                      		pop	di
  6735 00001FB3 C3                      		retn
  6736                                  
  6737                                  ; =============== S U B	R O U T	I N E =======================================
  6738                                  
  6739                                  ; 15/10/2022
  6740                                  
  6741                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6742                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6743                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6744                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6745                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6746                                  
  6747                                  		; 17/10/2022
  6748                                  cover_fdisk_bug:	
  6749                                  		; 14/08/2023
  6750                                  		; ds = cs
  6751                                  		
  6752                                  		; 18/12/2023
  6753                                  		;push	ax
  6754                                  		;push	dx
  6755                                  		;push	si
  6756                                  
  6757                                  		; 18/12/2023
  6758                                  		; bx = offset disksector
  6759                                  
  6760                                  		; 18/12/2023
  6761 00001FB4 807F2629                		cmp	byte [bx+26h], 29h
  6762                                  		; 14/08/2023
  6763                                  		;cmp	byte [disksector+26h], 29h
  6764                                  		;;cmp	byte [cs:disksector+26h], 29h
  6765                                  					; [disksector+EXT_BOOT.SIG],
  6766                                  					; EXT_BOOT_SIGNATURE
  6767 00001FB8 7426                    		je	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6768                                  		
  6769 00001FBA 817F073130              		cmp	word [bx+7], 3031h
  6770                                  		;cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6771 00001FBF 7506                    		jne	short cfb_chk_totalsecs ; 14/08/2023
  6772 00001FC1 807F0A30                		cmp	byte [bx+10], '0'
  6773                                  		;cmp	byte [cs:bx+10], '0'
  6774 00001FC5 7519                    		jne	short cfb_retit
  6775                                  
  6776                                  cfb_chk_totalsecs:
  6777                                  ; 18/12/2023
  6778                                  %if 0
  6779                                  		; 17/10/2022
  6780                                  		mov	si, disksector+11 ; 14Eh+0Bh
  6781                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6782                                  		; 14/08/2023
  6783                                  		cmp	word [si+8], 0
  6784                                  		;cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6785                                  					; just to make sure.
  6786                                  		jz	short cfb_retit
  6787                                  		;mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6788                                  		;add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6789                                  		; 14/08/2023
  6790                                  		mov	ax, [si+8]
  6791                                  		add	ax, [si+11h]
  6792                                  
  6793                                  		jnc	short cfb_retit
  6794                                  		jnz	short cfb_retit
  6795                                  					; if carry set and ax=0
  6796                                  		dec	word [si+8]
  6797                                  		;dec	word [cs:si+8]	; 0 -> 0FFFFh
  6798                                  					; then decrease	BPB_TOTALSECTORS by 1
  6799                                  %endif
  6800                                  		; 18/12/2023
  6801                                  		;cmp	word [bx+19], 0
  6802 00001FC7 8B4713                  		mov	ax, [bx+19]	; [bx+EBPB.TOTALSECTORS]
  6803 00001FCA 21C0                    		and	ax, ax ; 0 ?
  6804 00001FCC 7412                    		jz	short cfb_retit
  6805                                  
  6806                                  		;mov	ax, [bx+19]
  6807 00001FCE 03471C                  		add	ax, [bx+28]	; [bx+EBPB.HIDDENSECTORS]
  6808 00001FD1 730D                    		jnc	short cfb_retit
  6809 00001FD3 750B                    		jnz	short cfb_retit
  6810                                  		; ax = 0		; 0 -> 0FFFFh
  6811 00001FD5 FF4F13                  		dec	word [bx+19]	; then decrease	BPB_TOTALSECTORS by 1
  6812                                  
  6813 00001FD8 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6814 00001FDC 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6815                                  cfb_retit:	
  6816                                  		; 18/12/2023
  6817                                  		;pop	si
  6818                                  		;pop	dx
  6819                                  		;pop	ax
  6820                                  		
  6821 00001FE0 C3                      		retn
  6822                                  
  6823                                  ; ---------------------------------------------------------------------------
  6824                                  
  6825 00001FE1 0200                    word2:		dw 2
  6826 00001FE3 0300                    word3:		dw 3
  6827 00001FE5 0002                    word512:	dw 512
  6828                                  
  6829                                  ; =============== S U B	R O U T	I N E =======================================
  6830                                  
  6831                                  ; 15/10/2022
  6832                                  
  6833                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6834                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6835                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6836                                  ; as the bpb on the drive.
  6837                                  ;
  6838                                  ; no attempt is made to preserve registers since we are going to jump to
  6839                                  ; sysinit straight after this routine.
  6840                                  
  6841                                  setdrvparms:
  6842                                  		; 14/12/2023
  6843                                  		; ds = cs
  6844 00001FE7 31DB                    		xor	bx, bx
  6845                                  		; 18/10/2022
  6846 00001FE9 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6847                                  _next_bds:				
  6848 00001FED 06                      		push	es
  6849 00001FEE 57                      		push	di
  6850 00001FEF 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6851 00001FF3 80FB05                  		cmp	bl, 5		; ffHardFile
  6852 00001FF6 753E                    		jnz	short nothardff
  6853 00001FF8 31D2                    		xor	dx, dx
  6854 00001FFA 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6855 00001FFE 09C0                    		or	ax, ax
  6856 00002000 7508                    		jnz	short get_ccyl
  6857 00002002 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6858 00002006 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6859                                  
  6860                                  get_ccyl:				
  6861 0000200A 52                      		push	dx
  6862 0000200B 50                      		push	ax
  6863 0000200C 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6864 00002010 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6865                                  					; assume sectors per cyl. < 64k.
  6866 00002014 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6867 00002016 58                      		pop	ax
  6868 00002017 5A                      		pop	dx		; dx:ax	= total	sectors
  6869 00002018 50                      		push	ax
  6870 00002019 89D0                    		mov	ax, dx
  6871 0000201B 31D2                    		xor	dx, dx
  6872 0000201D F7F1                    		div	cx
  6873                                  
  6874                                  		; 14/12/2023  ; !*!
  6875                                  		; (data segment may not be same with code segment here)
  6876 0000201F 2EA3[2205]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6877                                  
  6878 00002023 58                      		pop	ax
  6879 00002024 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6880 00002026 09D2                    		or	dx, dx
  6881 00002028 7401                    		jz	short no_cyl_rnd ; came out even
  6882 0000202A 40                      		inc	ax		; round	up
  6883                                  
  6884                                  no_cyl_rnd:				
  6885 0000202B 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6886 0000202F 06                      		push	es
  6887 00002030 1F                      		pop	ds  ; !*! ; 14/12/2023
  6888 00002031 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6889                                  					; ds:si	-> bpb for hard	file
  6890 00002034 EB55                    		jmp	short set_recbpb
  6891                                  ; ---------------------------------------------------------------------------
  6892                                  
  6893                                  nothardff:				
  6894 00002036 0E                      		push	cs
  6895 00002037 1F                      		pop	ds
  6896                                  
  6897                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6898                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6899                                  
  6900                                  		; 10/12/2022
  6901                                  		; ds = cs
  6902                                  		; 17/10/2022 (ds=cs)
  6903 00002038 803E[C916]01            		cmp	byte [fakefloppydrv], 1
  6904                                  		;cmp	byte [cs:fakefloppydrv], 1
  6905 0000203D 7454                    		jz	short go_to_next_bds
  6906 0000203F 80FB07                  		cmp	bl, 7		; ffother
  6907                                  					; special case "other" type of medium
  6908 00002042 753D                    		jnz	short not_process_other
  6909                                  process_other:
  6910 00002044 31D2                    		xor	dx, dx
  6911 00002046 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6912 00002049 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6913 0000204C F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6914 0000204F 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6915                                  					; have the total number of sectors
  6916 00002052 48                      		dec	ax
  6917 00002053 B201                    		mov	dl, 1
  6918                                  _again:					
  6919 00002055 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6920 00002058 7206                    		jb	short _@@
  6921 0000205A D1E8                    		shr	ax, 1
  6922 0000205C D0E2                    		shl	dl, 1
  6923 0000205E EBF5                    		jmp	short _again
  6924                                  ; ---------------------------------------------------------------------------
  6925                                  
  6926                                  _@@:					
  6927 00002060 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6928 00002063 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6929 00002065 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6930                                  __@@:					
  6931 0000206A 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6932                                  
  6933                                  ; logic to get the sectors/fat area.
  6934                                  ; fat entry is assumed to be 1.5 bytes!!!
  6935                                  
  6936                                  		; 10/12/2022
  6937                                  		; ds = cs
  6938                                  		; 17/10/2022 (ds=cs)
  6939 0000206D F726[E31F]              		mul	word [word3]
  6940 00002071 F736[E11F]              		div	word [word2]
  6941 00002075 31D2                    		xor	dx, dx
  6942 00002077 F736[E51F]              		div	word [word512]
  6943                                  		;
  6944                                  		; 10/12/2022
  6945                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6946                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6947                                  		;xor	dx, dx
  6948                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6949                                  		;
  6950 0000207B 40                      		inc	ax		; + 1
  6951                                  no_round_up:
  6952 0000207C 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6953 0000207F EB12                    		jmp	short go_to_next_bds
  6954                                  ; ---------------------------------------------------------------------------
  6955                                  
  6956                                  not_process_other:			
  6957 00002081 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6958                                  		;mov	si, bpbtable
  6959                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6960                                  		; 09/12/2022
  6961                                  		;mov	si, BPBTABLE
  6962                                  		;mov	si, [bx+si]	; get address of bpb
  6963                                  		; 10/12/2022
  6964                                  		;mov	si, [BPBTABLE+bx]
  6965                                  		; 13/12/2022
  6966                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6967                                  		; 14/08/2023
  6968                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6969                                  							; correct offset
  6970 00002083 8BB7[3472]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6971                                  		
  6972                                  		; 28/08/2023
  6973 00002087 81C6303C                		add	si, SYSINIT_OFFSET
  6974                                  set_recbpb:				
  6975 0000208B 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6976                                  					; es:di	-> recbpb
  6977 0000208E B91900                  		mov	cx, 25		; bpbx.size
  6978 00002091 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6979                                  go_to_next_bds:				
  6980 00002093 5F                      		pop	di
  6981 00002094 07                      		pop	es		; restore pointer to bds
  6982 00002095 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6983 00002098 83FFFF                  		cmp	di, 0FFFFh	; -1
  6984 0000209B 740A                    		jz	short got_end_of_bds_chain
  6985 0000209D E94DFF                  		jmp	_next_bds
  6986                                  ; ---------------------------------------------------------------------------
  6987                                  
  6988                                  		; 18/12/2022
  6989                                  ;got_end_of_bds_chain:			
  6990                                  		;retn
  6991                                  
  6992                                  ; =============== S U B	R O U T	I N E =======================================
  6993                                  
  6994                                  ; 15/10/2022
  6995                                  ; 30/12/2018 - Retro DOS v4.0
  6996                                  
  6997                                  ; al = device number
  6998                                  
  6999                                  print_init:	
  7000 000020A0 98                      		cbw
  7001 000020A1 89C2                    		mov	dx, ax
  7002 000020A3 B401                    		mov	ah, 1
  7003 000020A5 CD17                    		int	17h		; PRINTER - INITIALIZE
  7004                                  					; DX = printer port (0-3)
  7005                                  					; Return: AH = status
  7006                                  got_end_of_bds_chain:	; 18/12/2022
  7007 000020A7 C3                      		retn
  7008                                  
  7009                                  ; =============== S U B	R O U T	I N E =======================================
  7010                                  
  7011                                  ; al = device number
  7012                                  
  7013                                  aux_init:
  7014 000020A8 98                      		cbw
  7015 000020A9 89C2                    		mov	dx, ax
  7016                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  7017                                  					; 2400,n,1,8 (msequ.inc)
  7018                                  		;mov	ah, 0
  7019                                  		; 10/12/2022
  7020 000020AB B8A300                  		mov	ax, 00A3h
  7021 000020AE CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  7022                                  					; 	AL = initializing parameters,
  7023                                  					;	DX = port number (0-3)
  7024                                  					; Return: AH = RS-232 status code bits,
  7025                                  					;	  AL = modem status bits
  7026 000020B0 C3                      		retn
  7027                                  
  7028                                  ; =============== S U B	R O U T	I N E =======================================
  7029                                  
  7030                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  7031                                  ; 30/12/2018 - Retro DOS v4.0
  7032                                  ; 03/06/2018 - Retro DOS v3.0
  7033                                  ; (19/03/2018 - Retro DOS v2.0)
  7034                                  
  7035                                  ; domini **********************************************************************
  7036                                  ;
  7037                                  ;mini disk initialization routine. called right after dohard
  7038                                  ;modified for >2 hardfile support
  7039                                  ;
  7040                                  ; **cs=ds=es=datagrp
  7041                                  ;
  7042                                  ; **domini will search for every extended partition in the system, and
  7043                                  ;   initialize it.
  7044                                  ;
  7045                                  ; **bdsm stands for bds table for mini disk and located right after the label
  7046                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  7047                                  ;   address of bdsm table.
  7048                                  ;
  7049                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  7050                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  7051                                  ;   right now, they are called as ismini, hidden_trks respectively.
  7052                                  ;
  7053                                  ; **domini will use the same routine in sethard routine after label set2 to
  7054                                  ;   save coding.
  7055                                  ;
  7056                                  ; **drvmax determined in dohard routine will be used for the next
  7057                                  ;   available logical mini disk drive number.
  7058                                  ;
  7059                                  ; input: drvmax, dskdrvs
  7060                                  ;
  7061                                  ; output: minidisk installed. bdsm table established and installed to bds.
  7062                                  ;	  end_of_bdsm - ending offset address of bdsm.
  7063                                  ;
  7064                                  ; called modules:
  7065                                  ;		  getboot
  7066                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  7067                                  ;
  7068                                  ;		  setmini (new, it will use set2 routine)
  7069                                  ;
  7070                                  ; variables used: end_of_bdsm
  7071                                  ;		  rom_minidisk_num
  7072                                  ;		  mini_hdlim, mini_seclim
  7073                                  ;		  BDS_STRUC, start_bds
  7074                                  ;
  7075                                  ;******************************************************************************
  7076                                  
  7077                                  		; 18/12/2023
  7078                                  		; 19/10/2022
  7079                                  domini:
  7080 000020B1 8A36[3917]              		mov	dh, [hnum]	; get number of hardfiles
  7081                                  		; 10/12/2022
  7082 000020B5 20F6                    		and	dh, dh
  7083                                  		;cmp	dh, 0
  7084 000020B7 742F                    		jz	short dominiret	; no hard file?	then exit.
  7085 000020B9 B280                    		mov	dl, 80h		; start	with hardfile 80h
  7086                                  domini_loop:
  7087 000020BB 52                      		push	dx
  7088 000020BC 8816[3817]              		mov	[rom_minidisk_num], dl
  7089 000020C0 B408                    		mov	ah, 8
  7090 000020C2 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  7091                                  					; DL = drive number
  7092                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  7093                                  					; DL = number of consecutive drives
  7094                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  7095 000020C4 FEC6                    		inc	dh
  7096 000020C6 31C0                    		xor	ax, ax
  7097 000020C8 88F0                    		mov	al, dh
  7098 000020CA A3[3E17]                		mov	[mini_hdlim], ax ; # of heads
  7099 000020CD 80E13F                  		and	cl, 3Fh
  7100 000020D0 88C8                    		mov	al, cl
  7101 000020D2 A3[4017]                		mov	[mini_seclim], ax ; # of sectors/track
  7102                                  
  7103                                  		; 18/12/2023
  7104                                  		;push	es ; * ; not necessary
  7105 000020D5 8A16[3817]              		mov	dl, [rom_minidisk_num]
  7106 000020D9 E8B0FB                  		call	getboot		; read master boot record into
  7107                                  					; initbootsegment:bootbias
  7108 000020DC 7203                    		jc	short domininext
  7109 000020DE E80800                  		call	find_mini_partition
  7110                                  domininext:
  7111                                  		;pop	es ; *
  7112 000020E1 5A                      		pop	dx
  7113 000020E2 FEC2                    		inc	dl		; next hard file
  7114 000020E4 FECE                    		dec	dh
  7115 000020E6 75D3                    		jnz	short domini_loop
  7116                                  dominiret:
  7117 000020E8 C3                      		retn
  7118                                  
  7119                                  ; =============== S U B	R O U T	I N E =======================================
  7120                                  
  7121                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  7122                                  ; 30/12/2018 - Retro DOS v4.0
  7123                                  
  7124                                  ;find_mini_partition tries to find every extended partition on a disk.
  7125                                  ;at entry:	di -> bdsm entry
  7126                                  ;		es:bx -> 07c0:bootbias - master boot record
  7127                                  ;		rom_minidisk_num - rom drive number
  7128                                  ;		drvmax - logical drive number
  7129                                  ;		mini_hdlim, mini_seclim
  7130                                  ;
  7131                                  ;called routine: setmini which uses set2 (in sethard routine)
  7132                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  7133                                  
  7134                                  
  7135                                  find_mini_partition:	
  7136 000020E9 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  7137                                  fmpnext:				
  7138 000020ED 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  7139 000020F1 740A                    		jz	short fmpgot
  7140 000020F3 83C310                  		add	bx, 16
  7141 000020F6 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7142 000020FA 75F1                    		jnz	short fmpnext
  7143                                  		;jmp	short fmpnextfound ; extended partition	not found
  7144                                  		; 18/12/2022
  7145                                  fmpnextfound:
  7146 000020FC C3                      		retn
  7147                                  
  7148                                  ;		; 30/07/2019 - Retro DOS v3.2
  7149                                  ;		jb	short fmpnext
  7150                                  ;fmpret:
  7151                                  ;		retn	; 29/05/2019
  7152                                  
  7153                                  ; ---------------------------------------------------------------------------
  7154                                  
  7155                                  		; 19/10/2022
  7156                                  fmpgot:					; found my partition.
  7157 000020FD E89D00                  		call	dmax_check	; check	for drvmax already 26
  7158 00002100 73FA                    		jnb	short fmpnextfound ; done if too many
  7159 00002102 8B3E[3C17]              		mov	di, [end_of_bdss] ; get next free bds
  7160 00002106 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  7161                                  		; 10/12/2022
  7162 0000210B 804D2301                		or	byte [di+23h], 1
  7163                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  7164                                  					; fNon_Removable
  7165 0000210F C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  7166                                  					; ffHardFile
  7167 00002113 C606[C216]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  7168 00002118 A1[3E17]                		mov	ax, [mini_hdlim]
  7169 0000211B 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  7170 0000211E A1[4017]                		mov	ax, [mini_seclim]
  7171 00002121 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  7172 00002124 A0[3817]                		mov	al, [rom_minidisk_num]
  7173 00002127 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  7174                                  					; set physical number
  7175 0000212A A0[7500]                		mov	al, [drvmax]
  7176 0000212D 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  7177                                  					; set logical number
  7178 00002130 26837F0A00              		cmp	word [es:bx+10], 0
  7179 00002135 7707                    		ja	short fmpgot_cont
  7180 00002137 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  7181                                  					; only lower word is meaningful.
  7182 0000213C 72BE                    		jb	short fmpnextfound
  7183                                  					; should be bigger than 64 sectors at least
  7184                                  fmpgot_cont:				
  7185 0000213E 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  7186 00002141 268A7702                		mov	dh, [es:bx+2]	; cylinder
  7187 00002145 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  7188 00002148 D0C6                    		rol	dh, 1
  7189 0000214A D0C6                    		rol	dh, 1
  7190 0000214C 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  7191 00002150 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  7192                                  					; set hidden trks
  7193 00002153 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  7194 00002157 268A7701                		mov	dh, [es:bx+1]	; head
  7195 0000215B 8A16[3817]              		mov	dl, [rom_minidisk_num]
  7196 0000215F BB0002                  		mov	bx, 200h	; bootbias
  7197 00002162 B80102                  		mov	ax, 201h
  7198 00002165 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  7199                                  					; AL = number of sectors to read, CH = track, CL = sector
  7200                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  7201                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  7202 00002167 7293                    		jc	short fmpnextfound
  7203 00002169 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  7204                                  
  7205                                  		; 14/08/2023
  7206                                  		;push	es
  7207 0000216C E80800                  		call	setmini		; install a mini disk.
  7208                                  					; bx value saved.
  7209                                  		;pop	es  ; 14/08/2023
  7210 0000216F 7203                    		jc	short fmpnextchain
  7211 00002171 E83E00                  		call	xinstall_bds	; -- install the bdsm into table
  7212                                  fmpnextchain:				
  7213 00002174 E976FF                  		jmp	fmpnext		; let's find out
  7214                                  					; if we	have any chained partition
  7215                                  ; ---------------------------------------------------------------------------
  7216                                  
  7217                                  		; 18/12/2022
  7218                                  ;fmpnextfound:
  7219                                  		;retn
  7220                                  
  7221                                  ; =============== S U B	R O U T	I N E =======================================
  7222                                  
  7223                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7224                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  7225                                  
  7226                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  7227                                  	
  7228 00002177 57                      		push	di
  7229 00002178 53                      		push	bx
  7230                                  		; 14/08/2023
  7231                                  		; ds = cs = BIOSDATA segment
  7232                                  		;push	ds
  7233 00002179 06                      		push	es
  7234                                  setmini_1:				
  7235 0000217A 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  7236 0000217E 741A                    		jz	short setmini_2
  7237 00002180 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  7238 00002184 7414                    		jz	short setmini_2
  7239 00002186 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  7240 0000218A 740E                    		jz	short setmini_2
  7241 0000218C 83C310                  		add	bx, 16
  7242 0000218F 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  7243 00002193 75E5                    		jnz	short setmini_1
  7244 00002195 F9                      		stc
  7245 00002196 07                      		pop	es
  7246                                  		; 14/08/2023
  7247                                  		;pop	ds
  7248 00002197 5B                      		pop	bx
  7249 00002198 5F                      		pop	di
  7250 00002199 C3                      		retn
  7251                                  
  7252                                  ; ---------------------------------------------------------------------------
  7253                                  setmini_2:				
  7254 0000219A E98EFB                  		jmp	set2		; branch into middle of sethard
  7255                                  
  7256                                  ; =============== S U B	R O U T	I N E =======================================
  7257                                  
  7258                                  ; 15/10/2022
  7259                                  ; 28/12/2018 - Retro DOS v4.0
  7260                                  ;
  7261                                  ; dmax_check --- call this when we want to install a new drive.
  7262                                  ;		it checks for drvmax < 26 to see if there is
  7263                                  ;		a drive letter left.
  7264                                  ;
  7265                                  ;	drvmax < 26 : carry SET!
  7266                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  7267                                  ;			trash ax
  7268                                  
  7269                                  dmax_check:	
  7270 0000219D 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  7271 000021A2 720D                    		jb	short dmax_ok	; return with carry if okay
  7272 000021A4 06                      		push	es
  7273                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  7274 000021A5 B83304                  		mov	ax, SYSINITSEG	; 17/10/2022	
  7275 000021A8 8EC0                    		mov	es, ax
  7276                                  		; 18/10/2022
  7277 000021AA 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  7278                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  7279                                  					; set message flag
  7280                                  					; [SYSINIT+toomanydrivesflag]
  7281 000021B0 07                      		pop	es
  7282                                  
  7283                                  		;;push	es
  7284                                  		;;mov	ax,SYSINIT_SEG
  7285                                  		;;mov	es,ax
  7286                                  		;;mov	byte [es:toomanydrivesflag],1
  7287                                  					; set message flag
  7288                                  		;;pop	es
  7289                                  		;
  7290                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  7291                                  dmax_ok:				
  7292 000021B1 C3                      		retn
  7293                                  
  7294                                  ; =============== S U B	R O U T	I N E =======================================
  7295                                  
  7296                                  ; 18/10/2022
  7297                                  ; 15/10/2022
  7298                                  ; 28/12/2018 - Retro DOS v4.0						
  7299                                  ;								 
  7300                                  ;	link next bds (at ds:di) into the chain. assume that the
  7301                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  7302                                  ;	  dskdrv_table, and end_of_bdss.	
  7303                                  
  7304                                  xinstall_bds:		
  7305 000021B2 56                      		push	si
  7306 000021B3 53                      		push	bx
  7307 000021B4 8B36[1901]              		mov	si, [start_bds]	; get first bds
  7308                                  xinstall_bds_1:				
  7309 000021B8 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  7310 000021BB 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  7311                                  		;mov	si, [si+BDS.link]
  7312 000021BD 8B34                    		mov	si, [si]	; chain	through	list
  7313 000021BF EBF7                    		jmp	short xinstall_bds_1
  7314                                  ; ---------------------------------------------------------------------------
  7315                                  
  7316                                  xinstall_bds_2:				
  7317                                  		;mov	[si+BDS.link], di
  7318 000021C1 893C                    		mov	[si], di
  7319                                  		;mov	[si+BDS.link+2], ds
  7320 000021C3 8C5C02                  		mov	[si+2], ds
  7321                                  		;mov	word [di+BDS.link], -1
  7322 000021C6 C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  7323                                  		;mov	[di+BDS.link+2], ds
  7324 000021CA 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  7325                                  		; 20/03/2019 - Retro DOS v4.0
  7326                                  		;lea	bx, [di+BDS.BPB]
  7327 000021CD 8D5D06                  		lea	bx, [di+6]
  7328 000021D0 8B36[3A17]              		mov	si, [last_dskdrv_table]
  7329 000021D4 891C                    		mov	[si], bx
  7330 000021D6 8306[3A17]02            		add	word [last_dskdrv_table], 2
  7331 000021DB FE06[7500]              		inc	byte [drvmax]
  7332 000021DF 8306[3C17]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  7333 000021E4 5B                      		pop	bx
  7334 000021E5 5E                      		pop	si
  7335 000021E6 C3                      		retn
  7336                                  
  7337                                  ; =============== S U B	R O U T	I N E =======================================
  7338                                  
  7339                                  ; 17/10/2022
  7340                                  ; 15/10/2022
  7341                                  ; 28/12/2018 - Retro DOS v4.0
  7342                                  ; 03/06/2018 - Retro DOS v3.0
  7343                                  
  7344                                  		; 19/12/2023
  7345                                  cmos_clock_read:	
  7346 000021E7 50                      		push	ax
  7347 000021E8 51                      		push	cx
  7348 000021E9 52                      		push	dx
  7349 000021EA 55                      		push	bp
  7350 000021EB 31ED                    		xor	bp, bp
  7351                                  loop_clock:
  7352 000021ED 31C9                    		xor	cx, cx
  7353 000021EF 31D2                    		xor	dx, dx
  7354 000021F1 B402                    		mov	ah, 2
  7355 000021F3 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  7356                                  					; Return: CH = hours in	BCD
  7357                                  					; CL = minutes in BCD
  7358                                  					; DH = seconds in BCD
  7359 000021F5 83F900                  		cmp	cx, 0
  7360 000021F8 7512                    		jnz	short clock_present
  7361 000021FA 83FA00                  		cmp	dx, 0
  7362 000021FD 750D                    		jnz	short clock_present
  7363 000021FF 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  7364 00002202 741B                    		jz	short no_readdate ; was	at zero	setting.
  7365 00002204 45                      		inc	bp		; only perform delay once.
  7366 00002205 B90040                  		mov	cx, 4000h	; 16384
  7367                                  delay:
  7368 00002208 E2FE                    		loop	delay
  7369 0000220A EBE1                    		jmp	short loop_clock
  7370                                  ; ---------------------------------------------------------------------------
  7371                                  
  7372                                  clock_present:
  7373                                  		;mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  7374                                  		; 19/12/2023
  7375                                  		; ds = cs
  7376 0000220C C606[EC04]01            		mov	byte [havecmosclock], 1 ; set the flag for cmos clock
  7377                                  		
  7378 00002211 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  7379                                  					; possibly destroyed by	cp dos and
  7380                                  					; post routine did not restore that.
  7381 00002214 56                      		push	si
  7382 00002215 E807F3                  		call	read_real_date	; read real-time clock for date
  7383 00002218 FA                      		cli
  7384                                  		;mov	ds:daycnt, si	; set system date
  7385 00002219 8936[E904]              		mov	[daycnt], si
  7386 0000221D FB                      		sti
  7387 0000221E 5E                      		pop	si
  7388                                  no_readdate:
  7389 0000221F 5D                      		pop	bp
  7390 00002220 5A                      		pop	dx
  7391 00002221 59                      		pop	cx
  7392 00002222 58                      		pop	ax
  7393                                  cmosck9:	; 19/12/2023
  7394 00002223 C3                      		retn
  7395                                  
  7396                                  ; ---------------------------------------------------------------------------
  7397                                  
  7398                                  ; the following code is written by jack gulley in engineering group.
  7399                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  7400                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  7401                                  ; the cmos clock rate are still slow which slow down disk operations
  7402                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  7403                                  ; to fix this problem at the request of cp dos.
  7404                                  ;
  7405                                  ; the program is modified to be run on msinit. equates are defined
  7406                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  7407                                  ;
  7408                                  ;  the following code cmosck is used to insure that the cmos has not
  7409                                  ;	had its rate controls left in an invalid state on older at's.
  7410                                  ;
  7411                                  ;	it checks for an at model byte "fc" with a submodel type of
  7412                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  7413                                  ;	bits in case post has not done it. this initialization routine
  7414                                  ;	is only needed once when dos loads. it should be run as soon
  7415                                  ;	as possible to prevent slow diskette access.
  7416                                  ;
  7417                                  ;	this code exposes one to dos clearing cmos setup done by a
  7418                                  ;	resident program that hides and re-boots the system.
  7419                                  
  7420                                  cmosck:					; check and reset rtc rate bits
  7421                                  
  7422                                  ;model byte and submodel byte were already determined in msinit.
  7423                                  
  7424                                  	; 16/06/2018 - Retro DOS v3.0
  7425                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  7426                                  
  7427                                  		; 19/12/2023
  7428                                  		; ds = cs
  7429                                  		;push	ax ; not necessary ; 19/12/2023
  7430                                  		;
  7431 00002224 803E[3506]FC            		cmp	byte [model_byte], 0FCh
  7432                                  		;cmp	byte [cs:model_byte], 0FCh
  7433 00002229 75F8                    		jnz	short cmosck9	; Exit if not an AT model
  7434 0000222B 803E[3606]06            		cmp	byte [secondary_model_byte], 6 ; 21/04/2024
  7435                                  		;cmp	byte [cs:secondary_model_byte], 6
  7436                                  					; Is it 06 for the industral AT ?
  7437 00002230 7407                    		jz	short cmosck4	; Go reset CMOS periodic rate if 06
  7438 00002232 803E[3606]04            		cmp	byte [secondary_model_byte], 4
  7439                                  		;cmp	byte [cs:secondary_model_byte], 4
  7440                                  					; Is it 00, 01, 02, or 03 ?
  7441 00002237 73EA                    		jnb	short cmosck9	; EXIT if problem fixed by POST
  7442                                  					; Also,Secondary_model_byte = 0
  7443                                  					;   when AH=0C0h, int 15h failed.
  7444                                  					;	RESET THE CMOS PERIODIC RATE
  7445                                  					;  Model=FC submodel=00,01,02,03 or 06
  7446                                  cmosck4:
  7447 00002239 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  7448                                  					; NMI disabled on return
  7449 0000223B B426                    		mov	ah, 26h		; 00100110b
  7450                                  					; Set divider & rate selection
  7451 0000223D E80B00                  		call	cmos_write
  7452 00002240 B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7453                                  					; NMI disabled on return
  7454 00002242 E82000                  		call	cmos_read
  7455 00002245 2407                    		and	al, 7		; 00000111b
  7456                                  					; clear SET,PIE,AIE,UIE,SQWE
  7457 00002247 88C4                    		mov	ah, al
  7458 00002249 B00B                    		mov	al, 0Bh		; cmos_reg_b
  7459                                  					; NMI enabled on return
  7460                                  		; 19/12/2023
  7461                                  		;call	cmos_write
  7462                                  ;cmosck9:
  7463                                  		;pop	ax ; 19/12/2023
  7464                                  		;retn
  7465                                  
  7466                                  		; 19/12/2023
  7467                                  		;jmp	short cmos_write
  7468                                  
  7469                                  ; =============== S U B	R O U T	I N E =======================================
  7470                                  
  7471                                  ;--- cmos_write ----------------------------------------------------------------
  7472                                  ;		write byte to cmos system clock configuration table	       :
  7473                                  ;									       :
  7474                                  ; input: (al)=	cmos table address to be written to			       :
  7475                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7476                                  ;		bits 6-0 = address of table location to write		       :
  7477                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7478                                  ;									       :
  7479                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7480                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7481                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7482                                  ;		the cmos address register is pointed to a default value and    :
  7483                                  ;		the interrupt flag restored to the entry state on return.      :
  7484                                  ;		only the cmos location and the nmi state is changed.	       :
  7485                                  ;-------------------------------------------------------------------------------
  7486                                  
  7487                                  cmos_write:				; write (ah) to location (al)
  7488 0000224B 9C                      		pushf			;
  7489 0000224C 50                      		push	ax		; save work register values
  7490 0000224D FA                      		cli
  7491 0000224E 50                      		push	ax		; save user nmi	state
  7492 0000224F 0C80                    		or	al, 80h		; disable nmi for us
  7493 00002251 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7494                                  					; RTC Seconds
  7495 00002253 90                      		nop
  7496 00002254 88E0                    		mov	al, ah
  7497 00002256 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7498 00002258 58                      		pop	ax		; get user nmi
  7499 00002259 2480                    		and	al, 80h
  7500 0000225B 0C0F                    		or	al, 0Fh
  7501 0000225D E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7502                                  					; RTC Seconds
  7503 0000225F 90                      		nop
  7504 00002260 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7505 00002262 58                      		pop	ax		; restore work registers
  7506                                  
  7507                                  		; 19/12/2023
  7508                                  		;push	cs		; *place code segment in stack and
  7509                                  		;call	cmos_popf	; *handle popf for b- level 80286
  7510                                  		;retn
  7511 00002263 EB18                    		jmp	short cmos_rw_popf
  7512                                  
  7513                                  ; =============== S U B	R O U T	I N E =======================================
  7514                                  
  7515                                  ;--- CMOS_READ -----------------------------------------------------------------
  7516                                  ;		read byte from cmos system clock configuration table	       :
  7517                                  ;									       :
  7518                                  ; input: (al)=	cmos table address to be read				       :
  7519                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7520                                  ;		bits 6-0 = address of table location to read		       :
  7521                                  ;									       :
  7522                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7523                                  ;		on then nmi left disabled. during the cmos read both nmi and  :
  7524                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7525                                  ;		the cmos address register is pointed to a default value and    :
  7526                                  ;		the interrupt flag restored to the entry state on return.      :
  7527                                  ;		only the (al) register and the nmi state is changed.	       :
  7528                                  ;-------------------------------------------------------------------------------
  7529                                  
  7530                                  cmos_read:				; read location (al) into (al)
  7531 00002265 9C                      		pushf
  7532 00002266 FA                      		cli
  7533 00002267 53                      		push	bx
  7534                                  		;push	ax ; *		; AL = cmos table address to be read
  7535                                  		; 19/12/2023
  7536 00002268 89C3                    		mov	bx, ax ; * ; input
  7537 0000226A 0C80                    		or	al, 80h
  7538 0000226C E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7539                                  					; RTC Seconds
  7540 0000226E 90                      		nop			; (undocumented delay needed)
  7541 0000226F E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7542                                  		
  7543                                  		;mov	bx, ax ; output
  7544                                  		;pop	ax ; * ; input
  7545                                  
  7546                                  		; 19/12/2023
  7547                                  		; al = output, bl = input
  7548 00002271 93                      		xchg	ax, bx ; *
  7549                                  		; bl = output, al = input
  7550                                  	
  7551 00002272 2480                    		and	al, 80h
  7552 00002274 0C0F                    		or	al, 0Fh
  7553 00002276 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7554                                  					; RTC Seconds
  7555 00002278 90                      		nop
  7556 00002279 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7557                                  		;mov	ax, bx ; * ; output
  7558                                  		; 19/12/2023
  7559 0000227B 93                      		xchg	ax, bx
  7560 0000227C 5B                      		pop	bx
  7561                                  
  7562                                  		; 19/12/2023
  7563                                  cmos_rw_popf:
  7564 0000227D 0E                      		push	cs		; *place code segment in stack and
  7565 0000227E E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7566 00002281 C3                      		retn			; return with flags restored
  7567                                  
  7568                                  ; ---------------------------------------------------------------------------
  7569                                  
  7570                                  cmos_popf:				
  7571 00002282 CF                      		iret			; popf for level b- parts
  7572                                  					; return far and restore flags
  7573                                  
  7574                                  ; 21/12/2022
  7575                                  ; ---------------------------------------------------------------------------
  7576                                  ; ---------------------------------------------------------------------------
  7577                                  %if 0
  7578                                  
  7579                                  ; ---------------------------------------------------------------------------
  7580                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7581                                  ; ---------------------------------------------------------------------------
  7582                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7583                                  ; ---------------------------------------------------------------------------
  7584                                  
  7585                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7586                                  ;
  7587                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7588                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7589                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7590                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7591                                  
  7592                                  ; =============== S U B	R O U T	I N E =======================================
  7593                                  
  7594                                  ; GetClus, read in a cluster at a specified address
  7595                                  ;
  7596                                  ;  bx = cluster to read
  7597                                  ;  cx = sectors per cluster
  7598                                  ;  es:di = load location
  7599                                  
  7600                                  ; 17/10/2022
  7601                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7602                                  ; 09/12/2022
  7603                                  DISKRD equ diskrd
  7604                                  
  7605                                  		; 17/10/2022
  7606                                  getclus:
  7607                                  		; 14/12/2023
  7608                                  		; 13/12/2023 - Retro DOS v4.1 (Modified MSDOS 5.0 IO.SYS)
  7609                                  		; ds = cs
  7610                                  
  7611                                  		push	cx
  7612                                  		push	di
  7613                                  		;mov	[cs:doscnt], cx
  7614                                  		mov	[doscnt], cx ; 13/12/2023
  7615                                  		mov	ax, bx
  7616                                  		dec	ax
  7617                                  		dec	ax
  7618                                  		mul	cx		; convert to logical sector
  7619                                  					; dx:ax	= matching logical sector number
  7620                                  					;	  starting from the data sector
  7621                                  		;add	ax, [cs:bios_l]
  7622                                  		;adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7623                                  		; 13/12/2023
  7624                                  		add	ax, [bios_l]
  7625                                  		adc	dx, [bios_h]	; dx:ax	= first	logical	sector to read
  7626                                  unpack:
  7627                                  		push	ds ; ds = cs ; 13/12/2023
  7628                                  		push	dx ; * ; 13/12/2023
  7629                                  		push	ax
  7630                                  		push	bx
  7631                                  		;mov	si, [cs:fatloc]
  7632                                  		mov	si, [fatloc] ; 13/12/2023
  7633                                  		mov	ds, si
  7634                                  		mov	si, bx		; next cluster
  7635                                  		test	byte [cs:fbigfat], 40h	; fbig
  7636                                  					; 16 bit fat?
  7637                                  		jnz	short unpack16	; yes
  7638                                  		shr	si, 1		; 12 bit fat. si=si/2
  7639                                  					; si = clus + clus/2
  7640                                  		add	si, bx		;
  7641                                  					; (si =	byte offset of the cluster in the FAT)
  7642                                  		;push	dx ; 13/12/2023
  7643                                  		xor	dx, dx
  7644                                  		; 12/12/2023
  7645                                  		; ds = FAT buffer segment
  7646                                  		call	get_fat_sector
  7647                                  		;pop	dx ; 12/12/2023
  7648                                  
  7649                                  		mov	ax, [bx]	; save it into ax
  7650                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7651                                  		; 25/06/2023
  7652                                  		;mov	al, [bx]	; splitted fat
  7653                                  
  7654                                  		; 13/12/2023
  7655                                  		;mov	[cs:temp_cluster], al
  7656                                  		push	ax ; **	; al = low 8 bits of 12 bits cluster number
  7657                                  
  7658                                  		inc	si		; (next	byte)
  7659                                  
  7660                                  		;push	dx ; 13/12/2023
  7661                                  		xor	dx, dx
  7662                                  		call	get_fat_sector
  7663                                  		;pop	dx ; 13/12/2023
  7664                                  
  7665                                  		;mov	al, ds:0
  7666                                  		; 13/12/2023
  7667                                  		; ds = FAT buffer segment
  7668                                  		;mov	al, [0] ; 19/10/2022
  7669                                  		;mov	[cs:temp_cluster+1], al
  7670                                  		;mov	ax, [cs:temp_cluster]
  7671                                  		; 13/12/2023
  7672                                  		;mov	al, [cs:temp_cluster]
  7673                                  		pop	ax  ; ** ; al = low 8 bits of 12 bits cluster number
  7674                                  		mov	ah, [0] ; high 4 bits (bits 7 to 11) of 12 bits cluster num
  7675                                  even_odd:
  7676                                  		pop	bx		; restore old fat entry	value
  7677                                  		push	bx		; save it right	away.
  7678                                  		shr	bx, 1		; was it even or odd?
  7679                                  		jnb	short havclus	; it was even.
  7680                                  		shr	ax, 1		; odd. massage fat value and keep
  7681                                  					; the highest 12 bits.
  7682                                  		shr	ax, 1
  7683                                  		shr	ax, 1
  7684                                  		shr	ax, 1
  7685                                  havclus:
  7686                                  		mov	bx, ax		; now bx = new fat entry.
  7687                                  		and	bx, 0FFFh	; keep low 12 bits.
  7688                                  		jmp	short unpackx
  7689                                  ; ---------------------------------------------------------------------------
  7690                                  
  7691                                  unpack16:
  7692                                  		;push	dx	; 13/12/2023
  7693                                  		xor	dx, dx ; 0
  7694                                  		shl	si, 1		; extend to 32 bit offset
  7695                                  		;adc	dx, 0
  7696                                  		; 13/12/2023
  7697                                  		rcl	dx, 1
  7698                                  
  7699                                  		; 13/12/2023
  7700                                  		; ds = FAT buffer segment
  7701                                  		call	get_fat_sector
  7702                                  		;pop	dx	; 13/12/2023
  7703                                  		mov	bx, [bx]	;
  7704                                  					; bx = new fat entry.
  7705                                  unpackx:
  7706                                  		pop	si		; restore old bx value into si
  7707                                  		pop	ax		; restore logical sector (low)
  7708                                  		pop	dx ; * ; 13/12/2023
  7709                                  		pop	ds
  7710                                  		; 13/12/2023
  7711                                  		; (this is a fast kernel loading method by the MSDOS programmer)
  7712                                  		; ((consequtive clusters --> consequtive sectors))
  7713                                  		; ds = cs
  7714                                  		sub	si, bx
  7715                                  		cmp	si, -1		; one apart? (consequtive?)
  7716                                  					; (current = previous+1)
  7717                                  		jnz	short getcl2	; no, read [doscnt] sectors 
  7718                                  		;add	[cs:doscnt], cx
  7719                                  		add	[doscnt], cx ; 13/12/2023 ; add to read count
  7720                                  		jmp	short unpack
  7721                                  ; ---------------------------------------------------------------------------
  7722                                  
  7723                                  getcl2:
  7724                                  		push	bx
  7725                                  		push	dx		; sector to read (high)
  7726                                  		push	ax		; sector to read (low)
  7727                                  
  7728                                  		; 13/12/2023
  7729                                  		; ds = cs
  7730                                  		;mov	ax, [cs:drvfat]	; get drive and	fat spec
  7731                                  		;mov	cx, [cs:doscnt]
  7732                                  		mov	ax, [drvfat]	; get drive and	fat spec
  7733                                  		mov	cx, [doscnt]
  7734                                  
  7735                                  		pop	dx		; sector to read for diskrd (low)
  7736                                  		;pop	word [cs:start_sec_h]
  7737                                  		; 13/12/2023
  7738                                  		pop	word [start_sec_h]
  7739                                  					; sector to read for diskrd (high)
  7740                                  		; 13/12/2023
  7741                                  		; ds = cs
  7742                                  		;push	ds
  7743                                  		;push	cs
  7744                                  		;pop	ds
  7745                                  
  7746                                  		push	cs		; simulate far call
  7747                                  		; 17/10/2022
  7748                                  		mov	bp, DISKRD	; 8E5h
  7749                                  		;mov	bp, 8E5h	; offset diskrd
  7750                                  					; 2C7h:8E5h = 70h:2E55h
  7751                                  		call	call_bios_code	; read the clusters
  7752                                  		
  7753                                  		;pop	ds
  7754                                  		; 13/12/2023
  7755                                  		; ds = cs
  7756                                  		pop	bx
  7757                                  		pop	di
  7758                                  
  7759                                  		;mov	ax, [cs:doscnt]	; get number of	sectors	read
  7760                                  		; 13/12/2023
  7761                                  		mov	ax, [doscnt]
  7762                                  		xchg	ah, al		; multiply by 256
  7763                                  		shl	ax, 1		; times	2 equal	512
  7764                                  		add	di, ax		; update load location
  7765                                  		pop	cx		; restore sectors/cluster
  7766                                  		retn
  7767                                  
  7768                                  ; =============== S U B	R O U T	I N E =======================================
  7769                                  
  7770                                  
  7771                                  ;function: find and read the corresponding fat sector into ds:0
  7772                                  ;
  7773                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7774                                  ;     ds - fatloc segment
  7775                                  ;     cs:drvfat - logical drive number, fat id
  7776                                  ;     cs:md_sectorsize
  7777                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7778                                  ;
  7779                                  ;out). corresponding fat sector read in.
  7780                                  ;      bx = offset value from fatlog segment.
  7781                                  ;      other registera saved.
  7782                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7783                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7784                                  ;      should save this byte, and read the next fat sector to get the rest
  7785                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7786                                  
  7787                                  		; 17/10/2022
  7788                                  get_fat_sector:
  7789                                  		; 14/12/2023
  7790                                  		; 13/12/2023
  7791                                  		; ds = fat buffer segment
  7792                                  
  7793                                  		; 13/12/2023
  7794                                  		;push	ax ; (not necessary)
  7795                                  		push	cx ; read count (sectors per cluster)
  7796                                  		push	di ; IBMDOS.COM/MSDOS.SYS load offset
  7797                                  		push	si ; FAT offset value (from fat entry 0)
  7798                                  		push	es ; IBMDOS.COM/MSDOS.SYS load segment
  7799                                  		push	ds ; FAT buffer segment
  7800                                  
  7801                                  		; 13/12/2023
  7802                                  		push	cs
  7803                                  		pop	ds
  7804                                  
  7805                                  		mov	ax, si
  7806                                  		;;mov	cx, [cs:md_sectorsize] ; 512
  7807                                  		; 13/12/2023
  7808                                  		;mov	cx, [md_sectorsize] ; 512
  7809                                  		;div	cx		; ax = sector number, dx = offset
  7810                                  		; 13/12/2023
  7811                                  		;nop
  7812                                  
  7813                                  		; 13/12/2023
  7814                                  		div	word [md_sectorsize] ; 512
  7815                                  
  7816                                  		; ax = FAT sector (sequence/index) number
  7817                                  		; dx = cluster number offset
  7818                                  
  7819                                  		; Get rid of the assumption that
  7820                                  		; there	is only	one reserved sector
  7821                                  
  7822                                  		; 13/12/2023 ; *
  7823                                  		;push	es ; *
  7824                                  		;push	ds ; *
  7825                                  		;push	di ; *
  7826                                  		push	ax
  7827                                  		;push	cs ; *
  7828                                  		;pop	ds ; *
  7829                                  
  7830                                  		;mov	ax, [cs:drvfat]	; get drive # and FAT id
  7831                                  		; 13/12/2023
  7832                                  		mov	ax, [drvfat]	; get drive # and FAT id 
  7833                                  		mov	bp, SETDRIVE
  7834                                  		;;mov	bp, 4D7h	; setdrive
  7835                                  					; at 2C7h:4D7h = 70h:2A47h
  7836                                  		push	cs		; simulate far call
  7837                                  		call	call_bios_code	; get bds for drive
  7838                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7839                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7840                                  					; add #reserved_sectors
  7841                                  		; 13/12/2023
  7842                                  		;pop	di ; *
  7843                                  		;pop	ds ; *
  7844                                  		;pop	es ; *
  7845                                  
  7846                                  		; 13/12/2023
  7847                                  		; ds = cs
  7848                                  		cmp	ax, [last_fat_sec_num]
  7849                                  		;cmp	ax, [cs:last_fat_sec_num]
  7850                                  		jz	short gfs_split_chk ; don't need to read it again.
  7851                                  		mov	[last_fat_sec_num], ax
  7852                                  		;mov	[cs:last_fat_sec_num], ax
  7853                                  					; sector number
  7854                                  					; (in the partition, without hidden sectors)
  7855                                  		; 13/12/2023
  7856                                  		pop	es ; FAT buffer segment (DS on top of the stack)
  7857                                  		push	es ; (put it on top of the stack again)
  7858                                  
  7859                                  		push	dx ; cluster number offset
  7860                                  
  7861                                  		; 13/12/2023
  7862                                  		xor	cx, cx
  7863                                  		mov	[start_sec_h], cx ;0 
  7864                                  		;mov	word [cs:start_sec_h], 0 
  7865                                  					; prepare to read the fat sector
  7866                                  					; start_sec_h is always	0 for fat sector.
  7867                                  		mov	dx, ax
  7868                                  		; 13/12/2023
  7869                                  		inc	cx ; cx = 1
  7870                                  		;mov	cx, 1		; 1 sector read
  7871                                  		;mov	ax, [cs:drvfat]
  7872                                  		mov	ax, [drvfat]
  7873                                  		;push	ds
  7874                                  		;pop	es
  7875                                  
  7876                                  		xor	di, di	; 0	; es:di	-> fatloc segment:0
  7877                                  		
  7878                                  		; 13/12/2023
  7879                                  		;push	ds
  7880                                  		;push	cs
  7881                                  		;pop	ds
  7882                                  		
  7883                                  		push	cs		; simulate far call
  7884                                  		mov	bp, DISKRD	; 8E5h
  7885                                  		;mov	bp, 8E5h	; offset diskrd
  7886                                  					; 2C7h:8E5h = 70h:2E55h
  7887                                  		call	call_bios_code
  7888                                  
  7889                                  		; 13/12/2023
  7890                                  		;pop	ds
  7891                                  		; ds = cs = biosdata segment
  7892                                  
  7893                                  		pop	dx ; cluster number offset 
  7894                                  
  7895                                  gfs_split_chk:
  7896                                  		; 13/12/2023
  7897                                  		;mov	cx, [cs:md_sectorsize] ; 512
  7898                                  		mov	cx, [md_sectorsize]
  7899                                  ;gfs_split_chk:
  7900                                  		dec	cx		; 511
  7901                                  		cmp	dx, cx		; if offset points to the
  7902                                  					; last byte of this sector,
  7903                                  					; then splitted	entry.
  7904                                  		mov	bx, dx		; set bx to dx
  7905                                  		
  7906                                  		; 13/12/2023
  7907                                  		; bx = dx = cluster number offset in the FAT buffer
  7908                                  		pop	ds ; FAT buffer segment
  7909                                  		pop	es ; IBMDOS.COM/MSDOS.SYS load segment
  7910                                  		pop	si ; FAT offset value (from fat entry 0)
  7911                                  		pop	di ; IBMDOS.COM/MSDOS.SYS load offset
  7912                                  		pop	cx ; read count (sectors per cluster)
  7913                                  		;pop	ax
  7914                                  
  7915                                  		retn
  7916                                  ; 15/10/2022
  7917                                  ;Bios_Data_Init	ends
  7918                                  
  7919                                  %endif
  7920                                  ; ---------------------------------------------------------------------------
  7921                                  ; ---------------------------------------------------------------------------
  7922                                  
  7923                                  		; 09/12/2022
  7924                                  		;db 0
  7925                                  
  7926                                  numbertodiv	equ ($-BData_start)
  7927                                  numbertomod	equ (numbertodiv % 16)
  7928                                  
  7929                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
  7930 00002283 00<rep Dh>              		times (16-numbertomod) db 0
  7931                                  %endif
  7932                                  
  7933                                  ;align 16
  7934                                  
  7935                                  ; 09/12/2022
  7936                                  IOSYSCODESEGOFF equ $ - BData_start
  7937                                  ; 29/09/2023
  7938                                  ;IOSYSCODESEGOFF equ $-$$
  7939                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7940                                  
  7941                                  ; 28/09/2023
  7942                                  S1SIZE equ $-$$
  7943                                  
  7944                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7945                                  ; ---------------------------------------------------------------------------
  7946                                  		;db 4 dup(0)
  7947                                  ; 09/12/2022		
  7948                                  ;		times 4 db 0	; 19/10/2022
  7949                                  ; ---------------------------------------------------------------------------
  7950                                  
  7951                                  ;============================================================================
  7952                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7953                                  ;============================================================================
  7954                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7955                                  
  7956                                  section .BIOSCODE vstart=0  
  7957                                  
  7958                                  BCode_start:	 ; 09/12/2022
  7959                                   
  7960                                  ; 02/10/2022
  7961                                  
  7962                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7963                                  ;----------------------------------------------------------------------------
  7964                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7965                                  ;----------------------------------------------------------------------------
  7966                                  
  7967                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7968 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7969 00000030 7000                    BiosDataWord:	dw 70h
  7970                                  
  7971                                  ; 15/10/2022
  7972                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7973                                  ; 09/12/2022
  7974                                  BIOSDATAWORD	equ BiosDataWord
  7975                                  
  7976                                  ; ---------------------------------------------------------------------------
  7977                                  
  7978                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7979                                  
  7980                                  ;************************************************************************
  7981                                  ;*									*
  7982                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7983                                  ;*	  trashes di, cx, es						*
  7984                                  ;*									*
  7985                                  ;*	cas -- should be made disposable!				*
  7986                                  ;*									*
  7987                                  ;************************************************************************
  7988                                  
  7989                                  _seg_reinit:
  7990 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7991                                  					; at 2C7h:30h or 70h:25A0h
  7992                                  		;mov	di, (offset cdev+2)
  7993 00000037 BF[D706]                		mov	di, cdev+2	; 19/10/2022
  7994 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7995                                  
  7996                                  _seg_reinit_1:				
  7997 0000003D AB                      		stosw			; modify Bios_Code entry points
  7998 0000003E 47                      		inc	di
  7999 0000003F 47                      		inc	di
  8000 00000040 E2FB                    		loop	_seg_reinit_1
  8001 00000042 CB                      		retf
  8002                                  
  8003                                  ; ---------------------------------------------------------------------------
  8004                                  
  8005                                  ; 15/10/2022
  8006                                  
  8007                                  ;************************************************************************
  8008                                  ;*									*
  8009                                  ;*	chardev_entry - main device driver dispatch routine		*
  8010                                  ;*	   called with a dummy parameter block on the stack		*
  8011                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  8012                                  ;*									*
  8013                                  ;*	will eventually take care of doing the transitions in		*
  8014                                  ;*	   out of Bios_Code						*
  8015                                  ;*									*
  8016                                  ;************************************************************************
  8017                                  
  8018                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  8019 00000043 56                      		push	si
  8020 00000044 50                      		push	ax
  8021 00000045 51                      		push	cx
  8022 00000046 52                      		push	dx
  8023 00000047 57                      		push	di
  8024 00000048 55                      		push	bp
  8025 00000049 1E                      		push	ds
  8026 0000004A 06                      		push	es
  8027 0000004B 53                      		push	bx
  8028 0000004C 89E5                    		mov	bp, sp
  8029 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  8030                                  		;;mov	ds, word [cs:0030h]
  8031                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  8032 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  8033 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  8034 00000059 A2[2100]                		mov	[auxnum], al
  8035 0000005C 8826[E004]              		mov	[printdev], ah
  8036 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  8037 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  8038 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  8039 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  8040 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  8041 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  8042                                  		; 17/10/2022
  8043 00000076 81FE[9104]              		cmp	si, DSKTBL
  8044                                  		;cmp	si, 4A2h	; dsktbl
  8045                                  					; at 2C7h:4A2h = 70h:2A12h
  8046 0000007A 7517                    		jnz	short no_sector32_mapping
  8047                                  
  8048                                  ; Special case for 32-bit start sector number:
  8049                                  ;   if (si==dsktbl) /* if this is a disk device call */
  8050                                  ;      set high 16 bits of secnum to 0
  8051                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  8052                                  ;
  8053                                  ; pass high word of sector number in start_sec_h, low word in dx
  8054                                  ;
  8055                                  ; note: start_l and start_h are the offsets within the io_request packet
  8056                                  ;	  which contain the low and hi words of the 32 bit start sector if
  8057                                  ;	  it has been used.
  8058                                  ;
  8059                                  ; note: remember not to destroy the registers which have been set up before
  8060                                  
  8061                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  8062 0000007C C706[2405]0000          		mov	word [start_sec_h], 0
  8063 00000082 83FAFF                  		cmp	dx, 0FFFFh
  8064 00000085 750C                    		jnz	short no_sector32_mapping
  8065 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  8066                                  					; 32 bits dsk req
  8067                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  8068 0000008B 8916[2405]              		mov	[start_sec_h], dx
  8069 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  8070                                  					; dx = packet.start_l
  8071                                  no_sector32_mapping:			
  8072 00000093 97                      		xchg	ax, di
  8073 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  8074 00000098 2E3A04                  		cmp	al, cs:[si]
  8075 0000009B 732C                    		jnb	short command_error
  8076 0000009D 98                      		cbw			; note that al <= 15 means ok
  8077 0000009E D1E0                    		shl	ax, 1
  8078 000000A0 01C6                    		add	si, ax
  8079 000000A2 97                      		xchg	ax, di
  8080 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  8081 000000A7 FC                      		cld
  8082                                  		; 17/10/2022
  8083 000000A8 2EFF5401                		call	near [cs:si+1]
  8084                                  		;call	word ptr cs:si+1
  8085 000000AC 7202                    		jb	short already_got_ah_status
  8086 000000AE B401                    		mov	ah, 1
  8087                                  already_got_ah_status:
  8088                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  8089                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  8090                                  					; cas note: shouldn't be needed!
  8091 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  8092                                  		;lds	bx, ds:ptrsav
  8093 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  8094 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  8095                                  					; mark operation complete
  8096 000000BC 5B                      		pop	bx
  8097 000000BD 07                      		pop	es
  8098 000000BE 1F                      		pop	ds
  8099 000000BF 5D                      		pop	bp
  8100 000000C0 5F                      		pop	di
  8101 000000C1 5A                      		pop	dx
  8102 000000C2 59                      		pop	cx
  8103 000000C3 58                      		pop	ax
  8104 000000C4 5E                      		pop	si
  8105 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  8106                                  	
  8107                                  		; fall through into bc_retf
  8108                                  ; ---------------------------------------------------------------------------	
  8109                                  bc_retf:
  8110 000000C8 CB                      		retf
  8111                                  ; ---------------------------------------------------------------------------
  8112                                  
  8113                                  command_error:				
  8114 000000C9 E80900                  		call	bc_cmderr
  8115 000000CC EBE2                    		jmp	short already_got_ah_status
  8116                                  ; 15/10/2022
  8117                                  ; 01/05/2019
  8118                                  
  8119                                  ;----------------------------------------------------------------------------
  8120                                  ; The following piece of hack is for supporting CP/M compatibility
  8121                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  8122                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  8123                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  8124                                  ; high.
  8125                                  ;----------------------------------------------------------------------------
  8126                                  
  8127                                  		;db 7 dup(0)
  8128                                  
  8129                                  		; 15/10/2022
  8130                                  
  8131 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  8132                                  
  8133 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  8134                                  				;  which is the CP/M call 5 entry point
  8135                                  		
  8136                                  
  8137                                  ; ---------------------------------------------------------------------------
  8138                                  
  8139                                  ;	exit - all routines return through this path
  8140                                  
  8141                                  bc_cmderr:				
  8142 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  8143                                  					; unknown command error
  8144                                  
  8145                                  ; =============== S U B	R O U T	I N E =======================================
  8146                                  
  8147                                  ;	now zero the count field by subtracting its current value,
  8148                                  ;	  which is still in cx, from itself.
  8149                                  
  8150                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  8151                                  ;	  in order to return the number actually complete
  8152                                  
  8153                                  bc_err_cnt:	
  8154                                  		;les	bx, ds:ptrsav
  8155                                  		; 19/10/2022
  8156 000000D7 C41E[1200]              		les	bx, [ptrsav]
  8157 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  8158                                  					; # of successful i/o's
  8159 000000DF B481                    		mov	ah, 81h		; mark error return
  8160 000000E1 F9                      		stc			; indicate abnormal end
  8161 000000E2 C3                      		retn
  8162                                  
  8163                                  ; 15/10/2022
  8164                                  
  8165                                  ;Bios_Code ends
  8166                                  
  8167                                  ;----------------------------------------------------------------------------
  8168                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  8169                                  ;----------------------------------------------------------------------------
  8170                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8171                                  ; 10/01/2019 - Retro DOS v4.0
  8172                                  
  8173                                  ; 30/04/2019
  8174                                  
  8175                                  ;title	mschar - character and clock devices
  8176                                  
  8177                                  ;MODE_CTRLBRK	equ	0FFh
  8178                                  
  8179                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  8180                                  
  8181                                  ;************************************************************************
  8182                                  ;*									*
  8183                                  ;*	device driver dispatch tables					*
  8184                                  ;*									*
  8185                                  ;*	each table starts with a byte which lists the number of		*
  8186                                  ;*	legal functions, followed by that number of words. Each		*
  8187                                  ;*	word represents an offset of a routine in Bios_Code which	*
  8188                                  ;*	handles the function. The functions are terminated with		*
  8189                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  8190                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  8191                                  ;*	returned as abnormal completion status. Notice that ds		*
  8192                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  8193                                  ;*									*
  8194                                  ;************************************************************************
  8195                                  
  8196                                  		; 13/12/2022
  8197                                  		;db 0
  8198                                  
  8199                                  		; 13/12/202
  8200 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  8201                                  					; 2C7h:0E4h = 70h:2654h
  8202 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8203                                  					; 00 init
  8204 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  8205 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  8206 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  8207                                  					; 03
  8208 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  8209                                  					; 04
  8210 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  8211                                  					; 05
  8212 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  8213 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  8214                                  					; 07
  8215 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  8216                                  					; 08
  8217 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  8218 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  8219                                  con_table_end:
  8220 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  8221                                  					; 2C7h:0FBh = 70h:266Bh
  8222 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  8223 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8224 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8225 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  8226 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  8227                                  					; 04 indicate zero chars read
  8228 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  8229                                  					; 05 read non-destructive
  8230 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8231 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  8232 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  8233 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  8234 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  8235 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  8236 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  8237 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  8238 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  8239 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  8240 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  8241 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  8242 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  8243 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  8244 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  8245 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  8246 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  8247 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  8248 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  8249 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  8250                                  prn_table_end:
  8251 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  8252                                  					; 2C7h:130h = 70h:26A0h
  8253 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  8254 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8255 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8256 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  8257 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  8258 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  8259 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8260 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  8261 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  8262 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  8263 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  8264                                  aux_table_end:
  8265 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  8266                                  					; 2C7h:147h = 70h:26B7h
  8267 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  8268 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  8269 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  8270 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  8271 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  8272 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  8273 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  8274 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  8275 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  8276 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  8277                                  tim_table_end:
  8278                                  
  8279                                  ; ---------------------------------------------------------------------------
  8280                                  
  8281                                  ;************************************************************************
  8282                                  ;*									*
  8283                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  8284                                  ;*									*
  8285                                  ;************************************************************************
  8286                                  
  8287                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  8288                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  8289 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  8290                                  con_loop:				
  8291 0000015D E80500                  		call	chrin		; get char in al
  8292 00000160 AA                      		stosb			; store	char at	es:di
  8293 00000161 E2FA                    		loop	con_loop
  8294                                  con_exit:				
  8295 00000163 F8                      		clc
  8296 00000164 C3                      		retn
  8297                                  
  8298                                  ; =============== S U B	R O U T	I N E =======================================
  8299                                  
  8300                                  ;************************************************************************
  8301                                  ;*									*
  8302                                  ;*	chrin - input single char from keyboard into al			*
  8303                                  ;*									*
  8304                                  ;*	  we are going to issue extended keyboard function, if		*
  8305                                  ;*	  supported. the returning value of the extended keystroke	*
  8306                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  8307                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  8308                                  ;*	  this creates a conflict when the user entered real		*
  8309                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  8310                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  8311                                  ;*	  in the following manner:					*
  8312                                  ;*									*
  8313                                  ;*	      ah = 16h							*
  8314                                  ;*	      int 16h							*
  8315                                  ;*	      if al == 0, then extended code (in ah)			*
  8316                                  ;*	      else if al == 0E0h, then					*
  8317                                  ;*	      if ah <> 0, then extended code (in ah)			*
  8318                                  ;*		else greek_alpha character.				*
  8319                                  ;*									*
  8320                                  ;*	also, for compatibility reason, if an extended code is		*
  8321                                  ;*	  detected, then we are going to change the value in al		*
  8322                                  ;*	  from 0E0h to 00h.						*
  8323                                  ;*									*
  8324                                  ;************************************************************************
  8325                                  
  8326                                  		; 19/10/2022
  8327                                  chrin:		
  8328 00000165 8A26[DE04]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  8329 00000169 30C0                    		xor	al, al
  8330 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  8331 0000016F 08C0                    		or	al, al
  8332 00000171 752A                    		jnz	short keyret
  8333 00000173 CD16                    		int	16h		; KEYBOARD -
  8334 00000175 09C0                    		or	ax, ax
  8335 00000177 74EC                    		jz	short chrin
  8336 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8337 0000017C 7504                    		jnz	short alt_ext_chk
  8338 0000017E B010                    		mov	al, 10h
  8339 00000180 EB1B                    		jmp	short keyret
  8340                                  ; ---------------------------------------------------------------------------
  8341                                  
  8342                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  8343                                  ;    if character read was 0E0h then
  8344                                  ;      if extended byte was zero (i.e. ah == 0) then
  8345                                  ;	 goto keyret
  8346                                  ;      else
  8347                                  ;	 set al to zero
  8348                                  ;	 goto alt_save
  8349                                  ;      endif
  8350                                  ;    endif
  8351                                  ;  endif
  8352                                  
  8353                                  alt_ext_chk:
  8354 00000182 803E[DE04]00            		cmp	byte [keyrd_func], 0
  8355 00000187 740C                    		jz	short not_ext
  8356 00000189 3CE0                    		cmp	al, 0E0h
  8357 0000018B 7508                    		jnz	short not_ext
  8358 0000018D 08E4                    		or	ah, ah
  8359 0000018F 740C                    		jz	short keyret
  8360 00000191 30C0                    		xor	al, al
  8361 00000193 EB04                    		jmp	short alt_save
  8362                                  ; ---------------------------------------------------------------------------
  8363                                  
  8364                                  not_ext:				
  8365 00000195 08C0                    		or	al, al		; special case?
  8366 00000197 7504                    		jnz	short keyret
  8367                                  alt_save:				
  8368 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  8369                                  keyret:					
  8370 0000019D C3                      		retn
  8371                                  
  8372                                  ; ---------------------------------------------------------------------------
  8373                                  
  8374                                  ;************************************************************************
  8375                                  ;*									*
  8376                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  8377                                  ;*									*
  8378                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  8379                                  ;*	in the status word of the request packet, and there is no	*
  8380                                  ;*	character in the input buffer, the driver issues a system	*
  8381                                  ;*	wait request to the rom. on return from the rom, it returns	*
  8382                                  ;*	a 'char-not-found' to the dos.					*
  8383                                  ;*									*
  8384                                  ;************************************************************************
  8385                                  
  8386                                  		; 19/10/2022
  8387                                  con_rdnd:				
  8388 0000019E A0[0C00]                		mov	al, [altah]
  8389 000001A1 08C0                    		or	al, al
  8390 000001A3 754C                    		jnz	short rdexit
  8391 000001A5 8A26[DF04]              		mov	ah, [keysts_func]
  8392 000001A9 CD16                    		int	16h		; KEYBOARD -
  8393 000001AB 751D                    		jnz	short gotchr
  8394 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  8395 000001B2 7412                    		jz	short z_bus_exit
  8396 000001B4 C41E[1200]              		les	bx, [ptrsav]
  8397                                  		; 12/12/2022
  8398 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  8399                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  8400 000001BD 7407                    		jz	short z_bus_exit
  8401 000001BF B80041                  		mov	ax, 4100h
  8402 000001C2 30DB                    		xor	bl, bl
  8403 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  8404                                  					; AL = condition type, BH = condition compare or mask value
  8405                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  8406                                  					; DX = I/O port	address	if AL bit 4 set
  8407                                  z_bus_exit:				
  8408 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  8409 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  8410 000001C9 C3                      		retn
  8411                                  ; ---------------------------------------------------------------------------
  8412                                  
  8413                                  gotchr:					
  8414 000001CA 09C0                    		or	ax, ax
  8415 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  8416 000001CE 8A26[DE04]              		mov	ah, [keyrd_func] ; issue keyboard read function
  8417 000001D2 CD16                    		int	16h		; KEYBOARD -
  8418 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  8419                                  ; ---------------------------------------------------------------------------
  8420                                  
  8421                                  notbrk:					
  8422 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  8423 000001D9 7504                    		jnz	short rd_ext_chk
  8424 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  8425 000001DD EB12                    		jmp	short rdexit
  8426                                  ; ---------------------------------------------------------------------------
  8427                                  
  8428                                  rd_ext_chk:				
  8429 000001DF 803E[DE04]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  8430 000001E4 740B                    		jz	short rdexit
  8431 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  8432 000001E8 7507                    		jnz	short rdexit
  8433 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  8434 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  8435 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  8436                                  					; change it for	compatibility
  8437                                  rdexit:					
  8438 000001F1 C41E[1200]              		les	bx, [ptrsav]
  8439 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  8440                                  					; return keyboard character here
  8441                                  bc_exvec:				
  8442 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  8443                                  					; indicate normal termination
  8444 000001FA C3                      		retn
  8445                                  ; ---------------------------------------------------------------------------
  8446                                  
  8447                                  ;************************************************************************
  8448                                  ;*									*
  8449                                  ;*	con_write - console write routine				*
  8450                                  ;*									*
  8451                                  ;*	entry:	es:di -> buffer						*
  8452                                  ;*		cx    =  count						*
  8453                                  ;*									*
  8454                                  ;************************************************************************
  8455                                  
  8456                                  con_writ:
  8457                                  		;jcxz	short bc_exvec
  8458 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  8459                                  		; 12/12/2022
  8460                                  		;jcxz	cc_ret
  8461                                  con_lp:					
  8462 000001FD 268A05                  		mov	al, [es:di]
  8463 00000200 47                      		inc	di
  8464 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  8465                                  					; AL = character to display
  8466 00000203 E2F8                    		loop	con_lp
  8467                                  cc_ret:					
  8468 00000205 F8                      		clc
  8469 00000206 C3                      		retn
  8470                                  
  8471                                  ; =============== S U B	R O U T	I N E =======================================
  8472                                  
  8473                                  ;************************************************************************
  8474                                  ;*									*
  8475                                  ;*	con_flush - flush out keyboard queue				*
  8476                                  ;*									*
  8477                                  ;************************************************************************
  8478                                  
  8479                                  con_flush:
  8480 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  8481                                  flloop:					; while	(charavail()) charread();	
  8482 0000020C B401                    		mov	ah, 1
  8483 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  8484                                  					; Return: ZF clear if character	in buffer
  8485                                  					; AH = scan code, AL = character
  8486                                  					; ZF set if no character in buffer
  8487 00000210 74F3                    		jz	short cc_ret
  8488 00000212 30E4                    		xor	ah, ah
  8489 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  8490                                  					; Return: AH = scan code, AL = character
  8491 00000216 EBF4                    		jmp	short flloop
  8492                                  
  8493                                  ; ---------------------------------------------------------------------------
  8494                                  
  8495                                  ; 15/10/2022
  8496                                  
  8497                                  ;************************************************************************
  8498                                  ;*									*
  8499                                  ;*	some equates for rom bios printer i/o				*
  8500                                  ;*									*
  8501                                  ;************************************************************************
  8502                                  
  8503                                  ; ibm rom status bits (i don't trust them, neither should you)
  8504                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  8505                                  ; whole slew of bits, only one of which is correct.
  8506                                  
  8507                                  ;notbusystatus	equ 10000000b		; not busy
  8508                                  ;nopaperstatus	equ 00100000b		; no more paper
  8509                                  ;prnselected	equ 00010000b		; printer selected
  8510                                  ;ioerrstatus	equ 00001000b		; some kinda error
  8511                                  ;timeoutstatus	equ 00000001b		; time out.
  8512                                  ;
  8513                                  ;noprinter	equ 00110000b		; no printer attached
  8514                                  
  8515                                  ; 18/03/2019 - Retro DOS v4.0
  8516                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  8517                                  
  8518                                  ; ---------------------------------------------------------------------------
  8519                                  
  8520                                  ;************************************************************************
  8521                                  ;*									*
  8522                                  ;*	prn_input - return with no error but zero chars read		*
  8523                                  ;*									*
  8524                                  ;*	enter with cx = number of characters requested			*
  8525                                  ;*									*
  8526                                  ;************************************************************************
  8527                                  
  8528                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  8529 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  8530                                  					; (sub reqpkt.count,cx)
  8531                                  		; 12/12/2022
  8532                                  prn_done:
  8533 0000021B F8                      		clc			; but return with carry	reset for no error
  8534 0000021C C3                      		retn
  8535                                  ; ---------------------------------------------------------------------------
  8536                                  
  8537                                  ;************************************************************************
  8538                                  ;*									*
  8539                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  8540                                  ;*									*
  8541                                  ;*	auxnum has printer number					*
  8542                                  ;*									*
  8543                                  ;************************************************************************
  8544                                  
  8545                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  8546                                  		;jcxz	short prn_done	; no chars to output
  8547 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  8548                                  prn_loop:				
  8549 0000021F BB0200                  		mov	bx, 2		; retry	count
  8550                                  prn_out:				
  8551 00000222 E83600                  		call	prnstat		; get status
  8552 00000225 751D                    		jnz	short TestPrnError
  8553 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  8554 0000022A 30E4                    		xor	ah, ah
  8555 0000022C E82E00                  		call	prnop		; print	to printer
  8556 0000022F 7419                    		jz	short prn_con	; no error - continue
  8557 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  8558 00000234 7509                    		jnz	short _prnwf
  8559 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  8560 00000238 C606[0C00]00            		mov	byte [altah], 0
  8561 0000023D EB08                    		jmp	short pmessg
  8562                                  ; ---------------------------------------------------------------------------
  8563                                  
  8564                                  _prnwf:					
  8565 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  8566 00000242 7406                    		jz	short prn_con
  8567                                  TestPrnError:				
  8568 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  8569 00000245 75DB                    		jnz	short prn_out
  8570                                  pmessg:					
  8571 00000247 E98DFE                  		jmp	bc_err_cnt
  8572                                  ; ---------------------------------------------------------------------------
  8573                                  
  8574                                  prn_con:				
  8575 0000024A 47                      		inc	di		; point	to next	char and continue
  8576 0000024B E2D2                    		loop	prn_loop
  8577                                  ;prn_done:				
  8578                                  		; 12/12/2022
  8579                                  prn_done2:
  8580                                  		;clc
  8581                                  		; cf=0
  8582 0000024D C3                      		retn
  8583                                  ; ---------------------------------------------------------------------------
  8584                                  
  8585                                  ;************************************************************************
  8586                                  ;*									*
  8587                                  ;*	prn_stat - device driver entry to return printer status		*
  8588                                  ;*									*
  8589                                  ;************************************************************************
  8590                                  
  8591                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8592 0000024E E80A00                  		call	prnstat		; device in dx
  8593 00000251 75F4                    		jnz	short pmessg
  8594 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8595                                  		;jnz	short prn_done
  8596                                  		; 12/12/2022
  8597 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8598 00000258 E96BFF                  		jmp	z_bus_exit
  8599                                  ; ---------------------------------------------------------------------------
  8600                                  
  8601                                  ;************************************************************************
  8602                                  ;*									*
  8603                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8604                                  ;*		 printer status. Return meaningful error code		*
  8605                                  ;*									*
  8606                                  ;************************************************************************
  8607                                  
  8608                                  prnstat:				
  8609 0000025B B402                    		mov	ah, 2		; set command for get status
  8610                                  					; PRINTER - GET	STATUS
  8611                                  					; DX = printer port (0-3)
  8612                                  					; Return: AH = status
  8613                                  
  8614                                  ; =============== S U B	R O U T	I N E =======================================
  8615                                  
  8616                                  ;************************************************************************
  8617                                  ;*									*
  8618                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8619                                  ;*		return zero true if no error				*
  8620                                  ;*		return zero false if error, al = error code		*
  8621                                  ;*									*
  8622                                  ;************************************************************************
  8623                                  
  8624                                  prnop:	
  8625 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8626 00000261 CD17                    		int	17h
  8627                                  
  8628                                  	; This check was added to see if this is a case of no
  8629                                  	; printer being installed. This tests checks to be sure
  8630                                  	; the error is noprinter (30h)
  8631                                  
  8632 00000263 50                      		push	ax
  8633 00000264 80E430                  		and	ah, 30h
  8634 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8635 0000026A 58                      		pop	ax
  8636 0000026B 7506                    		jnz	short NextTest
  8637 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8638 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8639                                  
  8640                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8641                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8642                                  ; careful about breaking basic.
  8643                                  
  8644                                  NextTest:				
  8645 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8646                                  					; i/o error?
  8647 00000276 740A                    		jz	short checknotready ; no, try not ready
  8648                                  
  8649                                  ; at this point, we know we have an error. the converse is not true
  8650                                  
  8651 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8652                                  					; first, assume	out of paper
  8653 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8654 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8655 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8656                                  ret1:					
  8657 00000281 C3                      		retn
  8658                                  ; ---------------------------------------------------------------------------
  8659                                  
  8660                                  checknotready:				
  8661 00000282 B002                    		mov	al, 2		; assume not-ready
  8662 00000284 F6C401                  		test	ah, 1
  8663 00000287 C3                      		retn
  8664                                  
  8665                                  ; ---------------------------------------------------------------------------
  8666                                  
  8667                                  ;************************************************************************
  8668                                  ;*									*
  8669                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8670                                  ;*		     this entry point should never block waiting for	*
  8671                                  ;*		     device to come ready.				*
  8672                                  ;*									*
  8673                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8674                                  ;*	outputs: set the number of bytes transferred in the		*
  8675                                  ;*		 device driver request packet				*
  8676                                  ;*									*
  8677                                  ;************************************************************************
  8678                                  
  8679                                  		; 19/10/2022
  8680                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8681 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8682                                  prn_tilbloop:				
  8683 0000028A 51                      		push	cx
  8684 0000028B 53                      		push	bx
  8685 0000028C 30FF                    		xor	bh, bh
  8686 0000028E 8A1E[E004]              		mov	bl, [printdev]
  8687 00000292 D1E3                    		shl	bx, 1
  8688                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8689 00000294 8B8F[E104]              		mov	cx, [wait_count+bx]
  8690 00000298 5B                      		pop	bx
  8691                                  prn_getstat:				
  8692 00000299 E8BFFF                  		call	prnstat		; get status
  8693 0000029C 7514                    		jnz	short prn_bperr	; error
  8694 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8695 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8696 000002A3 59                      		pop	cx		; get original count
  8697 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8698 000002A6 26                      		es
  8699 000002A7 AC                      		lodsb
  8700                                  		;lods	byte ptr es:[si] ; es
  8701                                  					; lodsb
  8702 000002A8 30E4                    		xor	ah, ah
  8703 000002AA E8B0FF                  		call	prnop
  8704 000002AD 7504                    		jnz	short prn_berr	; error
  8705 000002AF E2D9                    		loop	prn_tilbloop
  8706                                  		; 12/12/2022
  8707                                  		; cf=0 (prnop)
  8708                                  		;clc			; normal no-error return
  8709 000002B1 C3                      		retn			;   from device driver
  8710                                  
  8711                                  ; ---------------------------------------------------------------------------
  8712                                  
  8713                                  prn_bperr:				
  8714 000002B2 59                      		pop	cx		; restore transfer count from stack
  8715                                  prn_berr:				
  8716 000002B3 E921FE                  		jmp	bc_err_cnt
  8717                                  ; ---------------------------------------------------------------------------
  8718                                  
  8719                                  ; 15/10/2022
  8720                                  
  8721                                  ;************************************************************************
  8722                                  ;*									*
  8723                                  ;*	prn_genioctl - get/set printer retry count			*
  8724                                  ;*									*
  8725                                  ;************************************************************************
  8726                                  
  8727                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8728                                  ; 11/01/2019
  8729                                  
  8730                                  ;********************************;*
  8731                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8732                                  ;********************************;*
  8733                                  
  8734                                  ;;RAWIO SUB-FUNCTIONS
  8735                                  ;;get_retry_count equ 65h
  8736                                  ;;set_retry_count equ 45h
  8737                                  
  8738                                  ;;struc A_RETRYCOUNT
  8739                                  ;;.rc_count: resw 1
  8740                                  ;;endstruc
  8741                                  
  8742                                  ;ioc_pc equ 5
  8743                                  
  8744                                  ; ---------------------------------------------------------------------------
  8745                                  
  8746                                  		; 19/10/2022
  8747                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8748 000002B6 C43E[1200]              		les	di, [ptrsav]
  8749 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8750                                  					; ioc_pc
  8751 000002BF 7403                    		jz	short prnfunc_ok
  8752                                  
  8753                                  prnfuncerr:				
  8754 000002C1 E911FE                  		jmp	bc_cmderr
  8755                                  ; ---------------------------------------------------------------------------
  8756                                  
  8757                                  prnfunc_ok:				
  8758 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8759 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8760 000002CC 30FF                    		xor	bh, bh
  8761                                  		;mov	bl, ds:printdev	; get index into retry counts
  8762 000002CE 8A1E[E004]              		mov	bl, [printdev]
  8763 000002D2 D1E3                    		shl	bx, 1
  8764                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8765 000002D4 8B8F[E104]              		mov	cx, [wait_count+bx]
  8766 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8767 000002DA 7407                    		jz	short prngetcount
  8768 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8769 000002DE 75E1                    		jnz	short prnfuncerr
  8770 000002E0 268B0D                  		mov	cx, [es:di]
  8771                                  prngetcount:				
  8772                                  		;mov	ds:wait_count[bx], cx
  8773 000002E3 898F[E104]              		mov	[wait_count+bx], cx
  8774 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8775                                  					; return current retry count
  8776                                  		; 12/12/2022
  8777                                  		; cf=0
  8778                                  		;clc
  8779 000002EA C3                      		retn
  8780                                  ; ---------------------------------------------------------------------------
  8781                                  
  8782                                  ;************************************************************************
  8783                                  ;*									*
  8784                                  ;*  prn_ioctl_query							*
  8785                                  ;*									*
  8786                                  ;*  Added for 5.00							*
  8787                                  ;************************************************************************
  8788                                  
  8789                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8790 000002EB C43E[1200]              		les	di, [ptrsav]
  8791 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8792                                  					; ioc_pc
  8793 000002F4 750D                    		jnz	short prn_query_err
  8794 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8795 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8796 000002FC 7404                    		jz	short IOCtlSupported
  8797 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8798 00000300 7501                    		jnz	short prn_query_err
  8799                                  IOCtlSupported:	
  8800                                  		; 12/12/2022
  8801                                  		; cf=0		
  8802                                  		;clc
  8803 00000302 C3                      		retn
  8804                                  ; ---------------------------------------------------------------------------
  8805                                  
  8806                                  prn_query_err:
  8807                                  		; 12/12/2022				
  8808                                  		;stc
  8809 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8810                                  ; ---------------------------------------------------------------------------
  8811                                  
  8812                                  ;************************************************************************
  8813                                  ;*									*
  8814                                  ;*	aux port driver code -- "aux" == "com1"				*
  8815                                  ;*									*
  8816                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8817                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8818                                  ;*									*
  8819                                  ;************************************************************************
  8820                                  
  8821                                  ;	values in ah, requesting function of int 14h in rom bios
  8822                                  
  8823                                  ;auxfunc_send	 equ	1	;transmit
  8824                                  ;auxfunc_receive equ	2	;read
  8825                                  ;auxfunc_status	 equ	3	;request status
  8826                                  
  8827                                  ;	error flags, reported by int 14h, reported in ah:
  8828                                  
  8829                                  ;flag_data_ready equ	01h	;data ready
  8830                                  ;flag_overrun	 equ	02h	;overrun error
  8831                                  ;flag_parity	 equ	04h	;parity error
  8832                                  ;flag_frame	 equ	08h	;framing error
  8833                                  ;flag_break	 equ	10h	;break detect
  8834                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8835                                  ;flag_timeout	 equ	80h	;timeout
  8836                                  
  8837                                  ;	these flags reported in al:
  8838                                  
  8839                                  ;flag_cts	 equ	10h	;clear to send
  8840                                  ;flag_dsr	 equ	20h	;data set ready
  8841                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8842                                  
  8843                                  ; ---------------------------------------------------------------------------
  8844                                  
  8845                                  ;************************************************************************
  8846                                  ;*									*
  8847                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8848                                  ;*		   at es:di						*
  8849                                  ;*									*
  8850                                  ;************************************************************************
  8851                                  
  8852                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8853                                  		;jcxz	short exvec2
  8854 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8855 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8856 0000030B 30C0                    		xor	al, al
  8857 0000030D 8607                    		xchg	al, [bx]
  8858 0000030F 08C0                    		or	al, al
  8859 00000311 7503                    		jnz	short aux2
  8860                                  aux1:					
  8861 00000313 E80500                  		call	auxin		; get character	from port
  8862                                  					; won't return if error
  8863                                  aux2:					
  8864 00000316 AA                      		stosb
  8865 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8866                                  exvec2:					
  8867 00000319 F8                      		clc			; all done, successful exit
  8868                                  auxin_retn:	; 18/12/2022
  8869 0000031A C3                      		retn
  8870                                  ; ---------------------------------------------------------------------------
  8871                                  
  8872                                  ;************************************************************************
  8873                                  ;*									*
  8874                                  ;*	auxin - call rom bios to read character from aux port		*
  8875                                  ;*		if error occurs, map the error and return one		*
  8876                                  ;*		level up to device driver exit code, setting		*
  8877                                  ;*		the number of bytes transferred appropriately		*
  8878                                  ;*									*
  8879                                  ;************************************************************************
  8880                                  
  8881                                  auxin:					
  8882 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8883 0000031D E83C00                  		call	auxop
  8884 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8885                                  		;jnz	short arbad	; skip if any error bits set
  8886                                  		;retn
  8887                                  		; 25/06/2023 (BugFix)
  8888 00000323 74F5                    		jz	short auxin_retn
  8889                                  ; ---------------------------------------------------------------------------
  8890                                  
  8891                                  arbad:					
  8892 00000325 58                      		pop	ax		; remove return	address	(near call)
  8893 00000326 30C0                    		xor	al, al
  8894 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8895 0000032A E9AAFD                  		jmp	bc_err_cnt
  8896                                  
  8897                                  ; ---------------------------------------------------------------------------
  8898                                  
  8899                                  ;************************************************************************
  8900                                  ;*									*
  8901                                  ;*	aux_rdnd - non-destructive aux port read			*
  8902                                  ;*									*
  8903                                  ;************************************************************************
  8904                                  
  8905                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8906 0000032D E85200                  		call	getbx
  8907 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8908 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8909 00000334 7511                    		jnz	short auxdrx	; then return character
  8910 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8911 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8912 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8913 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8914 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8915 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8916 00000345 8807                    		mov	[bx], al
  8917                                  auxdrx:					
  8918 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8919                                  ; ---------------------------------------------------------------------------
  8920                                  
  8921                                  auxbus:					
  8922 0000034A E979FE                  		jmp	z_bus_exit
  8923                                  ; ---------------------------------------------------------------------------
  8924                                  
  8925                                  ;************************************************************************
  8926                                  ;*									*
  8927                                  ;*	aux_wrst - return aux port write status				*
  8928                                  ;*									*
  8929                                  ;************************************************************************
  8930                                  
  8931                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8932 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8933 00000350 A820                    		test	al, 20h		; test data set	ready
  8934 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8935 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8936 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8937                                  		; 12/12/2022
  8938                                  		; cf=0	; (test instruction resets cf)
  8939                                  		;clc
  8940 00000359 C3                      		retn
  8941                                  ; ---------------------------------------------------------------------------
  8942                                  
  8943                                  ;************************************************************************
  8944                                  ;*									*
  8945                                  ;*	auxstat - call rom bios to determine aux port status		*
  8946                                  ;*									*
  8947                                  ;*	exit:	ax = status						*
  8948                                  ;*		dx = [auxnum]						*
  8949                                  ;*									*
  8950                                  ;************************************************************************
  8951                                  
  8952                                  auxstat:				
  8953 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8954                                  
  8955                                  		; fall into auxop
  8956                                  
  8957                                  ; =============== S U B	R O U T	I N E =======================================
  8958                                  
  8959                                  ;************************************************************************
  8960                                  ;*									*
  8961                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8962                                  ;*									*
  8963                                  ;*	entry:	ah = int 14h function number				*
  8964                                  ;*	exit:	ax = results						*
  8965                                  ;*		dx = [auxnum]						*
  8966                                  ;*									*
  8967                                  ;************************************************************************
  8968                                  
  8969                                  auxop:		; proc near		
  8970 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8971                                  					; 0=init, 1=send, 2=receive, 3=status
  8972                                  					; get port number
  8973 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8974                                  					; DX = port number (0-3)
  8975                                  					; Return: AX = port status code
  8976 00000362 C3                      		retn
  8977                                  
  8978                                  ; ---------------------------------------------------------------------------
  8979                                  
  8980                                  ;************************************************************************
  8981                                  ;*									*
  8982                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8983                                  ;*		   auxbuf [auxnum] to zero				*
  8984                                  ;*									*
  8985                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8986                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8987                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8988                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8989                                  ;*									*
  8990                                  ;************************************************************************
  8991                                  
  8992                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8993 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8994 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8995                                  					; zero out buffer
  8996                                  		;clc			; all done, successful return
  8997                                  		; 12/12/2022
  8998                                  		; cf=0 ('add' instruction in 'getbx')
  8999 00000369 C3                      		retn
  9000                                  ; ---------------------------------------------------------------------------
  9001                                  
  9002                                  ;************************************************************************
  9003                                  ;*									*
  9004                                  ;*	aux_writ - write to aux device					*
  9005                                  ;*									*
  9006                                  ;************************************************************************
  9007                                  
  9008                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  9009                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  9010 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  9011                                  aux_loop:				
  9012 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  9013                                  					; move di pointer to next character
  9014 0000036F 47                      		inc	di
  9015 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  9016 00000372 E8E7FF                  		call	auxop		; send character over aux port
  9017 00000375 F6C480                  		test	ah, 80h		; check	for error
  9018 00000378 7405                    		jz	short awok	; then no error
  9019 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  9020 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  9021                                  ; ---------------------------------------------------------------------------
  9022                                  
  9023                                  awok:					
  9024 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  9025                                  					; still	more character to print
  9026                                  		;clc			; all done, successful return
  9027                                  		; 12/12/2022
  9028                                  		; cf=0 (test instruction above)	
  9029 00000381 C3                      		retn
  9030                                  
  9031                                  ; =============== S U B	R O U T	I N E =======================================
  9032                                  
  9033                                  ;************************************************************************
  9034                                  ;*									*
  9035                                  ;*	getbx - return bx -> single byte input buffer for		*
  9036                                  ;*		selected aux port ([auxnum])				*
  9037                                  ;*									*
  9038                                  ;************************************************************************
  9039                                  
  9040                                  getbx:	
  9041 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  9042                                  					; for selected aux port	([auxnum])
  9043                                  		;add	bx, offset auxbuf
  9044 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  9045                                  		; 12/12/2022
  9046                                  		; cf=0 (if [uaxnum] is valid number) 
  9047 0000038A C3                      		retn
  9048                                  
  9049                                  ; ---------------------------------------------------------------------------
  9050                                  
  9051                                  ; 15/10/2022
  9052                                  
  9053                                  ;----------------------------------------------------------------
  9054                                  ;								:
  9055                                  ;		    clock device driver 			:
  9056                                  ;								:
  9057                                  ;								:
  9058                                  ;   this file contains the clock device driver. 		:
  9059                                  ;								:
  9060                                  ;   the routines in this files are:				:
  9061                                  ;								:
  9062                                  ;	routine 		function			:
  9063                                  ;	------- 		--------			:
  9064                                  ;	tim_writ		set the current time		:
  9065                                  ;	tim_read		read the current time		:
  9066                                  ;	time_to_ticks		convert time to corresponding	:
  9067                                  ;				  number of clock ticks 	:
  9068                                  ;								:
  9069                                  ; the clock ticks at the rate of:				:
  9070                                  ;								:
  9071                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  9072                                  ; see each routine for information on the use.			:
  9073                                  ;								:
  9074                                  ;----------------------------------------------------------------
  9075                                  
  9076                                  ; convert time to ticks
  9077                                  ; input : time in cx and dx
  9078                                  ; ticks returned in cx:dx
  9079                                  
  9080                                  ;19/07/2019
  9081                                  ;09/03/2019
  9082                                  
  9083                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  9084                                  
  9085                                  ; first convert from hour,min,sec,hund. to
  9086                                  ; total number of 100th of seconds
  9087                                  
  9088 0000038B B03C                    		mov	al, 60
  9089 0000038D F6E5                    		mul	ch		; hours	to minutes
  9090 0000038F B500                    		mov	ch, 0
  9091 00000391 01C8                    		add	ax, cx		; total	minutes
  9092 00000393 B97017                  		mov	cx, 6000	; 60*100
  9093 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  9094 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  9095 0000039A 89C1                    		mov	cx, ax
  9096 0000039C B064                    		mov	al, 100
  9097 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  9098 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  9099 000003A2 83D200                  		adc	dx, 0		; ripple carry
  9100 000003A5 B700                    		mov	bh, 0
  9101 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  9102 000003A9 83D200                  		adc	dx, 0
  9103                                  
  9104                                  	; dx:cx is time in 1/100 sec
  9105                                  
  9106 000003AC 92                      		xchg	ax, dx
  9107 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  9108 000003AE BB0BE9                  		mov	bx, 59659
  9109 000003B1 F7E3                    		mul	bx		; multiply low half
  9110 000003B3 87D1                    		xchg	dx, cx
  9111 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  9112 000003B6 F7E3                    		mul	bx		; multiply high	half
  9113 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  9114 000003BA 83D200                  		adc	dx, 0
  9115 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  9116 000003BE BB0500                  		mov	bx, 5
  9117 000003C1 F6F3                    		div	bl		; divide high half by 5
  9118 000003C3 88C1                    		mov	cl, al
  9119 000003C5 B500                    		mov	ch, 0
  9120 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  9121 000003C9 98                      		cbw
  9122 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  9123 000003CB F7F3                    		div	bx		; divide low half by 5
  9124 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  9125 000003CF CB                      		retf			; far return
  9126                                  
  9127                                  ; ---------------------------------------------------------------------------
  9128                                  
  9129                                  ; 17/10/2022
  9130                                  ; 15/10/2022
  9131                                  
  9132                                  ;--------------------------------------------------------------------
  9133                                  ;
  9134                                  ; tim_writ sets the current time
  9135                                  ;
  9136                                  ; on entry es:[di] has the current time:
  9137                                  ;
  9138                                  ;	number of days since 1-1-80	(word)
  9139                                  ;	minutes (0-59)			(byte)
  9140                                  ;	hours (0-23)			(byte)
  9141                                  ;	hundredths of seconds (0-99)	(byte)
  9142                                  ;	seconds (0-59)			(byte)
  9143                                  ;
  9144                                  ; each number has been checked for the correct range.
  9145                                  ;
  9146                                  ;	NOTE: Any changes in this routine probably require corresponding
  9147                                  ;	changes in the version that is built with the power manager driver.
  9148                                  ;	See ptime.asm.
  9149                                  ;
  9150                                  ;--------------------------------------------------------------------
  9151                                  
  9152                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  9153 000003D0 268B05                  		mov	ax, [es:di]
  9154 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  9155                                  					; end to avoid tick windows.
  9156 000003D4 803E[EC04]00            		cmp	byte [havecmosclock], 0
  9157                                  		;cmp	ds:havecmosclock, 0
  9158 000003D9 7426                    		jz	short no_cmos_1
  9159 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  9160                                  					; get binary hours
  9161                                  					; convert to bcd
  9162 000003DF FF1E[FB04]              		call	far [bintobcd]
  9163                                  		;call	ds:bintobcd	; call far [bintobcd]
  9164 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  9165 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  9166 000003E9 FF1E[FB04]              		call	far [bintobcd]
  9167                                  		;call	ds:bintobcd	; convert to bcd
  9168 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  9169 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  9170 000003F3 FF1E[FB04]              		call	far [bintobcd]
  9171                                  		;call	ds:bintobcd
  9172 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  9173 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  9174 000003FB FA                      		cli
  9175 000003FC B403                    		mov	ah, 3
  9176 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  9177                                  					; CH = hours in	BCD, CL	= minutes in BCD
  9178                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  9179                                  					; Return: CMOS clock set
  9180 00000400 FB                      		sti
  9181                                  no_cmos_1:				
  9182 00000401 268B4D02                		mov	cx, [es:di+2]
  9183 00000405 268B5504                		mov	dx, [es:di+4]
  9184                                  		; 17/10/2022
  9185 00000409 FF1E[D906]              		call	far [ttticks]
  9186                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  9187                                  					; convert time to ticks
  9188                                  					; cx:dx	now has	time in	ticks
  9189 0000040D FA                      		cli			; turn off timer
  9190 0000040E B401                    		mov	ah, 1
  9191 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  9192                                  					; CX:DX	= clock	count
  9193                                  					; Return: time of day set
  9194                                  		;pop	ds:daycnt
  9195 00000412 8F06[E904]              		pop	word [daycnt]
  9196 00000416 FB                      		sti
  9197                                  		;cmp	ds:havecmosclock, 0
  9198 00000417 803E[EC04]00            		cmp	byte [havecmosclock], 0
  9199 0000041C 740A                    		jz	short no_cmos_2
  9200 0000041E FF1E[FF04]              		call	far [daycnttoday]
  9201                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  9202                                  					; convert to bcd format
  9203 00000422 FA                      		cli
  9204 00000423 B405                    		mov	ah, 5
  9205 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  9206                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  9207                                  					; CH = century (19h or 20h)
  9208                                  					; Return: CMOS clock set
  9209 00000427 FB                      		sti
  9210                                  no_cmos_2:
  9211                                  		; 12/12/2022
  9212                                  		; cf=0				
  9213                                  		;clc
  9214 00000428 C3                      		retn
  9215                                  
  9216                                  ; ---------------------------------------------------------------------------
  9217                                  
  9218                                  ; 15/10/2022
  9219                                  
  9220                                  ;----------------------------------------------------------------------------
  9221                                  ; gettime reads date and time
  9222                                  ; and returns the following information:
  9223                                  ;
  9224                                  ;	es:[di]  =count of days since 1-1-80
  9225                                  ;	es:[di+2]=hours
  9226                                  ;	es:[di+3]=minutes
  9227                                  ;	es:[di+4]=seconds
  9228                                  ;	es:[di+5]=hundredths of seconds
  9229                                  ;
  9230                                  ;	NOTE: Any changes in this routine probably require corresponding
  9231                                  ;	changes in the version that is built with the power manager driver.
  9232                                  ;	See ptime.asm.
  9233                                  ;----------------------------------------------------------------------------
  9234                                  
  9235                                  		; 08/08/2023 - Retro DOS v4.2 IO.SYS (optimization)
  9236                                  		; 20/12/2023 - Retro DOS v5.0 (& Retro DOS v4.1 optimization)
  9237                                  		; (PCDOS 7.1 IBMBIO.COM - BIOSCODE:04EFh)
  9238                                  
  9239                                  tim_read:				; 2C7h:435h = 70h:29A5h
  9240 00000429 E84A00                  		call	GetTickCnt
  9241 0000042C 8B36[E904]              		mov	si, [daycnt]
  9242                                  
  9243                                  ; we now need to convert the time in tick to the time in 100th of
  9244                                  ; seconds. the relation between tick and seconds is:
  9245                                  ;
  9246                                  ;		 65,536 seconds
  9247                                  ;	       ----------------
  9248                                  ;		1,193,180 tick
  9249                                  ;
  9250                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  9251                                  ;
  9252                                  ;	ticks from clock  * 65,536 * 100
  9253                                  ;      --------------------------------- = time in 100th of seconds
  9254                                  ;		1,193,180
  9255                                  ;
  9256                                  ; fortunately this formula simplifies to:
  9257                                  ;
  9258                                  ;	ticks from clock * 5 * 65,536
  9259                                  ;      --------------------------------- = time in 100th of seconds
  9260                                  ;		59,659
  9261                                  ;
  9262                                  ; the calculation is done by first multipling tick by 5. next we divide by
  9263                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  9264                                  ; my 16 bits to the left.
  9265                                  ;
  9266                                  ; start with ticks in cx:dx
  9267                                  ; multiply by 5
  9268                                  
  9269 00000430 89C8                    		mov	ax, cx
  9270 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  9271                                  					; multiply by 5
  9272 00000434 D1E2                    		shl	dx, 1
  9273 00000436 D1D1                    		rcl	cx, 1		; times	2
  9274 00000438 D1E2                    		shl	dx, 1
  9275 0000043A D1D1                    		rcl	cx, 1		; times	4
  9276 0000043C 01DA                    		add	dx, bx
  9277 0000043E 11C8                    		adc	ax, cx		; times	5
  9278 00000440 92                      		xchg	ax, dx
  9279                                  
  9280                                  ; now have ticks * 5 in	dx:ax
  9281                                  ; we now need to multiply by 65536 and divide by 59659 d.
  9282                                  
  9283 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  9284 00000444 F7F1                    		div	cx		; dx now has remainder
  9285                                  					; ax has high word of final quotient
  9286                                  		;mov	bx, ax		; put high word	in safe	place
  9287                                  		; 20/12/2023
  9288 00000446 93                      		xchg	ax, bx
  9289 00000447 31C0                    		xor	ax, ax		; this is the multiply by 65536
  9290 00000449 F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  9291                                  
  9292                                  ; rounding based on the	remainder may be added here
  9293                                  ; the result in	bx:ax is time in 1/100 second.
  9294                                  
  9295 0000044B 89DA                    		mov	dx, bx		
  9296 0000044D B9C800                  		mov	cx, 200		; extract 1/100's
  9297                                  
  9298                                  ; division by 200 is necessary to ensure no overflow--max result
  9299                                  ; is number of seconds in a day/2 = 43200.
  9300                                  
  9301 00000450 F7F1                    		div	cx
  9302 00000452 80FA64                  		cmp	dl, 100		; remainder over 100?
  9303 00000455 7203                    		jb	short noadj
  9304 00000457 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  9305                                  noadj:					
  9306 0000045A F5                      		cmc			; if we	subtracted 100,	carry is now set
  9307 0000045B 88D3                    		mov	bl, dl		; save 1/100's
  9308                                  
  9309                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  9310                                  ; by two, shifting a one in if the remainder had exceeded 100.
  9311                                  
  9312 0000045D D1D0                    		rcl	ax, 1		
  9313 0000045F B200                    		mov	dl, 0
  9314 00000461 D1D2                    		rcl	dx, 1
  9315                                  		;mov	cx, 60		; divide out seconds
  9316                                  		; 20/12/2023
  9317 00000463 B13C                    		mov	cl, 60
  9318 00000465 F7F1                    		div	cx
  9319 00000467 88D7                    		mov	bh, dl		; save the seconds
  9320 00000469 F6F1                    		div	cl		; break	into hours and minutes
  9321 0000046B 86C4                    		xchg	al, ah
  9322                                  
  9323                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  9324                                  
  9325                                  		; 20/12/2023
  9326                                  		;push	ax
  9327                                  		;mov	ax, si		; daycnt
  9328 0000046D 96                      		xchg	ax, si
  9329 0000046E AB                      		stosw
  9330                                  		;pop	ax
  9331 0000046F 96                      		xchg	ax, si		; al = hours, ah = minutes
  9332 00000470 AB                      		stosw
  9333 00000471 89D8                    		mov	ax, bx
  9334 00000473 AB                      		stosw
  9335 00000474 F8                      		clc
  9336 00000475 C3                      		retn
  9337                                  
  9338                                  ; =============== S U B	R O U T	I N E =======================================
  9339                                  
  9340                                  ; 15/10/2022
  9341                                  
  9342                                  ;----------------------------------------------------------------------------
  9343                                  ;
  9344                                  ; procedure : GetTickCnt
  9345                                  ;
  9346                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  9347                                  ;		of rollover [except when power management driver is in use]. 
  9348                                  ;		Uses the following logic for updating Daycnt
  9349                                  ;
  9350                                  ;		if ( rollover ) {
  9351                                  ;			if ( t_switch )
  9352                                  ;				daycnt++ ;
  9353                                  ;			else
  9354                                  ;				daycnt += rollover ;
  9355                                  ;		}
  9356                                  ;
  9357                                  ; USES : AX
  9358                                  ;
  9359                                  ; RETURNS : CX:DX - tick count
  9360                                  ; MODIFIES : daycnt
  9361                                  ;
  9362                                  ;----------------------------------------------------------------------------
  9363                                  
  9364                                  		; 17/10/2022
  9365                                  GetTickCnt:	
  9366 00000476 30E4                    		xor	ah, ah
  9367 00000478 CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  9368                                  					; Return: CX:DX	= clock	count
  9369                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  9370                                  					; midnight
  9371                                  					; Otherwise, AL	> 0
  9372                                  		; 20/12/2023
  9373 0000047A 30E4                    		xor	ah, ah
  9374 0000047C 3826[EB04]              		cmp	byte [t_switch], ah ; 0
  9375                                  		;cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  9376 00000480 7505                    		jnz	short inc_case	; old method assumes that Int 1Ah returns rollover flag
  9377                                  		;xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  9378                                  					; and not flag
  9379 00000482 0106[E904]              		add	[daycnt], ax
  9380 00000486 C3                      		retn
  9381                                  ; ---------------------------------------------------------------------------
  9382                                  
  9383                                  inc_case:				
  9384 00000487 08C0                    		or	al, al
  9385 00000489 7404                    		jz	short no_rollover
  9386 0000048B FF06[E904]              		inc	word [daycnt]
  9387                                  no_rollover:				
  9388 0000048F C3                      		retn
  9389                                  
  9390                                  ;----------------------------------------------------------------------------
  9391                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  9392                                  ;----------------------------------------------------------------------------
  9393                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9394                                  ; 09/03/2019 - Retro DOS v4.0
  9395                                  
  9396                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  9397                                  ; 26/05/2018 - Retro DOS v3.0
  9398                                  ; 23/03/2018 - Retro DOS v2.0
  9399                                  
  9400                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  9401                                  
  9402                                  ;struc BPB_TYPE
  9403                                  ;.SECSIZE:	resw 1
  9404                                  ;.SECALL:	resb 1
  9405                                  ;.RESNUM:	resw 1
  9406                                  ;.FATNUM:	resb 1
  9407                                  ;.DIRNUM:	resw 1
  9408                                  ;.SECNUM:	resw 1
  9409                                  ;.FATID:	resb 1
  9410                                  ;.FATSIZE:	resw 1
  9411                                  ;.SLIM:		resw 1
  9412                                  ;.HLIM:		resw 1
  9413                                  ;.HIDDEN:	resw 1
  9414                                  ;.size:
  9415                                  ;endstruc
  9416                                  
  9417                                  ;-----------------------------------------------------------------
  9418                                  ;	disk interface routines
  9419                                  ;-----------------------------------------------------------------
  9420                                  
  9421                                  ; device attribute bits:
  9422                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  9423                                  
  9424                                  ;MAXERR		equ	5
  9425                                  ;MAX_HD_FMT_ERR	equ	2
  9426                                  
  9427                                  ;LSTDRV	equ 504h
  9428                                  
  9429                                  ; some floppies do not have changeline. as a result, media-check would
  9430                                  ; normally return i-don't-know, the dos would continually reread the fat and
  9431                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  9432                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  9433                                  ; the time of the last successful disk operation and compare it with the current
  9434                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  9435                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  9436                                  ; since we cannot trust the timer to be always available, we record the number 
  9437                                  ; of media checks that have occurred when no apparent time has elapsed. while
  9438                                  ; this number is < a given threshold, we say no change. when it exceeds that
  9439                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  9440                                  ; the time of last successful access, if we see that time has passed too,
  9441                                  ; we reset the counter.
  9442                                  
  9443                                  accessmax	equ	5
  9444                                  
  9445                                  ; due to various bogosities, we need to continually adjust what the head
  9446                                  ; settle time is.  the following algorithm is used:
  9447                                  ;
  9448                                  ;   get the current head settle value.
  9449                                  ;   if it is 0, then
  9450                                  ;	set slow = 15
  9451                                  ;   else
  9452                                  ;	set slow = value
  9453                                  ;   ...
  9454                                  ;*********************************************
  9455                                  ;************ old algorithm ******************
  9456                                  ;*   if we are seeking and writing then
  9457                                  ;*	 use slow
  9458                                  ;*   else
  9459                                  ;*	 use fast
  9460                                  ;*********************************************
  9461                                  ;*********** ibm's requested logic ***********
  9462                                  ;   if we are seeking and writing and not on an at then
  9463                                  ;	use slow
  9464                                  ;   else
  9465                                  ;	use fast
  9466                                  ;   ...
  9467                                  ;   restore current head settle value
  9468                                  ;
  9469                                  ;
  9470                                  ;---------------------------------------
  9471                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  9472                                  					; it on after handling config.sys file as a
  9473                                  					; default value, if multrk_flag = multrk_off1.
  9474                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  9475                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  9476                                  
  9477                                  ; close data segment, open Bios_Code segment
  9478                                  
  9479                                  ; 15/10/2022
  9480                                  
  9481                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  9482                                  
  9483                                  ;-----------------------------------------------------------------
  9484                                  ;	command jump table
  9485                                  ;-----------------------------------------------------------------
  9486                                  
  9487 00000490 00                      		db 0
  9488                                  
  9489                                  ; 11/12/2022
  9490                                  %if 0
  9491                                  
  9492                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  9493                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  9494                                  		dw 1742h		; dsk_init
  9495                                  		dw 4EBh			; media_chk
  9496                                  		dw 592h			; get_bpb
  9497                                  		dw 0D5h			; bc_cmderr
  9498                                  		dw 857h			; dsk_read
  9499                                  		dw 83Dh			; x_bus_exit
  9500                                  		dw 558h			; ret_carry_clear
  9501                                  		dw 558h			; ret_carry_clear
  9502                                  		dw 849h			; dsk_writ
  9503                                  		dw 841h			; dsk_writv
  9504                                  		dw 558h			; ret_carry_clear
  9505                                  		dw 558h			; ret_carry_clear
  9506                                  		dw 0D5h			; bc_cmderr
  9507                                  		dw 80Ah			; dsk_open
  9508                                  		dw 81Ah			; dsk_close
  9509                                  		dw 831h			; dsk_rem
  9510                                  		dw 558h			; ret_carry_clear
  9511                                  		dw 558h			; ret_carry_clear
  9512                                  		dw 558h			; ret_carry_clear
  9513                                  		dw 0C6Bh		; do_generic_ioctl
  9514                                  		dw 558h			; ret_carry_clear
  9515                                  		dw 558h			; ret_carry_clear
  9516                                  		dw 558h			; ret_carry_clear
  9517                                  		dw 1124h		; ioctl_getown
  9518                                  		dw 1142h		; ioctl_setown
  9519                                  		dw 129Ah		; ioctl_support_query
  9520                                  
  9521                                  ;dtbl_siz equ $-dsktbl
  9522                                  
  9523                                  %endif
  9524                                  		; 11/12/2022
  9525 00000491 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  9526 00000492 [9716]                  		dw dsk_init
  9527 00000494 [DA04]                  		dw media_chk
  9528 00000496 [8005]                  		dw get_bpb
  9529 00000498 [D500]                  		dw bc_cmderr
  9530 0000049A [2708]                  		dw dsk_read
  9531 0000049C [0D08]                  		dw x_bus_exit
  9532 0000049E [4605]                  		dw ret_carry_clear
  9533 000004A0 [4605]                  		dw ret_carry_clear
  9534 000004A2 [1908]                  		dw dsk_writ
  9535 000004A4 [1108]                  		dw dsk_writv
  9536 000004A6 [4605]                  		dw ret_carry_clear
  9537 000004A8 [4605]                  		dw ret_carry_clear
  9538 000004AA [D500]                  		dw bc_cmderr
  9539 000004AC [DD07]                  		dw dsk_open
  9540 000004AE [EC07]                  		dw dsk_close
  9541 000004B0 [0208]                  		dw dsk_rem
  9542 000004B2 [4605]                  		dw ret_carry_clear
  9543 000004B4 [4605]                  		dw ret_carry_clear
  9544 000004B6 [4605]                  		dw ret_carry_clear
  9545 000004B8 [280C]                  		dw do_generic_ioctl
  9546 000004BA [4605]                  		dw ret_carry_clear
  9547 000004BC [4605]                  		dw ret_carry_clear
  9548 000004BE [4605]                  		dw ret_carry_clear
  9549 000004C0 [BA10]                  		dw ioctl_getown
  9550 000004C2 [D710]                  		dw ioctl_setown
  9551 000004C4 [1812]                  		dw ioctl_support_query
  9552                                  
  9553                                  dtbl_siz equ $-dsktbl
  9554                                  
  9555                                  ; =============== S U B	R O U T	I N E =======================================
  9556                                  
  9557                                  ; ---------------------------------------------------------------------------
  9558                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  9559                                  ; the one that belongs to the drive specified. carry is set if none exists
  9560                                  ; for the drive. Pointer is returned in es:[di]
  9561                                  ;
  9562                                  ;  AL contains the logical drive number.
  9563                                  ; ---------------------------------------------------------------------------
  9564                                  
  9565                                  SetDrive:	
  9566                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  9567 000004C6 C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  9568                                  X_Scan_Loop:				
  9569 000004CA 26384505                		cmp	[es:di+5], al	
  9570 000004CE 7409                    		jz	short X_SetDrv
  9571 000004D0 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  9572 000004D3 83FFFF                  		cmp	di, 0FFFFh
  9573 000004D6 75F2                    		jnz	short X_Scan_Loop
  9574 000004D8 F9                      		stc
  9575                                  X_SetDrv:				
  9576 000004D9 C3                      		retn
  9577                                  
  9578                                  ; ---------------------------------------------------------------------------
  9579                                  
  9580                                  ; 15/10/2022
  9581                                  
  9582                                  ; ---------------------------------------------------------------------
  9583                                  ; if id is f9, have a 96tpi disk else
  9584                                  ; if bit 2 is 0 then media is not removable and could not have changed
  9585                                  ;  otherwise if within 2 secs of last disk operation media could not
  9586                                  ;    have changed, otherwise dont know if media has changed
  9587                                  ; ---------------------------------------------------------------------
  9588                                  
  9589                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  9590 000004DA E8E9FF                  		call	SetDrive
  9591 000004DD BE0100                  		mov	si, 1
  9592 000004E0 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  9593                                  					; fchanged_by_format
  9594 000004E5 7416                    		jz	short WeAreNotFakingIt
  9595                                  		; 12/12/2022
  9596 000004E7 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9597                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9598                                  					; ~fchanged_by_format ;	reset flag
  9599 000004EC C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9600                                  					; Ensure that we ask the rom if media has changed
  9601 000004F1 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9602                                  					; fnon_removable
  9603 000004F6 740C                    		jz	short wehaveafloppy
  9604 000004F8 BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9605 000004FB EB2C                    		jmp	short Media_Done ; Media_Done
  9606                                  ; ---------------------------------------------------------------------------
  9607                                  
  9608                                  WeAreNotFakingIt:
  9609                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9610 000004FD 26F6452301              		test	byte [es:di+23h], 1
  9611 00000502 7525                    		jnz	short Media_Done
  9612                                  wehaveafloppy:				
  9613 00000504 31F6                    		xor	si, si		; Presume "I don't know"
  9614                                  
  9615                                  		; If we have a floppy with changeline support, we ask the ROM
  9616                                  		; to determine if media has changed. We do not perform the
  9617                                  		; 2 second check for these drives.
  9618                                  
  9619 00000506 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9620 0000050B 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9621 0000050D E85212                  		call	mediacheck	;  Call	into removable routine
  9622 00000510 7236                    		jb	short err_exitj
  9623 00000512 E8A213                  		call	haschange
  9624 00000515 7512                    		jnz	short Media_Done
  9625                                  mChk_NoChangeLine:
  9626                                  		; If we come here, we have a floppy with no changeline support
  9627                                  			
  9628 00000517 BE0100                  		mov	si, 1		; Presume no change
  9629 0000051A A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9630 0000051D 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9631                                  					; Is drive of last access the same?
  9632 00000521 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9633 00000523 E82800                  		call	Check_Time_Of_Access
  9634 00000526 EB01                    		jmp	short Media_Done
  9635                                  ; ---------------------------------------------------------------------------
  9636                                  
  9637                                  Media_Unk:				
  9638 00000528 4E                      		dec	si		; ; Return "I don't know"
  9639                                  
  9640                                  		; SI now contains the correct value for media change.
  9641                                  		; Clean up the left overs
  9642                                  Media_Done:	
  9643                                  		; 19/10/2022			
  9644 00000529 06                      		push	es
  9645 0000052A C41E[1200]              		les	bx, [ptrsav]
  9646 0000052E 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9647 00000532 07                      		pop	es
  9648 00000533 09F6                    		or	si, si
  9649 00000535 790F                    		jns	short ret_carry_clear ;	volidok
  9650 00000537 803E[7700]00            		cmp	byte [fhave96], 0
  9651 0000053C 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9652 0000053E E80813                  		call	media_set_vid
  9653                                  mChk1_NoChangeLine:			
  9654 00000541 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9655                                  					; Make sure we ask rom for media check
  9656                                  ret_carry_clear:			
  9657 00000546 F8                      		clc			; volidok
  9658 00000547 C3                      		retn
  9659                                  ; ---------------------------------------------------------------------------
  9660                                  
  9661                                  err_exitj:				
  9662 00000548 E86806                  		call	maperror	; guaranteed to	set carry
  9663                                  ret81:					
  9664 0000054B B481                    		mov	ah, 81h		; return error status
  9665 0000054D C3                      		retn			; return with carry set
  9666                                  
  9667                                  ; =============== S U B	R O U T	I N E =======================================
  9668                                  
  9669                                  ; ---------------------------------------------------------------------------
  9670                                  ; perform a check on the time passed since the last access for this physical
  9671                                  ; drive.
  9672                                  ; we are accessing the same drive. if the time of last successful access was
  9673                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9674                                  ; returns in si:
  9675                                  ;	0 - if time of last access was >= 2 seconds
  9676                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9677                                  ; registers affected ax,cx,dx, flags.
  9678                                  ;
  9679                                  ;	assume es:di -> bds, ds->Bios_Data
  9680                                  ; ---------------------------------------------------------------------------
  9681                                  
  9682                                  		; 19/10/2022
  9683                                  Check_Time_Of_Access:
  9684 0000054E BE0100                  		mov	si, 1		; presume no change.
  9685 00000551 E822FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9686 00000554 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9687                                  					; get stored time
  9688 00000558 29C2                    		sub	dx, ax
  9689 0000055A 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9690 0000055E 19C1                    		sbb	cx, ax
  9691 00000560 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9692 00000562 09D2                    		or	dx, dx		; time must pass
  9693 00000564 7511                    		jnz	short timepassed ; yes, examine max value
  9694 00000566 FE06[1D01]              		inc	byte [accesscount]
  9695 0000056A 803E[1D01]05            		cmp	byte [accesscount], 5 
  9696                                  					; if count is less than threshold, ok
  9697 0000056F 720C                    		jb	short timecheck_ret
  9698 00000571 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9699 00000575 EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9700                                  ; ---------------------------------------------------------------------------
  9701                                  
  9702                                  timepassed:				
  9703 00000577 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9704                                  					; min elapsed time? (2 seconds)
  9705 0000057A 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9706                                  
  9707                                  		; everything indicates that we do not know what has happened.
  9708                                  timecheck_unk:				
  9709 0000057C 4E                      		dec	si		; presume i don't know
  9710                                  timecheck_ret:				
  9711 0000057D C3                      		retn
  9712                                  
  9713                                  ; ---------------------------------------------------------------------------
  9714                                  ; 15/10/2022
  9715                                  Err_Exitj2:
  9716 0000057E EBC8                    		jmp	short err_exitj
  9717                                  
  9718                                  ; ---------------------------------------------------------------------------
  9719                                  
  9720                                  ; 15/10/2022
  9721                                  
  9722                                  ; ==========================================================================
  9723                                  ; Build a valid bpb for the disk in the drive.
  9724                                  ; ==========================================================================
  9725                                  
  9726                                  		; 19/10/2022
  9727                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9728 00000580 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9729 00000583 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9730 00000586 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9731                                  					; fnon_removable
  9732 0000058B 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9733                                  
  9734                                  		; let's set the default value for volid,vol_serial,
  9735                                  		; filesys_id in bds table
  9736                                  
  9737 0000058D E83700                  		call	clear_ids
  9738                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9739 00000590 C606[0305]01            		mov	byte [set_id_flag], 1
  9740 00000595 E85B00                  		call	GetBp		; build	a bpb if necessary
  9741 00000598 72B1                    		jb	short ret81
  9742                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9743 0000059A 803E[0305]02            		cmp	byte [set_id_flag], 2
  9744                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9745 0000059F C606[0305]00            		mov	byte [set_id_flag], 0
  9746 000005A4 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9747                                  					; otherwise, conventional boot record
  9748                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9749 000005A6 803E[7700]00            		cmp	byte [fhave96], 0
  9750 000005AB 7403                    		jz	short already_gotbpb ; brif not
  9751 000005AD E80D13                  		call	set_volume_id
  9752                                  already_gotbpb:				
  9753 000005B0 83C706                  		add	di, 6		; BDS.BPB
  9754                                  					; return the bpb from the current bds
  9755                                  
  9756                                  ;		fall into setptrsav, es:di -> result
  9757                                  
  9758                                  ; ---------------------------------------------------------------------------
  9759                                  
  9760                                  ; 15/10/2022
  9761                                  
  9762                                  ; ==========================================================================
  9763                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9764                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9765                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9766                                  ;It fails, for instance, when we install an external drive using driver.sys
  9767                                  ;because then the BDS segment is no longer Bios_Data. 
  9768                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9769                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9770                                  ;restored before returning to the caller.
  9771                                  ; ==========================================================================
  9772                                  
  9773                                  		; 19/10/2022
  9774                                  SetPtrSav:	; return point for dsk_init				
  9775 000005B3 8CC1                    		mov	cx, es		; save es
  9776                                  		;les	bx, ds:ptrsav
  9777 000005B5 C41E[1200]              		les	bx, [ptrsav]
  9778 000005B9 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9779 000005BD 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9780 000005C1 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9781 000005C5 F8                      		clc
  9782 000005C6 C3                      		retn
  9783                                  
  9784                                  ; =============== S U B	R O U T	I N E =======================================
  9785                                  
  9786                                  ; 15/10/2022
  9787                                  
  9788                                  ; -----------------------------------------------------
  9789                                  ; clear ids in bds table. only applied for floppies.
  9790                                  ;input:  es:di -> bds table
  9791                                  ;	assumes ds: -> Bios_Data
  9792                                  ;output: volid set to "NO NAME    "
  9793                                  ;	 vol_serial set to 0.
  9794                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9795                                  ;	   depending on the flag fatsize in bds.
  9796                                  ;
  9797                                  ;	trashes si, cx
  9798                                  ; -----------------------------------------------------
  9799                                  
  9800                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9801                                  ;size_of_EXT_SYSTEM_ID equ 8
  9802                                  
  9803                                  clear_ids:
  9804                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9805 000005C7 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9806                                  clear_ids_x:	; 11/09/2023		
  9807                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9808 000005CB 57                      		push	di
  9809 000005CC 31C9                    		xor	cx, cx		; no serial number
  9810 000005CE 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9811 000005D2 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9812                                  
  9813                                  		; BUGBUG - there's a lot in common here and with
  9814                                  		; mov_media_ids.. see if we can save some space by
  9815                                  		; merging them... jgl
  9816                                  
  9817                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9818                                  		; 10/12/2022
  9819 000005D6 B10B                    		mov	cl, 11 ; cx = 11		
  9820                                  
  9821                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9822 000005D8 BE[1605]                		mov	si, vol_no_name	; 19/10/2022
  9823 000005DB 83C74B                  		add	di, 75		; BDS.volid
  9824 000005DE F3A4                    		rep movsb
  9825                                  		
  9826                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9827                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9828                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9829                                  		;test	byte [es:di+1Fh], 40h
  9830                                  
  9831                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9832                                  			; Microsoft/IBM code has a bug here because the BDS's
  9833                                  			; .volid and .filesys_id fields will be reset
  9834                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9835                                  			; at the BDS offset 31 but current (this) code checks flags
  9836                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9837                                  			;
  9838                                  			; Correct Code:
  9839                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9840                                  			; 11/09/2023
  9841                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9842                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9843                                  			;
  9844                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9845                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9846                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9847                                  			;
  9848                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9849                                  			; 'clear_ids' is used for floppy disks only and the default
  9850                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9851                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9852                                  
  9853 000005E0 A840                    		test	al, 40h ; * 
  9854                                  		
  9855                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9856 000005E2 BE[0D05]                		mov	si, fat_16_id	; 19/10/2022
  9857 000005E5 7503                    		jnz	short ci_bigfat
  9858                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9859 000005E7 BE[0405]                		mov	si, fat_12_id	 ; 19/10/2022
  9860                                  ci_bigfat:				
  9861                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9862                                  		; 10/12/2022
  9863 000005EA B108                    		mov	cl, 8 ; cx = 8 
  9864 000005EC 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9865                                  					; filesys_id field
  9866 000005EF F3A4                    		rep movsb
  9867 000005F1 5F                      		pop	di		; restore bds pointer
  9868                                  getret_exit:		; 21/12/2023
  9869 000005F2 C3                      		retn
  9870                                  
  9871                                  ; =============== S U B	R O U T	I N E =======================================
  9872                                  
  9873                                  ; 15/10/2022
  9874                                  
  9875                                  ; ---------------------------------------------------------------------------
  9876                                  ;	getbp - return bpb from the drive specified by the bds.
  9877                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9878                                  ;	    note that we never come here for fixed disks.
  9879                                  ;	    for all other cases,
  9880                                  ;	      - it reads boot sector to pull out the bpb
  9881                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9882                                  ;		to get the fat id byte to build the bpb from there.
  9883                                  ;
  9884                                  ;   inputs:	es:di point to correct bds.
  9885                                  ;
  9886                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9887                                  ;		carry set, and al=7 if invalid disk.
  9888                                  ;		carry set and error code in al if other error.
  9889                                  ;		if failed to recognize the boot record, then will set the
  9890                                  ;		set_id_flag to 0.
  9891                                  ;		this routine will only work for a floppy diskette.
  9892                                  ;		     for a fixed disk, it will just return.
  9893                                  ;
  9894                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9895                                  ;	  segment definitions. It should be migrated towards.
  9896                                  ;	   now es:di has the bds, ds: has Bios_Data
  9897                                  ; ---------------------------------------------------------------------------
  9898                                  
  9899                                  		; 29/12/2023
  9900                                  GetBp:		
  9901                                  		; if returning fake bpb then return bpb as is.
  9902                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable
  9903 000005F3 26F6452305              		test	byte [es:di+23h], 5
  9904                                  		;jz	short getbp1	; getbp1
  9905                                  		;jmp	getret_exit
  9906                                  		; 21/12/2023
  9907 000005F8 75F8                    		jnz	short getret_exit
  9908                                  ; ---------------------------------------------------------------------------
  9909                                  getbp1:
  9910 000005FA 51                      		push	cx
  9911 000005FB 52                      		push	dx
  9912 000005FC 53                      		push	bx
  9913                                  
  9914                                  		; attempt to read in boot sector and determine bpb.
  9915                                  		; we assume that the 2.x and greater dos disks all
  9916                                  		; have a valid boot sector.
  9917                                  
  9918 000005FD E8A300                  		call	readbootsec
  9919 00000600 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9920 00000602 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9921 00000604 7508                    		jnz	short dofatbpb
  9922 00000606 E8E800                  		call	movbpb		; move bpb into	registers
  9923 00000609 EB51                    		jmp	short Has1
  9924                                  ; ---------------------------------------------------------------------------
  9925                                  
  9926                                  getbp_err_ret_brdg:			
  9927 0000060B E98100                  		jmp	getbp_err_ret
  9928                                  ; ---------------------------------------------------------------------------
  9929                                  
  9930                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9931                                  		; and fill in bpb from there.
  9932                                  dofatbpb:				
  9933 0000060E E84C01                  		call	readfat		; puts media descriptor	byte in	ah
  9934 00000611 72F8                    		jb	short getbp_err_ret_brdg
  9935                                  		;cmp	ds:fhave96, 0	; changeline support available?
  9936 00000613 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9937 00000618 7403                    		jz	short bpb_nochangeline ; brif not
  9938 0000061A E84112                  		call	hidensity	; may not return! May add sp, 2	and
  9939                                  					; jump to has1!!!!!! or	has720K
  9940                                  bpb_nochangeline:		; test for a valid 3.5" medium
  9941 0000061D 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9942                                  					; ffSmall
  9943 00000622 7512                    		jnz	short is_floppy
  9944 00000624 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9945 00000627 7570                    		jnz	short got_unknown_medium
  9946                                  Has720K:
  9947                                  		; 22/12/2023
  9948                                  		;;mov	bx, offset sm92 ; pointer to correct bpb
  9949                                  		;mov	bx, sm92	; 19/10/2022
  9950                                  
  9951                                  		; es points to segment of bds. the following should be modified
  9952                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9953                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9954                                  
  9955                                  		; 22/12/2023
  9956                                  		;; 10/12/2022
  9957                                  		;;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9958                                  		;; 21/12/2022
  9959                                  		;mov	al, [bx]
  9960                                  		;mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9961                                  		;mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9962                                  		;mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9963                                  		;; 19/10/2022 - Temporary !
  9964                                  		;;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9965                                  		;;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9966                                  		;;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9967                                  		;;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]
  9968                                  
  9969                                  		; 22/12/2023 (sm92)
  9970                                  		; (PCDOS 7.1, IBMBIO.COM - BIOSCODE:071Eh)
  9971 00000629 B003                    		mov	al, 3		; bpbtype.sbf = 3
  9972 0000062B B9A005                  		mov	cx, 1440	; bpbtype.csec = 1440
  9973 0000062E BA0202                  		mov	dx, 202h	; dl = bpbtype.spau = 2
  9974                                  					; dh = bpbtype.chead = 2
  9975 00000631 BB0970                  		mov	bx, 7009h	; bl = bpbtype.spt = 9
  9976                                  					; bh = bpbtype.dire = 112
  9977 00000634 EB26                    		jmp	short Has1
  9978                                  ; ---------------------------------------------------------------------------
  9979                                  
  9980                                  is_floppy:			; must be a 5.25" floppy if we come here
  9981 00000636 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9982 00000639 725E                    		jb	short got_unknown_medium
  9983                                  
  9984 0000063B B001                    		mov	al, 1		; set number of	fat sectors
  9985 0000063D BB0840                  		mov	bx, 16392	; 64*256+8
  9986                                  					; set dir entries and sector max
  9987 00000640 B94001                  		mov	cx, 320		; 40*8
  9988                                  					; set size of drive
  9989 00000643 BA0101                  		mov	dx, 257		; 01*256+1
  9990                                  					; set head limit and sec/all unit
  9991                                  		; 22/12/2023
  9992                                  		;mov	al, 1		; bpbtype.sbf = 1
  9993                                  		;mov	bx, 4008h	; bl = bpbtype.spt = 8
  9994                                  		;			; bh = bpbtype.dire = 64
  9995                                  		;mov	cx, 140h	; bpbtype.csec = 320
  9996                                  		;mov	dx, 101h	; dl = bpbtype.spau = 1
  9997                                  		;			; dh = bpbtype.chead = 1
  9998                                  
  9999 00000646 F6C402                  		test	ah, 2		; test for 8 or	9 sector
 10000 00000649 7505                    		jnz	short has8	; nz = has 8 sectors
 10001                                  		
 10002                                  		; 29/12/2023
 10003                                  		;inc	al	; 2 	; inc number of	fat sectors
 10004                                  		;inc	bl	; 9	; inc sector max
 10005 0000064B 40                      		inc	ax
 10006 0000064C 43                      		inc	bx
 10007                                  
 10008                                  		;add	cx, 40		; increase size	(to 360)
 10009                                  		; 18/12/2022
 10010 0000064D 80C128                  		add	cl, 40	; 28h	; 180K (360 sectors)
 10011                                  has8:
 10012 00000650 F6C401                  		test	ah, 1		; test for 1 or	2 heads
 10013 00000653 7407                    		jz	short Has1	; jz = 1 head
 10014 00000655 01C9                    		add	cx, cx		; double size of disk
 10015 00000657 B770                    		mov	bh, 112		; increase number of directory entries
 10016 00000659 FEC6                    		inc	dh		; inc sec/all unit
 10017                                  		;inc	dl		; inc head limit
 10018                                  		; 29/12/2023
 10019 0000065B 42                      		inc	dx
 10020                                  Has1:
 10021                                  		; 02/09/2023 (PCDOS 7.1, IBMBIO.COM - BIOSCODE:0754h)
 10022 0000065C 1E                      		push	ds
 10023 0000065D 06                      		push	es
 10024 0000065E 1F                      		pop	ds
 10025                                  
 10026                                  		;mov	[es:di+8], dh	; [es:di+BDS.secperclus]
 10027                                  		;mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
 10028                                  		;mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
 10029                                  		;mov	[es:di+10h], ah	; [es:di+BDS.media]
 10030                                  		;mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
 10031                                  		;mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
 10032                                  		;mov	[es:di+15h], dl	; [es:di+BDS.heads]
 10033                                  
 10034 0000065F 887508                  		mov	[di+8], dh	; [di+BDS.secperclus]
 10035 00000662 30F6                    		xor	dh, dh
 10036 00000664 895515                  		mov	[di+15h], dx	; [di+BDS.heads]
 10037 00000667 88FA                    		mov	dl, bh
 10038 00000669 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
 10039 0000066C 894D0E                  		mov	[di+0Eh], cx	; [di+BDS.totalsecs16]
 10040 0000066F 894D1B                  		mov	[di+1Bh], cx	; [di+BDS.totalsecs32]
 10041 00000672 886510                  		mov	[di+10h], ah	; [di+BDS.media]
 10042 00000675 88C2                    		mov	dl, al
 10043 00000677 895511                  		mov	[di+11h], dx	; [di+BDS.fatsecs]
 10044 0000067A 88DA                    		mov	dl, bl
 10045 0000067C 895513                  		mov	[di+13h], dx	; [di+BDS.secpertrack]
 10046                                  
 10047                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
 10048                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
 10049                                  		; to 0 since this code is for floppies
 10050                                  
 10051                                  		; 18/12/2022
 10052                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
 10053                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
 10054                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
 10055                                  		; 18/12/2022
 10056 0000067F 29C9                    		sub	cx, cx ; 0
 10057                                  		;mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
 10058                                  		;mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
 10059                                  		;mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
 10060                                  		
 10061                                  		; 02/09/2023
 10062 00000681 894D19                  		mov	[di+19h], cx ; 0 ; [di+BDS.hiddensecs+2]
 10063 00000684 894D17                  		mov	[di+17h], cx ; 0 ; [di+BDS.hiddensecs]
 10064 00000687 894D1D                  		mov	[di+1Dh], cx ; 0 ; [di+BDS.totalsecs32+2]
 10065                                  		
 10066 0000068A 1F                      		pop	ds ; 02/09/2023
 10067                                  getret:
 10068 0000068B 5B                      		pop	bx
 10069 0000068C 5A                      		pop	dx
 10070 0000068D 59                      		pop	cx
 10071                                  ;getret_exit:		; 21/12/2023
 10072 0000068E C3                      		retn
 10073                                  ; ---------------------------------------------------------------------------
 10074                                  
 10075                                  getbp_err_ret:	; before doing anything else, set set_id_flag to 0.
 10076                                  		;mov	ds:set_id_flag,	0
 10077                                  		; 19/10/2022
 10078 0000068F C606[0305]00            		mov	byte [set_id_flag], 0
 10079 00000694 E81C05                  		call	maperror
 10080 00000697 EBF2                    		jmp	short getret
 10081                                  ; ---------------------------------------------------------------------------
 10082                                  
 10083                                  		; we have a 3.5" diskette for which we cannot build a bpb.
 10084                                  		; we do	not assume any type of bpb for this medium.
 10085                                  
 10086                                  got_unknown_medium:
 10087                                  		;mov	ds:set_id_flag,	0
 10088 00000699 C606[0305]00            		mov	byte [set_id_flag], 0
 10089 0000069E B007                    		mov	al, 7
 10090 000006A0 F9                      		stc
 10091 000006A1 EBE8                    		jmp	short getret
 10092                                  
 10093                                  ; =============== S U B	R O U T	I N E =======================================
 10094                                  
 10095                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10096                                  
 10097                                  ; ----------------------------------------------------------------
 10098                                  ; read in the boot sector. set carry if error in reading sector.
 10099                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
 10100                                  ;
 10101                                  ;	assumes es:di -> bds, ds-> Bios_Data
 10102                                  ; ----------------------------------------------------------------
 10103                                  
 10104                                  ; 10/03/2019 - Retro DOS v4.0
 10105                                  
 10106                                  readbootsec:	
 10107 000006A3 B600                    		mov	dh, 0		; head 0
 10108 000006A5 B90100                  		mov	cx, 1		; cylinder 0, sector 1
 10109 000006A8 E8BF00                  		call	read_sector
 10110 000006AB 7243                    		jb	short err_ret
 10111 000006AD 31DB                    		xor	bx, bx		; assume valid boot sector
 10112                                  
 10113                                  		; put a sanity check for the boot sector in here to detect
 10114                                  		; boot sectors that do not have valid bpbs. we examine the
 10115                                  		; first two bytes - they must contain a long jump (69h) or a
 10116                                  		; short jump (EBh) followed by a nop (90h), or a short jump
 10117                                  		; (E9h). if this test is passed, we further check by examining
 10118                                  		; the signature at the end of the boot sector for the word
 10119                                  		; AA55h. if the signature is not present, we examine the media
 10120                                  		; descriptor byte to see if it is valid. for dos 3.3, this
 10121                                  		; logic is modified a little bit. we are not going to check
 10122                                  		; signature. instead we are going to sanity check the media
 10123                                  		; byte in bpb regardless of the validity of signature. this is
 10124                                  		; to save the already developed commercial products that have
 10125                                  		; good jump instruction and signature but with the false bpb
 10126                                  		; informations
 10127                                  
 10128                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
 10129                                  
 10130                                  		; 02/09/2023
 10131                                  		; 19/10/2022
 10132                                  		;cmp	byte [disksector], 69h ; is it a direct jump?
 10133                                  		;jz	short check_bpb_mediabyte ; don't need to find a nop
 10134                                  		;cmp	byte [disksector], 0E9h ; dos 2.0 jump?
 10135                                  		;jz	short check_bpb_mediabyte ; no need for	nop
 10136                                  		;cmp	byte [disksector], 0EBh ; how about a short jump?
 10137                                  		;jnz	short invalidbootsec
 10138                                  		;cmp	byte [disksector+2], 90h ; is next one a nop?
 10139                                  		;jnz	short invalidbootsec
 10140                                  
 10141                                  		; 02/09/2023 (PCDOS 7.1)
 10142 000006AF A0[4E01]                		mov	al, [disksector]
 10143 000006B2 3C69                    		cmp	al, 69h		; is it a direct jump?
 10144 000006B4 740F                    		je	short check_bpb_mediabyte
 10145                                  					; don't need to find a nop
 10146 000006B6 3CE9                    		cmp	al, 0E9h	; dos 2.0 jump?
 10147 000006B8 740B                    		je	short check_bpb_mediabyte
 10148                                  					; no need for nop
 10149 000006BA 3CEB                    		cmp	al, 0EBh	; how about a short jump?
 10150 000006BC 7530                    		jne	short invalidbootsec
 10151 000006BE 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
 10152 000006C3 7529                    		jne	short invalidbootsec
 10153                                  
 10154                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 10155                                  ;
 10156                                  ;; 10/03/2019
 10157                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
 10158                                  ;;
 10159                                  ;; Don't have to perform the following signature check since
 10160                                  ;; we need to check the media byte even with the good signatured diskette.
 10161                                  ;;
 10162                                  ;;check_signature:
 10163                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
 10164                                  ;;							 ; disk or 1.x media.
 10165                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
 10166                                  ;;					       ; may need some special handling
 10167                                  
 10168                                  ; check for non-ibm disks which do not have the signature AA55h at the
 10169                                  ; end of the boot sector, but still have a valid boot sector. this is done
 10170                                  ; by examining the media descriptor in the boot sector.
 10171                                  
 10172                                  		; 19/10/2022
 10173                                  check_bpb_mediabyte:
 10174 000006C5 A0[6301]                		mov	al, [disksector+15h]
 10175                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 10176 000006C8 50                      		push	ax ; 02/09/2023
 10177 000006C9 24F0                    		and	al, 0F0h
 10178 000006CB 3CF0                    		cmp	al, 0F0h	; allow	for strange media
 10179 000006CD 58                      		pop	ax ; 02/09/2023
 10180 000006CE 751E                    		jnz	short invalidbootsec
 10181                                  
 10182                                  ; there were some (apparently a lot of them) diskettes that had been formatted
 10183                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
 10184                                  ; sectors. these are specifically diskettes that were formatted in drives
 10185                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
 10186                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
 10187                                  ; in dos. in order to support them, we have to introduce a "hack" that will
 10188                                  ; help our build bpb routine to recognise these specific cases, and to
 10189                                  ; set up out copy of the bpb accordingly.
 10190                                  ; we do this by checking to see if the boot sector is off a diskette that
 10191                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
 10192                                  ; sec/clus field to 1. if not, we carry on as normal.
 10193                                  
 10194                                  checksinglesided:
 10195                                  		;mov	al, [disksector+15h]
 10196                                  		; 02/09/2023
 10197                                  		; al = [disksector+15h]
 10198 000006D0 3CF0                    		cmp	al, 0F0h
 10199 000006D2 741B                    		jz	short gooddsk
 10200 000006D4 A801                    		test	al, 1
 10201 000006D6 7517                    		jnz	short gooddsk
 10202 000006D8 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
 10203 000006DE 7507                    		jnz	short mustbeearlier
 10204 000006E0 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
 10205 000006E5 7308                    		jnb	short gooddsk
 10206                                  
 10207                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
 10208                                  
 10209                                  mustbeearlier:				
 10210 000006E7 C606[5B01]01            		mov	byte [disksector+0Dh], 1
 10211                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 10212 000006EC EB01                    		jmp	short gooddsk
 10213                                  ; ---------------------------------------------------------------------------
 10214                                  
 10215                                  invalidbootsec:				
 10216 000006EE 43                      		inc	bx		; indicate that boot sector invalid
 10217                                  		; 10/12/2022
 10218                                  movbpb_ret:
 10219                                  gooddsk:				
 10220 000006EF F8                      		clc
 10221                                  err_ret:
 10222 000006F0 C3                      		retn
 10223                                  ; ---------------------------------------------------------------------------
 10224                                  
 10225                                  		; 10/12/2022
 10226                                  ;err_ret:				
 10227                                  		;retn
 10228                                  
 10229                                  ; =============== S U B	R O U T	I N E =======================================
 10230                                  
 10231                                  ; 15/10/2022
 10232                                  ; ---------------------------------------------------------------------------
 10233                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
 10234                                  ; getbp routine at has1
 10235                                  ;
 10236                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
 10237                                  ; serial number, volume label, file system id in bds according to
 10238                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
 10239                                  ; to signal that volume label is set already from the extended boot record
 10240                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
 10241                                  ; the volume label in the root directory.)
 10242                                  ; ---------------------------------------------------------------------------
 10243                                  
 10244                                  ; 10/03/2019 - Retro DOS v4.0
 10245                                  
 10246                                  		; 19/10/2022
 10247                                  movbpb:	
 10248 000006F1 8A36[5B01]              		mov	dh, [disksector+0Dh]
 10249                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
 10250                                  					; sectors per unit
 10251 000006F5 8A3E[5F01]              		mov	bh, [disksector+11h]
 10252                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
 10253                                  					; number of directory entries
 10254 000006F9 8B0E[6101]              		mov	cx, [disksector+13h]
 10255                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
 10256                                  					; size of drive
 10257 000006FD 8A26[6301]              		mov	ah, [disksector+15h]
 10258                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 10259                                  					; media	descriptor
 10260 00000701 A0[6401]                		mov	al, [disksector+16h];
 10261                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
 10262                                  					; number of fat	sectors
 10263 00000704 8A1E[6601]              		mov	bl, [disksector+18h]
 10264                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
 10265                                  					; sectors per track
 10266 00000708 8A16[6801]              		mov	dl, [disksector+1Ah]
 10267                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
 10268                                  					; number of heads
 10269 0000070C 803E[0305]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
 10270 00000711 75DC                    		jnz	short movbpb_ret
 10271 00000713 E81200                  		call	mov_media_ids
 10272 00000716 7205                    		jb	short movbpb_conv ; conventional boot record?
 10273 00000718 C606[0305]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
 10274                                  movbpb_conv:				
 10275 0000071D 803E[7700]01            		cmp	byte [fhave96], 1
 10276 00000722 75CB                    		jnz	short movbpb_ret
 10277 00000724 E88A11                  		call	resetchanged	; reset	flags in bds to	not fchanged.
 10278                                  		; 10/12/2022
 10279                                  		; cf = 0
 10280                                  ;movbpb_ret:				
 10281                                  		;clc
 10282 00000727 C3                      		retn
 10283                                  
 10284                                  ; =============== S U B	R O U T	I N E =======================================
 10285                                  
 10286                                  ;copy the boot_serial number, volume id, and filesystem id from the
 10287                                  ;***extended boot record*** in ds:disksector to the bds table pointed
 10288                                  ;by es:di.
 10289                                  
 10290                                  ;in.) es:di -> bds
 10291                                  ;     ds:disksector = valid extended boot record.
 10292                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
 10293                                  ;      the boot record information.
 10294                                  ;     carry flag set if not an extended bpb.
 10295                                  ;     all registers saved except the flag.
 10296                                  
 10297                                  		; 19/10/2022
 10298                                  mov_media_ids:		
 10299 00000728 803E[7401]29            		cmp	byte [disksector+26h], 29h
 10300                                  					; [disksector+EXT_BOOT.SIG],
 10301                                  					; EXT_BOOT_SIGNATURE
 10302 0000072D 752C                    		jnz	short mmi_not_ext
 10303 0000072F 51                      		push	cx
 10304 00000730 8B0E[7501]              		mov	cx, [disksector+27h]
 10305                                  					; [disksector+EXT_BOOT.SERIAL]
 10306 00000734 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
 10307 00000738 8B0E[7701]              		mov	cx, [disksector+29h]
 10308                                  					; [disksector+EXT_BOOT.SERIAL+2]
 10309 0000073C 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
 10310 00000740 57                      		push	di
 10311 00000741 56                      		push	si
 10312 00000742 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
 10313 00000745 BE[7901]                		mov	si, disksector+2Bh
 10314                                  		;mov	si, (offset disksector+2Bh) ;
 10315                                  					; disksector+EXT_BOOT.VOL_LABEL
 10316 00000748 83C74B                  		add	di, 75		; BDS.volid
 10317 0000074B F3A4                    		rep movsb
 10318                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
 10319                                  		; 10/12/2022
 10320 0000074D B108                    		mov	cl, 8 ; cx = 8
 10321 0000074F BE[8401]                		mov	si, disksector+36h
 10322                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
 10323 00000752 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
 10324 00000755 F3A4                    		rep movsb
 10325 00000757 5E                      		pop	si
 10326 00000758 5F                      		pop	di
 10327 00000759 59                      		pop	cx
 10328                                  		; 10/12/2022
 10329                                  		; cf = 0
 10330                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
 10331                                  				; (20/09/2022)
 10332 0000075A C3                      		retn
 10333                                  ; ---------------------------------------------------------------------------
 10334                                  
 10335                                  mmi_not_ext:				
 10336 0000075B F9                      		stc
 10337 0000075C C3                      		retn
 10338                                  
 10339                                  ; =============== S U B	R O U T	I N E =======================================
 10340                                  
 10341                                  ; 15/10/2022
 10342                                  ; --------------------------------------------------------------
 10343                                  ; read in the fat sector and get the media byte from it.
 10344                                  ; input : es:di -> bds
 10345                                  ; output:
 10346                                  ;	  carry set if an error occurs, ax contains error code.
 10347                                  ;	  otherwise, ah contains media byte on exit
 10348                                  ; --------------------------------------------------------------
 10349                                  
 10350                                  readfat:	
 10351                                  		;mov	dh, 0
 10352                                  		; 10/12/2022
 10353 0000075D 30F6                    		xor	dh, dh
 10354 0000075F B90200                  		mov	cx, 2		; head 0
 10355                                  					; cylinder 0, sector 2
 10356 00000762 E80500                  		call	read_sector
 10357 00000765 7202                    		jb	short bad_fat_ret
 10358 00000767 8A27                    		mov	ah, [bx]	; media	byte
 10359                                  bad_fat_ret:				
 10360 00000769 C3                      		retn
 10361                                  
 10362                                  ; =============== S U B	R O U T	I N E =======================================
 10363                                  
 10364                                  ; 15/10/2022
 10365                                  
 10366                                  ; ---------------------------------------------------------------------------
 10367                                  ; read a single sector into the temp buffer.
 10368                                  ; perform three retries in case of error.
 10369                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
 10370                                  ;		cx has sector and cylinder
 10371                                  ;		dh has head
 10372                                  ;		es:di has bds
 10373                                  ;		ds has Bios_Data
 10374                                  ;
 10375                                  ;   outputs:	carry clear
 10376                                  ;		    Bios_Data:bx point to sector
 10377                                  ;		       (note: some callers assume location of buffer)
 10378                                  ;
 10379                                  ;		carry set
 10380                                  ;		    ax has rom error code
 10381                                  ;
 10382                                  ; register bp is preserved.
 10383                                  ; ---------------------------------------------------------------------------
 10384                                  
 10385                                  ; 10/03/2019 - Retro DOS v4.0
 10386                                  
 10387                                  		; 19/10/2022
 10388                                  read_sector:	
 10389 0000076A 55                      		push	bp
 10390 0000076B BD0300                  		mov	bp, 3		; make 3 attempts
 10391 0000076E 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 10392 00000772 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
 10393                                  rd_ret:					
 10394 00000775 06                      		push	es
 10395 00000776 1E                      		push	ds
 10396 00000777 07                      		pop	es
 10397 00000778 B80102                  		mov	ax, 201h
 10398 0000077B CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10399                                  					; AL = number of sectors to read, CH = track, CL = sector
 10400                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10401                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10402 0000077D 07                      		pop	es
 10403 0000077E 734A                    		jnb	short okret2
 10404                                  rd_rty:					
 10405 00000780 E86804                  		call	again		; reset	disk, decrement	bp, preserve ax
 10406 00000783 7442                    		jz	short err_rd_ret
 10407 00000785 26F6452301              		test	byte [es:di+23h], 1
 10408                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
 10409                                  					; fnon_removable
 10410 0000078A 75E9                    		jnz	short rd_ret
 10411 0000078C 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10412 00000791 7510                    		jnz	short rd_skip1_dpt
 10413 00000793 50                      		push	ax
 10414 00000794 1E                      		push	ds		; for retry, set the head settle time to 0Fh
 10415 00000795 C536[2D01]              		lds	si, [dpt]
 10416                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10417                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
 10418                                  		;			; NORMSETTLE
 10419                                  		; 12/12/2022
 10420 00000799 B00F                    		mov	al, 15
 10421 0000079B 864409                  		xchg	al, [si+9]
 10422                                  		; 
 10423 0000079E 1F                      		pop	ds
 10424 0000079F A2[2A01]                		mov	[save_head_sttl], al
 10425 000007A2 58                      		pop	ax
 10426                                  rd_skip1_dpt:				
 10427 000007A3 06                      		push	es
 10428 000007A4 1E                      		push	ds
 10429 000007A5 07                      		pop	es
 10430 000007A6 B80102                  		mov	ax, 201h
 10431 000007A9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
 10432                                  					; AL = number of sectors to read, CH = track, CL = sector
 10433                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
 10434                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
 10435 000007AB 07                      		pop	es
 10436 000007AC 9C                      		pushf
 10437 000007AD 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10438 000007B2 750E                    		jnz	short rd_skip2_dpt
 10439 000007B4 50                      		push	ax
 10440 000007B5 A0[2A01]                		mov	al, [save_head_sttl]
 10441 000007B8 1E                      		push	ds
 10442 000007B9 C536[2D01]              		lds	si, [dpt]
 10443 000007BD 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10444 000007C0 1F                      		pop	ds
 10445 000007C1 58                      		pop	ax
 10446                                  rd_skip2_dpt:				
 10447 000007C2 9D                      		popf
 10448 000007C3 7305                    		jnb	short okret2
 10449 000007C5 EBB9                    		jmp	short rd_rty
 10450                                  ; ---------------------------------------------------------------------------
 10451                                  
 10452                                  err_rd_ret:				
 10453 000007C7 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
 10454                                  					; return error
 10455 000007C9 F9                      		stc
 10456                                  
 10457                                  ; update information pertaining to last drive accessed, time of access, last
 10458                                  ; track accessed in that drive.
 10459                                  
 10460                                  okret2:					
 10461 000007CA 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
 10462 000007CE 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
 10463 000007D2 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10464                                  					; save last track accessed on this drive
 10465                                  					; preserve flags in case error occurred
 10466 000007D6 9C                      		pushf
 10467 000007D7 E8F103                  		call	set_tim
 10468 000007DA 9D                      		popf			; restore flags
 10469 000007DB 5D                      		pop	bp
 10470 000007DC C3                      		retn
 10471                                  
 10472                                  ;----------------------------------------------------------------------------
 10473                                  ;	disk open/close routines
 10474                                  ;----------------------------------------------------------------------------
 10475                                  
 10476                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
 10477 000007DD 803E[7700]00            		cmp	byte [fhave96], 0
 10478 000007E2 7407                    		jz	short dsk_open_exit ; done if no changeline support
 10479 000007E4 E8DFFC                  		call	SetDrive	; get bds for drive
 10480 000007E7 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
 10481                                  dsk_open_exit:	
 10482                                  		; 10/12/2022
 10483                                  		; cf = 0			
 10484                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10485                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10486 000007EB C3                      		retn
 10487                                  ; ---------------------------------------------------------------------------
 10488                                  
 10489                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
 10490 000007EC 803E[7700]00            		cmp	byte [fhave96], 0
 10491 000007F1 740E                    		jz	short exitjx	; done if no changeline	support
 10492 000007F3 E8D0FC                  		call	SetDrive	; get bds for drive
 10493 000007F6 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 10494 000007FB 7404                    		jz	short exitjx	; watch	out for	wrap
 10495 000007FD 26FF4D20                		dec	word [es:di+20h]
 10496                                  exitjx:					
 10497                                  		; 10/12/2022
 10498                                  		; cf = 0
 10499                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
 10500                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
 10501 00000801 C3                      		retn
 10502                                  
 10503                                  ;----------------------------------------------------------------------------
 10504                                  ;		disk removable routine
 10505                                  ;----------------------------------------------------------------------------
 10506                                  
 10507                                  		; al is	unit #
 10508                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
 10509 00000802 E8C1FC                  		call	SetDrive	; get bds for this drive
 10510                                  		;test	byte [es:di+BDS.flags], fnon_removable
 10511 00000805 26F6452301              		test	byte [es:di+23h], 1
 10512                                  		;jnz	short x_bus_exit ; non_rem
 10513 0000080A 7501                    		jnz	short non_rem	; 15/10/2022
 10514                                  		; 10/12/2022
 10515                                  		; cf = 0
 10516                                  		;clc			; CF is already ZERO here
 10517                                  					; 15/10/2022
 10518 0000080C C3                      		retn
 10519                                  ; ---------------------------------------------------------------------------
 10520                                  
 10521                                  non_rem:
 10522                                  x_bus_exit:				
 10523 0000080D B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
 10524                                  					; return busy status
 10525 0000080F F9                      		stc
 10526                                  dsk_ret:				
 10527 00000810 C3                      		retn
 10528                                  
 10529                                  ;----------------------------------------------------------------------------
 10530                                  ;		disk i/o routines
 10531                                  ;----------------------------------------------------------------------------
 10532                                  
 10533                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
 10534                                  		;mov	word [wrtverify], 103h
 10535                                  		; 19/10/2022
 10536 00000811 C706[2001]0301          		mov	word [rflag], 103h
 10537                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
 10538 00000817 EB06                    		jmp	short dsk_cl
 10539                                  ; ---------------------------------------------------------------------------
 10540                                  
 10541                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
 10542                                  		;mov	word [wrtverify], 3
 10543                                  		; 19/10/2022
 10544 00000819 C706[2001]0300          		mov	word [rflag], 3
 10545                                  		;mov	word ptr ds:rflag, 3 ; romwrite
 10546                                  
 10547                                  dsk_cl:					
 10548 0000081F E89400                  		call	diskio		; romwrite
 10549                                  ; ---------------------------------------------------------------------------
 10550                                  
 10551                                  dsk_io:					
 10552 00000822 73EC                    		jnb	short dsk_ret
 10553 00000824 E9B0F8                  		jmp	bc_err_cnt
 10554                                  ; ---------------------------------------------------------------------------
 10555                                  
 10556                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
 10557 00000827 E88700                  		call	diskrd
 10558 0000082A EBF6                    		jmp	short dsk_io
 10559                                  
 10560                                  ; =============== S U B	R O U T	I N E =======================================
 10561                                  
 10562                                  ; 15/10/2022
 10563                                  ; 10/03/2019 - Retro DOS v4.0
 10564                                  
 10565                                  ;-----------------------------------------------------------
 10566                                  ; miscellaneous odd jump routines.
 10567                                  ; moved out of mainline for speed.
 10568                                  
 10569                                  ; if we have a system where we have virtual drives, we need 
 10570                                  ; to prompt the user to place the correct disk in the drive.
 10571                                  ;
 10572                                  ;	assume es:di -> bds, ds:->Bios_Data
 10573                                  ;-----------------------------------------------------------
 10574                                  
 10575                                  		; 19/10/2022
 10576                                  checksingle:
 10577 0000082C 50                      		push	ax
 10578 0000082D 53                      		push	bx
 10579 0000082E 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
 10580                                  
 10581                                  ; if hard drive, cannot change disk.
 10582                                  ; if current owner of physical drive, no need to change diskette.
 10583                                  
 10584 00000832 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
 10585 00000835 7573                    		jnz	short singleret
 10586 00000837 F6C310                  		test	bl, 10h		; fi_am_mult
 10587                                  					; is there a drive sharing this	physical drive?
 10588 0000083A 746E                    		jz	short singleret
 10589                                  
 10590                                  
 10591                                  ; look for the previous owner of this physical drive
 10592                                  ; and reset its ownership flag.
 10593                                  
 10594 0000083C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10595                                  					; get physical drive number
 10596 00000840 06                      		push	es		; preserve pointer to current bds
 10597 00000841 57                      		push	di
 10598 00000842 C43E[1901]              		les	di, [start_bds] ; get first bds
 10599                                  scan_list:
 10600 00000846 26384504                		cmp	[es:di+4], al
 10601 0000084A 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
 10602 0000084C B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
 10603 0000084E 26845D23                		test	[es:di+23h], bl
 10604 00000852 744B                    		jz	short scan_skip	; he doesn't own it either. continue
 10605 00000854 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
 10606 00000858 5F                      		pop	di		; restore pointer to current bds
 10607 00000859 07                      		pop	es
 10608 0000085A 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
 10609                                  
 10610                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
 10611                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
 10612                                  ; in this case.
 10613 0000085E 803E[7A00]01            		cmp	byte [fsetowner], 1
 10614 00000863 7517                    		jnz	short not_fsetowner
 10615                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
 10616 00000865 26807D0400              		cmp	byte [es:di+4], 0
 10617 0000086A 753E                    		jnz	short singleret
 10618 0000086C 268A4505                		mov	al, [es:di+5]
 10619                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
 10620                                  					; get the DOS drive letter
 10621 00000870 06                      		push	es
 10622 00000871 8E06[1A00]              		mov	es, [zeroseg]
 10623 00000875 26A20405                		mov	[es:LSTDRV], al
 10624                                  		;mov	es:504h, al	; [es:LSTDRV]
 10625                                  					; set up sdsb
 10626 00000879 07                      		pop	es		; restore bds pointer
 10627 0000087A EB2E                    		jmp	short singleret
 10628                                  ; ---------------------------------------------------------------------------
 10629                                  
 10630                                  ; to support "backward" compatibility with ibm's "single drive status byte"
 10631                                  ; we now check to see if we are in a single drive system and the application
 10632                                  ; has "cleverly" diddled the sdsb
 10633                                  
 10634                                  not_fsetowner:
 10635 0000087C 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
 10636 00000881 7517                    		jnz	short ignore_sdsb
 10637 00000883 50                      		push	ax
 10638 00000884 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
 10639 00000888 88C4                    		mov	ah, al
 10640 0000088A 06                      		push	es
 10641 0000088B 8E06[1A00]              		mov	es, [zeroseg]
 10642 0000088F 2686060405              		xchg	al, [es:LSTDRV]
 10643                                  		;xchg	al, es:504h	; [es:LSTDRV]
 10644                                  					; then swap(curr_drv,req_drv)
 10645 00000894 07                      		pop	es
 10646 00000895 38C4                    		cmp	ah, al		; else
 10647 00000897 58                      		pop	ax		; swap(curr_drv,req_drv)
 10648 00000898 7410                    		jz	short singleret	; issue	swap_dsk_msg
 10649                                  ignore_sdsb:
 10650 0000089A E83E0E                  		call	swpdsk
 10651 0000089D EB0B                    		jmp	short singleret
 10652                                  ; ---------------------------------------------------------------------------
 10653                                  
 10654                                  scan_skip:
 10655 0000089F 26C43D                  		les	di, [es:di]			
 10656                                  		;les	di, es:[di]	; [es:di+BDS.link]
 10657                                  					; go to	next bds
 10658 000008A2 83FFFF                  		cmp	di, 0FFFFh	; end of list?
 10659 000008A5 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
 10660 000008A7 F9                      		stc
 10661 000008A8 5F                      		pop	di		; restore current bds
 10662 000008A9 07                      		pop	es
 10663                                  singleret:
 10664 000008AA 5B                      		pop	bx
 10665 000008AB 58                      		pop	ax
 10666 000008AC C3                      		retn
 10667                                  
 10668                                  ; 22/12/2023
 10669                                  %if 0
 10670                                  ; ---------------------------------------------------------------------------
 10671                                  
 10672                                  baddrive:
 10673                                  		mov	al, 8		; sector not found
 10674                                  		jmp	short baddrive_ret
 10675                                  %endif
 10676                                  
 10677                                  ; ---------------------------------------------------------------------------
 10678                                  
 10679                                  unformatteddrive:
 10680 000008AD B007                    		mov	al, 7		; unknown media
 10681                                  ;baddrive_ret:
 10682 000008AF F9                      		stc
 10683                                  ; ---------------------------------------------------------------------------
 10684                                  
 10685                                  ioret:
 10686 000008B0 C3                      		retn
 10687                                  
 10688                                  ; ---------------------------------------------------------------------------
 10689                                  
 10690                                  ; 15/10/2022
 10691                                  
 10692                                  ; ---------------------------------------------------------------------------
 10693                                  ;	disk i/o handler
 10694                                  ;
 10695                                  ;	al = drive number (0-6)
 10696                                  ;	ah = media descriptor
 10697                                  ;	cx = sector count
 10698                                  ;	dx = first sector (low)
 10699                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10700                                  ;	ds = cs
 10701                                  ;	es:di = transfer address
 10702                                  ;	[rflag]=operation (2=read, 3=write)
 10703                                  ;	[verify]=1 for verify after write
 10704                                  ;
 10705                                  ;	if successful carry flag = 0
 10706                                  ;	  else cf=1 and al contains error code
 10707                                  ; ---------------------------------------------------------------------------
 10708                                  
 10709                                  diskrd:
 10710                                  		;mov	ds:rflag, 2	; romread
 10711                                  		; 19/10/2022
 10712 000008B1 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10713                                  
 10714                                  ; =============== S U B	R O U T	I N E =======================================
 10715                                  
 10716                                  		; 19/10/2022
 10717                                  diskio:
 10718 000008B6 89FB                    		mov	bx, di		; es:bx	= transfer address
 10719 000008B8 8C06[2E05]              		mov	[xfer_seg], es	; save transfer	segment
 10720 000008BC E807FC                  		call	SetDrive
 10721 000008BF 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10722 000008C3 A2[1F01]                		mov	[medbyt], al
 10723                                  		;jcxz	short ioret
 10724 000008C6 E3E8                    		jcxz	ioret
 10725                                  
 10726                                  ; see if the media is formatted or not by checking the flags field in
 10727                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10728                                  ; go to the error exit at label unformatteddrive.
 10729                                  
 10730 000008C8 26F6452402              		test	byte [es:di+24h], 2
 10731                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10732                                  					; unformatted_media
 10733 000008CD 75DE                    		jnz	short unformatteddrive
 10734 000008CF 890E[2201]              		mov	[seccnt], cx	; save sector count
 10735 000008D3 8926[3501]              		mov	[spsav], sp	; save sp
 10736                                  
 10737                                  ; ensure that we are trying to access valid sectors on the drive
 10738                                  
 10739 000008D7 89D0                    		mov	ax, dx
 10740 000008D9 31F6                    		xor	si, si
 10741 000008DB 01CA                    		add	dx, cx
 10742                                  		;adc	si, 0
 10743                                  		; 02/09/2023 (PCDOS 7.1)
 10744 000008DD D1D6                    		rcl	si, 1
 10745 000008DF 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10746                                  					; 32 bit sector ?
 10747 000008E4 740C                    		jz	short sanity32
 10748                                  		;cmp	si, 0
 10749                                  		; 02/09/2023
 10750 000008E6 09F6                    		or	si, si
 10751 000008E8 751A                    		jnz	short baddrive
 10752 000008EA 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10753 000008EE 7714                    		ja	short baddrive
 10754 000008F0 EB16                    		jmp	short sanityok
 10755                                  ; ---------------------------------------------------------------------------
 10756                                  
 10757                                  sanity32:
 10758 000008F2 0336[2405]              		add	si, [start_sec_h]
 10759 000008F6 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10760 000008FA 720C                    		jb	short sanityok
 10761 000008FC 7706                    		ja	short baddrive
 10762 000008FE 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10763                                  		;ja	short baddrive
 10764                                  		; 22/12/2023
 10765 00000902 7604                    		jna	short sanityok
 10766                                  ; 22/12/2023
 10767                                  %if 1
 10768                                  ; ---------------------------------------------------------------------------
 10769                                  
 10770                                  baddrive:
 10771 00000904 B008                    		mov	al, 8		; sector not found
 10772                                  		;jmp	short baddrive_ret
 10773                                  ; ---------------------------------------------------------------------------
 10774                                  ;unformatteddrive:
 10775                                  		;mov	al, 7		; unknown media
 10776                                  baddrive_ret:
 10777 00000906 F9                      		stc
 10778                                  ;ioret:
 10779 00000907 C3                      		retn
 10780                                  %endif
 10781                                  
 10782                                  ; ---------------------------------------------------------------------------
 10783                                  
 10784                                  sanityok:
 10785 00000908 8B16[2405]              		mov	dx, [start_sec_h]
 10786 0000090C 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10787 00000910 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10788                                  
 10789                                  ; now dx;ax have the physical first sector.
 10790                                  ; since the following procedures is going to destroy ax, let's
 10791                                  ; save it temporarily to saved_word.
 10792                                  
 10793 00000914 A3[2205]                		mov	[saved_word], ax ; save the sector number (low)
 10794                                  		; 22/12/2023
 10795                                  		; [temp_h] = [saved_word]
 10796                                  
 10797                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10798                                  ; will do it because we will skip the set up stuff with hard disks.
 10799                                  
 10800 00000917 06                      		push	es
 10801                                  		;mov	es, [zeroseg]
 10802                                  		; 02/09/2023
 10803 00000918 31F6                    		xor	si, si ; 0
 10804 0000091A 8EC6                    		mov	es, si
 10805 0000091C 26C4367800              		les	si, [es:DSKADR]
 10806                                  		;les	si, es:78h	; [es:DSKADR]
 10807                                  					; current disk parm table
 10808 00000921 8936[2D01]              		mov	[dpt], si
 10809 00000925 8C06[2F01]              		mov	[dpt+2], es
 10810 00000929 07                      		pop	es
 10811 0000092A 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10812                                  					; fnon_removable
 10813 0000092F 7510                    		jnz	short skip_setup
 10814 00000931 E8F8FE                  		call	checksingle
 10815                                  
 10816                                  ; check to see if we have previously noted a change line. the routine
 10817                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10818                                  ; the proper error code.
 10819                                  
 10820 00000934 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10821 00000939 7403                    		jz	short diskio_nochangeline ; brif not
 10822 0000093B E86B0E                  		call	checklatchio	; will do a sneaky pop stack return
 10823                                  					; if a disk error occurs
 10824                                  diskio_nochangeline:			
 10825 0000093E E87700                  		call	iosetup		; set up tables	and variables for i/o
 10826                                  
 10827                                  ; now the settle values are correct for the following code
 10828                                  
 10829                                  skip_setup:
 10830                                  
 10831                                  ; 32 bit sector calculation.
 10832                                  ; dx:[saved_word] = starting sector number.
 10833                                  
 10834 00000941 89D0                    		mov	ax, dx
 10835 00000943 31D2                    		xor	dx, dx
 10836                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10837                                  					 ; divide by sec per track
 10838                                  		; 02/09/2023
 10839 00000945 268B4D13                		mov	cx, [es:di+13h]
 10840 00000949 F7F1                    		div	cx
 10841                                  
 10842                                  		;mov	[temp_h], ax
 10843                                  		;mov	ax, [saved_word]
 10844                                  		; 22/12/2023
 10845 0000094B 8706[2205]              		xchg	ax, [saved_word] ; [temp_h] = [saved_word]
 10846                                  
 10847 0000094F F7F1                    		div	cx ; 02/09/2023
 10848                                  		;div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10849                                  					; now, [temp_h]:ax = track #, dx = sector
 10850                                  		;inc	dl		; sector number	is 1 based.
 10851                                  		; 18/12/2022
 10852 00000951 42                      		inc	dx
 10853 00000952 8816[3101]              		mov	[cursec], dl	; save current sector
 10854 00000956 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10855                                  					; get number of	heads
 10856 0000095A 50                      		push	ax
 10857 0000095B 31D2                    		xor	dx, dx
 10858 0000095D A1[2205]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10859 00000960 F7F1                    		div	cx
 10860 00000962 A3[2205]                		mov	[temp_h], ax	; [temp_h] = [saved_word]	
 10861 00000965 58                      		pop	ax
 10862 00000966 F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10863 00000968 833E[2205]00            		cmp	word [temp_h], 0
 10864                                  		;ja	short baddrive_brdg
 10865                                  		; 22/12/2023
 10866 0000096D 7795                    		ja	short baddrive
 10867 0000096F 3D0004                  		cmp	ax, 1024	; 2^10 currently maximum for track #.
 10868                                  		;ja	short baddrive_brdg
 10869 00000972 7790                    		ja	short baddrive
 10870 00000974 8816[3201]              		mov	[curhd], dl	; save current head
 10871 00000978 A3[3301]                		mov	[curtrk], ax	; save current track
 10872                                  
 10873                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10874                                  ; violations here. not true. we perform the operation as if everything is
 10875                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10876                                  
 10877 0000097B A1[2201]                		mov	ax, [seccnt]
 10878 0000097E E87E00                  		call	block		; (cas - call/ret)
 10879                                  		;call	done
 10880                                  		;retn
 10881                                  		; 18/12/2022
 10882                                  		;jmp	done
 10883                                  		; 22/12/2023
 10884                                  		;jmp	short done
 10885                                  
 10886                                  ; ---------------------------------------------------------------------------
 10887                                  
 10888                                  		; 22/12/2023
 10889                                  ;baddrive_brdg:
 10890                                  		;jmp	baddrive
 10891                                  
 10892                                  ; =============== S U B	R O U T	I N E =======================================
 10893                                  
 10894                                  ;--------------------------------------------------------------
 10895                                  ; set time of last access, and reset default values in the dpt.
 10896                                  ;
 10897                                  ;	  note: trashes (at least) si
 10898                                  ;--------------------------------------------------------------
 10899                                  
 10900                                  		; 19/10/2022
 10901                                  done:
 10902 00000981 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10903                                  					; fnon_removable
 10904 00000986 752F                    		jnz	short ddbx	; do not set for non-removable media
 10905 00000988 E84002                  		call	set_tim
 10906                                  ;diddleback:
 10907                                  ; 09/12/2022
 10908                                  diddle_back:
 10909 0000098B 9C                      		pushf
 10910 0000098C 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10911 00000991 7523                    		jnz	short nodiddleback
 10912 00000993 50                      		push	ax
 10913 00000994 06                      		push	es
 10914 00000995 C436[2D01]              		les	si, [dpt]
 10915 00000999 A0[2B01]                		mov	al, [save_eot]
 10916 0000099C 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10917 000009A0 A0[2701]                		mov	al, [settlecurrent]
 10918 000009A3 8A26[2601]              		mov	ah, [motorstartup]
 10919 000009A7 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10920 000009AB 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10921 000009B0 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10922 000009B4 07                      		pop	es
 10923 000009B5 58                      		pop	ax
 10924                                  nodiddleback:
 10925 000009B6 9D                      		popf
 10926                                  ddbx:
 10927                                  skip_dpt_setting:	; 22/12/2023
 10928 000009B7 C3                      		retn
 10929                                  
 10930                                  ; =============== S U B	R O U T	I N E =======================================
 10931                                  
 10932                                  ;--------------------------------------------------------------
 10933                                  ; set the drive-last-accessed flag for diskette only.
 10934                                  ; we know that the hard disk will not be removed.
 10935                                  ; es:di -> current bds.
 10936                                  ; ds -> Bios_Data
 10937                                  ; ax,cx,si are destroyed.
 10938                                  ;--------------------------------------------------------------
 10939                                  
 10940                                  		; 23/12/2023
 10941                                  		; 19/10/2022
 10942                                  iosetup:
 10943 000009B8 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10944 000009BC A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10945                                  
 10946                                  ; determine proper head settle values
 10947                                  
 10948 000009BF 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 10949 000009C4 75F1                    		jnz	short skip_dpt_setting
 10950 000009C6 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10951 000009C9 1E                      		push	ds
 10952 000009CA C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10953 000009CE 884404                  		mov	[si+4],	al
 10954                                  		; 23/12/2023
 10955 000009D1 88C4                    		mov	ah, al
 10956 000009D3 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10957                                  		;mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10958 000009D6 1F                      		pop	ds
 10959 000009D7 A2[2601]                		mov	[motorstartup], al
 10960 000009DA 8826[2B01]              		mov	[save_eot], ah
 10961                                  
 10962                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10963                                  ; motor start time to 4. this checking for every i/o is going to affect
 10964                                  ; performance across the board, but is necessary!!
 10965                                  
 10966 000009DE 1E                      		push	ds
 10967 000009DF C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10968 000009E3 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10969                                  					; ffSmall
 10970 000009E8 7505                    		jnz	short motor_start_ok
 10971 000009EA B004                    		mov	al, 4
 10972 000009EC 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10973                                  motor_start_ok:
 10974                                  
 10975                                  ; ds:si now points to disk parameter table.
 10976                                  ; get current settle and set fast settle
 10977                                  
 10978                                  		;xor	al, al
 10979                                  		;inc	al		; ibm wants fast settle	to be 1
 10980                                  		; 18/12/2022
 10981 000009EF 31C0                    		xor	ax, ax
 10982 000009F1 40                      		inc	ax
 10983 000009F2 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10984                                  					; get settle and set up	for fast
 10985 000009F5 1F                      		pop	ds
 10986 000009F6 A2[2701]                		mov	[settlecurrent], al
 10987 000009F9 B00F                    		mov	al, 15		; NORMSETTLE
 10988                                  					; someone has diddled the settle
 10989 000009FB A2[2801]                		mov	[settleslow], al
 10990                                  		; 22/12/2023
 10991                                  ;skip_dpt_setting:
 10992 000009FE C3                      		retn
 10993                                  
 10994                                  ; =============== S U B	R O U T	I N E =======================================
 10995                                  
 10996                                  ;--------------------------------------------------------------
 10997                                  ;read the number of sectors specified in ax,
 10998                                  ;handling track boundaries
 10999                                  ;es:di -> bds for this drive
 11000                                  ;--------------------------------------------------------------
 11001                                  
 11002                                  		; 23/12/2023
 11003                                  		; 19/10/2022
 11004                                  block:
 11005 000009FF 09C0                    		or	ax, ax
 11006 00000A01 74B4                    		jz	short ddbx
 11007 00000A03 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 11008                                  					; fnon_removable
 11009 00000A08 740D                    		jz	short block_floppy ;
 11010                                  
 11011                                  ; check	to see if multi	track operation	is allowed. if not
 11012                                  ; we have to go	to the block_floppy below to break up the operation.
 11013                                  
 11014 00000A0A F606[2605]80            		test	byte [multrk_flag], 80h
 11015                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 11016 00000A0F 7406                    		jz	short block_floppy
 11017 00000A11 E82800                  		call	Disk
 11018 00000A14 31C0                    		xor	ax, ax
 11019 00000A16 C3                      		retn
 11020                                  ; ---------------------------------------------------------------------------
 11021                                  
 11022                                  block_floppy:
 11023                                  
 11024                                  ; read at most 1 track worth. perform minimization at sector / track
 11025                                  				
 11026 00000A17 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 11027                                  		;inc	cl
 11028                                  		; 23/12/2023
 11029 00000A1B 41                      		inc	cx
 11030 00000A1C 2A0E[3101]              		sub	cl, [cursec]
 11031 00000A20 30ED                    		xor	ch, ch
 11032 00000A22 39C8                    		cmp	ax, cx
 11033 00000A24 7302                    		jnb	short gotmin
 11034 00000A26 89C1                    		mov	cx, ax
 11035                                  gotmin:
 11036                                  
 11037                                  ; ax is the requested number of sectors to read
 11038                                  ; cx is the number that we can do on this track
 11039                                  
 11040 00000A28 50                      		push	ax
 11041 00000A29 51                      		push	cx
 11042 00000A2A 89C8                    		mov	ax, cx
 11043 00000A2C E80D00                  		call	Disk
 11044 00000A2F 59                      		pop	cx
 11045 00000A30 58                      		pop	ax
 11046                                  
 11047                                  ; cx is the number of sectors just transferred
 11048                                  
 11049 00000A31 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 11050 00000A33 D0E1                    		shl	cl, 1
 11051 00000A35 00CF                    		add	bh, cl		; adjust transfer address
 11052 00000A37 EBC6                    		jmp	short block
 11053                                  dskerr_brdg:
 11054 00000A39 E9EA00                  		jmp	dskerr
 11055                                  
 11056                                  ; =============== S U B	R O U T	I N E =======================================
 11057                                  
 11058                                  ; 15/10/2022
 11059                                  
 11060                                  ;--------------------------------------------------------------
 11061                                  ;perform disk i/o with retries
 11062                                  ; al = number of sectors (1-8, all on one track)
 11063                                  ; es:di point to drive parameters
 11064                                  ; xfer_seg:bx = transfer address 
 11065                                  ;		(must not cross a 64k physical boundary)
 11066                                  ; [rflag] = 2 if read, 3 if write
 11067                                  ; [verify] = 0 for normal, 1 for verify after write
 11068                                  ;--------------------------------------------------------------
 11069                                  
 11070                                  		; 18/04/2024
 11071                                  		; 23/12/2023
 11072                                  		; 19/10/2022
 11073                                  Disk:
 11074                                  
 11075                                  ; Check for hard disk format and
 11076                                  ; if TRUE then set max error count to 2
 11077                                  
 11078 00000A3C BD0500                  		mov	bp, 5		; MAXERR
 11079                                  					; set up retry count
 11080                                  		;; 23/12/2023
 11081                                  		;mov	cl, [es:di+23h]
 11082                                  		;and	cx, 1
 11083                                  		; 18/04/2024
 11084 00000A3F 26F6452301              		test	byte [es:di+23h], 1
 11085                                  					; [es:di+BDS.flags], fnon_removable
 11086 00000A44 7408                    		jz	short GetRdWrInd
 11087 00000A46 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 11088 00000A49 7403                    		jz	short GetRdWrInd
 11089 00000A4B BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 11090                                  GetRdWrInd:				
 11091 00000A4E 892E[2905]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 11092 00000A52 892E[2B05]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 11093 00000A56 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 11094                                  ;retry:
 11095                                  ; 09/12/2022
 11096                                  _retry:
 11097 00000A5A 50                      		push	ax
 11098 00000A5B 8B16[3301]              		mov	dx, [curtrk]
 11099                                  		
 11100                                  		;; 23/12/2023
 11101                                  		;jcxz	disk_not_mini
 11102                                  		; 18/04/2024
 11103 00000A5F 26F6452301              		test	byte [es:di+23h], 1
 11104 00000A64 740B                    		jz	short disk_not_mini
 11105                                  		
 11106 00000A66 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 11107                                  					; is this a mini disk? ((logical dos partition))
 11108 00000A6B 7504                    		jnz	short disk_not_mini ; no. continue to next.
 11109 00000A6D 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 11110                                  					; add hidden trks.
 11111                                  disk_not_mini:
 11112 00000A71 D0CE                    		ror	dh, 1
 11113 00000A73 D0CE                    		ror	dh, 1
 11114 00000A75 0A36[3101]              		or	dh, [cursec]
 11115 00000A79 89D1                    		mov	cx, dx
 11116 00000A7B 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 11117 00000A7D 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 11118 00000A81 268A5504                		mov	dl, [es:di+4]	; physical drive number
 11119                                  					; [es:di+BDS.drivenum]
 11120 00000A85 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 11121 00000A8A 7411                    		jz	short do_fast	; hard files use fast speed
 11122                                  
 11123                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 11124                                  ; this helps when we have just done a reset disk operation and the head has
 11125                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 11126                                  
 11127 00000A8C 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 11128                                  		;jz	short do_writej
 11129                                  		; 23/12/2023
 11130 00000A91 7460                    		jz	short do_write
 11131 00000A93 80FC02                  		cmp	ah, 2		; romread
 11132 00000A96 7405                    		jz	short do_fast
 11133 00000A98 80FC04                  		cmp	ah, 4		; romverify
 11134                                  		;jz	short do_fast
 11135                                  		; 23/12/2023
 11136 00000A9B 7556                    		jnz	short do_write
 11137                                  ;do_writej:
 11138                                  
 11139                                  ; reads always fast, unless we have just done a disk reset operation
 11140                                  			
 11141                                  		;jmp	short do_write	; reads	always fast
 11142                                  ; ---------------------------------------------------------------------------
 11143                                  
 11144                                  do_fast:
 11145 00000A9D E8FB00                  		call	fastspeed	; change settle	mode
 11146                                  testerr:
 11147 00000AA0 7297                    		jb	short dskerr_brdg
 11148                                  
 11149                                  ; set drive and track of last access
 11150                                  
 11151 00000AA2 8816[7600]              		mov	[step_drv], dl
 11152 00000AA6 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 11153                                  no_set:
 11154                                  		;cmp	word [wrtverify], 103h
 11155 00000AAA 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 11156 00000AB0 7452                    		jz	short doverify
 11157                                  noverify:
 11158 00000AB2 58                      		pop	ax
 11159                                  
 11160                                  ; check the flags word in the bds to see if the drive is non removable
 11161                                  ; if not we needn't do anything special
 11162                                  ; if it is a hard disk then check to see if multi-track operation
 11163                                  ; is specified. if specified we don't have to calculate for the next
 11164                                  ; track since we are already done. so we can go to the exit of this routine.
 11165                                  
 11166 00000AB3 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 11167                                  					; fnon_removable
 11168 00000AB8 7407                    		jz	short its_removable
 11169 00000ABA F606[2605]80            		test	byte [multrk_flag], 80h ; multrk_on
 11170 00000ABF 7530                    		jnz	short disk_ret
 11171                                  its_removable:
 11172 00000AC1 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 11173 00000AC4 30E4                    		xor	ah, ah
 11174 00000AC6 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 11175 00000ACA 00C1                    		add	cl, al
 11176 00000ACC 880E[3101]              		mov	[cursec], cl
 11177 00000AD0 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11178                                  					; see if sector/track limit reached
 11179 00000AD4 761B                    		jbe	short disk_ret
 11180 00000AD6 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 11181 00000ADB 8A36[3201]              		mov	dh, [curhd]
 11182 00000ADF FEC6                    		inc	dh
 11183 00000AE1 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 11184 00000AE5 7206                    		jb	short noxor
 11185 00000AE7 30F6                    		xor	dh, dh
 11186 00000AE9 FF06[3301]              		inc	word [curtrk]
 11187                                  noxor:
 11188 00000AED 8836[3201]              		mov	[curhd], dh
 11189                                  disk_ret:
 11190 00000AF1 F8                      		clc
 11191 00000AF2 C3                      		retn
 11192                                  ; ---------------------------------------------------------------------------
 11193                                  
 11194                                  ; 15/10/2022
 11195                                  
 11196                                  ;--------------------------------------------------------------
 11197                                  ; the request is for write. determine if we are talking about
 11198                                  ; the same track and drive. if so, use the fast speed.
 11199                                  ;--------------------------------------------------------------
 11200                                  
 11201                                  do_write:
 11202 00000AF3 3A16[7600]              		cmp	dl, [step_drv]
 11203 00000AF7 7506                    		jnz	short do_norm	; we have changed drives
 11204 00000AF9 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 11205 00000AFD 749E                    		jz	short do_fast	; we are still on the same track
 11206                                  do_norm:
 11207 00000AFF E87500                  		call	normspeed
 11208 00000B02 EB9C                    		jmp	short testerr
 11209                                  ; ---------------------------------------------------------------------------
 11210                                  
 11211                                  ;--------------------------------------------------------------
 11212                                  ; we have a verify request also. get state info and go verify
 11213                                  ;--------------------------------------------------------------
 11214                                  
 11215                                  doverify:
 11216 00000B04 58                      		pop	ax
 11217 00000B05 50                      		push	ax
 11218 00000B06 B404                    		mov	ah, 4
 11219 00000B08 E89000                  		call	fastspeed
 11220 00000B0B 73A5                    		jnb	short noverify
 11221                                  
 11222                                  ; check the error returned in ah to see if it is a soft ecc error.
 11223                                  ; if it is not we needn't do anything special. if it is a soft
 11224                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 11225                                  ; this retry count becomes 0 then we just ignore the error and go to
 11226                                  ; no_verify but if we can still try then we call the routine to reset
 11227                                  ; the disk and go to dskerr1 to retry the operation.
 11228                                  
 11229 00000B0D 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 11230 00000B10 750B                    		jnz	short not_softecc_err
 11231 00000B12 FF0E[2B05]              		dec	word [soft_ecc_cnt]
 11232 00000B16 749A                    		jz	short noverify	; no more retry
 11233 00000B18 E83305                  		call	ResetDisk	; reset	disk
 11234 00000B1B EB3E                    		jmp	short dskerr1	; retry
 11235                                  ; ---------------------------------------------------------------------------
 11236                                  
 11237                                  not_softecc_err:			; other error.
 11238 00000B1D E82E05                  		call	ResetDisk
 11239 00000B20 FF0E[2905]              		dec	word [vretry_cnt]
 11240 00000B24 EB1C                    		jmp	short dskerr0
 11241                                  ; ---------------------------------------------------------------------------
 11242                                  
 11243                                  ;--------------------------------------------------------------
 11244                                  ; need to special case the change-line error ah=06h.
 11245                                  ; if we get this, we need to return it.
 11246                                  ;--------------------------------------------------------------
 11247                                  
 11248                                  dskerr:
 11249 00000B26 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 11250 00000B2B 7403                    		jz	short dskerr_nochangeline ; brif not
 11251 00000B2D E8EB0C                  		call	checkio
 11252                                  dskerr_nochangeline:
 11253 00000B30 803E[2D05]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 11254 00000B35 7508                    		jnz	short dochkagain ; no more retry.
 11255 00000B37 BD0100                  		mov	bp, 1
 11256 00000B3A C606[2D05]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 11257                                  dochkagain:
 11258 00000B3F E8A900                  		call	again
 11259                                  dskerr0:
 11260 00000B42 7420                    		jz	short harderr
 11261 00000B44 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 11262                                  					; fnon_removable
 11263 00000B49 7505                    		jnz	short skip_timeout_chk
 11264 00000B4B 80FC80                  		cmp	ah, 80h		; timeout?
 11265 00000B4E 7414                    		jz	short harderr
 11266                                  skip_timeout_chk:
 11267 00000B50 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 11268 00000B53 740A                    		jz	short write_fault_err ;	then, don't retry.
 11269 00000B55 C706[2B05]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 11270                                  					; set soft_ecc_cnt back	to maxerr
 11271                                  dskerr1:
 11272 00000B5B 58                      		pop	ax		; restore sector count
 11273                                  		;jmp	retry
 11274                                  		; 09/12/2022
 11275 00000B5C E9FBFE                  		jmp	_retry
 11276                                  ; ---------------------------------------------------------------------------
 11277                                  
 11278                                  write_fault_err:
 11279 00000B5F BD0100                  		mov	bp, 1		; just retry only once
 11280                                  					; for write fault error.
 11281 00000B62 EBF7                    		jmp	short dskerr1
 11282                                  
 11283                                  		; fall into harderr
 11284                                  ; ---------------------------------------------------------------------------
 11285                                  
 11286                                  ; entry point for routines that call maperror themselves
 11287                                  
 11288                                  harderr:
 11289 00000B64 E84C00                  		call	maperror
 11290                                  harderr2:
 11291 00000B67 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 11292                                  					; force a media check through rom
 11293 00000B6C 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 11294 00000B70 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 11295                                  
 11296                                  ; since we are performing a non-local goto, restore the disk parameters
 11297                                  
 11298                                  		;jmp	diddleback
 11299                                  		; 09/12/2022
 11300 00000B74 E914FE                  		jmp	diddle_back
 11301                                  
 11302                                  ; =============== S U B	R O U T	I N E =======================================
 11303                                  
 11304                                  ; change settle value from settlecurrent to whatever is appropriate
 11305                                  ; note that this routine is never called for a fixed disk.
 11306                                  
 11307                                  		; 19/10/2022
 11308                                  normspeed:
 11309 00000B77 803E[2F06]00            		cmp	byte [media_set_for_format], 0
 11310 00000B7C 751D                    		jnz	short fastspeed
 11311 00000B7E 06                      		push	es
 11312 00000B7F 50                      		push	ax
 11313 00000B80 A0[2801]                		mov	al, [settleslow]
 11314 00000B83 C436[2D01]              		les	si, [dpt]	; current disk parm table
 11315 00000B87 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11316 00000B8B 58                      		pop	ax
 11317 00000B8C 07                      		pop	es
 11318 00000B8D E80B00                  		call	fastspeed
 11319                                  		; 24/12/2023
 11320                                  		;push	es
 11321                                  		;les	si, [dpt]
 11322                                  		;mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11323                                  		;			; 1 is fast settle value
 11324                                  		;pop	es
 11325 00000B90 1E                      		push	ds
 11326 00000B91 C536[2D01]              		lds	si, [dpt]
 11327 00000B95 C6440901                		mov	byte [si+9], 1
 11328 00000B99 1F                      		pop	ds
 11329                                  
 11330 00000B9A C3                      		retn
 11331                                  
 11332                                  ; =============== S U B	R O U T	I N E =======================================
 11333                                  
 11334                                  ; if the drive has been marked as too big (i.e. starting sector of the
 11335                                  ; partition is > 16 bits, then always return drive not ready.
 11336                                  
 11337                                  fastspeed:
 11338 00000B9B 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 11339                                  					; ftoobig
 11340 00000BA0 750D                    		jnz	short notready
 11341 00000BA2 06                      		push	es
 11342 00000BA3 8E06[2E05]              		mov	es, [xfer_seg]
 11343 00000BA7 CD13                    		int	13h		; DISK -
 11344 00000BA9 8C06[2E05]              		mov	[xfer_seg], es
 11345 00000BAD 07                      		pop	es
 11346 00000BAE C3                      		retn
 11347                                  ; ---------------------------------------------------------------------------
 11348                                  
 11349                                  notready:
 11350 00000BAF F9                      		stc
 11351 00000BB0 B480                    		mov	ah, 80h
 11352 00000BB2 C3                      		retn
 11353                                  
 11354                                  ; =============== S U B	R O U T	I N E =======================================
 11355                                  
 11356                                  ; map error returned by rom in ah into corresponding code to be returned to
 11357                                  ; dos in al. trashes di. guaranteed to set carry.
 11358                                  
 11359                                  maperror:
 11360 00000BB3 51                      		push	cx
 11361 00000BB4 06                      		push	es
 11362 00000BB5 1E                      		push	ds		; set es=Bios_Data
 11363 00000BB6 07                      		pop	es
 11364 00000BB7 88E0                    		mov	al, ah		; put error code in al
 11365 00000BB9 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 11366 00000BBC B90900                  		mov	cx, 9		; numerr (= errout-errin)
 11367                                  					; number of possible error conditions
 11368 00000BBF BF[3C01]                		mov	di, errin	; point to error conditions
 11369 00000BC2 F2AE                    		repne scasb
 11370                                  		; 10/12/2022
 11371 00000BC4 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 11372                                  					; get translation
 11373                                  		; 19/10/2022 - Temporary ! 
 11374                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 11375 00000BC7 07                      		pop	es
 11376 00000BC8 59                      		pop	cx
 11377 00000BC9 F9                      		stc			; flag error condition
 11378 00000BCA C3                      		retn
 11379                                  
 11380                                  ; =============== S U B	R O U T	I N E =======================================
 11381                                  
 11382                                  ; set the time of last access for this drive.
 11383                                  ; this is done only for removable media. es:di -> bds
 11384                                  
 11385                                  set_tim:
 11386 00000BCB 50                      		push	ax
 11387 00000BCC E8A7F8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 11388                                  
 11389                                  ; we have the new time. if we see that the time has passed,
 11390                                  ; then we reset the threshold counter...
 11391                                  
 11392 00000BCF 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 11393 00000BD3 7506                    		jnz	short setaccess
 11394 00000BD5 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 11395                                  		;jz	short done_set
 11396                                  		; 12/12/2022
 11397 00000BD9 740E                    		je	short done_set2
 11398                                  setaccess:
 11399 00000BDB C606[1D01]00            		mov	byte [accesscount], 0
 11400 00000BE0 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 11401 00000BE4 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 11402                                  done_set:
 11403 00000BE8 F8                      		clc
 11404                                  done_set2:		; 12/12/2022
 11405 00000BE9 58                      		pop	ax
 11406 00000BEA C3                      		retn
 11407                                  
 11408                                  ; =============== S U B	R O U T	I N E =======================================
 11409                                  
 11410                                  ; this routine is called if an error occurs while formatting or verifying.
 11411                                  ; it resets the drive,and decrements the retry count.
 11412                                  ; on entry - ds:di - points to bds for the drive
 11413                                  ;	     bp    - contains retry count
 11414                                  ; on exit    flags indicate result of decrementing retry count
 11415                                  
 11416                                  again:
 11417 00000BEB E86004                  		call	ResetDisk
 11418 00000BEE 80FC06                  		cmp	ah, 6
 11419 00000BF1 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 11420                                  					; do not decrement retry count.
 11421 00000BF3 4D                      		dec	bp		; decrement retry count
 11422 00000BF4 C3                      		retn
 11423                                  ; ---------------------------------------------------------------------------
 11424                                  
 11425                                  dont_dec_retry_count:
 11426 00000BF5 08E4                    		or	ah, ah
 11427 00000BF7 C3                      		retn
 11428                                  
 11429                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 11430                                  
 11431                                  ;----------------------------------------------------------------------------
 11432                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 11433                                  ;----------------------------------------------------------------------------
 11434                                  ; 11/03/2019 - Retro DOS v4.0
 11435                                  
 11436                                  ; 18/03/2019
 11437                                  
 11438                                  ; ==========================================================================
 11439                                  ;
 11440                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 11441                                  ;
 11442                                  ;      This function is intended to give the user to control the
 11443                                  ;      bds table flags of unformatted_media bit.
 11444                                  ;      GetAccessFlag will show the status -
 11445                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 11446                                  ;						1 disk i/o allowed
 11447                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 11448                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 11449                                  ;						1 disallow disk i/o
 11450                                  ; ==========================================================================
 11451                                  
 11452                                  		; generic ioctl dispatch tables
 11453                                  
 11454                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 11455                                  
 11456                                  ; ---------------------------------------------------------------------------
 11457 00000BF8 00                      		db 0
 11458                                  
 11459                                  ; 09/12/2022 
 11460                                  %if 0
 11461                                  
 11462                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 11463                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 11464                                  		dw 0EE8h	; 61h	; ReadTrack
 11465                                  		dw 0E86h	; 62h	; VerifyTrack
 11466                                  		dw 0CA3h	 	; Cmd_Error_Proc
 11467                                  		dw 0CA3h		; Cmd_Error_Proc
 11468                                  		dw 0CA3h		; Cmd_Error_Proc
 11469                                  		dw 119Ah	; 66h	; GetMediaId
 11470                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 11471                                  		dw 12C1h	; 68h	; SenseMediaType
 11472                                  
 11473                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 11474                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 11475                                  		dw 0EEFh	; 41h	; WriteTrack
 11476                                  		dw 0DC1h	; 42h	; FormatTrack
 11477                                  		dw 0CA3h		; Cmd_Error_Proc
 11478                                  		dw 0CA3h		; Cmd_Error_Proc
 11479                                  		dw 0CA3h		; Cmd_Error_Proc
 11480                                  		dw 11D2h	; 46h	; SetMediaId
 11481                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 11482                                  
 11483                                  %endif
 11484                                  
 11485                                  		; 09/12/2022
 11486 00000BF9 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 11487 00000BFA [640C]                  		dw GetDeviceParameters	; 60h
 11488 00000BFC [A60E]                  		dw ReadTrack		; 61h
 11489 00000BFE [460E]                  		dw VerifyTrack		; 62h
 11490 00000C00 [600C]                  		dw Cmd_Error_Proc
 11491 00000C02 [600C]                  		dw Cmd_Error_Proc
 11492 00000C04 [600C]                  		dw Cmd_Error_Proc
 11493 00000C06 [2511]                  		dw GetMediaId		; 66h
 11494 00000C08 [EB11]                  		dw GetAccessFlag	; 67h ; unpublished function
 11495 00000C0A [3C12]                  		dw SenseMediaType	; 68h
 11496                                  
 11497 00000C0C 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 11498 00000C0D [AF0C]                  		dw SetDeviceParameters	; 40h
 11499 00000C0F [AD0E]                  		dw WriteTrack		; 41h
 11500 00000C11 [820D]                  		dw FormatTrack		; 42h
 11501 00000C13 [600C]                  		dw Cmd_Error_Proc
 11502 00000C15 [600C]                  		dw Cmd_Error_Proc
 11503 00000C17 [600C]                  		dw Cmd_Error_Proc
 11504 00000C19 [5B11]                  		dw SetMediaId		; 46h
 11505 00000C1B [0012]                  		dw SetAccessFlag	; 47h ; unpublished function
 11506                                  
 11507                                  ; ==========================================================================
 11508                                  ; IOC_DC_Table
 11509                                  ;
 11510                                  ; This table contains all of the valid generic IOCtl Minor codes for
 11511                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 11512                                  ; Added for 5.00
 11513                                  ; ==========================================================================
 11514                                  
 11515 00000C1D 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 11516 00000C1E 40                      		db 40h			; SET_DEVICE_PARAMETERS
 11517 00000C1F 61                      		db 61h			; READ_TRACK
 11518 00000C20 41                      		db 41h			; WRITE_TRACK
 11519 00000C21 62                      		db 62h			; VERIFY_TRACK
 11520 00000C22 42                      		db 42h			; FORMAT_TRACK
 11521 00000C23 66                      		db 66h			; GET_MEDIA_ID
 11522 00000C24 46                      		db 46h			; SET_MEDIA_ID
 11523 00000C25 67                      		db 67h			; GET_ACCESS_FLAG
 11524 00000C26 47                      		db 47h			; SET_ACCESS_FLAG
 11525 00000C27 68                      		db 68h			; SENSE_MEDIA_TYPE
 11526                                  
 11527                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 11528                                  
 11529                                  ; ---------------------------------------------------------------------------
 11530                                  
 11531                                  ; 16/10/2022
 11532                                  
 11533                                  ; ==========================================================================
 11534                                  ; Do_Generic_IOCtl: perform generic ioctl request
 11535                                  ;
 11536                                  ;    input: AL contains logical drive
 11537                                  ;
 11538                                  ;	functions are dispatched through a call. On return, carry indicates
 11539                                  ;	error code in al. Note::bES:b& ds undefined on return from
 11540                                  ;	subfunctions.
 11541                                  ;
 11542                                  ; ==========================================================================
 11543                                  
 11544                                  ; 11/03/2019
 11545                                  		; 19/10/2022
 11546                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 11547 00000C28 E89BF8                  		call	SetDrive	; ES:DI	Points to bds for drive
 11548 00000C2B 06                      		push	es
 11549 00000C2C C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 11550 00000C30 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 11551                                  					; RAWIO
 11552 00000C35 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 11553 00000C39 07                      		pop	es
 11554 00000C3A 7525                    		jnz	short IoctlFuncErr
 11555                                  
 11556                                  		; cas note: Could do the above two blocks in reverse order.
 11557                                  		; Would have to preserve al for SetDrive
 11558                                  
 11559                                  		; 10/12/2022
 11560 00000C3C BE[F90B]                		mov	si, IoReadJumpTable
 11561                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 11562                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 11563 00000C3F A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 11564 00000C41 7503                    		jnz	short NotGenericWrite ; function is a read.
 11565                                  		; 10/12/2022
 11566 00000C43 BE[0C0C]                		mov	si, IoWriteJumpTable
 11567                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 11568                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 11569                                  NotGenericWrite:			
 11570 00000C46 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 11571 00000C48 2C40                    		sub	al, 40h		; offset for base function
 11572 00000C4A 2E3A04                  		cmp	al, [cs:si]
 11573 00000C4D 7712                    		ja	short IoctlFuncErr
 11574 00000C4F 98                      		cbw
 11575 00000C50 D1E0                    		shl	ax, 1
 11576 00000C52 46                      		inc	si
 11577 00000C53 01C6                    		add	si, ax
 11578 00000C55 2EFF14                  		call	near [cs:si]
 11579                                  		;call	word ptr cs:[si]
 11580 00000C58 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11581                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11582                                  					; 2C7h:30h = 70h:25A0h
 11583 00000C5D B481                    		mov	ah, 81h		; Return this status in	case of	carry
 11584 00000C5F C3                      		retn			; Pass carry flag through to exit code
 11585                                  ; ---------------------------------------------------------------------------
 11586                                  
 11587                                  		; Cmd_Error_Proc is called as a procedure and also use
 11588                                  		; as a fall through from above
 11589                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 11590 00000C60 5A                      		pop	dx
 11591                                  
 11592                                  IoctlFuncErr:				
 11593 00000C61 E971F4                  		jmp	bc_cmderr
 11594                                  ; ---------------------------------------------------------------------------
 11595                                  
 11596                                  ; 16/10/2022
 11597                                  
 11598                                  ; ==========================================================================
 11599                                  ;**	GetDeviceParameters:
 11600                                  ;
 11601                                  ;	GetDeviceParameters implements the generic ioctl function:
 11602                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 11603                                  ;
 11604                                  ;	ENTRY	(ES:di) = BDS for drive
 11605                                  ;		PtrSav = long pointer to request header
 11606                                  ;	EXIT	??? BUGBUG
 11607                                  ;	USES	??? BUGBUG
 11608                                  ; ==========================================================================
 11609                                  
 11610                                  		; 19/10/2022
 11611                                  GetDeviceParameters:
 11612                                  		; Copy info from bds to the device parameters packet
 11613                                  
 11614 00000C64 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11615 00000C68 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11616                                  					; (DS:BX) = return buffer
 11617 00000C6B 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 11618 00000C6F 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11619 00000C72 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 11620 00000C76 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 11621                                  					; Mask off other bits
 11622 00000C79 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11623 00000C7C 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 11624 00000C80 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11625 00000C83 30C0                    		xor	al, al		; Set media type to default
 11626 00000C85 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11627                                  					
 11628                                  		; copy recommended bpb
 11629 00000C88 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 11630 00000C8B F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11631                                  					; BUILD_DEVICE_BPB
 11632 00000C8E 7412                    		jz	short UseBpbPresent
 11633 00000C90 1E                      		push	ds		; Save request packet segment
 11634 00000C91 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11635                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11636                                  					; 2C7h:30h = 70h:25A0h
 11637                                  					; Point back to Bios_Data
 11638 00000C96 E893FB                  		call	checksingle
 11639 00000C99 E857F9                  		call	GetBp		; Build	the bpb	from scratch
 11640 00000C9C 1F                      		pop	ds		; Restore request packet segment
 11641 00000C9D 720F                    		jb	short GetParmRet
 11642 00000C9F 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 11643                                  					; Use this subfield of bds instead
 11644                                  UseBpbPresent:				
 11645 00000CA2 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11646                                  					; This is where	the result goes
 11647 00000CA5 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11648                                  					; For now use 'small' bpb
 11649 00000CA8 1E                      		push	ds		; reverse segments for copy
 11650 00000CA9 06                      		push	es
 11651 00000CAA 1F                      		pop	ds
 11652 00000CAB 07                      		pop	es
 11653 00000CAC F3A4                    		rep movsb
 11654                                  		
 11655                                  		; 12/12/2022
 11656                                  		; cf=0 (test instruction -above- resets cf) 	
 11657                                  		;clc
 11658                                  GetParmRet:				
 11659 00000CAE C3                      		retn
 11660                                  ; ---------------------------------------------------------------------------
 11661                                  
 11662                                  ; 17/10/2022
 11663                                  ; 16/10/2022
 11664                                  
 11665                                  ; ==========================================================================
 11666                                  ; SetDeviceParameters:
 11667                                  ;
 11668                                  ; input: ES:di points to bds for drive
 11669                                  ; ==========================================================================
 11670                                  
 11671                                  		; 19/10/2022
 11672                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 11673 00000CAF C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 11674 00000CB3 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11675 00000CB6 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 11676                                  					; fchanged_by_format|fchanged
 11677 00000CBC F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11678                                  					; ONLY_SET_TRACKLAYOUT
 11679 00000CBF 7579                    		jnz	short setTrackTable
 11680 00000CC1 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 11681 00000CC4 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 11682 00000CC8 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 11683 00000CCB 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 11684 00000CCF 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 11685 00000CD2 1E                      		push	ds
 11686                                  		; 17/10/2022
 11687 00000CD3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11688                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11689                                  					; 2C7h:30h = 70h:25A0h
 11690                                  		;cmp	byte [fhave96], 0
 11691 00000CD8 803E[7700]00            		cmp	byte [fhave96], 0
 11692 00000CDD 1F                      		pop	ds
 11693 00000CDE 7502                    		jnz	short HaveChange ; we have changeline support
 11694                                  		; 10/12/2022
 11695 00000CE0 24FD                    		and	al, 0FDh
 11696                                  		;and	ax, 0FFFDh	; ~fchangeline
 11697                                  
 11698                                  		; Ignore all bits except non_removable and changeline
 11699                                  HaveChange:				
 11700 00000CE2 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 11701 00000CE5 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 11702 00000CE9 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 11703 00000CED 09C8                    		or	ax, cx
 11704 00000CEF 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 11705 00000CF3 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 11706                                  					; Set media type
 11707 00000CF6 1E                      		push	ds
 11708 00000CF7 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11709                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11710 00000CFC A2[2E06]                		mov	[mediatype], al
 11711                                  		;mov	ds:mediatype, al
 11712 00000CFF 1F                      		pop	ds
 11713                                  
 11714                                  		; The media changed (maybe) so we will have to do a set dasd
 11715                                  		; the next time we format a track
 11716                                  
 11717                                  		; 10/12/2022
 11718 00000D00 26804D2380              		or	byte [es:di+35], 80h
 11719                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 11720                                  					; set_dasd_true
 11721 00000D05 57                      		push	di		; Save bds pointer
 11722                                  
 11723                                  		; Figure out what we are supposed to do with the bpb
 11724                                  		; were we asked to install a fake bpb?
 11725                                  
 11726 00000D06 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11727                                  					; INSTALL_FAKE_BPB
 11728 00000D09 7514                    		jnz	short InstallFakeBpb
 11729                                  
 11730                                  		; were we returning a fake bpb when asked to build a bpb?
 11731                                  
 11732                                  		; 10/12/2022
 11733 00000D0B 26F6452304              		test	byte [es:di+35], 4
 11734                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 11735                                  					; return_fake_bpb
 11736 00000D10 7405                    		jz	short InstallRecommendedBpb
 11737                                  
 11738                                  		; we were returning a fake bpb but we can stop now
 11739                                  
 11740                                  		; 10/12/2022
 11741 00000D12 26806523FB              		and	byte [es:di+35], 0FBh
 11742                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11743                                  					; ~return_fake_bpb
 11744                                  InstallRecommendedBpb:			
 11745 00000D17 B91F00                  		mov	cx, 31		; A_BPB.size
 11746 00000D1A 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11747 00000D1D EB0B                    		jmp	short CopyTheBpb
 11748                                  ; ---------------------------------------------------------------------------
 11749                                  
 11750                                  InstallFakeBpb:
 11751                                  		; 10/12/2022
 11752 00000D1F 26804D2304              		or	byte [es:di+35], 4				
 11753                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11754                                  					; return_fake_bpb
 11755 00000D24 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11756                                  					; move 'smaller' bpb
 11757 00000D27 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11758                                  
 11759                                  CopyTheBpb:				
 11760 00000D2A 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11761 00000D2D F3A4                    		rep movsb
 11762 00000D2F 1E                      		push	ds		; Save packet segment
 11763                                  		; 17/10/2022
 11764 00000D30 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11765                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11766                                  					; Setup	for ds -> Bios_Data
 11767 00000D35 E8C503                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11768 00000D38 1F                      		pop	ds		; Restore packet segment
 11769 00000D39 5F                      		pop	di		; Restore bds pointer
 11770                                  setTrackTable:				
 11771 00000D3A 8B4F26                  		mov	cx, [bx+38]
 11772 00000D3D 1E                      		push	ds
 11773 00000D3E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11774 00000D43 890E[3005]              		mov	[sectorspertrack], cx
 11775 00000D47 1F                      		pop	ds
 11776                                  		; 10/12/2022
 11777 00000D48 26806523F7              		and	byte [es:di+35], 0F7h
 11778                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11779                                  					; ~good_tracklayout
 11780 00000D4D F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11781                                  					; TRACKLAYOUT_IS_GOOD
 11782 00000D50 7405                    		jz	short UglyTrackLayOut
 11783                                  		; 10/12/2022
 11784 00000D52 26804D2308              		or	byte [es:di+35], 8
 11785                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11786                                  					; good_tracklayout
 11787                                  UglyTrackLayOut:			
 11788 00000D57 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11789 00000D5A 7722                    		ja	short TooManyPerTrack
 11790                                  		;jcxz	short SectorInfoSaved
 11791 00000D5C E31E                    		jcxz	SectorInfoSaved	; 19/10/2022
 11792 00000D5E BF[3205]                		mov	di, tracktable
 11793 00000D61 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11794                                  		; 17/10/2022
 11795 00000D64 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11796                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11797                                  					; Trash	our bds	pointer
 11798                                  StoreSectorInfo:
 11799 00000D69 47                      		inc	di
 11800 00000D6A 47                      		inc	di		; Skip over cylinder and head
 11801 00000D6B AD                      		lodsw			; Get sector id
 11802 00000D6C AA                      		stosb			; Copy it
 11803 00000D6D AD                      		lodsw			; Get sector size
 11804                                  		
 11805                                  		; 02/09/2023 (PCDOS 7.1)
 11806                                  		;call	SectSizeToSectIndex
 11807 00000D6E 80FC03                  		cmp	ah, 3 ; 02/09/2023
 11808                                  		;cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11809                                  					; examine upper	byte only
 11810 00000D71 7704                    		ja	short OneK
 11811 00000D73 88E0                    		mov	al, ah		; value	in AH is the index!
 11812 00000D75 EB02                    		jmp	short sdp_s
 11813                                  OneK:
 11814 00000D77 B003                    		mov	al, 3
 11815                                  sdp_s:
 11816 00000D79 AA                      		stosb			; Store	sector SIZE index
 11817 00000D7A E2ED                    		loop	StoreSectorInfo
 11818                                  SectorInfoSaved:
 11819 00000D7C F8                      		clc
 11820 00000D7D C3                      		retn
 11821                                  ; ---------------------------------------------------------------------------
 11822                                  
 11823                                  TooManyPerTrack:			
 11824 00000D7E B00C                    		mov	al, 0Ch
 11825 00000D80 F9                      		stc
 11826 00000D81 C3                      		retn
 11827                                  ; ---------------------------------------------------------------------------
 11828                                  
 11829                                  ; 16/10/2022
 11830                                  
 11831                                  ; ==========================================================================
 11832                                  ; FormatTrack:
 11833                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11834                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11835                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11836                                  ;
 11837                                  ; input: ES:di points to bds for drive
 11838                                  ;
 11839                                  ; output:
 11840                                  ;	for status call:
 11841                                  ;	specialfunction byte set to:
 11842                                  ;		0 - rom support + legal combination
 11843                                  ;		1 - no rom support
 11844                                  ;		2 - illegal combination
 11845                                  ;		3 - no media present
 11846                                  ;	carry cleared.
 11847                                  ;
 11848                                  ;	for format track:
 11849                                  ;		carry set if error
 11850                                  ;
 11851                                  ; ==========================================================================
 11852                                  
 11853                                  ; 16/03/2019
 11854                                  
 11855                                  		; 19/10/2022
 11856                                  FormatTrack:
 11857 00000D82 C51E[1200]              		lds	bx, [ptrsav]
 11858 00000D86 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11859 00000D89 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11860                                  					; STATUS_FOR_FORMAT
 11861 00000D8C 740E                    		jz	short DoFormatTrack
 11862 00000D8E 1E                      		push	ds
 11863                                  		; 17/10/2022
 11864 00000D8F 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11865                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11866 00000D94 E82302                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11867 00000D97 1F                      		pop	ds
 11868 00000D98 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11869 00000D9A F8                      		clc
 11870 00000D9B C3                      		retn
 11871                                  ; ---------------------------------------------------------------------------
 11872                                  
 11873                                  DoFormatTrack:				
 11874 00000D9C 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11875                                  					; DEV_HARDDISK
 11876 00000DA1 7508                    		jnz	short DoFormatDiskette
 11877                                  		; 17/10/2022
 11878 00000DA3 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11879                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11880                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11881 00000DA8 E99B00                  		jmp	VerifyTrack
 11882                                  ; ---------------------------------------------------------------------------
 11883                                  
 11884                                  DoFormatDiskette:			
 11885 00000DAB 8B4F01                  		mov	cx, [bx+1]
 11886 00000DAE 8B5703                  		mov	dx, [bx+3]
 11887 00000DB1 F60702                  		test	byte [bx], 2
 11888                                  		; 17/10/2022
 11889 00000DB4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11890                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11891                                  					; Setup	ds-> Bios_Data for verify
 11892 00000DB9 7403                    		jz	short DoFormatDiskette_1
 11893 00000DBB E9E300                  		jmp	VerifyTrack_Err
 11894                                  ; ---------------------------------------------------------------------------
 11895                                  
 11896                                  DoFormatDiskette_1:			
 11897 00000DBE E8F901                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11898 00000DC1 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11899 00000DC3 7406                    		jz	short NeedToSetDasd ; Old rom
 11900 00000DC5 3C03                    		cmp	al, 3		; Time out error?
 11901 00000DC7 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11902                                  					; about	the illegal combination)
 11903 00000DC9 EB66                    		jmp	short FormatFailed
 11904                                  ; ---------------------------------------------------------------------------
 11905                                  
 11906                                  NeedToSetDasd:				
 11907 00000DCB 52                      		push	dx
 11908 00000DCC E88E01                  		call	SetDasd		; INT 13h, AH=17h
 11909 00000DCF 5A                      		pop	dx
 11910                                  NoSetDasd:				
 11911 00000DD0 E859FA                  		call	checksingle	; Do any needed	diskette swapping
 11912 00000DD3 89D0                    		mov	ax, dx		; Get track from packet
 11913 00000DD5 A3[3901]                		mov	[trknum], ax
 11914 00000DD8 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11915 00000DDC 88CC                    		mov	ah, cl
 11916 00000DDE BB[3205]                		mov	bx, tracktable
 11917 00000DE1 8B0E[3005]              		mov	cx, [sectorspertrack]
 11918                                  
 11919                                  StoreCylinderHead:			
 11920 00000DE5 8907                    		mov	[bx], ax	; Store	into TrackTable
 11921 00000DE7 83C304                  		add	bx, 4		; Skip to next sector field
 11922 00000DEA E2F9                    		loop	StoreCylinderHead
 11923                                  		;mov	cx, 5		; MAXERR - Set up retry	count
 11924                                  		; 02/09/2023
 11925 00000DEC B105                    		mov	cl, 5
 11926                                  FormatRetry:				
 11927 00000DEE 51                      		push	cx
 11928 00000DEF BB[3205]                		mov	bx, tracktable
 11929 00000DF2 A0[3005]                		mov	al, [sectorspertrack]
 11930 00000DF5 B405                    		mov	ah, 5		; romformat
 11931 00000DF7 8C1E[2E05]              		mov	[xfer_seg], ds
 11932 00000DFB E86602                  		call	ToRom
 11933 00000DFE 59                      		pop	cx
 11934 00000DFF 7216                    		jb	short FormatError
 11935 00000E01 51                      		push	cx		; Now verify the sectors just formatted.
 11936                                  					; NOTE:	because	of bug in some BIOSes we have to
 11937                                  					;	set ES:BX to 00:00
 11938 00000E02 53                      		push	bx
 11939 00000E03 31DB                    		xor	bx, bx
 11940 00000E05 891E[2E05]              		mov	[xfer_seg], bx
 11941 00000E09 A0[3005]                		mov	al, [sectorspertrack]
 11942 00000E0C B404                    		mov	ah, 4		; romverify
 11943 00000E0E B101                    		mov	cl, 1
 11944 00000E10 E85102                  		call	ToRom
 11945 00000E13 5B                      		pop	bx
 11946 00000E14 59                      		pop	cx
 11947 00000E15 7329                    		jnb	short FormatOk
 11948                                  FormatError:				
 11949 00000E17 E83402                  		call	ResetDisk
 11950 00000E1A C606[3006]01            		mov	byte [had_format_error], 1
 11951 00000E1F 50                      		push	ax
 11952 00000E20 51                      		push	cx
 11953 00000E21 52                      		push	dx
 11954 00000E22 E89501                  		call	SetMediaForFormat
 11955 00000E25 3C01                    		cmp	al, 1
 11956 00000E27 7503                    		jnz	short WhileErr
 11957 00000E29 E83101                  		call	SetDasd
 11958                                  WhileErr:				
 11959 00000E2C 5A                      		pop	dx
 11960 00000E2D 59                      		pop	cx
 11961 00000E2E 58                      		pop	ax
 11962 00000E2F E2BD                    		loop	FormatRetry
 11963                                  FormatFailed:				
 11964 00000E31 C606[3006]01            		mov	byte [had_format_error], 1
 11965                                  					; Set the format error flag
 11966 00000E36 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11967 00000E39 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11968 00000E3B B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11969                                  DoMapIt:				
 11970 00000E3D E973FD                  		jmp	maperror
 11971                                  ; ---------------------------------------------------------------------------
 11972                                  
 11973                                  FormatOk:				
 11974 00000E40 C606[3006]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11975 00000E45 C3                      		retn
 11976                                  ; ---------------------------------------------------------------------------
 11977                                  
 11978                                  ; 16/10/2022
 11979                                  
 11980                                  ; ==========================================================================
 11981                                  ;
 11982                                  ; VerifyTrack:
 11983                                  ;
 11984                                  ; input: ES:di points to bds for drive
 11985                                  ; ==========================================================================
 11986                                  
 11987                                  VerifyTrack:				
 11988 00000E46 1E                      		push	ds
 11989 00000E47 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11990 00000E4B C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11991                                  
 11992                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11993                                  
 11994 00000E4E 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11995 00000E51 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11996 00000E54 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11997 00000E57 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11998                                  					; Get option flag word
 11999 00000E59 1F                      		pop	ds
 12000 00000E5A C606[2001]04            		mov	byte [rflag], 4	; romverify
 12001 00000E5F 890E[3301]              		mov	[curtrk], cx
 12002 00000E63 A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 12003 00000E66 8B0E[3005]              		mov	cx, [sectorspertrack]
 12004                                  
 12005                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 12006                                  		; specified if not we should go to the normal track verification
 12007                                  		; routine. If fast format has been specified we should get the
 12008                                  		; number of tracks to be verified and check it to see if it is
 12009                                  		; > 255. If it is then it is an error and we should go to
 12010                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 12011                                  		; sectors per track to get the total number of sectors to be
 12012                                  		; verified. This should also be less than equal to 255
 12013                                  		; otherwise we go to same error exit. If everything is okay
 12014                                  		; we initalise cx to the total sectors. use ax as a temporary
 12015                                  		; register.
 12016                                  
 12017                                  					; Special function requested?	
 12018 00000E6A F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 12019 00000E6D 7421                    		jz	short NormVerifyTrack
 12020 00000E6F 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 12021 00000E71 08E4                    		or	ah, ah
 12022 00000E73 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 12023 00000E75 F6E1                    		mul	cl
 12024 00000E77 08E4                    		or	ah, ah
 12025 00000E79 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 12026 00000E7B 89C1                    		mov	cx, ax
 12027                                  		; 10/12/2022
 12028 00000E7D 26F6452301              		test	byte [es:di+35], 1
 12029                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 12030                                  					; fnon_removable
 12031 00000E82 740C                    		jz	short NormVerifyTrack
 12032                                  					; Multitrack operation = on?
 12033                                  		; 10/12/2022
 12034                                  		; 19/10/2022
 12035 00000E84 F606[2605]80            		test	byte [multrk_flag], 80h
 12036                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 12037                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 12038 00000E89 7405                    		jz	short NormVerifyTrack
 12039 00000E8B C606[2D05]01            		mov	byte [multitrk_format_flag], 1
 12040                                  NormVerifyTrack:			
 12041 00000E90 31C0                    		xor	ax, ax		; 1st sector
 12042 00000E92 31DB                    		xor	bx, bx
 12043 00000E94 891E[2E05]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 12044 00000E98 E83F00                  		call	TrackIo
 12045 00000E9B C606[2D05]00            		mov	byte [multitrk_format_flag], 0
 12046 00000EA0 C3                      		retn
 12047                                  ; ---------------------------------------------------------------------------
 12048                                  
 12049                                  VerifyTrack_Err:			
 12050 00000EA1 B401                    		mov	ah, 1
 12051 00000EA3 E90DFD                  		jmp	maperror
 12052                                  ; ---------------------------------------------------------------------------
 12053                                  
 12054                                  ; 16/10/2022
 12055                                  
 12056                                  ; ==========================================================================
 12057                                  ;
 12058                                  ; ReadTrack:
 12059                                  ;
 12060                                  ; input: ES:di points to bds for drive
 12061                                  ;
 12062                                  ; ==========================================================================
 12063                                  
 12064                                  ReadTrack:				
 12065 00000EA6 C606[2001]02            		mov	byte [rflag], 2	; romread
 12066 00000EAB EB05                    		jmp	short ReadWriteTrack
 12067                                  ; ---------------------------------------------------------------------------
 12068                                  
 12069                                  WriteTrack:
 12070                                  
 12071                                  ; ==========================================================================
 12072                                  ;
 12073                                  ; WriteTrack:
 12074                                  ;
 12075                                  ; input: ES:di points to bds for drive
 12076                                  ;
 12077                                  ; ==========================================================================
 12078                                  				
 12079 00000EAD C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12080                                  
 12081                                  		; Fall into ReadWriteTrack
 12082                                  
 12083                                  ; ==========================================================================
 12084                                  ;
 12085                                  ; readWriteTrack:
 12086                                  ;
 12087                                  ; input:
 12088                                  ;    ES:di points to bds for drive
 12089                                  ;    rFlag - 2 for read,3 for write
 12090                                  ;
 12091                                  ; ==========================================================================
 12092                                  
 12093                                  ReadWriteTrack:	
 12094                                  		; save bds pointer segment so we can use it to access
 12095                                  		; our packet. Notice that this is not the standard register
 12096                                  		; assignment for accessing packets
 12097                                  		
 12098                                  		; 19/10/2022	
 12099 00000EB2 06                      		push	es
 12100 00000EB3 C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 12101 00000EB7 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12102 00000EBB 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 12103 00000EBF A3[3301]                		mov	[curtrk], ax
 12104 00000EC2 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 12105 00000EC6 A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 12106 00000EC9 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 12107 00000ECD 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 12108 00000ED1 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 12109                                  					; Get transfer address
 12110                                  
 12111                                  		; we just trashed our packet address, but we no longer care
 12112                                  
 12113 00000ED5 8C06[2E05]              		mov	[xfer_seg], es	; Pass transfer	segment
 12114 00000ED9 07                      		pop	es
 12115                                  
 12116                                  		; Fall into TrackIo
 12117                                  
 12118                                  ; =============== S U B	R O U T	I N E =======================================
 12119                                  
 12120                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12121                                  
 12122                                  ; ==========================================================================
 12123                                  ;
 12124                                  ; TrackIo:
 12125                                  ;    performs track read/write/verify
 12126                                  ;
 12127                                  ;   input:
 12128                                  ;      rFlag	- 2 = read
 12129                                  ;		  3 = write
 12130                                  ;		  4 = verify
 12131                                  ;      AX	- Index into track table of first sector to io
 12132                                  ;      CX	- Number of sectors to io
 12133                                  ;      Xfer_Seg:BX - Transfer address
 12134                                  ;      ES:DI	- Pointer to bds
 12135                                  ;      CurTrk	- Current cylinder
 12136                                  ;      CurHd	- Current head
 12137                                  ;
 12138                                  ; ==========================================================================
 12139                                  
 12140                                  ; 16/03/2019 - Retro DOS v4.0
 12141                                  		
 12142                                  		; 19/10/2022
 12143                                  TrackIo:	
 12144                                  					; Procedure `disk' will pop stack to
 12145 00000EDA 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 12146 00000EDE E84BF9                  		call	checksingle	; Ensure correct disk is in drv
 12147 00000EE1 803E[2F06]01            		cmp	byte [media_set_for_format], 1
 12148                                  					; See if we have already set	disk
 12149 00000EE6 7407                    		jz	short Dptalreadyset ; base table
 12150 00000EE8 50                      		push	ax		; set up tables	and variables for i/o
 12151 00000EE9 51                      		push	cx
 12152 00000EEA E8CBFA                  		call	iosetup
 12153 00000EED 59                      		pop	cx
 12154 00000EEE 58                      		pop	ax
 12155                                  Dptalreadyset:				; Point si at the table entry of the			
 12156 00000EEF BE[3205]                		mov	si, tracktable	; first sector to be io'd
 12157 00000EF2 D1E0                    		shl	ax, 1
 12158 00000EF4 D1E0                    		shl	ax, 1
 12159 00000EF6 01C6                    		add	si, ax
 12160                                  
 12161                                  		; WE WANT:
 12162                                  		; CX to	be the number of times we have to loop
 12163                                  		; DX to	be the number of sectors we read on each iteration
 12164                                  		
 12165 00000EF8 BA0100                  		mov	dx, 1
 12166                                  		; 12/12/2022
 12167 00000EFB 26F6452308              		test	byte [es:di+23h], 8
 12168                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 12169                                  					; good_tracklayout
 12170 00000F00 7402                    		jz	short ionextsector
 12171                                  		
 12172 00000F02 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 12173                                  ionextsector:				
 12174 00000F04 51                      		push	cx
 12175 00000F05 52                      		push	dx
 12176 00000F06 46                      		inc	si
 12177 00000F07 46                      		inc	si		; Skip over the	cylinder and head in
 12178                                  					; the track table
 12179 00000F08 AC                      		lodsb			; Get sector ID	from track table
 12180 00000F09 A2[3101]                		mov	[cursec], al
 12181                                  
 12182                                  		; assumptions for a fixed disk multi-track disk	i/o
 12183                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 12184                                  		;     only CL is valid.
 12185                                  		; 2). Sector size should be set	to 512 bytes.
 12186                                  		; 3). Good track layout
 12187                                  		
 12188                                  		; 12/12/2022
 12189 00000F0C 26F6452301              		test	byte [es:di+23h], 1
 12190                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 12191                                  					; fnon_removable ; Fixed disk?
 12192 00000F11 7414                    		jz	short IoRemovable ; No
 12193                                  		; 12/12/2022
 12194 00000F13 F606[2605]80            		test	byte [multrk_flag], 80h
 12195                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 12196                                  						; Allow multi-track operation?
 12197 00000F18 740D                    		jz	short IoRemovable ; No,don't do that.
 12198 00000F1A 8916[2201]              		mov	[seccnt], dx
 12199 00000F1E 89D0                    		mov	ax, dx
 12200 00000F20 E819FB                  		call	Disk
 12201 00000F23 5A                      		pop	dx
 12202 00000F24 59                      		pop	cx
 12203 00000F25 F8                      		clc
 12204 00000F26 C3                      		retn
 12205                                  ; ---------------------------------------------------------------------------
 12206                                  
 12207                                  IoRemovable:				
 12208 00000F27 AC                      		lodsb			; Get sector size index	from track
 12209                                  					; table	and save it
 12210 00000F28 50                      		push	ax
 12211 00000F29 56                      		push	si
 12212 00000F2A 1E                      		push	ds		; Save Bios_Data
 12213 00000F2B 50                      		push	ax
 12214 00000F2C 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 12215                                  					; Fetch	EOT while ds-> Bios_Data
 12216 00000F30 C536[2D01]              		lds	si, [dpt]
 12217 00000F34 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 12218 00000F37 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 12219 00000F3A 58                      		pop	ax
 12220 00000F3B 1F                      		pop	ds
 12221 00000F3C 88D0                    		mov	al, dl
 12222 00000F3E A3[2201]                		mov	[seccnt], ax
 12223 00000F41 E8F8FA                  		call	Disk
 12224 00000F44 5E                      		pop	si		; Advance buffer pointer by adding
 12225                                  					; sector size
 12226                                  		;pop	ax
 12227                                  		; 24/12/2023
 12228 00000F45 59                      		pop	cx
 12229                                  
 12230                                  		; 02/09/2023 (PCDOS 7.1)
 12231                                  		;call	SectorSizeIndexToSectorSize
 12232                                  		;mov	cl, al	; 24/12/2023
 12233 00000F46 B88000                  		mov	ax, 128
 12234 00000F49 D3E0                    		shl	ax, cl
 12235                                  
 12236 00000F4B 01C3                    		add	bx, ax
 12237 00000F4D 5A                      		pop	dx
 12238 00000F4E 59                      		pop	cx
 12239 00000F4F E2B3                    		loop	ionextsector
 12240 00000F51 803E[2F06]01            		cmp	byte [media_set_for_format], 1
 12241                                  		;jz	short NoNeedDone
 12242                                  		; 12/12/2022
 12243 00000F56 7404                    		je	short NoNeedDone2
 12244 00000F58 E826FA                  		call	done		; set time of last access, and reset
 12245                                  					; entries in Dpt.
 12246                                  NoNeedDone:
 12247 00000F5B F8                      		clc	; not necessary ('done' clears cf) ; 24/12/2023
 12248                                  NoNeedDone2:
 12249 00000F5C C3                      		retn
 12250                                  
 12251                                  ; =============== S U B	R O U T	I N E =======================================
 12252                                  
 12253                                  ; ---------------------------------------------------------------------------
 12254                                  ;
 12255                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 12256                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 12257                                  ; are permissible.
 12258                                  ;
 12259                                  ; On Input   AX contains sector size in bytes
 12260                                  ; On Output  AL Contains index
 12261                                  ; All other registers preserved
 12262                                  ;
 12263                                  ; ---------------------------------------------------------------------------
 12264                                  
 12265                                  ; 02/09/2023
 12266                                  ;SectSizeToSectIndex:
 12267                                  ;		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 12268                                  ;					; examine upper	byte only
 12269                                  ;		ja	short OneK
 12270                                  ;		mov	al, ah		; value	in AH is the index!
 12271                                  ;		retn
 12272                                  
 12273                                  ; ---------------------------------------------------------------------------
 12274                                  ;
 12275                                  ;OneK:
 12276                                  ;		mov	al, 3
 12277                                  ;		retn
 12278                                  
 12279                                  ; =============== S U B	R O U T	I N E =======================================
 12280                                  
 12281                                  ; 02/09/2023
 12282                                  ;SectorSizeIndexToSectorSize:
 12283                                  ;		mov	cl, al
 12284                                  ;		mov	ax, 128
 12285                                  ;		shl	ax, cl
 12286                                  ;		retn
 12287                                  
 12288                                  ; =============== S U B	R O U T	I N E =======================================
 12289                                  
 12290                                  ; 16/10/2022
 12291                                  
 12292                                  ; ---------------------------------------------------------------------------
 12293                                  ;
 12294                                  ; SetDASD
 12295                                  ;
 12296                                  ; Set up the rom for formatting.
 12297                                  ; we have to tell the rom bios what type of disk is in the drive.
 12298                                  ;
 12299                                  ; On Input   - ES:di - Points to bds
 12300                                  ;
 12301                                  ; ---------------------------------------------------------------------------
 12302                                  
 12303                                  		; 19/10/2022
 12304                                  SetDasd:	
 12305 00000F5D 803E[3006]01            		cmp	byte [had_format_error], 1 ;
 12306                                  					; See if we've previously set dasd type
 12307 00000F62 740C                    		jz	short DoSetDasd
 12308                                  		; 10/12/2022
 12309 00000F64 26F6452380              		test	byte [es:di+23h], 80h
 12310                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 12311                                  					; set_dasd_true
 12312 00000F69 7446                    		jz	short DasdHasBeenSet
 12313                                  		; 10/12/2022
 12314 00000F6B 268065237F              		and	byte [es:di+23h], 7Fh
 12315                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 12316                                  					; ~set_dasd_true
 12317                                  DoSetDasd:
 12318 00000F70 C606[3006]00            		mov	byte [had_format_error], 0 ; Reset it
 12319 00000F75 C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 12320 00000F7A B004                    		mov	al, 4
 12321                                  		; 02/09/2023
 12322 00000F7C 268A6522                		mov	ah, [es:di+22h] ; [es:di+BDS.formfactor]
 12323 00000F80 80FC02                  		cmp	ah, 2
 12324                                  		;cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12325                                  					; DEV_3INCH720KB
 12326 00000F83 7414                    		jz	short DoSet
 12327                                  		; 24/12/2023
 12328 00000F85 B001                    		mov	al, 1
 12329                                  		;cmp	ah, 1
 12330 00000F87 38C4                    		cmp	ah, al	; 1
 12331                                  		;cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 12332                                  					; DEV_5INCH96TPI
 12333                                  		;jz	short GotBig
 12334                                  		; 24/12/2023
 12335                                  		;mov	al, 1
 12336                                  		;jmp	short DoSet
 12337                                  		; 02/09/2023
 12338 00000F89 750E                    		jnz	short DoSet
 12339                                  GotBig:
 12340                                  		;mov	al, 2		; 160/320k in a	1.2 meg	drive
 12341                                  		; 02/09/2023
 12342 00000F8B 40                      		inc	ax  ; mov al, 2
 12343 00000F8C 803E[2E06]00            		cmp	byte [mediatype], 0
 12344 00000F91 7506                    		jnz	short DoSet
 12345                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 12346                                  		; 10/12/2022
 12347                                  		;inc	al  ; al = 3
 12348                                  		; 18/12/2022
 12349 00000F93 40                      		inc	ax  ; al = 3
 12350 00000F94 C606[3B01]54            		mov	byte [gap_patch], 54h
 12351                                  DoSet:
 12352 00000F99 1E                      		push	ds
 12353 00000F9A 56                      		push	si
 12354                                  
 12355                                  		;mov	ds, [zeroseg]	; Point	to interrupt vectors
 12356                                  		; 02/09/2023
 12357 00000F9B 31F6                    		xor	si, si
 12358 00000F9D 8EDE                    		mov	ds, si	; 0
 12359                                  
 12360 00000F9F C5367800                		lds	si, [DSKADR]
 12361                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 12362                                  		;;lds	si, ds:78h
 12363                                  
 12364 00000FA3 C644090F                		mov	byte [si+9], 0Fh ;
 12365                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 12366 00000FA7 5E                      		pop	si
 12367 00000FA8 1F                      		pop	ds
 12368 00000FA9 B417                    		mov	ah, 17h
 12369 00000FAB 268A5504                		mov	dl, [es:di+4]
 12370 00000FAF CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 12371                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 12372                                  DasdHasBeenSet:
 12373 00000FB1 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 12374 00000FB5 8826[3701]              		mov	[formt_eot], ah
 12375 00000FB9 C3                      		retn
 12376                                  
 12377                                  ; =============== S U B	R O U T	I N E =======================================
 12378                                  
 12379                                  ; 16/10/2022
 12380                                  
 12381                                  ; ---------------------------------------------------------------------------
 12382                                  ;
 12383                                  ; Set Media Type for Format
 12384                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 12385                                  ; BPB area in the BDS can be handled by the rom.
 12386                                  ; On Input, ES:DI -> current BDS.
 12387                                  ; The status of the operation is returned in AL
 12388                                  ;
 12389                                  ;	- 0 - if the support is available,and the combination is valid.
 12390                                  ;	- 1 - no rom support
 12391                                  ;	- 2 - illegal combination
 12392                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 12393                                  ;
 12394                                  ; Flags also may be altered. All other registers preserved.
 12395                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 12396                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 12397                                  ; to the one returned. the original pointer to the disk base table is stored
 12398                                  ; in TempDpt, until it is restored.
 12399                                  ;
 12400                                  ; ---------------------------------------------------------------------------
 12401                                  
 12402                                  		; 19/10/2022
 12403                                  SetMediaForFormat:	
 12404 00000FBA 51                      		push	cx
 12405 00000FBB 52                      		push	dx
 12406                                  
 12407                                  		; If we have a format error, then do not change Dpt, TempDpt.
 12408                                  		; but we need to call int 13h, ah=18h again.
 12409                                  
 12410 00000FBC 803E[3006]01            		cmp	byte [had_format_error], 1
 12411 00000FC1 7425                    		jz	short SkipSaveDskAdr
 12412 00000FC3 30C0                    		xor	al, al		; If already done return 0
 12413 00000FC5 803E[2F06]01            		cmp	byte [media_set_for_format], 1
 12414 00000FCA 7502                    		jnz	short DoSetMediaForFormat
 12415 00000FCC EB7D                    		jmp	SetMediaRet	; Media	already	set
 12416                                  ; ---------------------------------------------------------------------------
 12417                                  
 12418                                  DoSetMediaForFormat:
 12419 00000FCE 06                      		push	es
 12420 00000FCF 56                      		push	si
 12421                                  		
 12422                                  		; 02/09/2023
 12423                                  		;mov	es, [zeroseg]	; Point to interrupt vectors
 12424 00000FD0 31F6                    		xor	si, si ; 0
 12425 00000FD2 8EC6                    		mov	es, si
 12426                                  
 12427 00000FD4 26C4367800              		les	si, [es:DSKADR]
 12428                                  		;les	si, es:78h	; [es:DSKADR]
 12429                                  					; Get pointer to disk base table
 12430 00000FD9 8936[2D01]              		mov	[dpt], si
 12431 00000FDD 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12432                                  
 12433                                  		; Initialize the head settle time to 0Fh. See the offsets
 12434                                  		; given in dskprm.inc.
 12435                                  
 12436 00000FE1 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12437 00000FE6 5E                      		pop	si
 12438 00000FE7 07                      		pop	es
 12439                                  SkipSaveDskAdr:				
 12440 00000FE8 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 12441 00000FEC 49                      		dec	cx
 12442 00000FED 80E503                  		and	ch, 3
 12443 00000FF0 D0CD                    		ror	ch, 1
 12444 00000FF2 D0CD                    		ror	ch, 1
 12445 00000FF4 86E9                    		xchg	ch, cl
 12446 00000FF6 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 12447 00000FFA 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12448 00000FFE 06                      		push	es
 12449 00000FFF 1E                      		push	ds
 12450 00001000 56                      		push	si
 12451 00001001 57                      		push	di
 12452 00001002 B418                    		mov	ah, 18h
 12453 00001004 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 12454                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 12455 00001006 7231                    		jb	short FormaStatErr
 12456 00001008 803E[3006]01            		cmp	byte [had_format_error], 1
 12457 0000100D 7423                    		jz	short skip_disk_base_setting
 12458 0000100F 06                      		push	es		; Save segment returned	by the rom
 12459                                  
 12460                                  		; 02/09/2023
 12461                                  		;mov	es, [zeroseg]	; Point	to interrupt vector segment
 12462 00001010 31F6                    		xor	si, si
 12463 00001012 8EC6                    		mov	es, si ; 0
 12464 00001014 06                      		push	es ; * ; 02/09/2023
 12465                                  
 12466 00001015 26C4367800              		les	si, [es:DSKADR]
 12467                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 12468                                  					; Get current disk base	table
 12469 0000101A 8936[3106]              		mov	[tempdpt], si
 12470 0000101E 8C06[3306]              		mov	[tempdpt+2], es ; Save it
 12471                                  
 12472                                  		; 02/09/2023
 12473                                  		;;mov	es, [zeroseg]
 12474                                  		;xor	si, si ; 0
 12475                                  		;mov	es, si
 12476 00001022 07                      		pop	es ; * ; 02/09/2023
 12477                                  
 12478                                  		;mov	es:78h,	di
 12479 00001023 26893E7800              		mov	[es:DSKADR], di
 12480                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 12481 00001028 268F067A00              		pop	word [es:DSKADR+2]
 12482 0000102D C606[2F06]01            		mov	byte [media_set_for_format], 1
 12483                                  skip_disk_base_setting:			
 12484 00001032 30C0                    		xor	al, al		; Legal	combination + rom support code
 12485                                  		;mov	ds:had_format_error, al	; Reset	the flag
 12486 00001034 A2[3006]                		mov	[had_format_error], al
 12487 00001037 EB0E                    		jmp	short PopStatRet
 12488                                  ; ---------------------------------------------------------------------------
 12489                                  
 12490                                  FormaStatErr:
 12491                                  		; 10/12/2022
 12492 00001039 B003                    		mov	al, 3
 12493                                  				
 12494 0000103B 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 12495                                  					; Illegal combination =	0Ch
 12496 0000103E 7406                    		jz	short FormatStatIllegalComb
 12497 00001040 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 12498 00001043 7402                    		jz	short FormatStatTimeOut
 12499                                  		; 10/12/2022
 12500                                  		;dec	al
 12501                                  		; 18/12/2022
 12502 00001045 48                      		dec	ax
 12503                                  		; al = 2
 12504                                  		;mov	al, 1		; Function not supported.
 12505                                  		;jmp	short PopStatRet
 12506                                  ; ---------------------------------------------------------------------------
 12507                                  
 12508                                  FormatStatIllegalComb:
 12509                                  		; 10/12/2022
 12510                                  		;dec	al	; 3 -> 2 or 2 -> 1
 12511                                  		; 18/12/2022
 12512 00001046 48                      		dec	ax
 12513                                  		; al = 2				
 12514                                  		;mov	al, 2		; Function supported, but
 12515                                  					; Illegal sect/trk,trk combination.
 12516                                  		; 10/12/2022
 12517                                  		;jmp	short PopStatRet
 12518                                  ; ---------------------------------------------------------------------------
 12519                                  
 12520                                  FormatStatTimeOut:			
 12521                                  		; 10/12/2022
 12522                                  		; al = 3
 12523                                  		;mov	al, 3		; Function supported, but
 12524                                  					; Media	not present.
 12525                                  PopStatRet:				
 12526 00001047 5F                      		pop	di
 12527 00001048 5E                      		pop	si
 12528 00001049 1F                      		pop	ds
 12529 0000104A 07                      		pop	es
 12530                                  SetMediaRet:				
 12531 0000104B 5A                      		pop	dx
 12532 0000104C 59                      		pop	cx
 12533 0000104D C3                      		retn
 12534                                  
 12535                                  ; =============== S U B	R O U T	I N E =======================================
 12536                                  
 12537                                  ; 16/10/2022
 12538                                  
 12539                                  ; ---------------------------------------------------------------------------
 12540                                  ;
 12541                                  ; RESET THE DRIVE
 12542                                  ;
 12543                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 12544                                  ; slow head settle time for the next operation. this is because the reset
 12545                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 12546                                  ; time around - there is a problem with 3.5" drives in that the head does
 12547                                  ; not settle down in time,even for read operations!!
 12548                                  ;
 12549                                  ; ---------------------------------------------------------------------------
 12550                                  
 12551                                  ResetDisk:
 12552 0000104E 50                      		push	ax
 12553                                  
 12554                                  		; 02/09/2023
 12555 0000104F B80100                  		mov	ax, 1 ; PCDOS 7.1
 12556 00001052 3806[2F06]              		cmp	[media_set_for_format], al ; 1
 12557                                  		;cmp	byte [media_set_for_format], 1
 12558                                  					; Reset while formatting?
 12559 00001056 7503                    		jnz	short ResetDisk_cont
 12560                                  					; Then verify operation in "fmt & vrfy"
 12561                                  		;mov	byte [had_format_error], 1 ; Might have failed.
 12562 00001058 A2[3006]                		mov	[had_format_error], al ; 1
 12563                                  ResetDisk_cont:
 12564                                  		; 02/09/2023 (ah=0)
 12565                                  		;xor	ah, ah		; So signals that we had a format error
 12566 0000105B CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 12567                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 12568 0000105D C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 12569                                  					; Zap up the speed
 12570 00001062 58                      		pop	ax
 12571 00001063 C3                      		retn
 12572                                  
 12573                                  ; =============== S U B	R O U T	I N E =======================================
 12574                                  
 12575                                  ; 16/10/2022
 12576                                  
 12577                                  ; ---------------------------------------------------------------------------
 12578                                  ;
 12579                                  ; This routine sets up the drive parameter table with the values needed for
 12580                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 12581                                  ;
 12582                                  ; on entry  -	ES:DI - points to bds for the drive
 12583                                  ;		Xfer_Seg:BX - points to trkbuf
 12584                                  ;		AL    - number of sectors
 12585                                  ;		AH    - int 13 function code
 12586                                  ;		CL    - sector number for verify
 12587                                  ;		DS    - Bios_Data
 12588                                  ;
 12589                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 12590                                  ;		AX and flags are the results of the int 13
 12591                                  ;
 12592                                  ; ---------------------------------------------------------------------------
 12593                                  
 12594                                  		; 24/12/2023
 12595                                  		; 19/10/2022
 12596                                  ToRom:	
 12597 00001064 53                      		push	bx
 12598 00001065 56                      		push	si
 12599                                  
 12600                                  		; Compaq bug fix - check whether we are using new ROM
 12601                                  		; functionality to set up format, not merely if it exists.
 12602                                  		; This was formerly a check against [new_rom]
 12603                                  
 12604 00001066 F606[2F06]01            		test	byte [media_set_for_format], 1
 12605 0000106B 7534                    		jnz	short GotValidDpt
 12606 0000106D 50                      		push	ax
 12607 0000106E 06                      		push	es		; Save bds segment
 12608 0000106F 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 12609                                  					; ffSmall ; is it a 3.5" drive?
 12610                                  		; 24/12/2023
 12611                                  		;pushf	; not necessary	; (Save	the cmp	result)
 12612                                  		
 12613 00001074 8E06[1A00]              		mov	es, [zeroseg]
 12614                                  		;les	si, es:78h	; Get pointer to disk base table
 12615 00001078 26C4367800              		les	si, [es:DSKADR]
 12616                                  		;mov	word ptr ds:dpt, si
 12617                                  		;mov	word ptr ds:dpt+2, es ;	Save pointer to table
 12618 0000107D 8936[2D01]              		mov	[dpt], si
 12619 00001081 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 12620                                  		
 12621 00001085 A0[3701]                		mov	al, [formt_eot]
 12622 00001088 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 12623 0000108C A0[3B01]                		mov	al, [gap_patch]
 12624 0000108F 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 12625                                  					; Important for	format
 12626 00001093 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 12627                                  					; Assume we are	doing a	seek operation
 12628                                  					; Setup	motor start correctly for 3.5" drives
 12629                                  		; 24/12/2023
 12630                                  		;popf			; Get result of	earlier	cmp
 12631 00001098 7505                    		jnz	short MotorStrtOK
 12632 0000109A 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 12633                                  MotorStrtOK:				
 12634 0000109F 07                      		pop	es		; Restore bds segment
 12635 000010A0 58                      		pop	ax
 12636                                  GotValidDpt:				
 12637 000010A1 8B16[3901]              		mov	dx, [trknum]	; Set track number
 12638 000010A5 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 12639 000010A7 268A5504                		mov	dl, [es:di+4]	; Set drive number
 12640 000010AB 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 12641 000010AF 06                      		push	es		; Save bds segment
 12642 000010B0 8E06[2E05]              		mov	es, [xfer_seg]
 12643 000010B4 CD13                    		int	13h		; DISK -
 12644 000010B6 07                      		pop	es		; Restore bds segment
 12645 000010B7 5E                      		pop	si
 12646 000010B8 5B                      		pop	bx
 12647 000010B9 C3                      		retn
 12648                                  
 12649                                  ; ---------------------------------------------------------------------------
 12650                                  
 12651                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12652                                  
 12653                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 12654                                  
 12655                                  ; ==========================================================================
 12656                                  ;
 12657                                  ; get the owner of the physical drive represented by the logical drive in al.
 12658                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 12659                                  ; if this is not the case, the system may hang, just following the linked list.
 12660                                  ;
 12661                                  ; ==========================================================================
 12662                                  
 12663                                  		; 19/10/2022
 12664                                  ioctl_getown:
 12665 000010BA E809F4                  		call	SetDrive
 12666 000010BD 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 12667                                  					; Get physical drive number
 12668 000010C1 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 12669                                  ownloop:				
 12670 000010C5 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 12671 000010C9 7507                    		jnz	short getnextBDS
 12672                                  		; 10/12/2022
 12673 000010CB 26F6452320              		test	byte [es:di+23h], 20h
 12674                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 12675                                  					; fi_own_physical
 12676 000010D0 7514                    		jnz	short exitown
 12677                                  getnextBDS:				
 12678 000010D2 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12679 000010D5 EBEE                    		jmp	short ownloop
 12680                                  ; ---------------------------------------------------------------------------
 12681                                  
 12682                                  ; ==========================================================================
 12683                                  ;
 12684                                  ; set the ownership of the physical drive represented by the logical drive
 12685                                  ; in al to al.
 12686                                  ;
 12687                                  ; ==========================================================================
 12688                                  
 12689                                  		; 19/10/2022
 12690                                  ioctl_setown:
 12691 000010D7 E8ECF3                  		call	SetDrive
 12692 000010DA C606[7A00]01            		mov	byte [fsetowner], 1
 12693                                  					; set flag for CheckSingle to look at.
 12694 000010DF E84AF7                  		call	checksingle
 12695                                  		; 02/09/2023
 12696 000010E2 FE0E[7A00]              		dec	byte [fsetowner] ; 0
 12697                                  		;mov	byte [fsetowner], 0
 12698                                  					; set ownership	of drive reset flag
 12699                                  		; Fall into ExitOwn
 12700                                  
 12701                                  ; ==========================================================================
 12702                                  ;
 12703                                  ; if there is only one logical drive assigned to this physical drive, return
 12704                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 12705                                  ;
 12706                                  ; ==========================================================================
 12707                                  
 12708                                  exitown:				
 12709 000010E6 30C9                    		xor	cl, cl
 12710                                  		; 12/12/2022
 12711 000010E8 26F6452310              		test	byte [es:di+23h], 10h
 12712                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 12713                                  					; fi_am_mult
 12714 000010ED 7406                    		jz	short exitnomult
 12715 000010EF 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 12716                                  					; Get logical drive number
 12717                                  					; Get it 1-based
 12718 000010F3 FEC1                    		inc	cl
 12719                                  exitnomult:				
 12720 000010F5 C51E[1200]              		lds	bx, [ptrsav]
 12721 000010F9 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 12722                                  					; Exit normal termination
 12723                                  		; 12/12/2022
 12724                                  		; cf=0
 12725                                  		;clc
 12726 000010FC C3                      		retn
 12727                                  
 12728                                  ; =============== S U B	R O U T	I N E =======================================
 12729                                  
 12730                                  ; 16/10/2022
 12731                                  
 12732                                  ; ---------------------------------------------------------------------------
 12733                                  ;
 12734                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 12735                                  ; only if the first byte of TempDpt is not -1.
 12736                                  ; all registers (including flags) are preserved.
 12737                                  ;
 12738                                  ; ---------------------------------------------------------------------------
 12739                                  
 12740                                  		; 24/12/2023
 12741                                  		; 19/10/2022
 12742                                  RestoreOldDpt:
 12743                                  		; if we have already restored the disk base table earlier,
 12744                                  		; do not do it again.
 12745                                  
 12746 000010FD 50                      		push	ax
 12747 000010FE 30C0                    		xor	al, al
 12748 00001100 A2[3006]                		mov	[had_format_error], al	; Reset flag and 
 12749 00001103 8606[2F06]              		xchg	al, [media_set_for_format] ; get current flag setting
 12750 00001107 08C0                    		or	al, al
 12751 00001109 7418                    		jz	short DontRestore
 12752 0000110B 56                      		push	si
 12753 0000110C 1E                      		push	ds
 12754 0000110D 06                      		push	es
 12755 0000110E C536[3106]              		lds	si, [tempdpt]
 12756                                  
 12757                                  		; 17/10/2022
 12758                                  		;mov	es, [cs:BIOSDATAWORD]
 12759                                  		;;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12760                                  		;mov	es, [es:zeroseg]
 12761                                  		;;mov	es, es:zeroseg	; CAS -- bleeeech!
 12762                                  
 12763                                  		; 24/12/2023
 12764 00001112 31C0                    		xor	ax, ax
 12765 00001114 8EC0                    		mov	es, ax ; 0
 12766                                  
 12767                                  		;mov	es:78h,	si	; [es:DSKADR]  (Int 1Eh)
 12768 00001116 2689367800              		mov	[es:DSKADR], si
 12769                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 12770 0000111B 268C1E7A00              		mov	[es:DSKADR+2], ds
 12771 00001120 07                      		pop	es
 12772 00001121 1F                      		pop	ds
 12773 00001122 5E                      		pop	si
 12774                                  DontRestore:
 12775 00001123 58                      		pop	ax
 12776                                  		; 12/12/2022
 12777                                  		; cf=0
 12778                                  		;clc			;  Clear carry
 12779 00001124 C3                      		retn
 12780                                  
 12781                                  ; ---------------------------------------------------------------------------
 12782                                  
 12783                                  ; 16/10/2022
 12784                                  
 12785                                  ; ==========================================================================
 12786                                  ;	get media id
 12787                                  ; ==========================================================================
 12788                                  ;
 12789                                  ; FUNCTION: get the volume label,the system id and the serial number from
 12790                                  ;	    the media that has the extended boot record.
 12791                                  ;	    for the conventional media,this routine will return "unknown
 12792                                  ;	    media type" error to dos.
 12793                                  ;
 12794                                  ; INPUT :   ES:di -> bds table for this drive.
 12795                                  ;
 12796                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 12797                                  ;	    if carry set,then al contains the device driver error number
 12798                                  ;	    that will be returned to dos.
 12799                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 12800                                  ;
 12801                                  ; SUBROUTINES TO BE CALLED:
 12802                                  ;	BootIo:NEAR
 12803                                  ;
 12804                                  ; LOGIC:
 12805                                  ;	to recognize the extended boot record,this logic will actually
 12806                                  ;	access the boot sector even if it is a hard disk.
 12807                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 12808                                  ;	field of bpb and the extended boot signature.
 12809                                  ;
 12810                                  ; {
 12811                                  ;	get logical drive number from bds table;
 12812                                  ;	rFlag = read operation;
 12813                                  ;	BootIo;		 /*get the media boot record into the buffer
 12814                                  ;	if (no error) then
 12815                                  ;	     if (extended boot record) then
 12816                                  ;		{ set volume label,volume serial number and system id
 12817                                  ;		  of the request packet to those of the boot record;
 12818                                  ;		};
 12819                                  ;	     else		  /*not an extended bpb */
 12820                                  ;		{ set register al to "unknown media.." error code;
 12821                                  ;		  set carry bit;
 12822                                  ;		};
 12823                                  ;	else
 12824                                  ;	     ret;	/*already error code is set in the register al
 12825                                  ;
 12826                                  ; ==========================================================================
 12827                                  
 12828                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12829                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12830                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12831                                  
 12832                                  		; 24/12/2023
 12833                                  		; 19/10/2022
 12834                                  GetMediaId:
 12835 00001125 E89900                  		call	ChangeLineChk
 12836 00001128 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12837 0000112C C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12838 00001131 E87500                  		call	BootIo		; Read boot sector into	DiskSector
 12839 00001134 7224                    		jb	short IOCtl_If1
 12840                                  					; Valid? (0F0h-0FFh?)
 12841 00001136 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12842                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12843                                  		;jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12844                                  		; 24/12/2023
 12845 0000113B 721B                    		jb	short IOCtl_If7	
 12846                                  
 12847                                  		; 10/12/2022
 12848 0000113D BE[7401]                		mov	si, disksector+26h
 12849 00001140 803C29                  		cmp	byte [si], 29h
 12850                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12851                                  					; EXT_BOOT_SIGNATURE
 12852 00001143 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12853 00001145 C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12854 00001149 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12855                                  		; 10/12/2022
 12856 0000114D 46                      		inc	si
 12857                                  		; si = disksector+27h 
 12858                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12859 0000114E 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12860                                  IOCtl_If4:		; 24/12/2023
 12861 00001151 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12862                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12863                                  					; +size_of_EXT_SYSTEM_ID
 12864 00001154 F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12865                                  	
 12866                                  		; 10/12/2022
 12867                                  		; cf = 0
 12868                                  		;clc
 12869                                  
 12870 00001156 C3                      		retn
 12871                                  ; ---------------------------------------------------------------------------
 12872                                  
 12873                                  		; 24/12/2023
 12874                                  IOCtl_If2:
 12875 00001157 F9                      		stc	
 12876                                  IOCtl_If7:
 12877 00001158 B007                    		mov	al, 7		; error_unknown_media
 12878                                  		;stc
 12879                                  IOCtl_If6:
 12880                                  IOCtl_If1:
 12881 0000115A C3                      		retn
 12882                                  ; ---------------------------------------------------------------------------
 12883                                  
 12884                                  ; 16/10/2022
 12885                                  
 12886                                  ; ==========================================================================
 12887                                  ;  set media id
 12888                                  ; ==========================================================================
 12889                                  
 12890                                  ; function: set the volume label, the system id and the serial number of
 12891                                  ;	    the media that has the extended boot record.
 12892                                  ;	    for the conventional media, this routine will return "unknown
 12893                                  ;	    media.." error to dos.
 12894                                  ;	    this routine will also set the corresponding informations in
 12895                                  ;	    the bds table.
 12896                                  ;
 12897                                  ; input :   ES:di -> bds table for this drive.
 12898                                  ;
 12899                                  ; output:   the extended boot record in the media will be set according to
 12900                                  ;	    the request packet.
 12901                                  ;	    if carry set, then al contains the device driver error number
 12902                                  ;	    that will be returned to dos.
 12903                                  ;
 12904                                  ; subroutines to be called:
 12905                                  ;	BootIo:NEAR
 12906                                  ;
 12907                                  ; logic:
 12908                                  ;
 12909                                  ; {
 12910                                  ;	get drive_number from bds;
 12911                                  ;	rFlag = "read operation";
 12912                                  ;	BootIo;
 12913                                  ;	if (no error) then
 12914                                  ;	     if (extended boot record) then
 12915                                  ;		{ set volume label,volume serial number and system id
 12916                                  ;		  of the boot record to those of the request packet;
 12917                                  ;		  rFlag = "write operation";
 12918                                  ;		  get drive number from bds;
 12919                                  ;		  BootIo;	  /*write it back*/
 12920                                  ;		};
 12921                                  ;	     else		  /*not an extended bpb */
 12922                                  ;		{ set register al to "unknown media.." error code;
 12923                                  ;		  set carry bit;
 12924                                  ;		  ret;	 /*return back to caller */
 12925                                  ;		};
 12926                                  ;	else
 12927                                  ;	     ret;		 /*already error code is set */
 12928                                  ;
 12929                                  ; ==========================================================================
 12930                                  
 12931                                  		; 24/12/2023
 12932                                  		; 19/10/2022
 12933                                  SetMediaId:
 12934 0000115B E86300                  		call	ChangeLineChk
 12935 0000115E 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12936                                  					; Logical drive	number
 12937 00001162 88C2                    		mov	dl, al
 12938 00001164 C606[2001]02            		mov	byte [rflag], 2	; romread
 12939 00001169 52                      		push	dx
 12940 0000116A E83C00                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12941 0000116D 5A                      		pop	dx
 12942 0000116E 72EA                    		jb	short IOCtl_If6
 12943                                  					; Valid? (0F0h-0FFh?)
 12944 00001170 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12945                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12946 00001175 72E1                    		jb	short IOCtl_If7	; Brif not
 12947                                  		
 12948 00001177 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12949                                  					; EXT_BOOT_SIGNATURE
 12950                                  		;jnz	short IOCtl_If7	; not extended boot record
 12951                                  		; 24/12/2023
 12952 0000117C 75D9                    		jnz	short IOCtl_If2
 12953                                  
 12954 0000117E 06                      		push	es		; Save BDS pointer
 12955 0000117F 57                      		push	di
 12956 00001180 1E                      		push	ds		; Point	ES To boot record
 12957 00001181 07                      		pop	es
 12958 00001182 BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12959 00001185 C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12960 00001189 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12961 0000118C 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12962                                  
 12963                                  		; 24/12/2023
 12964                                  		;mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12965                                  		;			; +size_of_EXT_BOOT_VOL_LABEL
 12966                                  		;			; +size_of_EXT_SYSTEM_ID
 12967                                  		;rep movsb
 12968 0000118F E8BFFF                  		call	IOCtl_If4       ; copy volume serial, label and system id
 12969                                  
 12970 00001192 06                      		push	es		; point	ds back	to Bios_Data
 12971 00001193 1F                      		pop	ds
 12972 00001194 5F                      		pop	di		; restore bds pointer
 12973 00001195 07                      		pop	es
 12974 00001196 E88FF5                  		call	mov_media_ids	; update the bds media id info.
 12975 00001199 88D0                    		mov	al, dl
 12976 0000119B C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12977 000011A0 E80600                  		call	BootIo		; write	it back.
 12978 000011A3 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12979                                  					; make sure chk_media check the driver
 12980                                  					; return with error code from BootIo
 12981 000011A8 C3                      		retn
 12982                                  ; ---------------------------------------------------------------------------
 12983                                  
 12984                                  		; 24/12/2023
 12985                                  ;IOCtl_If7:
 12986                                  ;		mov	al, 7		; error_unknown_media
 12987                                  ;		stc
 12988                                  ;IOCtl_If6:
 12989                                  ;		retn
 12990                                  
 12991                                  ; =============== S U B	R O U T	I N E =======================================
 12992                                  
 12993                                  ; 16/10/2022
 12994                                  
 12995                                  ; ---------------------------------------------------------------------------
 12996                                  ;	BootIo
 12997                                  ; ---------------------------------------------------------------------------
 12998                                  ;
 12999                                  ; function: read/write the boot record into boot sector.
 13000                                  ;
 13001                                  ; input :
 13002                                  ;	    al=logical drive number
 13003                                  ;	    rFlag = operation (read/write)
 13004                                  ;
 13005                                  ; output:   for read operation,the boot record of the drive specified in bds
 13006                                  ;	    be read into the DiskSector buffer.
 13007                                  ;	    for write operation,the DiskSector buffer image will be written
 13008                                  ;	    to the drive specified in bds.
 13009                                  ;	    if carry set,then al contains the device driver error number
 13010                                  ;	    that will be returned to dos.
 13011                                  ;	    AX,CX,DX register destroyed.
 13012                                  ;	    if carry set,then al will contain the error code from DiskIO.
 13013                                  ;
 13014                                  ; subroutines to be called:
 13015                                  ;	DiskIO:NEAR
 13016                                  ;
 13017                                  ; logic:
 13018                                  ;
 13019                                  ; {
 13020                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 13021                                  ;	sectorcount = 1;	 /*read 1 sector only */
 13022                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 13023                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 13024                                  ; }
 13025                                  ; ==========================================================================
 13026                                  
 13027                                  		; 19/10/2022
 13028                                  BootIo:	
 13029 000011A9 06                      		push	es
 13030 000011AA 57                      		push	di
 13031 000011AB 53                      		push	bx
 13032 000011AC 1E                      		push	ds
 13033 000011AD 07                      		pop	es		; Point ES: to Bios_Data
 13034                                  
 13035                                  		; Call DiskIO to read/write the boot sec. The parameters which
 13036                                  		; need to be initialized for this subroutine out here are
 13037                                  		; - Transfer address to Bios_Data:DiskSector
 13038                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 13039                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 13040                                  		; - Number of sectors <-- 1
 13041                                  
 13042 000011AE BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 13043 000011B1 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 13044 000011B3 8916[2405]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 13045 000011B7 B90100                  		mov	cx, 1
 13046 000011BA E8F9F6                  		call	diskio
 13047 000011BD 5B                      		pop	bx
 13048 000011BE 5F                      		pop	di
 13049 000011BF 07                      		pop	es
 13050 000011C0 C3                      		retn
 13051                                  
 13052                                  ; =============== S U B	R O U T	I N E =======================================
 13053                                  
 13054                                  ; 16/10/2022
 13055                                  
 13056                                  ; ---------------------------------------------------------------------------
 13057                                  ;	ChangeLineChk
 13058                                  ; ---------------------------------------------------------------------------
 13059                                  ;
 13060                                  ; when the user calls get/set media id call before dos establishes the media
 13061                                  ; by calling "media_chk",the change line activity of the drive is going to be
 13062                                  ; lost.	this routine will check the change line activity and will save the
 13063                                  ; history in the flags.
 13064                                  ;
 13065                                  ; FUNCTION: check the change line error activity
 13066                                  ;
 13067                                  ; INPUT :  ES:di -> bds table.
 13068                                  ;
 13069                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 13070                                  ;
 13071                                  ; SUBROUTINES TO BE CALLED:
 13072                                  ;	Set_Changed_DL
 13073                                  ;
 13074                                  ; ---------------------------------------------------------------------------
 13075                                  
 13076                                  ChangeLineChk:	
 13077 000011C1 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13078 000011C5 08D2                    		or	dl, dl		; Fixed	disk?
 13079 000011C7 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 13080                                  		; 12/12/2022
 13081 000011C9 26F6452304              		test	byte [es:di+23h], 4
 13082                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 13083                                  					; return_fake_bpb
 13084 000011CE 751A                    		jnz	short ChangeLnChkRet
 13085 000011D0 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 13086 000011D5 7513                    		jnz	short ChangeLnChkRet
 13087 000011D7 E8DD06                  		call	haschange	; This drive support change line?
 13088 000011DA 740E                    		jz	short ChangeLnChkRet ; Do nothing
 13089                                  
 13090                                  		; Execute the rom disk interrupt to check changeline activity.
 13091                                  
 13092 000011DC B416                    		mov	ah, 16h
 13093 000011DE CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13094                                  					; DL = drive to	check
 13095                                  					; Return: AH = disk change status
 13096 000011E0 7308                    		jnb	short ChangeLnChkRet
 13097 000011E2 53                      		push	bx
 13098 000011E3 BB4000                  		mov	bx, 40h		; fchanged
 13099                                  					; Update flag in BDS for this
 13100                                  					; physical drive
 13101 000011E6 E8A706                  		call	set_changed_dl
 13102 000011E9 5B                      		pop	bx
 13103                                  ChangeLnChkRet:				
 13104 000011EA C3                      		retn
 13105                                  
 13106                                  ; ---------------------------------------------------------------------------
 13107                                  
 13108                                  ; 16/10/2022
 13109                                  
 13110                                  ; ==========================================================================
 13111                                  ;	GetAccessFlag
 13112                                  ; ==========================================================================
 13113                                  ;
 13114                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 13115                                  ;
 13116                                  ; INPUT :
 13117                                  ;	    ES:di -> bds table
 13118                                  ;
 13119                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 13120                                  ;						 = 1 if disk i/o allowed.
 13121                                  ; ==========================================================================
 13122                                  
 13123                                  		; 19/10/2022
 13124                                  GetAccessFlag:
 13125 000011EB C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 13126 000011EF C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 13127                                  		;mov	al, 0		; Assume result	is unformatted
 13128                                  		; 10/12/2022
 13129 000011F2 28C0                    		sub	al, al
 13130                                  		; 10/12/2022
 13131 000011F4 26F6452402              		test	byte [es:di+36], 02h
 13132                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 13133                                  					; unformatted_media
 13134 000011F9 7501                    		jnz	short GafDone	; Done if unformatted
 13135                                  		;inc	al		; Return true for formatted
 13136                                  		; 24/12/2023
 13137 000011FB 40                      		inc	ax
 13138                                  GafDone:
 13139 000011FC 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 13140 000011FF C3                      		retn
 13141                                  ; ---------------------------------------------------------------------------
 13142                                  
 13143                                  ; 16/10/2022
 13144                                  
 13145                                  ; ==========================================================================
 13146                                  ;	SetAccessFlag
 13147                                  ; ==========================================================================
 13148                                  ;
 13149                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 13150                                  ;
 13151                                  ; input :
 13152                                  ;	    ES:di -> bds table
 13153                                  ;
 13154                                  ; output:   unformtted_media bit modified according to the user request
 13155                                  ; ==========================================================================
 13156                                  
 13157                                  		; 19/10/2022
 13158                                  SetAccessFlag:				
 13159 00001200 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 13160 00001204 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 13161                                  		; 10/12/2022
 13162 00001207 26806524FD              		and	byte [es:di+36], 0FDh
 13163                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 13164                                  					; ~unformatted_media
 13165 0000120C 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 13166 00001210 7505                    		jnz	short saf_Done
 13167                                  		; 10/12/2022
 13168 00001212 26804D2402              		or	byte [es:di+36], 02h
 13169                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 13170                                  					; unformatted_media
 13171                                  saf_Done:				
 13172 00001217 C3                      		retn
 13173                                  ; ---------------------------------------------------------------------------
 13174                                  
 13175                                  ; 16/10/2022
 13176                                  
 13177                                  ; ==========================================================================
 13178                                  ; Ioctl_Support_Query
 13179                                  ; ==========================================================================
 13180                                  ;
 13181                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 13182                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 13183                                  ; device attributes specifies if this function is supported.
 13184                                  ;
 13185                                  ; ==========================================================================
 13186                                  
 13187                                  		; 19/10/2022
 13188                                  ioctl_support_query:
 13189 00001218 06                      		push	es
 13190 00001219 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 13191 0000121D 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 13192                                  					; AL ==	Major, AH == Minor
 13193 00001221 3C08                    		cmp	al, 8		; IOC_DC
 13194                                  					; See if major code is 8
 13195 00001223 7513                    		jnz	short nosupport
 13196 00001225 0E                      		push	cs
 13197 00001226 07                      		pop	es
 13198 00001227 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 13199                                  		; 10/12/2022
 13200 0000122A BF[1D0C]                		mov	di, IOC_DC_Table
 13201                                  		;mov	di, 0C60h	; IOC_DC_Table
 13202                                  					; at 2C7h:0C60h	= 70h:31D0h
 13203 0000122D 86C4                    		xchg	al, ah		; Put minor code in AL
 13204 0000122F F2AE                    		repne scasb		; Scan for minor code in AL
 13205 00001231 7505                    		jnz	short nosupport	; it was not found
 13206 00001233 B80001                  		mov	ax, 100h
 13207                                  		; 10/12/2022
 13208                                  		; (jump to ioctlsupexit is not required)
 13209                                  		;jmp	short $+2	; ioctlsupexit
 13210                                  					; Signal ioctl is supported
 13211                                  		;;jmp	short ioctlsupexit
 13212                                  ; ---------------------------------------------------------------------------
 13213                                  ioctlsupexit:				
 13214 00001236 07                      		pop	es
 13215                                  		; 10/12/2022
 13216                                  		; cf = 0
 13217                                  		;clc
 13218 00001237 C3                      		retn
 13219                                  ; ---------------------------------------------------------------------------
 13220                                  nosupport:				
 13221 00001238 07                      		pop	es
 13222 00001239 E999EE                  		jmp	bc_cmderr
 13223                                  ; ---------------------------------------------------------------------------
 13224                                  
 13225                                  ; 16/10/2022
 13226                                  
 13227                                  ; ==========================================================================
 13228                                  ;	GetMediaSenseStatus
 13229                                  ; ==========================================================================
 13230                                  ;
 13231                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 13232                                  ;	    diskette drive and whether the media is the default type
 13233                                  ;	    for that drive. (default type means the max size for that
 13234                                  ;	    drive)
 13235                                  ;
 13236                                  ; INPUT :   ES:DI -> BDS table
 13237                                  ; OUTPUT:   If carry clear
 13238                                  ;	    DS:BX -> Updated IOCtlPacket
 13239                                  ;
 13240                                  ;			 Special Function at offset 0:
 13241                                  ;				0	- Media detected is not default type
 13242                                  ;				1	- Media detected is default type
 13243                                  ;
 13244                                  ;			 Device Type at offset 1:
 13245                                  ;				2       - 720K 3.5" 80 tracks
 13246                                  ;				7	- 1.44M 3.5" 80 tracks
 13247                                  ;				9	- 2.88M 3.5" 80 tracks
 13248                                  ;
 13249                                  ; Error Codes returned in AX if carry set:
 13250                                  ;
 13251                                  ; 8102 - Drive not ready	- No disk is in the drive.
 13252                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 13253                                  ;				  the media is really unkown, any error
 13254                                  ;				  other than "media not present"
 13255                                  ; 
 13256                                  ; ==========================================================================
 13257                                  
 13258                                  		; 19/10/2022
 13259                                  SenseMediaType:				
 13260 0000123C C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 13261 00001240 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 13262                                  		; 10/10/2022
 13263                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 13264 00001243 31D2                    		xor	dx, dx
 13265 00001245 8917                    		mov	[bx], dx ; 0
 13266                                  		;
 13267 00001247 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13268                                  					; Get int 13h drive number from	BDS
 13269                                  		; 10/12/2022
 13270                                  		;xor	dh, dh		; DX = physical	drive number
 13271 0000124B B420                    		mov	ah, 20h		; Get Media Type function
 13272                                  					; If no	carry media type in AL
 13273 0000124D CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 13274 0000124F 7216                    		jb	short MediaSenseEr ; error code	in AH
 13275 00001251 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 13276                                  DetermineMediaType:			
 13277 00001253 FEC8                    		dec	al
 13278 00001255 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 13279 00001257 740A                    		jz	short GotMediaType
 13280 00001259 0404                    		add	al, 4
 13281 0000125B 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 13282 0000125D 7404                    		jz	short GotMediaType
 13283 0000125F 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 13284 00001261 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 13285                                  GotMediaType:				
 13286 00001263 884701                  		mov	[bx+1],	al	; Save the return value
 13287                                  		; 10/12/2022
 13288                                  		; cf = 0
 13289                                  		;clc			; Signal success
 13290 00001266 C3                      		retn
 13291                                  ; ---------------------------------------------------------------------------
 13292                                  
 13293                                  MediaSenseEr:				
 13294 00001267 80FC32                  		cmp	ah, 32h		; See if not default media error
 13295 0000126A 74E7                    		jz	short DetermineMediaType ; Not really an error
 13296 0000126C B002                    		mov	al, 2		; Now assume drive not ready
 13297 0000126E 80FC31                  		cmp	ah, 31h		; See if media was present
 13298 00001271 7402                    		jz	short SenseErrExit ; Return drive not ready
 13299                                  UnknownMediaType:			
 13300 00001273 B007                    		mov	al, 7		; Just don't know the media type
 13301                                  SenseErrExit:				
 13302 00001275 B481                    		mov	ah, 81h		; Signal error return
 13303 00001277 F9                      		stc
 13304 00001278 C3                      		retn
 13305                                  
 13306                                  ; ---------------------------------------------------------------------------
 13307                                  		; 10/12/2022
 13308                                  		;db    0
 13309                                  ; ---------------------------------------------------------------------------
 13310                                  
 13311                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13312                                  
 13313                                  ;-----------------------------------------------------------------------------
 13314                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 13315                                  ;-----------------------------------------------------------------------------
 13316                                  ; 16/03/2019 - Retro DOS v4.0
 13317                                  
 13318                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 13319                                  ;	after booting. this allows testing and implementation of custom int_13
 13320                                  ;	handlers, without giving up ms-dos error recovery
 13321                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 13322                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 13323                                  ;	exit:	orig13	== address of new int_13 handler
 13324                                  ;		ds:dx	== old orig13 value
 13325                                  ;		es:bx	== old old13  value
 13326                                  ;
 13327                                  ; int 2f handler for external block drivers to communicate with the internal
 13328                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 13329                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 13330                                  ; dsk_entry, the entry point for all disk requests.
 13331                                  ;
 13332                                  ; on exit from this driver, we will return to the external driver
 13333                                  ; that issued this int 2f, and can then remove the flags from the stack.
 13334                                  ; this scheme allows us to have a small external device driver, and makes
 13335                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 13336                                  ; since we only need to make changes in one place (most of the time).
 13337                                  ;
 13338                                  ;   ax=800h - check for installed handler - reserved
 13339                                  ;   ax=801h - install the bds into the linked list
 13340                                  ;   ax=802h - dos request
 13341                                  ;   ax=803h - return bds table starting pointer in ds:di
 13342                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 13343                                  ;	    problem. bds table is going to be used to get head/sector
 13344                                  ;	    informations without calling generic ioctl get device parm call.)
 13345                                  
 13346                                  ;BIOSSEGMENT equ 70h
 13347                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 13348                                  
 13349                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 13350                                  
 13351                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 13352 00001279 80FC13                  		cmp	ah, 13h
 13353 0000127C 7413                    		jz	short int2f_replace_int13
 13354 0000127E 80FC08                  		cmp	ah, 8
 13355 00001281 7431                    		jz	short mine
 13356                                  
 13357                                  ; Check for WIN386 startup and return the BIOS instance data
 13358                                  
 13359 00001283 80FC16                  		cmp	ah, 16h		; MultWin386
 13360 00001286 746C                    		jz	short win386call
 13361 00001288 80FC4A                  		cmp	ah, 4Ah		; multMULT
 13362 0000128B 7503                    		jnz	short i2f_handler_iret
 13363 0000128D E99700                  		jmp	handle_multmult
 13364                                  ; ---------------------------------------------------------------------------
 13365                                  
 13366                                  i2f_handler_iret:			
 13367 00001290 CF                      		iret
 13368                                  ; ---------------------------------------------------------------------------
 13369                                  
 13370                                  int2f_replace_int13:			
 13371 00001291 50                      		push	ax	; free up a register for caller's ds
 13372 00001292 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 13373                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 13374                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13375                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13376 00001294 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 13377                                  		; 19/10/2022
 13378                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 13379                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 13380                                  		;push	word ptr ds:Old13	; return them to caller
 13381                                  		;push	word ptr ds:Old13+2
 13382                                  		
 13383                                  		; 02/09/2023 (PCDOS 7.1)
 13384                                  		;push	word [Orig13]
 13385 00001299 FF36[B600]              		push	word [Orig13+2]
 13386                                  		;push	word [Old13]
 13387 0000129D FF36[0801]              		push	word [Old13+2]
 13388                                  
 13389                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 13390                                  		;mov	word ptr ds:Orig13+2, ax
 13391                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 13392                                  		;mov	word ptr ds:Old13+2, es
 13393                                  		
 13394                                  		;mov	[Orig13], dx
 13395                                  		; 02/09/2023
 13396 000012A1 8716[B400]              		xchg	dx, [Orig13]
 13397 000012A5 A3[B600]                		mov	[Orig13+2], ax
 13398                                  		;mov	[Old13], bx
 13399                                  		; 02/09/2023
 13400 000012A8 871E[0601]              		xchg	bx, [Old13]
 13401 000012AC 8C06[0801]              		mov	[Old13+2], es
 13402                                  
 13403 000012B0 07                      		pop	es			; es:bx := old old13 vector
 13404                                  		; 02/09/2023
 13405                                  		;pop	bx
 13406 000012B1 1F                      		pop	ds			; ds:dx := old orig13 vector
 13407                                  		;pop	dx ; 02/09/2023
 13408 000012B2 58                      		pop	ax
 13409                                  i2f_iret:
 13410 000012B3 CF                      		iret
 13411                                  ; ---------------------------------------------------------------------------
 13412                                  
 13413                                  mine:					
 13414 000012B4 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 13415 000012B6 73FB                    		jnb	short i2f_iret
 13416 000012B8 08C0                    		or	al, al			; a get installed state request?
 13417 000012BA 7503                    		jnz	short disp_func
 13418 000012BC B0FF                    		mov	al, 0FFh
 13419                                  		;jmp	short i2f_iret
 13420                                  		; 02/09/2023
 13421 000012BE CF                      		iret
 13422                                  ; ---------------------------------------------------------------------------
 13423                                  
 13424                                  disp_func:				
 13425 000012BF 3C01                    		cmp	al, 1			; request for installing bds?
 13426 000012C1 7418                    		jz	short do_subfun_01
 13427 000012C3 3C03                    		cmp	al, 3			; get bds vector?
 13428 000012C5 7423                    		jz	short do_get_bds_vector
 13429                                  
 13430                                  ; set up pointer to request packet
 13431                                  
 13432 000012C7 1E                      		push	ds
 13433 000012C8 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 13434                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13435                                  					; = [0070h:25A0h] = [02C7h:0030h]
 13436                                  		; 19/10/2022
 13437                                  		;mov	word ptr ds:ptrsav, bx
 13438                                  		;mov	word ptr ds:ptrsav+2, es
 13439 000012CD 891E[1200]              		mov	[ptrsav], bx
 13440 000012D1 8C06[1400]              		mov	[ptrsav+2], es
 13441 000012D5 1F                      		pop	ds
 13442                                  		;jmp	far ptr	i2f_dskentry
 13443                                  		; 17/10/2022
 13444                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 13445 000012D6 EA[8D08]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 13446                                  					; NOTE: jump to a FAR function, not an
 13447                                  					;  IRET type function. Callers of
 13448                                  					;  this int2f subfunction will have
 13449                                  					;  to be careful to do a popf
 13450                                  
 13451                                  ; ---------------------------------------------------------------------------
 13452                                  
 13453                                  do_subfun_01:
 13454 000012DB 06                      		push	es
 13455 000012DC 1E                      		push	ds
 13456 000012DD 1E                      		push	ds
 13457 000012DE 07                      		pop	es
 13458                                  		; 17/10/2022
 13459 000012DF 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 13460                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13461                                  					; point	ds: -> Bios_Data
 13462 000012E4 E8BC03                  		call	install_bds
 13463 000012E7 1F                      		pop	ds
 13464 000012E8 07                      		pop	es
 13465                                  		;jmp	short i2f_iret
 13466                                  		; 02/09/2023
 13467 000012E9 CF                      		iret
 13468                                  ; ---------------------------------------------------------------------------
 13469                                  
 13470                                  do_get_bds_vector:
 13471                                  		; 17/10/2022
 13472 000012EA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 13473                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13474 000012EF C53E[1901]              		lds	di, [start_bds]
 13475                                  		;lds	di, ds:start_bds
 13476                                  ;ii2f_iret:	; 10/12/2022
 13477                                  		;jmp	short i2f_iret
 13478                                  		; 02/09/2023
 13479 000012F3 CF                      		iret
 13480                                  ; ---------------------------------------------------------------------------
 13481                                  
 13482                                  ; 17/10/2022
 13483                                  ; 16/10/2022
 13484                                  
 13485                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 13486                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 13487                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 13488                                  
 13489                                  win386call:				
 13490 000012F4 1E                      		push	ds
 13491 000012F5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13492                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13493                                  					; at 2C7h:30h =	70h:25A0h
 13494 000012FA 3C05                    		cmp	al, 5		; Win386_Init
 13495                                  					; is it	win386 initializing?
 13496 000012FC 7410                    		jz	short Win386Init
 13497 000012FE 3C06                    		cmp	al, 6		; Win386_Exit
 13498                                  					; is it	win386 exiting?
 13499 00001300 7523                    		jnz	short win_iret	; if not, continue int2f chain
 13500                                  		; 12/12/2022
 13501 00001302 F6C201                  		test	dl, 1
 13502                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 13503 00001305 751E                    		jnz	short win_iret	; if not win386, then continue
 13504                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 13505 00001307 8026[C508]00            		and	byte [IsWin386], 0 
 13506 0000130C EB17                    		jmp	short win_iret
 13507                                  ; ---------------------------------------------------------------------------
 13508                                  
 13509                                  Win386Init:	
 13510                                  		; 12/12/2022
 13511 0000130E F6C201                  		test	dl, 1			
 13512                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 13513 00001311 7512                    		jnz	short win_iret	; if not win386, then continue
 13514                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 13515 00001313 800E[C508]01            		or	byte [IsWin386], 1
 13516                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 13517                                  		;mov	word ptr ds:SI_Next+2, es
 13518 00001318 891E[9308]              		mov	[SI_Next], bx
 13519 0000131C 8C06[9508]              		mov	[SI_Next+2], es
 13520                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 13521 00001320 BB[9108]                		mov	bx, Win386_SI	; 19/10/2022
 13522 00001323 1E                      		push	ds
 13523 00001324 07                      		pop	es
 13524                                  win_iret:				
 13525 00001325 1F                      		pop	ds
 13526                                  ii2f_iret:	; 10/12/2022
 13527                                  		;jmp	short i2f_iret	; return back up the chain
 13528                                  		; 02/09/2023
 13529 00001326 CF                      		iret
 13530                                  ; ---------------------------------------------------------------------------
 13531                                  
 13532                                  handle_multmult:			
 13533 00001327 3C01                    		cmp	al, 1
 13534 00001329 7514                    		jnz	short try_2
 13535 0000132B 1E                      		push	ds
 13536 0000132C E84500                  		call	HMAPtr		; get offset of free HMA
 13537                                  		; 10/12/2022
 13538                                  		;xor	bx, bx
 13539                                  		;dec	bx
 13540 0000132F BBFFFF                  		mov	bx, 0FFFFh
 13541 00001332 8EC3                    		mov	es, bx		; seg of HMA
 13542 00001334 89FB                    		mov	bx, di
 13543 00001336 F7D3                    		not	bx
 13544 00001338 09DB                    		or	bx, bx
 13545 0000133A 7401                    		jz	short try_1
 13546 0000133C 43                      		inc	bx
 13547                                  try_1:
 13548 0000133D 1F                      		pop	ds
 13549                                  		;jmp	short ii2f_iret
 13550                                  		; 02/09/2023
 13551 0000133E CF                      		iret
 13552                                  ; ---------------------------------------------------------------------------
 13553                                  
 13554                                  try_2:					
 13555 0000133F 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 13556 00001341 7530                    		jnz	short try_3
 13557 00001343 1E                      		push	ds
 13558                                  		; 10/12/2022
 13559                                  		;xor	di, di
 13560                                  		;dec	di
 13561 00001344 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 13562 00001347 8EC7                    		mov	es, di
 13563 00001349 E82800                  		call	HMAPtr		; get offset of free HMA
 13564 0000134C 83FFFF                  		cmp	di, 0FFFFh
 13565 0000134F 7421                    		jz	short InsuffHMA
 13566 00001351 F7DF                    		neg	di		; free space in HMA
 13567 00001353 39FB                    		cmp	bx, di
 13568 00001355 7605                    		jbe	short try_4
 13569                                  		; 10/12/2022
 13570                                  		;sub	di, di
 13571                                  		;dec	di
 13572 00001357 BFFFFF                  		mov	di, 0FFFFh
 13573                                  		;jmp	short InsuffHMA
 13574                                  		; 02/09/2023
 13575 0000135A 1F                      		pop	ds
 13576 0000135B CF                      		iret
 13577                                  ; ---------------------------------------------------------------------------
 13578                                  
 13579                                  try_4:					
 13580                                  		;mov	di, ds:FreeHMAPtr
 13581 0000135C 8B3E[EB08]              		mov	di, [FreeHMAPtr]
 13582 00001360 83C30F                  		add	bx, 15
 13583                                  		;and	bx, 0FFF0h
 13584                                  		; 10/12/2022
 13585 00001363 80E3F0                  		and	bl, 0F0h
 13586                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 13587 00001366 011E[EB08]              		add	[FreeHMAPtr], bx
 13588 0000136A 7506                    		jnz	short InsuffHMA
 13589 0000136C C706[EB08]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 13590                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 13591                                  					; no more HMA if we have wrapped
 13592                                  InsuffHMA:
 13593 00001372 1F                      		pop	ds
 13594                                  		; 10/12/2022
 13595                                  try_3:		
 13596                                  		;jmp	short ii2f_iret
 13597                                  		; 02/09/2023
 13598 00001373 CF                      		iret
 13599                                  ; ---------------------------------------------------------------------------
 13600                                  
 13601                                  		; 10/12/2022
 13602                                  ;try_3:					
 13603                                  		;jmp	ii2f_iret
 13604                                  
 13605                                  ; =============== S U B	R O U T	I N E =======================================
 13606                                  
 13607                                  ; 16/10/2022
 13608                                  
 13609                                  ;--------------------------------------------------------------------------
 13610                                  ;
 13611                                  ; procedure : HMAPtr
 13612                                  ;
 13613                                  ;		Gets the offset of the free HMA area ( with respect to
 13614                                  ;							seg ffff )
 13615                                  ;		If DOS has not moved high, tries to move DOS high.
 13616                                  ;		In the course of doing this, it will allocate all the HMA
 13617                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 13618                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 13619                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 13620                                  ;
 13621                                  ;	RETURNS : offset of free HMA in DI
 13622                                  ;		  BIOS_DATA, seg in DS
 13623                                  ;
 13624                                  ;--------------------------------------------------------------------------
 13625                                  
 13626                                  		; 17/10/2022
 13627                                  HMAPtr:
 13628 00001374 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13629                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 13630 00001379 8B3E[EB08]              		mov	di, [FreeHMAPtr]
 13631                                  		;mov	di, ds:FreeHMAPtr
 13632 0000137D 83FFFF                  		cmp	di, 0FFFFh
 13633 00001380 750F                    		jnz	short HMAPtr_retn
 13634 00001382 803E[F108]00            		cmp	byte [SysinitPresent], 0
 13635                                  		;cmp	ds:SysinitPresent, 0
 13636 00001387 7408                    		jz	short HMAPtr_retn
 13637 00001389 FF1E[ED08]              		call	far [MoveDOSIntoHMA]
 13638                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 13639 0000138D 8B3E[EB08]              		mov	di, [FreeHMAPtr]
 13640                                  		;mov	di, ds:FreeHMAPtr
 13641                                  HMAPtr_retn:				
 13642 00001391 C3                      		retn
 13643                                  
 13644                                  ; =============== S U B	R O U T	I N E =======================================
 13645                                  
 13646                                  ; 16/10/2022
 13647                                  
 13648                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 13649                                  ; but go ahead and update direction flag, si, & di
 13650                                  
 13651                                  move_sector:
 13652                                  
 13653                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 13654                                  ; any segment to be a fault. Theoretically, this could be handled
 13655                                  ; by the fault handler and the behavior of an 8086 could be emulated
 13656                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 13657                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 13658                                  ; also handles the fault incorrectly in their ROM BIOS for real
 13659                                  ; mode. Their fault handler was only designed to deal with one
 13660                                  ; special case which occurred in a magazine benchmark, but didn't
 13661                                  ; handle the general case worth beans.
 13662                                  ;
 13663                                  ; Simply changing this code to do a byte loop would work okay but
 13664                                  ; would involve a general case performance hit. Therefore, we'll
 13665                                  ; check for either source or destination offsets being within one
 13666                                  ; sector of the end of their segments and only in that case fall
 13667                                  ; back to a byte move.
 13668                                  
 13669 00001392 FC                      		cld
 13670 00001393 51                      		push	cx
 13671 00001394 B90001                  		mov	cx, 256
 13672 00001397 81FE00FE                		cmp	si, 0FE00h
 13673 0000139B 770A                    		ja	short movsec_bytes
 13674 0000139D 81FF00FE                		cmp	di, 0FE00h
 13675 000013A1 7704                    		ja	short movsec_bytes
 13676 000013A3 F3A5                    		rep movsw
 13677 000013A5 59                      		pop	cx
 13678 000013A6 C3                      		retn
 13679                                  ; ---------------------------------------------------------------------------
 13680                                  
 13681                                  movsec_bytes:				
 13682 000013A7 D1E1                    		shl	cx, 1
 13683 000013A9 F3A4                    		rep movsb
 13684 000013AB 59                      		pop	cx
 13685 000013AC C3                      		retn
 13686                                  
 13687                                  ; =============== S U B	R O U T	I N E =======================================
 13688                                  
 13689                                  ; 16/10/2022
 13690                                  
 13691                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 13692                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 13693                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 13694                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 13695                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 13696                                  ; but we break down a request when we get an ecc or dma error into several
 13697                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 13698                                  ; number of sectors on a track on the medium, and the request would fail.
 13699                                  ;
 13700                                  ; input conditions:
 13701                                  ;	all registers set up for an int 13 request.
 13702                                  ;
 13703                                  ; output:
 13704                                  ;	dh - contains starting head number for request
 13705                                  ;	cx - contains starting sector and cylinder numbers
 13706                                  ;	(the above may or may not have been changed, and are 0-based)
 13707                                  ;	all other registers preserved.
 13708                                  
 13709                                  check_wrap:	
 13710 000013AD 50                      		push	ax
 13711 000013AE 53                      		push	bx
 13712 000013AF 06                      		push	es
 13713 000013B0 57                      		push	di
 13714 000013B1 E86C00                  		call	find_bds	; get pointer to bds for drive in dl
 13715 000013B4 725E                    		jb	short no_wrap	; finished if DOS doesn't use it
 13716                                  		; 12/12/2022
 13717 000013B6 26F6452301              		test	byte [es:di+23h], 1
 13718                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13719 000013BB 7457                    		jz	short no_wrap	; no wrapping for removable media
 13720 000013BD 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13721 000013C1 89C8                    		mov	ax, cx
 13722 000013C3 83E03F                  		and	ax, 3Fh		; extract sector number
 13723 000013C6 39D8                    		cmp	ax, bx		; are we going to wrap?
 13724 000013C8 764A                    		jbe	short no_wrap
 13725 000013CA F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 13726                                  
 13727                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 13728                                  ; last sector on that track.
 13729                                  
 13730 000013CC 08E4                    		or	ah, ah
 13731 000013CE 7503                    		jnz	short not_on_bound
 13732                                  		; 18/12/2022
 13733 000013D0 48                      		dec	ax ; *
 13734 000013D1 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 13735                                  					; if on	boundary
 13736                                  		;dec	al ; *		; also decrement # of head wraps
 13737                                  not_on_bound:				
 13738 000013D3 80E1C0                  		and	cl, 0C0h	; zero out sector #
 13739 000013D6 08E1                    		or	cl, ah		; or in	new sector #
 13740 000013D8 30E4                    		xor	ah, ah		; ax = # of head wraps
 13741 000013DA 40                      		inc	ax
 13742 000013DB 00F0                    		add	al, dh		; add in starting head #
 13743 000013DD 80D400                  		adc	ah, 0		; catch	any carry
 13744                                  		; 02/09/2023
 13745 000013E0 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13746 000013E4 39D8                    		cmp	ax, bx
 13747                                  		;cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 13748                                  					; are we going to wrap around a	head?
 13749 000013E6 7632                    		jbe	short no_wrap_head ; do	not lose new head number!!
 13750 000013E8 52                      		push	dx		; preserve drive number and head number
 13751 000013E9 31D2                    		xor	dx, dx
 13752                                  		;mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 13753 000013EB F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 13754                                  
 13755                                  ; careful here! if new head # is 0, then we are on the last head.
 13756                                  
 13757 000013ED 09D2                    		or	dx, dx
 13758 000013EF 7507                    		jnz	short no_head_bound
 13759 000013F1 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 13760                                  
 13761                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 13762                                  
 13763 000013F3 09C0                    		or	ax, ax
 13764 000013F5 7401                    		jz	short no_head_bound
 13765 000013F7 48                      		dec	ax		; reduce number	of cylinder wraps
 13766                                  no_head_bound:				
 13767 000013F8 88D7                    		mov	bh, dl		; bh has new head number
 13768 000013FA 5A                      		pop	dx		; restore drive number and head number
 13769 000013FB FECF                    		dec	bh		; get it 0-based
 13770 000013FD 88FE                    		mov	dh, bh		; set up new head number in dh
 13771 000013FF 88CF                    		mov	bh, cl
 13772 00001401 80E73F                  		and	bh, 3Fh		; preserve sector number
 13773 00001404 B306                    		mov	bl, 6
 13774 00001406 86CB                    		xchg	cl, bl
 13775 00001408 D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 13776 0000140A 00C5                    		add	ch, al		; add in cylinder wrap
 13777 0000140C 10E3                    		adc	bl, ah		; add in high byte
 13778 0000140E D2E3                    		shl	bl, cl		; move up to ms	end
 13779 00001410 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 13780 00001412 08F9                    		or	cl, bh		; or in	sector number
 13781                                  no_wrap:				
 13782 00001414 F8                      		clc
 13783 00001415 5F                      		pop	di
 13784 00001416 07                      		pop	es
 13785 00001417 5B                      		pop	bx
 13786 00001418 58                      		pop	ax
 13787 00001419 C3                      		retn
 13788                                  ; ---------------------------------------------------------------------------
 13789                                  
 13790                                  no_wrap_head:				
 13791 0000141A 88C6                    		mov	dh, al		; do not lose new head number
 13792 0000141C FECE                    		dec	dh		; get it 0-based
 13793 0000141E EBF4                    		jmp	short no_wrap
 13794                                  
 13795                                  ; =============== S U B	R O U T	I N E =======================================
 13796                                  
 13797                                  ; 16/10/2022
 13798                                  
 13799                                  ; this is a special version of the bds lookup code which is
 13800                                  ; based on physical drives rather than the usual logical drives
 13801                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 13802                                  ; otherwise carry is clear
 13803                                  ;
 13804                                  ; guaranteed to trash no registers except es:di
 13805                                  
 13806                                  		; 19/10/2022
 13807                                  find_bds:	
 13808 00001420 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 13809                                  fbds_1:					
 13810 00001424 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 13811 00001428 7409                    		jz	short fdbs_2
 13812 0000142A 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 13813                                  					; go to next bds
 13814 0000142D 83FFFF                  		cmp	di, 0FFFFh
 13815 00001430 75F2                    		jnz	short fbds_1
 13816 00001432 F9                      		stc
 13817                                  fdbs_2:					
 13818 00001433 C3                      		retn
 13819                                  
 13820                                  ; =============== S U B	R O U T	I N E =======================================
 13821                                  
 13822                                  ; 16/10/2022
 13823                                  		; 17/10/2022
 13824                                  doint:
 13825                                  		; 10/12/2022
 13826 00001434 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13827                                  					; get physical drive number
 13828                                  		; 19/10/2022 - Temporary !
 13829                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 13830                                  		
 13831 00001437 30E4                    		xor	ah, ah
 13832 00001439 08C0                    		or	al, al
 13833 0000143B 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 13834                                  		; 10/12/2022
 13835 0000143D 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13836                                  					; get request code
 13837                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 13838 00001440 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13839                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 13840 00001443 9D                      		popf
 13841                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 13842                                  		; 17/10/2022
 13843 00001444 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 13844                                  		;;call	call_orig13	; call far 70h:797h
 13845                                  					; call far KERNEL_SEGMENT:call_orig13
 13846 00001449 9C                      		pushf
 13847                                  		; 10/12/2022
 13848 0000144A 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 13849                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 13850                                  dointdone:				
 13851 0000144D C3                      		retn
 13852                                  
 13853                                  ;----------------------------------------------------------------------------
 13854                                  
 13855                                  ; 16/10/2022
 13856                                  
 13857                                  ; this is the true int 13 handler. we parse the request to see if there is
 13858                                  ; a dma violation. if so, depending on the function, we:
 13859                                  ;   read/write break the request into three pieces and move the middle one
 13860                                  ;	       into our internal buffer.
 13861                                  ;
 13862                                  ;   format     copy the format table into the buffer
 13863                                  ;   verify     point the transfer address into the buffer
 13864                                  ;
 13865                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13866                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13867                                  ; the offending sector into the buffer below and do the i/o from there.
 13868                                  
 13869                                  ;struc INT13FRAME
 13870                                  ;.oldbp: resw
 13871                                  ;.oldax: resw 
 13872                                  ;.oldbx: resw
 13873                                  ;.oldcx: resw
 13874                                  ;.olddx: resw
 13875                                  ;.oldds: resw	; now we save caller's ds, too
 13876                                  ;.olddd: resd
 13877                                  ;.oldf:	resw
 13878                                  ;end struc
 13879                                  
 13880                                  ;----------------------------------------------------------------------------
 13881                                  
 13882                                  ;   entry conditions:
 13883                                  ;	ah = function
 13884                                  ;	al = number of sectors
 13885                                  ;	es:bx = dma address
 13886                                  ;	cx = packed track and sector
 13887                                  ;	dx = head and drive
 13888                                  ;   output conditions:
 13889                                  ;	no dma violation.
 13890                                  
 13891                                  ;	use extreme caution when working with this code. In general,
 13892                                  ;	  all registers are hot at all times.
 13893                                  ;
 13894                                  ;	question:  does this code handle cases where dma errors
 13895                                  ;	  occur during ecc retries, and where ecc errors occur during
 13896                                  ;	  dma breakdowns???? Hmmmmm.
 13897                                  
 13898                                  ;----------------------------------------------------------------------------
 13899                                  
 13900                                  ; ---------------------------------------------------------------------------
 13901                                  
 13902 0000144E 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13903                                  
 13904                                  ; 17/10/2022
 13905                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13906                                  ; 09/12/2022
 13907                                  DTYPEARRAY equ dtype_array
 13908                                  
 13909                                  ; ---------------------------------------------------------------------------
 13910                                  
 13911                                  ; stick some special stuff out of mainline
 13912                                  
 13913                                  ; we know we're doing a format command. if we have changeline
 13914                                  ; support, then flag some special changed stuff and set changed
 13915                                  ; by format bit for all logical drives using this physical drive
 13916                                  
 13917                                  format_special_stuff:
 13918 00001452 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 13919 00001457 7459                    		jz	short format_special_stuff_done ; brif not
 13920 00001459 53                      		push	bx
 13921 0000145A BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13922 0000145D E83004                  		call	set_changed_dl	; indicate that media changed by format
 13923 00001460 5B                      		pop	bx
 13924 00001461 EB4F                    		jmp	short format_special_stuff_done
 13925                                  ; ---------------------------------------------------------------------------
 13926                                  
 13927                                  ; 16/10/2022
 13928                                  
 13929                                  ; we know we've got ec35's on the system. Now see if we're doing
 13930                                  ; a floppy. If so, create a mask and see if this particular
 13931                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13932                                  
 13933                                  		; 19/10/2022
 13934                                  ec35_special_stuff:
 13935 00001463 84D2                    		test	dl, dl		; floppy or hard disk?
 13936 00001465 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13937 00001467 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13938 00001468 51                      		push	cx
 13939 00001469 88D1                    		mov	cl, dl		; turn drive number into bit map
 13940 0000146B B001                    		mov	al, 1		; assume drive 0
 13941 0000146D D2E0                    		shl	al, cl		; shift	over correct number of times
 13942 0000146F 8406[2805]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13943 00001473 59                      		pop	cx
 13944 00001474 58                      		pop	ax
 13945 00001475 7442                    		jz	short ec35_special_stuff_done
 13946                                  					; done if this floppy is not an	ec35
 13947 00001477 53                      		push	bx		; free up a far	pointer	(es:bx)
 13948 00001478 06                      		push	es
 13949                                  		; 17/10/2022
 13950 00001479 2EC41E[4E14]            		les	bx, [cs:DTYPEARRAY]
 13951                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13952                                  					; 0070h:3A65h =	2C7h:14F5h
 13953 0000147E 00D3                    		add	bl, dl
 13954 00001480 80D700                  		adc	bh, 0		; find entry for this drive
 13955 00001483 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13956                                  					; (360k	disk in	360k drive,
 13957                                  					; no double-stepping, 250 kbs transfer rate)
 13958 00001487 07                      		pop	es
 13959 00001488 5B                      		pop	bx
 13960 00001489 EB2E                    		jmp	short ec35_special_stuff_done
 13961                                  ; ---------------------------------------------------------------------------
 13962                                  
 13963                                  ; 16/10/2022
 13964                                  
 13965                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13966                                  ; this function does not reset the common buses after the execution.
 13967                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13968                                  ; will issue ah=1 (read status) call to reset the buses.
 13969                                  
 13970                                  ps2_special_stuff:
 13971 0000148B 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13972                                  					; read driver parm ?
 13973 00001490 7407                    		jz	short ps2_30_problem
 13974 00001492 803E[1E00]15            		cmp	byte [prevoper], 15h
 13975                                  					; apparently function 15h fails, too
 13976 00001497 752D                    		jnz	short ps2_special_stuff_done
 13977                                  ps2_30_problem:
 13978 00001499 50                      		push	ax
 13979 0000149A B401                    		mov	ah, 1
 13980                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13981                                  		; 17/10/2022
 13982 0000149C 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 13983                                  		;call	call_orig13	; call far 70:797h
 13984                                  					; call far KERNEL_SEGMENT:call_orig13
 13985 000014A1 58                      		pop	ax
 13986 000014A2 EB22                    		jmp	short ps2_special_stuff_done
 13987                                  ; ---------------------------------------------------------------------------
 13988                                  
 13989                                  ; 17/10/2022
 13990                                  ; 16/10/2022
 13991                                  
 13992                                  ; here is the actual int13 handler
 13993                                  
 13994                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13995                                  
 13996                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13997                                  ; vectoring up here from Bios_Data
 13998                                  
 13999                                  		; 19/10/2022
 14000 000014A4 1E                      		push	ds		; save caller's ds register first thing
 14001                                  		;;mov	ds, word [cs:0030h]
 14002                                  					; and set up our own ds -> Bios_Data
 14003 000014A5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 14004                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 14005                                  					; = [02C7h:0030h] = [0070h:25A0h]
 14006                                  
 14007                                  ; let the operation proceed. if there is a dma violation, then we do things
 14008                                  
 14009 000014AA A3[1E00]                		mov	[prevoper], ax	; save request
 14010 000014AD 80FC05                  		cmp	ah, 5		; romformat
 14011 000014B0 74A0                    		jz	short format_special_stuff
 14012                                  					; go do special stuff for format
 14013                                  format_special_stuff_done:
 14014 000014B2 803E[2805]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 14015 000014B7 75AA                    		jnz	short ec35_special_stuff
 14016                                  					; go handle it out of line if so
 14017                                  ec35_special_stuff_done:
 14018                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h
 14019 000014B9 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14020                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14021                                  		
 14022 000014BE 9C                      		pushf			; save result flags
 14023                                  		
 14024 000014BF 803E[3506]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 14025                                  					; mdl_ps2_30
 14026 000014C4 74C5                    		jz	short ps2_special_stuff
 14027                                  					; exit mainline to address special
 14028                                  ps2_special_stuff_done:			; ps2/30 problem if so
 14029 000014C6 9D                      		popf
 14030 000014C7 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 14031                                  ret_from_i13:
 14032 000014C9 1F                      		pop	ds
 14033 000014CA CA0200                  		retf	2		; restore ds &	iret w/flags
 14034                                  ; ---------------------------------------------------------------------------
 14035                                  
 14036                                  ; most of our code exits through here. If carry isn't set, then
 14037                                  ; just do a simple exit. Else doublecheck that we aren't getting
 14038                                  ; a changeline error.
 14039                                  
 14040                                  i13ret_ck_chglinerr:
 14041 000014CD 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 14042                                  i13_ret_error:
 14043 000014CF 80FC06                  		cmp	ah, 6		; did i	see a change event?
 14044 000014D2 7513                    		jnz	short int13b	; skip if wrong	error
 14045 000014D4 08D2                    		or	dl, dl		; is this for the hard disk?
 14046 000014D6 780F                    		js	short int13b	; yes, ignore
 14047 000014D8 803E[7700]00            		cmp	byte [fhave96], 0
 14048 000014DD 7408                    		jz	short int13b	; just in case ROM returned this
 14049                                  					; error	even though it told us it
 14050                                  					; never	would
 14051 000014DF 53                      		push	bx
 14052 000014E0 BB4000                  		mov	bx, 40h		; fchanged
 14053 000014E3 E8AA03                  		call	set_changed_dl
 14054 000014E6 5B                      		pop	bx
 14055                                  int13b:
 14056 000014E7 F9                      		stc			; now return the error
 14057 000014E8 EBDF                    		jmp	short ret_from_i13
 14058                                  ; ---------------------------------------------------------------------------
 14059                                  
 14060                                  ; some kind of error occurred. see if it is dma violation
 14061                                  
 14062                                  goterr13:
 14063 000014EA 80FC09                  		cmp	ah, 9		; dma error?
 14064 000014ED 747C                    		jz	short gotdmaerr
 14065                                  goterr13_xxxx:
 14066 000014EF 80FC11                  		cmp	ah, 11h		; ecc error?
 14067 000014F2 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 14068 000014F4 803E[2F06]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 14069 000014F9 74D4                    		jz	short i13_ret_error
 14070                                  
 14071 000014FB 803E[1F00]02            		cmp	byte [prevoper+1], 2
 14072                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 14073                                  					; (2 = romread)
 14074                                  					; ECC correction only applies to reads
 14075 00001500 75CD                    		jnz	short i13_ret_error
 14076                                  
 14077 00001502 30E4                    		xor	ah, ah
 14078                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 14079                                  		; 17/10/2022
 14080 00001504 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14081                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14082                                  					; call far 70:797h
 14083 00001509 A1[1E00]                		mov	ax, [prevoper]
 14084 0000150C 30E4                    		xor	ah, ah		; return code =	no error
 14085 0000150E 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 14086 00001510 74B7                    		jz	short ret_from_i13 ; return with carry clear
 14087 00001512 53                      		push	bx
 14088 00001513 51                      		push	cx
 14089 00001514 52                      		push	dx
 14090 00001515 A2[2000]                		mov	[number_of_sec], al
 14091                                  loop_ecc:
 14092 00001518 B80102                  		mov	ax, 201h	; read one sector
 14093                                  
 14094                                  ; we do reads one sector at a time. this ensures that we will eventually
 14095                                  ; finish the request since ecc errors on one sector do read in that sector.
 14096                                  ;
 14097                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 14098                                  ; that attempt to read more sectors than are available on a particular
 14099                                  ; track.
 14100                                  ;
 14101                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 14102                                  ; this request.
 14103                                  ;
 14104                                  ; at this point, all registers are set up for the call to orig13, except
 14105                                  ; that there may be a starting sector number that is bigger than the number
 14106                                  ; of sectors on a track.
 14107                                  ;
 14108 0000151B E88FFE                  		call	check_wrap	; get correct parameters for int 13
 14109                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 14110                                  		; 17/10/2022
 14111 0000151E 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14112                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14113 00001523 730C                    		jnb	short ok11_op
 14114 00001525 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 14115 00001528 741B                    		jz	short handle_dma_during_ecc
 14116 0000152A 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 14117 0000152D 7510                    		jnz	short ok11_exit_err
 14118                                  		; 10/12/2022
 14119                                  		; xor ax ax -> ah = 0
 14120                                  		;mov	ah, 0		; ecc error. reset the system again.
 14121 0000152F 31C0                    		xor	ax, ax		; clear	the error code so that if this
 14122                                  					; was the last sector, no error	code
 14123                                  					; will be returned for the corrected
 14124                                  					; read.	(clear carry too.)
 14125                                  ok11_op:
 14126 00001531 FE0E[2000]              		dec	byte [number_of_sec]
 14127 00001535 7409                    		jz	short ok11_exit	; all done?
 14128 00001537 FEC1                    		inc	cl		; advance sector number
 14129                                  					; add 200h to address
 14130 00001539 FEC7                    		inc	bh
 14131 0000153B FEC7                    		inc	bh
 14132 0000153D EBD9                    		jmp	short loop_ecc
 14133                                  ; ---------------------------------------------------------------------------
 14134                                  
 14135                                  ; locate error returns centrally
 14136                                  
 14137                                  ok11_exit_err:
 14138 0000153F F9                      		stc			; set carry bit again.
 14139                                  ok11_exit:
 14140 00001540 5A                      		pop	dx
 14141 00001541 59                      		pop	cx
 14142 00001542 5B                      		pop	bx
 14143 00001543 EB88                    		jmp	short i13ret_ck_chglinerr
 14144                                  ; ---------------------------------------------------------------------------
 14145                                  
 14146                                  ; do the single sector read again, this time into our temporary
 14147                                  ; buffer, which is guaranteed not to have a DMA error, then
 14148                                  ; move the data to its proper location and proceed
 14149                                  
 14150                                  handle_dma_during_ecc:
 14151 00001545 06                      		push	es
 14152 00001546 53                      		push	bx
 14153 00001547 BB[4E01]                		mov	bx, disksector
 14154 0000154A 1E                      		push	ds
 14155 0000154B 07                      		pop	es		; point es:bx to buffer
 14156 0000154C B80102                  		mov	ax, 201h	; read one sector
 14157                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 14158                                  		; 17/10/2022
 14159 0000154F 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14160                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14161 00001554 5B                      		pop	bx
 14162 00001555 07                      		pop	es
 14163 00001556 7305                    		jnb	short handle_dma_during_ecc_noerr
 14164 00001558 80FC11                  		cmp	ah, 11h
 14165 0000155B 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 14166                                  
 14167                                  ; now we're kosher. Copy the data to where it belongs and resume
 14168                                  ; the ECC looping code.
 14169                                  
 14170                                  handle_dma_during_ecc_noerr:
 14171 0000155D 56                      		push	si
 14172 0000155E 57                      		push	di
 14173 0000155F 89DF                    		mov	di, bx
 14174 00001561 BE[4E01]                		mov	si, disksector
 14175 00001564 E82BFE                  		call	move_sector
 14176 00001567 5F                      		pop	di
 14177 00001568 5E                      		pop	si
 14178 00001569 EBC6                    		jmp	short ok11_op
 14179                                  ; ---------------------------------------------------------------------------
 14180                                  
 14181                                  ; we truly have a dma violation. restore register ax and retry the
 14182                                  ; operation as best we can.
 14183                                  
 14184                                  gotdmaerr:
 14185 0000156B A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 14186 0000156E FB                      		sti
 14187 0000156F 80FC02                  		cmp	ah, 2		; romread
 14188 00001572 723B                    		jb	short i13_done_dmaerr
 14189                                  					; just pass dma error thru for
 14190                                  					; functions we don't handle
 14191 00001574 80FC04                  		cmp	ah, 4		; romverify
 14192 00001577 743C                    		jz	short intverify
 14193 00001579 80FC05                  		cmp	ah, 5		; romformat
 14194 0000157C 7448                    		jz	short intformat
 14195 0000157E 772F                    		ja	short i13_done_dmaerr
 14196                                  
 14197                                  ; we are doing a read/write call. check for dma problems
 14198                                  
 14199                                  ;	******** set up stack frame here!!! ********
 14200                                  
 14201 00001580 52                      		push	dx
 14202 00001581 51                      		push	cx
 14203 00001582 53                      		push	bx
 14204 00001583 50                      		push	ax
 14205 00001584 55                      		push	bp
 14206 00001585 89E5                    		mov	bp, sp
 14207 00001587 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 14208 00001589 D1E2                    		shl	dx, 1
 14209 0000158B D1E2                    		shl	dx, 1
 14210 0000158D D1E2                    		shl	dx, 1
 14211 0000158F D1E2                    		shl	dx, 1		; segment converted to absolute	address
 14212 00001591 01DA                    		add	dx, bx		; combine with offset
 14213 00001593 81C2FF01                		add	dx, 511		; simulate a transfer
 14214                                  
 14215                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 14216                                  ; we skip the first transfer and perform the remaining buffering and transfer
 14217                                  
 14218 00001597 7303                    		jnb	short no_skip_first
 14219 00001599 E98300                  		jmp	bufferx		; restore dh=head & do buffer
 14220                                  ; ---------------------------------------------------------------------------
 14221                                  
 14222                                  no_skip_first:
 14223 0000159C D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 14224 0000159E B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 14225 000015A0 28F4                    		sub	ah, dh
 14226                                  
 14227                                  ; ah is now the number of sectors that we can successfully write in this
 14228                                  ; segment. if this number is above or equal to the requested number, then we
 14229                                  ; continue the operation as normal. otherwise, we break it into pieces.
 14230                                  ;
 14231                                  ; wait a sec. this is goofy. the whole reason we got here in the
 14232                                  ; first place is because we got a dma error. so it's impossible
 14233                                  ; for the whole block to fit, unless the dma error was returned
 14234                                  ; in error.
 14235                                  
 14236 000015A2 38C4                    		cmp	ah, al		; can we fit it	in?
 14237 000015A4 7236                    		jb	short doblock	; no, perform blocking.
 14238                                  
 14239                                  ; yes, the request fits. let it happen.
 14240                                  
 14241 000015A6 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 14242                                  					; set up head number
 14243 000015A9 E888FE                  		call	doint
 14244 000015AC E9D900                  		jmp	bad13		; and return from this place
 14245                                  ; ---------------------------------------------------------------------------
 14246                                  
 14247                                  i13_done_dmaerr:
 14248 000015AF B409                    		mov	ah, 9		; pass dma error thru to caller
 14249 000015B1 F9                      		stc
 14250 000015B2 E914FF                  		jmp	ret_from_i13	; return with error,
 14251                                  					; we know it's not a changeline error
 14252                                  ; ---------------------------------------------------------------------------
 14253                                  
 14254                                  ; verify the given sectors. place the buffer pointer into our space.
 14255                                  
 14256                                  intverify:
 14257 000015B5 06                      		push	es		; save caller's dma address
 14258 000015B6 53                      		push	bx
 14259 000015B7 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 14260 000015B8 07                      		pop	es
 14261                                  dosimple:
 14262 000015B9 BB[4E01]                		mov	bx, disksector
 14263                                  					; do the i/o from Bios_Data:disksector
 14264                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 14265                                  		; 17/10/2022
 14266 000015BC 9A[8E07]7000            		call	DOSBIOSSEG:call_orig13
 14267                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 14268 000015C1 5B                      		pop	bx
 14269 000015C2 07                      		pop	es
 14270 000015C3 E907FF                  		jmp	i13ret_ck_chglinerr
 14271                                  ; ---------------------------------------------------------------------------
 14272                                  
 14273                                  ; format operation. copy the parameter table into Bios_Data:disksector
 14274                                  
 14275                                  intformat:
 14276 000015C6 06                      		push	es
 14277 000015C7 53                      		push	bx
 14278 000015C8 56                      		push	si
 14279 000015C9 57                      		push	di
 14280 000015CA 1E                      		push	ds
 14281                                  
 14282                                  ; point ds to the caller's dma buffer, es to Bios_Data
 14283                                  ; in other words, swap (ds, es)
 14284                                  
 14285 000015CB 06                      		push	es
 14286 000015CC 1E                      		push	ds
 14287 000015CD 07                      		pop	es
 14288 000015CE 1F                      		pop	ds
 14289 000015CF 89DE                    		mov	si, bx
 14290 000015D1 BF[4E01]                		mov	di, disksector
 14291 000015D4 E8BBFD                  		call	move_sector	; user's data into Bios_Data:disksector
 14292 000015D7 1F                      		pop	ds
 14293 000015D8 5F                      		pop	di
 14294 000015D9 5E                      		pop	si		; do the i/o from
 14295 000015DA EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 14296                                  ; ---------------------------------------------------------------------------
 14297                                  
 14298                                  ; we can't fit the request into the entire block. perform the operation on
 14299                                  ; the first block.
 14300                                  ;
 14301                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 14302                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 14303                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 14304                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 14305                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 14306                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 14307                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 14308                                  ; doblock will handle the first block of requested sectors within the
 14309                                  ; boundary of this safe value.
 14310                                  
 14311                                  doblock:
 14312                                  
 14313                                  ; try to get the # of sectors/track from bds via rom drive number.
 14314                                  ; for any mini disks installed, here we have to pray that they have the
 14315                                  ; same # of sector/track as the main dos partition disk drive.
 14316                                  				
 14317 000015DC 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 14318                                  					; get head #, drive #
 14319 000015DF 51                      		push	cx
 14320 000015E0 06                      		push	es
 14321 000015E1 57                      		push	di		; ah - # of sectors before dma boundary
 14322                                  					; al - requested # of sectors for i/o.
 14323 000015E2 E83BFE                  		call	find_bds
 14324 000015E5 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 14325                                  		; 12/12/2022
 14326 000015E9 26F6452301              		test	byte [es:di+23h], 1
 14327                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 14328 000015EE 5F                      		pop	di
 14329 000015EF 07                      		pop	es
 14330 000015F0 88E0                    		mov	al, ah		; set al=ah for	floppies
 14331 000015F2 7404                    		jz	short doblockflop ; they are track by track operation
 14332 000015F4 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 14333 000015F6 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 14334                                  doblockflop:
 14335 000015F8 59                      		pop	cx
 14336                                  doblockcontinue:
 14337 000015F9 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 14338 000015FB 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 14339 000015FD 50                      		push	ax
 14340 000015FE 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 14341 00001600 EB03                    		jmp	short doblockdoint
 14342                                  ; ---------------------------------------------------------------------------
 14343                                  
 14344                                  doblocklast:
 14345 00001602 88C4                    		mov	ah, al
 14346 00001604 50                      		push	ax
 14347                                  doblockdoint:				; let ah = al =	# of sectors for this shot
 14348 00001605 E82CFE                  		call	doint
 14349 00001608 727E                    		jb	short bad13	; something happened, bye!
 14350 0000160A 58                      		pop	ax
 14351 0000160B 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 14352                                  					; decrement by the successful operation
 14353 0000160E 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 14354 00001610 00E7                    		add	bh, ah		; advance dma addres
 14355 00001612 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 14356 00001614 38C4                    		cmp	ah, al		; check	the previous value
 14357 00001616 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 14358                                  					; then we are done already.
 14359 00001618 28E0                    		sub	al, ah		; otherwise,
 14360                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 14361 0000161A E890FD                  		call	check_wrap	; get new cx, dh for the next operation.
 14362 0000161D EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 14363                                  ; ---------------------------------------------------------------------------
 14364                                  
 14365                                  bufferx:
 14366 0000161F 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 14367                                  					; set up head number
 14368                                  buffer:
 14369 00001622 53                      		push	bx
 14370 00001623 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 14371 00001626 80FC03                  		cmp	ah, 3		; romwrite
 14372 00001629 7525                    		jnz	short doread	;
 14373                                  
 14374                                  ; copy the offending sector into local buffer
 14375                                  
 14376 0000162B 06                      		push	es
 14377 0000162C 1E                      		push	ds
 14378 0000162D 56                      		push	si
 14379 0000162E 57                      		push	di
 14380 0000162F 1E                      		push	ds		; exchange segment registers
 14381 00001630 06                      		push	es
 14382 00001631 1F                      		pop	ds
 14383 00001632 07                      		pop	es
 14384 00001633 BF[4E01]                		mov	di, disksector	; where to move
 14385 00001636 57                      		push	di		; save it
 14386 00001637 89DE                    		mov	si, bx		; source
 14387 00001639 E856FD                  		call	move_sector	; move sector into local buffer
 14388 0000163C 5B                      		pop	bx		; new transfer address
 14389                                  					; (es:bx = Bios_Data:diskbuffer)
 14390 0000163D 5F                      		pop	di		; restore caller's di & si
 14391 0000163E 5E                      		pop	si
 14392 0000163F 1F                      		pop	ds		; restore Bios_Data
 14393                                  
 14394                                  ; see if we are wrapping around a track or head
 14395                                  
 14396 00001640 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 14397                                  					; get drive number
 14398 00001642 8A5608                  		mov	dl, [bp+8]
 14399 00001645 E865FD                  		call	check_wrap	; sets up registers if wrap-around
 14400                                  					;
 14401                                  					; ah is	function
 14402                                  					; al is	1 for single sector transfer
 14403                                  					; es:bx	is local transfer addres
 14404                                  					; cx is	track/sector number
 14405                                  					; dx is	head/drive number
 14406                                  					; si,di	unchanged
 14407 00001648 E8E9FD                  		call	doint
 14408 0000164B 07                      		pop	es		; restore caller's dma segment
 14409 0000164C 723A                    		jb	short bad13	; go clean up
 14410 0000164E EB22                    		jmp	short dotail
 14411                                  ; ---------------------------------------------------------------------------
 14412                                  
 14413                                  ; reading a sector. do int first, then move things around
 14414                                  
 14415                                  doread:
 14416 00001650 06                      		push	es
 14417 00001651 53                      		push	bx
 14418 00001652 1E                      		push	ds		; es = Bios_Code
 14419 00001653 07                      		pop	es
 14420 00001654 BB[4E01]                		mov	bx, disksector
 14421 00001657 B001                    		mov	al, 1
 14422 00001659 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 14423                                  					; get drive number
 14424 0000165C E84EFD                  		call	check_wrap	;
 14425                                  					; ah = function
 14426                                  					; al = 1 for single sector
 14427                                  					; es:bx	points to local	buffer
 14428                                  					; cx, dx are track/sector, head/drive
 14429 0000165F E8D2FD                  		call	doint
 14430 00001662 5B                      		pop	bx
 14431 00001663 07                      		pop	es
 14432 00001664 7222                    		jb	short bad13
 14433 00001666 56                      		push	si
 14434 00001667 57                      		push	di
 14435 00001668 89DF                    		mov	di, bx
 14436 0000166A BE[4E01]                		mov	si, disksector
 14437 0000166D E822FD                  		call	move_sector
 14438 00001670 5F                      		pop	di
 14439 00001671 5E                      		pop	si
 14440                                  
 14441                                  ; note the fact that we've done 1 more sector
 14442                                  
 14443                                  dotail:
 14444 00001672 5B                      		pop	bx		; retrieve new dma area
 14445 00001673 80C702                  		add	bh, 2		; advance over sector
 14446 00001676 41                      		inc	cx
 14447 00001677 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 14448 0000167A F8                      		clc
 14449 0000167B FEC8                    		dec	al
 14450 0000167D 7409                    		jz	short bad13	; no more i/o
 14451                                  
 14452                                  ; see if we wrap around a track or head boundary with starting sector
 14453                                  ; we already have the correct head number to pass to check_wrap
 14454                                  
 14455 0000167F 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 14456 00001682 E828FD                  		call	check_wrap
 14457 00001685 E8ACFD                  		call	doint
 14458                                  
 14459                                  ; we are done. ax has the final code; we throw away what we got before
 14460                                  
 14461                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 14462                                  ;	   or we've finished. If carry is set now, our only
 14463                                  ;	   hope for salvation is that it was a read operation
 14464                                  ;	   and the error code is ECC error. In that case, we'll
 14465                                  ;	   just pop the registers and go do the old ECC thing.
 14466                                  ;	   When the DMA error that got us here in the first
 14467                                  ;	   place occurs, it'll handle it.
 14468                                  
 14469                                  bad13:
 14470 00001688 89EC                    		mov	sp, bp
 14471 0000168A 5D                      		pop	bp
 14472 0000168B 5B                      		pop	bx
 14473 0000168C 5B                      		pop	bx
 14474 0000168D 59                      		pop	cx
 14475 0000168E 5A                      		pop	dx
 14476 0000168F 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 14477 00001691 E935FE                  		jmp	ret_from_i13	; non-error exit
 14478                                  ; ---------------------------------------------------------------------------
 14479                                  
 14480                                  xgoterr13_xxxx:
 14481 00001694 E958FE                  		jmp	goterr13_xxxx
 14482                                  
 14483                                  ; ---------------------------------------------------------------------------
 14484                                  		; 10/12/2022
 14485                                  		;db 	0
 14486                                  ; ---------------------------------------------------------------------------
 14487                                  
 14488                                  ;Bios_Code ends
 14489                                  
 14490                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14491                                  
 14492                                  ;-----------------------------------------------------------------------------
 14493                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 14494                                  ;-----------------------------------------------------------------------------
 14495                                  ; 17/03/2019 - Retro DOS v4.0
 14496                                  
 14497                                  		; 19/10/2022
 14498                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 14499 00001697 8A26[7500]              		mov	ah, [drvmax]
 14500 0000169B BF[7E06]                		mov	di, dskdrvs
 14501 0000169E 1E                      		push	ds		; pass result in es:di
 14502 0000169F 07                      		pop	es
 14503 000016A0 E910EF                  		jmp	SetPtrSav
 14504                                  
 14505                                  ; =============== S U B	R O U T	I N E =======================================
 14506                                  
 14507                                  ;---------------------------------------------------------------------------
 14508                                  ; install_bds installs a bds at location es:di into the current linked list of
 14509                                  ; bds maintained by this device driver. it places the bds at the end of the
 14510                                  ; list. Trashes (at least) ax, bx, di, si
 14511                                  ;---------------------------------------------------------------------------
 14512                                  
 14513                                  install_bds:		
 14514 000016A3 1E                      		push	ds		; save Bios_Data segment
 14515 000016A4 BE[1901]                		mov	si, start_bds	; beginning of chain
 14516                                  
 14517                                  		; ds:si now points to link to first bds
 14518                                  		; assume bds list is non-empty
 14519                                  loop_next_bds:				
 14520 000016A7 C534                    		lds	si, [si]	; [si+BDS.link]
 14521                                  					; fetch	next bds
 14522 000016A9 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 14523 000016AD 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 14524                                  					; drive	with new one?
 14525 000016B0 7518                    		jnz	short next_bds
 14526 000016B2 B310                    		mov	bl, 10h		; fi_am_mult
 14527 000016B4 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14528                                  					; set both of them to i_am_mult	if so
 14529 000016B8 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 14530 000016BB 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 14531                                  					; we don't own it
 14532 000016C0 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 14533                                  					; determine if changeline available
 14534 000016C3 80E302                  		and	bl, 2		; fchangeline
 14535 000016C6 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 14536                                  next_bds:				
 14537                                  		; 02/09/2023 (PCDOS 7.1)
 14538 000016CA B8FFFF                  		mov	ax, 0FFFFh	; -1
 14539 000016CD 3904                    		cmp	[si], ax	; [si+BDS.link],-1
 14540                                  		;cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 14541                                  					; are we at end	of list?
 14542 000016CF 75D6                    		jnz	short loop_next_bds
 14543 000016D1 8C4402                  		mov	[si+2], es	; [si+BDS.link+2],es
 14544                                  					; install bds
 14545 000016D4 893C                    		mov	[si], di
 14546 000016D6 268905                  		mov	[es:di], ax	; [es:di+BDS.link],-1
 14547                                  		;mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 14548                                  					; set next pointer to null
 14549 000016D9 1F                      		pop	ds
 14550                                  
 14551                                  ; 16/10/2022 (MSDOS 6.0 Code)
 14552                                  ;
 14553                                  ; **** If the new drive has a higher EOT value, we must alter the
 14554                                  ;      'eot' variable appropriately.
 14555                                  ;
 14556                                  ;		; 01/06/2019
 14557                                  ;		;mov	al,[es:di+52]
 14558                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 14559                                  ;
 14560                                  ;		cmp	al,[eot]
 14561                                  ;		jbe	short _eot_ok
 14562                                  ;		mov	[eot],al
 14563                                  
 14564 000016DA C3                      		retn
 14565                                  
 14566                                  ; ---------------------------------------------------------------------------
 14567                                  
 14568                                  ; 17/10/2022
 14569                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 14570                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 14571                                  ; 09/12/2022
 14572                                  DRVLET equ drvlet
 14573                                  SNGMSG equ sngmsg
 14574                                  
 14575                                  ; 16/10/2022
 14576                                  
 14577                                  ;---------------------------------------------------------------------------
 14578                                  ;  ask to swap the disk in drive a:
 14579                                  ;	es:di -> bds
 14580                                  ;	ds -> Bios_Data
 14581                                  ;---------------------------------------------------------------------------
 14582                                  
 14583                                  		; 19/10/2022
 14584 000016DB F606[C508]01            swpdsk:		test	byte [IsWin386], 1			
 14585                                  		;test	ds:IsWin386, 1	; Is win386 present?
 14586 000016E0 7405                    		jz	short no_win386	; no, skip SetFocus
 14587                                  		
 14588                                  		; set focus to the correct VM
 14589                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 14590                                  		; 17/10/2022
 14591 000016E2 9A[C608]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 14592                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 14593                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 14594                                  no_win386:				
 14595 000016E7 51                      		push	cx
 14596 000016E8 52                      		push	dx
 14597 000016E9 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 14598                                  					; get the drive	letter
 14599                                  
 14600                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 14601                                  ;           then existing dsk is drive A & vice versa
 14602                                  
 14603 000016ED 88D6                    		mov	dh, dl
 14604 000016EF 80F601                  		xor	dh, 1
 14605 000016F2 29C9                    		sub	cx, cx		; nobody has handled swap disk
 14606 000016F4 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 14607                                  					; broad	cast code for swap disk
 14608                                  					; Broadcast it
 14609 000016F7 CD2F                    		int	2Fh	
 14610 000016F9 41                      		inc	cx		; cx == -1 ?
 14611 000016FA 741E                    		jz	short swpdsk9	; somebody has handled it
 14612                                  
 14613                                  ; using a different drive in a one drive system so request the user change disks
 14614                                  
 14615 000016FC 80C241                  		add	dl, 'A'
 14616                                  		; 17/10/2022
 14617 000016FF 2E8816[3917]            		mov	[cs:DRVLET], dl
 14618                                  		; 16/10/2022
 14619                                  		;;mov	byte [cs:drvlet], dl
 14620                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 14621                                  					; 0070h:3D54h =	2C7h:17E4h
 14622 00001704 BE[1D17]                		mov	si, SNGMSG
 14623                                  		;mov	si, 17C8h	; sngmsg
 14624                                  					; 0070h:3D38h =	2C7h:17C8h
 14625 00001707 53                      		push	bx
 14626 00001708 2E                      		cs
 14627 00001709 AC                      		lodsb			; get the next character of the message
 14628                                  		;lods	byte ptr cs:[si]
 14629                                  wrmsg_loop:				
 14630 0000170A CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 14631                                  					; AL = character to display
 14632 0000170C 2E                      		cs
 14633 0000170D AC                      		lodsb
 14634                                  		;lods	byte ptr cs:[si] ; cs lodsb
 14635                                  					; get the next character of the	message
 14636 0000170E 08C0                    		or	al, al
 14637 00001710 75F8                    		jnz	short wrmsg_loop
 14638 00001712 E8F2EA                  		call	con_flush	; flush out keyboard queue
 14639                                  					; call rom-bios
 14640 00001715 30E4                    		xor	ah, ah
 14641 00001717 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 14642                                  					; Return: AH = scan code, AL = character
 14643 00001719 5B                      		pop	bx
 14644                                  swpdsk9:				
 14645 0000171A 5A                      		pop	dx
 14646 0000171B 59                      		pop	cx
 14647 0000171C C3                      		retn
 14648                                  
 14649                                  ; ---------------------------------------------------------------------------
 14650                                  
 14651                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14652                                  
 14653                                  ;--------------------------------------------------------
 14654                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 14655                                  ;--------------------------------------------------------
 14656                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 14657                                  ;--------------------------------------------------------
 14658                                  ; 17/03/2019 - Retro DOS v4.0
 14659                                  
 14660                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 14661 0000171D 0D0A                    sngmsg:		db 0Dh,0Ah
 14662 0000171F 496E73657274206469-     		db 'Insert diskette for drive '
 14662 00001728 736B6574746520666F-
 14662 00001731 7220647269766520   
 14663                                  
 14664                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 14665 00001739 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 14665 00001742 65737320616E79206B-
 14665 0000174B 6579207768656E2072-
 14665 00001754 656164790D0A       
 14666 0000175A 0A00                    		db 0Ah,0
 14667                                  
 14668                                  ; =============== S U B	R O U T	I N E =======================================
 14669                                  
 14670                                  ;---------------------------------------------------------------------------
 14671                                  ; input : es:di points to current bds for drive.
 14672                                  ; return : zero set if no open files
 14673                                  ;	   zero reset if open files
 14674                                  ;---------------------------------------------------------------------------
 14675                                  
 14676                                  chkopcnt:		
 14677 0000175C 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 14678 00001761 C3                      		retn
 14679                                  
 14680                                  ; =============== S U B	R O U T	I N E =======================================
 14681                                  
 14682                                  ;---------------------------------------------------------------------------
 14683                                  ; at media check time, we need to really get down and check what the change is.
 14684                                  ; this is guaranteed to be expensive.
 14685                                  ;
 14686                                  ;	es:di -> bds, ds -> Bios_Data
 14687                                  ;---------------------------------------------------------------------------
 14688                                  
 14689                                  mediacheck:	
 14690 00001762 E8C7F0                  		call	checksingle	; make sure correct disk is in place
 14691 00001765 31F6                    		xor	si, si
 14692 00001767 E84D01                  		call	haschange
 14693 0000176A 742F                    		jz	short mediaret
 14694 0000176C E83C01                  		call	checkromchange
 14695 0000176F 752B                    		jnz	short mediadovolid
 14696 00001771 50                      		push	ax
 14697 00001772 52                      		push	dx
 14698 00001773 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 14699                                  					; set logical drive number
 14700 00001777 B416                    		mov	ah, 16h
 14701 00001779 CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 14702                                  					; DL = drive to	check
 14703                                  					; Return: AH = disk change status
 14704 0000177B 5A                      		pop	dx
 14705 0000177C 58                      		pop	ax
 14706 0000177D 721D                    		jb	short mediadovolid
 14707 0000177F BE0100                  		mov	si, 1		; signal no change
 14708                                  
 14709                                  ; there are some drives with changeline that "lose" the changeline indication
 14710                                  ; if a different drive is accessed after the current one. in order to avoid
 14711                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 14712                                  ; is not active and we are accessing a different drive from the last one.
 14713                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 14714                                  ; status.
 14715                                  		; 19/10/2022
 14716 00001782 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 14717 00001786 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 14718                                  					; (If the last drive accessed is not current drive
 14719                                  					; media	change status may be incorrect.	So,
 14720                                  					; "I don't now" will be returned even if it is indicated
 14721                                  					; as media is not changed.)
 14722 0000178A 740F                    		jz	short mediaret	; (same	drive,
 14723                                  					; media	changeline indication is reliable)
 14724                                  
 14725                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 14726                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 14727                                  ; "not changed" here since the 2 second test said no change.)
 14728                                  
 14729 0000178C 50                      		push	ax
 14730 0000178D 51                      		push	cx
 14731 0000178E 52                      		push	dx
 14732 0000178F E8BCED                  		call	Check_Time_Of_Access
 14733 00001792 5A                      		pop	dx
 14734 00001793 59                      		pop	cx
 14735 00001794 58                      		pop	ax
 14736 00001795 09F6                    		or	si, si
 14737 00001797 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 14738                                  					; (volume id will be checked)
 14739 00001799 31F6                    		xor	si, si		; return "i don't know"
 14740                                  mediaret:				
 14741 0000179B C3                      		retn
 14742                                  ; ---------------------------------------------------------------------------
 14743                                  
 14744                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 14745                                  ; because this may be different since we only set medbyt when doing a read
 14746                                  ; or write.
 14747                                  
 14748                                  mediadovolid:				
 14749 0000179C E854EE                  		call	GetBp		; build	a new bpb in current bds
 14750 0000179F 72FA                    		jb	short mediaret
 14751 000017A1 E82D00                  		call	check_vid
 14752 000017A4 73F5                    		jnb	short mediaret
 14753 000017A6 E90AF4                  		jmp	maperror	; fix up al for	return to dos
 14754                                  ; ---------------------------------------------------------------------------
 14755                                  
 14756                                  ; simple, quick check of latched change. if no indication, then return
 14757                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 14758                                  ; return and set al = 15 (for invalid media change) which will be returned to
 14759                                  ; dos.
 14760                                  ;
 14761                                  ; for dos 3.3, this will work only for the drive that has changeline.
 14762                                  
 14763                                  ;	call with es:di -> bds, ds -> Bios_Data
 14764                                  ;	***** warning:  this routine will return one level up on the stack
 14765                                  ;			if an error occurs!
 14766                                  
 14767                                  checklatchio:	
 14768                                  
 14769                                  ; if returning fake bpb then assume the disk has not changed
 14770                                  			
 14771 000017A9 E8B0FF                  		call	chkopcnt
 14772 000017AC 741B                    		jz	short checkret	; done if zero
 14773                                  
 14774                                  ; check for past rom indications. if no rom change indicated, then return ok.
 14775                                  
 14776 000017AE E8FA00                  		call	checkromchange
 14777 000017B1 7416                    		jz	short checkret
 14778                                  
 14779                                  ; we now see that a change line has been seen in the past. let's do the
 14780                                  ; expensive verification.
 14781                                  
 14782 000017B3 E83DEE                  		call	GetBp		; build	bpb in current bds
 14783 000017B6 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 14784 000017B8 E81600                  		call	check_vid
 14785 000017BB 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 14786 000017BD 09F6                    		or	si, si		; is changed for sure?
 14787 000017BF 7908                    		jns	short checkret
 14788 000017C1 E87B00                  		call	returnvid
 14789                                  checklatchret:				
 14790 000017C4 E8ECF3                  		call	maperror	; fix up al for	return to dos
 14791                                  ret_no_error_map:			
 14792 000017C7 F9                      		stc
 14793 000017C8 5E                      		pop	si		; pop off return address
 14794                                  checkret:				
 14795 000017C9 C3                      		retn
 14796                                  ; ---------------------------------------------------------------------------
 14797                                  
 14798                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 14799                                  ; only if there was a disk error. return that error code in ax.
 14800                                  ;
 14801                                  ;	called with es:di -> bds, ds -> Bios_Data
 14802                                  
 14803                                  checkfatvid:				
 14804 000017CA E8BC01                  		call	fat_check	; check	the fat	and the	vid
 14805 000017CD 09F6                    		or	si, si
 14806 000017CF 7827                    		js	short changed_drv ;
 14807                                  
 14808                                  ; the fat was the same. fall into check_vid and check volume id.
 14809                                  
 14810                                  		; fall into check_vid
 14811                                  
 14812                                  ; =============== S U B	R O U T	I N E =======================================
 14813                                  
 14814                                  ; now with the extended boot record, the logic should be enhanced.
 14815                                  ;
 14816                                  ; if it is the extended boot record, then we check the volume serial
 14817                                  ; number instead of volume id. if it is different, then set si to -1.
 14818                                  ;
 14819                                  ; if it is same, then si= 1 (no change).
 14820                                  ;
 14821                                  ; if it is not the extended boot record, then just follows the old
 14822                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 14823                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 14824                                  ; should have already covered by extended boot structure checking.
 14825                                  ; so, we will return "i don't know" by setting si to 0.
 14826                                  ;
 14827                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 14828                                  ; (this will be gauranteed by a successful getbp call right before this
 14829                                  ; routine.)
 14830                                  ;
 14831                                  ;	called with es:di -> bds, ds -> bds
 14832                                  
 14833                                  		; 19/10/2022
 14834                                  check_vid:
 14835                                  
 14836                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 14837                                  ; boot signature. if it is set then go to do the extended
 14838                                  ; id check otherwise continue with code below
 14839                                  
 14840 000017D1 803E[7401]29            		cmp	byte [disksector+26h], 29h
 14841                                  					; [disksector+EXT_BOOT.SIG],
 14842                                  					; EXT_BOOT_SIGNATURE
 14843 000017D6 7427                    		jz	short do_ext_check_id
 14844 000017D8 E8DC00                  		call	haschange
 14845 000017DB 74EC                    		jz	short checkret
 14846 000017DD 31F6                    		xor	si, si
 14847 000017DF 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 14848                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 14849 000017E4 7411                    		jz	short checkfatret ; don't read vol id
 14850                                  					; if not fat system
 14851 000017E6 E8EE00                  		call	read_volume_id
 14852 000017E9 720C                    		jb	short checkfatret
 14853 000017EB E89201                  		call	check_volume_id
 14854 000017EE BEFFFF                  		mov	si, 0FFFFh	; -1
 14855                                  					; definitely changed
 14856 000017F1 7505                    		jnz	short changed_drv
 14857                                  
 14858 000017F3 46                      		inc	si		; not changed
 14859                                  vid_no_changed:				
 14860 000017F4 E8BA00                  		call	resetchanged
 14861                                  		; 12/12/2022
 14862                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14863                                  		;clc
 14864                                  checkfatret:				
 14865 000017F7 C3                      		retn
 14866                                  ; ---------------------------------------------------------------------------
 14867                                  
 14868                                  		; 12/12/2022
 14869                                  changed_drv:
 14870 000017F8 F8                      		clc			; cas -- return	no error
 14871 000017F9 C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14872                                  					; ensure that we ask rom for media
 14873 000017FE C3                      		retn			; check	next time round
 14874                                  ; ---------------------------------------------------------------------------
 14875                                  
 14876                                  ; extended id check
 14877                                  
 14878                                  ; 16/10/2022
 14879                                  
 14880                                  ; the code to check extended id is basically a check to see if the
 14881                                  ; volume serial number is still the same. the volume serial number
 14882                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14883                                  ; ds:di points to the bds of the drive under consideration.
 14884                                  ; the bds has fields containing the high and low words 
 14885                                  ; of the volume serial number of the media in the drive.
 14886                                  ; compare these fields to the fields mentioned above. if these fields
 14887                                  ; do not match the media has changed and so we should jump to the code
 14888                                  ; starting at ext_changed else return "i don't know" status
 14889                                  ; in the register used for the changeline status and continue executing
 14890                                  ; the code given below. for temporary storage use the register which
 14891                                  ; has been saved and restored around this block.
 14892                                  ;
 14893                                  ; bds fields in inc\msbds.inc
 14894                                  
 14895                                  		; 19/10/2022
 14896                                  do_ext_check_id:
 14897 000017FF 50                      		push	ax
 14898                                  		;mov	ax, word ptr ds:disksector+27h
 14899                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14900 00001800 A1[7501]                		mov	ax, [disksector+27h]
 14901                                  		; 02/09/2023
 14902 00001803 31F6                    		xor	si, si ; 0
 14903 00001805 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14904 00001809 750C                    		jnz	short ext_changed
 14905 0000180B A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14906 0000180E 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14907 00001812 7503                    		jnz	short ext_changed
 14908                                  		;xor	si, si		; 0
 14909                                  					; don't know
 14910 00001814 58                      		pop	ax
 14911 00001815 EBDD                    		jmp	short vid_no_changed
 14912                                  					; reset the flag
 14913                                  ; ---------------------------------------------------------------------------
 14914                                  
 14915                                  ext_changed:
 14916 00001817 58                      		pop	ax
 14917                                  		; 02/09/2023
 14918 00001818 4E                      		dec	si ; mov si, 0FFFFh ; -1
 14919                                  		;mov	si, 0FFFFh	; -1
 14920                                  					; disk changed!
 14921                                  		; 12/12/2022
 14922                                  		; ('changed_drv' clears cf)
 14923                                  		;clc
 14924 00001819 EBDD                    		jmp	short changed_drv
 14925                                  
 14926                                  ; ---------------------------------------------------------------------------
 14927                                  
 14928                                  ; at i/o time, we detected the error. now we need to determine whether the
 14929                                  ; media was truly changed or not. we return normally if media change unknown.
 14930                                  ; and we pop off the call and jmp to harderr if we see an error.
 14931                                  ;
 14932                                  ; es:di -> bds
 14933                                  
 14934                                  checkio:				
 14935 0000181B 80FC06                  		cmp	ah, 6
 14936 0000181E 75D7                    		jnz	short checkfatret
 14937 00001820 E839FF                  		call	chkopcnt
 14938 00001823 74D2                    		jz	short checkfatret
 14939 00001825 E8CBED                  		call	GetBp
 14940 00001828 7212                    		jb	short no_error_map
 14941 0000182A E89DFF                  		call	checkfatvid
 14942 0000182D 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14943 0000182F 09F6                    		or	si, si		; is changed for sure?
 14944 00001831 7802                    		js	short checkioerr ; yes changed
 14945 00001833 45                      		inc	bp		; allow	a retry
 14946 00001834 C3                      		retn
 14947                                  ; ---------------------------------------------------------------------------
 14948                                  
 14949                                  checkioerr:				
 14950 00001835 E80700                  		call	returnvid
 14951                                  
 14952                                  checkioret:				
 14953 00001838 F9                      		stc			; make sure carry gets passed through
 14954 00001839 E928F3                  		jmp	harderr
 14955                                  ; ---------------------------------------------------------------------------
 14956                                  
 14957                                  no_error_map:				
 14958 0000183C E928F3                  		jmp	harderr2
 14959                                  
 14960                                  ; =============== S U B	R O U T	I N E =======================================
 14961                                  
 14962                                  ; return vid sets up the vid for a return to dos.
 14963                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14964                                  ;  **** trashes si! ****
 14965                                  
 14966                                  returnvid:		
 14967 0000183F BE1600                  		mov	si, 22		; extra
 14968                                  					; offset into pointer to return	value
 14969 00001842 E80700                  		call	vid_into_packet
 14970 00001845 B406                    		mov	ah, 6
 14971 00001847 F9                      		stc
 14972 00001848 C3                      		retn
 14973                                  
 14974                                  ; ---------------------------------------------------------------------------
 14975                                  
 14976                                  ; moves the pointer to the volid for the drive into the original request packet
 14977                                  ; no attempt is made to preserve registers.
 14978                                  ;
 14979                                  ; assumes es:di -> bds
 14980                                  ; **trashes si**
 14981                                  
 14982                                  media_set_vid:				
 14983 00001849 BE0F00                  		mov	si, 15		; trans+1
 14984                                  					; return the value here	in packet
 14985                                  
 14986                                  		; fall into vid_into_packet
 14987                                  
 14988                                  ; =============== S U B	R O U T	I N E =======================================
 14989                                  
 14990                                  ; return pointer to vid in bds at es:di in packet[si]
 14991                                  
 14992                                  		; 19/10/2022
 14993                                  vid_into_packet:
 14994 0000184C 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14995 0000184D C51E[1200]              		lds	bx, [ptrsav]
 14996 00001851 83C74B                  		add	di, 75		; BDS.volid
 14997 00001854 8938                    		mov	[bx+si], di
 14998 00001856 83EF4B                  		sub	di, 75		; BDS.volid
 14999 00001859 8C4002                  		mov	[bx+si+2], es
 15000 0000185C 1F                      		pop	ds
 15001                                  dofloppy:	; 18/12/2022
 15002 0000185D C3                      		retn
 15003                                  
 15004                                  ; ---------------------------------------------------------------------------
 15005                                  
 15006                                  ;----------------------------------------------------------------------------
 15007                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 15008                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 15009                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 15010                                  ;   of getbp. for 3.5" media, we just return.
 15011                                  ;
 15012                                  ;   inputs:	es:di point to correct bds for this drive
 15013                                  ;		ah has media byte
 15014                                  ;
 15015                                  ;   outputs:	carry clear
 15016                                  ;		    no registers modified
 15017                                  ;		carry set
 15018                                  ;		    al = sectors/fat
 15019                                  ;		    bh = number of root directory entries
 15020                                  ;		    bl = sectors per track
 15021                                  ;		    cx = number of sectors
 15022                                  ;		    dh = sectors per allocation unit
 15023                                  ;		    dl = number of heads
 15024                                  ;
 15025                                  ;----------------------------------------------------------------------------
 15026                                  
 15027                                  hidensity:
 15028                                  
 15029                                  ; check for correct drive
 15030                                  		
 15031                                  		; 12/12/2022
 15032 0000185E 26F6452302              		test	byte [es:di+23h], 2		
 15033                                  		;test	word [es:di+23h], 2 ; is it special?	
 15034                                  					; [es:di+BDS.flags], fchangeline
 15035 00001863 74F8                    		jz	short dofloppy	; no, do normal floppy test
 15036                                  
 15037                                  ; we have a media byte that is pretty complex. examine drive information
 15038                                  ; table to see what kind it is.
 15039                                  
 15040 00001865 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 15041 0000186A 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 15042                                  					; yes, use fatid...
 15043                                  ; 96 tpi drive?
 15044 0000186C 80FCF9                  		cmp	ah, 0F9h
 15045 0000186F 75EC                    		jnz	short dofloppy
 15046                                  
 15047                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 15048                                  ;------ a 720K diskette
 15049                                  
 15050                                  		; 02/09/2023 (PCDOS 7.1)
 15051 00001871 268A4522                		mov	al, [es:di+22h]	; [es:di+BDS.formfactor]
 15052 00001875 3C07                    		cmp	al, 7
 15053                                  		;cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 15054                                  					; ffOther
 15055 00001877 7413                    		jz	short Is720K
 15056 00001879 3C09                    		cmp	al, 9
 15057                                  		;cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 15058                                  					; ff288
 15059 0000187B 740F                    		jz	short Is720K
 15060 0000187D B007                    		mov	al, 7		; seven	sectors	/ fat
 15061 0000187F BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 15062                                  					; 224 root dir entries
 15063                                  					; & 0Fh sector max
 15064 00001882 B96009                  		mov	cx, 2400	; 80*15*2
 15065                                  					; 80 tracks, 15 sectors/track,
 15066                                  					; 2 sides
 15067                                  		; 02/09/2023
 15068 00001885 5A                      		pop	dx		; pop off return address
 15069 00001886 BA0201                  		mov	dx, 258		; 1*256+2
 15070                                  					; sectors/allocation unit
 15071                                  					; & head max
 15072                                  		;add	sp, 2		; pop off return address
 15073 00001889 E9D0ED                  		jmp	Has1		; return to tail of getbp
 15074                                  ; ---------------------------------------------------------------------------
 15075                                  
 15076                                  Is720K:
 15077                                  		; 02/09/2023
 15078 0000188C 5B                      		pop	bx		; pop off return address
 15079                                  		;add	sp, 2		; pop off return address
 15080 0000188D E999ED                  		jmp	Has720K		; return to 720K code
 15081                                  ; ---------------------------------------------------------------------------
 15082                                  
 15083                                  		; 18/12/2022
 15084                                  ;dofloppy:				
 15085                                  		;retn
 15086                                  
 15087                                  ; =============== S U B	R O U T	I N E =======================================
 15088                                  
 15089                                  ; 16/10/2022
 15090                                  
 15091                                  ;---------------------------------------------------------------------------
 15092                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 15093                                  ;		   essentially used to indicate changeline, or format.
 15094                                  ;
 15095                                  ;   inputs:	dl contains physical drive number
 15096                                  ;		bx contains bits to set in the flag field in the bdss
 15097                                  ;   outputs:	none
 15098                                  ;   registers modified: flags
 15099                                  ;
 15100                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 15101                                  ;
 15102                                  ; in the virtual drive system we *must* flag the other drives as being changed
 15103                                  ;---------------------------------------------------------------------------
 15104                                  
 15105                                  set_changed_dl:	
 15106 00001890 06                      		push	es
 15107 00001891 57                      		push	di
 15108                                  		;les	di, ds:start_bds
 15109                                  		; 19/10/2022
 15110 00001892 C43E[1901]              		les	di, [start_bds]
 15111                                  
 15112                                  ; note: we assume that the list is non-empty
 15113                                  
 15114                                  scan_bds:				
 15115 00001896 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 15116 0000189A 7504                    		jnz	short get_next_bds
 15117                                  
 15118                                  ; someone may complain, but this *always* must be done when a disk change is
 15119                                  ; noted. there are *no* other compromising circumstances.
 15120                                  
 15121 0000189C 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 15122                                  					; signal change	on other drive
 15123                                  get_next_bds:				
 15124 000018A0 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 15125                                  					; go to	next bds
 15126 000018A3 83FFFF                  		cmp	di, 0FFFFh
 15127 000018A6 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 15128 000018A8 5F                      		pop	di
 15129 000018A9 07                      		pop	es
 15130 000018AA C3                      		retn
 15131                                  
 15132                                  ; =============== S U B	R O U T	I N E =======================================
 15133                                  
 15134                                  ;---------------------------------------------------------------------------
 15135                                  ; checkromchange - see if external program has diddled rom change line.
 15136                                  ;
 15137                                  ;   inputs:	es:di points to current bds.
 15138                                  ;   outputs:	zero set - no change
 15139                                  ;		zero reset - change
 15140                                  ;   registers modified: none
 15141                                  ;---------------------------------------------------------------------------
 15142                                  
 15143                                  checkromchange:	
 15144                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 15145                                  		; 10/12/2022
 15146 000018AB 26F6452340              		test	byte [es:di+23h], 40h
 15147                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 15148                                  					; fchanged
 15149 000018B0 C3                      		retn
 15150                                  
 15151                                  ; =============== S U B	R O U T	I N E =======================================
 15152                                  
 15153                                  ;---------------------------------------------------------------------------
 15154                                  ; resetchanged - restore value of change line
 15155                                  ;
 15156                                  ;   inputs:	es:di points to current bds
 15157                                  ;   outputs:	none
 15158                                  ;   registers modified: none
 15159                                  ;---------------------------------------------------------------------------
 15160                                  
 15161                                  resetchanged:	
 15162                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 15163                                  		; 10/12/2022
 15164 000018B1 26806523BF              		and	byte [es:di+23h], 0BFh
 15165                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 15166                                  					; ~fchanged
 15167 000018B6 C3                      		retn
 15168                                  
 15169                                  ; =============== S U B	R O U T	I N E =======================================
 15170                                  
 15171                                  ;---------------------------------------------------------------------------
 15172                                  ; haschange - see if drive can supply change line
 15173                                  ;
 15174                                  ;   inputs:	es:di points to current bds
 15175                                  ;   outputs:	zero set - no change line available
 15176                                  ;		zero reset - change line available
 15177                                  ;   registers modified: none
 15178                                  ;---------------------------------------------------------------------------
 15179                                  
 15180                                  haschange:
 15181                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 15182                                  		; 10/12/2022
 15183 000018B7 26F6452302              		test	byte [es:di+23h], 2		
 15184                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 15185                                  					; fchangeline
 15186 000018BC C3                      		retn
 15187                                  
 15188                                  ; ---------------------------------------------------------------------------
 15189                                  
 15190                                  ; 16/10/2022
 15191                                  
 15192                                  ;-------------------------------------------------------------------------
 15193                                  ; set_volume_id      -	main routine, calls other routines.
 15194                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 15195                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 15196                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 15197                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 15198                                  ;-------------------------------------------------------------------------
 15199                                  
 15200                                  ; set_volume_id
 15201                                  ;   if drive has changeline support, read in and set the volume_id
 15202                                  ; and the last fat_id byte. if no change line support then do nothing.
 15203                                  ;
 15204                                  ;   on entry:
 15205                                  ;	es:di points to the bds for this disk.
 15206                                  ;	ah contains media byte
 15207                                  ;
 15208                                  ;   on exit:
 15209                                  ;	carry clear:
 15210                                  ;	   successful call
 15211                                  ;	carry set
 15212                                  ;	   error and ax has error code
 15213                                  
 15214                                  set_volume_id:				
 15215 000018BD 52                      		push	dx		; save registers
 15216 000018BE 50                      		push	ax
 15217 000018BF E8F5FF                  		call	haschange	; does drive have changeline support?
 15218 000018C2 740B                    		jz	short setvret	; no, get out
 15219 000018C4 E81000                  		call	read_volume_id
 15220 000018C7 7209                    		jb	short seterr
 15221 000018C9 E8A800                  		call	transfer_volume_id ; copy the volume id	to special drive
 15222 000018CC E8E2FF                  		call	resetchanged	; restore value	of change line
 15223                                  setvret:				
 15224                                  		; 10/12/2022
 15225                                  		; cf = 0
 15226                                  		;clc			; no error, clear carry flag
 15227 000018CF 58                      		pop	ax		; restore registers
 15228 000018D0 5A                      		pop	dx
 15229 000018D1 C3                      		retn
 15230                                  ; ---------------------------------------------------------------------------
 15231                                  
 15232                                  seterr:					
 15233 000018D2 5A                      		pop	dx		; pop stack but don't overwrite ax
 15234 000018D3 5A                      		pop	dx		; restore dx
 15235 000018D4 C3                      		retn
 15236                                  ; ---------------------------------------------------------------------------
 15237 000018D5 0000                    root_sec:	dw 0			; root sector #
 15238                                  
 15239                                  ; 16/10/2022
 15240                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 15241                                  ; 09/12/2022
 15242                                  ROOTSEC equ root_sec
 15243                                  
 15244                                  ; =============== S U B	R O U T	I N E =======================================
 15245                                  
 15246                                  ; 16/10/2022
 15247                                  
 15248                                  ; read_volume_id read the volume id and tells if it has been changed.
 15249                                  ;
 15250                                  ;   on entry:
 15251                                  ;	es:di points to current bds for drive.
 15252                                  ;
 15253                                  ;   on exit:
 15254                                  ;	carry clear
 15255                                  ;	    si = 1  no change
 15256                                  ;	    si = 0  ?
 15257                                  ;	    si = -1 change
 15258                                  ;
 15259                                  ;	carry set:
 15260                                  ;	    error and ax has error code.
 15261                                  
 15262                                  read_volume_id:
 15263 000018D7 52                      		push	dx		; preserve registers
 15264 000018D8 51                      		push	cx
 15265 000018D9 53                      		push	bx
 15266 000018DA 50                      		push	ax
 15267 000018DB 06                      		push	es		; stack the bds last
 15268 000018DC 57                      		push	di
 15269 000018DD 1E                      		push	ds		; point es to Bios_Data
 15270 000018DE 07                      		pop	es
 15271 000018DF BF[0009]                		mov	di, tmp_vid	; "NO NAME	 "
 15272 000018E2 BE[F408]                		mov	si, nul_vid	; "NO NAME	 "
 15273 000018E5 B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 15274 000018E8 F3A4                    		rep movsb
 15275 000018EA 5F                      		pop	di
 15276 000018EB 07                      		pop	es
 15277 000018EC 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 15278                                  					; # of fats
 15279 000018F0 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 15280                                  					; sectors / fat
 15281 000018F4 F6E1                    		mul	cl		; size taken by	fats
 15282 000018F6 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 15283                                  					; add on reserved sectors
 15284                                  					;
 15285                                  					; ax is	now sector # (0	based)
 15286                                  		; 17/10/2022
 15287 000018FA 2EA3[D518]              		mov	[cs:ROOTSEC], ax
 15288                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 15289                                  					; 0070h:3EFFh =	2C7h:198Fh
 15290 000018FE 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 15291                                  					; # root dir entries
 15292 00001902 B104                    		mov	cl, 4		; 16 entries/sector
 15293 00001904 D3E8                    		shr	ax, cl		; divide by 16
 15294                                  		;mov	cx, ax		; cx is	# of sectors to	scan
 15295                                  		; 02/09/2023 (PCDOS 7.1, one byte opcode)
 15296 00001906 91                      		xchg	ax, cx		; cx is	# of sectors to	scan
 15297                                  next_sec:				
 15298 00001907 51                      		push	cx		; save outer loop counter
 15299 00001908 2EA1[D518]              		mov	ax, [cs:ROOTSEC]
 15300                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 15301                                  					; get sector #
 15302 0000190C 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 15303                                  					; sectors / track
 15304 00001910 31D2                    		xor	dx, dx
 15305 00001912 F7F1                    		div	cx
 15306                                  
 15307                                  ; set up registers for call to read_sector
 15308                                  
 15309 00001914 42                      		inc	dx		; dx= sectors into track
 15310                                  					; ax= track count from 0
 15311 00001915 88D1                    		mov	cl, dl		; sector to read
 15312 00001917 31D2                    		xor	dx, dx
 15313 00001919 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 15314                                  					; # heads on this disc
 15315 0000191D 88D6                    		mov	dh, dl		; head number
 15316 0000191F 88C5                    		mov	ch, al		; track	#
 15317 00001921 E846EE                  		call	read_sector	; get first sector of the root directory,
 15318                                  					; ds:bx	-> directory sector
 15319 00001924 723F                    		jb	short readviderr
 15320 00001926 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 15321 00001929 B008                    		mov	al, 8		; volume label bit
 15322                                  fvid_loop:				
 15323                                  		; 02/09/2023 (PCDOS 7.1)
 15324 0000192B 382F                    		cmp	[bx], ch ; 0
 15325                                  		;cmp	byte [bx], 0 ; end of dir?
 15326 0000192D 7433                    		jz	short no_vid	; yes, no vol id
 15327 0000192F 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 15328 00001932 7405                    		jz	short ent_loop	; yes, skip
 15329 00001934 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 15330 00001937 750F                    		jnz	short found_vid	; jmp yes
 15331                                  ent_loop:				
 15332 00001939 83C320                  		add	bx, 32		; add length of	directory entry
 15333 0000193C E2ED                    		loop	fvid_loop
 15334 0000193E 59                      		pop	cx		; outer loop
 15335 0000193F 2EFF06[D518]            		inc	word [cs:ROOTSEC]
 15336                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 15337                                  					; next sector
 15338 00001944 E2C1                    		loop	next_sec	; continue
 15339                                  notfound:
 15340                                  		; 02/09/2023
 15341                                  		;xor	si, si
 15342 00001946 EB13                    		jmp	short fvid_ret
 15343                                  ; ---------------------------------------------------------------------------
 15344                                  
 15345                                  found_vid:
 15346                                  		; 02/09/2023
 15347                                  		; cf = 0  ('test' instruction clears cf)				
 15348 00001948 59                      		pop	cx		; clean stack of outer loop counter
 15349 00001949 89DE                    		mov	si, bx		; point	to volume_id
 15350 0000194B 06                      		push	es		; preserve current bds
 15351 0000194C 57                      		push	di
 15352 0000194D 1E                      		push	ds
 15353 0000194E 07                      		pop	es		; point es to Bios_Data
 15354 0000194F BF[0009]                		mov	di, tmp_vid	; "NO NAME	 "
 15355 00001952 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 15356                                  					; length of string minus nul
 15357 00001955 F3A4                    		rep movsb		; mov volume label to tmp_vid
 15358                                  		;xor	al, al
 15359                                  		; 02/09/2023
 15360 00001957 91                      		xchg	ax, cx		; ax = 0
 15361 00001958 AA                      		stosb			; null terminate
 15362                                  		;;xor	si, si
 15363                                  		; 02/09/2023
 15364                                  		;xchg	ax, si		; si = 0
 15365 00001959 5F                      		pop	di		; restore current bds
 15366 0000195A 07                      		pop	es
 15367                                  fvid_ret:
 15368                                  		; 02/09/2023
 15369 0000195B 31F6                    		xor	si, si ; 0
 15370                                  				
 15371 0000195D 58                      		pop	ax
 15372                                  		; 10/12/2022
 15373                                  		; cf = 0
 15374                                  		;clc
 15375                                  rvidret:				
 15376 0000195E 5B                      		pop	bx		; restore registers
 15377 0000195F 59                      		pop	cx
 15378 00001960 5A                      		pop	dx
 15379 00001961 C3                      		retn
 15380                                  ; ---------------------------------------------------------------------------
 15381                                  
 15382                                  no_vid:
 15383 00001962 59                      		pop	cx		; clean stack of outer loop counter
 15384                                  		;jmp	short notfound	; not found
 15385                                  		; 02/09/2023
 15386 00001963 EBF6                    		jmp	short fvid_ret
 15387                                  ; ---------------------------------------------------------------------------
 15388                                  
 15389                                  readviderr:				
 15390 00001965 5E                      		pop	si		; trash the outer loop counter
 15391 00001966 5E                      		pop	si		; caller's ax, return error code instead 
 15392 00001967 EBF5                    		jmp	short rvidret
 15393                                  
 15394                                  ; ---------------------------------------------------------------------------
 15395                                  		; 02/09/2023 - Retro DOS v4.2 (IO.SYS optimization)
 15396                                  		; PCDOS 7.1 - IBMBIO.COM - BIOSCODE:1DCFh 
 15397                                  preset_volid_addr:
 15398 00001969 BE[0009]                		mov	si, tmp_vid	; "NO NAME    "
 15399                                  		;
 15400                                  		; PCDOS 7.1
 15401                                  		;add	di, 125		; BDS.volid
 15402                                  		;mov	cx, 11		; VOLID_SIZ (12 for MSDOS 5.0-6.22 versions)
 15403                                  		; MSDOS 6.21 (MSDOS 5.0 & 6.?)
 15404 0000196C 83C74B                  		add	di, 75		; BDS.volid
 15405 0000196F B90C00                  		mov	cx, 12		; VOLID_SIZ
 15406                                  		;
 15407 00001972 FC                      		cld
 15408 00001973 C3                      		retn
 15409                                  
 15410                                  ; =============== S U B	R O U T	I N E =======================================
 15411                                  
 15412                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 15413                                  ;
 15414                                  ; inputs:	es:di has current bds
 15415                                  ; outputs:	bds for drive has volume id from tmp
 15416                                  
 15417                                  transfer_volume_id:
 15418 00001974 57                      		push	di		; copy the volume id from tmp to special drive
 15419                                  		;push	si
 15420 00001975 51                      		push	cx
 15421                                  		; 27/12/2023
 15422 00001976 56                      		push	si
 15423                                  
 15424                                  		;mov	si, tmp_vid	; "NO NAME	 "
 15425                                  		;;add	di, BDS.volid
 15426                                  		;add	di, 75		; BDS.volid
 15427                                  		;;mov	cx, VOLID_SIZ
 15428                                  		;mov	cx, 12		; VOLID_SIZ
 15429                                  		;cld
 15430                                  		; 02/09/2023 (PCDOS 7.1)
 15431 00001977 E8EFFF                  		call	preset_volid_addr
 15432                                  
 15433 0000197A F3A4                    		rep movsb
 15434                                  		
 15435                                  		; 27/12/2023
 15436 0000197C 5E                      		pop	si
 15437                                  chk_volid_ok:
 15438 0000197D 59                      		pop	cx
 15439                                  		;pop	si
 15440 0000197E 5F                      		pop	di
 15441 0000197F C3                      		retn
 15442                                  
 15443                                  ; =============== S U B	R O U T	I N E =======================================
 15444                                  
 15445                                  ;  check_volume_id - compare volume id in tmp area with
 15446                                  ;		     one expected for drive
 15447                                  ;
 15448                                  ;   inputs:	es:di has current bds for drive
 15449                                  ;   outputs:	zero true means it matched
 15450                                  
 15451                                  check_volume_id:
 15452 00001980 57                      		push	di
 15453 00001981 51                      		push	cx
 15454                                  		
 15455                                  		;mov	si, tmp_vid	; "NO NAME	 "
 15456                                  		;;add	di, BDS.volid
 15457                                  		;add	di, 75		; BDS.volid
 15458                                  		;;mov	cx, VOLID_SIZ
 15459                                  		;mov	cx, 12		; VOLID_SIZ
 15460                                  		;cld
 15461                                  		; 02/09/2023 (PCDOS 7.1)
 15462 00001982 E8E4FF                  		call	preset_volid_addr
 15463                                  
 15464 00001985 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 15465                                  		
 15466                                  		; 27/12/2023
 15467                                  		;pop	cx
 15468                                  		;pop	di
 15469                                  		;retn
 15470 00001987 EBF4                    		jmp	short chk_volid_ok
 15471                                  
 15472                                  ; =============== S U B	R O U T	I N E =======================================
 15473                                  
 15474                                  ;   fat_check - see of the fatid has changed in the specified drive.
 15475                                  ;	      - uses the fat id obtained from the boot sector.
 15476                                  ;
 15477                                  ;   inputs:	medbyt is expected fat id
 15478                                  ;		es:di points to current bds
 15479                                  ;
 15480                                  ;   output:	si = -1 if fat id different,
 15481                                  ;		si = 0 otherwise
 15482                                  ;
 15483                                  ;   no other registers changed.
 15484                                  
 15485                                  fat_check:
 15486 00001989 50                      		push	ax
 15487 0000198A 31F6                    		xor	si, si		; say fat id's are same.
 15488 0000198C A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 15489 0000198F 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 15490                                  					; compare it with the bds medbyte
 15491 00001993 7401                    		jz	short okret1	; carry	clear
 15492 00001995 4E                      		dec	si
 15493                                  okret1:
 15494 00001996 58                      		pop	ax
 15495 00001997 C3                      		retn
 15496                                  
 15497                                  ; ---------------------------------------------------------------------------
 15498                                  
 15499                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 15500                                  		;times 7 db 0
 15501                                  
 15502                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)
 15503                                  
 15504                                  		; 09/12/2022
 15505                                  		;times 4 db 0	; 17/10/2022
 15506                                  		;db 4 dup(0)	; times 4 db 0
 15507                                  
 15508                                  ; ---------------------------------------------------------------------------
 15509                                  
 15510                                  		; 09/12/2022
 15511                                  		;db 0
 15512                                  
 15513                                  number2div	equ ($-BCode_start)
 15514                                  number2mod	equ (number2div % 16)
 15515                                  
 15516                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 15517 00001998 00<rep 8h>              		times (16-number2mod) db 0
 15518                                  %endif
 15519                                  
 15520                                  ;align 16
 15521                                  
 15522                                  ; 09/12/2022
 15523                                  BCODE_END	equ $ - BCode_start
 15524                                  ; 29/09/2023
 15525                                  BCODEEND:
 15526                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 15527                                  ; 13/12/2022
 15528                                  SYSINITOFFSET	equ BCODE_END
 15529                                  ; 29/09/2023
 15530                                  ;SYSINITOFFSET	equ $-$$
 15531                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 15532                                  
 15533                                  ; 28/09/2023
 15534                                  S2SIZE equ $-$$
 15535                                  
 15536                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 15537                                  
 15538                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15539                                  ; 01/05/2019 - Retro DOS v4.0 
 15540                                  ; ============================================================================
 15541                                  ; end of BIOSCODE
 15542                                  
 15543                                  ; ----------------------------------------------------------------------------
 15544                                  ; %include sysinit5.s	; 09/12/2022
 15545                                  ; ----------------------------------------------------------------------------
 15546                                  
 15547                                  ;=============================================================================
 15548                                  ; (IO.SYS) SYSINIT SEGMENT 
 15549                                  ;=============================================================================
 15550                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 15551                                  
 15552                                  section .SYSINIT vstart=0
 15553                                  
 15554                                  ; ****************************************************************************
 15555                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 15556                                  ; ----------------------------------------------------------------------------
 15557                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 15558                                  ; ----------------------------------------------------------------------------
 15559                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 15560                                  ; ----------------------------------------------------------------------------
 15561                                  ; Assembler: NASM version 2.15
 15562                                  ; ----------------------------------------------------------------------------
 15563                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 15564                                  ; ----------------------------------------------------------------------------
 15565                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 15566                                  ; ----------------------------------------------------------------------------
 15567                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 15568                                  ; source code by Microsoft, 1991 
 15569                                  ; ----------------------------------------------------------------------------
 15570                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 15571                                  ; by Microsoft, 12/10/1983
 15572                                  ; ****************************************************************************
 15573                                  ; main file: 'retrodos4.s'
 15574                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 15575                                  
 15576                                  ; 21/10/2022
 15577                                  ; ----------------------------------------------------------------------------
 15578                                  ; This source code (version) is based on SYSINIT source code of disassembled
 15579                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 15580                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 15581                                  ; ----------------------------------------------------------------------------
 15582                                  ; Binary file splitter & joiner: FFSJ v3.3
 15583                                  
 15584                                  ;--------------------------------------------------------------
 15585                                  ; SYSINIT.TXT (27/01/1983)
 15586                                  ;--------------------------------------------------------------
 15587                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 15588                                  ;over  the  system  initialization  after  the  OEM  bios   has
 15589                                  ;performed any  initialization  it  needs  to  do.   Control is
 15590                                  ;transfered with a long jump to the external  variable  SYSINIT
 15591                                  ;
 15592                                  ;
 15593                                  ;   The OEM  has  the  following  variables declared external:
 15594                                  ;
 15595                                  ;   CURRENT_DOS_LOCATION    WORD
 15596                                  ;
 15597                                  ;This word  contains  the  segment  number of the DOS before it
 15598                                  ;is relocated.  The OEM bios must set this value.
 15599                                  ;
 15600                                  ;   FINAL_DOS_LOCATION      WORD
 15601                                  ;
 15602                                  ;This word contains the segment number of the DOS after SYSINIT
 15603                                  ;moves it.  The OEM bios must set this value.
 15604                                  ;
 15605                                  ;   DEVICE_LIST             DWORD
 15606                                  ;
 15607                                  ;This  double  word  pointer  points  to  the  linked  list  of
 15608                                  ;character and block device drivers.  The  OEM  must  set  this
 15609                                  ;value.
 15610                                  ;
 15611                                  ;   MEMORY_SIZE             WORD
 15612                                  ;
 15613                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 15614                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 15615                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 15616                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 15617                                  ;and read it back until it gets a mismatch.
 15618                                  ;
 15619                                  ;   DEFAULT_DRIVE           BYTE
 15620                                  ;
 15621                                  ;This is  the initial default drive when the system first comes
 15622                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 15623                                  ;it then drive a is assumed.
 15624                                  ;
 15625                                  ;   BUFFERS                 BYTE
 15626                                  ;
 15627                                  ;This is  the  default  number of buffers for the system.  This
 15628                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15629                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 15630                                  ;
 15631                                  ;   FILES                   BYTE
 15632                                  ;
 15633                                  ;This is  the  default  number  of  files for the system.  This
 15634                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 15635                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 15636                                  ;
 15637                                  ;   SYSINIT                 FAR
 15638                                  ;
 15639                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 15640                                  ;this label at the end of its INIT code.
 15641                                  ;
 15642                                  ;   The OEM  has  the  following  variables declared public:
 15643                                  ;
 15644                                  ;   RE_INIT                 FAR
 15645                                  ;
 15646                                  ;This is an entry point which allows the BIOS to do some INIT
 15647                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 15648                                  ;PRESERVED.  On entry DS points to the first available memory
 15649                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 15650                                  ;prefix which represents  the  "program"  currently  running.
 15651                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 15652                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 15653                                  ;that  no  memory  is  allocated to it, it is running in free
 15654                                  ;memory.
 15655                                  ;NOTES:
 15656                                  ;     At the time this routine is called SYSINIT occupies the
 15657                                  ;highest 10K of memory ("highest" is determined by the  value
 15658                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 15659                                  ;     Since this is called AFTER DOS is initialized, you can
 15660                                  ;make system calls.  This also implies that the code for this
 15661                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 15662                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 15663                                  ;     If you don't want  anything done just set this to point
 15664                                  ;at a FAR RET instruction.
 15665                                  
 15666                                  ; ----------------------------------------------------------------------
 15667                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 15668                                  ; ----------------------------------------------------------------------
 15669                                  
 15670                                  ;include version.inc
 15671                                  ; ----------------------------------------------------------------------
 15672                                  
 15673                                  ;FALSE   EQU     0
 15674                                  ;TRUE    EQU     0FFFFh
 15675                                  
 15676                                  ;IBMVER	    EQU     TRUE
 15677                                  ;IBMCOPYRIGHT EQU   FALSE
 15678                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 15679                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 15680                                  ;MSVER      EQU     FALSE
 15681                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 15682                                  ;KANJI      EQU     FALSE
 15683                                  
 15684                                  ;(MSDOS 6.0, versiona.inc, 1991)
 15685                                  ; ----------------------------------------------------------------------
 15686                                  ;MAJOR_VERSION  EQU	6
 15687                                  ;;MINOR_VERSION	EQU	0	;6.00
 15688                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 15689                                  
 15690                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 15691                                  ; ----------------------------------------------------------------------
 15692                                  MAJOR_VERSION   EQU	5
 15693                                  MINOR_VERSION   EQU	0
 15694                                  
 15695                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 15696                                  
 15697                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 15698                                  				; currently 0.
 15699                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 15700                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 15701                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 15702                                  
 15703                                  ;      if1
 15704                                  ;      %OUT  ... for DOS Version 5.00 ...
 15705                                  ;      endif
 15706                                  
 15707                                         ;******************************
 15708                                         ;Each assembler program should:
 15709                                         ;  mov ah,030h                   ;DOS Get Version function
 15710                                         ;  int 021h                      ;Version ret. in AX,minor version first
 15711                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 15712                                         ;  jne error_handler             ; EXACT version match.
 15713                                         ;******************************
 15714                                  
 15715                                  ; ----------------------------------------------------------------------
 15716                                  ; device definitions
 15717                                  
 15718                                  ;Attribute bit masks
 15719                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 15720                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 15721                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 15722                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 15723                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 15724                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 15725                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 15726                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 15727                                  
 15728                                  ; The device table list has the form:
 15729                                  struc	SYSDEV
 15730 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 15731 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 15732 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 15733 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 15734 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 15735                                  .size:
 15736                                  endstruc
 15737                                  
 15738                                  ;Static Reguest Header
 15739                                  struc	SRHEAD
 15740 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 15741 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 15742 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 15743 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 15744 00000005 ????????????????                	resb 8		;Reserved for queue links
 15745                                  .size:
 15746                                  endstruc
 15747                                  
 15748                                  ;Status word masks
 15749                                  STERR   EQU     8000H           ;Bit 15 - Error
 15750                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 15751                                  STDON   EQU     0100H           ;Bit 8 - Done
 15752                                  STECODE EQU     00FFH           ;Error code
 15753                                  WRECODE EQU     0
 15754                                  
 15755                                  ;Function codes
 15756                                  DEVINIT EQU     0               ;Initialization
 15757                                  DINITHL EQU     26              ;Size of init header
 15758                                  DEVMDCH EQU     1               ;Media check
 15759                                  DMEDHL  EQU     15              ;Size of media check header
 15760                                  DEVBPB  EQU     2               ;Get BPB
 15761                                  DEVRDIOCTL EQU  3               ;IOCTL read
 15762                                  DBPBHL  EQU     22              ;Size of Get BPB header
 15763                                  DEVRD   EQU     4               ;Read
 15764                                  DRDWRHL EQU     22              ;Size of RD/WR header
 15765                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 15766                                  DRDNDHL EQU     14              ;Size of non destructive read header
 15767                                  DEVIST  EQU     6               ;Input status
 15768                                  DSTATHL EQU     13              ;Size of status header
 15769                                  DEVIFL  EQU     7               ;Input flush
 15770                                  DFLSHL  EQU     15              ;Size of flush header
 15771                                  DEVWRT  EQU     8               ;Write
 15772                                  DEVWRTV EQU     9               ;Write with verify
 15773                                  DEVOST  EQU     10              ;Output status
 15774                                  DEVOFL  EQU     11              ;Output flush
 15775                                  DEVWRIOCTL EQU  12              ;IOCTL write
 15776                                  
 15777                                  ; ----------------------------------------------------------------------
 15778                                  struc	SYS_FCB
 15779 00000000 ??                      .fcb_drive:	resb 1
 15780 00000001 ????????????????        .fcb_name:	resb 8
 15781 00000009 ??????                  .fcb_ext:	resb 3
 15782 0000000C ????                    .fcb_EXTENT:	resw 1
 15783 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 15784 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 15785                                                          ; word
 15786 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 15787 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 15788 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 15789 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 15790                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 15791                                                          ; If file, bit 6=0 if dirty
 15792                                                          ; If I/O device, bit 6=0 if EOF (input)
 15793                                                          ;               Bit 5=1 if Raw mode
 15794                                                          ;               Bit 0=1 if console input device
 15795                                                          ;               Bit 1=1 if console output device
 15796                                                          ;               Bit 2=1 if null device
 15797                                                          ;               Bit 3=1 if clock device
 15798 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 15799 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 15800 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 15801 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 15802 00000020 ??                      .fcb_NR:	resb 1	; Next record
 15803 00000021 ????????                .fcb_RR:	resb 4	; Random record
 15804                                  .size:
 15805                                  endstruc
 15806                                  
 15807                                  ; ----------------------------------------------------------------------
 15808                                  ; Field definition for I/O buffer information
 15809                                  
 15810                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 15811                                  
 15812                                  struc buffinfo
 15813 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 15814 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 15815 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 15816                                  			; SFT table index (bit 7 = 1)
 15817                                  			; = FFh if buffer free
 15818 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 15819                                  			;	= 0 if Local device buffer
 15820                                  			; Bit 6 = 1 if buffer dirty
 15821                                  			; Bit 5 = Reserved
 15822                                  			; Bit 4 = Search bit (bit 7 = 1)
 15823                                  			; Bit 3 = 1 if buffer is DATA
 15824                                  			; Bit 2 = 1 if buffer is DIR
 15825                                  			; Bit 1 = 1 if buffer is FAT
 15826                                  			; Bit 0 = Reserved
 15827 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 15828                                  ; The next two items are often refed as a word (bit 7 = 0)
 15829 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 15830 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 15831 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 15832 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 15833 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 15834                                  .size:
 15835                                  endstruc
 15836                                  
 15837                                  %define buf_offset	dword [buf_sector]
 15838                                  			;For bit 7 = 1, this is the byte
 15839                                  			;offset of the start of the buffer in
 15840                                  			;the file pointed to by buf_ID.  Thus
 15841                                  			;the buffer starts at location
 15842                                  			;buf_offset in the file and contains
 15843                                  			;buf_fill bytes.
 15844                                  
 15845                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 15846                                  
 15847                                  
 15848                                  buf_Free	equ	0FFh		; buf_id of free buffer
 15849                                  
 15850                                  ;Flag byte masks
 15851                                  buf_isnet	EQU	10000000B
 15852                                  buf_dirty	EQU	01000000B
 15853                                  ;***
 15854                                  buf_visit	EQU	00100000B
 15855                                  ;***
 15856                                  buf_snbuf	EQU	00010000B
 15857                                  
 15858                                  buf_isDATA	EQU	00001000B
 15859                                  buf_isDIR	EQU	00000100B
 15860                                  buf_isFAT	EQU	00000010B
 15861                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 15862                                  
 15863                                  buf_NetID	EQU	bufinsiz
 15864                                  
 15865                                  ; ----------------------------------------------------------------------
 15866                                  
 15867                                  ; ----------------------------------------------------------------------
 15868                                  ;**	DPB - Drive Parameter Block
 15869                                  
 15870                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 15871                                  
 15872                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 15873                                  ;	possibly inaccurate deductions from code study... - jgl
 15874                                  ;
 15875                                  ;	The DPB is DOS's main structure for describing block devices.
 15876                                  ;	It contains info about the "Drive" intermingled with info about
 15877                                  ;	the FAT file system which is presumably on the drive.  I don't know
 15878                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 15879                                  ;
 15880                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 15881                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 15882                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 15883                                  
 15884                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 15885                                  
 15886                                  ; 12/05/2019 - Retro DOS v4.0
 15887                                  
 15888                                  struc	DPB
 15889 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 15890 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 15891 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 15892 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 15893 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 15894 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 15895 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 15896 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 15897 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 15898 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 15899                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 15900 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 15901 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 15902 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 15903 00000017 ??                      .MEDIA:		resb 1		; Media byte
 15904 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 15905                                  				; check the first time this DPB is used
 15906 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 15907 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 15908 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 15909                                  .size:
 15910                                  endstruc
 15911                                  
 15912                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 15913                                  
 15914                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 15915                                  
 15916                                  ; ----------------------------------------------------------------------
 15917                                  ; 26/03/2018
 15918                                  
 15919                                  ; IOCTL SUB-FUNCTIONS
 15920                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15921                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15922                                  IOCTL_READ_HANDLE	EQU	2
 15923                                  IOCTL_WRITE_HANDLE	EQU	3
 15924                                  IOCTL_READ_DRIVE	EQU	4
 15925                                  IOCTL_WRITE_DRIVE	EQU	5
 15926                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15927                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15928                                  IOCTL_CHANGEABLE?	EQU	8
 15929                                  IOCTL_SHARING_RETRY	EQU	11
 15930                                  GENERIC_IOCTL_HANDLE	EQU	12
 15931                                  GENERIC_IOCTL		EQU	13
 15932                                  
 15933                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15934                                  RAWIO			EQU	8
 15935                                  
 15936                                  ; RAWIO SUB-FUNCTIONS
 15937                                  GET_DEVICE_PARAMETERS	EQU	60H
 15938                                  SET_DEVICE_PARAMETERS	EQU	40H
 15939                                  READ_TRACK		EQU	61H
 15940                                  WRITE_TRACK		EQU	41H
 15941                                  VERIFY_TRACK		EQU	62H
 15942                                  FORMAT_TRACK		EQU	42H
 15943                                  
 15944                                  ; DEVICETYPE VALUES
 15945                                  MAX_SECTORS_IN_TRACK	EQU	63
 15946                                  DEV_5INCH		EQU	0
 15947                                  DEV_5INCH96TPI		EQU	1
 15948                                  DEV_3INCH720KB		EQU	2
 15949                                  DEV_8INCHSS		EQU	3
 15950                                  DEV_8INCHDS		EQU	4
 15951                                  DEV_HARDDISK		EQU	5
 15952                                  DEV_OTHER		EQU	7
 15953                                  ;DEV_3INCH1440KB	EQU	7
 15954                                  DEV_3INCH2880KB		EQU	9
 15955                                  ; Retro DOS v2.0 - 26/03/2018
 15956                                  ;;DEV_TAPE		EQU	6
 15957                                  ;;DEV_ERIMO		EQU	8
 15958                                  ;DEV_3INCH2880KB	EQU	9
 15959                                  DEV_3INCH1440KB		EQU	10
 15960                                  
 15961                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15962                                  					; CURRENTLY SUPPORT.
 15963                                  MAX_DEV_TYPE		EQU	10
 15964                                  
 15965                                  struc A_SECTORTABLE
 15966 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15967 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15968                                  .size:
 15969                                  endstruc
 15970                                  
 15971                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15972                                  
 15973                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15974                                  ;
 15975                                  ;	The BPB contains information about the disk structure.  It dates
 15976                                  ;	back to the earliest FAT systems and so FAT information is
 15977                                  ;	intermingled with physical driver information.
 15978                                  ;
 15979                                  ;	A boot sector contains a BPB for its device; for other disks
 15980                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15981                                  ;	information in the DPB.
 15982                                  ;
 15983                                  ;	The BDS structure contains a BPB within it.
 15984                                  
 15985                                  struc A_BPB
 15986 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15987 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15988 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15989 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15990 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15991 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15992 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15993 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15994 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15995 0000000F ????                    .BPB_HEADS:		resw	1
 15996 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15997 00000013 ????                    			resw	1
 15998 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15999 00000017 ????                    			resw	1
 16000 00000019 ????????????            			resb	6	; NOTE:  many times these
 16001                                  ;					; 	 6 bytes are omitted
 16002                                  ;					;	 when BPB manipulations
 16003                                  ;					;	 are performed!
 16004                                  .size:
 16005                                  endstruc
 16006                                  
 16007                                  struc A_DEVICEPARAMETERS
 16008 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 16009 00000001 ??                      .DP_DEVICETYPE:		resb	1
 16010 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 16011 00000004 ????                    .DP_CYLINDERS:		resw	1
 16012 00000006 ??                      .DP_MEDIATYPE:		resb	1
 16013 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 16014 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 16015 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 16016                                  endstruc
 16017                                  
 16018                                  ; ----------------------------------------------------------------------
 16019                                  ; structure, equates for devmark for mem command.
 16020                                  
 16021                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 16022                                  
 16023                                  struc devmark
 16024 00000000 ??                       .id:	    resb 1
 16025 00000001 ????                     .seg:	    resw 1
 16026 00000003 ????                     .size:	    resw 1
 16027 00000005 ??????                   .dum:	    resb 3
 16028 00000008 ????????????????         .filename: resb 8
 16029                                  endstruc
 16030                                  
 16031                                  devmark_stk	equ	'S'
 16032                                  devmark_device	equ	'D'
 16033                                  devmark_ifs	equ	'I'
 16034                                  devmark_buf	equ	'B'
 16035                                  devmark_cds	equ	'L' ; lastdrive
 16036                                  devmark_files	equ	'F'
 16037                                  devmark_fcbs	equ	'X'
 16038                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 16039                                  devmark_ems_stub equ	'E'
 16040                                  
 16041                                  setbrkdone	equ	00000001b
 16042                                  for_devmark	equ	00000010b
 16043                                  not_for_devmark equ	11111101b
 16044                                  
 16045                                  ; ----------------------------------------------------------------------
 16046                                  ; Memory arena structure
 16047                                  
 16048                                  ; 24/03/2019 - Retro DOS v4.0 
 16049                                  ; (MSDOS 6.0, ARENA.INC)
 16050                                  
 16051                                  ;** Arena Header
 16052                                  
 16053                                  struc ARENA
 16054 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 16055 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 16056 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 16057 00000005 ??????                  .RESERVED	resb 3		; reserved
 16058 00000008 ????????????????        .NAME:		resb 8		; owner file name
 16059                                  endstruc
 16060                                  
 16061                                  ; 12/04/2019
 16062                                  
 16063                                  arena_owner_system	EQU 0	; free block indication
 16064                                  
 16065                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 16066                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 16067                                  
 16068                                  ; ----------------------------------------------------------------------
 16069                                  ; Process data block (otherwise known as program header)
 16070                                  
 16071                                  ; 23/03/2019 - Retro DOS v4.0
 16072                                  
 16073                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 16074                                  
 16075                                  FILPERPROC	EQU     20
 16076                                  
 16077                                  struc PDB	; Process_data_block
 16078 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 16079 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 16080 00000004 ??                                      resb 1
 16081 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 16082 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 16083 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 16084 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 16085 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 16086 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 16087 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 16088 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 16089 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 16090 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 16091 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 16092 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 16093 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 16094 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 16095 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 16096 00000042 <res Eh>                .PAD1:		resb 14		; 	
 16097 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 16098 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 16099 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 16100 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 16101 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 16102 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 16103                                  ;.size:
 16104                                  endstruc
 16105                                  
 16106                                  ; ----------------------------------------------------------------------
 16107                                  ; <system call definitions>
 16108                                  
 16109                                  ; 23/03/2019 - Retro DOS v4.0
 16110                                  
 16111                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 16112                                  
 16113                                  ABORT                           EQU 0   ;  0      0
 16114                                  STD_CON_INPUT                   EQU 1   ;  1      1
 16115                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 16116                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 16117                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 16118                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 16119                                  RAW_CON_IO                      EQU 6   ;  6      6
 16120                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 16121                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 16122                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 16123                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 16124                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 16125                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 16126                                  DISK_RESET                      EQU 13  ; 13      D
 16127                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 16128                                  FCB_OPEN                        EQU 15  ; 15      F
 16129                                  FCB_CLOSE                       EQU 16  ; 16     10
 16130                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 16131                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 16132                                  FCB_DELETE                      EQU 19  ; 19     13
 16133                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 16134                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 16135                                  FCB_CREATE                      EQU 22  ; 22     16
 16136                                  FCB_RENAME                      EQU 23  ; 23     17
 16137                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 16138                                  SET_DMA                         EQU 26  ; 26     1A
 16139                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 16140                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 16141                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 16142                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 16143                                  GET_FCB_POSITION                EQU 36  ; 36     24
 16144                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 16145                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 16146                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 16147                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 16148                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 16149                                  GET_DATE                        EQU 42  ; 42     2A
 16150                                  SET_DATE                        EQU 43  ; 43     2B
 16151                                  GET_TIME                        EQU 44  ; 44     2C
 16152                                  SET_TIME                        EQU 45  ; 45     2D
 16153                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 16154                                  ; Extended functionality group
 16155                                  GET_DMA                         EQU 47  ; 47     2F
 16156                                  GET_VERSION                     EQU 48  ; 48     30
 16157                                  KEEP_PROCESS                    EQU 49  ; 49     31
 16158                                  GET_DPB                         EQU 50  ; 50     32
 16159                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 16160                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 16161                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 16162                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 16163                                  CHAR_OPER                       EQU 55  ; 55     37
 16164                                  INTERNATIONAL                   EQU 56  ; 56     38
 16165                                  ;   Directory Group
 16166                                  MKDIR                           EQU 57  ; 57     39
 16167                                  RMDIR                           EQU 58  ; 58     3A
 16168                                  CHDIR                           EQU 59  ; 59     3B
 16169                                  ;   File Group
 16170                                  CREAT                           EQU 60  ; 60     3C
 16171                                  OPEN                            EQU 61  ; 61     3D
 16172                                  CLOSE                           EQU 62  ; 62     3E
 16173                                  READ                            EQU 63  ; 63     3F
 16174                                  WRITE                           EQU 64  ; 64     40
 16175                                  UNLINK                          EQU 65  ; 65     41
 16176                                  LSEEK                           EQU 66  ; 66     42
 16177                                  CHMOD                           EQU 67  ; 67     43
 16178                                  IOCTL                           EQU 68  ; 68     44
 16179                                  XDUP                            EQU 69  ; 69     45
 16180                                  XDUP2                           EQU 70  ; 70     46
 16181                                  CURRENT_DIR                     EQU 71  ; 71     47
 16182                                  ;    Memory Group
 16183                                  ALLOC                           EQU 72  ; 72     48
 16184                                  DEALLOC                         EQU 73  ; 73     49
 16185                                  SETBLOCK                        EQU 74  ; 74     4A
 16186                                  ;    Process Group
 16187                                  EXEC                            EQU 75  ; 75     4B
 16188                                  EXIT                            EQU 76  ; 76     4C
 16189                                  WAITPROCESS			EQU 77  ; 77     4D
 16190                                  FIND_FIRST                      EQU 78  ; 78     4E
 16191                                  ;   Special Group
 16192                                  FIND_NEXT                       EQU 79  ; 79     4F
 16193                                  ; SPECIAL SYSTEM GROUP
 16194                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 16195                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 16196                                  GET_IN_VARS                     EQU 82  ; 82     52
 16197                                  SETDPB                          EQU 83  ; 83     53
 16198                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 16199                                  DUP_PDB                         EQU 85  ; 85     55
 16200                                  RENAME                          EQU 86  ; 86     56
 16201                                  FILE_TIMES                      EQU 87  ; 87     57
 16202                                  ;
 16203                                  ALLOCOPER			EQU 88	; 88     58	
 16204                                  ; Network extention system calls
 16205                                  GetExtendedError		EQU 89	; 89	 59
 16206                                  CreateTempFile			EQU 90	; 90	 5A
 16207                                  CreateNewFile			EQU 91	; 91	 5B
 16208                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 16209                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 16210                                  					;	    CloseByName, CloseUser,
 16211                                  					;	    CloseUserProcess,
 16212                                  					;	    GetOpenFileList
 16213                                  UserOper			EQU 94	; 94	 5E Get and Set
 16214                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 16215                                  xNameTrans			EQU 96	; 96	 60
 16216                                  PathParse			EQU 97	; 97	 61
 16217                                  GetCurrentPSP			EQU 98	; 98	 62
 16218                                  Hongeul 			EQU 99	; 99	 63
 16219                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 16220                                  Set_Printer_Flag		EQU 100 ; 100	 64
 16221                                  GetExtCntry			EQU 101 ; 101	 65
 16222                                  GetSetCdPg			EQU 102 ; 102	 66
 16223                                  ExtHandle			EQU 103 ; 103	 67
 16224                                  Commit				EQU 104 ; 104	 68
 16225                                  GetSetMediaID			EQU 105 ; 105	 69
 16226                                  IFS_IOCTL			EQU 107 ; 107	 6B
 16227                                  ExtOpen 			EQU 108 ; 108	 6C
 16228                                  ;
 16229                                  ;ifdef ROMEXEC
 16230                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 16231                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 16232                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 16233                                  ;endif
 16234                                  ;
 16235                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 16236                                  OEM_C1				EQU 249 ; 249	 F9
 16237                                  OEM_C2				EQU 250 ; 250	 FA
 16238                                  OEM_C3				EQU 251 ; 251	 FB
 16239                                  OEM_C4				EQU 252 ; 252	 FC
 16240                                  OEM_C5				EQU 253 ; 253	 FD
 16241                                  OEM_C6				EQU 254 ; 254	 FE
 16242                                  OEM_C7				EQU 255 ; 255	 FF
 16243                                  
 16244                                  ; ----------------------------------------------------------------------
 16245                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 16246                                  ; ----------------------------------------------------------------------
 16247                                  
 16248                                  ;;	IF	STACKSW
 16249                                  
 16250                                  ;;
 16251                                  ;; Internal Stack Parameters
 16252                                  ;EntrySize		equ	8
 16253                                  ;
 16254                                  ;MinCount		equ	8
 16255                                  ;DefaultCount		equ	9
 16256                                  ;MaxCount		equ	64
 16257                                  ;
 16258                                  ;MinSize 		equ	32
 16259                                  ;DefaultSize		equ	128
 16260                                  ;MaxSize 		equ	512
 16261                                  
 16262                                  ;;	ENDIF
 16263                                  
 16264                                  ; ----------------------------------------------------------------------
 16265                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 16266                                  ; ----------------------------------------------------------------------
 16267                                  					  ;;Rev 3.30 Modification
 16268                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 16269                                  									  
 16270                                  ;*******************************					  
 16271                                  ;System Service call ( Int 15h )					  
 16272                                  ;*******************************					  
 16273                                  ;Function AH = 0C0h, Return system configuration			  
 16274                                  ;For PC and PCJR on return:						  
 16275                                  ;	(AH)	= 80h							  
 16276                                  ;	(CY)	= 1							  
 16277                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 16278                                  ;	(AH)	= 86h							  
 16279                                  ;	(CY)	= 1							  
 16280                                  ;For all others:							  
 16281                                  ;	(AH)	= 0							  
 16282                                  ;	(CY)	= 0							  
 16283                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 16284                                  ; System descriptor :							  
 16285                                  ;	DW	xxxx		length of descriptor in bytes,		  
 16286                                  ;				minimum length = 8			  
 16287                                  ;	DB	xx		model byte				  
 16288                                  ;				0FFh	= PC				  
 16289                                  ;				0FEh	= PC/XT, Portable		  
 16290                                  ;				0FDh	= PC/JR 			  
 16291                                  ;				0FCh	= PC/AT				  
 16292                                  ;				0F9h	= Convertable			  
 16293                                  ;				0F8h	= Model 80			  
 16294                                  ;				0E0 thru 0EFh = reserved		  
 16295                                  ;									  
 16296                                  ;	DB	xx		secondary model byte			  
 16297                                  ;				000h	= PC1				  
 16298                                  ;				000h	= PC/XT, Portable		  
 16299                                  ;				000h	= PC/JR 			  
 16300                                  ;				000h	= PC/AT 			  
 16301                                  ;				001h	= PC/AT Model 339		  
 16302                                  ;				003h	= PC/RT				  
 16303                                  ;				000h	= Convertable			  
 16304                                  ;									  
 16305                                  ;	DB	xx		bios revision level			  
 16306                                  ;				00 for first release, subsequent release  
 16307                                  ;				of code with same model byte and	  
 16308                                  ;				secondary model byte require revison level
 16309                                  ;				to increase by one.			  
 16310                                  ;									  
 16311                                  ;	DB	xx		feature information byte 1		  
 16312                                  ;				X0000000 = 1, bios use DMA channel 3	  
 16313                                  ;					 = 0, DMA channel 3 not used	  
 16314                                  ;									  
 16315                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 16316                                  ;					 = 0, 2nd Interrupt chip not present
 16317                                  ;									  
 16318                                  ;				00X00000 = 1, Real Time Clock present	  
 16319                                  ;					 = 0, Real Time Clock not present 
 16320                                  ;									  
 16321                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 16322                                  ;						called in keyboard interrupt
 16323                                  ;						(Int 09h).		  
 16324                                  ;					 = 0, Keyboard escape sequence not
 16325                                  ;						called. 		  
 16326                                  ;				0000XXXX reserved			  
 16327                                  ;									  
 16328                                  ;	DB	xx		feature information byte 2 - reserved	  
 16329                                  ;									  
 16330                                  ;	DB	xx		feature information byte 2 - reserved	  
 16331                                  ;									  
 16332                                  ;	DB	xx		feature information byte 2 - reserved	  
 16333                                  ;									  
 16334                                  ;	DB	xx		feature information byte 2 - reserved	  
 16335                                  ;									  
 16336                                  
 16337                                  ; 22/03/2019									  
 16338                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 16339 00000000 ????                    .bios_sd_leng:		resw 1				  
 16340 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 16341                                  .bios_sd_scnd_modelbyte: 
 16342 00000003 ??                      			resb 1					  
 16343 00000004 ??                      			resb 1					  
 16344 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 16345 00000006 ????????                			resb 4					  
 16346                                  endstruc					  
 16347                                  									  
 16348                                  ;FeatureByte1	bit map equates 					  
 16349                                  DMAchannel3		equ 10000000b					  
 16350                                  ScndIntController	equ 01000000b					  
 16351                                  RealTimeClock		equ 00100000b					  
 16352                                  KeyEscapeSeq		equ 00010000b					  
 16353                                  					;;End of Modification
 16354                                  
 16355                                  ; ----------------------------------------------------------------------
 16356                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 16357                                  ; ----------------------------------------------------------------------
 16358                                  ; 22/03/2019 - Retro DOS v4.0
 16359                                  
 16360                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 16361                                  
 16362                                  struc SysInitVars
 16363                                  ; MSDOS 3.3
 16364 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 16365 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 16366 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 16367 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 16368 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 16369 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 16370 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 16371 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 16372 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 16373 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 16374 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 16375 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 16376                                  ; MSDOS 6.0
 16377 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 16378 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 16379 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 16380 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 16381                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 16382 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 16383 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 16384 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 16385 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 16386 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 16387 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 16388 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 16389                                  .size:
 16390                                  endstruc
 16391                                  
 16392                                  ;This is added for more information exchage between DOS, BIOS.
 16393                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 16394                                  
 16395                                  ; 22/03/2019
 16396                                  struc SysInitVars_Ext
 16397 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 16398 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 16399                                  endstruc
 16400                                  
 16401                                  ; 09/06/2018
 16402                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 16403                                  SYSI_DPB    equ	0
 16404                                  SYSI_SFT    equ 4
 16405                                  SYSI_CLOCK  equ 8
 16406                                  SYSI_CON    equ 12
 16407                                  SYSI_MAXSEC equ 16
 16408                                  SYSI_BUF    equ 18 		
 16409                                  SYSI_CDS    equ 22
 16410                                  SYSI_FCB    equ 26
 16411                                  SYSI_KEEP   equ 30
 16412                                  SYSI_NUMIO  equ	32
 16413                                  SYSI_NCDS   equ	33
 16414                                  SYSI_DEV    equ 34
 16415                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 16416                                  SYSI_ATTR	  equ 38
 16417                                  SYSI_STRAT	  equ 40
 16418                                  SYSI_INTER	  equ 42
 16419                                  SYSI_NAME	  equ 44
 16420                                  SYSI_SPLICE	  equ 52
 16421                                  SYSI_IBMDOS_SIZE  equ 53
 16422                                  SYSI_IFS_DOSCALL@ equ 55
 16423                                  SYSI_IFS	  equ 59
 16424                                  SYSI_BUFFERS	  equ 63
 16425                                  SYSI_BOOT_DRIVE   equ 67
 16426                                  SYSI_DWMOVE	  equ 68
 16427                                  SYSI_EXT_MEM	  equ 69
 16428                                  
 16429                                  ;The SYSI_BUF of SysInitVars points to the following structure
 16430                                  
 16431                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 16432                                  
 16433                                  struc BUFFINF 	; BUFFINFO
 16434 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 16435 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 16436 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 16437 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 16438                                  
 16439 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 16440                                  				; are in HMA
 16441 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 16442                                  				;  used to read/write on disks
 16443 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 16444 00000015 ????                    .UU_EMS_NPA640:		resw 1
 16445 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 16446 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 16447 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 16448 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 16449 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 16450 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 16451 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 16452                                  .size:
 16453                                  endstruc
 16454                                  
 16455                                  ; ----------------------------------------------------------------------
 16456                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 16457                                  ; ----------------------------------------------------------------------
 16458                                  ; 22/03/2019 - Retro DOS v4.0
 16459                                  
 16460                                  ;**	CDS - Current Directory Structure
 16461                                  ;
 16462                                  ; CDS items are used bu the internal routines to store cluster numbers and
 16463                                  ; network identifiers for each logical name.  The ID field is used dually,
 16464                                  ; both as net ID and for a cluster number for local devices. In the case
 16465                                  ; of local devices, the cluster number will be -1 if there is a potential
 16466                                  ; of the disk being changed or if the path must be recracked.
 16467                                  ;
 16468                                  ;	Some pathnames have special preambles, such as
 16469                                  ;
 16470                                  ;		\\machine\sharename\...
 16471                                  ;	For these pathnames we can't allow ".." processing to back us
 16472                                  ;	up into the special front part of the name.  The CURDIR_END field
 16473                                  ;	holds the address of the seperator character which marks
 16474                                  ;	the split between the special preamble and the regular
 16475                                  ;	path list; ".." processing isn't allowed to back us up past
 16476                                  ;	(i.e., before) CURDIR_END
 16477                                  ;	For the root, it points at the leading /. For net
 16478                                  ;	assignments it points at the end (nul) of the initial assignment:
 16479                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 16480                                  ;	  ^		 ^		     ^
 16481                                  
 16482                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 16483                                  TEMPLEN 	EQU	DIRSTRLEN*2
 16484                                  
 16485                                  struc 		curdir_list
 16486                                  ; MSDOS 3.3
 16487 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 16488 00000043 ????                    .cdir_flags	resw	1		; various flags
 16489 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 16490 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 16491 0000004D ????                    .cdir_usr_word	resw	1
 16492 0000004F ????                    .cdir_end	resw	1		; end of assignment
 16493                                  ; MSDOS 6.0
 16494 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 16495 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 16496 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 16497                                  .size:
 16498                                  endstruc
 16499                                  
 16500                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 16501                                  						; ASM87 which doesn't allow
 16502                                  						; Size directive as a macro
 16503                                  						; argument
 16504                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 16505                                  
 16506                                  ;**	Flag values for CURDIR_FLAGS
 16507                                  
 16508                                  ;Flag word masks
 16509                                  curdir_isnet	EQU	1000000000000000B
 16510                                  curdir_isifs	EQU	1000000000000000B
 16511                                  curdir_inuse	EQU	0100000000000000B
 16512                                  curdir_splice	EQU	0010000000000000B
 16513                                  curdir_local	EQU	0001000000000000B
 16514                                  
 16515                                  ; ----------------------------------------------------------------------
 16516                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 16517                                  ; ----------------------------------------------------------------------
 16518                                  ; 25/03/2019 - Retro DOS v4.0
 16519                                  
 16520                                  ; 09/04/2024 - Retro DOS v4.1 (BugFix)
 16521                                  
 16522                                  ; system file table
 16523                                  
 16524                                  ;**	System File Table SuperStructure
 16525                                  ;
 16526                                  ;	The system file table entries are allocated in contiguous groups.
 16527                                  ;	There may be more than one such groups; the SF "superstructure"
 16528                                  ;	tracks the groups.
 16529                                  
 16530                                  struc	SF
 16531 00000000 ????????                .SFLink:	resd	1
 16532 00000004 ????                    .SFCount:	resw	1		; number of entries
 16533 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 16534                                  .size:
 16535                                  endstruc
 16536                                  
 16537                                  ;**	System file table entry
 16538                                  ;
 16539                                  ;	These are the structures which are at SFTABLE in the SF structure.
 16540                                  
 16541                                  struc	SF_ENTRY
 16542 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 16543                                  					;   if FCB then ref count
 16544 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 16545 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 16546 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 16547                                  					; Bit 15 = 1 if remote file
 16548                                  					;	 = 0 if local file or device
 16549                                  					; Bit 14 = 1 if date/time is not to be
 16550                                  					;   set from clock at CLOSE.  Set by
 16551                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 16552                                  					;   other reseters of the dirty bit
 16553                                  					;   (WRITE)
 16554                                  					; Bit 13 = Pipe bit (reserved)
 16555                                  					;
 16556                                  					; Bits 0-7 (old FCB_devid bits)
 16557                                  					; If remote file or local file, bit
 16558                                  					; 6=0 if dirty Device ID number, bits
 16559                                  					; 0-5 if local file.
 16560                                  					; bit 7=0 for local file, bit 7
 16561                                  					;      =1 for local I/O device
 16562                                  					; If local I/O device, bit 6=0 if EOF (input)
 16563                                  					;		Bit 5=1 if Raw mode
 16564                                  					;		Bit 0=1 if console input device
 16565                                  					;		Bit 1=1 if console output device
 16566                                  					;		Bit 2=1 if null device
 16567                                  					;		Bit 3=1 if clock device
 16568 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 16569                                  					; to device header if local device,
 16570                                  					; points to net device header if
 16571                                  					; remote
 16572 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 16573                                  ;.sf_lstclus:	resw	1 ; *	
 16574 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 16575 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 16576 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 16577 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 16578                                  ;
 16579                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 16580                                  ; ID
 16581                                  ;
 16582 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 16583 0000001B ????????                .sf_dirsec:	resd	1 ; 09/04/2024	; Sector number of directory sector for this file
 16584 0000001F ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 16585                                  ;
 16586                                  ; End of 7 bytes of file-system specific info.
 16587                                  ;
 16588 00000020 <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 16589                                  					; directory entry.  This is used by
 16590                                  					; close to detect file deleted and
 16591                                  					; disk changed errors.
 16592                                  ; SHARING INFO
 16593 0000002B ????????                .sf_chain:	resd	1		; link to next SF
 16594 0000002F ????                    .sf_UID:	resw	1
 16595 00000031 ????                    .sf_PID:	resw	1
 16596 00000033 ????                    .sf_MFT:	resw	1
 16597 00000035 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 16598 00000037 ????????                .sf_IFS_HDR:	resd 	1 ; **
 16599                                  .size:
 16600                                  endstruc
 16601                                  
 16602                                  ; ----------------------------------------------------------------------
 16603                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 16604                                  ; ----------------------------------------------------------------------
 16605                                  ; 11/06/2018 - Retro DOS v3.0
 16606                                  
 16607                                  ;Equates for COUNTRY INFORMATION.
 16608                                  SetCountryInfo		EQU	1	;country info
 16609                                  SetUcase		EQU	2	;uppercase table
 16610                                  SetLcase		EQU	3	;lowercase table (Reserved)
 16611                                  SetUcaseFile		EQU	4	;uppercase file spec table
 16612                                  SetFileList		EQU	5	;valid file character list
 16613                                  SetCollate		EQU	6	;collating sequence
 16614                                  SetDBCS 		EQU	7	;double byte character set
 16615                                  SetALL			EQU	-1	;all the entries
 16616                                  
 16617                                  ;DOS country and code page information table structure.
 16618                                  ;Internally, IBMDOS gives a pointer to this table.
 16619                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 16620                                  ;this structure.
 16621                                  
 16622                                  struc country_cdpg_info ; DOS_country_cdpg_info
 16623 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 16624 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 16625 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 16626 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 16627 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 16628 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 16629                                  
 16630 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 16631 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 16632                                  
 16633 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 16634 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 16635                                  
 16636 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 16637 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 16638                                  
 16639 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 16640 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 16641 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 16642 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 16643 00000067 ????                    .ccDFormat:		resw	1	;date format
 16644 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 16645                                  					;5 byte of (currency symbol+0)
 16646 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 16647 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 16648 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 16649 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 16650 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 16651 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 16652 00000078 ??                      .ccTFormat:		resb	1	;time format
 16653 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 16654 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 16655 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 16656                                  .size:
 16657                                  endstruc
 16658                                  
 16659                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 16660                                  
 16661                                  ; ======================================================================
 16662                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 16663                                  ; ======================================================================
 16664                                  ; 21/03/2019 - Retro DOS v4.0
 16665                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16666                                  
 16667                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 16668                                  ; 21/10/2022
 16669                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 16670                                  ; 22/10/2022
 16671                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 16672                                  ; 09/12/2022
 16673                                  DOSBIOCODESEG equ IOSYSCODESEG
 16674                                  
 16675                                  ; Note: These offset addresses must be chanqed when the code 
 16676                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 16677                                  
 16678                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 16679                                  
 16680                                  ; 09/12/2022
 16681                                  %if 0
 16682                                  
 16683                                  ; 13/05/2019
 16684                                  
 16685                                  ;IsWin386         equ 08CFh
 16686                                  ;V86_Crit_SetFocus equ 08D0h
 16687                                  ; 21/10/2022
 16688                                  IsWin386          equ 08D0h
 16689                                  V86_Crit_SetFocus equ 08D1h 
 16690                                  
 16691                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 16692                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 16693                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 16694                                  
 16695                                  ;SysinitPresent	  equ 08FCh
 16696                                  ; 21/10/2022
 16697                                  SysinitPresent	  equ 08FDh
 16698                                  
 16699                                  inHMA		  equ 000Dh
 16700                                  xms		  equ 000Eh
 16701                                  ;FreeHMAPtr	  equ 08F6h
 16702                                  ;multrk_flag	  equ 0533h
 16703                                  ;ec35_flag	  equ 0535h
 16704                                  ;EOT		  equ 012Eh
 16705                                  ; 21/10/2022
 16706                                  FreeHMAPtr	  equ 08F7h
 16707                                  multrk_flag	  equ 052Fh
 16708                                  ec35_flag	  equ 0531h
 16709                                  EOT		  equ 012Ch
 16710                                  
 16711                                  ;NextStack	  equ 08BFh
 16712                                  ;IT_StackLoc	  equ 08C5h
 16713                                  ;IT_StackSize	  equ 08C9h
 16714                                  ; 21/10/2022
 16715                                  NextStack	  equ 08C0h
 16716                                  IT_StackLoc	  equ 08C6h
 16717                                  IT_StackSize	  equ 08CAh
 16718                                  
 16719                                  ;MoveDOSIntoHMA	  equ 08F8h
 16720                                  ; 21/10/2022
 16721                                  MoveDOSIntoHMA	  equ 08F9h
 16722                                  
 16723                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 16724                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 16725                                  ; 21/10/2022
 16726                                  INT19SEM equ 0640h ; (iosys5.txt)
 16727                                  I19_LST  equ 0641h ; (iosys5.txt)
 16728                                  
 16729                                  %endif
 16730                                  
 16731                                  ; 09/12/2022
 16732                                  seg_reinit equ _seg_reinit
 16733                                  ec35_flag  equ ec35flag		
 16734                                  INT19SEM   equ int19sem
 16735                                  I19_LST    equ i19_lst
 16736                                  
 16737                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 16738                                  INT19OLD08 equ I19_LST+6
 16739                                  INT19OLD09 equ I19_LST+11
 16740                                  INT19OLD0A equ I19_LST+16
 16741                                  INT19OLD0B equ I19_LST+21
 16742                                  INT19OLD0C equ I19_LST+26
 16743                                  INT19OLD0D equ I19_LST+31
 16744                                  INT19OLD0E equ I19_LST+36
 16745                                  INT19OLD70 equ I19_LST+41
 16746                                  INT19OLD72 equ I19_LST+46
 16747                                  INT19OLD73 equ I19_LST+51
 16748                                  INT19OLD74 equ I19_LST+56
 16749                                  INT19OLD76 equ I19_LST+61
 16750                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 16751                                  
 16752                                  ; 09/12/2022
 16753                                  %if 0
 16754                                  
 16755                                  ;keyrd_func	equ 04E9h
 16756                                  ;keysts_func	equ 04EAh
 16757                                  ;t_switch	equ 04F6h
 16758                                  ; 21/10/2022
 16759                                  keyrd_func	equ 04E5h
 16760                                  keysts_func	equ 04E6h
 16761                                  t_switch	equ 04F2h
 16762                                  
 16763                                  ; 22/10/2022
 16764                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 16765                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 16766                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 16767                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 16768                                  
 16769                                  %endif
 16770                                  
 16771                                  ; 09/12/2022
 16772                                  BCODESTART	equ BIOSDATAWORD
 16773                                  RE_INIT		equ re_init
 16774                                  
 16775                                  ; ----------------------------------------------------------------------
 16776                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 16777                                  ; ----------------------------------------------------------------------
 16778                                  ; 15/04/2019 - Retro DOS v4.0
 16779                                  
 16780                                  CONFIG_BEGIN        equ  '['
 16781                                  CONFIG_BREAK        equ  'C'
 16782                                  CONFIG_BUFFERS      equ  'B'
 16783                                  CONFIG_COMMENT      equ  'Y'
 16784                                  CONFIG_COUNTRY      equ  'Q'
 16785                                  CONFIG_DEVICE       equ  'D'
 16786                                  CONFIG_DEVICEHIGH   equ  'U'
 16787                                  CONFIG_DOS          equ  'H'
 16788                                  CONFIG_DRIVPARM     equ  'P'
 16789                                  CONFIG_FCBS         equ  'X'
 16790                                  CONFIG_FILES        equ  'F'
 16791                                  CONFIG_INCLUDE      equ  'J'
 16792                                  CONFIG_INSTALL      equ  'I'
 16793                                  CONFIG_INSTALLHIGH  equ  'W'
 16794                                  CONFIG_LASTDRIVE    equ  'L'
 16795                                  CONFIG_MENUCOLOR    equ  'R'
 16796                                  CONFIG_MENUDEFAULT  equ  'A'
 16797                                  CONFIG_MENUITEM     equ  'E'
 16798                                  CONFIG_MULTITRACK   equ  'M'
 16799                                  CONFIG_NUMLOCK      equ  'N'
 16800                                  CONFIG_REM          equ  '0'
 16801                                  CONFIG_SEMICOLON    equ  ';'
 16802                                  CONFIG_SET          equ  'V'
 16803                                  CONFIG_SHELL        equ  'S'
 16804                                  CONFIG_STACKS       equ  'K'
 16805                                  CONFIG_SUBMENU      equ  'O'
 16806                                  CONFIG_SWITCHES     equ  '1'
 16807                                  
 16808                                  CONFIG_UNKNOWN      equ  'Z'
 16809                                  
 16810                                  CONFIG_OPTION_QUERY equ 80h
 16811                                  
 16812                                  ; ----------------------------------------------------------------------
 16813                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 16814                                  ; ----------------------------------------------------------------------
 16815                                  ; 21/03/2019 - Retro DOS v4.0
 16816                                  
 16817                                  true	equ	0FFFFh
 16818                                  false	equ	0
 16819                                  cr	equ	13
 16820                                  lf	equ	10
 16821                                  tab	equ	9
 16822                                  
 16823                                  multMULT	   equ	4Ah
 16824                                  multMULTGETHMAPTR  equ	1
 16825                                  multMULTALLOCHMA   equ	2
 16826                                  
 16827                                  ;NOEXEC    equ	FALSE
 16828                                  
 16829                                  stacksw    equ	true	;include switchable hardware stacks
 16830                                  mycds_size equ	88	;size of curdir_list. if it is not
 16831                                  			;the same, then will generate compile error.
 16832                                  
 16833                                  entrysize   equ     8
 16834                                  
 16835                                  mincount    equ     8
 16836                                  defaultcount equ    9
 16837                                  maxcount    equ     64
 16838                                  
 16839                                  minsize     equ     32
 16840                                  defaultsize equ     128
 16841                                  maxsize     equ     512
 16842                                  
 16843                                  ;%define allocbyte  byte [es:bp+0]
 16844                                  ;%define intlevel   byte [es:bp+1]
 16845                                  ;%define savedsp    word [es:bp+2]
 16846                                  ;%define savedss    word [es:bp+4]
 16847                                  ;%define newsp	    word [es:bp+6]
 16848                                  
 16849                                  allocbyte   equ     0
 16850                                  intlevel    equ     1
 16851                                  savedsp     equ     2
 16852                                  savedss     equ     4
 16853                                  newsp       equ     6
 16854                                  
 16855                                  free	    equ     0
 16856                                  allocated   equ     1
 16857                                  overflowed  equ     2
 16858                                  clobbered   equ     3
 16859                                  
 16860                                  ;---------------------------------------
 16861                                  ; external variable defined in ibmbio module for multi-track
 16862                                  
 16863                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 16864                                  			  ; it on after handling config.sys file as a
 16865                                  			  ; default value,if multrk_flag = multrk_off1.
 16866                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 16867                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 16868                                  
 16869                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 16870                                  
 16871                                  SYSINIT$:
 16872                                  	;IF	STACKSW 
 16873                                  	; include MSSTACK.INC	;Main stack program and data definitions
 16874                                  	; include STKMES.INC	;Fatal stack error message
 16875                                  	;   public Endstackcode
 16876                                  ;Endstackcode	label byte
 16877                                  	;ENDIF
 16878                                  
 16879                                  ; 05/07/2018
 16880                                  ; ----------------------------------------------------------------------
 16881                                  ; 04/06/2018 - Retro DOS v3.0
 16882                                  
 16883                                  ; ----------------------------------------------------------------------
 16884                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 16885                                  ; ----------------------------------------------------------------------
 16886                                  
 16887                                  ;	MSStack.inc
 16888                                  ;
 16889                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 16890                                  ;	should follow the standard Interrupt Sharing Scheme which has
 16891                                  ;	a standard header structure.
 16892                                  ;	Fyi, the following shows the relations between
 16893                                  ;	the interrupt vector and interrupt level.
 16894                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 16895                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 16896                                  ;	MSSTACK module modifies the following interrupt vectors
 16897                                  ;	to meet the standard Interrupt Sharing standard;
 16898                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 16899                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 16900                                  ;	should be initialized to indicat whether this interrupt handler is
 16901                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 16902                                  ;	program header is initialized in STKINIT.INC module.
 16903                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 16904                                  ;
 16905                                  
 16906                                  ;  User specifies the number of stack elements - default = 9
 16907                                  ;						 minimum = 8
 16908                                  ;						 maximum = 64
 16909                                  ;
 16910                                  ;  Intercepts Asynchronous Hardware Interrupts only
 16911                                  ;
 16912                                  ;  Picks a stack from pool of stacks and switches to it
 16913                                  ;
 16914                                  ;  Calls the previously saved interrupt vector after pushing flags
 16915                                  ;
 16916                                  ;  On return, returns the stack to the stack pool
 16917                                  ;
 16918                                  
 16919                                  ; This is a modification of STACKS:
 16920                                  ; 1. To fix a bug which was causing the program to take up too much space.
 16921                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16922                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16923                                  ;    . Allows system to work if the only stack that got too big was the most
 16924                                  ;      deeply nested one
 16925                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16926                                  ; 4. Does not intercept any interupts on a PCjr.
 16927                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16928                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16929                                  
 16930                                  		;EVEN
 16931                                  ;align 2
 16932                                  		; 21/10/2022
 16933                                  
 16934 00000000 0000                    		dw	0	; spare field but leave these in order
 16935 00000002 0000                    stackcount:	dw	0
 16936 00000004 0000                    stackat: 	dw	0
 16937 00000006 0000                    stacksize:	dw	0
 16938 00000008 0000                    stacks:		dw	0
 16939 0000000A 0000                    		dw	0
 16940                                  
 16941 0000000C [0800]                  firstentry:	dw	stacks
 16942 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16943 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16944                                  
 16945                                  ;***********************************************************************
 16946                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16947                                  
 16948                                  ; ----------------------------------------------------------------------
 16949                                  
 16950 00000012 00000000                old02:	dd	0
 16951                                  
 16952                                  int02:
 16953                                  
 16954                                  ; *********************************************************************
 16955                                  ;
 16956                                  ; this is special support for the pc convertible / nmi handler
 16957                                  ;
 16958                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16959                                  ;	caused by using the "out" instructions to certain ports. when this
 16960                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16961                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16962                                  ;	includes other type of interrupts (hardware and software), and
 16963                                  ;	also includes other type of nmi's. when any nmi has occured,
 16964                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16965                                  ;	the software takes specific steps to allow further interrupting.
 16966                                  ;
 16967                                  ;	for pc convertible, the situation where the nmi is generated by the
 16968                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16969                                  ;	otherwords, it is actually a "restartable exception". in this
 16970                                  ;	case, the software handler must be able to get to the stack in
 16971                                  ;	order to figure out what instruction caused the problem, where
 16972                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16973                                  ;	we will not switch stacks in this situation. this situation is
 16974                                  ;	detected by interrogating port 62h, and checking for a bit value
 16975                                  ;	of 80h. if set, *****do not switch stacks*****.
 16976                                  ;
 16977                                  ; *********************************************************************
 16978                                  
 16979 00000016 50                      	push	ax
 16980 00000017 06                      	push	es
 16981 00000018 B800F0                  	mov	ax,0F000h
 16982 0000001B 8EC0                    	mov	es,ax
 16983                                  	; 02/11/2022
 16984 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16985 00000023 07                      	pop	es
 16986 00000024 750C                    	jne	short normal02
 16987                                  
 16988 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16989                                  				; 0-3: values of DIP switches
 16990                                  				; 5: 1=Timer 2 channel out
 16991                                  				; 6: 1=I/O channel check
 16992                                  				; 7: 1=RAM parity check error occurred.
 16993 00000028 A880                    	test	al,80h
 16994 0000002A 7406                    	jz	short normal02
 16995                                  special02:
 16996 0000002C 58                      	pop	ax
 16997 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16998                                  normal02:
 16999 00000032 58                      	pop	ax
 17000 00000033 E81101                  	call	do_int_stacks
 17001 00000036 [1200]                  	dw	old02
 17002                                  
 17003                                  ; ----------------------------------------------------------------------
 17004                                  
 17005 00000038 00000000                old08:	dd	0
 17006                                  
 17007                                  int08:
 17008 0000003C E80801                  	call	do_int_stacks
 17009 0000003F [3800]                  	dw	old08
 17010                                  
 17011                                  ; ----------------------------------------------------------------------
 17012                                  
 17013 00000041 00000000                old09:	dd	0
 17014                                  
 17015                                  int09:
 17016                                  
 17017                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 17018                                  ; as its first instruction for compatibility reasons
 17019                                  
 17020 00000045 EB02                    	jmp	short keyboard_lbl
 17021 00000047 90                      	nop
 17022 00000048 00                      	db	0
 17023                                  
 17024                                  keyboard_lbl:
 17025 00000049 E8FB00                  	call	do_int_stacks
 17026 0000004C [4100]                  	dw	old09
 17027                                  
 17028                                  ; ----------------------------------------------------------------------
 17029                                  
 17030 0000004E 00000000                old70:	dd	0
 17031                                  
 17032                                  int70:
 17033 00000052 E8F200                  	call	do_int_stacks
 17034 00000055 [4E00]                  	dw	old70
 17035                                  
 17036                                  ; ----------------------------------------------------------------------
 17037                                  
 17038                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 17039                                  ;public	int&a
 17040                                  ;public	old&a
 17041                                  ;public	firstflag&a
 17042                                  ;int&a	proc	far
 17043                                  ;	jmp	short entry_int&a&_stk
 17044                                  ;old&a	dd	  0		;forward pointer
 17045                                  ;	dw	  424bh 	;compatible signature for int. sharing
 17046                                  ;firstflag&a db   0		;the firstly hooked.
 17047                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 17048                                  ;	db	7 dup (0)	;reserved for future.
 17049                                  ;entry_int&a&_stk:
 17050                                  ;	call	do_int_stacks
 17051                                  ;	dw	old&a
 17052                                  ;intret_&a:
 17053                                  ;	iret
 17054                                  ;int&a	endp
 17055                                  ;	endm
 17056                                  
 17057                                  ; ----------------------------------------------------------------------
 17058                                  
 17059                                  int0A:
 17060 00000057 EB10                    	jmp	short entry_int0A_stk
 17061 00000059 00000000                old0A:	dd	0	
 17062 0000005D 4B42                    	dw	424Bh
 17063                                  firstflag0A:
 17064 0000005F 00                      	db	0
 17065 00000060 EB0C                    	jmp	short intret_0A
 17066 00000062 00<rep 7h>              	times	7 db 0
 17067                                  
 17068                                  entry_int0A_stk:
 17069 00000069 E8DB00                  	call	do_int_stacks
 17070 0000006C [5900]                  	dw	old0A
 17071                                  intret_0A:
 17072 0000006E CF                      	iret
 17073                                  
 17074                                  ; ----------------------------------------------------------------------
 17075                                  
 17076                                  int0B:
 17077 0000006F EB10                    	jmp	short entry_int0B_stk
 17078 00000071 00000000                old0B:	dd	0	
 17079 00000075 4B42                    	dw	424Bh
 17080                                  firstflag0B:
 17081 00000077 00                      	db	0
 17082 00000078 EB0C                    	jmp	short intret_0B
 17083 0000007A 00<rep 7h>              	times	7 db 0
 17084                                  
 17085                                  entry_int0B_stk:
 17086 00000081 E8C300                  	call	do_int_stacks
 17087 00000084 [7100]                  	dw	old0B
 17088                                  intret_0B:
 17089 00000086 CF                      	iret
 17090                                  
 17091                                  ; ----------------------------------------------------------------------
 17092                                  
 17093                                  int0C:
 17094 00000087 EB10                    	jmp	short entry_int0C_stk
 17095 00000089 00000000                old0C:	dd	0	
 17096 0000008D 4B42                    	dw	424Bh
 17097                                  firstflag0C:
 17098 0000008F 00                      	db	0
 17099 00000090 EB0C                    	jmp	short intret_0C
 17100 00000092 00<rep 7h>              	times	7 db 0
 17101                                  
 17102                                  entry_int0C_stk:
 17103 00000099 E8AB00                  	call	do_int_stacks
 17104 0000009C [8900]                  	dw	old0C
 17105                                  intret_0C:
 17106 0000009E CF                      	iret
 17107                                  
 17108                                  ; ----------------------------------------------------------------------
 17109                                  
 17110                                  int0D:
 17111 0000009F EB10                    	jmp	short entry_int0D_stk
 17112 000000A1 00000000                old0D:	dd	0	
 17113 000000A5 4B42                    	dw	424Bh
 17114                                  firstflag0D:
 17115 000000A7 00                      	db	0
 17116 000000A8 EB0C                    	jmp	short intret_0D
 17117 000000AA 00<rep 7h>              	times	7 db 0
 17118                                  
 17119                                  entry_int0D_stk:
 17120 000000B1 E89300                  	call	do_int_stacks
 17121 000000B4 [A100]                  	dw	old0D
 17122                                  intret_0D:
 17123 000000B6 CF                      	iret
 17124                                  
 17125                                  ; ----------------------------------------------------------------------
 17126                                  
 17127                                  int0E:
 17128 000000B7 EB10                    	jmp	short entry_int0E_stk
 17129 000000B9 00000000                old0E:	dd	0	
 17130 000000BD 4B42                    	dw	424Bh
 17131                                  firstflag0E:
 17132 000000BF 00                      	db	0
 17133 000000C0 EB0C                    	jmp	short intret_0E
 17134 000000C2 00<rep 7h>              	times	7 db 0
 17135                                  
 17136                                  entry_int0E_stk:
 17137 000000C9 E87B00                  	call	do_int_stacks
 17138 000000CC [B900]                  	dw	old0E
 17139                                  intret_0E:
 17140 000000CE CF                      	iret
 17141                                  
 17142                                  ; ----------------------------------------------------------------------
 17143                                  
 17144                                  int72:
 17145 000000CF EB10                    	jmp	short entry_int72_stk
 17146 000000D1 00000000                old72:	dd	0	
 17147 000000D5 4B42                    	dw	424Bh
 17148                                  firstflag72:
 17149 000000D7 00                      	db	0
 17150 000000D8 EB0C                    	jmp	short intret_72
 17151 000000DA 00<rep 7h>              	times	7 db 0
 17152                                  
 17153                                  entry_int72_stk:
 17154 000000E1 E86300                  	call	do_int_stacks
 17155 000000E4 [D100]                  	dw	old72
 17156                                  intret_72:
 17157 000000E6 CF                      	iret
 17158                                  
 17159                                  ; ----------------------------------------------------------------------
 17160                                  
 17161                                  int73:
 17162 000000E7 EB10                    	jmp	short entry_int73_stk
 17163 000000E9 00000000                old73:	dd	0	
 17164 000000ED 4B42                    	dw	424Bh
 17165                                  firstflag73:
 17166 000000EF 00                      	db	0
 17167 000000F0 EB0C                    	jmp	short intret_73
 17168 000000F2 00<rep 7h>              	times	7 db 0
 17169                                  
 17170                                  entry_int73_stk:
 17171 000000F9 E84B00                  	call	do_int_stacks
 17172 000000FC [E900]                  	dw	old73
 17173                                  intret_73:
 17174 000000FE CF                      	iret
 17175                                  
 17176                                  ; ----------------------------------------------------------------------
 17177                                  
 17178                                  int74:
 17179 000000FF EB10                    	jmp	short entry_int74_stk
 17180 00000101 00000000                old74:	dd	0	
 17181 00000105 4B42                    	dw	424Bh
 17182                                  firstflag74:
 17183 00000107 00                      	db	0
 17184 00000108 EB0C                    	jmp	short intret_74
 17185 0000010A 00<rep 7h>              	times	7 db 0
 17186                                  
 17187                                  entry_int74_stk:
 17188 00000111 E83300                  	call	do_int_stacks
 17189 00000114 [0101]                  	dw	old74
 17190                                  intret_74:
 17191 00000116 CF                      	iret
 17192                                  
 17193                                  ; ----------------------------------------------------------------------
 17194                                  
 17195                                  int76:
 17196 00000117 EB10                    	jmp	short entry_int76_stk
 17197 00000119 00000000                old76:	dd	0	
 17198 0000011D 4B42                    	dw	424Bh
 17199                                  firstflag76:
 17200 0000011F 00                      	db	0
 17201 00000120 EB0C                    	jmp	short intret_76
 17202 00000122 00<rep 7h>              	times	7 db 0
 17203                                  
 17204                                  entry_int76_stk:
 17205 00000129 E81B00                  	call	do_int_stacks
 17206 0000012C [1901]                  	dw	old76
 17207                                  intret_76:
 17208 0000012E CF                      	iret
 17209                                  
 17210                                  ; ----------------------------------------------------------------------
 17211                                  
 17212                                  int77:
 17213 0000012F EB10                    	jmp	short entry_int77_stk
 17214 00000131 00000000                old77:	dd	0	
 17215 00000135 4B42                    	dw	424Bh
 17216                                  firstflag77:
 17217 00000137 00                      	db	0
 17218 00000138 EB0C                    	jmp	short intret_77
 17219 0000013A 00<rep 7h>              	times	7 db 0
 17220                                  
 17221                                  entry_int77_stk:
 17222 00000141 E80300                  	call	do_int_stacks
 17223 00000144 [3101]                  	dw	old77
 17224                                  intret_77:
 17225 00000146 CF                      	iret
 17226                                  
 17227                                  ; ----------------------------------------------------------------------
 17228                                  
 17229                                  ;********************************************************************
 17230                                  ;common routines
 17231                                  ;********************************************************************
 17232                                  
 17233                                  ; do interrupt stack switching. the fake return address holds
 17234                                  ; a pointer to the far-pointer of the actual interrupt
 17235                                  ; service routine
 17236                                  
 17237                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 17238                                  ; 21/03/2019 - Retro DOS v4.0
 17239                                  
 17240                                  ;allocbyte   equ 0
 17241                                  ;intlevel    equ 1
 17242                                  ;savedsp     equ 2
 17243                                  ;savedss     equ 4
 17244                                  ;newsp       equ 6
 17245                                  
 17246                                  do_int_stacks:
 17247 00000147 50                      	push	ax
 17248 00000148 55                      	push	bp
 17249 00000149 06                      	push	es
 17250 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 17251 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 17252 00000154 B001                    	mov	al,allocated ; 1
 17253                                  	; 21/10/2022
 17254                                  	;xchg	[es:bp+allocbyte],al 
 17255                                  	; 11/12/2022
 17256 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 17257 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 17258 0000015C 754F                    	jne	short notfree02
 17259                                  
 17260 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 17261                                  
 17262                                  found02:
 17263 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 17264 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 17265                                  
 17266 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 17267                                  
 17268 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 17269                                  	; 21/10/2022
 17270                                  	;mov	bp,[es:bp+6]
 17271                                  	; 11/12/2022
 17272                                  	;cmp	[es:bp+0],ax	
 17273 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 17274 00000176 7542                    	jne	short foundbad02
 17275                                  
 17276                                  	;mov	ax,es			; point ss,sp to the new stack
 17277                                  	;mov	es,bp
 17278                                  	;mov	bp,sp
 17279                                  	;mov	bp,[bp+6]
 17280                                  	;mov	ss,ax
 17281                                  	;mov	sp,es
 17282                                  	;mov	es,ax
 17283                                  	;mov	bp,[cs:bp]
 17284                                  
 17285                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 17286 00000178 55                      	push    bp
 17287 00000179 89E5                    	mov     bp,sp
 17288 0000017B 8B4608                  	mov     ax,[bp+8]
 17289 0000017E 5D                      	pop     bp
 17290 0000017F 06                      	push    es
 17291 00000180 17                      	pop     ss
 17292 00000181 89EC                    	mov     sp,bp
 17293 00000183 89C5                    	mov     bp,ax
 17294                                  	; 11/12/2022
 17295                                  	;mov	bp,[cs:bp+0]	
 17296 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 17297                                  
 17298 00000189 9C                      	pushf				; go execute the real interrupt handler
 17299                                  	; 11/12/2022
 17300 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 17301                                  	; 21/10/2022
 17302                                  	;call	far [cs:bp+0]
 17303                                  
 17304 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 17305                                  	; 11/12/2022
 17306 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 17307                                  	; 21/10/2022
 17308                                  	;mov	bp,[es:bp+0]
 17309 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 17310 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 17311                                  
 17312                                  	; 11/12/2022
 17313                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 17314                                  	; 21/10/2022
 17315 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 17316 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 17317                                  
 17318 000001A6 07                      	pop	es
 17319 000001A7 5D                      	pop	bp			; saved on entry
 17320 000001A8 58                      	pop	ax			; saved on entry
 17321 000001A9 83C402                  	add	sp,2
 17322 000001AC CF                      	iret				; done with this interrupt
 17323                                  
 17324                                  notfree02:
 17325 000001AD 3C01                    	cmp	al,allocated		; error flag
 17326 000001AF 7404                    	je	short findnext02	;  no, continue
 17327                                  	; 11/12/2022
 17328                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 17329                                  	; 21/10/2022
 17330 000001B1 26864600                	xchg	[es:bp],al
 17331                                  
 17332                                  findnext02:
 17333 000001B5 E81200                  	call	longpath
 17334 000001B8 EBAA                    	jmp	short found02
 17335                                  
 17336                                  foundbad02:
 17337 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 17338 000001BF 72F4                    	jc	short findnext02
 17339 000001C1 89C5                    	mov	bp,ax			; flag this entry
 17340                                  	; 11/12/2022
 17341                                  	;mov	byte [es:bp+allocbyte],clobbered
 17342                                  	; 21/10/2022
 17343 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 17344 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 17345                                  
 17346                                  ; ----------------------------------------------------------------------
 17347                                  
 17348                                  ; Common routines
 17349                                  
 17350                                  longpath:
 17351                                  	; 21/03/2019
 17352 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 17353                                  lploopp:
 17354                                  	; 11/12/2022
 17355                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 17356                                  	; 21/10/2022
 17357 000001CF 26807E0000              	cmp	byte [es:bp],free
 17358 000001D4 7512                    	jne	short inuse		;  no, try next one
 17359                                  
 17360 000001D6 B001                    	mov	al,allocated
 17361                                  	; 11/12/2022
 17362                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 17363                                  	; 21/10/2022
 17364 000001D8 26864600                	xchg	[es:bp],al
 17365 000001DC 3C00                    	cmp	al,free 		; is it still free?
 17366 000001DE 7414                    	je	short found		;  yes, go use it
 17367                                  
 17368 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 17369 000001E2 7404                    	je	short inuse		;  no, check the next one
 17370                                  
 17371                                  	; 11/12/2022
 17372                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 17373                                  	; 21/10/2022
 17374 000001E4 26884600                	mov	[es:bp],al
 17375                                  inuse:
 17376 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 17377 000001ED 7406                    	je	short fatal
 17378 000001EF 83ED08                  	sub	bp,entrysize
 17379 000001F2 EBDB                    	jmp	short lploopp
 17380                                  found:
 17381 000001F4 C3                      	retn
 17382                                  fatal:
 17383 000001F5 1E                      	push	ds
 17384 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 17385 000001F9 8ED8                    	mov	ds,ax
 17386 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 17387 00000200 1F                      	pop	ds
 17388 00000201 7504                    	jne	short skip_nmis
 17389                                  
 17390 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 17391 00000205 E672                    	out	72h,al
 17392                                  
 17393                                  skip_nmis:
 17394 00000207 FA                      	cli				; disable and mask
 17395 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 17396 0000020A E621                    	out	021h,al
 17397 0000020C E6A1                    	out	0A1h,al
 17398                                  
 17399 0000020E 8CCE                    	mov	si,cs
 17400 00000210 8EDE                    	mov	ds,si
 17401 00000212 BE[3902]                	mov	si,fatal_msg
 17402                                  ;SR;
 17403                                  ;   We set all foci to this VM to issue the stack failure message
 17404                                  ;
 17405 00000215 50                      	push	ax
 17406 00000216 1E                      	push	ds
 17407                                  	;;mov	ax,Bios_Data ; 0070h
 17408                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17409                                  	; 21/10/2022
 17410 00000217 B87000                  	mov	ax,DOSBIODATASEG
 17411 0000021A 8ED8                    	mov	ds,ax
 17412                                  
 17413                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 17414 0000021C F606[C508]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 17415 00000221 1F                      	pop	ds
 17416 00000222 58                      	pop	ax
 17417 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 17418                                  
 17419                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 17420                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 17421                                  	; 21/10/2022
 17422 00000225 9A[C608]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 17423                                  ;
 17424                                  ;SR; We do not bother about the returned status of this call. 
 17425                                  ;
 17426                                  fatal_loop:
 17427 0000022A AC                      	lodsb
 17428 0000022B 3C24                    	cmp	al,'$'
 17429 0000022D 7408                    	je	short fatal_done
 17430                                  
 17431 0000022F B307                    	mov	bl,7
 17432 00000231 B40E                    	mov	ah,14
 17433 00000233 CD10                    	int	10h			; whoops, this enables ints
 17434 00000235 EBF3                    	jmp	short fatal_loop
 17435                                  
 17436                                  fatal_done:
 17437 00000237 EBFE                    	jmp	short fatal_done
 17438                                  
 17439                                  
 17440                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17441                                  ; ----------------------------------------------------------------------
 17442                                  ;	include msbio.cl5		; fatal stack error message
 17443                                  
 17444                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 17445                                  
 17446                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 17447                                  ; ----------------------------------------------------------------------
 17448                                  ; 04/06/2018 - Retro DOS v3.0
 17449                                  
 17450                                  fatal_msg:
 17451 00000239 0D0A                    	db	0Dh,0Ah
 17452 0000023B 070D0A                  	db	7,0Dh,0Ah
 17453 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 17453 00000247 737461636B206F7665-
 17453 00000250 72666C6F770D0A     
 17454 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 17454 00000260 6C7465640D0A24     
 17455                                  
 17456                                  endstackcode:
 17457                                  
 17458                                  ; ----------------------------------------------------------------------
 17459                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 17460                                  ; ----------------------------------------------------------------------
 17461                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 17462                                  
 17463                                  ; 22/03/2019 - Retro DOS v4.0
 17464                                  
 17465                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 17466                                  
 17467                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 17468                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 17469                                  
 17470                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17471                                  ; ----------------------------------------------------------------------
 17472                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 17473                                  
 17474                                  SYSINIT:	
 17475 00000267 E91C02                          JMP	GOINIT
 17476                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 17477                                  
 17478                                  ; ----------------------------------------------------------------------
 17479                                  
 17480                                  struc DDHighInfo
 17481 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 17482 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 17483 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 17484                                  endstruc
 17485                                  
 17486                                  ; 22/03/2019 - Retro DOS v4.0
 17487                                  
 17488 0000026A 00                      runhigh: db	0
 17489                                  
 17490                                  ; 02/11/2022
 17491                                  ;align 4
 17492                                  
 17493                                  DOSINFO: 
 17494 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 17495                                  ;MSDOS:
 17496                                  dos_temp_location: ; dword ; MSDOS 6.0
 17497                                  dosinit:		; MSDOS 6.0
 17498 0000026F 0000                    	dw	0
 17499                                  
 17500                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17501                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 17502                                  ;	dw	0
 17503                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 17504                                  
 17505                                  CURRENT_DOS_LOCATION:
 17506 00000271 0000                    	dw	0
 17507                                  
 17508                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 17509                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 17510                                  
 17511                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17512                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 17513                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17514                                  
 17515                                  DEVICE_LIST:
 17516 00000273 00000000                	dd	0
 17517                                  
 17518                                  ; 04/06/2018 - Retro DOS v3.0
 17519                                  ; 28/03/2018
 17520                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 17521                                  ;
 17522                                  sysi_country:	
 17523 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 17524                                  
 17525                                  ; MSDOS 6.0
 17526 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 17527                                  
 17528 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 17529 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 17530                                  
 17531 00000283 0000                    def_php:	dw	0
 17532                                  
 17533                                  ; M022--
 17534                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 17535                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 17536                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 17537                                  ;  the new home.
 17538                                  
 17539                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 17540                                  ; 21/10/2022
 17541                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 17542                                  
 17543                                  ; 22/10/2022
 17544                                  seg_reinit_ptr:	; label dword
 17545 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 17546                                  temp_bcode_seg:
 17547                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 17548                                  		; 22/10/2022
 17549 00000287 9902                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 17550                                  
 17551                                  fake_floppy_drv:
 17552 00000289 00                      		db	0	; set to 1 if this machine
 17553                                  				; does not have any floppies!!!
 17554                                  
 17555                                  ; Internal Stack Parameters
 17556                                  
 17557 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 17558 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 17559 0000028E 00000000                stack_addr:	dd	0	
 17560                                  
 17561                                  ; 05/06/2018 - Retro DOS v3.0
 17562                                  
 17563                                  ; various default values
 17564                                  
 17565 00000292 0100                    MEMORY_SIZE:	dw	1
 17566                                  
 17567                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 17568                                  
 17569 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 17570 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 17571 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 17572 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 17573 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 17574                                  
 17575 0000029D 08                      FILES:	db	8	; enough files for pipe
 17576 0000029E 04                      FCBS:	db	4	; performance for recycling
 17577 0000029F 00                      KEEP:	db	0	; keep original set
 17578 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 17579                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 17580                                  ;CONFBOT: dw	0
 17581                                  ;ALLOCLIM: dw	0
 17582                                  CONFBOT: ; 02/11/2022
 17583 000002A1 0000                    top_of_cdss: dw 0
 17584                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 17585 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 17586                                  
 17587 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 17588                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 17589                                  ; (SYSINIT:02A9h)
 17590                                  command_line:
 17591 000002A9 0200                    	db	2,0
 17592 000002AB 50                      	db	'P'
 17593 000002AC 00                      	db	0
 17594 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 17595                                  ; (SYSINIT:0329h)
 17596 00000329 00                      ZERO:	db	0
 17597 0000032A 00                      sepchr:	db	0
 17598 0000032B 0000                    linecount: dw	0			; line count in config.sys
 17599 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 17600 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 17601                                  
 17602 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 17603 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 17604                                  
 17605 00000339 0000                    buf_prev_off:	dw	0
 17606                                  
 17607                                          ;IF      NOT NOEXEC
 17608                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 17609                                          ;ENDIF
 17610                                  
 17611                                  ; 01/05/2018
 17612                                  COMEXE:
 17613 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 17614 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 17615 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17616 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 17617 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17618 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 17619 00000347 0000                    		dw	0
 17620                                  
 17621                                  ; variables for install= command.
 17622                                  
 17623 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 17624                                  					;  indicating the pass number
 17625                                  					; 0 - do scan for DOS=HIGH/LOW
 17626                                  					; 1 - load device drivers
 17627                                  					; 2 - was to load IFS
 17628                                  					;      now it is unused
 17629                                  					; 3 - do install=
 17630                                  					; >3 - nop
 17631 0000034A 0000                    install_flag:	dw	0
 17632                                  
 17633                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 17634                                  has_installed	equ	00000010b	; sysinit_base installed.
 17635                                  
 17636 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 17637 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 17638 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 17639 00000356 0000                    checksum:	dw	0		; used by sum_up
 17640                                  
 17641 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 17642 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 17643 0000036D 20                      ldexec_start:	db	' '
 17644 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 17645                                  
 17646                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 17647                                  
 17648                                  instexe:
 17649 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 17650 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 17651 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17652 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 17653 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 17654 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 17655 000003CA 0000                    		dw	0
 17656                                  
 17657                                  ; variables for comment=
 17658                                  
 17659 000003CC 00                      com_level:	db	0		; level of " " in command line
 17660 000003CD 00                      cmmt:		db	0		; length of comment string token
 17661 000003CE 00                      cmmt1:		db	0		; token
 17662 000003CF 00                      cmmt2:		db	0		; token
 17663 000003D0 00                      cmd_indicator:	db	0
 17664 000003D1 00                      donotshownum:	db	0
 17665                                  
 17666 000003D2 0000                    count:		dw	0
 17667 000003D4 0000                    org_count:	dw	0
 17668 000003D6 0000                    chrptr:		dw	0
 17669 000003D8 0000                    cntryfilehandle: dw	0
 17670 000003DA 0000                    old_area:	dw	0
 17671 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 17672                                  
 17673                                  bucketptr: ; label dword
 17674                                  bufptr:	   ; label dword		; leave this stuff in order!
 17675 000003DE 0000                    memlo:	dw	0
 17676                                  prmblk:	   ; label word
 17677 000003E0 0000                    memhi:	dw	0
 17678 000003E2 0000                    ldoff:	dw	0
 17679 000003E4 0000                    area:	dw	0
 17680                                  
 17681                                  ; Following is the request packet used to call INIT routines for 
 17682                                  ; all device drivers. Some fields may be accessed individually in
 17683                                  ; the code, and hence have individual labels, but they should not
 17684                                  ; be separated.
 17685                                  
 17686 000003E6 18                      packet:	db	24			; was 22
 17687 000003E7 00                      	db	0
 17688 000003E8 00                      	db	0			; initialize code
 17689 000003E9 0000                    	dw	0
 17690 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 17691                                  
 17692 000003F3 00                      unitcount:	db	0
 17693 000003F4 00000000                break_addr:	dd	0
 17694 000003F8 00000000                bpb_addr:	dd	0
 17695                                  drivenumber:	; 22/10/2022
 17696 000003FC 00                      devdrivenum:	db	0 
 17697 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 17698                                  
 17699                                  ; end of request packet
 17700                                  
 17701                                  ;drivenumber:	db	0  ; 22/03/2019
 17702                                  
 17703                                  toomanydrivesflag:
 17704 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 17705                                  align 2
 17706                                  
 17707                                  BCodeSeg:	; 21/10/2022
 17708 00000400 9902                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 17709                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 17710                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 17711                                  
 17712                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17713                                  ;; 19/04/2019
 17714                                  ;_timer_lw_:
 17715                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 17716                                  	
 17717                                  ;SR;
 17718                                  ; This is the communication block between the DOS and the BIOS. It starts at
 17719                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 17720                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 17721                                  ;is passed to DOS as part of the DOSINIT call.
 17722                                  ;
 17723                                  
 17724                                  BiosComBlock:
 17725                                  	;dd	Bios_Data:SysinitPresent 
 17726                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 17727 00000402 [F108]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 17728                                  	;dw	KERNEL_SEGMENT ; 0070h
 17729                                  	; 21/10/2022
 17730 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 17731                                  
 17732                                  ;align 2
 17733                                  
 17734                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 17735                                  tempstack:	
 17736 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 17737                                  
 17738                                  ; ----------------------------------------------------------------------------
 17739                                  
 17740                                  	; 22/10/2022 - Retro DOS v4.0
 17741                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 17742                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 17743                                  	; 12/12/2022
 17744                                  	; 22/03/2019 - Retro DOS v4.0
 17745                                  	; 06/07/2018
 17746                                  	; 04/06/2018 - Retro DOS v3.0
 17747                                  ; before doing anything else, let's set the model byte
 17748 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 17749 00000488 CD15                    	int	15h			; *
 17750 0000048A 7216                    	jc	short no_rom_config
 17751                                  
 17752                                  	;cmp	ah,0			; double check
 17753                                  	;jne	short no_rom_config
 17754                                  	; 04/09/2023
 17755 0000048C 08E4                    	or	ah,ah
 17756 0000048E 7512                    	jnz	short no_rom_config
 17757 00000490 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 17758 00000494 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 17759 00000498 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 17760 0000049C 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 17761                                  	;jmp	short SYSIN
 17762                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17763 000004A0 EB2C                    	jmp	short move_myself
 17764                                  
 17765                                  no_rom_config:				; Old ROM
 17766 000004A2 B800F0                  	mov	ax,0F000h
 17767 000004A5 8ED8                    	mov	ds,ax
 17768 000004A7 A0FEFF                  	mov	al,[0FFFEh]
 17769 000004AA 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 17770                                  
 17771                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 17772                                  ; execute the equipment determination interrupt and then
 17773                                  ; check the returned value to see if we have any floppy drives
 17774                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 17775                                  ; see the at tech ref bios listings for help on the equipment
 17776                                  ; flag interrupt (11h)	
 17777                                  
 17778                                  	; 22/10/2022
 17779                                  check_for_fake_floppy:			; entry point for rom_config above
 17780 000004AE CD11                    	int	11h			; check equipment flag
 17781                                  
 17782                                  	; 12/12/2022
 17783 000004B0 A801                    	test	al,1		
 17784                                  	;test	ax,1			; have any floppies?
 17785 000004B2 751A                    	jnz	short move_myself	; yes,normal system
 17786                                  
 17787                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 17788                                  ; whether it is an old ROM BIOS or a new one
 17789                                  ;
 17790                                  ; WARNING !!!
 17791                                  ;
 17792                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 17793                                  ; here will require an equivalent modification in MSINIT.ASM also
 17794                                  
 17795 000004B4 06                      	push	es
 17796                                  
 17797 000004B5 30C9                    	xor	cl,cl	
 17798 000004B7 B408                    	mov	ah,8			; get disk parameters
 17799 000004B9 B200                    	mov	dl,0			; of drive 0
 17800 000004BB CD13                    	int	13h
 17801                                  
 17802 000004BD 07                      	pop	es
 17803                                  
 17804 000004BE 720E                    	jc	short move_myself	; if error lets assume that the
 17805                                  					;  ROM BIOS lied
 17806                                  	;cmp	cl,0			; double check (max sec no cannot be 0)
 17807                                  	;je	short move_myself
 17808                                  	; 04/09/2023
 17809 000004C0 08C9                    	or	cl,cl
 17810 000004C2 740A                    	jz	short move_myself
 17811                                  
 17812 000004C4 08D2                    	or	dl,dl			; number of flp drvs == 0?
 17813 000004C6 7506                    	jnz	short move_myself
 17814                                  
 17815 000004C8 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 17816                                  
 17817                                  move_myself:
 17818 000004CE FC                      	cld				; set up move
 17819 000004CF 31F6                    	xor	si,si
 17820 000004D1 89F7                    	mov	di,si
 17821                                  
 17822                                  	; 12/12/2022
 17823 000004D3 0E                      	push	cs
 17824 000004D4 1F                      	pop	ds
 17825                                  
 17826                                  	;mov	cx,[cs:MEMORY_SIZE]
 17827 000004D5 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 17828                                  
 17829                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 17830                                  ;;;	if	msver
 17831                                  ;	cmp	cx,1		; 1 means do scan
 17832                                  ;	jnz	short noscan
 17833                                  ;	mov	cx,2048		; start scanning at 32k boundary
 17834                                  ;	xor	bx,bx
 17835                                  ;
 17836                                  ;memscan:inc	cx
 17837                                  ;	jz	setend
 17838                                  ;	mov	ds,cx
 17839                                  ;	mov	al,[bx]
 17840                                  ;	not	al
 17841                                  ;	mov	[bx],al
 17842                                  ;	cmp	al,[bx]
 17843                                  ;	not	al
 17844                                  ;	mov	[bx],al
 17845                                  ;	jz	short memscan
 17846                                  ;setend:
 17847                                  ;	mov	cs:[memory_size],cx
 17848                                  ;;;	endif
 17849                                  
 17850                                  ;noscan: 				; cx is mem size in para
 17851                                  ;;
 17852                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 17853                                  ;;		  before we try to run.
 17854                                  ;;	       b) in any case, we should check for sufficient memory and give
 17855                                  ;;		  an appropriate error diagnostic if there isn't enough
 17856                                  ;
 17857                                  ;	push	cs
 17858                                  ;	pop	ds
 17859                                  ;
 17860                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 17861                                  ;;	  that way it would be easier to slide them down home in a minimal
 17862                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 17863                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 17864                                  ;;	  temporary home and the final one.  the problem with doing that
 17865                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 17866                                  ;
 17867                                  ;	dec	cx			; one para for an arena at end of mem
 17868                                  ;					; in case of UMBs
 17869                                  
 17870                                  	; 22/10/2022
 17871                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 17872                                  
 17873                                  	; 12/12/2022
 17874                                  	;push	cs
 17875                                  	;pop	ds
 17876                                  
 17877 000004D9 49                      	dec	cx
 17878                                  
 17879                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 17880                                  
 17881 000004DA 31DB                    	xor	bx,bx
 17882 000004DC 8EC3                    	mov	es,bx	; 0
 17883                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 17884                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 17885                                  	; 29/09/2023
 17886 000004DE 26C41EBC00              	les	bx,[es:(2Fh*4)]
 17887 000004E3 26817F035250            	cmp	word [es:bx+3],'RP'
 17888 000004E9 751B                    	jne	short NoRPL
 17889 000004EB 26807F054C              	cmp	byte [es:bx+5],'L'
 17890 000004F0 7514                    	jne	short NoRPL
 17891                                  
 17892 000004F2 89CA                    	mov	dx,cx			; get TOM into DX
 17893 000004F4 52                      	push	dx
 17894 000004F5 B8064A                  	mov	ax,4A06h
 17895                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 17896 000004F8 CD2F                    	int	2Fh			; Get new TOM from any RPL
 17897 000004FA 58                      	pop	ax
 17898 000004FB 89D1                    	mov	cx,dx
 17899 000004FD 39C2                    	cmp	dx,ax
 17900 000004FF 7405                    	je	short NoRPL
 17901                                  	
 17902                                  	; 11/12/2022
 17903                                  	; ds = cs
 17904 00000501 8916[9402]              	mov	[RPLMemTop],dx
 17905                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17906                                  	;mov	[cs:RPLMemTop],dx
 17907                                  	
 17908 00000505 49                      	dec	cx
 17909                                  NoRPL:
 17910 00000506 B8[E037]                	mov	ax,SI_end		; need this much room for sysinit
 17911                                  					; (SI_end == sysinit code size)
 17912 00000509 E8A306                  	call	off_to_para
 17913 0000050C 29C1                    	sub	cx,ax
 17914                                  
 17915                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 17916                                  ; code above sysinit in memory
 17917                                  ;
 17918 0000050E 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 17919                                  
 17920 00000512 B8A019                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 17921 00000515 E89706                  	call	off_to_para		; leave this much room for BIOS code
 17922 00000518 29C1                    	sub	cx,ax
 17923 0000051A 8EC1                    	mov	es,cx			; offset where sysinit will be located
 17924                                  
 17925 0000051C B9[E037]                	mov	cx,SI_end		; (sysinit code size)
 17926 0000051F D1E9                    	shr	cx,1			; divide by 2 to get words
 17927 00000521 F3A5                    	rep	movsw			; relocate sysinit
 17928                                  
 17929 00000523 06                      	push	es			; push relocated segment
 17930 00000524 B8[2905]                	mov	ax,SYSIN
 17931 00000527 50                      	push	ax			; push relocated entry point
 17932                                  
 17933 00000528 CB                      	retf				; far jump to relocated sysinit
 17934                                  
 17935                                  ; ----------------------------------------------------------------------------
 17936                                  
 17937                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17938                                  
 17939                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17940                                  	; (SYSINIT:0533h)
 17941                                  SYSIN:
 17942                                  	; Retro DOS 4.0 - 22/03/2019
 17943                                  	; Retro DOS 2.0 - 25/02/2018
 17944                                  
 17945                                  	; 23/04/2019
 17946                                  	;;mov	ax,Bios_Data
 17947                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17948                                  	; 21/10/2022
 17949 00000529 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17950 0000052C 8ED8                    	mov	ds,ax
 17951 0000052E 8C0E[EF08]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17952 00000532 C606[F108]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17953                                  
 17954                                  ; first move the MSDOS.SYS image up to a harmless place 
 17955                                  ; on top of our new sysinitseg
 17956                                  
 17957                                  	; 22/10/2022
 17958 00000537 B8[E037]                	mov	ax,SI_end		; how big is sysinitseg?
 17959 0000053A E87206                  	call	off_to_para
 17960 0000053D 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17961 0000053F 01C8                    	add	ax,cx
 17962 00000541 8EC0                    	mov	es,ax
 17963                                  	
 17964 00000543 31F6                    	xor	si,si
 17965 00000545 89F7                    	mov	di,si
 17966                                  
 17967 00000547 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17968                                  
 17969                                  	;mov	ax,cs	
 17970                                  	;mov	ds,ax
 17971                                  
 17972                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17973                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17974                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17975                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17976                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17977                                  
 17978                                  	; 22/10/2022
 17979 0000054C B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17980 0000054F F3A5                    	rep     movsw
 17981 00000551 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17982                                  
 17983                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17984                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17985                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17986                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17987                                  
 17988                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17989                                  	;mov	ax,cs
 17990                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17991                                  	;mov	ds,ax
 17992                                  
 17993                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17994                                  
 17995                                  ;	; 24/04/2019 
 17996                                  ;;ifndef ROMDOS
 17997                                  ;	mov	ax,[es:3] 		; get offset of dos
 17998                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17999                                  ;	mov	[dosinit],ax		; that's the entry point offset
 18000                                  ;	call	off_to_para		; subtract this much from segment
 18001                                  ;	; 23/04/2019
 18002                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 18003                                  ;	sub	[FINAL_DOS_LOCATION],ax
 18004                                  ;;else
 18005                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 18006                                  ;;
 18007                                  ;;endif ; ROMDOS
 18008                                  
 18009                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 18010                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 18011                                  
 18012                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 18013                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 18014                                  
 18015                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 18016                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 18017 00000556 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 18018                                  
 18019 00000559 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 18020                                  	; 02/11/2022
 18021 0000055D E84F06                  	call	off_to_para		; subtract this much from segment
 18022 00000560 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 18023                                  
 18024                                  	; Current DOSCODE start address = dword [dosinit]
 18025                                  
 18026                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 18027                                  ;; until it is determined whether it will be running in HIMEM or not.
 18028                                  
 18029                                  ;ifndef ROMDOS
 18030                                  
 18031                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 18032                                  
 18033                                  	; 22/10/2022
 18034 00000565 8CC0                    	mov	ax,es
 18035 00000567 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 18036 0000056A 8EC0                    	mov	es,ax
 18037 0000056C 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 18038 00000571 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 18039                                  
 18040                                  	;mov	si,BCODE_START ; mov si,30h
 18041                                  	; 09/12/2022
 18042 00000573 BE[3000]                	mov	si,BCODESTART
 18043                                  	; 02/11/2022
 18044 00000576 89F7                    	mov	di,si
 18045                                  	;mov	cx,BCODE_END   ; mov cx,1A60h
 18046                                  	;sub	cx,si
 18047                                  	; 29/09/2023
 18048                                  	BCODESIZE equ BCODEEND-BCODESTART
 18049 00000578 B97019                  	mov	cx,BCODESIZE
 18050 0000057B D1E9                    	shr	cx,1
 18051 0000057D F3A5                    	rep	movsw			; move Bios_Code into place
 18052                                  
 18053 0000057F 8CC0                    	mov	ax,es			; tell it what segment it's in
 18054 00000581 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 18055                                  
 18056                                  ;endif	; not ROMDOS
 18057                                  
 18058                                  ; now call dosinit while it's in its temporary home
 18059                                  
 18060                                  	;mov	ax,cs
 18061                                  	;mov	ds,ax	 
 18062                                  
 18063                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 18064                                  
 18065                                  	; 22/10/2022
 18066                                  
 18067 00000586 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 18068                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 18069 0000058B 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 18070                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 18071                                  
 18072 00000590 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 18073                                  
 18074 00000595 FA                      	cli
 18075 00000596 8CC8                    	mov	ax,cs
 18076 00000598 8ED0                    	mov	ss,ax
 18077                                  
 18078                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 18079                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 18080                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 18081                                  ;SYSINIT:0532h:
 18082                                  
 18083                                  ; 22/10/2022
 18084                                  ; ----------------------------------------------------------------------------
 18085                                  ;SYSINIT:05A6h:
 18086                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 18087                                  
 18088                                  	;mov	sp, 05A6h
 18089 0000059A BC9A05                  	mov     sp,locstack		; set stack
 18090                                  
 18091 0000059D FB                      	sti
 18092                                  
 18093                                  ;align 2
 18094                                  	; 30/03/2018
 18095                                  ;LOCSTACK:
 18096                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 18097                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 18098                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 18099                                  
 18100                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18101                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 18102                                  
 18103                                  ; This call to DOSINIT will relocate the DOS data from its present location
 18104                                  ; at the top of memory, to its final location in low memory just above the
 18105                                  ; BIOS data. It will then build important DOS data structures in low 
 18106                                  ; memory following the DOS data. It returns (among many other things) the
 18107                                  ; new starting address of free memory.
 18108                                  
 18109 0000059E 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 18110                                  			 ; es:di -> sysinitvars_ext
 18111                                  
 18112 000005A3 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 18113                                  	
 18114                                  	; 11/12/2022
 18115                                  	; 22/03/2019
 18116 000005A8 0E                      	push	cs
 18117 000005A9 1F                      	pop	ds
 18118                                  	; 22/10/2022
 18119 000005AA A3[8102]                	mov	[hi_doscod_size],ax
 18120 000005AD 890E[7F02]              	mov	[lo_doscod_size],cx
 18121 000005B1 8916[7B02]              	mov	[dos_segreinit],dx
 18122                                  	
 18123                                  	; 11/12/2022
 18124                                  	; ds = cs
 18125                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 18126                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 18127                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 18128                                  
 18129                                  	; 05/06/2018 - Retro DOS v3.0
 18130                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 18131                                  
 18132                                  	; 11/12/2022
 18133                                  	; ds = cs
 18134                                  	; 22/10/2022
 18135                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 18136 000005B5 268B05                  	mov	ax,[es:di] ; 22/03/2019
 18137                                  	;mov	[cs:DOSINFO],ax
 18138 000005B8 A3[6B02]                	mov	[DOSINFO],ax
 18139                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 18140 000005BB 268B4502                	mov	ax,[es:di+2]
 18141                                  	;mov	[cs:DOSINFO+2],ax
 18142 000005BF A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 18143                                  
 18144                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 18145 000005C2 268B4504                	mov	ax,[es:di+4]
 18146                                  	;mov	[cs:sysi_country],ax
 18147 000005C6 A3[7702]                	mov	[sysi_country],ax
 18148                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 18149 000005C9 268B4506                	mov	ax,[es:di+6]
 18150                                  	;mov	[cs:sysi_country+2],ax
 18151 000005CD A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 18152                                  
 18153                                  	; 20/04/2019
 18154                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 18155                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 18156                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 18157                                  	; 22/10/2022
 18158                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 18159                                  	;;;mov	[dos_segreinit+2],es
 18160                                  	;;mov	[dos_segreinit+2],ax
 18161                                  	;mov	[cs:dos_segreinit+2],ax
 18162                                  	; 11/12/2022
 18163                                  	; ds = cs
 18164 000005D0 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18165 000005D4 8C06[7D02]              	mov	[dos_segreinit+2],es
 18166                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18167                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 18168                                  	;mov	[cs:dos_segreinit+2],es
 18169                                  
 18170                                  ; ----------------------------------------------------------------------------
 18171                                  
 18172                                  ;SYSINIT:0577h:
 18173                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 18174                                  ;SYSINIT:05D1h:	; NoRPLArena 
 18175                                  
 18176                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18177                                  ;------ Cover up RPL code with an arena
 18178                                  ;SYSINIT:05EBh:
 18179                                  	; 11/12/2022
 18180                                  	; ds = cs
 18181 000005D8 31DB                    	xor	bx,bx
 18182 000005DA 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 18183                                  	;cmp	word [RPLMemTop],0
 18184                                  	;;cmp	word [cs:RPLMemTop],0
 18185 000005DE 7450                    	je	short NoRPLArena
 18186                                  
 18187                                  ;------ alloc all memory
 18188                                  
 18189                                  	; 11/12/2022
 18190                                  	;mov	bx,0FFFFh
 18191 000005E0 4B                      	dec	bx
 18192                                  	; bx = 0FFFFh
 18193 000005E1 B448                    	mov	ah,48h
 18194 000005E3 CD21                    	int	21h
 18195                                  			; DOS - 2+ - ALLOCATE MEMORY
 18196                                  			; BX = number of 16-byte paragraphs desired
 18197 000005E5 B448                    	mov	ah,48h
 18198 000005E7 CD21                    	int	21h
 18199                                  
 18200 000005E9 8EC0                    	mov	es,ax			; get it into ES and save it
 18201 000005EB 06                      	push	es
 18202                                  
 18203                                  ;------ resize upto RPL mem
 18204                                  
 18205                                  	; 11/12/2022
 18206                                  	; ds = cs
 18207                                  	;sub	ax,[cs:RPLMemTop]
 18208 000005EC 2B06[9402]              	sub	ax,[RPLMemTop]
 18209 000005F0 F7D8                    	neg	ax
 18210 000005F2 48                      	dec	ax
 18211 000005F3 89C3                    	mov	bx,ax
 18212 000005F5 B44A                    	mov	ah,4Ah
 18213 000005F7 CD21                    	int	21h
 18214                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18215                                  			; ES = segment address of block to change
 18216                                  			; BX = new size in paragraphs
 18217                                  
 18218                                  ;------ allocate the free (RPL MEM)
 18219                                  
 18220 000005F9 BBFFFF                  	mov	bx,0FFFFh
 18221 000005FC B448                    	mov	ah,48h
 18222 000005FE CD21                    	int	21h
 18223 00000600 B448                    	mov	ah,48h
 18224 00000602 CD21                    	int	21h
 18225                                  
 18226                                  ;----- mark that it belongs to RPL
 18227                                  
 18228 00000604 48                      	dec	ax
 18229 00000605 8EC0                    	mov	es,ax
 18230                                  	;mov	word [es:arena_owner],8
 18231 00000607 26C70601000800          	mov	word [es:1],8
 18232                                  	;mov	word [es:arena_name],'RP'
 18233 0000060E 26C70608005250          	mov	word [es:8],'RP'
 18234                                  	;mov	word [es:arena_name+2],'L'
 18235 00000615 26C7060A004C00          	mov	word [es:10],'L'
 18236                                  	;mov	word [es:arena_name+4],0
 18237 0000061C 26C7060C000000          	mov	word [es:12],0
 18238                                  	;mov	word [es:arena_name+6],0
 18239 00000623 26C7060E000000          	mov	word [es:14],0	
 18240                                  
 18241 0000062A 07                              pop     es                      ; get back ptr to first block
 18242 0000062B B449                            mov     ah,49h	; Dealloc	; and free it
 18243 0000062D CD21                    	int	21h		
 18244                                  					; DOS - 2+ - FREE MEMORY
 18245                                  					; ES = segment address of area to be freed
 18246                                  	; 11/12/2022
 18247 0000062F F8                      	clc
 18248                                  
 18249                                  ; ----------------------------------------------------------------------------
 18250                                  
 18251                                  NoRPLArena:
 18252                                  	; 11/12/2022
 18253                                  	; ds = cs
 18254                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 18255 00000630 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 18256                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 18257                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 18258                                  
 18259                                  	; 11/12/2022
 18260                                  	;clc				; get the extended memory size
 18261                                  
 18262                                  ;	execute the get extended memory size subfunction in the bios int 15h
 18263                                  ;	if the function reports an error do nothing else store the extended
 18264                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 18265                                  ;	currently pointed to by es:di. use the offsets specified in the
 18266                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 18267                                  
 18268 00000634 B488                    	mov	ah,88h
 18269 00000636 CD15                    	int	15h			; check extended memory size
 18270 00000638 720B                    	jc	short no_ext_memory
 18271                                  			; Get Extended Memory Size
 18272                                  			; Return: CF clear on success
 18273                                  			; AX = size of memory above 1M in K	
 18274                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 18275                                  	; 22/10/2022
 18276 0000063A 26894545                	mov	[es:di+45h],ax ; save extended memory size
 18277 0000063E 09C0                    	or	ax,ax
 18278 00000640 7403                    	jz	short no_ext_memory
 18279 00000642 E8E304                  	call	ClrVDISKHeader
 18280                                  no_ext_memory:
 18281                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 18282 00000645 268B4510                	mov	ax,[es:di+10h]
 18283                                  	;add	ax,bufinsiz
 18284 00000649 83C014                  	add	ax,20			; size of buffer header
 18285                                  	; 11/12/2022
 18286                                  	; ds = cs
 18287 0000064C A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 18288                                  	;mov	[cs:singlebuffersize],ax	
 18289                                  	; 11/12/2022
 18290 0000064F A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 18291                                  	;mov	al,[cs:DEFAULT_DRIVE]
 18292                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 18293 00000652 26884543                	mov	[es:di+43h],al
 18294                                  
 18295                                  ; determine if 386 system...
 18296                                  
 18297                                  	;get_cpu_type			; macro to determine cpu type
 18298                                  
 18299                                  get_cpu_type:
 18300                                  	; 11/12/2022
 18301 00000656 9C                      	pushf
 18302                                  	;push	bx
 18303                                  	;xor	bx,bx
 18304                                  	; 11/12/2022
 18305                                  	;xor	cx,cx
 18306                                  	;
 18307 00000657 31C0                    	xor	ax,ax
 18308                                  	; ax = 0
 18309 00000659 50                      	push    ax
 18310 0000065A 9D                      	popf
 18311 0000065B 9C                      	pushf
 18312 0000065C 58                      	pop	ax
 18313 0000065D 2500F0                  	and	ax,0F000h
 18314                                  	;cmp	ax,0F000h
 18315 00000660 80FCF0                  	cmp	ah,0F0h 
 18316 00000663 7410                    	je	short cpu_8086
 18317                                  	;mov	ax,0F000h
 18318 00000665 B4F0                    	mov	ah,0F0h
 18319                                  	; ax = 0F000h
 18320 00000667 50                      	push	ax
 18321 00000668 9D                      	popf
 18322 00000669 9C                      	pushf
 18323 0000066A 58                      	pop	ax
 18324                                  	;and	ax,0F000h
 18325 0000066B 80E4F0                  	and	ah,0F0h
 18326 0000066E 7405                    	jz	short cpu_286
 18327                                  cpu_386:
 18328                                  	; 11/12/2022
 18329                                  	;;inc	bx
 18330                                  	;inc	cx
 18331                                  	; 11/12/2022
 18332                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 18333 00000670 26C6454401              	mov	byte [es:di+44h],1
 18334                                  cpu_286:
 18335                                  	;;;inc	bx
 18336                                  	;;inc	cx
 18337                                  cpu_8086:
 18338                                  	; 11/12/2022
 18339                                  	;;mov	ax,bx	
 18340                                  	;pop	bx
 18341 00000675 9D                      	popf
 18342                                  
 18343                                  	;...
 18344                                  
 18345                                  	; 11/12/2022
 18346                                  	;or	cl,cl
 18347                                  	;jz	short not_386_system
 18348                                  	; 11/12/202
 18349                                  	;cmp	cl,2
 18350                                  	;;cmp	ax,2			; is it a 386?
 18351                                  	;jne	short not_386_system	; no: don't mess with flag
 18352                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 18353                                  	; 11/12/2022
 18354                                  	; 22/10/2022
 18355                                  	;mov	byte [es:di+44h],1
 18356                                  not_386_system:
 18357                                  	;mov	al,[es:di+SYSI_NUMIO]
 18358 00000676 268A4520                	mov	al,[es:di+20h]
 18359                                  	; 11/12/2022
 18360                                  	; ds = cs
 18361 0000067A A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 18362                                  	;mov	[cs:drivenumber],al
 18363                                  
 18364 0000067D 8CC8                    	mov	ax,cs
 18365 0000067F 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 18366                                  	; 11/12/2022
 18367                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 18368                                  	;;mov	cx,[cs:singlebuffersize]
 18369                                  	;shr	cx,1			
 18370                                  	;shr	cx,1			; divide size by 16...
 18371                                  	;shr	cx,1
 18372                                  	;shr	cx,1			; ...to get paragraphs...
 18373                                  	;inc	cx			; ... and round up
 18374                                  	; 11/12/2022
 18375 00000682 8B1E[9B02]              	mov	bx,[singlebuffersize]
 18376 00000686 B104                    	mov	cl,4
 18377 00000688 D3EB                    	shr	bx,cl
 18378 0000068A 43                      	inc	bx
 18379                                  
 18380                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 18381                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 18382                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 18383                                  ;	  it is probably safe to assume that the sector size always will be.
 18384                                  ;
 18385                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 18386                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 18387                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 18388                                  ;	  other code from ever causing a problem???
 18389                                  
 18390                                  	; 11/12/2022
 18391 0000068B 29D8                    	sub	ax,bx
 18392                                  	;sub	ax,cx
 18393 0000068D A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 18394                                  	; 22/10/2022
 18395                                  	;mov	[cs:top_of_cdss],ax
 18396                                  
 18397                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 18398                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 18399                                  ;	for allocating memory for MagicDrv.
 18400                                  
 18401                                  	; 30/12/2023
 18402                                  	;push	es ; not necessary (!*)	; preserve pointer to dosinfo
 18403                                  	;push	di
 18404                                  
 18405                                  	; 22/10/2022
 18406                                  ;	mov	cx,ax			; save pointer for buffer
 18407                                  ;
 18408                                  ;;	now allocate space for 26 CDSs
 18409                                  ;
 18410                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 18411                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 18412                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 18413                                  
 18414                                  ; setup and initialize the temporary buffer at cx
 18415                                  
 18416                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 18417 00000690 26C47D12                	les	di,[es:di+12h]
 18418                                  	; 11/12/2022
 18419 00000694 31DB                    	xor	bx,bx
 18420                                  	;xor	ax,ax
 18421                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 18422                                  	;mov	word [es:di+4],0
 18423 00000696 26895D04                	mov	[es:di+4],bx ; 0
 18424                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 18425                                  	;mov	word [es:di],0
 18426 0000069A 26891D                  	mov	[es:di],bx ; 0
 18427                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 18428                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 18429 0000069D 26894502                	mov	[es:di+2],ax
 18430                                  
 18431                                  	;mov	es,cx
 18432 000006A1 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 18433                                  
 18434                                  	; 11/12/2022
 18435                                  	;xor	ax,ax
 18436                                  	;mov	di,ax			; es:di -> single buffer
 18437 000006A3 89DF                    	mov	di,bx
 18438                                  	; di = 0
 18439                                  
 18440                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 18441                                  	; 11/12/2022
 18442                                  	;mov	[es:di],ax ; 0
 18443 000006A5 26891D                  	mov	[es:di],bx ; 0
 18444                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 18445                                  	; 11/12/2022
 18446                                  	;mov	[es:di+2],ax ; 0
 18447 000006A8 26895D02                	mov	[es:di+2],bx ; 0 
 18448                                  
 18449                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 18450                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 18451                                  
 18452                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 18453 000006AC 26C74504FF00            	mov	word [es:di+4],00FFh
 18454                                  ;SYSINIT:06E6h
 18455                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 18456                                  	;mov	word [es:di+6],0
 18457                                  	; 11/12/2022
 18458                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 18459 000006B2 26895D06                	mov	[es:di+6],bx ; 0
 18460                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 18461                                  	;mov	word [es:di+8],0
 18462                                  	; 11/12/2022
 18463                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 18464 000006B6 26895D08                	mov	[es:di+8],bx ; 0
 18465                                  
 18466                                  	; 30/12/2023 (!*)
 18467                                  	;pop	di			; restore pointer to DOSINFO data
 18468                                  	;pop	es
 18469                                  
 18470                                  	; 11/12/2022
 18471                                  	; ds = cs
 18472                                  	; 22/10/2022
 18473                                  	;push	cs
 18474                                  	;pop	ds
 18475                                  
 18476 000006BA E8FB04                  	call	TempCDS 		; set up cdss so re_init and sysinit
 18477                                  					;  can make disk system calls
 18478                                  					; tempcds trashes ds
 18479                                  	; 10/05/2019
 18480 000006BD 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 18481                                  
 18482                                  	;if not ibmjapver
 18483                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 18484                                  	;endif
 18485                                  
 18486                                  	; 22/10/2022
 18487                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 18488                                  	;call	far ptr 70h:89Bh
 18489 000006C2 9A[9008]7000            	call	DOSBIODATASEG:RE_INIT
 18490                                  
 18491 000006C7 FB                      	sti				; ints ok
 18492 000006C8 FC                      	cld				; make sure
 18493                                  
 18494                                  ; 23/03/2019
 18495                                  
 18496                                  ;SYSINIT:069Ch
 18497                                  
 18498                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 18499                                  ; of the way by putting it just below sysinit at end of memory.
 18500                                  
 18501 000006C9 8CCB                    	mov	bx,cs
 18502 000006CB 83EB10                  	sub	bx,10h
 18503 000006CE 8EC3                    	mov	es,bx
 18504 000006D0 31F6                    	xor	si,si
 18505 000006D2 89F7                    	mov	di,si
 18506 000006D4 B98000                  	mov	cx,128
 18507 000006D7 F3A5                    	rep	movsw
 18508                                  
 18509                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 18510                                  	; 22/10/2022
 18511 000006D9 268C063600              	mov	[es:36h],es
 18512                                  
 18513                                   	; Set Process Data Block - Program Segment Prefix address
 18514                                  	; BX = PDB/PSP segment
 18515 000006DE B450                            mov	ah,50h ; SET_CURRENT_PDB
 18516 000006E0 CD21                    	int	21h			; tell DOS we moved it
 18517                                  			; DOS - 2+ internal - SET PSP SEGMENT
 18518                                  			; BX = segment address of new PSP
 18519                                  	; 22/10/2022
 18520                                  	; 27/03/2019
 18521                                  	; 30/12/2023
 18522                                  	;push	ds ; */			; preserve DS returned by DOSINIT
 18523                                  
 18524 000006E2 0E                      	push	cs	
 18525 000006E3 1F                      	pop	ds
 18526                                  
 18527                                  	; set up temp. critical error handler
 18528 000006E4 BA[9A32]                	mov	dx,int24		; set up int 24 handler
 18529                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 18530                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 18531 000006E7 B82425                  	mov	ax,2524h
 18532 000006EA CD21                    	int	21h
 18533                                  
 18534 000006EC 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 18535 000006F1 7405                            je      short no_err		   ;  N: continue            M029
 18536 000006F3 BA[9837]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 18537                                          ; 22/10/2022
 18538                                  	;call	print 			   ;		             M029
 18539                                  	; 12/12/2022
 18540 000006F6 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 18541                                  no_err:
 18542                                  	; 12/05/2019
 18543                                  	;----------------------------------------------
 18544                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 18545                                  	; 22/10/2022 - Retro DOS v4.0
 18546                                  	; 12/12/2022
 18547 000006F8 BA[9E32]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 18548                                  p_dosinit_msg:
 18549 000006FB E8772B                  	call	print			; Print message
 18550                                  	;----------------------------------------------
 18551                                  	
 18552                                  	; 11/12/2022
 18553                                  	; 22/10/2022
 18554                                  	; 23/03/2019 - Retro DOS v4.0
 18555                                  	;pop	ds			; start of free memory
 18556                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 18557                                  	
 18558                                  	; 11/12/2022
 18559                                  	; 27/03/2019
 18560 000006FE 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 18561                                  	; 30/12/2023
 18562                                  	;pop	ds ; */
 18563                                  
 18564 00000702 08D2                    	or	dl,dl
 18565                                  	;jz	short nodrvset		; bios didn't say
 18566 00000704 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 18567                                  	;dec	dl			; A = 0
 18568                                  	; 18/12/2022
 18569 00000706 4A                      	dec	dx
 18570 00000707 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 18571 00000709 CD21                    	int	21h			; select the disk
 18572                                  			; DOS - SELECT DISK
 18573                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 18574                                  			; Return: AL = number of logical drives
 18575                                  nodrvset:
 18576                                  	;ifdef	dblspace_hooks
 18577                                  	;	....
 18578                                  	;	....
 18579                                  	;endif	
 18580                                  
 18581                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 18582                                  
 18583                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 18584                                  ; ----------------------------------------------------------------------------
 18585                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 18586                                  
 18587                                  ProcessConfig:
 18588                                  	;; ds = cs ; 27/03/2019
 18589                                  	; 11/12/2022
 18590                                  	; ds <> cs	
 18591                                  
 18592                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 18593                                  
 18594 0000070B E86F17                  	call	doconf			; do pre-scan for dos=high/low
 18595                                  
 18596                                  	; 11/12/2022
 18597                                  	; 27/03/2019
 18598                                  	; ds = cs (at return from doconf)
 18599                                  
 18600                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 18601                                  ; It will either be relocated to low memory, above the DOS data structures,
 18602                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 18603                                  ; code entry points will be located in low memory. Dos_segreinit is used
 18604                                  ; to tell the DOS data where the code has been placed, and to install the
 18605                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 18606                                  ; must first initialize it in its present location and load the installable
 18607                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 18608                                  ; relocate the DOS code into HiMem.
 18609                                  ;
 18610                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 18611                                  ; to install the low memory stub (this must be done before allowing any
 18612                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 18613                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 18614                                  ; been patched.
 18615                                  
 18616                                  	; 22/10/2022 - Retro DOS v4.0
 18617                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 18618                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 18619                                  	; 11/12/2022
 18620 0000070E 803E[6A02]00            	cmp	byte [runhigh],0
 18621 00000713 7404                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 18622                                  
 18623                                  ;------ user chose to load high
 18624                                  
 18625                                  	; 22/10/2022
 18626                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 18627                                  	; 11/12/2022
 18628                                  	; ds = cs
 18629                                  ; 13/04/2024
 18630                                  %if 0
 18631                                  	mov	es,[CURRENT_DOS_LOCATION]
 18632                                  %endif
 18633                                  	;mov	es,[cs:FINAL_DOS_LOCATION] ; Retro DOS v4.0
 18634                                  	; 27/03/2019
 18635                                  	;;mov	es,[FINAL_DOS_LOCATION]
 18636                                  
 18637 00000715 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 18638                                  
 18639                                  ; 13/04/2024
 18640                                  %if 0	
 18641                                  	; 11/12/2022
 18642                                  	; ds = cs
 18643                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18644                                  	call	far [dos_segreinit]
 18645                                  %endif
 18646 00000717 EB08                    	jmp	short do_multi_pass
 18647                                  
 18648                                  ;------ User chose to load dos low
 18649                                  
 18650                                  dont_install_stub:
 18651                                  	; 22/10/2022
 18652 00000719 31DB                    	xor	bx,bx			; M012
 18653                                  					; don't use int 21 call to alloc mem
 18654 0000071B E8D601                  	call	MovDOSLo		; move it !
 18655                                  
 18656 0000071E B80100                  	mov	ax,1			; dont install stub
 18657                                  
 18658                                  ; 13/04/2024
 18659                                  %if 1
 18660                                  do_multi_pass:
 18661                                  %endif
 18662                                  	; 11/12/2022
 18663                                  	; ds = cs
 18664 00000721 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18665                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 18666                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 18667                                  	; 27/03/2019
 18668                                  ;do_multi_pass:
 18669                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 18670                                  
 18671                                  	; 11/12/2022
 18672                                  	; ds =cs
 18673                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 18674 00000725 FF1E[7B02]              	call	far [dos_segreinit]
 18675                                  
 18676                                  ; 13/04/2024
 18677                                  %if 0
 18678                                  do_multi_pass:
 18679                                  %endif
 18680                                  
 18681 00000729 E81201                  	call	AllocFreeMem		; allocate all the free mem
 18682                                  					; & update [memhi] & [area]
 18683                                  					; start of free memory.
 18684                                  	;ifdef	dblspace_hooks
 18685                                  	;mov	bx,0			; magic backdoor to place int hooks
 18686                                  	;call	cs:MagicBackdoor
 18687                                  	;endif
 18688                                  
 18689                                  ; Now, process config.sys some more.  
 18690                                  ; Load the device drivers and install programs
 18691                                  
 18692                                  	; 22/10/2022
 18693                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 18694                                  	; 11/12/2022
 18695                                  	; ds = cs
 18696 0000072C FE06[4903]              	inc	byte [multi_pass_id]
 18697 00000730 E8DD17                  	call	multi_pass		; load device drivers
 18698 00000733 E86F24                  	call	ShrinkUMB
 18699 00000736 E89524                  	call	UnlinkUMB		; unlink all UMBs	;M002
 18700                                  	; 02/11/2022
 18701                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 18702                                  	; 11/12/2022
 18703                                  	; ds = cs
 18704 00000739 FE06[4903]              	inc	byte [multi_pass_id]
 18705 0000073D E8D017                  	call	multi_pass		; was load ifs (now does nothing)
 18706                                  
 18707                                  	;ifdef	dblspace_hooks
 18708                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 18709                                  	;endif
 18710                                  
 18711                                  	; ds = cs
 18712                                  	
 18713 00000740 E80705                  	call	endfile			; setup fcbs, files, buffers etc
 18714                                  
 18715                                  	;ifdef	dblspace_hooks
 18716                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 18717                                  	;endif
 18718                                  
 18719                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 18720                                  ;to device drivers. This has been moved up to this point to avoid problems 
 18721                                  ;with overlays called from installed programs
 18722                                  
 18723                                  	; 11/12/2022
 18724                                  	; ds = cs
 18725                                  
 18726                                  	;;mov	ax,Bios_Data ; 0070h
 18727                                  	;mov	ax,KERNEL_SEGMENT
 18728                                  	; 21/10/2022
 18729 00000743 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 18730 00000746 8EC0                    	mov	es,ax			; point ES to bios data
 18731                                  
 18732 00000748 26C606[F108]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 18733                                  
 18734                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 18735                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 18736                                  	;test	byte [cs:install_flag],1
 18737                                  	; 11/12/2022
 18738                                  	; ds = cs
 18739 0000074E F606[4A03]01            	test	byte [install_flag],1
 18740                                  	;test	byte [cs:install_flag],have_install_cmd
 18741                                  					; are there install commands?
 18742 00000753 7407                    	jz	short dolast		; no, no need for further processing
 18743                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 18744                                  	; 11/12/2022
 18745                                  	; ds =cs
 18746 00000755 FE06[4903]              	inc	byte [multi_pass_id]
 18747 00000759 E8B417                  	call	multi_pass		; execute install= commands
 18748                                  
 18749                                  dolast:
 18750                                  	
 18751                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 18752                                  ;  free the confbot area used for config.sys and sysinit itself.
 18753                                  
 18754                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 18755                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 18756                                  ; anything, but just set up the ROM area for suballocation (or print
 18757                                  ; a message if HiMem is not available).
 18758                                  ;
 18759                                  ; There is also this little hack for CPM style DOS calls that needs to
 18760                                  ; be done when A20 is set...
 18761                                  
 18762                                  	; 11/12/2022
 18763                                  	; ds = cs
 18764                                  
 18765                                  	; 22/10/2022
 18766                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 18767                                  	; 11/12/2022
 18768 0000075C 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18769 00000761 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 18770 00000763 E83D01                  	call	LoadDOSHiOrLo
 18771                                  _@@_:
 18772                                  	;cmp	byte [cs:runhigh],0	; are we running low
 18773                                  	; 11/12/2022
 18774                                  	; ds = cs
 18775 00000766 803E[6A02]00            	cmp	byte [runhigh],0
 18776                                  	;je	short _@@@
 18777 0000076B 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 18778 0000076D E82904                  	call	CPMHack			; make ffff:d0 same as 0:c0
 18779                                  _@@@:
 18780                                  
 18781                                  ; We are now done with CONFIG.SYS processing
 18782                                  
 18783                                  ConfigDone:
 18784                                  	; 12/12/2022
 18785                                  	; 22/10/2022
 18786                                  	;mov	byte [cs:donotshownum],1 
 18787                                  					; done with config.sys.
 18788                                  					; do not show line number message.
 18789                                  	;mov	es,[cs:area]
 18790                                  	; 12/12/2022
 18791                                  	; ds = cs
 18792                                  	; 27/03/2019
 18793 00000770 C606[D103]01            	mov	byte [donotshownum],1
 18794 00000775 8E06[E403]              	mov	es,[area]
 18795                                  
 18796 00000779 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 18797 0000077B CD21                    	int	21h
 18798                                  			; DOS - 2+ - FREE MEMORY
 18799                                  			; ES = segment address of area to be freed
 18800                                  
 18801                                  	; 22/10/2022
 18802                                  	;test	word [cs:install_flag],2
 18803                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 18804                                  	;test	byte [cs:install_flag],has_installed
 18805                                  	; 11/12/2022
 18806                                  	; ds = cs
 18807 0000077D F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 18808                                  	;test	byte [install_flag],has_installed
 18809 00000782 741F                    	jz	short skip_free_sysinitbase ; no.
 18810                                  
 18811                                  ; set block from the old_area with impossible_owner_size.
 18812                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 18813                                  ; handle install= command.
 18814                                  
 18815                                  	; 12/12/2022
 18816                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18817                                  	;push	bx
 18818                                  	
 18819                                  	; 22/10/2022
 18820                                  	;mov	es,[cs:old_area]
 18821                                  	;mov	bx,[cs:impossible_owner_size]
 18822                                  	; 12/12/2022
 18823                                  	; ds = cs
 18824 00000784 8E06[DA03]              	mov	es,[old_area]
 18825 00000788 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 18826                                  	
 18827 0000078C B44A                    	mov	ah,4Ah ; SETBLOCK
 18828 0000078E CD21                    	int	21h
 18829                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 18830                                  			; ES = segment address of block to change
 18831                                  			; BX = new size in paragraphs
 18832 00000790 8CC0                    	mov	ax,es
 18833 00000792 48                      	dec	ax
 18834 00000793 8EC0                    	mov	es,ax			; point to arena
 18835                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 18836 00000795 26C70601000800          	mov	word [es:1],8
 18837                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 18838 0000079C 26C70608005344          	mov	word [es:8],'SD'
 18839                                  	
 18840                                  	; 12/12/2022
 18841                                  	;pop	bx
 18842                                          ;pop	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 18843                                  
 18844                                  skip_free_sysinitbase:
 18845                                  	; 22/10/2022
 18846                                  	;cmp	byte [cs:runhigh],0
 18847                                  	; 12/12/2022
 18848                                  	; ds = cs
 18849 000007A3 803E[6A02]00            	cmp	byte [runhigh],0	
 18850 000007A8 7403                    	je	short _@@@@
 18851                                  
 18852 000007AA E8D302                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 18853                                  
 18854                                  ; ----------------------------------------------------------------------------
 18855                                  
 18856                                  _@@@@:
 18857                                  	; 12/12/2022
 18858                                  	; ds = cs
 18859                                  	; 22/10/2022
 18860                                  	; 27/03/2019
 18861                                  	;push	cs
 18862                                  	;pop	ds			; point DS to sysinitseg
 18863                                  
 18864                                  ; set up the parameters for command
 18865                                  
 18866                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 18867                                  ;;ifdef MULTI_CONFIG
 18868                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 18869                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 18870                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 18871                                  ;	; !!!
 18872                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 18873                                  ;       ; !!!
 18874                                  ;	call    disable_autoexec        ; no, we should disable it
 18875                                  ;process_autoexec:
 18876                                  ;;endif	; !!!
 18877                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 18878                                  ;	; !!!
 18879                                  
 18880                                  	; 22/10/2022 
 18881                                  	;mov     cl,[command_line]
 18882                                          ;mov     ch,0
 18883                                          ;inc     cx
 18884                                          ;mov     si,command_line	
 18885                                  	;add     si,cx
 18886                                          ;mov     byte [si],cr	; cr-terminate command line
 18887                                  
 18888                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 18889                                  	; (SYSINIT:0809h)
 18890                                  	
 18891                                  	;mov	si,(offset command_line+1)
 18892 000007AD BE[AA02]                	mov	si,command_line+1
 18893 000007B0 1E                      	push    ds
 18894 000007B1 07                      	pop     es
 18895 000007B2 89F7                    	mov     di,si
 18896 000007B4 B1FF                    	mov     cl,0FFh ; -1
 18897                                  _@_loop:
 18898 000007B6 FEC1                    	inc     cl ; +1
 18899 000007B8 AC                      	lodsb
 18900 000007B9 AA                      	stosb
 18901 000007BA 08C0                    	or      al,al
 18902 000007BC 75F8                    	jnz     short _@_loop
 18903 000007BE 4F                      	dec     di
 18904 000007BF B00D                    	mov     al,0Dh
 18905 000007C1 AA                      	stosb			; cr-terminate command line
 18906 000007C2 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 18907                                  
 18908                                  ; ----------------------------------------------------------------------------
 18909                                  
 18910                                  ;   Once we get to this point, the above code, which is below "retry"
 18911                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 18912                                  ;   which follow....)
 18913                                  
 18914                                  retry:
 18915 000007C6 BA[4B33]                	mov	dx,commnd	; now pointing to file description
 18916                                  
 18917                                  ; we are going to open the command interpreter and size it as is done in
 18918                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 18919                                  ; there is not enough room for the command interpreter,exec will probably
 18920                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 18921                                  ; here to catch it. this code is not perfect (for instance .exe command
 18922                                  ; interpreters are possible) because it does its sizing based on the
 18923                                  ; assumption that the file being loaded is a .com file. it is close enough to
 18924                                  ; correctness to be usable.
 18925                                  
 18926                                  ; first, find out where the command interpreter is going to go.
 18927                                  
 18928 000007C9 52                      	push	dx		; save pointer to name
 18929 000007CA BBFFFF                  	mov	bx,0FFFFh
 18930 000007CD B448                    	mov	ah,48h	; ALLOC
 18931 000007CF CD21                            int     21h             ; get biggest piece
 18932 000007D1 B448                    	mov	ah,48h	; ALLOC
 18933 000007D3 CD21                    	int	21h		; second time gets it
 18934 000007D5 7243                    	jc	short memerrjx	; oooops
 18935                                  
 18936 000007D7 8EC0                    	mov	es,ax
 18937 000007D9 B449                    	mov	ah,49h	; DEALLOC
 18938 000007DB CD21                    	int	21h		; give it right back
 18939 000007DD 89DD                    	mov	bp,bx
 18940                                  
 18941                                  ; es:0 points to block,and bp is the size of the block in para.
 18942                                  
 18943                                  ; we will now adjust the size in bp down by the size of sysinit.
 18944                                  ; we need to do this because exec might get upset if some of the exec
 18945                                  ; data in sysinit is overlayed during the exec.
 18946                                  
 18947                                  	; 22/10/2022
 18948                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18949 000007DF 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18950 000007E3 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18951                                  
 18952                                  ; Note that the "config_wrkseg" environment data is a segment in
 18953                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18954                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18955                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18956                                  ; we need to make sure that there's no way Exec will stomp on that data
 18957                                  ; before it can copy it, and one way to do that is to make the available
 18958                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18959                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18960                                  ; of the current sysinit CS....
 18961                                  ;
 18962                                  ; The reason I use the term "paranoid" is because this code should have
 18963                                  ; slid the data required by Exec up to the very top of memory, because as
 18964                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18965                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18966                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18967                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18968                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18969                                  
 18970                                  	; 22/10/2022
 18971                                  	;mov	cx,[config_envlen]
 18972                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18973                                          ;mov	ax,[config_wrkseg]
 18974                                  ;no_env:
 18975                                  	; 22/10/2022
 18976                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18977 000007E5 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18978 000007E7 83C311                  	add	bx,11h		; add the sysinit php
 18979 000007EA 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18980 000007EC 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18981                                  
 18982                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18983 000007EE B8003D                          mov	ax,3D00h
 18984 000007F1 F9                      	stc                     ; in case of int 24
 18985 000007F2 CD21                    	int	21h
 18986 000007F4 7240                    	jc	short comerr	; ooops
 18987                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18988                                  			; DS:DX -> ASCIZ filename
 18989                                  			; AL = access mode
 18990                                  			; 0 - read
 18991                                  	; 22/10/2022
 18992                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18993 000007F6 89C3                            mov     bx,ax           ; handle in bx
 18994                                  
 18995                                  ;   If the standard command interpreter is being used, verify it is correct
 18996                                  
 18997                                  	; 22/10/2022
 18998                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18999                                  	;jne	short skip_validation ; yes
 19000                                  	;mov	dx,retry-4
 19001                                  	;mov	cx,4		;
 19002                                  	;mov	ah,READ		;
 19003                                  	;int	21h		;
 19004                                  	;cmp	byte [retry-4],0E9h
 19005                                  	;jne	short comerr
 19006                                  	;; 20/04/2019 - Retro DOS v4.0
 19007                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 19008                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 19009                                  	;jne	short comerr	;
 19010                                  
 19011                                  ;skip_validation:
 19012                                  	; 22/10/2022
 19013                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 19014 000007F8 31C9                    	xor	cx,cx
 19015 000007FA 31D2                    	xor	dx,dx
 19016                                  	;mov	ax,(LSEEK<<8)|2
 19017 000007FC B80242                  	mov	ax,4202h
 19018 000007FF F9                      	stc			;in case of int 24
 19019 00000800 CD21                    	int	21h		; get file size in dx:ax
 19020 00000802 7232                    	jc	short comerr
 19021                                  				; convert size in dx:ax to para in ax
 19022 00000804 83C00F                  	add	ax,15		; round up size for conversion to para
 19023 00000807 83D200                  	adc	dx,0
 19024 0000080A E8A203                  	call	off_to_para
 19025 0000080D B10C                    	mov	cl,12
 19026 0000080F D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 19027 00000811 09D0                    	or	ax,dx		; ax is now # of para for file
 19028 00000813 83C010                  	add	ax,10h		; 100h byte php
 19029 00000816 39E8                    	cmp	ax,bp		; will command fit in available mem?
 19030 00000818 7203                    	jb	short okld	; jump if yes.
 19031                                  
 19032                                  	; 22/10/2022
 19033                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 19034                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 19035                                  	; 02/11/2022
 19036                                  	;jmp	mem_err
 19037                                  	; 11/12/2022
 19038                                  	; ds = cs
 19039 0000081A E92128                  	jmp	mem_err2
 19040                                  
 19041                                  ;memerrjx:
 19042                                  ;	mov	dx,badmem
 19043                                  ;	call	print
 19044                                  ;       jmp     short continue
 19045                                  
 19046                                  okld:
 19047 0000081D B43E                    	mov	ah,3Eh ; CLOSE
 19048 0000081F CD21                    	int	21h		; close file
 19049                                  
 19050                                  	; 22/10/2022
 19051 00000821 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 19052                                  
 19053                                  	; 24/03/2019
 19054                                  
 19055 00000822 0E                      	push	cs		; point es to sysinitseg
 19056 00000823 07                      	pop	es
 19057 00000824 BB[3B03]                        mov     bx,COMEXE	; point to exec block
 19058                                  	; 22/10/2022
 19059                                  	;pop	dx              ; recover pointer to name
 19060                                  
 19061                                  ;;ifdef	MULTI_CONFIG
 19062                                  
 19063                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 19064                                  ;   there will be data if there were any valid SET commands and/or if a menu
 19065                                  ;   selection was made (in which case the CONFIG environment variable will be
 19066                                  ;   set to that selection).
 19067                                  
 19068                                  	; 23/10/2022
 19069                                  	;mov	cx,[config_envlen]
 19070                                  	;jcxz	no_envdata
 19071                                          ;mov	cx,[config_wrkseg]
 19072                                  ;no_envdata:
 19073                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 19074                                  	;mov	[bx],cx
 19075                                  
 19076                                  ;;endif	;MULTI_CONFIG
 19077                                  
 19078                                  	; 23/10/2022
 19079                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 19080                                  
 19081                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 19082 00000827 8C4F04                  	mov	[bx+4],cs
 19083                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 19084 0000082A 8C4F08                  	mov	[bx+8],cs
 19085                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 19086 0000082D 8C4F0C                  	mov	[bx+12],cs
 19087                                  
 19088                                  ;mov	ax,(EXEC<<8) + 0
 19089                                  	; 23/10/2022
 19090                                  	;xor	ax,ax
 19091                                  	;mov	ah,4Bh
 19092                                  	; 14/08/2023
 19093                                  	;mov	ax,4B00h
 19094 00000830 B8004B                  	mov	ax,(EXEC<<8)       
 19095                                  
 19096 00000833 F9                      	stc                     ; in case of int 24
 19097 00000834 CD21                            int     21h             ; go start up command
 19098                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 19099                                  			; DS:DX -> ASCIZ filename
 19100                                  			; ES:BX -> parameter block
 19101                                  			; AL = subfunc: load & execute program
 19102                                  	;push	cs
 19103                                  	;pop	ds
 19104                                  
 19105                                  	; 23/10/2022
 19106                                  	;push	dx		; push to balance fall-through pop
 19107                                  
 19108                                  ; note fall through if exec returns (an error)
 19109                                  comerr:
 19110                                  	; 23/10/2022
 19111                                  ;;ifdef	MULTI_CONFIG
 19112                                  	;cmp	byte [commnd4],0
 19113                                  	;je	short comerr2	; all defaults exhausted, print err msg
 19114                                  	;cmp	byte [newcmd],0
 19115                                  	;je	short continue	; don't print err msg for defaults just yet
 19116                                  ;comerr2:
 19117                                  ;;endif
 19118 00000836 BA[9B36]                        mov     dx,badcom	; want to print command error
 19119 00000839 E80D2A                  	call	badfil
 19120                                  continue:
 19121                                  	; 23/10/2022
 19122                                  	;pop	dx
 19123                                  
 19124                                  ;;ifndef MULTI_CONFIG
 19125                                  	;jmp	stall
 19126                                  	; 24/10/2022
 19127                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 19128 0000083C EBFE                    	jmp	short stall
 19129                                  ;;else
 19130                                  	; 23/10/2022
 19131                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 19132                                  	;int	21h             ;
 19133                                  	;add	al,'A'          ;
 19134                                  	;mov	dl,al           ; DL == default drive letter
 19135                                  	;mov	si,commnd2
 19136                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 19137                                  	;jne	short do_def2	; then try the 2nd alternate;
 19138                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 19139                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 19140                                  ;do_def2:			
 19141                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 19142                                          ;jne	short do_alt    ; no
 19143                                  ;do_def3:
 19144                                  	;mov	si,commnd3
 19145                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 19146                                  	;jne	short do_alt	; no
 19147                                  	;mov	si,commnd4
 19148                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 19149                                  	;jne	short do_alt	; no
 19150                                  	;push	dx              ;
 19151                                  	;mov	dx,badcomprmpt
 19152                                  	;call	print		;
 19153                                  	;pop	dx              ; recover default drive letter in DL
 19154                                  ;request_input:			;
 19155                                  	;mov	ah,STD_CON_OUTPUT
 19156                                  	;int	21h             ;
 19157                                  	;push	dx              ;
 19158                                  	;mov	dl,'>'          ;
 19159                                  	;int	21h             ;
 19160                                  	;mov	bl,[tmplate+1]	;
 19161                                  	;mov	bh,0            ;
 19162                                  	;mov	byte [commnd+bx],0Dh
 19163                                  	;mov	dx,tmplate
 19164                                  	;mov	ah,STD_CON_STRING_INPUT
 19165                                  	;int	21h             ; read a line of input
 19166                                  	;mov	dx,crlfm	;
 19167                                  	;call	print           ;
 19168                                  	;pop	dx              ;
 19169                                  	;mov	bl,[tmplate+1]	;
 19170                                  	;or	bl,bl           ; was anything typed?
 19171                                  	;jz	short request_input ;
 19172                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 19173                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 19174                                  	;mov	word [command_line],0D00h
 19175                                  	;jmp	short do_exec   ;
 19176                                  ;do_alt:
 19177                                  	;push	ds
 19178                                  	;pop	es
 19179                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 19180                                  	;mov	di,commnd	;
 19181                                  ;do_alt1:
 19182                                  	;lodsb			; copy the alternate, zapping it as we go,
 19183                                  	;mov	byte [si-1],0	; so that we know it's been tried
 19184                                  	;stosb 			;
 19185                                  	;or	al,al		;
 19186                                  	;jnz	short do_alt1	;
 19187                                  	;mov	di,command_line
 19188                                  	;cmp	byte [si+2],':'
 19189                                  	;jne	short do_alt2	;
 19190                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 19191                                  ;do_alt2:			;
 19192                                  	;lodsb			;
 19193                                  	;stosb			;
 19194                                  	;or	al,al           ;
 19195                                  	;jnz	short do_alt2   ;
 19196                                  	;mov	byte [di-1],cr
 19197                                  
 19198                                  ;;   Last but not least, see if we need to call disable_autoexec
 19199                                  
 19200                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 19201                                  	;;cmp	[command_line-1],0
 19202                                          ;;jne	short do_exec   ;
 19203                                          ;;mov	[command_line-1],'/'
 19204                                  	;;call	disable_autoexec ;
 19205                                  
 19206                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 19207                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 19208                                  	;call	disable_autoexec
 19209                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 19210                                  ;do_exec:
 19211                                  	;jmp     retry		;
 19212                                  
 19213                                  ;;endif	;MULTI_CONFIG
 19214                                  
 19215                                  ; 24/03/2019 - Retro DOS v4.0
 19216                                  
 19217                                  ; ----------------------------------------------------------------------
 19218                                  ; procedure : AllocFreeMem
 19219                                  ;
 19220                                  ; Allocate Max memory from DOS to find out where to load DOS.
 19221                                  ; DOS is at temporary location when this call is being made
 19222                                  ;
 19223                                  ; Inputs : None
 19224                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 19225                                  ;	   [area] & [memhi] set to the para value of the start of the
 19226                                  ;	   free memory.
 19227                                  ;
 19228                                  ; Uses   : AX, BX
 19229                                  ;
 19230                                  ; ----------------------------------------------------------------------
 19231                                  
 19232                                  	; 23/10/2022
 19233                                  AllocFreeMem:
 19234 0000083E BBFFFF                  	mov	bx,0FFFFh
 19235 00000841 B448                    	mov	ah,48h ; ALLOC
 19236 00000843 CD21                    	int	21h			; first time fails
 19237 00000845 B448                    	mov	ah,48h ; ALLOC
 19238 00000847 CD21                    	int	21h			; second time gets it
 19239                                  	; 11/12/2022
 19240                                  	; ds = cs
 19241                                  	;mov	[cs:area],ax
 19242                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 19243 00000849 A3[E403]                	mov	[area],ax
 19244 0000084C A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 19245 0000084F C3                      	retn				; start of free memory
 19246                                  				
 19247                                  	; include msbio.cl6
 19248                                  ; ----------------------------------------------------------------------
 19249                                  DOSLOMSG:
 19250 00000850 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 19250 00000859 7661696C61626C653A-
 19250 00000862 204C6F6164696E6720-
 19250 0000086B 444F53206C6F770D0A-
 19250 00000874 24                 
 19251                                  FEmsg:
 19252 00000875 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 19252 0000087E 6F723A2043616E6E6F-
 19252 00000887 7420616C6C6F636174-
 19252 00000890 65204D656D6F727920-
 19252 00000899 666F7220444F530D0A-
 19252 000008A2 24                 
 19253                                  
 19254                                  ; ----------------------------------------------------------------------
 19255                                  ;
 19256                                  ; procedure : LoadDOSHiOrLo
 19257                                  ;
 19258                                  ;		Tries to move DOS into HMA. If it fails then loads
 19259                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 19260                                  ;		moved; this just tries to allocate the HMA, and prints
 19261                                  ;		a message if this is not possible.
 19262                                  ;
 19263                                  ; ----------------------------------------------------------------------
 19264                                  
 19265                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19266                                  LoadDOSHiOrLo:
 19267                                  	; 27/03/2019 - Retro DOS v4.0
 19268                                  	; ds = cs
 19269 000008A3 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 19270                                  	;jc	short LdngLo		; If that don't work...
 19271                                  	;retn
 19272                                  	; 18/12/2022
 19273 000008A6 731C                    	jnc	short LoadDosHi_ok
 19274                                  LdngLo:
 19275                                  	; 23/10/2022
 19276                                  	;push	cs
 19277                                  	;pop	ds
 19278                                  	; 11/12/2022
 19279                                  	; ds = cs
 19280 000008A8 B409                    	mov	ah,9
 19281 000008AA BA[5008]                	mov	dx,DOSLOMSG		; inform user that we are
 19282 000008AD CD21                    	int	21h			; loading low
 19283                                  
 19284                                  ;ifndef ROMDOS
 19285                                  	; actually move the dos, and reinitialize it.
 19286                                  
 19287 000008AF BB0100                  	mov	bx,1				; M012
 19288                                  						;  use int 21 alloc for mem
 19289 000008B2 E83F00                  	call	MovDOSLo
 19290                                  	; 11/12/2022
 19291                                  	; ds = cs
 19292                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 19293                                  	; 23/10/2022
 19294 000008B5 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 19295                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 19296                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 19297 000008B9 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 19298                                  	; 11/12/2022
 19299                                  	; ds = cs
 19300                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 19301 000008BB FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 19302                                  	
 19303                                  ;endif ; ROMDOS
 19304                                  	; 23/10/2022
 19305                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 19306                                  	; 11/12/2022
 19307                                  	; ds = cs
 19308 000008BF C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 19309                                  LoadDosHi_ok:	; 18/12/2022
 19310 000008C4 C3                      	retn
 19311                                  
 19312                                  ; ----------------------------------------------------------------------
 19313                                  ;
 19314                                  ; procedure : TryToMovDOSHi
 19315                                  ;
 19316                                  ;		This tries to move DOS into HMA.
 19317                                  ;		Returns CY if it failed.
 19318                                  ;		If it succeeds returns with carry cleared.
 19319                                  ;
 19320                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 19321                                  ;		the A20 switching code in the low mem stub to be installed.
 19322                                  ; 
 19323                                  ; ----------------------------------------------------------------------
 19324                                  
 19325                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19326                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 19327                                  TryToMovDOSHi:
 19328                                  	; 11/12/2022
 19329                                  	; 27/03/2019 - Retro DOS v4.0
 19330                                  	; ds = cs
 19331 000008C5 E81300                  	call	MovDOSHi
 19332 000008C8 7210                    	jc	short ttldhx
 19333                                  
 19334                                  ;ifndef ROMDOS
 19335                                  	; 23/10/2022
 19336                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 19337                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 19338                                  	; 11/12/2022
 19339                                  	; ds = cs
 19340 000008CA 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 19341                                  ;else
 19342                                  ;	..
 19343                                  ;endif ; ROMDOS
 19344                                  
 19345                                  	; 11/12/2022
 19346                                  	; ds = cs
 19347 000008CE 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 19348                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 19349 000008D0 FF1E[7B02]              	call	far [dos_segreinit]
 19350                                  	;mov	byte [cs:runhigh],1
 19351 000008D4 C606[6A02]01            	mov	byte [runhigh],1
 19352 000008D9 F8                      	clc
 19353                                  ttldhx:
 19354 000008DA C3                      	retn
 19355                                  
 19356                                  ; ----------------------------------------------------------------------
 19357                                  ;
 19358                                  ; procedure : MovDOSHi
 19359                                  ;
 19360                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 19361                                  ;		For ROMDOS, the code is not actually moved, but the
 19362                                  ;		HMA is allocated and prepared for sub-allocation.
 19363                                  ;
 19364                                  ;		Returns : CY if it failed
 19365                                  ;
 19366                                  ; ----------------------------------------------------------------------
 19367                                  
 19368                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19369                                  MovDOSHi:
 19370                                  	; 14/05/2019
 19371                                  	; 27/03/2019 - Retro DOS v4.0
 19372                                  	; ds = cs
 19373 000008DB E8D500                  	call	AllocHMA
 19374 000008DE 7213                    	jc	short mdhx			; did we get HMA?
 19375 000008E0 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 19376 000008E3 8EC0                    	mov	es,ax
 19377                                  
 19378                                  ;ifndef ROMDOS
 19379                                  	; actually move the BIOS and DOS
 19380                                  
 19381                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19382                                  	; 24/03/2019
 19383                                  	
 19384                                  	; 23/10/2022
 19385 000008E5 E83200                  	call	MovBIOS				; First move BIOS into HMA
 19386                                  
 19387                                  	; ES:DI points to free HMA after BIOS
 19388                                  	
 19389                                  	; 14/05/2019
 19390                                  	; 24/03/2019 - Retro DOS v4.0
 19391                                  	;xor	di,di
 19392                                  	
 19393                                  	; 23/10/2022
 19394                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 19395                                  	; 11/12/2022
 19396                                  	; ds = cs
 19397 000008E8 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 19398 000008EC E81100                  	call	MovDOS				; and move it
 19399                                  
 19400                                  	; ES:DI points to free HMA after DOS
 19401                                  ;else
 19402                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 19403                                  ;
 19404                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 19405                                  ;
 19406                                  ;endif ; ROMDOS
 19407                                  
 19408 000008EF E85E02                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 19409 000008F2 F8                      	clc
 19410                                  mdhx:
 19411 000008F3 C3                      	retn
 19412                                  
 19413                                  ; ----------------------------------------------------------------------
 19414                                  ;
 19415                                  ; procedure : MovDOSLo
 19416                                  ;
 19417                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 19418                                  ;
 19419                                  ; ----------------------------------------------------------------------
 19420                                  
 19421                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19422                                  
 19423                                  ;ifndef ROMDOS
 19424                                  
 19425                                  MovDOSLo:
 19426                                  	; 14/05/2019
 19427                                  	; 27/03/2019 - Retro DOS v4.0
 19428                                  	; ds = cs
 19429 000008F4 E84500                  	call	AllocMemForDOS			; incestuosly!!!
 19430                                  	
 19431                                  	; 23/10/2022
 19432                                  	; 14/05/2019
 19433                                  	;inc	ax  ; skip MCB
 19434                                  	
 19435 000008F7 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 19436                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19437                                  	; 24/03/2019
 19438                                  	
 19439                                  	; 23/10/2022
 19440 000008F9 E81E00                  	call	MovBIOS
 19441                                  
 19442                                  ;------ ES:DI points memory immediately after BIOS
 19443                                  
 19444                                  	; 14/05/2019
 19445                                  	; NOTE: 
 19446                                  	;     Order of (RETRO) DOS kernel sections at memory:
 19447                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 19448                                  
 19449                                  	; 24/03/2019 - Retro DOS v4.0
 19450                                  	;xor	di,di	
 19451                                  
 19452                                  	; 23/10/2022
 19453                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 19454                                  	; 11/12/2022
 19455                                  	; ds = cs
 19456 000008FC 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 19457                                  	;call	MovDOS
 19458                                  	;retn
 19459                                  	; 11/12/2022
 19460                                  	;jmp	short MovDOS
 19461                                  
 19462                                  ;endif ; ROMDOS
 19463                                  
 19464                                  ; 11/12/2022
 19465                                  
 19466                                  ; ----------------------------------------------------------------------
 19467                                  ;
 19468                                  ; procedure : MovDOS
 19469                                  ;
 19470                                  ;		Moves DOS code into requested area
 19471                                  ;
 19472                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19473                                  ;	     CX    - size of DOS code to be moved
 19474                                  ;
 19475                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19476                                  ;
 19477                                  ; ----------------------------------------------------------------------
 19478                                  
 19479                                  	; 11/12/2022
 19480                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19481                                  
 19482                                  ;ifndef ROMDOS
 19483                                  
 19484                                  MovDOS:
 19485                                  	; 14/05/2019
 19486                                  	; 27/03/2019 - Retro DOS v4.0
 19487                                  
 19488                                  	; 11/12/2022
 19489                                  	; ds = cs
 19490                                  
 19491                                  	; 23/10/2022
 19492                                  	;push	ds ; *//
 19493                                  	
 19494 00000900 06                      	push	es
 19495 00000901 57                      	push	di
 19496                                  
 19497                                  	; 11/12/2022
 19498 00000902 1E                      	push	ds ; *// ; 11/12/202
 19499                                  
 19500                                  	; 29/04/2019
 19501 00000903 C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 19502                                  	; 23/10/2022
 19503                                  	;lds	si,[cs:dosinit]
 19504                                  	; 04/09/2023
 19505 00000907 89F0                    	mov	ax,si
 19506                                  
 19507 00000909 F3A4                    	rep	movsb
 19508                                  
 19509 0000090B 1F                      	pop	ds ; *// ; 11/12/2022
 19510                                  
 19511 0000090C 5B                      	pop	bx				; get back offset into which
 19512                                  						;  DOS was moved
 19513                                  	; 04/09/2023
 19514                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 19515                                  						;  wants to run
 19516                                  	; 04/09/2023
 19517                                  	;mov	ax,[dosinit]
 19518                                  	; ax = [dosinit]
 19519                                  
 19520 0000090D 29D8                    	sub	ax,bx
 19521 0000090F E89D02                  	call	off_to_para
 19522 00000912 5B                      	pop	bx				; get the segment at which
 19523                                  						;  we moved DOS into
 19524 00000913 29C3                    	sub	bx,ax				; Adjust segment
 19525                                  	
 19526                                  	; 11/12/2022
 19527                                  	; 23/10/2022
 19528                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19529                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19530                                  	; 11/12/2022
 19531 00000915 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 19532                                  		
 19533                                  	; 27/03/2019
 19534                                  	;pop	ds ; *//
 19535                                  	; ds = cs
 19536                                  	;mov	[FINAL_DOS_LOCATION],bx
 19537                                  
 19538 00000919 C3                      	retn
 19539                                  
 19540                                  ;endif ;ROMDOS
 19541                                  
 19542                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 19543                                  ; 24/03/2019
 19544                                  ; ----------------------------------------------------------------------
 19545                                  ;
 19546                                  ; procedure : MovBIOS
 19547                                  ;
 19548                                  ;		Moves BIOS code into requested segment
 19549                                  ;
 19550                                  ;	In : ES - segment to which BIOS is to be moved
 19551                                  ;		  ( it moves always into offset BCode_Start)
 19552                                  ;
 19553                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 19554                                  ;
 19555                                  ; ----------------------------------------------------------------------
 19556                                  
 19557                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19558                                  
 19559                                  ;ifndef ROMDOS
 19560                                  
 19561                                  MovBIOS: ; proc	near
 19562                                  	; 11/12/2022
 19563 0000091A 1E                      	push	ds ; ds = cs	
 19564                                  	;
 19565                                  	; 23/10/2022
 19566                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 19567                                  	; 17/09/2023
 19568 0000091B 8E1E[8702]              	mov	ds,[temp_bcode_seg]
 19569                                  	;mov	si,BCODE_START ; mov si,30h
 19570                                  	; 09/12/2022
 19571 0000091F BE[3000]                	mov	si,BCODESTART
 19572 00000922 89F7                    	mov	di,si
 19573 00000924 B9A019                  	mov	cx,BCODE_END ; mov cx,1A60h
 19574 00000927 29F1                    	sub	cx,si				; size of BIOS
 19575 00000929 D1E9                    	shr	cx,1				; Both the labels are para
 19576                                  						;  aligned
 19577 0000092B F3A5                    	rep	movsw
 19578                                  	
 19579                                  	; 11/12/2022
 19580 0000092D 1F                      	pop	ds ; ds = cs
 19581                                  	;
 19582 0000092E 06                      	push	es
 19583 0000092F 57                      	push	di				; save end of BIOS
 19584 00000930 8CC0                    	mov	ax,es
 19585                                  	;
 19586                                  	; 11/12/2022
 19587                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 19588                                  	;;call	dword ptr cs:_seg_reinit_ptr
 19589                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 19590                                  	; ds = cs
 19591 00000932 A3[0004]                	mov	[BCodeSeg],ax
 19592 00000935 FF1E[8502]              	call	far [seg_reinit_ptr]
 19593                                  	;
 19594 00000939 5F                      	pop	di
 19595 0000093A 07                      	pop	es				; get back end of BIOS
 19596 0000093B C3                      	retn
 19597                                  
 19598                                  ;MovBIOS endp
 19599                                  
 19600                                  ;endif ; ROMDOS
 19601                                  
 19602                                  ; 11/12/2022
 19603                                  %if 0
 19604                                  
 19605                                  ; 24/03/2019
 19606                                  
 19607                                  ; ----------------------------------------------------------------------
 19608                                  ;
 19609                                  ; procedure : MovDOS
 19610                                  ;
 19611                                  ;		Moves DOS code into requested area
 19612                                  ;
 19613                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 19614                                  ;	     CX    - size of DOS code to be moved
 19615                                  ;
 19616                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 19617                                  ;
 19618                                  ; ----------------------------------------------------------------------
 19619                                  
 19620                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19621                                  
 19622                                  ;ifndef ROMDOS
 19623                                  
 19624                                  MovDOS:
 19625                                  	; 14/05/2019
 19626                                  	; 27/03/2019 - Retro DOS v4.0
 19627                                  
 19628                                  	; 11/12/2022
 19629                                  	; ds = cs
 19630                                  
 19631                                  	; 23/10/2022
 19632                                  	;push	ds ; *//
 19633                                  	
 19634                                  	push	es
 19635                                  	push	di
 19636                                  
 19637                                  	; 11/12/2022
 19638                                  	push	ds ; *// ; 11/12/202
 19639                                  
 19640                                  	; 29/04/2019
 19641                                  	lds	si,[dosinit] ; 11/12/2022
 19642                                  	; 23/10/2022
 19643                                  	;lds	si,[cs:dosinit]
 19644                                  	; 04/09/2023
 19645                                  	mov	ax,si
 19646                                  
 19647                                  	rep	movsb
 19648                                  
 19649                                  	pop	ds ; *// ; 11/12/2022
 19650                                  
 19651                                  	pop	bx				; get back offset into which
 19652                                  						;  DOS was moved
 19653                                  	;mov	ax,[dosinit] ; 04/09/2023
 19654                                  	;;mov	ax,[cs:dosinit]			; get the offset at which DOS
 19655                                  						;  wants to run
 19656                                  	sub	ax,bx
 19657                                  	call	off_to_para
 19658                                  	pop	bx				; get the segment at which
 19659                                  						;  we moved DOS into
 19660                                  	sub	bx,ax				; Adjust segment
 19661                                  	
 19662                                  	; 11/12/2022
 19663                                  	; 23/10/2022
 19664                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 19665                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 19666                                  	; 11/12/2022
 19667                                  	mov	[CURRENT_DOS_LOCATION],bx
 19668                                  		
 19669                                  	; 27/03/2019
 19670                                  	;pop	ds ; *//
 19671                                  	; ds = cs
 19672                                  	;mov	[FINAL_DOS_LOCATION],bx
 19673                                  
 19674                                  	retn
 19675                                  
 19676                                  ;endif ;ROMDOS
 19677                                  
 19678                                  %endif
 19679                                  
 19680                                  ; ----------------------------------------------------------------------
 19681                                  ;
 19682                                  ; procedure : AllocMemForDOS
 19683                                  ;
 19684                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 19685                                  ;
 19686                                  ;	Out : AX - seg of allocated memoryblock
 19687                                  ;
 19688                                  ; ----------------------------------------------------------------------
 19689                                  
 19690                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19691                                  
 19692                                  ;ifndef ROMDOS
 19693                                  
 19694                                  AllocMemForDOS:
 19695                                  	; 11/12/2022
 19696                                  	; 14/05/2019
 19697                                  	; 27/03/2019 - Retro DOS v4.0
 19698                                  	; ds = cs
 19699                                  	;mov	ax,BCode_end
 19700                                  	;sub	ax,BCode_start		; BIOS code size
 19701                                  	; 23/10/2022
 19702 0000093C B8A019                  	mov	ax,BCODE_END ; 1A60h
 19703                                  	;sub	ax,BCODE_START ; 30h
 19704                                  	; 09/12/2022
 19705 0000093F 2D[3000]                	sub	ax,BCODESTART 
 19706                                  	; 24/03/2019 - Retro DOS v4.0 
 19707                                  	; 02/11/2022
 19708                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 19709                                  	; 11/12/2022
 19710                                  	; ds = cs
 19711 00000942 0306[7F02]              	add	ax,[lo_doscod_size]
 19712 00000946 83C00F                  	add	ax,15
 19713 00000949 E86302                  	call	off_to_para			; convert to para
 19714                                  	; 23/10/2022
 19715                                  	; 14/05/2019
 19716                                  	;inc	ax ; + 1 paragraph for MCB
 19717 0000094C 09DB                    	or	bx,bx				; M012
 19718 0000094E 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 19719 00000950 741A                    	jz	short update_arena		; M012
 19720 00000952 B448                    	mov	ah,48h				; request DOS
 19721 00000954 CD21                    	int	21h
 19722 00000956 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 19723                                   	; 23/10/2022
 19724                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 19725 00000958 83E803                  	sub	ax,3				; Take care ORG 30h of
 19726                                  						;  BIOS code
 19727 0000095B 8EC0                    	mov	es,ax
 19728                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 19729                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 19730                                  	; 14/05/2019
 19731                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 19732                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 19733                                  	; 23/10/2022
 19734 0000095D 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 19735 00000964 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 19736                                  
 19737 0000096B C3                      	retn
 19738                                  
 19739                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 19740                                  ;	  using DOS itself causes an arena to be generated.
 19741                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 19742                                  ;	  assume that the device drivers are loaded into
 19743                                  ;	  the first arena. For this reason, MagicDrv's
 19744                                  ;	  main device driver header arena is manually
 19745                                  ;	  truncated from the arena chain, and the space
 19746                                  ;	  for DOS is allocated using the following
 19747                                  ;	  simple code, which also assumes that the
 19748                                  ;	  first arena is the free one where DOS's low
 19749                                  ;	  stub will go.
 19750                                  ;
 19751                                  ; M012 : BEGIN
 19752                                  
 19753                                  	; 23/10/2022
 19754                                  update_arena:
 19755 0000096C 1E                      	push	ds ; ds = cs
 19756 0000096D 57                      	push	di
 19757 0000096E 51                      	push	cx
 19758 0000096F 52                      	push	dx
 19759                                  	; 23/10/2022
 19760                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 19761                                  	; 11/12/2022
 19762                                  	; ds = cs 
 19763 00000970 C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 19764 00000974 4F                      	dec	di
 19765 00000975 4F                      	dec	di				; Arena head is immediately
 19766                                  						;  before sysvar
 19767 00000976 8E05                    	mov	es,[di]				; es = arena head
 19768                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 19769 00000978 268B0E0300              	mov	cx,[es:3]
 19770 0000097D 39D9                    	cmp	cx,bx				; is it sufficient ?
 19771 0000097F 7227                    	jb	short FatalErr			; no, fatal error
 19772                                  
 19773                                  	;mov	dl,[es:ARENA.SIGNATURE]
 19774 00000981 268A160000              	mov	dl,[es:0]
 19775 00000986 8CC0                    	mov	ax,es
 19776 00000988 01D8                    	add	ax,bx				; ax = new arena head
 19777 0000098A 8905                    	mov	[di],ax				; store it in DOS data area
 19778 0000098C 8ED8                    	mov	ds,ax
 19779                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 19780 0000098E 88160000                	mov	[0],dl
 19781                                  	;mov	word [ARENA.OWNER],0		; free
 19782 00000992 C70601000000            	mov	word [1],0
 19783 00000998 29D9                    	sub	cx,bx				; size of the new block
 19784                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 19785 0000099A 890E0300                	mov	[3],cx
 19786 0000099E 8CC0                    	mov	ax,es				; return seg to the caller
 19787                                  	; 23/10/2022
 19788                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 19789 000009A0 83E803                  	sub	ax,3				;  BIOS code
 19790 000009A3 5A                      	pop	dx
 19791 000009A4 59                      	pop	cx
 19792 000009A5 5F                      	pop	di
 19793 000009A6 1F                      	pop	ds ; ds = cs
 19794 000009A7 C3                      	retn
 19795                                  ;
 19796                                  ; M012 : END
 19797                                  ;
 19798                                  FatalErr:
 19799 000009A8 0E                      	push	cs
 19800 000009A9 1F                      	pop	ds
 19801 000009AA BA[7508]                	mov	dx,FEmsg
 19802 000009AD B409                    	mov	ah,9
 19803 000009AF CD21                    	int	21h 		; DOS - PRINT STRING
 19804                                  				; DS:DX -> string terminated by "$"
 19805                                          ;jmp	stall
 19806                                  	; 23/10/2022
 19807 000009B1 FA                      	cli
 19808 000009B2 F4                      	hlt
 19809                                  
 19810                                  ;endif ;ROMDOS
 19811                                  
 19812                                  ; 25/03/2019 - Retro DOS v4.0
 19813                                  
 19814                                  ; ----------------------------------------------------------------------
 19815                                  ;
 19816                                  ; procedure : AllocHMA
 19817                                  ;
 19818                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 19819                                  ;	  up there. If it gets any sort of error, it will return with
 19820                                  ;	  carry set so that we can resort to running low.
 19821                                  ;
 19822                                  ;	It also returns ES: -> 0ffffh if it returns success
 19823                                  ;
 19824                                  ; ----------------------------------------------------------------------
 19825                                  
 19826                                  AllocHMA:
 19827                                  ;	cas note:  The pre-286 check is no longer needed here since the
 19828                                  ;		   presence of XMS is sufficient. However, this code hasn't
 19829                                  ;		   been deleted because it can be recycled for skipping the
 19830                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 19831                                  ;		   in the case of a pre-286.
 19832                                  
 19833                                  ;;	see if we're running on a pre-286. If not, force low.
 19834                                  ;
 19835                                  ;	xor	ax,ax
 19836                                  ;	pushf			; save flags (like int)
 19837                                  ;	push	ax
 19838                                  ;	popf
 19839                                  ;	pushf
 19840                                  ;	pop	ax
 19841                                  ;	popf			; restore original flags (like int)
 19842                                  ;	and	ax,0F000h
 19843                                  ;	cmp	ax,0F000h	; 8088/8086?
 19844                                  ;	jz	short grab_hma_error
 19845                                  
 19846                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19847                                  	; (SYSINIT:0A26h)
 19848                                  
 19849 000009B3 1E                      	push	ds
 19850                                  	;;mov	ax,Bios_Data
 19851                                  	;mov	ax,KERNEL_SEGMENT
 19852                                  	; 21/10/2022
 19853 000009B4 B87000                  	mov	ax,DOSBIODATASEG
 19854 000009B7 8ED8                    	mov	ds,ax
 19855                                  
 19856 000009B9 E84A00                  	call	IsXMSLoaded
 19857 000009BC 7545                    	jnz	short grabhma_error
 19858                                  
 19859 000009BE B81043                  	mov	ax,4310h
 19860 000009C1 CD2F                    	int	2Fh		; get the vector into es:bx
 19861                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 19862                                  		; Return: ES:BX -> driver entry point
 19863                                  
 19864 000009C3 891E[0E00]              	mov	[xms],bx
 19865                                  	;mov	[0Eh], bx
 19866 000009C7 8C06[1000]              	mov	[xms+2],es
 19867                                  	;mov	[10h],es
 19868                                  
 19869 000009CB B401                    	mov	ah,1		; request HMA
 19870 000009CD BAFFFF                  	mov	dx,0FFFFh
 19871                                  	;call	dword ptr ds:0Eh
 19872 000009D0 FF1E[0E00]              	call	far [xms]
 19873 000009D4 48                      	dec	ax
 19874 000009D5 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 19875                                  
 19876                                  ;------ Himem may be lying because it has allocated mem for int 15
 19877                                  
 19878 000009D7 B488                    	mov	ah,88h
 19879 000009D9 CD15                    	int	15h
 19880                                  		; Get Extended Memory Size
 19881                                  		; Return: CF clear on success
 19882                                  		; AX = size of memory above 1M in K
 19883 000009DB 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 19884                                  	;jb	short grabhma_error
 19885                                  	; 11/12/2022
 19886 000009DE 7224                    	jb	short grabhma_err ; cf=1
 19887                                  allocHMA_1:
 19888 000009E0 B405                    	mov	ah,5		; localenableA20
 19889                                  	;call	dword ptr ds:0Eh
 19890 000009E2 FF1E[0E00]              	call	far [xms]
 19891 000009E6 48                      	dec	ax
 19892 000009E7 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 19893                                  
 19894 000009E9 E88601                  	call	IsVDiskInstalled
 19895 000009EC 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 19896                                  
 19897 000009EE B8FFFF                  	mov	ax,0FFFFh
 19898 000009F1 8EC0                    	mov	es,ax
 19899 000009F3 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 19900 000009FA 26813E10003412          	cmp	word [es:10h],1234h
 19901                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 19902                                  	; 11/12/2022
 19903 00000A01 7401                    	je	short allocHMA_ok	
 19904                                  
 19905                                  ; 11/12/2022
 19906                                  ;	; 11/12/2022
 19907                                  ;	; cf=0
 19908                                  ;	;clc
 19909                                  ;	pop	ds
 19910                                  ;	retn
 19911                                  
 19912                                  grabhma_error:
 19913 00000A03 F9                      	stc
 19914                                  	; 11/12/022
 19915                                  grabhma_err:	; cf=1
 19916                                  allocHMA_ok:	; cf=0
 19917 00000A04 1F                      	pop	ds
 19918 00000A05 C3                      	retn
 19919                                  
 19920                                  ; ----------------------------------------------------------------------
 19921                                  ;
 19922                                  ; procedure : IsXMSLoaded
 19923                                  ;
 19924                                  ;             Checks whether a XMS driver is loaded
 19925                                  ;
 19926                                  ; Returns : Z flag set if XMS driver loaded
 19927                                  ;           Z flag reset if no XMS drivers are present
 19928                                  ;
 19929                                  ; ----------------------------------------------------------------------
 19930                                  
 19931                                  IsXMSLoaded:
 19932 00000A06 B80043                  	mov	ax,4300h
 19933 00000A09 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 19934                                  				; Return: AL = 80h XMS driver installed
 19935                                  				; AL <> 80h no driver
 19936 00000A0B 3C80                    	cmp	al,80h		; XMS installed?
 19937 00000A0D C3                      	retn
 19938                                  
 19939                                  ; ----------------------------------------------------------------------
 19940                                  ; procedure : FTryToMovDOSHi
 19941                                  ;
 19942                                  ;		Called from HMA suballoc calls
 19943                                  ;	
 19944                                  ; ----------------------------------------------------------------------
 19945                                  
 19946                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19947                                  	; (SYSINIT:0A84h)
 19948                                  
 19949                                  FTryToMovDOSHi:	; proc	far
 19950                                  
 19951 00000A0E 50                      	push	ax
 19952 00000A0F 53                      	push	bx
 19953 00000A10 51                      	push	cx
 19954 00000A11 52                      	push	dx
 19955 00000A12 56                      	push	si
 19956 00000A13 57                      	push	di
 19957 00000A14 1E                      	push	ds
 19958 00000A15 06                      	push	es
 19959                                  
 19960                                  	; 23/10/2022
 19961                                  	; 27/03/2019 - Retro DOS v4.0
 19962                                  	; 11/12/2022
 19963 00000A16 0E                      	push	cs
 19964 00000A17 1F                      	pop	ds
 19965                                  
 19966                                  	;cmp	byte [cs:runhigh],0FFh
 19967                                  	; 11/12/2022
 19968 00000A18 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19969 00000A1D 7503                    	jne	short _ftymdh_1
 19970                                  
 19971                                  	; ds = cs
 19972 00000A1F E8A3FE                  	call	TryToMovDOSHi
 19973                                  _ftymdh_1:
 19974 00000A22 07                      	pop	es
 19975 00000A23 1F                      	pop	ds
 19976 00000A24 5F                      	pop	di
 19977 00000A25 5E                      	pop	si
 19978 00000A26 5A                      	pop	dx
 19979 00000A27 59                      	pop	cx
 19980 00000A28 5B                      	pop	bx
 19981 00000A29 58                      	pop	ax
 19982                                  
 19983 00000A2A CB                      	retf
 19984                                  
 19985                                  ; ----------------------------------------------------------------------
 19986                                  ;
 19987                                  ; following piece of code will be moved into a para boundary. And the para
 19988                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19989                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19990                                  ; to determine free extended memory.
 19991                                  ;
 19992                                  ; For more details read "power programming" column by Ray Duncan in the
 19993                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19994                                  ;
 19995                                  ; ----------------------------------------------------------------------
 19996                                  
 19997                                  	; 13/04/2024
 19998                                  ;align 2
 19999 00000A2B 00                      	db	0 
 20000                                  
 20001                                  StartVDHead:
 20002                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 20003                                  
 20004 00000A2C 00000000                	dd	0		; link to next device driver
 20005 00000A30 0080                    	dw	8000h		; device attribute
 20006 00000A32 0000                    	dw	0		; strategy routine offset
 20007 00000A34 0000                    	dw	0		; interrupt routine offset
 20008 00000A36 01                      	db	1		; number of units
 20009                                  	;db	7 dup(0) 
 20010 00000A37 00<rep 7h>              	times	7 db 0 		; reserved area
 20011                                  VDiskSig1:
 20012 00000A3E 564449534B              	db	'VDISK'
 20013                                  
 20014                                  VLEN1	equ	($-VDiskSig1)
 20015                                  
 20016 00000A43 202056332E33            	db	'  V3.3'	; vdisk label
 20017                                  	;db	15 dup (0)	; pad
 20018 00000A49 00<rep Fh>              	times	15 db 0
 20019 00000A58 0000                    	dw	0		; bits 0-15 of free HMA
 20020 00000A5A 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 20021                                  VDInt19:
 20022 00000A5B EA                      	db	0EAh		; jmp to old vector
 20023                                  OldVDInt19:
 20024 00000A5C 00000000                	dd	0		; Saved int 19 vector
 20025                                  
 20026                                  EndVDHead: ; label byte
 20027                                  
 20028                                  VDiskHMAHead:	
 20029 00000A60 000000                  	db	0,0,0		; non-bootable disk
 20030                                  VDiskSig2:
 20031 00000A63 564449534B              	db	'VDISK'
 20032                                  
 20033                                  VLEN2	equ	($-VDiskSig2)
 20034                                  
 20035 00000A68 332E33                  	db	'3.3'		; OEM - signature
 20036 00000A6B 8000                    	dw	128		; number of bytes/sector
 20037 00000A6D 01                      	db	1		; sectors/cluster
 20038 00000A6E 0100                    	dw	1		; reserved sectors
 20039 00000A70 01                      	db	1		; number of FAT copies
 20040 00000A71 4000                    	dw	64		; number of root dir entries
 20041 00000A73 0002                    	dw	512		; number of sectors
 20042 00000A75 FE                      	db	0FEh		; media descriptor
 20043 00000A76 0600                    	dw	6		; number of sectors/FAT
 20044 00000A78 0800                    	dw	8		; sectors per track
 20045 00000A7A 0100                    	dw	1		; number of heads
 20046 00000A7C 0000                    	dw	0		; number of hidden sectors
 20047 00000A7E 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 20048                                  
 20049                                  EndVDiskHMAHead: ; label byte
 20050                                  
 20051                                  ; ----------------------------------------------------------------------
 20052                                  ;
 20053                                  ; procedure : InstVDiskHeader
 20054                                  ;
 20055                                  ;             Installs the VDISK header to reserve the 64k of HMA
 20056                                  ;	      It puts a 32 byte header at 10000:0 and
 20057                                  ;	      another header at (seg of int19):0
 20058                                  ;
 20059                                  ; Inputs : None
 20060                                  ;
 20061                                  ; Outputs : None
 20062                                  ;
 20063                                  ; USES : DS,SI,AX,CX,DX
 20064                                  ;
 20065                                  ; ----------------------------------------------------------------------
 20066                                  
 20067                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20068                                  
 20069                                  InstVDiskHeader:
 20070 00000A80 31C0                    	xor	ax,ax
 20071 00000A82 8ED8                    	mov	ds,ax			; seg of int vect table
 20072                                  
 20073                                  ;-------------- save old int 19 vector
 20074                                  
 20075                                  	; 23/10/2022
 20076 00000A84 A16400                  	mov	ax,[19h*4]
 20077                                  	;mov	[OldVDInt19],ax
 20078 00000A87 2EA3[5C0A]              	mov	[cs:OldVDInt19],ax
 20079 00000A8B A16600                  	mov	ax,[19h*4+2]
 20080                                  	;mov	[OldVDInt19+2],ax
 20081 00000A8E 2EA3[5E0A]              	mov	[cs:OldVDInt19+2],ax
 20082                                  
 20083                                  ;-------------- calculate seg of new int 19 handler
 20084                                  
 20085 00000A92 B448                    	mov	ah,48h			; allocate memory
 20086                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 20087                                  	; 23/10/2022
 20088 00000A94 BB0400                  	mov	bx,4
 20089 00000A97 CD21                    	int	21h
 20090                                  
 20091                                  ;	if carry, fatal hanging error!!!!!
 20092                                  
 20093 00000A99 48                      	dec	ax			; point to arena
 20094 00000A9A 8EC0                    	mov	es,ax
 20095                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 20096 00000A9C 26C70601000800          	mov	word [es:1],8
 20097                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 20098 00000AA3 26C70608005343          	mov	word [es:8],'SC'
 20099 00000AAA 40                      	inc	ax
 20100 00000AAB 8EC0                    	mov	es,ax			; get back to allocated memory
 20101                                  
 20102                                  ;-------------- install new int 19 vector
 20103                                  
 20104 00000AAD FA                      	cli				; no reboots at this time
 20105                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 20106 00000AAE C70664002F00            	mov	word [19h*4],47
 20107 00000AB4 A36600                  	mov	[19h*4+2],ax
 20108                                  
 20109                                  ;-------------- move the code into proper place
 20110                                  
 20111                                  	;mov	cx,(EndVDHead-StartVDHead)
 20112 00000AB7 B93400                  	mov	cx,52
 20113 00000ABA BE[2C0A]                	mov	si,StartVDHead
 20114 00000ABD 31FF                    	xor	di,di
 20115 00000ABF 0E                      	push	cs
 20116 00000AC0 1F                      	pop	ds
 20117 00000AC1 FC                      	cld
 20118 00000AC2 F3A4                    	rep	movsb
 20119 00000AC4 FB                      	sti				; BUGBUG is sti OK now?
 20120                                  
 20121                                  ;-------------- mov the HMA VDisk head into HMA
 20122                                  
 20123                                  	; 23/10/2022
 20124 00000AC5 57                      	push	di
 20125 00000AC6 06                      	push	es
 20126                                  
 20127                                  	;mov	ax,0FFFFh
 20128                                  	;mov	es,ax
 20129                                  	; 04/09/2023
 20130 00000AC7 49                      	dec	cx
 20131                                  	; cx = 0FFFFh
 20132 00000AC8 8EC1                    	mov	es,cx
 20133                                  
 20134 00000ACA BF1000                  	mov	di,10h
 20135                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 20136 00000ACD B92000                  	mov	cx,32
 20137 00000AD0 BE[600A]                	mov	si,VDiskHMAHead
 20138 00000AD3 F3A4                    	rep	movsb			; ds already set to cs
 20139                                  
 20140 00000AD5 5F                      	pop	di
 20141 00000AD6 07                      	pop	es
 20142                                  
 20143 00000AD7 C3                      	retn
 20144                                  
 20145                                  ; ----------------------------------------------------------------------
 20146                                  ; procedure : ClrVDISKHeader
 20147                                  ;
 20148                                  ;		Clears the first 32 bytes at 1MB boundary
 20149                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 20150                                  ;		left by previous DOS=HIGH session
 20151                                  ;
 20152                                  ; ----------------------------------------------------------------------
 20153                                  
 20154                                  struc desc
 20155 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 20156 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 20157 00000004 ??                       .hi_byte:	resb 	1		; address
 20158 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 20159 00000006 ????                     .reserved:	resw	1		;
 20160                                   .size:
 20161                                  endstruc
 20162                                  
 20163                                  		; 23/10/2022
 20164                                  bmove:		;label byte
 20165                                  
 20166                                  dummy:		;times desc.size db 0	; desc	<>
 20167 00000AD8 00<rep 8h>              		times 8 db 0		 
 20168                                  gdt:		;times desc.size db 0	; desc	<>
 20169 00000AE0 00<rep 8h>              		times 8 db 0
 20170 00000AE8 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 20171 00000AEA 0000                    		dw	0
 20172 00000AEC 00                      		db	0
 20173 00000AED 93                      		db	93h
 20174 00000AEE 0000                    		dw	0
 20175 00000AF0 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 20176 00000AF2 0000                    		dw	0
 20177 00000AF4 10                      		db	10h
 20178 00000AF5 93                      		db	93h
 20179 00000AF6 0000                    		dw	0
 20180                                  
 20181                                  rombios_code:	;times desc.size db 0	; desc	<>
 20182 00000AF8 00<rep 8h>              		times 8 db 0
 20183                                  temp_stack:	;times desc.size db 0	; desc	<>
 20184 00000B00 00<rep 8h>              		times 8 db 0
 20185                                  
 20186 00000B08 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 20187                                  
 20188                                  
 20189                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 20190                                  
 20191                                  ClrVDISKHeader:	; proc	near
 20192                                  
 20193                                  ;;-----------------------------------------------------------	      ;I070
 20194                                  ;; The following workaround get around a problem with the	      ;I070
 20195                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 20196                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 20197                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 20198                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 20199                                  ;; move crashes the system. We can do this because these	      ;I070
 20200                                  ;; systems clear all of memory on a cold boot.			      ;I070
 20201                                  ;								      ;I070
 20202                                  ;               in      al,64h         ; Test for password servr mode ;I070
 20203                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 20204                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 20205                                  ;                                      ; Check for Tortugas...	      ;I070
 20206                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 20207                                  ;               je      short ClrVDISKno                              ;I070
 20208                                  ;                                      ; Check for mod 30-286	      ;I070
 20209                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 20210                                  ;               jne     short ClrVDISKok			      ;I070
 20211                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 20212                                  ;								      ;I070
 20213                                  ;ClrVDISKok:							      ;I070
 20214                                  ;-----------------------------------------------------------	      ;I070
 20215                                  
 20216                                  	; 12/12/2022
 20217                                  	; ds = cs
 20218                                  
 20219 00000B28 06                      	push	es
 20220 00000B29 8CC8                    	mov	ax,cs
 20221 00000B2B 89C2                    	mov	dx,ax
 20222 00000B2D B10C                    	mov	cl,12
 20223 00000B2F D3EA                    	shr	dx,cl
 20224 00000B31 B104                    	mov	cl,4
 20225 00000B33 D3E0                    	shl	ax,cl
 20226 00000B35 05[080B]                	add	ax,ClrdVDISKHead
 20227 00000B38 80D200                  	adc	dl,0
 20228                                  
 20229                                  	;; 23/10/2022
 20230                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 20231                                  	;mov	[cs:src_desc+2],ax
 20232                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 20233                                  	;mov	[cs:src_desc+4],dl
 20234                                  	; 12/12/2022
 20235                                  	;mov	[src_desc+desc.lo_word],ax
 20236 00000B3B A3[EA0A]                	mov	[src_desc+2],ax
 20237                                  	;mov	[src_desc+desc.hi_byte],dl
 20238 00000B3E 8816[EC0A]              	mov	[src_desc+4],dl
 20239                                  
 20240 00000B42 B91000                  	mov	cx,16	; 16 words
 20241 00000B45 0E                      	push	cs
 20242 00000B46 07                      	pop	es
 20243 00000B47 BE[D80A]                	mov	si,bmove
 20244 00000B4A B487                    	mov	ah,87h
 20245 00000B4C CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 20246                                  			; CX = number of words to move 
 20247                                  			; ES:SI -> global descriptor table
 20248                                  			; Return: CF set on error, AH = status
 20249 00000B4E 07                      	pop	es
 20250 00000B4F C3                      	retn
 20251                                  
 20252                                  ; ----------------------------------------------------------------------
 20253                                  ;
 20254                                  ; procedure : SaveFreeHMAPtr
 20255                                  ;
 20256                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 20257                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 20258                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 20259                                  ;		the offset.
 20260                                  ;
 20261                                  ; Inputs : ES:DI - pointer to free HMA
 20262                                  ; Output : FreeHMAPtr in BIOS data segment updated
 20263                                  ;
 20264                                  ; ----------------------------------------------------------------------
 20265                                  
 20266                                  SaveFreeHMAPtr:
 20267                                  	; 04/09/2023
 20268 00000B50 1E                      	push	ds
 20269 00000B51 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20270 00000B54 8ED8                    	mov	ds,ax
 20271                                  	;
 20272 00000B56 8CC3                    	mov	bx,es
 20273 00000B58 B8FFFF                  	mov	ax,0FFFFh	   ; HMA segment
 20274                                  	; 04/09/2023
 20275 00000B5B A2[0D00]                	mov	[inHMA],al ; 0FFh
 20276                                  	;
 20277 00000B5E 29D8                    	sub	ax,bx
 20278 00000B60 83C70F                  	add	di,15		   ; para round
 20279 00000B63 83E7F0                  	and	di,0FFF0h
 20280 00000B66 B104                    	mov	cl,4
 20281 00000B68 D3E0                    	shl	ax,cl
 20282 00000B6A 29C7                    	sub	di,ax
 20283                                  	;
 20284                                  	; 04/09/2023
 20285                                  	;push	ds
 20286                                  	;;mov	ax,Bios_Data ; 0070h
 20287                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20288                                  	; 21/10/2022
 20289                                  	; 04/09/2023
 20290                                  	;mov	ax,DOSBIODATASEG ; 0070h
 20291                                  	;mov	ds,ax
 20292 00000B6C 893E[EB08]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 20293                                  	;mov	byte [inHMA],0FFh  ; (ds:0Dh)
 20294 00000B70 1F                      	pop	ds
 20295 00000B71 C3                      	retn
 20296                                  
 20297                                  ; ----------------------------------------------------------------------
 20298                                  ;
 20299                                  ; procedure : IsVDiskInstalled
 20300                                  ;
 20301                                  ;		Checks for the presence of VDISK header at 1MB boundary
 20302                                  ;		& INT 19 vector
 20303                                  ;
 20304                                  ; Inputs  : A20 flag should be ON
 20305                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 20306                                  ;
 20307                                  ; ----------------------------------------------------------------------
 20308                                  
 20309                                  IsVDiskInstalled:
 20310 00000B72 31C0                    	xor	ax,ax
 20311 00000B74 8ED8                    	mov	ds,ax
 20312 00000B76 8E1E4E00                	mov	ds,[19*4+2]
 20313                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 20314                                  	; 23/10/2022
 20315 00000B7A BE1200                  	mov	si,18
 20316                                  	;mov	cx,VLEN1 ; 5
 20317 00000B7D B90500                  	mov	cx,5
 20318 00000B80 0E                      	push	cs
 20319 00000B81 07                      	pop	es
 20320 00000B82 BF[3E0A]                	mov	di,VDiskSig1
 20321 00000B85 F3A6                    	rep	cmpsb
 20322 00000B87 740F                    	je	short ivdins_retn
 20323 00000B89 B8FFFF                  	mov	ax,0FFFFh
 20324 00000B8C 8ED8                    	mov	ds,ax
 20325                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 20326 00000B8E BE1300                  	mov	si,13h
 20327 00000B91 BF[630A]                	mov	di,VDiskSig2
 20328                                  	;;mov	cx,VLEN2  ; 5
 20329                                  	;mov	cx,5
 20330                                  	; 04/09/2023
 20331 00000B94 B105                    	mov	cl,5
 20332 00000B96 F3A6                    	rep	cmpsb
 20333                                  ivdins_retn: 
 20334 00000B98 C3                      	retn			; returns the Zero flag
 20335                                  
 20336                                  ; ----------------------------------------------------------------------
 20337                                  ;
 20338                                  ; procedure : CPMHack
 20339                                  ;
 20340                                  ;		Copies the code from 0:c0 into ffff:0d0h
 20341                                  ;		for CPM compatibility
 20342                                  ;
 20343                                  ; ----------------------------------------------------------------------
 20344                                  
 20345                                  	; 11/12/2022
 20346                                  CPMHack:
 20347 00000B99 1E                      	push	ds
 20348 00000B9A B9FFFF                  	mov	cx,0FFFFh
 20349 00000B9D 8EC1                    	mov	es,cx		; ES = FFFF
 20350                                  	;xor	cx,cx
 20351                                  	; 11/12/2022
 20352 00000B9F 41                      	inc	cx  ; cx = 0
 20353 00000BA0 8ED9                    	mov	ds,cx		; DS = 0
 20354 00000BA2 BEC000                  	mov	si,0C0h
 20355 00000BA5 BFD000                  	mov	di,0D0h
 20356                                  	;mov	cx,5
 20357 00000BA8 B105                    	mov	cl,5
 20358 00000BAA FC                      	cld
 20359 00000BAB F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 20360 00000BAD 1F                      	pop	ds
 20361 00000BAE C3                      	retn
 20362                                  
 20363                                  ; ----------------------------------------------------------------------
 20364                                  ;
 20365                                  ; procedure : off_to_para
 20366                                  ;
 20367                                  ; ----------------------------------------------------------------------
 20368                                  off_to_para:
 20369 00000BAF D1E8                    	shr	ax,1
 20370 00000BB1 D1E8                    	shr	ax,1
 20371 00000BB3 D1E8                    	shr	ax,1
 20372 00000BB5 D1E8                    	shr	ax,1
 20373 00000BB7 C3                      	retn
 20374                                  
 20375                                  ; ----------------------------------------------------------------------
 20376                                  ;**	TempCDS - Create (Temporary?) CDS
 20377                                  ;
 20378                                  ;	ENTRY	?? BUGBUG
 20379                                  ;		(DS) = SysInitSeg
 20380                                  ;	EXIT	?? BUGBUG
 20381                                  ;	USES	?? BUGBUG
 20382                                  ; ----------------------------------------------------------------------
 20383                                  
 20384                                  	; 30/12/2023
 20385                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20386                                  TempCDS:
 20387 00000BB8 C43E[6B02]              	les	di,[DOSINFO]
 20388 00000BBC 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 20389                                  	;mov	cl,[es:di+20h]
 20390 00000BC0 30ED                    	xor	ch,ch			; (cx) = # of block devices
 20391                                  
 20392 00000BC2 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 20393                                  	;mov	[es:di+21h],cl	
 20394                                  
 20395                                  	;mov	al,cl
 20396                                  	;mov	ah,curdirlen ; curdir_list.size ; 88
 20397                                  	;;mov	ah,88
 20398                                  	;mul	ah			; (ax) = byte size for those CDSs
 20399                                  	; 30/12/2023
 20400 00000BC6 B058                    	mov	al,curdirlen ; curdir_list.size ; 88
 20401                                  	;mov	al,88
 20402 00000BC8 F6E1                    	mul	cl			; (ax) = byte size for those CDSs
 20403                                  
 20404 00000BCA E8C404                  	call	ParaRound		; (ax) = paragraph size for CDSs
 20405 00000BCD 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 20406                                  
 20407                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 20408                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 20409                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 20410                                  ;		   variable which has the top of free memory for
 20411                                  ;		   device driver loads, etc.
 20412                                  
 20413 00000BD1 29C6                    	sub	si,ax
 20414                                  
 20415                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 20416                                  ;		that automatically updates alloclim every time we
 20417                                  ;		set up some new CDSs. Instead, I've added code
 20418                                  ;		which pre-allocates space for 26 CDSs. This
 20419                                  ;	        way we've got room for worst case CDSs before
 20420                                  ;		we place MagicDrv.sys
 20421                                  ;
 20422                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 20423                                  
 20424                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20425                                  	; (SYSINIT:0C52h)
 20426 00000BD3 8936[A302]              	mov	[ALLOCLIM],si
 20427                                  
 20428 00000BD7 26897518                	mov	[es:di+SYSI_CDS+2],si
 20429                                  	;mov	[es:di+18h],si
 20430 00000BDB 89F0                    	mov	ax,si
 20431 00000BDD 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 20432                                  	;mov	[word es:di+16h],0
 20433                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 20434 00000BE3 26C535                  	lds	si,[es:di]
 20435 00000BE6 8EC0                    	mov	es,ax
 20436 00000BE8 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 20437                                  
 20438                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 20439                                  ;	info from the corresponding DPB.
 20440                                  ;
 20441                                  ;	(cx) = count of CDSs left to process
 20442                                  ;	(es:di) = address of next CDS
 20443                                  
 20444                                  fooset:
 20445                                  	; 23/10/2022
 20446 00000BEA 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 20447 00000BEE AB                      	stosw				; setup the root as the curdir
 20448                                  
 20449                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 20450                                  
 20451                                  ;	(ds:si) = address of DPB
 20452                                  ;		 (si) = -1 if no drive
 20453                                  
 20454 00000BEF 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 20455 00000BF3 AB                      	stosw
 20456 00000BF4 2EFE06[A502]            	inc	byte [cs:DirStrng]
 20457 00000BF9 31C0                    	xor	ax,ax
 20458 00000BFB 51                      	push	cx
 20459                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 20460 00000BFC B93F00                  	mov	cx,63	; 23/10/2022
 20461 00000BFF F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 20462                                  
 20463                                  ;	should handle the system that does not have any floppies.
 20464                                  ;	in this case,we are going to pretended there are two dummy floppies
 20465                                  ;	in the system. still they have dpb and cds,but we are going to
 20466                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 20467                                  ;	"invalid drive specification" message when the user try to
 20468                                  ;	access them.
 20469                                  ;
 20470                                  ;	(ax) = 0
 20471                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20472                                  ;	(ds:si) = Next DPB (-1 if none)
 20473                                  
 20474 00000C01 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 20475 00000C04 7412                    	je	short fooset_zero	; don't have any physical drive.
 20476                                  
 20477                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 20478                                  ;	if we are faking floppy drives then see if this cds being initialised
 20479                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 20480                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 20481                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 20482                                  ;	for dpb offsets look at inc\dpb.inc.
 20483                                  
 20484                                  	; 04/09/2023
 20485 00000C06 41                      	inc	cx  ; cx = 1
 20486                                  
 20487 00000C07 2E380E[8902]            	cmp	[cs:fake_floppy_drv],cl ; 1 ; 04/09/2023
 20488                                  	;cmp	byte [cs:fake_floppy_drv],1
 20489 00000C0C 7510                    	jne	short normcds 		; machine has floppy drives
 20490                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 20491                                  	;cmp	byte [si],1
 20492 00000C0E 380C                    	cmp	[si],cl ; 1 ; 04/09/2023
 20493 00000C10 770C                    	ja	short normcds
 20494 00000C12 B103                    	mov	cl,3			; the next dbp pointer
 20495                                  					; AX should be zero here
 20496 00000C14 F3AB                    	rep	stosw
 20497                                  	; 30/12/2023
 20498                                  	;pop	cx
 20499 00000C16 EB15                    	jmp	short get_next_dpb
 20500                                  
 20501                                  ;	(ax) = 0
 20502                                  
 20503                                  fooset_zero:
 20504 00000C18 B103                    	mov	cl,3
 20505 00000C1A F3AB                    	rep	stosw
 20506                                  	; 30/12/2023
 20507                                  	;pop	cx
 20508 00000C1C EB12                    	jmp	short fincds
 20509                                  
 20510                                  ;*	We have a "normal" DPB and thus a normal CDS.
 20511                                  ;
 20512                                  ;	(ax) = 0
 20513                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 20514                                  ;	(ds:si) = Next DPB (-1 if none)
 20515                                  
 20516                                  normcds:
 20517                                  	; 30/12/2023
 20518                                  	;pop	cx
 20519                                  
 20520                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 20521                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 20522                                  ;	this media is a non-fat based one.
 20523                                  
 20524                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 20525                                  	; 23/10/2022
 20526                                  	;cmp	byte [si+8],0
 20527                                  	; 04/09/2023 (ax=0)
 20528 00000C1E 384408                  	cmp	[si+8],al ; 0
 20529 00000C21 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 20530 00000C23 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 20531                                  	;mov	ax,4000h
 20532                                  setnormcds:
 20533 00000C26 AB                      	stosw				; curdir_flags
 20534 00000C27 89F0                    	mov	ax,si
 20535 00000C29 AB                      	stosw				; curdir_devptr
 20536 00000C2A 8CD8                    	mov	ax,ds
 20537 00000C2C AB                      	stosw
 20538                                  
 20539                                  get_next_dpb:				; entry point for fake_fooset_zero
 20540                                  	; 23/10/2022
 20541 00000C2D C57419                  	lds	si,[si+19h]
 20542                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20543                                  fincds:
 20544                                  	; 30/12/2023
 20545 00000C30 59                      	pop	cx
 20546                                  	;
 20547 00000C31 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 20548 00000C34 AB                      	stosw				; curdir_id
 20549 00000C35 AB                      	stosw				; curdir_id
 20550 00000C36 AB                      	stosw				; curdir_user_word
 20551 00000C37 B80200                  	mov	ax,2
 20552 00000C3A AB                      	stosw				; curdir_end
 20553 00000C3B B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 20554 00000C3D AA                      	stosb
 20555 00000C3E AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 20556 00000C3F AB                      	stosw
 20557 00000C40 AB                      	stosw
 20558                                  
 20559 00000C41 E2A7                    	loop	fooset
 20560                                  	
 20561 00000C43 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 20562                                  	
 20563 00000C49 C3                      	retn
 20564                                  
 20565                                  ; ----------------------------------------------------------------------
 20566                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 20567                                  ;
 20568                                  ;	entry:
 20569                                  ;	   al == ASCII CAPS drive letter
 20570                                  ;
 20571                                  ;	exit:
 20572                                  ;	   ds:si -> DPB, or si = -1 if not found
 20573                                  ; ----------------------------------------------------------------------
 20574                                  
 20575                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 20576                                  ;
 20577                                  ;get_dpb_for_drive_al:
 20578                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 20579                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 20580                                  ;	lds	si,[si]
 20581                                  ;	sub	al,'A'
 20582                                  ;
 20583                                  ;get_dpb_for_drive_1:
 20584                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 20585                                  ;	cmp	al,[si]
 20586                                  ;	je	short got_dpb_for_drive	;  done if so
 20587                                  ;
 20588                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 20589                                  ;	cmp	si,-1
 20590                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 20591                                  ;
 20592                                  ;got_dpb_for_drive:
 20593                                  ;	retn
 20594                                  
 20595                                  ;=======================================================================
 20596                                  
 20597                                  ;**	EndFile - Build DOS structures
 20598                                  ;
 20599                                  ; This procedure is called after the config.sys has been processed and
 20600                                  ; installable device drivers have been loaded (but before "install="
 20601                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 20602                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 20603                                  ; to allow for the safe EXECing of "install=" programs. All memory
 20604                                  ; above these structures is deallocated back to DOS.
 20605                                  ;
 20606                                  ;	ENTRY	?? BUGBUG
 20607                                  ;	EXIT	?? BUGBUG
 20608                                  ;	USES	?? BUGBUG
 20609                                  
 20610                                  ;=======================================================================
 20611                                  ; allocate files
 20612                                  ; ----------------------------------------------------------------------
 20613                                  
 20614                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20615                                  	; (SYSINIT:0CCDh)
 20616                                  
 20617                                  endfile:
 20618                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 20619                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 20620                                  ; to confbot.
 20621                                  
 20622                                  ;	if this procedure has been called to take care of install= command,
 20623                                  ;	   then we have to save es,si registers.
 20624                                  
 20625                                  	; 11/12/2022
 20626                                  	; ds = cs
 20627                                  
 20628                                  	; 23/10/2022
 20629                                  	; 31/03/2019
 20630 00000C4A 1E                      	push	ds
 20631                                  
 20632                                  	;;mov	ax,Bios_Data ; 0070h
 20633                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 20634                                  	; 21/10/2022
 20635 00000C4B B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20636 00000C4E 8ED8                    	mov	ds,ax
 20637                                  
 20638                                  	;cmp	word [052Fh],0
 20639 00000C50 833E[2605]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 20640 00000C55 7505                    	jne	short multrk_flag_done
 20641                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20642                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 20643                                  	; 12/12/2022
 20644 00000C57 800E[2605]80            	or	byte [multrk_flag],multrk_on ; 80h
 20645                                  multrk_flag_done:
 20646                                  	; 23/10/2022
 20647                                  	; 31/03/2019
 20648 00000C5C 1F                      	pop	ds
 20649                                  
 20650                                  	; 11/12/2022
 20651                                  	; ds = cs
 20652 00000C5D A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 20653 00000C60 A3[A302]                	mov	[ALLOCLIM],ax
 20654                                  	; 23/10/2022
 20655                                  	;mov	ax, [cs:top_of_cdss]
 20656                                  	;mov	[cs:ALLOCLIM], ax 
 20657                                  
 20658                                  	; 11/12/2022
 20659                                  	; ds = cs
 20660                                  	;push	cs
 20661                                  	;pop	ds
 20662                                  	
 20663                                  	;mov	ax,[CONFBOT]
 20664                                  	;mov	[ALLOCLIM],ax
 20665                                  
 20666 00000C63 E89923                  	call	round
 20667                                  	; 11/12/2022
 20668                                  	; ds = cs
 20669 00000C66 A0[9D02]                	mov	al,[FILES]
 20670                                  	; 23/10/2022
 20671                                  	;mov	al,[cs:FILES]
 20672 00000C69 2C05                    	sub	al,5
 20673 00000C6B 764B                    	jbe	short dofcbs
 20674                                  
 20675 00000C6D 50                      	push	ax
 20676                                  	;mov	al,devmark_files ; 'F'
 20677 00000C6E B046                    	mov	al,'F'
 20678 00000C70 E86807                  	call	setdevmark		; set devmark for sfts (files)
 20679 00000C73 58                      	pop	ax
 20680 00000C74 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20681                                  					;  it does sign extend.
 20682                                  	; 11/12/2022
 20683                                  	; ds = cs
 20684 00000C76 8B1E[DE03]              	mov	bx,[memlo]
 20685 00000C7A 8B16[E003]              	mov	dx,[memhi]
 20686 00000C7E C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20687                                  	; 23/10/2022
 20688                                  	;mov	bx,[cs:memlo]
 20689                                  	;mov	dx,[cs:memhi]
 20690                                  	;lds	di,[cs:DOSINFO]		
 20691                                  
 20692                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 20693 00000C82 C57D04                  	lds	di,[di+4]
 20694                                  
 20695                                  	;mov	[di+SF.SFLink],bx
 20696 00000C85 891D                    	mov	[di],bx
 20697 00000C87 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 20698                                  
 20699 00000C8A 0E                      	push	cs
 20700 00000C8B 1F                      	pop	ds
 20701                                  
 20702                                  	; 11/12/2022
 20703                                  	; ds = cs
 20704 00000C8C C43E[DE03]              	les	di,[memlo]		;point to new sft
 20705                                  	; 23/10/2022
 20706                                  	;les	di,[cs:memlo]
 20707                                  
 20708                                  	;mov	word [es:di+SF.SFLink],-1
 20709 00000C90 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 20710                                  	;mov	[es:di+SF.SFCount],ax
 20711 00000C95 26894504                	mov	[es:di+4],ax
 20712                                  	; 09/04/2024
 20713 00000C99 B33B                    	mov	bl,SF_ENTRY.size ; 59
 20714                                  	;mov	bl,59
 20715 00000C9B F6E3                    	mul	bl			;ax = number of bytes to clear
 20716 00000C9D 89C1                    	mov	cx,ax
 20717                                  	; 11/12/2022
 20718                                  	; ds = cs
 20719 00000C9F 0106[DE03]              	add	[memlo],ax		;allocate memory
 20720                                  	; 23/10/2022
 20721                                  	;add	[cs:memlo],ax
 20722 00000CA3 B80600                  	mov	ax,6
 20723                                  	; 11/12/2022
 20724 00000CA6 0106[DE03]              	add	[memlo],ax		;remember the header too
 20725                                  	;add	[cs:memlo],ax
 20726                                  	; 11/12/2022
 20727 00000CAA 800E[FA13]02            	or	byte [setdevmarkflag],for_devmark ; 2
 20728                                  	; 23/10/2022
 20729                                  	;or	byte [cs:setdevmarkflag],2
 20730 00000CAF E84D23                  	call	round			; check for mem error before the stosb
 20731 00000CB2 01C7                    	add	di,ax
 20732 00000CB4 31C0                    	xor	ax,ax
 20733 00000CB6 F3AA                    	rep	stosb			;clean out the stuff
 20734                                  
 20735                                  ; allocate fcbs
 20736                                  ; ----------------------------------------------------------------------
 20737                                  
 20738                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20739                                  	; (SYSINIT:0D48h)
 20740                                  dofcbs:
 20741                                  	; 11/12/2022
 20742                                  	; ds = cs
 20743                                  	;push	cs
 20744                                  	;pop	ds
 20745 00000CB8 E84423                  	call	round
 20746                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 20747 00000CBB B058                    	mov	al,'X'
 20748 00000CBD E81B07                  	call	setdevmark
 20749                                  	; 11/12/2022
 20750                                  	; ds = cs
 20751 00000CC0 A0[9E02]                	mov	al,[FCBS]
 20752                                  	;mov	al,[cs:FCBS]
 20753 00000CC3 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 20754                                  					;  it does sign extend.
 20755                                  	; 11/12/2022
 20756 00000CC5 8B1E[DE03]              	mov	bx,[memlo]
 20757 00000CC9 8B16[E003]              	mov	dx,[memhi]
 20758 00000CCD C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 20759                                  	; 23/10/2022
 20760                                  	;mov	bx,[cs:memlo]
 20761                                  	;mov	dx,[cs:memhi]
 20762                                  	;lds	di,[cs:DOSINFO]
 20763                                  
 20764                                  	;mov	[di+SYSI_FCB],bx
 20765                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 20766                                  	; 23/10/2022
 20767 00000CD1 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 20768 00000CD4 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 20769                                  
 20770 00000CD7 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 20771 00000CDC 30FF                    	xor	bh,bh
 20772                                  	;mov	[di+SYSI_KEEP],bx
 20773 00000CDE 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 20774                                  
 20775 00000CE1 0E                      	push	cs
 20776 00000CE2 1F                      	pop	ds
 20777                                  	
 20778 00000CE3 C43E[DE03]              	les	di,[memlo]		;point to new table
 20779                                  	;mov	word [es:di+SF.SFLink],-1
 20780 00000CE7 26C705FFFF              	mov	word [es:di],-1
 20781                                  	;mov	[es:di+SF.SFCount],ax
 20782                                  	; 02/11/2022
 20783 00000CEC 26894504                	mov	[es:di+4],ax
 20784 00000CF0 B33B                    	mov	bl,SF_ENTRY.size ; 59
 20785 00000CF2 89C1                    	mov	cx,ax
 20786 00000CF4 F6E3                    	mul	bl			;ax = number of bytes to clear
 20787 00000CF6 0106[DE03]              	add	[memlo],ax		;allocate memory
 20788                                  	;mov	ax,6
 20789 00000CFA B80600                  	mov	ax,SF.size-2 ; 6
 20790 00000CFD 0106[DE03]              	add	[memlo],ax		;remember the header too
 20791                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20792 00000D01 800E[FA13]02            	or	byte [setdevmarkflag],2
 20793 00000D06 E8F622                  	call	round			; check for mem error before the stosb
 20794 00000D09 01C7                    	add	di,ax			;skip over header
 20795 00000D0B B041                    	mov	al,'A'
 20796                                  fillloop:
 20797 00000D0D 51                      	push	cx			; save count
 20798 00000D0E B93B00                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 20799 00000D11 FC                      	cld
 20800 00000D12 F3AA                    	rep	stosb			; filled
 20801                                  
 20802                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 20803                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]
 20804                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 20805                                  
 20806                                  	; 18/12/2022
 20807                                  	;cx = 0
 20808 00000D14 26894DC5                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 20809 00000D18 26894DDA                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]
 20810 00000D1C 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 20811                                  	
 20812                                  	; 23/10/2022	
 20813                                  	;mov     word [es:di-3Bh],0
 20814                                  	;mov     word [es:di-26h],0
 20815                                  	;mov     word [es:di-24h],0
 20816                                  
 20817 00000D20 59                      	pop	cx
 20818 00000D21 E2EA                    	loop	fillloop
 20819                                  
 20820                                  ; allocate buffers
 20821                                  ; ----------------------------------------------------------------------
 20822                                  
 20823                                  ; search through the list of media supported and allocate 3 buffers if the
 20824                                  ; capacity of the drive is > 360kb
 20825                                  
 20826                                  	; 18/12/2022
 20827                                  	; cx = 0
 20828 00000D23 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 20829 00000D28 7403                    	je	short dodefaultbuff
 20830 00000D2A E98000                  	jmp	dobuff			; the user entered the buffers=.
 20831                                  
 20832                                  dodefaultbuff:
 20833                                  	; 18/12/2022
 20834 00000D2D 890E[9902]              	mov	[h_buffers],cx ; 0
 20835                                  	;inc	cx
 20836                                  	;inc	cx
 20837                                  	;mov	[buffers],cx ; 2
 20838                                  	; 10/04/2024
 20839 00000D31 C706[9702]0200          	mov	word [buffers],2
 20840                                  	
 20841                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 20842                                  	;mov	word [buffers],2	; default to 2 buffers
 20843                                  
 20844                                  	; 23/10/2022
 20845                                  	; 04/09/2023
 20846                                  	;push	ax
 20847                                  	;push	ds ; 26/03/2019
 20848                                  
 20849                                  	; 04/09/2023
 20850                                  	; ds = cs
 20851 00000D37 C42E[6B02]              	les	bp,[DOSINFO]		; search through the dpb's
 20852                                  	;les	bp,[cs:DOSINFO]
 20853                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 20854                                  	; 11/12/2022
 20855 00000D3B 26C46E00                	les	bp,[es:bp]
 20856                                  	; 23/10/2022
 20857                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 20858                                  
 20859                                  	; 04/09/2023
 20860                                  	; ds = cs
 20861                                  	;push	cs
 20862                                  	;pop	ds
 20863                                  ;SYSINIT:0DE2h:
 20864                                  nextdpb:				; test if the drive supports removeable media
 20865                                  	;mov	bl,[es:bp+DPB.drive]
 20866                                  	; 11/12/2022
 20867 00000D3F 268A5E00                	mov	bl,[es:bp]
 20868                                  	; 23/10/2022
 20869                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20870                                  
 20871                                  	;inc	bl
 20872                                  	; 18/12/2022
 20873 00000D43 43                      	inc	bx
 20874                                  
 20875                                  	;mov	ax,(IOCTL<<8)|8
 20876 00000D44 B80844                  	mov	ax,4408h
 20877 00000D47 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20878                                  
 20879                                  ; ignore fixed disks
 20880                                  
 20881 00000D49 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 20882 00000D4B 7534                    	jnz	short nosetbuf
 20883                                  
 20884                                  ; get parameters of drive
 20885                                  
 20886 00000D4D 31DB                    	xor	bx,bx
 20887                                  	;;mov	bl,[es:bp+DPB.drive]
 20888                                  	; 11/12/2022
 20889 00000D4F 268A5E00                	mov	bl,[es:bp]
 20890                                  	; 23/10/2022
 20891                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 20892                                  	
 20893                                  	;inc	bl
 20894                                  	; 18/12/2022
 20895 00000D53 43                      	inc	bx
 20896                                  
 20897 00000D54 BA[5C34]                	mov	dx,deviceparameters
 20898                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 20899 00000D57 B80D44                  	mov	ax,440Dh
 20900                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 20901 00000D5A B96008                  	mov	cx,860h
 20902 00000D5D CD21                    	int	21h		; DOS - 2+ - IOCTL -
 20903 00000D5F 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 20904                                  					; generic ioctl
 20905                                  ; determine capacity of drive
 20906                                  ; media capacity = #sectors * bytes/sector
 20907                                  
 20908                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 20909                                  	; 23/10/2022
 20910 00000D61 8B1E[6B34]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 20911                                  	
 20912                                  ; to keep the magnitude of the media capacity within a word,
 20913                                  ; scale the sector size
 20914                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 20915                                  
 20916                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 20917                                  	; 23/10/2022
 20918 00000D65 A1[6334]                	mov	ax, [deviceparameters+7] ; bytes per sector
 20919 00000D68 31D2                    	xor	dx,dx
 20920 00000D6A B90002                  	mov	cx,512
 20921 00000D6D F7F1                    	div	cx			; scale sector size in factor of
 20922                                  					; 512 bytes
 20923 00000D6F F7E3                    	mul	bx			; ax = #sectors * size factor
 20924 00000D71 09D2                    	or	dx,dx			; just in case of large floppies
 20925 00000D73 7505                    	jnz	short setbuf
 20926 00000D75 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 20927 00000D78 7607                    	jbe	short nosetbuf
 20928                                  setbuf:
 20929                                  	; 18/12/2022
 20930                                  	; word [buffers] = 2
 20931 00000D7A C606[9702]03            	mov	byte [buffers],3
 20932                                  	;mov	word [buffers],3
 20933 00000D7F EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 20934                                  					; for default buffer count
 20935                                  nosetbuf:
 20936                                  	; 23/10/2022
 20937                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 20938 00000D81 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 20939 00000D86 7406                    	je	short chk_memsize_for_buffers
 20940                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 20941 00000D88 26C46E19                	les	bp,[es:bp+19h]
 20942 00000D8C EBB1                    	jmp	short nextdpb
 20943                                  
 20944                                  ;from dos 3.3,the default number of buffers will be changed according to the
 20945                                  ;memory size too.
 20946                                  ; default buffers = 2
 20947                                  ; if diskette media > 360 kb,then default buffers = 3
 20948                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 20949                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 20950                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 20951                                  
 20952                                  chk_memsize_for_buffers:
 20953                                  	; 18/12/2022
 20954                                  	;cmp	word [MEMORY_SIZE],2000h
 20955                                  	;jbe	short bufset
 20956                                  	;mov	word [buffers],5
 20957                                  	;cmp	word [MEMORY_SIZE],4000h
 20958                                  	;jbe	short bufset
 20959                                  	;mov	word [buffers],10
 20960                                  	;cmp	word [MEMORY_SIZE],8000h
 20961                                  	;jbe	short bufset
 20962                                  	;mov	word [buffers],15
 20963                                  
 20964                                  	; 18/12/2022
 20965                                  	; word [buffers] = 3 or 2
 20966 00000D8E BB[9702]                	mov	bx,buffers
 20967 00000D91 A1[9202]                	mov	ax,[MEMORY_SIZE]
 20968 00000D94 48                      	dec	ax	; [MEMORY_SIZE] - 1
 20969                                  
 20970 00000D95 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 20971 00000D98 7213                    	jb	short bufset
 20972 00000D9A C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 20973 00000D9D 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 20974 00000DA0 730B                    	jnb	short bufset
 20975 00000DA2 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 20976 00000DA5 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 20977 00000DA8 7303                    	jnb	short bufset
 20978 00000DAA C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 20979                                  bufset:
 20980                                  	; 23/10/2022
 20981                                  	; 26/03/2019
 20982                                  	; 04/09/2023
 20983                                  	;pop	ds
 20984                                  	;pop	ax
 20985                                  
 20986                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20987                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 20988                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 20989                                  
 20990                                  ; 26/03/2019
 20991                                  
 20992                                  ;*******************************************************************************
 20993                                  ;									       *
 20994                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 20995                                  ; input :								       *
 20996                                  ;    memhi:memlo - start of the next available memory			       *
 20997                                  ;    buffers = number of buffers					       *
 20998                                  ;    h_buffers = number of secondary buffers				       *
 20999                                  ;									       *
 21000                                  ; output:								       *
 21001                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 21002                                  ;	buffinfo set.							       *
 21003                                  ;	bufferqueue set.						       *
 21004                                  ;									       *
 21005                                  ; subroutines to be called:						       *
 21006                                  ;									       *
 21007                                  ;*******************************************************************************
 21008                                  
 21009                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21010                                  	; (SYSINIT:0E60h)
 21011                                  dobuff:
 21012                                  	; ds = cs ; 31/03/2019
 21013                                  	; 23/10/2022
 21014                                  	;lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 21015                                  	; 04/09/2023
 21016 00000DAD A1[9702]                	mov	ax,[buffers] ; 31/03/2019
 21017 00000DB0 8B0E[9902]              	mov	cx,[h_buffers] ; *
 21018 00000DB4 C51E[6B02]              	lds	bx,[DOSINFO]
 21019                                  	;mov	ax,[cs:buffers]	; set sysi_buffers
 21020                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 21021 00000DB8 89473F                  	mov	[bx+3Fh],ax
 21022                                  	; 04/09/2023
 21023                                  	;mov	ax,[cs:h_buffers]
 21024                                  	;;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 21025                                  	;mov	[bx+41h],ax
 21026                                  	; 04/09/2023
 21027 00000DBB 894F41                  	mov	[bx+41h],cx ; *
 21028 00000DBE C55F12                  	lds	bx,[bx+12h]
 21029                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 21030 00000DC1 E83B22                  	call	round		; get [memhi]:[memlo]
 21031                                  	;mov	al,devmark_buf	; ='B'
 21032 00000DC4 B042                    	mov	al,'B'	
 21033 00000DC6 E81206                  	call	setdevmark
 21034                                  
 21035                                  ;allocate buffers
 21036                                  
 21037 00000DC9 1E                      	push	ds			; save buffer info. ptr.
 21038 00000DCA 53                      	push	bx
 21039                                  
 21040 00000DCB E85003                  	call	set_buffer
 21041                                  
 21042 00000DCE 5B                      	pop	bx
 21043 00000DCF 1F                      	pop	ds
 21044                                  
 21045                                  ;now set the secondary buffer if specified.
 21046                                  
 21047 00000DD0 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 21048 00000DD6 742D                    	je	short xif16
 21049 00000DD8 E82422                  	call	round
 21050                                  	; 23/10/2022
 21051 00000DDB 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 21052                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 21053 00000DE0 894F06                  	mov	[bx+6],cx
 21054 00000DE3 2E8B0E[E003]            	mov	cx,[cs:memhi]
 21055                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 21056 00000DE8 894F08                  	mov	[bx+8],cx
 21057 00000DEB 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 21058                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 21059 00000DF0 894F0A                  	mov	[bx+10],cx
 21060 00000DF3 B80002                  	mov	ax,512			; 512 byte
 21061 00000DF6 F7E1                    	mul	cx
 21062 00000DF8 2EA3[DE03]              	mov	[cs:memlo],ax
 21063                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21064 00000DFC 2E800E[FA13]02          	or	byte [cs:setdevmarkflag],2
 21065 00000E02 E8FA21                  	call	round
 21066                                  xif16:
 21067                                  
 21068                                  ; ----------------------------------------------------------------------
 21069                                  ; allocate cdss
 21070                                  ; ----------------------------------------------------------------------
 21071                                  
 21072                                  buf1:
 21073 00000E05 E8F721                  	call	round
 21074                                  
 21075 00000E08 50                      	push	ax
 21076                                  	; 23/10/2022
 21077                                  	;mov	ax,devmark_cds		;='L'
 21078 00000E09 B84C00                  	mov	ax, 'L'
 21079 00000E0C E8CC05                  	call	setdevmark
 21080 00000E0F 58                      	pop	ax
 21081                                  
 21082 00000E10 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 21083                                  	;mov	cl,[es:di+SYSI_NUMIO]
 21084 00000E15 268A4D20                	mov	cl,[es:di+20h]
 21085 00000E19 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 21086 00000E1E 7305                    	jae	short gotncds 		; user setting must be at least numio
 21087 00000E20 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 21088                                  gotncds:
 21089 00000E25 30ED                    	xor	ch,ch
 21090                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 21091 00000E27 26884D21                	mov	[es:di+21h],cl
 21092 00000E2B 2EA1[E003]              	mov	ax,[cs:memhi]
 21093                                  	;mov	[es:di+SYSI_CDS+2],ax
 21094 00000E2F 26894518                	mov	[es:di+18h],ax
 21095 00000E33 2EA1[DE03]              	mov	ax,[cs:memlo]
 21096                                  	;mov	[es:di+SYSI_CDS],ax
 21097 00000E37 26894516                	mov	[es:di+16h],ax
 21098 00000E3B 88C8                    	mov	al,cl
 21099                                  	;mov	ah,curdirlen ; curdir_list.size
 21100 00000E3D B458                    	mov	ah,88
 21101 00000E3F F6E4                    	mul	ah
 21102 00000E41 E84D02                  	call	ParaRound
 21103 00000E44 2E0106[E003]            	add	[cs:memhi],ax
 21104                                  
 21105                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21106 00000E49 2E800E[FA13]02          	or	byte [cs:setdevmarkflag],2
 21107 00000E4F E8AD21                  	call	round			; check for mem error before initializing
 21108                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 21109 00000E52 26C535                  	lds	si,[es:di]
 21110                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 21111 00000E55 26C47D16                	les	di,[es:di+16h]
 21112 00000E59 E88EFD                  	call	fooset
 21113                                  
 21114                                  ; ----------------------------------------------------------------------
 21115                                  ; allocate space for internal stack
 21116                                  ; ----------------------------------------------------------------------
 21117                                  
 21118 00000E5C 0E                      	push	cs
 21119 00000E5D 1F                      	pop	ds
 21120                                  
 21121                                  ;	if the user did not entered stacks= command, as a default, do not install
 21122                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 21123                                  ;	otherwise,install it to the user specified value or to the default
 21124                                  ;	value of 9,128 for other systems.
 21125                                  
 21126 00000E5E 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 21127 00000E63 740E                    	je	short doinstallstack	; then install as specified by the user
 21128 00000E65 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 21129 00000E6A 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 21130 00000E6C 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 21131 00000E71 736D                    	jae	short skipstack
 21132                                  doinstallstack:
 21133 00000E73 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 21134 00000E76 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 21135 00000E78 7466                    	jz	short skipstack		; don't install stack.
 21136                                  
 21137                                  ;	dynamic relocation of stack code.
 21138                                  
 21139 00000E7A E88221                  	call	round			;[memhi] = seg. for stack code
 21140                                  					;[memlo] = 0
 21141                                  
 21142                                  ; set devmark block into memory for mem command
 21143                                  ; devmark_id = 's' for stack
 21144                                  
 21145                                  	;mov	al,devmark_stk	;='S'
 21146                                  	; 23/10/2022
 21147 00000E7D B053                    	mov	al,'S'
 21148 00000E7F E85905                  	call	setdevmark
 21149                                  
 21150 00000E82 A1[E003]                	mov	ax,[memhi]
 21151 00000E85 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 21152                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21153                                  	; 11/12/2022
 21154                                  	; ds = cs
 21155                                  	;push	cs
 21156                                  	;pop	ds
 21157 00000E87 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 21158 00000E89 31FF                    	xor	di,di
 21159 00000E8B B9[6702]                	mov	cx,endstackcode
 21160 00000E8E 890E[DE03]              	mov	[memlo],cx
 21161 00000E92 E86A21                  	call	round		;have enough space for relocation?
 21162 00000E95 F3A4                    	rep	movsb
 21163                                  
 21164 00000E97 1E                      	push	ds		; stick the location of the NextStack entry
 21165                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 21166                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21167                                  	; 21/10/2022
 21168 00000E98 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21169 00000E9B 8ED8                    	mov	ds,ax
 21170 00000E9D C706[B508][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 21171 00000EA3 8C06[B708]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 21172                                  
 21173 00000EA7 2EA1[DE03]              	mov	ax,[cs:memlo]
 21174 00000EAB 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 21175 00000EAF A3[BB08]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 21176 00000EB2 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 21177 00000EB6 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 21178 00000EBA A3[BD08]                	mov	[IT_StackLoc+2],ax
 21179                                  
 21180                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 21181                                  
 21182                                  	;mov	ax,entrysize ; mov ax,8
 21183                                  	; 23/10/2022
 21184 00000EBD B80800                  	mov	ax,8
 21185 00000EC0 2E0306[8C02]            	add	ax,[cs:stack_size]
 21186 00000EC5 2EF726[8A02]            	mul	word [cs:stack_count]
 21187                                  
 21188 00000ECA A3[BF08]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 21189                                  
 21190 00000ECD 1F                      	pop	ds		; no more need to access Instance Table
 21191                                  
 21192 00000ECE E8C001                  	call	ParaRound	; convert size to paragraphs
 21193                                  	
 21194                                  	; 11/12/2022
 21195                                  	; ds = cs
 21196                                  	;add	[cs:memhi],ax
 21197 00000ED1 0106[E003]              	add	[memhi],ax
 21198                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21199                                  	;or	byte [cs:setdevmarkflag],2
 21200 00000ED5 800E[FA13]02            	or	byte [setdevmarkflag],2
 21201                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 21202                                  				;to set the devmark_size for stack by round routine.
 21203 00000EDA E82221                  	call	round		; check for memory error before
 21204                                  				; continuing
 21205 00000EDD E8E502                  	call	stackinit	; initialize hardware stack. 
 21206                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 21207                                  skipstack:
 21208                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 21209                                  	; (SYSINIT:0F99h)
 21210                                  
 21211                                  	; 11/12/2022
 21212                                  	; ds = cs
 21213                                  	;push	cs
 21214                                  	;pop	ds
 21215                                  
 21216 00000EE0 A0[9D02]                	mov	al,[FILES]
 21217 00000EE3 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 21218                                  				;  it does sign extend.
 21219 00000EE5 89C1                    	mov	cx,ax
 21220 00000EE7 31DB                    	xor	bx,bx		;close standard input
 21221 00000EE9 B43E                    	mov	ah,3Eh ; CLOSE
 21222 00000EEB CD21                    	int	21h
 21223 00000EED BB0200                  	mov	bx,2
 21224                                  rcclloop:			;close everybody but standard output
 21225 00000EF0 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 21226 00000EF2 CD21                    	int	21h		; in case we can't get new one open.
 21227 00000EF4 43                      	inc	bx
 21228 00000EF5 E2F9                    	loop	rcclloop
 21229                                  
 21230 00000EF7 BA[E632]                	mov	dx,condev
 21231 00000EFA B002                    	mov	al,2
 21232 00000EFC B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 21233 00000EFE F9                      	stc			; set for possible int 24
 21234 00000EFF CD21                    	int	21h
 21235 00000F01 7305                    	jnc	short goaux
 21236 00000F03 E84323                  	call	badfil
 21237 00000F06 EB13                    	jmp	short goaux2
 21238                                  goaux:	
 21239 00000F08 50                      	push	ax
 21240 00000F09 BB0100                  	mov	bx,1		;close standard output
 21241 00000F0C B43E                    	mov	ah,3Eh ; CLOSE
 21242 00000F0E CD21                    	int	21h
 21243 00000F10 58                      	pop	ax
 21244                                  
 21245 00000F11 89C3                    	mov	bx,ax		;new device handle
 21246 00000F13 B445                    	mov	ah,45h ; XDUP
 21247 00000F15 CD21                    	int	21h		;dup to 1,stdout
 21248 00000F17 B445                    	mov	ah,45h ; XDUP
 21249 00000F19 CD21                    	int	21h		;dup to 2,stderr
 21250                                  goaux2: 
 21251 00000F1B BA[EA32]                	mov	dx,auxdev
 21252 00000F1E B002                    	mov	al,2		;read/write access
 21253 00000F20 E85723                  	call	open_dev
 21254                                  
 21255 00000F23 BA[EE32]                	mov	dx,prndev
 21256 00000F26 B001                    	mov	al,1		;write only
 21257 00000F28 E84F23                  	call	open_dev
 21258                                  
 21259                                  ;global rearm command for shared interrupt devices attached in the system;
 21260                                  ;shared interrupt attachment has some problem when it issues interrupt
 21261                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 21262                                  ;no further interrupts on that level will be presented until a global rearm
 21263                                  ;is issued. by the request of the system architecture group, msbio will
 21264                                  ;issue a global rearm after every device driver is loaded.
 21265                                  ;to issue a global rearm:	;for pc1,xt,palace
 21266                                  ;
 21267                                  ;			  out 02f2h,xx  ; interrupt level 2
 21268                                  ;			  out 02f3h,xx  ; interrupt level 3
 21269                                  ;			  out 02f4h,xx  ; interrupt level 4
 21270                                  ;			  out 02f5h,xx  ; interrupt level 5
 21271                                  ;			  out 02f6h,xx  ; interrupt level 6
 21272                                  ;			  out 02f7h,xx  ; interrupt level 7
 21273                                  ;
 21274                                  ;	for pc at,in addition to the above commands,
 21275                                  ;	need to handle the secondary interrupt handler
 21276                                  ;
 21277                                  ;			  out 06f2h,xx  ; interrupt level 10
 21278                                  ;			  out 06f3h,xx  ; interrupt level 11
 21279                                  ;			  out 06f4h,xx  ; interrupt level 12
 21280                                  ;			  out 06f6h,xx  ; interrupt level 14
 21281                                  ;			  out 06f7h,xx  ; interrupt level 15
 21282                                  ;
 21283                                  ;	for round-up machine
 21284                                  ;
 21285                                  ;			  none.
 21286                                  
 21287                                  ; where xx stands for any value.
 21288                                  ;
 21289                                  ; for your information,after naples level machine,the system service bios
 21290                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 21291                                  
 21292                                  	; 24/10/2022
 21293                                  
 21294 00000F2B 50                      	push	ax
 21295 00000F2C 53                      	push	bx
 21296 00000F2D 52                      	push	dx
 21297 00000F2E 06                      	push	es
 21298                                  
 21299 00000F2F B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 21300 00000F31 BAF202                  	mov	dx,2F2h 		;get starting address
 21301 00000F34 EE                      	out	dx,al			; out 02f2h,0ffh
 21302 00000F35 42                      	inc	dx
 21303 00000F36 EE                      	out	dx,al			; out 02f3h,0ffh
 21304 00000F37 42                      	inc	dx
 21305 00000F38 EE                      	out	dx,al			; out 02f4h,0ffh
 21306 00000F39 42                      	inc	dx
 21307 00000F3A EE                      	out	dx,al			; out 02f5h,0ffh
 21308 00000F3B 42                      	inc	dx
 21309 00000F3C EE                      	out	dx,al			; out 02f6h,0ffh
 21310 00000F3D 42                      	inc	dx
 21311 00000F3E EE                      	out	dx,al			; out 02f7h,0ffh
 21312                                  
 21313                                  ;sb secondary global rearm
 21314                                  
 21315 00000F3F B800F0                  	mov	ax,0F000h		;get machine type
 21316 00000F42 8EC0                    	mov	es,ax
 21317 00000F44 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 21318 00000F4A 740D                    	je	short startrearm	; *if at no need to check
 21319                                  
 21320 00000F4C B4C0                    	mov	ah,0C0h 		;get system configuration
 21321 00000F4E CD15                    	int	15h			; *
 21322 00000F50 7216                    	jc	short finishrearm	; *jmp if old rom
 21323                                  
 21324                                  ; test feature byte for secondary interrupt controller
 21325                                  
 21326 00000F52 26F6470540              	test	byte [es:bx+5],40h
 21327                                  	; 24/10/2022
 21328                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 21329 00000F57 740F                    	je	short finishrearm	;jmp if it is there
 21330                                  
 21331                                  startrearm:
 21332 00000F59 B0FF                    	mov	al,0FFh 		;write any pattern to port
 21333 00000F5B BAF206                  	mov	dx,6F2h 		;get starting address
 21334 00000F5E EE                      	out	dx,al			;out 06f2h,0ffh
 21335 00000F5F 42                      	inc	dx			;bump address
 21336 00000F60 EE                      	out	dx,al			;out 06f3h,0ffh
 21337 00000F61 42                      	inc	dx			;bump address
 21338 00000F62 EE                      	out	dx,al			;out 06f4h,0ffh
 21339 00000F63 42                      	inc	dx			;bump address
 21340 00000F64 42                      	inc	dx			;bump address
 21341 00000F65 EE                      	out	dx,al			;out 06f6h,0ffh
 21342 00000F66 42                      	inc	dx			;bump address
 21343 00000F67 EE                      	out	dx,al			;out 06f7h,0ffh
 21344                                  
 21345                                  finishrearm:
 21346 00000F68 07                      	pop	es
 21347 00000F69 5A                      	pop	dx
 21348 00000F6A 5B                      	pop	bx
 21349 00000F6B 58                      	pop	ax
 21350                                  
 21351                                  ;    global rearm end *******************
 21352                                  
 21353                                  ; ----------------------------------------------------------------------
 21354                                  ; allocate sysinit_base for install= command
 21355                                  ; ----------------------------------------------------------------------
 21356                                  ; sysinit_base allocation.
 21357                                  ;   check if endfile has been called to handle install= command.
 21358                                  
 21359                                  set_sysinit_base:
 21360                                  
 21361                                  ; ----------------------------------------------------------------------
 21362                                  ;sysinit_base will be established in the secure area of
 21363                                  ;lower memory when it handles the first install= command.
 21364                                  ;sysinit_base is the place where the actual exec function will be called and
 21365                                  ;will check sysinit module in high memory if it is damaged by the application
 21366                                  ;program.  if sysinit module has been broken,then "memory error..." message
 21367                                  ;is displayed by sysinit_base.
 21368                                  ; ----------------------------------------------------------------------
 21369                                  
 21370                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 21371                                  	; (SYSINIT:1028h)
 21372                                  
 21373                                  	; 11/12/2022
 21374                                  	; ds = cs
 21375 00000F6C 50                      	push	ax			; set devmark for mem command
 21376 00000F6D A1[E003]                	mov	ax,[memhi]
 21377 00000F70 2B06[E403]              	sub	ax,[area]
 21378 00000F74 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 21379                                  	;mov	al,devmark_inst ; 'T'
 21380 00000F77 B054                    	mov	al,'T'
 21381 00000F79 E85F04                  	call	setdevmark
 21382 00000F7C 58                      	pop	ax
 21383                                  
 21384 00000F7D 8B3E[E003]              	mov	di,[memhi]
 21385 00000F81 8EC7                    	mov	es,di
 21386 00000F83 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 21387 00000F87 31FF                    	xor	di,di
 21388 00000F89 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 21389 00000F8D BE[9D10]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 21390 00000F90 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 21391                                  	; 24/10/2022 
 21392                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 21393 00000F93 010E[DE03]              	add	[memlo],cx
 21394                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 21395                                  	; 11/12/2022
 21396                                  	; ds = cs
 21397                                  	;or	byte [cs:setdevmarkflag],2
 21398 00000F97 800E[FA13]02            	or	byte [setdevmarkflag],2
 21399                                  	;or	byte [setdevmarkflag],for_devmark
 21400 00000F9C E86020                  	call	round			; check mem error. also,readjust memhi for the next use.
 21401 00000F9F F3A4                    	rep	movsb			; reallocate it.
 21402                                  
 21403 00000FA1 C706[5203][7610]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 21404 00000FA7 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 21405                                  	;or	word [install_flag],has_installed ; set the flag.
 21406                                  	;or	byte [install_flag],has_installed ; 2
 21407                                  	; 11/12/2022
 21408 00000FAB 800E[4A03]02            	or	byte [install_flag],2
 21409                                  	; 24/10/2022
 21410                                  	;or	word [install_flag],2	
 21411                                  
 21412                                  ; ----------------------------------------------------------------------
 21413                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 21414                                  ; the top of the memory will be allocated for sysinit and config.sys if
 21415                                  ; have_install_cmd.
 21416                                  ; ----------------------------------------------------------------------
 21417                                  
 21418 00000FB0 E84C20                  	call	round
 21419 00000FB3 8B1E[E003]              	mov	bx,[memhi]
 21420 00000FB7 A1[E403]                	mov	ax,[area]
 21421 00000FBA A3[DA03]                	mov	[old_area],ax		; save [area]
 21422 00000FBD 8EC0                    	mov	es,ax			;calc what we needed
 21423 00000FBF 29C3                    	sub	bx,ax
 21424                                  	; 24/10/2022
 21425 00000FC1 B44A                    	mov	ah,4Ah ; SETBLOCK
 21426 00000FC3 CD21                    	int	21h			;give the rest back
 21427                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21428                                  		; ES = segment address of block to change
 21429                                  		; BX = new size in paragraphs
 21430 00000FC5 06                      	push	es
 21431 00000FC6 8CC0                    	mov	ax,es
 21432 00000FC8 48                      	dec	ax
 21433 00000FC9 8EC0                    	mov	es,ax			;point to arena
 21434                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 21435                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 21436                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 21437                                  	; 24/10/2022
 21438 00000FCB 26C70601000800          	mov	word [es:1],8		;set impossible owner
 21439 00000FD2 26C70608005344          	mov	word [es:8],'SD'	; System Data
 21440 00000FD9 07                      	pop	es
 21441                                  
 21442 00000FDA BBFFFF                  	mov	bx,0FFFFh
 21443 00000FDD B448                    	mov	ah,48h ; ALLOC
 21444 00000FDF CD21                    	int	21h
 21445 00000FE1 B448                    	mov	ah,48h ; ALLOC
 21446 00000FE3 CD21                    	int	21h			; allocate the rest of the memory
 21447                                  		; DOS - 2+ - ALLOCATE MEMORY
 21448                                  		; BX = number of 16-byte paragraphs desired
 21449 00000FE5 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 21450 00000FE8 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 21451                                  
 21452                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 21453                                  ;;;; allocated.
 21454                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 21455                                  ;;;; this time) to the top-of-the memory),here we are going to
 21456                                  ;;;; 1). "setblock" from memhi to confbot.
 21457                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 21458                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 21459                                  
 21460                                  ;memory allocation for sysinit,confbot module.
 21461                                  
 21462 00000FEE 8EC0                    	mov	es,ax
 21463                                  	;mov	bx,[CONFBOT]
 21464                                  	; 24/10/2022
 21465 00000FF0 8B1E[A102]              	mov	bx,[top_of_cdss]
 21466 00000FF4 29C3                    	sub	bx,ax			; confbot - memhi
 21467 00000FF6 4B                      	dec	bx			; make a room for the memory block id.
 21468 00000FF7 4B                      	dec	bx			; make sure!!!.
 21469 00000FF8 B44A                    	mov	ah,4Ah ; SETBLOCK
 21470 00000FFA CD21                    	int	21h			; this will free (confbot to top of memory)
 21471                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 21472                                  		; ES = segment address of block to change
 21473                                  		; BX = new size in paragraphs
 21474 00000FFC BBFFFF                  	mov	bx,0FFFFh
 21475 00000FFF B448                    	mov	ah,48h ; ALLOC
 21476 00001001 CD21                    	int	21h
 21477 00001003 B448                    	mov	ah,48h ; ALLOC
 21478 00001005 CD21                    	int	21h			; allocate (confbot to top of memory)
 21479                                  		; DOS - 2+ - ALLOCATE MEMORY
 21480                                  		; BX = number of 16-byte paragraphs desired
 21481 00001007 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 21482                                  					; need this to free this area for command.com.
 21483 0000100A 8E06[E003]              	mov	es,[memhi]
 21484 0000100E B449                    	mov	ah,49h			; free allocated memory.
 21485 00001010 CD21                    	int	21h			; free (memhi to confbot(=area))
 21486                                  		; DOS - 2+ - FREE MEMORY
 21487                                  		; ES = segment address of area to be freed
 21488                                  endfile_ret:
 21489 00001012 C3                      	retn
 21490                                  
 21491                                  ; End of "EndFile" DOS structure configuration.
 21492                                  
 21493                                  ; ----------------------------------------------------------------------
 21494                                  ; 26/03/2019 - Retro DOS v4.0
 21495                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 21496                                  ; ----------------------------------------------------------------------
 21497                                  ; Do_Install_Exec
 21498                                  ;
 21499                                  ; This procedure is used to EXEC a program being loaded via the 
 21500                                  ; "install=" mechanism in config.sys. It does this by setting up
 21501                                  ; the parameters, and then jumping to sysinit_base, which has been
 21502                                  ; setup in low memory. When complete, sysinit_base will jump back
 21503                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 21504                                  ; program).
 21505                                  
 21506                                  ;SYSINIT:10CFh:
 21507                                  
 21508                                  do_install_exec:			; now,handles install= command.
 21509                                  
 21510 00001013 56                      	push	si			; save si for config.sys again.
 21511                                  
 21512                                  ; we are going to call load/exec function.
 21513                                  ; set es:bx to the parameter block here;;;;;;;
 21514                                  ; set ds:dx to the asciiz string. remember that we already has 0
 21515                                  ; after the filename. so parameter starts after that. if next
 21516                                  ; character is a line feed (i.e. 10),then assume that the 0
 21517                                  ; we already encountered used to be a carrage return. in this
 21518                                  ; case,let's set the length to 0 which will be followed by
 21519                                  ; carridge return.
 21520                                  
 21521                                  ; es:si -> command line in config.sys. points to the first non blank
 21522                                  ;character after =.
 21523                                  
 21524 00001014 06                      	push	es
 21525 00001015 1E                      	push	ds
 21526 00001016 07                      	pop	es
 21527 00001017 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 21528 00001018 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 21529                                  
 21530 0000101A 31C9                    	xor	cx,cx
 21531 0000101C FC                      	cld
 21532 0000101D 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 21533 00001023 BF[6E03]                	mov	di,ldexec_parm
 21534                                  installfilename:			; skip the file name
 21535 00001026 AC                      	lodsb				; al = ds:si; si++
 21536 00001027 3C00                    	cmp	al,0
 21537                                  	;je	short got_installparm
 21538                                  	;jmp	short installfilename
 21539                                  	; 10/04/2024
 21540 00001029 75FB                    	jne	short installfilename
 21541                                  got_installparm:			; copy the parameters to ldexec_parm
 21542 0000102B AC                      	lodsb
 21543 0000102C 268805                  	mov	[es:di],al
 21544 0000102F 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 21545 00001031 7405                    	je	short done_installparm
 21546 00001033 FEC1                    	inc	cl			; # of char. in the parm.
 21547 00001035 47                      	inc	di
 21548 00001036 EBF3                    	jmp	short got_installparm
 21549                                  done_installparm:
 21550 00001038 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 21551 0000103D 80F900                  	cmp	cl,0			; if no parm,then
 21552 00001040 7506                    	jne	short install_seg_set 	; let the parm area
 21553 00001042 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 21554                                  					; starts with cr.
 21555                                  install_seg_set:
 21556 00001048 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 21557 0000104F 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 21558                                  
 21559                                  ;---------------------------------------------------M067----------------
 21560                                  ;
 21561                                  ; 	the environment pointer is made 0. so the current environment ptr.
 21562                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 21563                                  ;
 21564                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 21565                                  ;
 21566                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 21567                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 21568                                  ; 	was fixed. 
 21569                                  ;
 21570                                  ; ----------------------------------------------------------------------
 21571                                  
 21572                                  ;;ifdef   MULTI_CONFIG
 21573                                  
 21574                                  ; If there's any environment data in "config_wrkseg", pass to app
 21575                                  
 21576                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21577                                          ;mov     cx,ax
 21578                                          ;cmp     word [cs:config_envlen],0
 21579                                          ;je      short no_envdata2
 21580                                          ;mov     cx,[cs:config_wrkseg]
 21581                                  ;no_envdata2:
 21582                                  ;;endif  ;MULTI_CONFIG
 21583                                  
 21584                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 21585                                  	; 24/10/2022
 21586                                  	;mov	[cs:iexec.environ],cx
 21587                                  	; 02/11/2022
 21588 00001051 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 21589                                  
 21590                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 21591 00001055 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 21592                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 21593 00001059 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 21594                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 21595 0000105D 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 21596 00001061 E86E00                  	call	sum_up
 21597 00001064 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 21598 00001068 31C0                    	xor	ax,ax
 21599 0000106A B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 21600 0000106C BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 21601 0000106F 06                      	push	es			; save es,ds for load/exec
 21602 00001070 1E                      	push	ds			; these registers will be restored in sysinit_base.
 21603 00001071 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 21604                                  					; load/exec function and check sum.
 21605                                  
 21606                                  ;----------------------------------------
 21607                                  
 21608                                  ;j.k. this is the returning address from sysinit_base.
 21609                                  
 21610                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 21611                                  
 21612                                  sysinitptr:				; returning far address from sysinit_base
 21613 00001076 5E                      	pop	si			; restore si for config.sys file.
 21614 00001077 06                      	push	es
 21615 00001078 1E                      	push	ds
 21616 00001079 07                      	pop	es
 21617 0000107A 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 21618 0000107B 7306                            jnc     short install_exit_ret
 21619                                  
 21620 0000107D 56                      	push	si			; error in loading the file for install=.
 21621 0000107E E8CC21                  	call	badload 		; es:si-> path,filename,0.
 21622 00001081 5E                      	pop	si
 21623                                  
 21624                                  	; 24/10/2022
 21625                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 21626                                  	; 11/12/2022
 21627                                  	; ds = cs
 21628 00001082 C3                      	retn
 21629                                  
 21630                                  install_exit_ret:
 21631                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 21632                                  
 21633                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 21634                                  ;SYSINIT:1142h:
 21635 00001083 B44D                    	mov     ah,4Dh
 21636 00001085 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 21637 00001087 80FC03                  	cmp     ah,3
 21638 0000108A 7404                    	jz      short sysinitptr_retn
 21639 0000108C E80616                  	call    error_line
 21640 0000108F F9                      	stc
 21641                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 21642 00001090 C3                      	retn		
 21643                                  
 21644                                  ; ----------------------------------------------------------------------
 21645                                  
 21646                                  ;**	ParaRound - Round Up length to paragraph multiple
 21647                                  ;
 21648                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 21649                                  ;	by 16 yielding a "length in paragraphs" value.
 21650                                  ;
 21651                                  ;	ENTRY	(ax) = byte length
 21652                                  ;	EXIT	(ax) = rounded up length in paragraphs
 21653                                  ;	USES	ax, flags
 21654                                  
 21655                                  ParaRound:
 21656 00001091 83C00F                  	add	ax,15
 21657 00001094 D1D8                    	rcr	ax,1
 21658 00001096 D1E8                    	shr	ax,1
 21659 00001098 D1E8                    	shr	ax,1
 21660 0000109A D1E8                    	shr	ax,1
 21661 0000109C C3                      	retn
 21662                                  
 21663                                  ; ----------------------------------------------------------------------
 21664                                  ; sysinit_base module.
 21665                                  ;
 21666                                  ; This module is relocated by the routine EndFile to a location in low
 21667                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 21668                                  ; that are being loaded by the "install=" command. After the EXEC call
 21669                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 21670                                  ; top of memory) to be sure that the EXECed program did not damage it.
 21671                                  ; If it did, then this module will print an error message and stop the
 21672                                  ; system. Otherwise, it returns control to SYSINIT.
 21673                                  ;
 21674                                  ;in: after relocation,
 21675                                  ;    ax = 4b00h - load and execute the program dos function.
 21676                                  ;    ds = confbot. segment of config.sys file image
 21677                                  ;    es = sysinitseg. segment of sysinit module itself.
 21678                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 21679                                  ;    es:bx = pointer to a parameter block for load.
 21680                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 21681                                  ;    bigsize (word) - # of word from confbot to SI_end.
 21682                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 21683                                  ;			word boundary moduler form.
 21684                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 21685                                  ;
 21686                                  ;note: sysinit should save necessary registers and when the control is back
 21687                                  
 21688                                  	; 24/10/2022
 21689                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 21690                                  sysinit_base:				
 21691 0000109D 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 21692 000010A2 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 21693 000010A7 CD21                    	int	21h			; load/exec dos call.
 21694 000010A9 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 21695 000010AE 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 21696 000010B3 1F                      	pop	ds			; restore confbot seg
 21697 000010B4 07                      	pop	es			; restore sysinitseg
 21698 000010B5 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 21699                                  					; at this time,i don't have to worry about
 21700                                  					; that sysinit module has been broken or not.
 21701 000010B7 E81800                  	call	sum_up			; otherwise,check if it is good.
 21702 000010BA 263906[5603]            	cmp	[es:checksum],ax
 21703 000010BF 740C                    	je	short sysinit_base_end
 21704                                  
 21705                                  ;	memory broken. show "memory allocation error" message and stall.
 21706                                  
 21707 000010C1 B409                    	mov	ah,9
 21708 000010C3 0E                      	push	cs
 21709 000010C4 1F                      	pop	ds
 21710 000010C5 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 21711 000010C8 CD21                    	int	21h
 21712                                  		; DOS - PRINT STRING
 21713                                  		; DS:DX -> string terminated by "$"
 21714                                  	; 24/10/2022
 21715                                  _stall: 
 21716                                  	; 11/12/2022
 21717 000010CA F4                      	hlt 
 21718                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21719                                  	;hlt				;use HLT to minimize energy consumption
 21720 000010CB EBFD                            jmp	short _stall
 21721                                  
 21722                                  sysinit_base_end: 
 21723 000010CD 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 21724                                  
 21725                                  ;-------------------------------------
 21726                                  
 21727                                  sum_up:
 21728                                  
 21729                                  ;in:   es - sysinitseg.
 21730                                  ;out:  ax - result
 21731                                  ;
 21732                                  ;remark: since this routine will only check starting from "locstack" to the end of
 21733                                  ;	 sysinit segment,the data area, and the current stack area are not
 21734                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 21735                                  ;	 gaurantee to be safe.
 21736                                  ;
 21737                                  ;first sum up confbot seg.
 21738                                  
 21739 000010D2 1E                      	push	ds
 21740                                  	;mov	ax,[es:CONFBOT]
 21741                                  	; 24/10/2022
 21742 000010D3 26A1[A102]              	mov	ax,[es:top_of_cdss]
 21743 000010D7 8ED8                    	mov	ds,ax
 21744 000010D9 31F6                    	xor	si,si
 21745 000010DB 31C0                    	xor	ax,ax
 21746 000010DD 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 21747                                  					;whole test better fail.
 21748 000010E2 D1E9                    	shr	cx,1			; make it a word count
 21749 000010E4 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 21750                                  sum1:
 21751 000010E6 0304                    	add	ax,[si]
 21752 000010E8 46                      	inc	si
 21753 000010E9 46                      	inc	si
 21754 000010EA E2FA                    	loop	sum1
 21755                                  ;now,sum up sysinit module.
 21756                                  sum_sys_code:
 21757                                  	; 24/10/2022
 21758 000010EC BEEC10                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 21759                                  				        ; starting after the stack.  M069
 21760                                  					;  this does not cover the possible stack code!!!
 21761                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 21762                                  	; 02/11/2022
 21763                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 21764                                  	; 30/12/2022 (BugFix)
 21765                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 21766 000010EF B9[E037]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 21767 000010F2 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 21768 000010F4 D1E9                    	shr	cx,1
 21769                                  sum2:
 21770 000010F6 260304                  	add	ax,[es:si]
 21771 000010F9 46                      	inc	si
 21772 000010FA 46                      	inc	si
 21773 000010FB E2F9                    	loop	sum2
 21774 000010FD 1F                      	pop	ds
 21775 000010FE C3                      	retn
 21776                                  
 21777                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21778                                  
 21779                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 21780                                  ;SYSINIT:11BDh:
 21781 000010FF 0000                    	dw	0
 21782                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 21783                                  ;SYSINIT:11BFh:
 21784 00001101 0000                    	dw	0
 21785                                  
 21786                                  mem_alloc_err_msgx:
 21787                                  
 21788                                         ;include msbio.cl4		; memory allocation error message
 21789                                  
 21790                                  ;SYSINIT:12F6h:	; MSDOS 6.21 IO.SYS
 21791 00001103 0D0A                    	db	0Dh,0Ah
 21792 00001105 4D656D6F727920616C-     	db 	'Memory allocation error $'
 21792 0000110E 6C6F636174696F6E20-
 21792 00001117 6572726F722024     
 21793                                  
 21794                                  end_sysinit_base: ; label byte
 21795                                  	; 24/10/2022
 21796                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 21797                                  
 21798                                  ; ----------------------------------------------------------------------
 21799                                  ; Set_Buffer
 21800                                  ;
 21801                                  ;function: set buffers in the real memory.				  
 21802                                  ;	   lastly set the memhi,memlo for the next available free address.
 21803                                  ;
 21804                                  ;input:    ds:bx -> buffinfo.
 21805                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 21806                                  ;	   singlebuffersize = buffer header size + sector size		  
 21807                                  ;
 21808                                  ;output:   buffers Queue established.	       				   
 21809                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 21810                                  ; ----------------------------------------------------------------------
 21811                                  
 21812                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21813                                  	; (SYSINIT:11DCh)
 21814                                  
 21815                                  set_buffer:
 21816 0000111E 30D2                    	xor	dl,dl				; assume buffers not in HMA
 21817 00001120 E85500                  	call	GetBufferAddr
 21818 00001123 7402                    	jz	short set_buff_1
 21819                                  	;mov	dl,1				; buffers in HMA
 21820                                  	; 17/09/2023
 21821 00001125 FEC2                    	inc	dl ; mov dl,1
 21822                                  set_buff_1:
 21823                                  	; 25/10/2022
 21824                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 21825 00001127 893F                    	mov	[bx],di
 21826                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 21827 00001129 8C4702                  	mov	[bx+2],es
 21828                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 21829 0000112C C747040000              	mov	word [bx+4],0
 21830                                  
 21831 00001131 89F8                    	mov	ax,di
 21832 00001133 2E8B0E[9702]            	mov	cx,[cs:buffers]
 21833 00001138 57                      	push	di				; remember first buffer
 21834                                  
 21835                                  ;	for each buffer
 21836                                  
 21837                                  nxt_buff:
 21838 00001139 E86100                  	call	set_buffer_info 		; set buf_link,buf_id...
 21839 0000113C 89C7                    	mov	di,ax
 21840 0000113E E2F9                    	loop	nxt_buff
 21841                                  
 21842 00001140 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 21843                                  
 21844 00001145 59                      	pop	cx				; get first buffer
 21845                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 21846 00001146 26890D                  	mov	[es:di],cx
 21847 00001149 87CF                    	xchg	cx,di
 21848                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 21849                                  	; 25/10/2022
 21850 0000114B 26894D02                	mov	[es:di+2],cx
 21851                                  
 21852 0000114F 08D2                    	or	dl,dl				; In HMA ?
 21853 00001151 7417                    	jz	short set_buff_2		; no
 21854                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 21855 00001153 C6470C01                	mov	byte [bx+12],1
 21856 00001157 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 21857                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 21858 0000115B C7470D0000              	mov	word [bx+13],0
 21859                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 21860 00001160 89470F                  	mov	word [bx+15],ax
 21861 00001163 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 21862                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 21863 00001167 83E814                  	sub	ax,20
 21864                                  set_buff_2:
 21865 0000116A 2E0106[DE03]            	add	[cs:memlo],ax
 21866                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 21867 0000116F 2E800E[FA13]02          	or	byte [cs:setdevmarkflag],2
 21868                                  	;call	round
 21869                                  	;retn
 21870                                  	; 12/12/2022
 21871 00001175 E9871E                  	jmp	round
 21872                                  
 21873                                  ; ----------------------------------------------------------------------
 21874                                  ; procedure : GetBufferAddr
 21875                                  ;
 21876                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 21877                                  ;
 21878                                  ; returns in es:di the buffer adress
 21879                                  ; returns NZ if allocated in HMA
 21880                                  ; ----------------------------------------------------------------------
 21881                                  
 21882                                  	; 25/10/2022 
 21883                                  GetBufferAddr:
 21884 00001178 53                      	push	bx
 21885 00001179 52                      	push	dx
 21886 0000117A 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 21887 0000117E 2EF726[9702]            	mul	word [cs:buffers]
 21888                                  	;add	ax,0Fh
 21889 00001183 83C00F                  	add	ax,15 
 21890                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21891                                  	;and	ax,~15	; 0FFF0h	; para round
 21892                                  	; 12/12/2022
 21893 00001186 24F0                    	and	al,~15	; 0F0h
 21894 00001188 89C3                    	mov	bx,ax
 21895 0000118A B8024A                  	mov	ax,4A02h
 21896                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 21897 0000118D CD2F                    	int	2Fh
 21898 0000118F 83FFFF                  	cmp	di,0FFFFh
 21899 00001192 7506                    	jne	short got_hma
 21900                                  
 21901                                  	;mov	di,0			; dont xor di,di Z flag needed
 21902                                  	; 05/09/2023
 21903                                  	; zf=1
 21904 00001194 47                      	inc	di ; 0FFFFh -> 0
 21905                                  	; zf=1
 21906                                  
 21907                                  	;zf=1
 21908                                  	;xor	di,di	; 25/10/2022
 21909                                  	;zf=1
 21910 00001195 2E8E06[E003]            	mov	es,[cs:memhi]
 21911                                  got_hma:
 21912 0000119A 5A                      	pop	dx
 21913 0000119B 5B                      	pop	bx
 21914 0000119C C3                      	retn
 21915                                  
 21916                                  ; ----------------------------------------------------------------------
 21917                                  
 21918                                  set_buffer_info:
 21919                                  
 21920                                  ;function: set buf_link,buf_id,buf_sector
 21921                                  ;
 21922                                  ;in: es:di -> buffer header to be set.
 21923                                  ;    ax = di
 21924                                  ;
 21925                                  ;out:
 21926                                  ;    above entries set.
 21927                                  
 21928                                  	; 25/10/2022 
 21929 0000119D 2EFF36[3903]            	push	word [cs:buf_prev_off]
 21930                                  	;pop	word [es:di+buffinfo.buf_prev]
 21931 000011A2 268F4502                	pop	word [es:di+2]
 21932 000011A6 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 21933 000011AA 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 21934                                  	;mov	[es:di+buffinfo.buf_next],ax
 21935 000011AF 268905                  	mov	[es:di],ax
 21936                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 21937 000011B2 26C74504FF00            	mov	word [es:di+4],00FFh
 21938                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 21939 000011B8 26C745060000            	mov	word [es:di+6],0
 21940                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 21941 000011BE 26C745080000            	mov	word [es:di+8],0
 21942 000011C4 C3                      	retn
 21943                                  
 21944                                  ; ======================================================================
 21945                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 21946                                  ; ----------------------------------------------------------------------
 21947                                  ; 27/03/2019 - Retro DOS v4.0
 21948                                  
 21949                                  ; ----------------------------------------------------------------------
 21950                                  ; ibmstack initialization routine.
 21951                                  ;
 21952                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 21953                                  ;	has been modified. this initialization routine also has to
 21954                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 21955                                  ;	should be set to signal that this interrupt handler is the
 21956                                  ;	first handler hooked to this interrupt vector.
 21957                                  ;	we determine this by looking at the instruction pointed by
 21958                                  ;	this vector. if it is iret, then this handler should be the
 21959                                  ;	first one. in our case, only the interrupt vector 77h is the
 21960                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 21961                                  ;
 21962                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 21963                                  ;	some design changes are needed to the above interrupt sharing
 21964                                  ;	method. the above sharing scheme assumes that 1). interrupt
 21965                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 21966                                  ;	interrupts would only be generated on levels 7 and 15.
 21967                                  ;	these assumptions are not true any more. we have to use the firstflag
 21968                                  ;	for every level of interrupt. we will set the firstflag on the following
 21969                                  ;	conditions:
 21970                                  ;
 21971                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 21972                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 21973                                  ;	 c. else if cs:ip points to an iret, then "first"
 21974                                  ;	 d. else if cs:ip points to dummy, then "first"
 21975                                  ;
 21976                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 21977                                  ;	be equal to the value at f000:ff01. this location is the initial value
 21978                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 21979                                  ;	the bioses for all of the machines.
 21980                                  ;
 21981                                  ;	system design group requests bios to handle the phantom interrupts.
 21982                                  ;
 21983                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 21984                                  ;	produced by the bogus adapter card even without interrupt request is
 21985                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 21986                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 21987                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 21988                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 21989                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 21990                                  ;	interrupt line.
 21991                                  ;
 21992                                  ;	to handle those "phantom" interrupts, the main stack code will check
 21993                                  ;	the own firstflag, and if it is not "first" (which means the forward
 21994                                  ;	pointer points to the legal shared interrupt handler), then pass the
 21995                                  ;	control. if it is the first, then the following action should be
 21996                                  ;	taken. we don't have to implement skack logic in this case.
 21997                                  ;
 21998                                  ;	to implement this logic, we rather choose a simple method.
 21999                                  ;	if ont of the above "firstflag" conditions is met, we are not
 22000                                  ;	going to hook this interrupt vector. the reason is if the original
 22001                                  ;	vector points to "iret" and do nothing, we don't need
 22002                                  ;	to implement the stack logic for it. this will simplify implementation
 22003                                  ;	while maintaining compatibility with the old version of dos.
 22004                                  ;	this implies that in the main stack code, there might be a stack code
 22005                                  ;	that will never be used, a dead code.
 22006                                  ;
 22007                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 22008                                  
 22009                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22010                                  	; (SYSINIT:1287h)
 22011                                  
 22012                                  	; 14/12/2022
 22013                                  stackinit:
 22014 000011C5 50                      	push	ax
 22015 000011C6 1E                      	push	ds
 22016 000011C7 06                      	push	es
 22017 000011C8 53                      	push	bx
 22018 000011C9 51                      	push	cx
 22019 000011CA 52                      	push	dx
 22020 000011CB 57                      	push	di
 22021 000011CC 56                      	push	si
 22022 000011CD 55                      	push	bp
 22023                                  
 22024                                  ;currently es -> stack code area
 22025                                  
 22026                                  	; 12/12/2022
 22027                                  	; ds = cs
 22028 000011CE A1[8A02]                	mov	ax,[stack_count]
 22029 000011D1 89C1                    	mov	cx,ax  ; *!*!*  
 22030                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22031                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 22032                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 22033 000011D3 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 22034                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 22035 000011D7 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 22036 000011DA 26A3[0600]              	mov	[es:stacksize],ax
 22037                                  	; 12/12/2022
 22038 000011DE A1[8E02]                	mov	ax,[stack_addr]			; offset
 22039                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22040                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 22041                                  	;mov	ax,[cs:stack_addr]  ; !!
 22042 000011E1 26A3[0800]              	mov	[es:stacks],ax
 22043                                  	; 12/12/2022
 22044 000011E5 89C5                    	mov	bp,ax ; *!*
 22045 000011E7 A1[9002]                	mov	ax,[stack_addr+2]
 22046                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 22047                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 22048                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 22049 000011EA 26A3[0A00]              	mov	[es:stacks+2],ax
 22050                                  
 22051                                  ; initialize the data fields with the parameters
 22052                                  
 22053                                  ; "firstentry" will always be at stacks
 22054                                  
 22055                                  	;mov	bp,[es:stacks]			; get offset of stack
 22056                                  	; 12/12/2022
 22057                                  	; bp = [es:stacks] ; *!*
 22058 000011EE 26892E[0C00]            	mov	[es:firstentry],bp
 22059                                  
 22060                                  ; the stacks will always immediately follow the table entries
 22061                                  
 22062 000011F3 B80800                  	mov	ax,entrysize ; 8
 22063                                  	;mov	cx,[es:stackcount]
 22064                                  	; 12/12/2022
 22065                                  	; cx = [es:stackcount] ; *!*!*
 22066 000011F6 F7E1                    	mul	cx
 22067 000011F8 01E8                    	add	ax,bp
 22068 000011FA 26A3[0400]              	mov	[es:stackat],ax
 22069 000011FE 89C3                    	mov	bx,ax
 22070 00001200 83EB02                  	sub	bx,2
 22071                                  
 22072                                  ; zero the entire stack area to start with
 22073                                  
 22074 00001203 268B3E[0400]            	mov	di,[es:stackat]
 22075 00001208 26A1[0600]              	mov	ax,[es:stacksize]
 22076 0000120C F7E1                    	mul	cx
 22077 0000120E 89C1                    	mov	cx,ax
 22078 00001210 31C0                    	xor	ax,ax
 22079 00001212 06                      	push	es
 22080 00001213 1F                      	pop	ds				;ds = relocated stack code seg.
 22081                                  
 22082                                  ;now, ds -> stack code area
 22083                                  
 22084 00001214 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 22085 00001218 FC                      	cld
 22086 00001219 F3AA                    	rep	stosb
 22087                                  
 22088 0000121B 8B0E[0200]              	mov	cx,[stackcount]
 22089                                  
 22090                                  ; loop for "count" times, building a table entry
 22091                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 22092                                  ;  cx = number of entries
 22093                                  ;  es:bp => base of stacks - 2
 22094                                  ;  es:bx => first table entry
 22095                                  
 22096                                  buildloop:
 22097                                  	; 11/12/2022
 22098                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 22099                                  	; 25/10/2022
 22100                                  	;mov	byte [es:bp],free
 22101                                  	; 14/08/2023
 22102 0000121F 26884600                	mov	[es:bp],al ; 0 ; free
 22103 00001223 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 22104                                  	;mov	[es:bp+1],al
 22105 00001227 26894602                	mov	[es:bp+savedsp],ax
 22106                                  	;mov	[es:bp2],ax
 22107 0000122B 26894604                	mov	[es:bp+savedss],ax
 22108                                  	;mov	[es:bp+4],ax
 22109 0000122F 031E[0600]              	add	bx,[stacksize]
 22110 00001233 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 22111                                  	;mov	[es:bp+6],bx
 22112 00001237 26892F                  	mov	[es:bx],bp
 22113 0000123A 83C508                  	add	bp,entrysize ; 8
 22114                                  
 22115 0000123D E2E0                    	loop	buildloop
 22116                                  
 22117 0000123F 83ED08                  	sub	bp,entrysize ; 8
 22118 00001242 892E[0E00]              	mov	[lastentry],bp
 22119 00001246 892E[1000]              	mov	[nextentry],bp
 22120                                  
 22121 0000124A 1E                      	push	ds
 22122                                  	;mov	ax,0F000h		;look at the model byte
 22123                                  	; 05/09/2023
 22124 0000124B B4F0                    	mov	ah,0F0h ; ax = 0F000h
 22125 0000124D 8ED8                    	mov	ds,ax	
 22126 0000124F 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 22127 00001254 1F                      	pop	ds
 22128 00001255 7504                    	jne	short skip_disablenmis
 22129                                  
 22130 00001257 B007                    	mov	al,07h			; disable convertible nmis
 22131 00001259 E672                    	out	72h,al
 22132                                  
 22133                                  skip_disablenmis:
 22134 0000125B 31C0                    	xor	ax,ax
 22135 0000125D 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 22136                                  					;ds - relocated stack code segment
 22137 0000125F FA                      	cli
 22138                                  
 22139                                  	;irp	aa,<02,08,09,70>
 22140                                  	;
 22141                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 22142                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 22143                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 22144                                  	;mov	dx,offset int&aa	;pass where new handler is
 22145                                  	;call	new_init_loop		;adjust the vector to new handler,
 22146                                  	;				;saving pointer to original owner
 22147                                  	;endm
 22148                                  
 22149                                  stkinit_02:
 22150 00001260 BE0800                  	mov	si,02h*4 ; 8
 22151 00001263 BF[3906]                	mov	di,INT19OLD02
 22152 00001266 BB[1200]                	mov	bx,old02
 22153 00001269 BA[1600]                	mov	dx,int02
 22154 0000126C E84801                  	call	new_init_loop
 22155                                  stkinit_08:
 22156 0000126F BE2000                  	mov	si,08h*4 ; 32
 22157 00001272 BF[3E06]                	mov	di,INT19OLD08
 22158 00001275 BB[3800]                	mov	bx,old08
 22159 00001278 BA[3C00]                	mov	dx,int08
 22160 0000127B E83901                  	call	new_init_loop
 22161                                  stkinit_09:
 22162 0000127E BE2400                  	mov	si,09h*4 ; 36
 22163 00001281 BF[4306]                	mov	di,INT19OLD09
 22164 00001284 BB[4100]                	mov	bx,old09
 22165 00001287 BA[4500]                	mov	dx,int09
 22166 0000128A E82A01                  	call	new_init_loop
 22167                                  stkinit_70:
 22168 0000128D BEC001                  	mov	si,70h*4 ; 448
 22169 00001290 BF[6106]                	mov	di,INT19OLD70
 22170 00001293 BB[4E00]                	mov	bx,old70
 22171 00001296 BA[5200]                	mov	dx,int70
 22172 00001299 E81B01                  	call	new_init_loop
 22173                                  
 22174                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 22175                                  	;
 22176                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 22177                                  	;push	ds			;save relocated stack code segment
 22178                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 22179                                  	;push	ds
 22180                                  	;pop	dx			;dx = segment value
 22181                                  	;	
 22182                                  	;cmp	dx,0
 22183                                  	;jz	int&aa&_first
 22184                                  	;
 22185                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 22186                                  	;jz	int&aa&_first
 22187                                  	;
 22188                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 22189                                  	;jz	int&aa&_not_first
 22190                                  	;
 22191                                  	;cmp	dx,0f000h		;rom bios segment
 22192                                  	;jnz	int&aa&_not_first
 22193                                  	;
 22194                                  	;push	es
 22195                                  	;push	dx
 22196                                  	;mov	dx,0f000h
 22197                                  	;mov	es,dx
 22198                                  	;cmp	bx,word ptr es:0ff01h
 22199                                         	;pop	dx
 22200                                  	;pop	es
 22201                                  	;jz	int&aa&_first
 22202                                  	;
 22203                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 22204                                  	;pop	ds
 22205                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 22206                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 22207                                  	;mov	dx, offset int&aa	;pass where new handler is
 22208                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 22209                                  	;				;pointer to original owner.
 22210                                  	;jmp	short int&aa&_end
 22211                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 22212                                  	;pop	ds
 22213                                  ;int&aa&_end:
 22214                                  	;
 22215                                  	;endm
 22216                                  
 22217                                  stkinit_0A:
 22218 0000129C BE2800                  	mov	si,0Ah*4 ; 40
 22219                                  	
 22220                                  ; 14/12/2022
 22221                                  %if 0	
 22222                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22223                                  	push	ds
 22224                                  	
 22225                                  	lds	bx,[es:si]
 22226                                  	push	ds
 22227                                  	pop	dx
 22228                                  		
 22229                                  	cmp	dx,0
 22230                                  	je	short int_0A_first
 22231                                  	
 22232                                  	cmp	byte [bx],0CFh
 22233                                  	je	short int_0A_first
 22234                                  	
 22235                                  	cmp	word [bx+6],424Bh
 22236                                  	je	short int_0A_not_first
 22237                                  	
 22238                                  	cmp	dx,0F000h
 22239                                  	jne	short int_0A_not_first
 22240                                  	
 22241                                  	push	es
 22242                                  	push	dx
 22243                                  	mov	dx,0F000h
 22244                                  	mov	es,dx
 22245                                  	cmp	bx,[es:0FF01h]
 22246                                         	pop	dx
 22247                                  	pop	es
 22248                                  	je	short int_0A_first
 22249                                  %Endif
 22250                                  
 22251                                  	; 14/12/2022
 22252                                  	; 25/10/2022
 22253 0000129F E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 22254 000012A2 730C                    	jnc	short int_0A_first
 22255                                  	
 22256                                  int_0A_not_first:
 22257                                  	; 14/12/2022
 22258                                  	; 25/10/2022
 22259                                  	;pop	ds
 22260 000012A4 BF[4806]                	mov	di,INT19OLD0A
 22261 000012A7 BB[5900]                	mov	bx,old0A
 22262 000012AA BA[5700]                	mov	dx,int0A
 22263 000012AD E80701                  	call	new_init_loop
 22264                                  	
 22265                                  	; 14/12/2022	
 22266                                  	;jmp	short int_0A_end
 22267                                  ;int_0A_first:
 22268                                  	; 25/10/2022
 22269                                  	;pop	ds
 22270                                  
 22271                                  	; 14/12/2022
 22272                                  int_0A_first:
 22273                                  int_0A_end:
 22274                                  
 22275                                  stkinit_0B:
 22276 000012B0 BE2C00                  	mov	si,0Bh*4 ; 44
 22277                                  	
 22278                                  	; 14/12/2022
 22279                                  	; 25/10/2022
 22280 000012B3 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 22281 000012B6 730C                    	jnc	short int_0B_end ; int_0B_first
 22282                                  
 22283                                  ; 14/12/2022
 22284                                  %if 0	
 22285                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22286                                  	push	ds
 22287                                  	lds	bx,[es:si]
 22288                                  	push	ds
 22289                                  	pop	dx
 22290                                  		
 22291                                  	cmp	dx,0
 22292                                  	je	short int_0B_first
 22293                                  
 22294                                  	cmp	byte [bx],0CFh
 22295                                  	je	short int_0B_first
 22296                                  	
 22297                                  	cmp	word [bx+6],424Bh
 22298                                  	je	short int_0B_not_first
 22299                                  	
 22300                                  	cmp	dx,0F000h
 22301                                  	jne	short int_0B_not_first
 22302                                  
 22303                                  	push	es
 22304                                  	push	dx
 22305                                  	mov	dx,0F000h
 22306                                  	mov	es,dx
 22307                                  	cmp	bx,[es:0FF01h]
 22308                                  	pop	dx
 22309                                  	pop	es
 22310                                  	je	short int_0B_first
 22311                                  %endif
 22312                                  
 22313                                  int_0B_not_first:
 22314                                  	; 14/12/2022
 22315                                  	; 25/10/2022
 22316                                  	;pop	ds
 22317 000012B8 BF[4D06]                	mov	di,INT19OLD0B
 22318 000012BB BB[7100]                	mov	bx,old0B
 22319 000012BE BA[6F00]                	mov	dx,int0B
 22320 000012C1 E8F300                  	call	new_init_loop
 22321                                  
 22322                                  	; 14/12/2022
 22323                                  	;jmp	short int_0B_end
 22324                                  ;int_0B_first:
 22325                                  	; 25/10/2022
 22326                                  	;pop	ds
 22327                                  
 22328                                  int_0B_end:
 22329                                  	
 22330                                  stkinit_0C:
 22331 000012C4 BE3000                  	mov	si,0Ch*4 ; 48
 22332                                  	
 22333                                  	; 14/12/2022
 22334                                  	; 25/10/2022
 22335 000012C7 E8C300                  	call	int_xx_first_check
 22336 000012CA 730C                    	jnc	short int_0C_end ; int_0C_first
 22337                                  
 22338                                  ; 14/12/2022
 22339                                  %if 0	
 22340                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22341                                  	push	ds
 22342                                  	lds	bx,[es:si]
 22343                                  	push	ds
 22344                                  	pop	dx
 22345                                  		
 22346                                  	cmp	dx,0
 22347                                  	je	short int_0C_first
 22348                                  
 22349                                  	cmp	byte [bx],0CFh
 22350                                  	je	short int_0C_first
 22351                                  	
 22352                                  	cmp	word [bx+6],424Bh
 22353                                  	je	short int_0C_not_first
 22354                                  	
 22355                                  	cmp	dx,0F000h
 22356                                  	jne	short int_0C_not_first
 22357                                  
 22358                                  	push	es
 22359                                  	push	dx
 22360                                  	mov	dx,0F000h
 22361                                  	mov	es,dx
 22362                                  	cmp	bx,[es:0FF01h]
 22363                                  	pop	dx
 22364                                  	pop	es
 22365                                  	je	short int_0C_first
 22366                                  %endif
 22367                                  	
 22368                                  int_0C_not_first:
 22369                                  	; 14/12/2022
 22370                                  	; 25/10/2022
 22371                                  	;pop	ds
 22372 000012CC BF[5206]                	mov	di,INT19OLD0C
 22373 000012CF BB[8900]                	mov	bx,old0C
 22374 000012D2 BA[8700]                	mov	dx,int0C
 22375 000012D5 E8DF00                  	call	new_init_loop
 22376                                  
 22377                                  	; 14/12/2022
 22378                                  	;jmp	short int_0C_end
 22379                                  ;int_0C_first:
 22380                                  	; 25/10/2022
 22381                                  	;pop	ds
 22382                                  
 22383                                  int_0C_end:
 22384                                  
 22385                                  stkinit_0D:
 22386 000012D8 BE3400                  	mov	si,0Dh*4 ; 52
 22387                                  
 22388                                  	; 14/12/2022	
 22389                                  	; 25/10/2022
 22390 000012DB E8AF00                  	call	int_xx_first_check
 22391 000012DE 730C                    	jnc	short int_0D_end ; int_0D_first
 22392                                  
 22393                                  ; 14/12/2022
 22394                                  %if 0	
 22395                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22396                                  	push	ds
 22397                                  	lds	bx,[es:si]
 22398                                  	push	ds
 22399                                  	pop	dx
 22400                                  		
 22401                                  	cmp	dx,0
 22402                                  	je	short int_0D_first
 22403                                  
 22404                                  	cmp	byte [bx],0CFh
 22405                                  	je	short int_0D_first
 22406                                  	
 22407                                  	cmp	word [bx+6],424Bh
 22408                                  	je	short int_0D_not_first
 22409                                  	
 22410                                  	cmp	dx,0F000h
 22411                                  	jne	short int_0D_not_first
 22412                                  
 22413                                  	push	es
 22414                                  	push	dx
 22415                                  	mov	dx,0F000h
 22416                                  	mov	es,dx
 22417                                  	cmp	bx,[es:0FF01h]
 22418                                  	pop	dx
 22419                                  	pop	es
 22420                                  	je	short int_0D_first
 22421                                  %endif
 22422                                  	
 22423                                  int_0D_not_first:
 22424                                  	; 14/12/2022
 22425                                  	; 25/10/2022
 22426                                  	;pop	ds
 22427 000012E0 BF[5706]                	mov	di,INT19OLD0D
 22428 000012E3 BB[A100]                	mov	bx,old0D
 22429 000012E6 BA[9F00]                	mov	dx,int0D
 22430 000012E9 E8CB00                  	call	new_init_loop
 22431                                  
 22432                                  	; 14/12/2022
 22433                                  	;jmp	short int_0D_end
 22434                                  	; 02/11/2022
 22435                                  ;int_0D_first:
 22436                                  	;pop	ds
 22437                                  
 22438                                  int_0D_end:
 22439                                  
 22440                                  stkinit_0E:
 22441 000012EC BE3800                  	mov	si,0Eh*4 ; 56
 22442                                  
 22443                                  	; 14/12/2022	
 22444                                  	; 25/10/2022
 22445 000012EF E89B00                  	call	int_xx_first_check
 22446 000012F2 730C                    	jnc	short int_0E_end ; int_0E_first
 22447                                  
 22448                                  ; 14/12/2022
 22449                                  %if 0	
 22450                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22451                                  	push	ds
 22452                                  	lds	bx,[es:si]
 22453                                  	push	ds
 22454                                  	pop	dx
 22455                                  		
 22456                                  	cmp	dx,0
 22457                                  	je	short int_0E_first
 22458                                  
 22459                                  	cmp	byte [bx],0CFh
 22460                                  	je	short int_0E_first
 22461                                  	
 22462                                  	cmp	word [bx+6],424Bh
 22463                                  	je	short int_0E_not_first
 22464                                  	
 22465                                  	cmp	dx,0F000h
 22466                                  	jne	short int_0E_not_first
 22467                                  
 22468                                  	push	es
 22469                                  	push	dx
 22470                                  	mov	dx,0F000h
 22471                                  	mov	es,dx
 22472                                  	cmp	bx,[es:0FF01h]
 22473                                  	pop	dx
 22474                                  	pop	es
 22475                                  	je	short int_0E_first
 22476                                  %endif
 22477                                  	
 22478                                  int_0E_not_first:
 22479                                  	; 14/12/2022
 22480                                  	; 25/10/2022
 22481                                  	;pop	ds
 22482 000012F4 BF[5C06]                	mov	di,INT19OLD0E
 22483 000012F7 BB[B900]                	mov	bx,old0E
 22484 000012FA BA[B700]                	mov	dx,int0E
 22485 000012FD E8B700                  	call	new_init_loop
 22486                                  
 22487                                  	; 14/12/2022
 22488                                  	;jmp	short int_0E_end
 22489                                  ;int_0E_first:
 22490                                  	; 25/10/2022
 22491                                  	;pop	ds	
 22492                                  
 22493                                  int_0E_end:
 22494                                  
 22495                                  stkinit_72:
 22496 00001300 BEC801                  	mov	si,72h*4 ; 456
 22497                                  	
 22498                                  	; 14/12/2022
 22499                                  	; 25/10/2022
 22500 00001303 E88700                  	call	int_xx_first_check
 22501 00001306 730C                    	jnc	short int_72_end ; int_72_first
 22502                                  
 22503                                  ; 14/12/2022
 22504                                  %if 0	
 22505                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22506                                  	push	ds
 22507                                  	lds	bx,[es:si]
 22508                                  	push	ds
 22509                                  	pop	dx
 22510                                  		
 22511                                  	cmp	dx,0
 22512                                  	je	short int_72_first
 22513                                  
 22514                                  	cmp	byte [bx],0CFh
 22515                                  	je	short int_72_first
 22516                                  	
 22517                                  	cmp	word [bx+6],424Bh
 22518                                  	je	short int_72_not_first
 22519                                  	
 22520                                  	cmp	dx,0F000h
 22521                                  	jne	short int_72_not_first
 22522                                  
 22523                                  	push	es
 22524                                  	push	dx
 22525                                  	mov	dx,0F000h
 22526                                  	mov	es,dx
 22527                                  	cmp	bx,[es:0FF01h]
 22528                                  	pop	dx
 22529                                  	pop	es
 22530                                  	je	short int_72_first
 22531                                  %endif
 22532                                  	
 22533                                  int_72_not_first:
 22534                                  	; 14/12/2022
 22535                                  	; 25/10/2022
 22536                                  	;pop	ds
 22537 00001308 BF[6606]                	mov	di,INT19OLD72
 22538 0000130B BB[D100]                	mov	bx,old72
 22539 0000130E BA[CF00]                	mov	dx,int72
 22540 00001311 E8A300                  	call	new_init_loop
 22541                                  
 22542                                  	; 14/12/2022
 22543                                  	;jmp	short int_72_end
 22544                                  ;int_72_first:
 22545                                  	; 25/10/2022
 22546                                  	;pop	ds
 22547                                  
 22548                                  int_72_end:
 22549                                  
 22550                                  stkinit_73:
 22551 00001314 BECC01                  	mov	si,73h*4 ; 460
 22552                                  	
 22553                                  	; 14/12/2022
 22554                                  	; 25/10/2022
 22555 00001317 E87300                  	call	int_xx_first_check
 22556 0000131A 730C                    	jnc	short int_73_end ; int_73_first
 22557                                  
 22558                                  ; 14/12/2022
 22559                                  %if 0	
 22560                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22561                                  	push	ds
 22562                                  	lds	bx,[es:si]
 22563                                  	push	ds
 22564                                  	pop	dx
 22565                                  		
 22566                                  	cmp	dx,0
 22567                                  	je	short int_73_first
 22568                                  
 22569                                  	cmp	byte [bx],0CFh
 22570                                  	je	short int_73_first
 22571                                  	
 22572                                  	cmp	word [bx+6],424Bh
 22573                                  	je	short int_73_not_first
 22574                                  	
 22575                                  	cmp	dx,0F000h
 22576                                  	jne	short int_73_not_first
 22577                                  
 22578                                  	push	es
 22579                                  	push	dx
 22580                                  	mov	dx,0F000h
 22581                                  	mov	es,dx
 22582                                  	cmp	bx,[es:0FF01h]
 22583                                  	pop	dx
 22584                                  	pop	es
 22585                                  	je	short int_73_first
 22586                                  %endif	
 22587                                  	
 22588                                  int_73_not_first:
 22589                                  	; 14/12/2022
 22590                                  	; 25/10/2022
 22591                                  	;pop	ds
 22592 0000131C BF[6B06]                	mov	di,INT19OLD73
 22593 0000131F BB[E900]                	mov	bx,old73
 22594 00001322 BA[E700]                	mov	dx,int73
 22595 00001325 E88F00                  	call	new_init_loop
 22596                                  
 22597                                  	; 14/12/2022
 22598                                  	;jmp	short int_73_end
 22599                                  ;int_73_first:
 22600                                  	; 25/10/2022
 22601                                  	;pop	ds
 22602                                  
 22603                                  int_73_end:
 22604                                  
 22605                                  stkinit_74:
 22606 00001328 BED001                  	mov	si,74h*4 ; 464
 22607                                  	
 22608                                  	; 14/12/2022
 22609                                  	; 25/10/2022
 22610 0000132B E85F00                  	call	int_xx_first_check
 22611 0000132E 730C                    	jnc	short int_74_end ; int_74_first
 22612                                  
 22613                                  ; 14/12/2022
 22614                                  %if 0		
 22615                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22616                                  	push	ds
 22617                                  	lds	bx,[es:si]
 22618                                  	push	ds
 22619                                  	pop	dx
 22620                                  		
 22621                                  	cmp	dx,0
 22622                                  	je	short int_74_first
 22623                                  
 22624                                  	cmp	byte [bx],0CFh
 22625                                  	je	short int_74_first
 22626                                  	
 22627                                  	cmp	word [bx+6],424Bh
 22628                                  	je	short int_74_not_first
 22629                                  	
 22630                                  	cmp	dx,0F000h
 22631                                  	jne	short int_74_not_first
 22632                                  
 22633                                  	push	es
 22634                                  	push	dx
 22635                                  	mov	dx,0F000h
 22636                                  	mov	es,dx
 22637                                  	cmp	bx,[es:0FF01h]
 22638                                  	pop	dx
 22639                                  	pop	es
 22640                                  	je	short int_74_first
 22641                                  %endif
 22642                                  
 22643                                  int_74_not_first:
 22644                                  	; 14/12/2022
 22645                                  	; 25/10/2022
 22646                                  	;pop	ds
 22647 00001330 BF[7006]                	mov	di,INT19OLD74
 22648 00001333 BB[0101]                	mov	bx,old74
 22649 00001336 BA[FF00]                	mov	dx,int74
 22650 00001339 E87B00                  	call	new_init_loop
 22651                                  	
 22652                                  	; 14/12/2022
 22653                                  	;jmp	short int_74_end
 22654                                  ;int_74_first:
 22655                                  	; 25/10/2022
 22656                                  	;pop	ds
 22657                                  
 22658                                  int_74_end:
 22659                                  
 22660                                  stkinit_76:
 22661 0000133C BED801                  	mov	si,76h*4 ; 472
 22662                                  	
 22663                                  	; 14/12/2022
 22664                                  	; 25/10/2022
 22665 0000133F E84B00                  	call	int_xx_first_check
 22666 00001342 730E                    	jnc	short int_76_end ; int_76_first
 22667                                  
 22668                                  ; 14/12/2022
 22669                                  %if 0	
 22670                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22671                                  	push	ds
 22672                                  	lds	bx,[es:si]
 22673                                  	push	ds
 22674                                  	pop	dx
 22675                                  		
 22676                                  	cmp	dx,0
 22677                                  	je	short int_76_first
 22678                                  
 22679                                  	cmp	byte [bx],0CFh
 22680                                  	je	short int_76_first
 22681                                  	
 22682                                  	cmp	word [bx+6],424Bh
 22683                                  	je	short int_76_not_first
 22684                                  	
 22685                                  	cmp	dx,0F000h
 22686                                  	jne	short int_76_not_first
 22687                                  
 22688                                  	push	es
 22689                                  	push	dx
 22690                                  	mov	dx,0F000h
 22691                                  	mov	es,dx
 22692                                  	cmp	bx,[es:0FF01h]
 22693                                  	pop	dx
 22694                                  	pop	es
 22695                                  	je	short int_76_first
 22696                                  %endif
 22697                                  	
 22698                                  int_76_not_first:
 22699                                  	; 14/12/2022
 22700                                  	; 25/10/2022
 22701                                  	;pop	ds
 22702 00001344 BF[7506]                	mov	di,INT19OLD76
 22703 00001347 BB[1901]                	mov	bx,old76
 22704 0000134A BA[1701]                	mov	dx,int76
 22705 0000134D E86700                  	call	new_init_loop
 22706                                  
 22707                                  	; 14/12/2022
 22708 00001350 EB00                    	jmp	short int_76_end
 22709                                  ;int_76_first:
 22710                                  	; 25/10/2022
 22711                                  	;pop	ds
 22712                                  
 22713                                  int_76_end:
 22714                                  
 22715                                  stkinit_77:
 22716 00001352 BEDC01                  	mov	si,77h*4 ; 476
 22717                                  	
 22718                                  	; 14/12/2022
 22719                                  	; 25/10/2022
 22720 00001355 E83500                  	call	int_xx_first_check
 22721 00001358 730C                    	jnc	short int_77_end ; int_77_first
 22722                                  
 22723                                  ; 14/12/2022
 22724                                  %if 0	
 22725                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22726                                  	push	ds
 22727                                  	lds	bx,[es:si]
 22728                                  	push	ds
 22729                                  	pop	dx
 22730                                  		
 22731                                  	cmp	dx,0
 22732                                  	je	short int_77_first
 22733                                  
 22734                                  	cmp	byte [bx],0CFh
 22735                                  	je	short int_77_first
 22736                                  	
 22737                                  	cmp	word [bx+6],424Bh
 22738                                  	je	short int_77_not_first
 22739                                  	
 22740                                  	cmp	dx,0F000h
 22741                                  	jne	short int_77_not_first
 22742                                  
 22743                                  	push	es
 22744                                  	push	dx
 22745                                  	mov	dx,0F000h
 22746                                  	mov	es,dx
 22747                                  	cmp	bx,[es:0FF01h]
 22748                                  	pop	dx
 22749                                  	pop	es
 22750                                  	je	short int_77_first
 22751                                  %endif
 22752                                  	
 22753                                  int_77_not_first:
 22754                                  	; 14/12/2022
 22755                                  	; 25/10/2022
 22756                                  	;pop	ds
 22757 0000135A BF[7A06]                	mov	di,INT19OLD77
 22758 0000135D BB[3101]                	mov	bx,old77
 22759 00001360 BA[2F01]                	mov	dx,int77
 22760 00001363 E85100                  	call	new_init_loop
 22761                                  
 22762                                  	; 14/12/2022
 22763                                  	;jmp	short int_77_end
 22764                                  ;int_77_first:
 22765                                  	; 25/10/2022
 22766                                  	;pop	ds
 22767                                  
 22768                                  int_77_end:
 22769 00001366 1E                      	push	ds
 22770 00001367 B800F0                  	mov	ax,0F000h		; look at the model byte
 22771 0000136A 8ED8                    	mov	ds,ax
 22772 0000136C 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 22773 00001371 1F                      	pop	ds
 22774 00001372 7504                    	jne	short skip_enablenmis
 22775                                  
 22776 00001374 B027                    	mov	al,27h			; enable convertible nmis
 22777 00001376 E672                    	out	72h,al
 22778                                  
 22779                                  ; 25/10/2022
 22780                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 22781                                  
 22782                                  skip_enablenmis:
 22783 00001378 FB                      	sti
 22784                                  	;;mov	ax,Bios_Data ; 70h
 22785                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22786                                  	; 21/10/2022
 22787 00001379 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22788 0000137C 8ED8                    	mov	ds,ax
 22789                                  
 22790                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 22791                                  
 22792 0000137E C606[3706]01            	mov	byte [INT19SEM],1	; indicate that int 19
 22793                                  					; initialization is complete
 22794                                  
 22795 00001383 5D                      	pop	bp			; restore all
 22796 00001384 5E                      	pop	si
 22797 00001385 5F                      	pop	di
 22798 00001386 5A                      	pop	dx
 22799 00001387 59                      	pop	cx
 22800 00001388 5B                      	pop	bx
 22801 00001389 07                      	pop	es
 22802 0000138A 1F                      	pop	ds
 22803 0000138B 58                      	pop	ax
 22804 0000138C C3                      	retn
 22805                                  
 22806                                  ; 14/12/2022
 22807                                  ; ----------------------------------------------------------------------
 22808                                  
 22809                                  	; 14/12/2022
 22810                                  	; 25/10/2022
 22811                                  ;%if 0
 22812                                  	; 27/03/2019 - Retro DOS v4.0
 22813                                  int_xx_first_check:
 22814 0000138D 1E                      	push	ds
 22815 0000138E 26C51C                  	lds	bx,[es:si]
 22816 00001391 1E                      	push	ds
 22817 00001392 5A                      	pop	dx
 22818                                  		
 22819                                  	;cmp	dx,0
 22820                                  	;je	short int_xx_first
 22821                                  	; 05/09/2023
 22822 00001393 21D2                    	and	dx,dx
 22823 00001395 741E                    	jz	short int_xx_first
 22824                                  
 22825 00001397 803FCF                  	cmp	byte [bx],0CFh
 22826 0000139A 7419                    	je	short int_xx_first
 22827                                  	
 22828 0000139C 817F064B42              	cmp	word [bx+6],424Bh
 22829 000013A1 7411                    	je	short int_xx_not_first
 22830                                  	
 22831 000013A3 81FA00F0                	cmp	dx,0F000h
 22832 000013A7 750B                    	jne	short int_xx_not_first
 22833                                  
 22834 000013A9 06                      	push	es
 22835                                  	;push	dx
 22836                                  	;mov	dx,0F000h
 22837 000013AA 8EC2                    	mov	es,dx
 22838 000013AC 263B1E01FF              	cmp	bx,[es:0FF01h]
 22839                                        	;pop	dx
 22840 000013B1 07                      	pop	es
 22841 000013B2 7401                    	je	short int_xx_first
 22842                                  
 22843                                  int_xx_not_first:
 22844 000013B4 F9                      	stc
 22845                                  int_xx_first:
 22846 000013B5 1F                      	pop	ds
 22847 000013B6 C3                      	retn
 22848                                  
 22849                                  ;%endif
 22850                                  
 22851                                  ; ----------------------------------------------------------------------
 22852                                  ; 27/03/2019 - Retro DOS v4.0
 22853                                  
 22854                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22855                                  ; (SYSINIT:1610h)
 22856                                  
 22857                                  new_init_loop:
 22858                                  
 22859                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 22860                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 22861                                  ;	dx=ds:offset of intxx, the new interrupt handler
 22862                                  ;	di=offset value of int19old&aa variable in bios.
 22863                                  ;	es=zero, segid of vector table
 22864                                  ;	ds=relocated stack code segment
 22865                                  
 22866                                  ; 13/04/2024
 22867                                  %if 0
 22868                                  	mov	ax,[es:si]		;remember offset in vector
 22869                                  	mov	[bx],ax			; to original owner in ds
 22870                                  	mov	ax,[es:si+2]		;remember segid in vector
 22871                                  	mov	[bx+2],ax		; to original owner in ds
 22872                                  
 22873                                  	push	ds
 22874                                  	;;mov	ax,Bios_Data ; 70h
 22875                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 22876                                  	; 21/10/2022
 22877                                  	mov	ax,DOSBIODATASEG ; 0070h
 22878                                  	mov	ds,ax			;set int19oldxx value in bios for
 22879                                  	mov	ax,[es:si]		;int 19 handler
 22880                                  	mov	[di],ax
 22881                                  	mov	ax,[es:si+2]
 22882                                  	mov	[di+2],ax
 22883                                  	pop	ds
 22884                                  %else
 22885                                  	; 13/04/2024 - Retro DOS v4.1
 22886 000013B7 1E                      	push	ds
 22887 000013B8 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 22888 000013BC 894702                  	mov	[bx+2],ax		; to original owner in ds
 22889 000013BF 50                      	push	ax
 22890 000013C0 268B04                  	mov	ax,[es:si]		;remember offset in vector
 22891 000013C3 8907                    	mov	[bx],ax			; to original owner in ds
 22892 000013C5 50                      	push	ax
 22893 000013C6 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 22894 000013C9 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 22895 000013CB 58                      	pop	ax			;int 19 handler
 22896 000013CC 8905                    	mov	[di],ax
 22897 000013CE 58                      	pop	ax
 22898 000013CF 894502                  	mov	[di+2],ax
 22899 000013D2 1F                      	pop	ds
 22900                                  %endif
 22901 000013D3 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 22902 000013D6 268C5C02                	mov	[es:si+2],ds
 22903 000013DA C3                      	retn
 22904                                  
 22905                                  ; End of STACK initialization routine
 22906                                  ; ----------------------------------------------------------------------
 22907                                  
 22908                                  ; ----------------------------------------------------------------------
 22909                                  ;set the devmark for mem command.
 22910                                  ;in: [memhi] - the address to place devmark
 22911                                  ;    [memlo] = 0
 22912                                  ;    al = id for devmark_id
 22913                                  ;out: devmark established.
 22914                                  ;     the address saved in cs:[devmark_addr]
 22915                                  ;     [memhi] increase by 1.
 22916                                  ; ----------------------------------------------------------------------
 22917                                  
 22918                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 22919                                  ; (SYSINIT:1637h)
 22920                                  ; 04/09/2023 - Retro DOS v4.2 (Modified MSDOS 6.21 IO.SYS, SYSINIT)
 22921                                  ; (SYSINIT:176Ch)
 22922                                  
 22923                                  ; 04/09/2023 - PCDOS 7.1 - IBMBIO.COM (SYSINIT:1944h)
 22924                                  
 22925                                  setdevmark:
 22926                                  
 22927                                  	; 04/09/2023
 22928                                  	;push	es
 22929                                  	;push	cx
 22930                                  
 22931 000013DB 2E8B0E[E003]            	mov	cx,[cs:memhi]
 22932 000013E0 2E890E[F813]            	mov	[cs:devmark_addr],cx
 22933 000013E5 8EC1                    	mov	es,cx
 22934                                  	; 25/10/2022
 22935                                  	;mov	[es:devmark.id],al
 22936 000013E7 26A20000                	mov	[es:0],al
 22937 000013EB 41                      	inc	cx
 22938                                  	;mov	[es:devmark.seg],cx
 22939 000013EC 26890E0100              	mov	[es:1],cx
 22940                                  
 22941                                  	; 04/09/2023
 22942                                  	;pop	cx
 22943                                  	;pop	es
 22944                                  	
 22945 000013F1 2EFF06[E003]            	inc	word [cs:memhi]
 22946 000013F6 C3                      	retn
 22947                                  
 22948                                  ; ----------------------------------------------------------------------
 22949                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 22950                                  ; ----------------------------------------------------------------------
 22951                                  ; 27/03/2019 - Retro DOS v4.0
 22952                                  
 22953                                  ;MULTI_CONFIG	equ 1
 22954                                  
 22955                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 22956                                                                          ; allocation strategy call
 22957                                  
 22958                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 22959                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 22960                                  
 22961                                  default_filenum equ 8
 22962                                  
 22963                                  ;stacksw	equ true		; include switchable hardware stacks
 22964                                  
 22965                                  ; external variable defined in ibmbio module for multi-track
 22966                                  
 22967                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 22968                                  					; it on after handling config.sys file as a
 22969                                  					; default value,if multrk_flag = multrk_off1.
 22970                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 22971                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 22972                                  
 22973                                  ; if stacksw
 22974                                  
 22975                                  ; internal stack parameters
 22976                                  
 22977                                  ;entrysize	equ 8
 22978                                  
 22979                                  ;mincount	equ 8
 22980                                  ;defaultcount	equ 9
 22981                                  ;maxcount	equ 64
 22982                                  
 22983                                  ;minsize 	equ 32
 22984                                  ;defaultsize	equ 128
 22985                                  ;maxsize 	equ 512
 22986                                  
 22987                                  DOS_FLAG_OFFSET	equ 86h
 22988                                  
 22989                                  ;ifdef MULTI_CONFIG
 22990                                  ;
 22991                                  ;   config_envlen must immediately precede config_wrkseg, because they
 22992                                  ;   may be loaded as a dword ptr
 22993                                  
 22994                                  ; 25/10/2022
 22995                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 22996                                  ;               			;  a scratch env, this is its length
 22997                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 22998                                  ;                   			;  segment of work area
 22999                                  ;
 23000                                  ;config_cmd:	db  0  			; current config cmd
 23001                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 23002                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 23003                                  
 23004                                  ;endif ; MULTI_CONFIG
 23005                                  
 23006 000013F7 00                      multdeviceflag:	db  0
 23007                                  
 23008 000013F8 0000                    devmark_addr:	dw  0			;segment address for devmark.
 23009                                  
 23010 000013FA 00                      setdevmarkflag: db  0			;flag used for devmark
 23011                                  
 23012                                  ; 12/12/2022
 23013                                  ;driver_units:	db  0			;total unitcount for driver
 23014                                  
 23015                                  ; 12/12/2022
 23016                                  ;ems_stub_installed:
 23017                                  ;		db  0
 23018                                  
 23019                                  ; 12/12/2022	
 23020                                  ;align 2
 23021                                  
 23022                                  badparm_ptr:	; label	dword
 23023 000013FB 0000                    badparm_off:	dw  0
 23024 000013FD 0000                    badparm_seg:	dw  0
 23025                                  
 23026                                  ;******************************************************************************
 23027                                  ;take care of config.sys file.
 23028                                  ;system parser data and code.
 23029                                  ;******************************************************************************
 23030                                  
 23031                                  ;*******************************************************************
 23032                                  ; parser options set for msbio sysconf module
 23033                                  ;*******************************************************************
 23034                                  ;
 23035                                  ;**** default assemble swiches definition **************************
 23036                                  
 23037                                  ;farsw	equ 0		; near call expected
 23038                                  ;datesw	equ 0		; check date format
 23039                                  ;timesw	equ 0		; check time format
 23040                                  ;filesw	equ 1		; check file specification
 23041                                  ;capsw	equ 0		; perform caps if specified
 23042                                  ;cmpxsw	equ 0		; check complex list
 23043                                  ;numsw	equ 1		; check numeric value
 23044                                  ;keysw	equ 0		; support keywords
 23045                                  ;swsw	equ 1		; support switches
 23046                                  ;val1sw	equ 1		; support value definition 1
 23047                                  ;val2sw	equ 0		; support value definition 2
 23048                                  ;val3sw	equ 1		; support value definition 3
 23049                                  ;drvsw	equ 1		; support drive only format
 23050                                  ;qussw	equ 0		; support quoted string format
 23051                                  
 23052                                  ; psdata_seg equ cs
 23053                                  
 23054                                  	;.xlist
 23055                                  	;include parse.asm		;together with psdata.inc
 23056                                  	;.list
 23057                                  
 23058                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 23059                                  ; ======================================================================
 23060                                  ; 27/03/2019 - Retro DOS v4.0
 23061                                  
 23062                                  ; 30/03/2019
 23063                                  ; VERSION.INC (MSDOS 6.0) 
 23064                                  ; Set DBCS Blank constant
 23065                                  
 23066                                  ; ifndef DBCS
 23067                                  DB_SPACE EQU 2020h
 23068                                  DB_SP_HI EQU 20h
 23069                                  DB_SP_LO EQU 20h
 23070                                  ; else
 23071                                  
 23072                                  ;*******************************************************************
 23073                                  ; Parser include file
 23074                                  ;*******************************************************************
 23075                                  
 23076                                  ;**** Equation field
 23077                                  ;-------- Character code definition
 23078                                  
 23079                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 23080                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 23081                                  _$P_Period	   equ	"."             ;AN020;
 23082                                  _$P_Slash	   equ	"/"             ;AN020;
 23083                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 23084                                  _$P_Comma	   equ	","             ;AN000;
 23085                                  _$P_Switch	   equ	"/"             ;AN000;
 23086                                  _$P_Keyword	   equ	"="             ;AN000;
 23087                                  _$P_Colon	   equ	":"             ;AN000;
 23088                                  _$P_Plus 	   equ	"+"             ;AN000;
 23089                                  _$P_Minus	   equ	"-"             ;AN000;
 23090                                  _$P_Rparen	   equ	")"             ;AN000;
 23091                                  _$P_Lparen	   equ	"("             ;AN000;
 23092                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 23093                                  _$P_DQuote	   equ	'"'             ;AN000;
 23094                                  _$P_NULL 	   equ	0		;AN000;
 23095                                  _$P_TAB		   equ	9		;AN000;
 23096                                  _$P_CR		   equ	0Dh		;AN000;
 23097                                  _$P_LF		   equ	0Ah		;AN000;
 23098                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 23099                                  
 23100                                  ;-------- Masks
 23101                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 23102                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 23103                                  
 23104                                  ;-------- DOS function call related equs
 23105                                  
 23106                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 23107                                  					; by this call, following information
 23108                                  struc _$P_CDI	
 23109 00000000 ????                     .DateF: resw 1
 23110 00000002 ??????????               .Money: resb 5
 23111 00000007 ????                     .1000:	 resb 2
 23112 00000009 ????                     .Dec:	 resb 2
 23113 0000000B ????                     .DateS: resb 2
 23114 0000000D ????                     .TimeS: resb 2
 23115 0000000F ??                          	 resb 1
 23116 00000010 ??                      	 resb 1
 23117 00000011 ??                       .TimeF: resb 1	 
 23118 00000012 ????????                	 resw 2
 23119 00000016 ????                    	 resb 2
 23120 00000018 <res Ah>                	 resw 5
 23121                                   .size:
 23122                                  endstruc
 23123                                  
 23124                                  _$P_Date_MDY	   equ	0		;AN000;
 23125                                  _$P_Date_DMY	   equ	1		;AN000;
 23126                                  _$P_Date_YMD	   equ	2		;AN000;
 23127                                  ;-------------
 23128                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 23129                                  					;AN000; DS:SI will points to DBCS EV
 23130                                  ;-------------
 23131                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 23132                                  					;AN000; following parameters are set
 23133                                  					;AN000; to get casemap table.
 23134                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 23135                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 23136                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 23137                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 23138                                  					; By this call following information
 23139                                  					; is returned.
 23140                                  struc _$P_DOS_TBL
 23141 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 23142 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 23143 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 23144                                  endstruc
 23145                                  
 23146                                  ; ----------------------------------------------------------------------------
 23147                                  ; PARMS 	LABEL	BYTE
 23148                                  ;		DW	PARMSX
 23149                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 23150                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 23151                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 23152                                  ;					; TYPICAL ARE ";", "="
 23153                                  ;					; "," & WHITESPACE ALWAYS
 23154                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 23155                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 23156                                  ; ----------------------------------------------------------------------------
 23157                                  
 23158                                  ;-------------------------------- PARMS block structure
 23159                                  struc _$P_PARMS_Blk
 23160 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 23161 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 23162 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 23163                                  endstruc
 23164                                  
 23165                                  _$P_Len_PARMS	   equ	4		;AN000;
 23166                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 23167                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 23168                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 23169                                  
 23170                                  ; ----------------------------------------------------------------------------
 23171                                  ; PARMSX	LABEL	BYTE
 23172                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 23173                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 23174                                  ;		:			; REPEATS maxp-1 TIMES
 23175                                  ;		DB	maxs		; # OF SWITCHES
 23176                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 23177                                  ;		:			; REPEATS maxs-1 TIMES
 23178                                  ;		DB	maxk		; # OF KEYWORD
 23179                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 23180                                  ;		:			; REPEATS maxk-1 TIMES
 23181                                  ; ----------------------------------------------------------------------------
 23182                                  
 23183                                  ;-------------------------------- PARMSX block structure
 23184                                  struc _$P_PARMSX_Blk		;AN000;
 23185 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 23186 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 23187 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 23188                                  endstruc
 23189                                  
 23190                                  ; ----------------------------------------------------------------------------
 23191                                  ; << Control field definition  >>
 23192                                  ;
 23193                                  ;
 23194                                  ;CONTROL   LABEL   BYTE
 23195                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 23196                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 23197                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 23198                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 23199                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 23200                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 23201                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 23202                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 23203                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 23204                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 23205                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 23206                                  ;				   ; 0002H=REPEATS ALLOWED
 23207                                  ;				   ; 0001H=OPTIONAL
 23208                                  ;	   DW	   FUNCTION_FLAGS
 23209                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 23210                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 23211                                  ;				   ; 0010H=REMOVE ":" AT END
 23212                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 23213                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 23214                                  ;	   DW	   VALUES	   ; VALUE LISTS
 23215                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 23216                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 23217                                  ;	   :
 23218                                  ;
 23219                                  ;Note:
 23220                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 23221                                  ;      DATE bit simalteniously.
 23222                                  ;
 23223                                  ;      The parser examins each bit along with the following priority.
 23224                                  ;
 23225                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 23226                                  ;      FILE SPEC -> SIMPLE STRING.
 23227                                  ;
 23228                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 23229                                  ;      in the result buffer is capitalized.
 23230                                  ;
 23231                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 23232                                  ;
 23233                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 23234                                  ;      switch, for example, '/A', then STRING points to;
 23235                                  ;
 23236                                  ;			DB    1 	; number of following synonyms
 23237                                  ;			DB   '/A',0
 23238                                  ;
 23239                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 23240                                  ;
 23241                                  ;			DB    1 	; number of following synonyms
 23242                                  ;			DB   'CODEPAGE=',0
 23243                                  ;
 23244                                  ;    - "..." must consist of upper case characters only because the parser
 23245                                  ;      performs pattern matching after converting input to upper case (by
 23246                                  ;      using the current country upper case table)
 23247                                  ;
 23248                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 23249                                  ;      example /A and /B, the format will be;
 23250                                  ;
 23251                                  ;			DB    2 	; number of following synonyms
 23252                                  ;			DB    '/A',0
 23253                                  ;			DB    '/B',0
 23254                                  ; ----------------------------------------------------------------------------
 23255                                  
 23256                                  ;**** Match_Flags
 23257                                  
 23258                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 23259                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 23260                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 23261                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 23262                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 23263                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 23264                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 23265                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 23266                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 23267                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 23268                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 23269                                  _$P_Optional	   equ	0001h		;AN000; Optional
 23270                                  
 23271                                  ;**** Function flags
 23272                                  
 23273                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 23274                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 23275                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 23276                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 23277                                  
 23278                                  ;-------------------------------- Control block structure
 23279                                  struc _$P_Control_Blk
 23280 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 23281 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 23282 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 23283 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 23284 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 23285 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 23286                                  endstruc
 23287                                  
 23288                                  ; ----------------------------------------------------------------------------
 23289                                  ; << Value List Definition >>
 23290                                  ;
 23291                                  ;VALUES 	LABEL	BYTE
 23292                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 23293                                  ;	     +-
 23294                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 23295                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 23296                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 23297                                  ;	     |	:
 23298                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 23299                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 23300                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 23301                                  ;	     |	:
 23302                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 23303                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 23304                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 23305                                  ;	     +-	:
 23306                                  ;
 23307                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 23308                                  ;
 23309                                  ;Note:
 23310                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 23311                                  ;      when no choice lists are provided.
 23312                                  ;
 23313                                  ;    - STRING must consist of upper case characters only because the parser
 23314                                  ;      performs pattern matching after converting input to upper case (by
 23315                                  ;      using the current country upper case table)
 23316                                  ; ----------------------------------------------------------------------------
 23317                                  
 23318                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 23319                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 23320                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 23321                                  _$P_nval_String	   equ	3		;AN000; string list ID
 23322                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 23323                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 23324                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 23325                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 23326                                  
 23327                                  struc _$P_Val_List
 23328 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 23329 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 23330 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 23331 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 23332 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 23333                                  endstruc
 23334                                  
 23335                                  ; ----------------------------------------------------------------------------
 23336                                  ; << Result Buffer Definition  >>
 23337                                  ;
 23338                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 23339                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 23340                                  ;						;	1=NUMBER, 2=LIST INDEX,
 23341                                  ;						;	3=STRING, 4=COMPLEX,
 23342                                  ;						;	5=FILESPEC, 6=DRIVE
 23343                                  ;						;	7=DATE, 8=TIME
 23344                                  ;						;	9=QUOTED STRING
 23345                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 23346                                  ;
 23347                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 23348                                  ;
 23349                                  ;            +-
 23350                                  ;	    | DD	n			; VALUE IF NUMBER
 23351                                  ;	    | or
 23352                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 23353                                  ;	    |					; (ES presents Segment address)
 23354                                  ;	    | or
 23355                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 23356                                  ;	    | or
 23357                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 23358                                  ;	    | or
 23359                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 23360                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 23361                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 23362                                  ;	    | or
 23363                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 23364                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 23365                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 23366                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 23367                                  ;	    +-
 23368                                  ;
 23369                                  ;
 23370                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 23371                                  ;      list.
 23372                                  ;
 23373                                  ;      YEAR: If the input value for the year is less than 100, parser
 23374                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 23375                                  ;	     the year value, he returns 1987.
 23376                                  ; ----------------------------------------------------------------------------
 23377                                  
 23378                                  ;-------------------------------- Result block structure
 23379                                  struc _$P_Result_Blk
 23380 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 23381 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 23382 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 23383 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 23384                                  endstruc
 23385                                  
 23386                                  ;--------------------------------
 23387                                  ;**** values for the type field in the result block
 23388                                  
 23389                                  _$P_EOL		   equ	0		;AN000; End of line
 23390                                  _$P_Number	   equ	1		;AN000; Number
 23391                                  _$P_List_Idx	   equ	2		;AN000; List Index
 23392                                  _$P_String	   equ	3		;AN000; String
 23393                                  _$P_Complex	   equ	4		;AN000; Complex
 23394                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 23395                                  _$P_Drive	   equ	6		;AN000; Drive
 23396                                  _$P_Date_F	   equ	7		;AN000; Date
 23397                                  _$P_Time_F	   equ	8		;AN000; Time
 23398                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 23399                                  
 23400                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 23401                                  
 23402                                  ;**** Return code
 23403                                  ;
 23404                                  ; following return code will be returned in the AX register.
 23405                                  
 23406                                  _$P_No_Error	   equ	0		;AN000; No error
 23407                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 23408                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 23409                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 23410                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 23411                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 23412                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 23413                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 23414                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 23415                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 23416                                  
 23417                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 23418                                  
 23419                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 23420                                  
 23421                                  ;********************** Local Data *************************************
 23422 000013FF 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 23423 00001401 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 23424 00001403 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 23425 00001405 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 23426 00001407 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 23427 00001408 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 23428 0000140A 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 23429 0000140C 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 23430                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 23431                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 23432                                  
 23433                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 23434                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 23435                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 23436                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 23437                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 23438                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 23439                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 23440                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 23441                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 23442                                  
 23443                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 23444                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 23445                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 23446                                  
 23447 0000140E 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 23448 00001410 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 23449 00001412 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 23450 00001414 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 23451                                  
 23452 00001416 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 23453                                  _$P_STRING_BUF_END equ	$		;AN000;
 23454                                  
 23455                                  ; 25/10/2022
 23456                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 23457                                  
 23458 00001496 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 23459 00001497 0000                    		   dw	0		;AN000; offset	of char case map table
 23460 00001499 0000                    		   dw	0		;AN000; segment of char case map table
 23461                                  ; 25/10/2022
 23462                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 23463                                  ;		   dw	0		;AN000; offset	of file case map table
 23464                                  ;		   dw	0		;AN000; segment of file case map table
 23465                                  
 23466                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 23467                                  ;
 23468                                  
 23469                                  ;M029
 23470                                  ;!!!WARNING!!!
 23471                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 23472                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 23473                                  ;changes need to be made in SYSPARSE
 23474                                  
 23475                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 23476                                  
 23477                                  ; 25/10/2022
 23478                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 23479                                  
 23480 0000149B 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 23481                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 23482                                  
 23483                                  ;ENDIF					;AN000;(of FileSW)
 23484                                  
 23485                                  ; delimiter parsing
 23486                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 23487                                  _$P_period_only	   equ	02h		;AN032; check only for period
 23488                                  
 23489                                  ;filespec error flag
 23490 000014A4 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 23491                                  					;AN033;  was detected.
 23492                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 23493                                  
 23494                                  
 23495                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 23496                                  ; ======================================================================
 23497                                  ; 27/03/2019 - Retro DOS v4.0
 23498                                  
 23499                                  ;***********************************************************************
 23500                                  ; SysParse;
 23501                                  ;
 23502                                  ;  Function : Parser Entry
 23503                                  ;
 23504                                  ;  Input: DS:SI -> command line
 23505                                  ;	  ES:DI -> parameter block
 23506                                  ;	  cs -> psdata.inc
 23507                                  ;	  CX = operand ordinal
 23508                                  ;
 23509                                  ;	  Note:  ES is the segment containing all the control blocks defined
 23510                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 23511                                  ;		 is in DS.
 23512                                  ;
 23513                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 23514                                  ;		    invalid value list. But this parser does NOT implement
 23515                                  ;		    this feature. Therefore CY always zero.
 23516                                  ;
 23517                                  ;	   CY = 0   AX = return code
 23518                                  ;		    BL = terminated delimiter code
 23519                                  ;		    CX = new operand ordinal
 23520                                  ;		    SI = set past scaned operand
 23521                                  ;		    DX = selected result buffer
 23522                                  ;
 23523                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 23524                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 23525                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 23526                                  ;
 23527                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 23528                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 23529                                  ;
 23530                                  ;-------- Modification History -----------------------------------------
 23531                                  ;
 23532                                  ;  4/04/87 : Created by K. K,
 23533                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 23534                                  ;	   : JMP SHORT assemble error (tm02)
 23535                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 23536                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 23537                                  ;	     DateSW equ 1)	      (tm04)
 23538                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 23539                                  ;				      (tm05) in PSDATA.INC
 23540                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 23541                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 23542                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 23543                                  ;	     value-list block	      (tm07)
 23544                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 23545                                  ;	     switch (keyword) or not. If there is, backup si for next call
 23546                                  ;	     (tm08)
 23547                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 23548                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 23549                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 23550                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 23551                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 23552                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 23553                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 23554                                  ;					  (tm12)
 23555                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 23556                                  ;					  (tm13)
 23557                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 23558                                  ;					  (tm14)
 23559                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 23560                                  ;					  (tm15)
 23561                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 23562                                  
 23563                                  ;  7/24/87 : Quoted strings being returned with quotes.
 23564                                  
 23565                                  ;  7/28/87 : Kerry S (;AN018;)
 23566                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 23567                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 23568                                  ;	     affected: _$P_Chk_SW_Control.
 23569                                  
 23570                                  ;  7/29/87 : Kerry S (;AN019;)
 23571                                  ;	     Now allow the optional bit in match flags for switches.  This
 23572                                  ;	     allows the switch to be encountered with a value or without a
 23573                                  ;	     value and no error is returned.
 23574                                  ;
 23575                                  
 23576                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 23577                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 23578                                  ;	     within a date response, instead of checking just for the one
 23579                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 23580                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 23581                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 23582                                  
 23583                                  ;  9/1/87  : Kerry S (;AN021)
 23584                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 23585                                  ;	     the command line with the string in the control block the
 23586                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 23587                                  ;	     on the command line and assuming a match.	This allowed a shorter
 23588                                  ;	     string on the command line than in the synonym list in the control
 23589                                  ;	     block.  I put in a test for a null in the control block so the
 23590                                  ;	     string in the control block must be the same length as the string
 23591                                  ;	     preceeding the colon or equal on the command line.
 23592                                  
 23593                                  ;  8/28/87 : Kerry S (;AN022;)
 23594                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 23595                                  ;	     problems for people who included it themselves in a segment other
 23596                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 23597                                  ;	     segment.
 23598                                  
 23599                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 23600                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 23601                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 23602                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 23603                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 23604                                  ;	     BL be used if TIME is being parsed.
 23605                                  
 23606                                  ;  9/24/87 : Ed K
 23607                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 23608                                  ;	     invocations with their normally expanded code; made comments
 23609                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 23610                                  
 23611                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 23612                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 23613                                  ;	     pointed to by non-existant CONTROL.
 23614                                  
 23615                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 23616                                  ;	     A quoted text string can be framed only by double quote.  Remove
 23617                                  ;	     support to frame quoted text string with single quote.
 23618                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 23619                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 23620                                  ;	     single quote in PROC prologues are left as is for history reasons.
 23621                                  
 23622                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 23623                                  ;	     quote chars within a quoted string is supposed to be reported as
 23624                                  ;	     one quote character, but is reported as two quotes.  This changed
 23625                                  ;	     two instructions in PROC _$P_Quoted_Str.
 23626                                  
 23627                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 23628                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 23629                                  
 23630                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 23631                                  
 23632                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 23633                                  ;	     psdata buffer should have cs.
 23634                                  
 23635                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 23636                                  ;	     positional missing.
 23637                                  
 23638                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 23639                                  ;	     as a line delimiter, should use carriage return.
 23640                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 23641                                  
 23642                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 23643                                  
 23644                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 23645                                  ;	     endless loop since SI is returned still pointing to start
 23646                                  ;	     of that parm.
 23647                                  
 23648                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 23649                                  ;	     Vector to returned string has CS instead of cs, but
 23650                                  ;	     when tried to fix it on previous version, changed similar
 23651                                  ;	     but wrong place.
 23652                                  
 23653                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 23654                                  ;	     delimiters between hours, minutes, seconds for time. And period
 23655                                  ;	     and comma are valid delimiters between seconds and 100th second.
 23656                                  
 23657                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 23658                                  ;	     in a filespec, then flag an error.
 23659                                  
 23660                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 23661                                  ;	     indexed off of the cs equate instead of the DS register.
 23662                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 23663                                  ;  -->	     local parser data. Why were some references to local data changed
 23664                                  ;	     to do this before, but not all ?????
 23665                                  
 23666                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 23667                                  
 23668                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 23669                                  ;
 23670                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 23671                                  
 23672                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 23673                                  
 23674                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 23675                                  ;	     separator in TIME before hundredths field.
 23676                                  ;
 23677                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 23678                                  ;			strings as keywords.
 23679                                  ;
 23680                                  ;***********************************************************************
 23681                                  
 23682                                  ;IF FarSW				;AN000;(Check if need far return)
 23683                                  ;SysParse proc far			;AN000;
 23684                                  ;ELSE					;AN000;
 23685                                  ;SysParse proc near			;AN000;
 23686                                  ;ENDIF					;AN000;(of FarSW)
 23687                                  
 23688                                  ; 27/03/2019 - Retro DOS v4.0
 23689                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 23690                                  
 23691                                  ; 25/10/2022 - Retro DOS v4.0
 23692                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 23693                                  
 23694                                  ; 06/09/2023 - Retro DOS v4.2 IO.SYS Optimization (& Retro DOS v5.0 pre-work)
 23695                                  ; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1D08h)
 23696                                  
 23697                                  SysParse:
 23698                                  	; 06/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 23699                                  	; dx = 0
 23700 000014A5 1E                      	push	ds ; *!*
 23701 000014A6 0E                      	push	cs
 23702 000014A7 1F                      	pop	ds 
 23703                                  
 23704                                  	;mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 23705                                  	;cld				;AN000; confirm forward direction
 23706                                  	;mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 23707                                  	;mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 23708                                  	;mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 23709                                  	;
 23710                                  	;mov	word [cs:_$P_DX],0	;AC034; (tm15)
 23711                                  
 23712                                  	; 06/09/2023
 23713 000014A8 8916[0C14]              	mov	[_$P_Flags],dx ; 0	;AC034; Clear all internal flags
 23714 000014AC FC                      	cld				;AN000; confirm forward direction
 23715 000014AD 890E[FF13]              	mov	[_$P_ORDINAL],cx	;AC034; save operand ordinal
 23716 000014B1 8916[0114]              	mov	[_$P_RC],dx ; $P_No_Error ;AC034; Assume no error
 23717 000014B5 8916[1414]              	mov	[_$P_Found_SYNONYM],dx	; 0 ;AC034; initalize synonym pointer
 23718 000014B9 8916[0514]              	mov	[_$P_DX],dx ; 0		;AC034; (tm15)
 23719                                  
 23720                                  ;M029 -- Begin changes
 23721                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 23722                                  ;entry to SysParse. This is in the non-checksum region and any program that
 23723                                  ;corrupts this table but does not corrupt the checksum region will leave
 23724                                  ;command.com parsing in an inconsistent state.
 23725                                  ; NB: The special characters string has been hardcoded here. If any change
 23726                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 23727                                  
 23728                                  ;IF FileSW + DrvSW
 23729                                  	; 14/04/2024 (NASM syntax BugFix) .. '][' (MASM) -> '[]' (NASM)
 23730                                  	
 23731                                  	;mov	word [cs:_$P_FileSp_Char], '[]'
 23732                                  	;mov	word [cs:_$P_FileSp_Char+2], '|<'
 23733                                  	;mov	word [cs:_$P_FileSp_Char+4], '>+'
 23734                                  	;mov 	word [cs:_$P_FileSp_Char+6], '=;'
 23735                                  
 23736                                  	; 14/04/2024
 23737                                  	; 06/09/2023
 23738 000014BD C706[9B14]5B5D          	mov	word [_$P_FileSp_Char], '[]'	; mov word [_$P_FileSp_Char],5D5Bh
 23739 000014C3 C706[9D14]7C3C          	mov	word [_$P_FileSp_Char+2], '|<'	; 3C7Ch
 23740 000014C9 C706[9F14]3E2B          	mov	word [_$P_FileSp_Char+4], '>+'	; 2B3Eh
 23741 000014CF C706[A114]3D3B          	mov 	word [_$P_FileSp_Char+6], '=;'	; 3B3Dh
 23742                                  ;ENDIF
 23743                                  	; 06/09/2023
 23744 000014D5 1F                      	pop	ds ; *!*
 23745                                  
 23746                                  ;M029 -- End of changes
 23747                                  
 23748 000014D6 E88106                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 23749 000014D9 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 23750                                  ;--------------------------- End of Line
 23751 000014DB B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 23752 000014DE 53                      	push	bx			;AN000;
 23753                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 23754                                  					;AN000; Get the PARMSX address to
 23755 000014DF 268B1D                  	mov	bx,[es:di]
 23756                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 23757                                  					;AN000; check ORDINAL to see if the minimum
 23758 000014E2 263A0F                  	cmp	cl,[es:bx]	
 23759 000014E5 7303                    	jae	short _$P_Fin		;AN000; positional found.
 23760                                  
 23761 000014E7 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 23762                                  _$P_Fin: 				;AN000;
 23763 000014EA 5B                      	pop	bx			;AN000;
 23764 000014EB E90A01                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 23765                                  ;---------------------------
 23766                                  _$P_Start:				;AN000;
 23767 000014EE 2E8936[0E14]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 23768 000014F3 53                      	push	bx			;AN000; quoted string or file spec.
 23769 000014F4 57                      	push	di			;AN000;
 23770 000014F5 55                      	push	bp			;AN000;
 23771                                  	;;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 23772                                  	; 02/11/2022
 23773                                  	;lea	bx,[_$P_STRING_BUF]
 23774                                  	; 07/09/2023
 23775 000014F6 BB[1614]                	mov	bx,_$P_STRING_BUF
 23776 000014F9 2EF606[0D14]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 23777 000014FF 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 23778                                  
 23779                                  _$P_Pack_Loop:				;AN000;
 23780 00001501 AC                      	lodsb				;AN000; Pick a operand from buffer
 23781 00001502 E8FA06                  	call	_$P_Chk_Switch		;AN000; Check switch character
 23782 00001505 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 23783                                  
 23784 00001507 E87206                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 23785 0000150A 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 23786                                  
 23787 0000150C E8A206                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 23788 0000150F 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 23789                                  
 23790 00001511 2EF606[0D14]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 23791                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 23792 00001517 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 23793                                  
 23794 00001519 E83E06                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 23795 0000151C EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 23796                                  
 23797                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 23798 0000151E 2EF606[0D14]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 23799 00001524 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 23800                                  
 23801 00001526 4E                      	dec	si			;AN000; (tm08)
 23802 00001527 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 23803                                  
 23804                                  _$P_PL01:				;AN000;
 23805 00001529 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 23806 0000152C 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 23807 0000152E 7506                    	jne	short _$P_PL00 		;AN000; then
 23808                                  
 23809 00001530 2E800E[0D14]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 23810                                  _$P_PL00:				;AN000;
 23811 00001536 43                      	inc	bx			;AN000; ready to see next byte
 23812 00001537 E8DE06                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 23813 0000153A 73C5                    	jnc	short _$P_Pack_Loop	;AN000; if no, process to next byte
 23814                                  
 23815 0000153C AC                      	lodsb				;AN000; if yes, store
 23816 0000153D 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 23817 00001540 43                      	inc	bx			;AN000; update pointer
 23818 00001541 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 23819                                  
 23820                                  _$P_Pack_End_BY_EOL:			;AN000;
 23821 00001543 4E                      	dec	si			;AN000; backup si pointer
 23822                                  _$P_Pack_End:				;AN000;
 23823 00001544 2E8936[0314]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 23824                                  	; 07/09/2023
 23825                                  	;mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 23826 00001549 30E4                    	xor	ah,ah ; 0 ; *
 23827 0000154B 2E8827                  	mov	[cs:bx],ah ; _$P_NULL	;AN000; put NULL at the end
 23828                                  	;
 23829 0000154E 2E891E[1214]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 23830                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 23831 00001553 268B1D                  	mov	bx,[es:di]
 23832                                  	;;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 23833                                  	; 02/11/2022
 23834                                  	;lea	si,[_$P_STRING_BUF]
 23835                                  	; 07/09/2023
 23836 00001556 BE[1614]                	mov	si,_$P_STRING_BUF
 23837 00001559 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 23838 0000155D 7440                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 23839                                  
 23840 0000155F 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 23841 00001563 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 23842                                  
 23843 00001565 2EF606[0D14]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 23844 0000156B 7552                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 23845                                  
 23846                                  _$P_Positional_Manager:			;AN000; else process as positional
 23847 0000156D 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23848                                  	; 07/09/2023
 23849                                  	;xor	ah,ah			;AN000; ax = maxp
 23850 00001571 2E3906[FF13]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 23851 00001576 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 23852                                  
 23853 00001578 2EA1[FF13]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 23854 0000157C D1E0                    	shl	ax,1			;AN000; ax = ax*2
 23855 0000157E 43                      	inc	bx			;AC035; add '2' to
 23856 0000157F 43                      	inc	bx			;AC035;  BX reg
 23857                                  					;AN000; now bx points to 1st CONTROL
 23858 00001580 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 23859 00001582 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 23860 00001585 E87200                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 23861 00001588 EB53                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23862                                  
 23863                                  _$P_Too_Many_Error:			;AN000;
 23864 0000158A 2EC706[0114]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 23865 00001591 EB4A                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 23866                                  
 23867                                  	; 07/09/2023 - Retro DOSD v4.2 IO.SYS (Optimization)
 23868                                  	; (PCDOS 7.1 IBMBIO.COM - SYSINIT:1E06h)
 23869                                  get_maxp:
 23870                                  	;mov	al,[es:bx+1]
 23871 00001593 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23872                                  	; 07/09/2023
 23873                                  	; ah=0 ; *
 23874                                  	;xor	ah,ah ; 0		;AN000; ax = maxp
 23875 00001597 30ED                    	xor	ch,ch ; **
 23876 00001599 40                      	inc	ax			;AN000;
 23877 0000159A D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 23878 0000159C 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 23879 0000159E C3                      	retn
 23880                                  
 23881                                  _$P_SW_Manager:				;AN000;
 23882                                  	; 07/09/2023
 23883                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23884                                  	;xor	ah,ah			;AN000; ax = maxp
 23885                                  	;inc	ax			;AN000;
 23886                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23887                                  	;add	bx,ax			;AN000; now bx points to maxs
 23888 0000159F E8F1FF                  	call	get_maxp ; 07/09/2023
 23889                                  
 23890 000015A2 268A0F                  	mov	cl,[es:bx]		;AN000;
 23891                                  	; 07/09/2023
 23892                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxs
 23893                                  	;or	cx,cx			;AN000; at least one switch ?
 23894                                  	;jz	short _$P_SW_Not_Found 	;AN000;
 23895                                  	; 07/07/2023
 23896 000015A5 E30F                    	jcxz	_$P_SW_Not_Found	; no
 23897                                  
 23898 000015A7 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 23899                                  
 23900                                  _$P_SW_Mgr_Loop: 			;AN000;
 23901 000015A8 53                      	push	bx			;AN000;
 23902 000015A9 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 23903 000015AC E8A900                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 23904 000015AF 5B                      	pop	bx			;AN000;
 23905 000015B0 732B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 23906                                  
 23907 000015B2 43                      	inc	bx			;AC035; add '2' to
 23908 000015B3 43                      	inc	bx			;AC035;  BX reg
 23909                                  					;AN000; else bx points to the next CONTROL
 23910 000015B4 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 23911                                  
 23912                                  _$P_SW_Not_Found:			;AN000;
 23913 000015B6 2EC706[0114]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 23914 000015BD EB1E                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 23915                                  
 23916                                  _$P_Key_Manager: 			;AN000;
 23917                                  	; 07/09/2023
 23918                                  	;mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 23919                                  	;xor	ah,ah			;AN000; ax = maxp
 23920                                  	;inc	ax			;AN000;
 23921                                  	;shl	ax,1			;AN000; ax = (ax+1)*2
 23922                                  	;add	bx,ax			;AN000; now bx points to maxs
 23923 000015BF E8D1FF                  	call	get_maxp ; 07/09/2023
 23924                                  	
 23925 000015C2 268A07                  	mov	al,[es:bx]		;AN000;
 23926 000015C5 30E4                    	xor	ah,ah ; 0		;AN000; ax = maxs
 23927 000015C7 D1E0                    	shl	ax,1			;AN000;
 23928 000015C9 40                      	inc	ax			;AN000; ax = ax*2+1
 23929 000015CA 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 23930 000015CC 268A0F                  	mov	cl,[es:bx]		;AN000;
 23931                                  	; 07/09/2023
 23932                                  	;xor	ch,ch ; ** (ch=0)	;AN000; cx = maxk
 23933                                  	;or	cx,cx			;AN000; at least one keyword ?
 23934                                  	;jz	short _$P_Key_Not_Found	;AN000;
 23935                                  	; 07/07/2023
 23936 000015CF E305                    	jcxz	_$P_Key_Not_Found	; no
 23937                                  
 23938 000015D1 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 23939                                  
 23940                                  _$P_Key_Mgr_Loop:			;AN000;
 23941                                  	; 07/09/2023
 23942                                  	; ('_$P_Chk_Key_Control' contains only 'stc' instruction)
 23943                                  	; (always returns with cf=1)
 23944                                  	;push	bx			;AN000;
 23945                                  	;mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 23946                                  	;call	_$P_Chk_Key_Control	;AN000; do process for keyword
 23947                                  	;pop	bx			;AN000;
 23948                                  	;jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 23949                                  	; 07/09/2023
 23950                                  	; cf=1 (after 'call _$P_Chk_Key_Control')
 23951                                  
 23952 000015D2 43                      	inc	bx			;AC035; add '2' to
 23953 000015D3 43                      	inc	bx			;AC035;  BX reg
 23954                                  					;AN000; else bx points to the next CONTROL
 23955 000015D4 E2FC                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 23956                                  
 23957                                  _$P_Key_Not_Found:			;AN000;
 23958 000015D6 2EC706[0114]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 23959                                  _$P_Return_to_Caller:			;AN000;
 23960 000015DD 5D                      	pop	bp			;AN000;
 23961 000015DE 5F                      	pop	di			;AN000;
 23962 000015DF 5B                      	pop	bx			;AN000;
 23963 000015E0 2E8B0E[FF13]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 23964 000015E5 2EA1[0114]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 23965 000015E9 2E8B36[0314]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 23966 000015EE 2E8B16[0514]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 23967 000015F3 2E8A1E[0714]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 23968                                  _$P_Single_Exit: 			;AN000;
 23969 000015F8 F8                      	clc				;AN000;
 23970 000015F9 C3                      	retn				;AN000;
 23971                                  
 23972                                  ;***********************************************************************
 23973                                  ; _$P_Chk_Pos_Control
 23974                                  ;
 23975                                  ; Function: Parse CONTROL block for a positional
 23976                                  ;
 23977                                  ; Input:     ES:BX -> CONTROL block
 23978                                  ;	     cs:SI -> _$P_STRING_BUF
 23979                                  ;
 23980                                  ; Output:    None
 23981                                  ;
 23982                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 23983                                  ;
 23984                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 23985                                  ;***********************************************************************
 23986                                  
 23987                                  _$P_Chk_Pos_Control:
 23988 000015FA 50                      	push	ax			;AN000;
 23989                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 23990 000015FB 268B07                  	mov	ax,[es:bx]
 23991                                  	; 12/12/2022
 23992 000015FE A802                    	test	al,_$P_Repeat
 23993                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 23994 00001600 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 23995                                  
 23996 00001602 2EFF06[FF13]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 23997                                  _$P_CPC00:				;AN000;
 23998 00001607 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 23999 0000160B 7517                    	jne	short _$P_CPC01		;AN000;
 24000                                  
 24001                                  	; 12/12/2022
 24002 0000160D A801                    	test	al,_$P_Optional
 24003                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 24004 0000160F 7509                    	jnz	short _$P_CPC02		;AN000;
 24005                                  
 24006 00001611 2EC706[0114]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 24007 00001618 EB0D                    	jmp	short _$P_CPC_Exit	;AN000;
 24008                                  
 24009                                  _$P_CPC02:				;AN000;
 24010 0000161A 50                      	push	ax			;AN000;
 24011                                  	;mov	al,_$P_String		;AN000; if it is optional return NULL
 24012                                  	;mov	ah,_$P_No_Tag		;AN000; no item tag indication
 24013                                  	; 14/08/2023
 24014 0000161B B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24015 0000161E E89600                  	call	_$P_Fill_Result		;AN000;
 24016 00001621 58                      	pop	ax			;AN000;
 24017 00001622 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 24018                                  
 24019                                  _$P_CPC01:				;AN000;
 24020 00001624 E81101                  	call	_$P_Check_Match_Flags	;AN000;
 24021                                  _$P_CPC_Exit:				;AN000;
 24022 00001627 58                      	pop	ax			;AN000;
 24023 00001628 C3                      	retn				;AN000;
 24024                                  
 24025                                  ;***********************************************************************
 24026                                  ; _$P_Chk_Key_Control
 24027                                  ;
 24028                                  ; Function: Parse CONTROL block for a keyword
 24029                                  ;
 24030                                  ; Input:     ES:BX -> CONTROL block
 24031                                  ;	     cs:SI -> _$P_STRING_BUF
 24032                                  ;
 24033                                  ; Output:    CY = 1 : not match
 24034                                  ;
 24035                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 24036                                  ;
 24037                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 24038                                  ;***********************************************************************
 24039                                  
 24040                                  ; 07/09/2023
 24041                                  ;_$P_Chk_Key_Control:
 24042                                  ;	stc				;AN000; this logic works when the KeySW
 24043                                  ;	retn				;AN000; is reset.
 24044                                  
 24045                                  ;***********************************************************************
 24046                                  ; _$P_Search_KEYorSW:
 24047                                  ;
 24048                                  ; Function: Seach specified keyword or switch from CONTROL
 24049                                  ;
 24050                                  ; Input:     ES:BX -> CONTROL block
 24051                                  ;	     cs:SI -> _$P_STRING_BUF
 24052                                  ;
 24053                                  ; Output:    CY = 1 : not match
 24054                                  ;
 24055                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 24056                                  ;***********************************************************************
 24057                                  
 24058                                  	; 25/10/2022 - Retro DOS v4.0
 24059                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 24060                                  
 24061                                  _$P_Search_KEYorSW:			;AN000;
 24062 00001629 55                      	push	bp			;AN000;
 24063 0000162A 51                      	push	cx			;AN000;
 24064 0000162B 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 24065 0000162F 30ED                    	xor	ch,ch			;AN000; and set it to cx
 24066                                  	;or	cx,cx			;AN000; No synonyms specified ?
 24067                                  	;jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 24068                                  	; 14/08/2023
 24069 00001631 E30D                    	jcxz	_$P_KEYorSW_Not_Found
 24070                                  
 24071                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 24072                                  	; 25/10/2022
 24073 00001633 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 24074                                  	;lea	bp,[bx+9]
 24075                                  _$P_KEYorSW_Loop:			;AN000;
 24076 00001636 E8BE03                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 24077 00001639 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 24078                                  
 24079 0000163B E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 24080 0000163E E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 24081                                  _$P_KEYorSW_Not_Found:			;AN000;
 24082 00001640 F9                      	stc				;AN000; indicate not found in synonym list
 24083 00001641 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 24084                                  
 24085                                  _$P_KEYorSW_Found:			;AN000;
 24086 00001643 2E892E[1414]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 24087 00001648 F8                      	clc				;AN000; indicate found
 24088                                  _$P_KEYorSW_Exit:			;AN000;
 24089 00001649 59                      	pop	cx			;AN000;
 24090 0000164A 5D                      	pop	bp			;AN000;
 24091 0000164B C3                      	retn				;AN000;
 24092                                   
 24093                                  ;***********************************************************************
 24094                                  ; _$P_MoveBP_NUL
 24095                                  ;***********************************************************************
 24096                                  
 24097                                  _$P_MoveBP_NUL:
 24098                                  _$P_MBP_Loop:				;AN000;
 24099                                  	; 11/12/2022
 24100 0000164C 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 24101                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 24102                                  	; (SYSINIT:18DBh)
 24103                                   	;cmp     byte [es:bp+0],0
 24104 00001651 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 24105                                  
 24106 00001653 45                      	inc	bp			;AN000; until
 24107 00001654 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 24108                                  
 24109                                  _$P_MBP_Exit:				;AN000;
 24110 00001656 45                      	inc	bp			;AN000; bp points to next to NULL
 24111 00001657 C3                      	retn				;AN000;
 24112                                  
 24113                                  ;***********************************************************************
 24114                                  ; _$P_Chk_SW_Control
 24115                                  ;
 24116                                  ; Function: Parse CONTROL block for a switch
 24117                                  ;
 24118                                  ; Input:     ES:BX -> CONTROL block
 24119                                  ;	     cs:SI -> _$P_STRING_BUF
 24120                                  ;
 24121                                  ; Output:    CY = 1 : not match
 24122                                  ;
 24123                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 24124                                  ;
 24125                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 24126                                  ;***********************************************************************
 24127                                  
 24128                                  _$P_Chk_SW_Control:
 24129                                  
 24130                                  ;IF SwSW				;AN000;(Check if switch is supported)
 24131                                  	;or	byte [cs:_$P_Flags+1],10h
 24132 00001658 2E800E[0D14]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 24133 0000165E E8C8FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 24134 00001661 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 24135                                  
 24136                                  	;and	[cs:_$P_Flags+],0EFh
 24137 00001663 2E8026[0D14]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 24138                                  					;AC034; reset the indicator previously set
 24139 00001669 50                      	push	ax			;AN000; 	      /switch:
 24140 0000166A 2EA1[1014]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 24141 0000166E 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 24142 00001670 2E0106[0E14]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 24143 00001675 58                      	pop	ax			;AN000;
 24144                                  
 24145 00001676 2E8B36[1014]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 24146 0000167B 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 24147 0000167F 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 24148                                  
 24149 00001681 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 24150 00001686 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 24151                                  
 24152 00001688 2EC706[0114]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 24153 0000168F EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 24154                                  
 24155                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 24156                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 24157 00001691 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 24158 00001695 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 24159                                  
 24160                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 24161                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 24162                                  	;test	word [es:bx],1
 24163                                  	; 12/12/2022
 24164                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 24165 00001697 26F60701                	test	byte [es:bx],_$P_Optional
 24166 0000169B 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 24167                                  
 24168 0000169D 2EC706[0114]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 24169 000016A4 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 24170                                  
 24171                                  _$P_CSW00:				;AN000;
 24172 000016A6 E88F00                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 24173 000016A9 F8                      	clc				;AN000; indicate match
 24174                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 24175                                  	; 12/12/2022
 24176 000016AA C3                      	retn
 24177                                  
 24178                                  _$P_Chk_SW_Err0: 			;AN000;
 24179 000016AB F9                      	stc				;AN000; not found in switch synonym list
 24180                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 24181                                  	; 12/12/2022
 24182 000016AC C3                      	retn	
 24183                                  
 24184                                  _$P_Chk_SW_Exit: 			;AN000;
 24185 000016AD 50                      	push	ax			;AN000;
 24186                                  	;mov	al,_$P_String		;AN000;
 24187                                  	;mov	ah,_$P_No_Tag		;AN000;
 24188                                  	; 14/08/2023
 24189 000016AE B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24190 000016B1 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 24191 000016B4 58                      	pop	ax			;AN000;
 24192 000016B5 F8                      	clc				;AN000;
 24193                                  _$P_Chk_SW_Single_Exit:			;AN000;
 24194 000016B6 C3                      	retn				;AN000;
 24195                                  ;ELSE					;AN000;(of IF SwSW)
 24196                                  ;	stc				;AN000; this logic works when the SwSW
 24197                                  ;	retn				;AN000; is reset.
 24198                                  
 24199                                  ;***********************************************************************
 24200                                  ; _$P_Fill_Result
 24201                                  ;
 24202                                  ; Function: Fill the result buffer
 24203                                  ;
 24204                                  ; Input:    AH = Item tag
 24205                                  ;	    AL = type
 24206                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 24207                                  ;		  AL = 2: DX has index(offset) into value list
 24208                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 24209                                  ;		  AL = 7: DX has year, CL has month and CH has date
 24210                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 24211                                  ;			  amd CH has hundredths
 24212                                  ;		  AL = else: cs:SI points to returned string buffer
 24213                                  ;	    ES:BX -> CONTROL block
 24214                                  ;
 24215                                  ; Output:   None
 24216                                  ;
 24217                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 24218                                  ;
 24219                                  ; Vars: _$P_DX(W)
 24220                                  ;***********************************************************************
 24221                                  
 24222                                  _$P_Fill_Result:
 24223 000016B7 57                      	push	di			;AN000;
 24224 000016B8 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 24225                                  					;AN000; di points to result buffer
 24226 000016BC 2E893E[0514]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 24227                                  	;mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 24228                                  	;mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 24229                                  	; 07/09/2023
 24230                                  	;mov	[es:di+_$P_Result_Blk.Type], ax
 24231 000016C1 268905                  	mov	[es:di],ax		; store type (al) and item tag (ah)
 24232                                  
 24233 000016C4 50                      	push	ax			;AN000;
 24234 000016C5 2EA1[1414]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 24235 000016C9 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 24236                                  					;AN000;   then set it to the result
 24237 000016CD 58                      	pop	ax			;AN000;
 24238                                  _$P_RLT04:				;AN000;
 24239 000016CE 3C01                    	cmp	al,_$P_Number		;AN000; if number
 24240 000016D0 750A                    	jne	short _$P_RLT00		;AN000;
 24241                                  
 24242                                  _$P_RLT02:				;AN000;
 24243 000016D2 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 24244 000016D6 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 24245 000016DA EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 24246                                  
 24247                                  _$P_RLT00:				;AN000;
 24248 000016DC 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 24249 000016DE 7506                    	jne	short _$P_RLT01		;AN000;
 24250                                  
 24251 000016E0 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx 
 24252                                  					;AN000; then store list index
 24253 000016E4 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 24254                                  
 24255                                  _$P_RLT01:				;AN000;
 24256 000016E6 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 24257 000016E8 74E8                    	je	short _$P_RLT02		;AN000;
 24258                                  
 24259 000016EA 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 24260 000016EC 74E4                    	je	short _$P_RLT02		;AN000;
 24261                                  
 24262 000016EE 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 24263 000016F0 7506                    	jne	short _$P_RLT03		;AN000;
 24264                                  
 24265 000016F2 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 24266 000016F6 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 24267                                  
 24268                                  _$P_RLT03:				;AN000;
 24269 000016F8 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 24270 000016FA 750F                    	jne	short _$P_RLT05		;AN000;
 24271                                  
 24272 000016FC 2EA1[0E14]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 24273 00001700 40                      	inc	ax			;AN000; skip left Parentheses
 24274 00001701 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 24275 00001705 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 24276 00001709 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 24277                                  
 24278                                  _$P_RLT05:				;AN000;
 24279                                  ;------------------------  AL = 3, 5, or 9
 24280 0000170B 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 24281                                  					;AN000; store offset of STRING_BUF
 24282 0000170F 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 24283                                  					;AN031; store segment of STRING_BUF
 24284 00001713 50                      	push	ax			;AN000;
 24285 00001714 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 24286                                  					;AN000; need CAPS by file table?
 24287 00001719 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 24288                                  
 24289 0000171B B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 24290 0000171D EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 24291                                  
 24292                                  _$P_RLT_CAP00:				;AN000;
 24293 0000171F 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 24294                                  					;AN000; need CAPS by char table ?
 24295 00001724 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 24296                                  
 24297 00001726 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 24298                                  _$P_RLT_CAP02:				;AN000;
 24299 00001728 E8DF00                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 24300                                  _$P_RLT_CAP01:				;AN000;
 24301 0000172B 58                      	pop	ax			;AN000;
 24302 0000172C 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 24303                                  					;AN000; removing colon at end ?
 24304 00001731 7403                    	jz	short _$P_RLT_Exit	;AN000;
 24305                                  
 24306 00001733 E8AE00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 24307                                  _$P_RLT_Exit:				;AN000;
 24308 00001736 5F                      	pop	di			;AN000;
 24309 00001737 C3                      	retn				;AN000;
 24310                                  
 24311                                  ;***********************************************************************
 24312                                  ; _$P_Check_Match_Flags
 24313                                  ;
 24314                                  ; Function:  Check the mutch_flags and make the exit code and set the
 24315                                  ;	     result buffer
 24316                                  ;
 24317                                  ;	    Check for types in this order:
 24318                                  ;		Complex
 24319                                  ;		Date
 24320                                  ;		Time
 24321                                  ;		Drive
 24322                                  ;		Filespec
 24323                                  ;		Quoted String
 24324                                  ;		Simple String
 24325                                  ;
 24326                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24327                                  ;	     ES:BX -> CONTROL block
 24328                                  ;
 24329                                  ; Output:    None
 24330                                  ;
 24331                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 24332                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 24333                                  ;	     _$P_Drive_Format
 24334                                  ;***********************************************************************
 24335                                  
 24336                                  	; 25/10/2022 - Retro DOS v4.0
 24337                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 24338                                  
 24339                                  	; 12/12/2022
 24340                                  _$P_Check_Match_Flags:
 24341 00001738 2EC606[A414]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 24342                                  					;AN033;AC034;; clear filespec error flag.
 24343 0000173E 50                      	push	ax			;AN000;
 24344                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 24345 0000173F 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 24346 00001742 09C0                    	or	ax,ax			;AC035; test ax for zero
 24347 00001744 7517                    	jnz	short _$P_Mat		;AN000; (tm12)
 24348 00001746 50                      	push	ax			;AN000; (tm12)
 24349 00001747 53                      	push	bx			;AN000; (tm12)
 24350 00001748 52                      	push	dx			;AN000; (tm12)
 24351 00001749 57                      	push	di			;AN000; (tm12)
 24352 0000174A 2EC706[0114]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 24353                                  	;mov	ah,_$P_No_Tag		;AN000; (tm12)
 24354                                  	;mov	al,_$P_String		;AN000; (tm12)
 24355                                  	; 14/08/2023
 24356 00001751 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24357 00001754 E860FF                  	call	_$P_Fill_Result		;AN000; (tm12)
 24358 00001757 5F                      	pop	di			;AN000; (tm12)
 24359 00001758 5A                      	pop	dx			;AN000; (tm12)
 24360 00001759 5B                      	pop	bx			;AN000; (tm12)
 24361 0000175A 58                      	pop	ax			;AN000; (tm12)
 24362                                  	; 12/12/2022
 24363                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 24364                                  	; 12/12/2022
 24365                                  ;_$P_Mat: 				;AN000; (tm12)
 24366                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 24367                                  _$P_Bridge:
 24368 0000175B EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 24369                                  	
 24370                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24371                                  	; (SYSINIT:19F9h)
 24372                                  	; 12/12/2022
 24373                                  	;nop	; db 90h
 24374                                  
 24375                                  ; 12/12/2022
 24376                                  _$P_Mat:
 24377                                  _$P_Match03:				;AN000;
 24378                                  	;test	ax,_$P_Num_Val ; 8000h	;AN000; Numeric value
 24379                                  	; 14/08/2023
 24380 0000175D F6C480                  	test	ah,(_$P_Num_Val>>8) ; 80h
 24381 00001760 7412                    	jz	short _$P_Match04	;AN000;
 24382                                  
 24383 00001762 2EC706[0114]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24384 00001769 E81E01                  	call	_$P_Value		;AN000; do process
 24385 0000176C 2E833E[0114]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24386 00001772 7557                    	jne	short _$P_Match_Exit	;AN000;
 24387                                  _$P_Match04:				;AN000;
 24388                                  	;test	ax,_$P_SNum_Val ; 4000h	;AN000; Signed numeric value
 24389                                  	; 14/08/2023
 24390 00001774 F6C440                  	test	ah,(_$P_SNum_Val>>8) ; 40h
 24391 00001777 7412                    	jz	short _$P_Match05	;AN000;
 24392                                  
 24393 00001779 2EC706[0114]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24394 00001780 E8E300                  	call	_$P_SValue		;AN000; do process
 24395 00001783 2E833E[0114]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24396 00001789 7540                    	jne	short _$P_Match_Exit	;AN000;
 24397                                  _$P_Match05:				;AN000;
 24398                                  	;test	ax,_$P_Drv_Only ; 100h	;AN000; Drive only
 24399                                  	; 14/08/2023
 24400 0000178B F6C401                  	test	ah,(_$P_Drv_Only>>8) ; 1
 24401 0000178E 7415                    	jz	short _$P_Match06	;AN000;
 24402                                  
 24403 00001790 2EC706[0114]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24404 00001797 E8FB02                  	call	_$P_File_Format		;AN000; 1st, call file format
 24405 0000179A E87B03                  	call	_$P_Drive_Format	;AN000; check drive format, next
 24406 0000179D 2E833E[0114]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24407 000017A3 7526                    	jne	short _$P_Match_Exit	;AN000;
 24408                                  _$P_Match06:				;AN000;
 24409                                  	;test	ax,_$P_File_Spc ; 200h	;AN000; File spec
 24410                                  	; 14/08/2023
 24411 000017A5 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 24412 000017A8 7412                    	jz	short _$P_Match07	;AN000;
 24413                                  
 24414 000017AA 2EC706[0114]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24415 000017B1 E8E102                  	call	_$P_File_Format		;AN000; do process
 24416 000017B4 2E833E[0114]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 24417 000017BA 750F                    	jne	short _$P_Match_Exit	;AN000;
 24418                                  _$P_Match07:				;AN000;
 24419                                  	;test	ax,_$P_Simple_S	; 2000h	;AN000; Simple string
 24420                                  	; 14/08/2023
 24421 000017BC F6C420                  	test	ah,(_$P_Simple_S>>8) ; 20h
 24422 000017BF 740A                    	jz	short _$P_Match09	;AN000;
 24423                                  
 24424 000017C1 2EC706[0114]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 24425 000017C8 E8C301                  	call	_$P_Simple_String	;AN000; do process
 24426                                  _$P_Match09:				;AN000;
 24427                                  _$P_Match_Exit:				;AN000;
 24428 000017CB 2E833E[A414]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 24429 000017D1 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 24430 000017D3 2E833E[0114]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 24431 000017D9 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 24432 000017DB 2EC706[0114]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 24433                                  _$P_Match2_Exit: 			;AN033;
 24434 000017E2 58                      	pop	ax			;AN000;
 24435 000017E3 C3                      	retn				;AN000;
 24436                                  
 24437                                  ;***********************************************************************
 24438                                  ; _$P_Remove_Colon;
 24439                                  ;
 24440                                  ; Function: Remove colon at end
 24441                                  ;
 24442                                  ; Input:    cs:SI points to string buffer to be examineed
 24443                                  ;
 24444                                  ; Output:   None
 24445                                  ;
 24446                                  ; Use:	_$P_Chk_DBCS
 24447                                  ;***********************************************************************
 24448                                  
 24449                                  _$P_Remove_Colon:
 24450 000017E4 50                      	push	ax			;AN000;
 24451 000017E5 56                      	push	si			;AN000;
 24452                                  _$P_RCOL_Loop:				;AN000;
 24453 000017E6 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24454 000017E9 08C0                    	or	al,al			;AN000; end of string ?
 24455 000017EB 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 24456                                  
 24457 000017ED 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 24458 000017EF 750D                    	jne	short _$P_RCOL00	;AN000;
 24459                                  
 24460 000017F1 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 24461 000017F6 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 24462                                  
 24463 000017F8 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 24464 000017FC EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 24465                                  
 24466                                  _$P_RCOL00:				;AN000;
 24467 000017FE E81704                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 24468 00001801 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 24469                                  
 24470 00001803 46                      	inc	si			;AN000; if yes, skip trailing byte
 24471                                  _$P_RCOL01:				;AN000;
 24472 00001804 46                      	inc	si			;AN000; si points to next byte
 24473 00001805 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 24474                                  
 24475                                  _$P_RCOL_Exit:				;AN000;
 24476 00001807 5E                      	pop	si			;AN000;
 24477 00001808 58                      	pop	ax			;AN000;
 24478 00001809 C3                      	retn				;AN000;
 24479                                  
 24480                                  ;***********************************************************************
 24481                                  ; _$P_Do_CAPS_String;
 24482                                  ;
 24483                                  ; Function: Perform capitalization along with the file case map table
 24484                                  ;	    or character case map table.
 24485                                  ;
 24486                                  ; Input:    AL = 2 : Use character table
 24487                                  ;	    AL = 4 : Use file table
 24488                                  ;	    cs:SI points to string buffer to be capitalized
 24489                                  ;
 24490                                  ; Output:   None
 24491                                  ;
 24492                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 24493                                  ;***********************************************************************
 24494                                  
 24495                                  _$P_Do_CAPS_String:
 24496 0000180A 56                      	push	si			;AN000;
 24497 0000180B 52                      	push	dx			;AN000;
 24498 0000180C 88C2                    	mov	dl,al			;AN000; save info id
 24499                                  
 24500                                  _$P_DCS_Loop:				;AN000;
 24501 0000180E 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 24502 00001811 E80404                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 24503 00001814 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 24504                                  
 24505 00001816 08C0                    	or	al,al			;AN000; end of string ?
 24506 00001818 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 24507                                  
 24508 0000181A E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 24509 0000181D 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 24510 00001820 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 24511                                  _$P_DCS00:				;AN000;
 24512 00001822 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 24513                                  _$P_DCS01:				;AN000;
 24514 00001823 46                      	inc	si			;AN000; si point to next byte
 24515 00001824 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 24516                                  _$P_DCS_Exit:				;AN000;
 24517 00001826 5A                      	pop	dx			;AN000;
 24518 00001827 5E                      	pop	si			;AN000;
 24519 00001828 C3                      	retn
 24520                                  
 24521                                  ;***********************************************************************
 24522                                  ; _$P_Do_CAPS_Char;
 24523                                  ;
 24524                                  ; Function: Perform capitalization along with the file case map table
 24525                                  ;	    or character case map table.
 24526                                  ;
 24527                                  ; Input:    DL = 2 : Use character table
 24528                                  ;	    DL = 4 : Use file table
 24529                                  ;	    AL = character to be capitalized
 24530                                  ;
 24531                                  ; Output:   None
 24532                                  ;
 24533                                  ; Use:	INT 21h /w AH=65h
 24534                                  ;***********************************************************************
 24535                                  
 24536                                  _$P_Do_CAPS_Char:
 24537 00001829 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 24538 0000182B 730B                    	jae	short _$P_DCC_Go	;AN000;
 24539                                  
 24540 0000182D 3C61                    	cmp	al,"a"                  ;AN000; if no,
 24541 0000182F 7234                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 24542                                  
 24543 00001831 3C7A                    	cmp	al,"z"                  ;AN000;
 24544 00001833 7730                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 24545                                  
 24546 00001835 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 24547                                  	;jmp	short _$P_CAPS_Ret	;AN000;
 24548                                  	; 14/08/2023
 24549 00001837 C3                      	retn
 24550                                  
 24551                                  _$P_DCC_Go:				;AN000;
 24552 00001838 53                      	push	bx			;AN000;
 24553 00001839 06                      	push	es			;AN000;
 24554 0000183A 57                      	push	di			;AN000;
 24555                                  
 24556                                  	;;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 24557                                  	;lea	di,[_$P_Char_CAP_Ptr]
 24558                                  	; 07/09/2023
 24559 0000183B BF[9614]                	mov	di,_$P_Char_CAP_Ptr
 24560                                  _$P_DCC00:				;AN000;
 24561 0000183E 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 24562 00001841 7415                    	je	short _$P_DCC01		;AN000; if no,
 24563                                  
 24564                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 24565                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 24566                                  ; call, regardless of what base register is currently be defined as cs.
 24567                                  
 24568 00001843 50                      	push	ax			;AN000; get CAPS table thru DOS call
 24569 00001844 51                      	push	cx			;AN000;
 24570 00001845 52                      	push	dx			;AN000;
 24571                                  
 24572 00001846 0E                      	push	cs			;AC036; pass current base seg into
 24573                                  					;(Note: this used to push CS.  BUG...
 24574 00001847 07                      	pop	es			;AN000;   ES reg, required for
 24575                                  					;get extended country information
 24576                                  	;mov	al,dl ; function	;AN000; upper case table
 24577                                  	; 14/08/2023
 24578 00001848 92                      	xchg	ax,dx
 24579 00001849 B465                    	mov	ah,_$P_DOS_Get_TBL ; 65h ;AN000; get extended CDI
 24580 0000184B BBFFFF                  	mov	bx,_$P_DOSTBL_Def ; -1	;AN000; get active CON
 24581 0000184E B90500                  	mov	cx,_$P_DOSTBL_BL ; 5	;AN000; buffer length
 24582                                  	;mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 24583                                  	; 14/08/2023
 24584 00001851 89DA                    	mov	dx,bx ; 0FFFFh
 24585                                  					;DI already set to point to buffer
 24586 00001853 CD21                    	int	21h			;AN000; es:di point to buffer that
 24587                                  					;now has been filled in with info
 24588 00001855 5A                      	pop	dx			;AN000;
 24589 00001856 59                      	pop	cx			;AN000;
 24590 00001857 58                      	pop	ax			;AN000;
 24591                                  
 24592                                  _$P_DCC01:				;AN000;
 24593                                  
 24594                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 24595                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 24596                                  ; regardless of which base reg is currently the cs reg.
 24597                                  
 24598                                  	; 14/08/2023
 24599                                  	;mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 24600                                  	;mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 24601 00001858 2EC45D01                	les	bx,[cs:di+_$P_DOS_TBL.Off]
 24602 0000185C 43                      	inc	bx			;AC035; add '2' to
 24603 0000185D 43                      	inc	bx			;AC035;  BX reg
 24604                                  					;AN000; skip length field
 24605 0000185E 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 24606                                  	;xlat	es:[bx] 		;AN000; perform case map
 24607 00001860 26                      	es
 24608 00001861 D7                      	xlat
 24609 00001862 5F                      	pop	di			;AN000;
 24610 00001863 07                      	pop	es			;AN000;
 24611 00001864 5B                      	pop	bx			;AN000;
 24612                                  _$P_CAPS_Ret:				;AN000;
 24613 00001865 C3                      	retn				;AN000;
 24614                                  
 24615                                  ;***********************************************************************
 24616                                  ; _$P_Value / _$P_SValue
 24617                                  ;
 24618                                  ; Function:  Make 32bit value from cs:SI and see value list
 24619                                  ;	     and make result buffer.
 24620                                  ;	     _$P_SValue is an entry point for the signed value
 24621                                  ;	     and this will simply call _$P_Value after the handling
 24622                                  ;	     of the sign character, "+" or "-"
 24623                                  ;
 24624                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24625                                  ;	     ES:BX -> CONTROL block
 24626                                  ;
 24627                                  ; Output:    None
 24628                                  ;
 24629                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 24630                                  ;
 24631                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 24632                                  ;***********************************************************************
 24633                                  
 24634                                  	; 26/10/2022 - Retro DOS v4.0
 24635                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 24636                                  
 24637                                  _$P_SValue:				;AN000; when signed value here
 24638 00001866 50                      	push	ax			;AN000;
 24639 00001867 2E800E[0D14]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 24640 0000186D 2E8026[0D14]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 24641 00001873 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 24642 00001876 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 24643 00001878 740A                    	je	short _$P_SVal00	;AN000;
 24644                                  
 24645 0000187A 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 24646 0000187C 7507                    	jne	short _$P_Sval01	;AN000; else
 24647                                  
 24648 0000187E 2E800E[0D14]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 24649                                  _$P_SVal00:				;AN000;
 24650 00001884 46                      	inc	si			;AN000; skip sign char
 24651                                  _$P_Sval01:				;AN000;
 24652 00001885 E80200                  	call	_$P_Value		;AN000; and process value
 24653 00001888 58                      	pop	ax			;AN000;
 24654 00001889 C3                      	retn
 24655                                  
 24656                                  ;***********************************************************************
 24657                                  
 24658                                  	; 26/10/2022
 24659                                  _$P_Value:				;AN000;
 24660 0000188A 50                      	push	ax			;AN000;
 24661 0000188B 51                      	push	cx			;AN000;
 24662 0000188C 52                      	push	dx			;AN000;
 24663 0000188D 56                      	push	si			;AN000;
 24664 0000188E 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 24665 00001890 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 24666 00001892 53                      	push	bx			;AN000; save control pointer
 24667                                  _$P_Value_Loop:				;AN000;
 24668 00001893 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 24669 00001896 08C0                    	or	al,al			;AN000; end of line ?
 24670 00001898 7442                    	jz	short _$P_Value00	;AN000;
 24671                                  
 24672 0000189A E8E600                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 24673 0000189D 7239                    	jc	short _$P_Value_Err0	;AN000;
 24674                                  
 24675 0000189F 30E4                    	xor	ah,ah			;AN000;
 24676 000018A1 89C5                    	mov	bp,ax			;AN000; save binary number
 24677 000018A3 D1E2                    	shl	dx,1			;AN000; to have 2*x
 24678 000018A5 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24679 000018A7 E8C700                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24680 000018AA 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24681                                  
 24682 000018AC 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 24683 000018AE 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 24684 000018B0 D1E2                    	shl	dx,1			;AN000; to have 4*x
 24685 000018B2 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24686 000018B4 E8BA00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24687 000018B7 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24688                                  
 24689 000018B9 D1E2                    	shl	dx,1			;AN000; to have 8*x
 24690 000018BB D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 24691 000018BD E8B100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24692 000018C0 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24693                                  
 24694 000018C2 01DA                    	add	dx,bx			;AN000; now have 10*x
 24695 000018C4 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 24696 000018C6 E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24697 000018C9 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24698                                  
 24699 000018CB 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 24700 000018CD 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 24701 000018D0 E89E00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 24702 000018D3 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 24703                                  
 24704 000018D5 46                      	inc	si			;AN000; update pointer
 24705 000018D6 EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 24706                                  ;
 24707                                  _$P_Value_Err0:				;AN000;
 24708 000018D8 5B                      	pop	bx			;AN000;
 24709 000018D9 E98300                  	jmp	_$P_Value_Err		;AN000; Bridge
 24710                                  ;
 24711                                  _$P_Value00:				;AN000;
 24712 000018DC 5B                      	pop	bx			;AN000; restore control pointer
 24713 000018DD 2EF606[0D14]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 24714 000018E3 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 24715                                  
 24716 000018E5 F7D1                    	not	cx			;AN000; +
 24717 000018E7 F7D2                    	not	dx			;AN000; |- Make 2's complement
 24718 000018E9 83C201                  	add	dx,1			;AN000; |
 24719 000018EC 83D100                  	adc	cx,0			;AN000; +
 24720                                  
 24721                                  _$P_Value01:				;AN000; / nval = 0
 24722 000018EF 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 24723 000018F3 268A04                  	mov	al,[es:si]		;AN000; get nval
 24724                                  	; 07/09/2023
 24725                                  	;cmp	al,_$P_nval_None ; 0	;AN000; no value list ?
 24726                                  	;;*jne	short _$P_Value02	;AN000;
 24727                                  	;;* 07/07/2023
 24728                                  	;je	short _$P_Value05
 24729                                  	; 07/09/2023
 24730 000018F6 08C0                    	or	al,al
 24731 000018F8 7459                    	jz	short _$P_Value05 ; _$P_nval_None
 24732                                  
 24733                                  	;mov	al,_$P_Number		;AN000; Set type
 24734                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24735                                  	; 07/07/2023
 24736                                  	;*mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24737                                  	;*jmp	short _$P_Value_Exit	;AN000;
 24738                                  
 24739                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 24740                                  	; (SYSINIT:1BA5h)
 24741                                  	; 12/12/2022
 24742                                  	;nop	; db  90h
 24743                                  
 24744                                  _$P_Value02:				;AN000; / nval = 1
 24745                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 24746                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 24747                                  ;(tm07) jne	short _$P_Value03	;AN000;
 24748                                  
 24749 000018FA 46                      	inc	si			;AN000;
 24750 000018FB 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 24751                                  	
 24752                                  	; 07/09/2023
 24753                                  	;cmp	al,_$P_No_nrng		;AN000; (tm07)
 24754                                  	;je	short _$P_Value03	;AN000; (tm07)
 24755 000018FE 08C0                    	or	al,al
 24756 00001900 745D                    	jz	short _$P_Value03 ; _$P_No_nrng
 24757                                  
 24758 00001902 46                      	inc	si			;AN000; si points to 1st item_tag
 24759                                  _$P_Val02_Loop:				;AN000;
 24760 00001903 2EF606[0D14]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 24761 00001909 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 24762                                  
 24763 0000190B 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 24764 0000190F 7234                    	jb	short _$P_Val02_Next	;AN000;
 24765 00001911 7706                    	ja	short _$P_Val_In	;AN000;
 24766                                  
 24767 00001913 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 24768 00001917 722C                    	jb	short _$P_Val02_Next	;AN000;
 24769                                  
 24770                                  _$P_Val_In:				;AN000;
 24771 00001919 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 24772 0000191D 7726                    	ja	short _$P_Val02_Next	;AN000;
 24773 0000191F 7237                    	jb	short _$P_Val_Found	;AN000;
 24774                                  
 24775 00001921 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 24776 00001925 771E                    	ja	short _$P_Val02_Next	;AN000;
 24777                                  
 24778 00001927 EB2F                    	jmp	short _$P_Val_Found	;AN000;
 24779                                  
 24780                                  _$P_Val02_Sign:				;AN000;
 24781 00001929 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 24782 0000192D 7C16                    	jl	short _$P_Val02_Next	;AN000;
 24783 0000192F 7F06                    	jg	short _$P_SVal_In	;AN000;
 24784                                  
 24785 00001931 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 24786 00001935 7C0E                    	jl	short _$P_Val02_Next	;AN000;
 24787                                  
 24788                                  _$P_SVal_In:				;AN000;
 24789 00001937 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 24790 0000193B 7F08                    	jg	short _$P_Val02_Next	;AN000;
 24791                                  
 24792 0000193D 7C19                    	jl	short _$P_Val_Found	;AN000;
 24793                                  
 24794 0000193F 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 24795                                  	;jg	short _$P_Val02_Next	;AN000;
 24796                                  	;jmp	short _$P_Val_Found	;AN000;
 24797                                  	; 14/08/2023
 24798 00001943 7E13                    	jng	short _$P_Val_Found
 24799                                  
 24800                                  _$P_Val02_Next:				;AN000;
 24801 00001945 83C609                  	add	si,_$P_Len_Range 	;AN000;
 24802 00001948 FEC8                    	dec	al			;AN000; loop nrng times in AL
 24803 0000194A 75B7                    	jne	short _$P_Val02_Loop	;AN000;
 24804                                  					; / Not found
 24805 0000194C 2EC706[0114]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 24806                                  	;mov	al,_$P_Number		;AN000;
 24807                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24808                                  _$P_Value05:		;* 14/08/2023
 24809                                  	; 14/08/2023
 24810 00001953 B801FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Number
 24811 00001956 EB11                    	jmp	short _$P_Value_Exit	;AN000;
 24812                                  
 24813                                  _$P_Val_Found:				;AN000;
 24814 00001958 B001                    	mov	al,_$P_Number		;AN000;
 24815 0000195A 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 24816 0000195D EB0A                    	jmp	short _$P_Value_Exit	;AN000;
 24817                                  
 24818                                  _$P_Value03:				;AN000; / nval = 2
 24819                                  
 24820                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 24821                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 24822                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 24823                                  ;(tm07) inc	si			;AN000;
 24824                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 24825                                  ;	mov	ah,$P_Len_Range 	;AN000;
 24826                                  ;	mul	ah			;AN000;  Skip nrng field
 24827                                  ;	inc	ax			;AN000;
 24828                                  ;	add	si,ax			;AN000; si points to nnval
 24829                                  ;	mov	al,es:[si]		;AN000; get nnval
 24830                                  ;	inc	si			;AN000; si points to 1st item_tag
 24831                                  ;$P_Val03_Loop:				;AN000;
 24832                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 24833                                  ;	jne	$P_Val03_Next		;AN000;
 24834                                  ;
 24835                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 24836                                  ;	je	$P_Val_Found		;AN000;
 24837                                  ;
 24838                                  ;$P_Val03_Next:				;AN000;
 24839                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 24840                                  ;	dec	al			;AN000; loop nval times in AL
 24841                                  ;	jne	$P_Val03_Loop		;AN000;
 24842                                  ;					;AN000; / Not found
 24843                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 24844                                  ;	mov	al,$P_Number		;AN000;
 24845                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 24846                                  ;	jmp	short $P_Value_Exit	;AN000;
 24847                                  ;
 24848                                  ;ENDIF					;AN000;(of Val2SW)
 24849                                  ;$P_Value04:
 24850                                  
 24851                                  _$P_Value_Err:				;AN000;
 24852 0000195F 2EC706[0114]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24853                                  	;mov	al,_$P_String		;AN000; Set type
 24854                                  	;mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24855                                  	; 14/08/2023
 24856 00001966 B803FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_String
 24857                                  _$P_Value_Exit:				;AN000;
 24858 00001969 E84BFD                  	call	_$P_Fill_Result		;AN000;
 24859 0000196C 5E                      	pop	si			;AN000;
 24860 0000196D 5A                      	pop	dx			;AN000;
 24861 0000196E 59                      	pop	cx			;AN000;
 24862 0000196F 58                      	pop	ax			;AN000;
 24863 00001970 C3                      	retn				;AN000;
 24864                                  
 24865                                  ; 28/03/2019 - Retro DOS v4.0
 24866                                  
 24867                                  ;***********************************************************************
 24868                                  ; _$P_Check_OVF
 24869                                  ;
 24870                                  ; Function:  Check if overflow is occurred with consideration of
 24871                                  ;	     signed or un-signed numeric value
 24872                                  ;
 24873                                  ; Input:     Flag register
 24874                                  ;
 24875                                  ; Output:    CY = 1  :	Overflow
 24876                                  ;
 24877                                  ; Vars:     _$P_Flags(R)
 24878                                  ;***********************************************************************
 24879                                  
 24880                                  	; 26/10/2022
 24881                                  _$P_Check_OVF:
 24882 00001971 9C                      	pushf				;AN000;
 24883 00001972 2EF606[0D14]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 24884 00001978 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 24885                                  
 24886 0000197A 9D                      	popf				;AN000; by the CY bit
 24887 0000197B C3                      	retn				;AN000;
 24888                                  
 24889                                  _$P_COVF:				;AN000;
 24890 0000197C 9D                      	popf				;AN000; else,
 24891 0000197D 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 24892                                  
 24893 0000197F F8                      	clc				;AN000; indicate it with CY bit
 24894 00001980 C3                      	retn				;AN000; CY=0 means no overflow
 24895                                  
 24896                                  _$P_COVF00:				;AN000;
 24897                                  _$P_0099Err: ; 14/08/2023
 24898 00001981 F9                      	stc				;AN000; and CY=1 means overflow
 24899                                  _$P_0099Err2: ; 14/08/2023
 24900 00001982 C3                      	retn				;AN000;
 24901                                  
 24902                                  ;***********************************************************************
 24903                                  ; _$P_0099;
 24904                                  ;
 24905                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 24906                                  ;
 24907                                  ; Input:     AL = character code
 24908                                  ;
 24909                                  ; Output:    CY = 1 : AL is not number
 24910                                  ;	     CY = 0 : AL contains binary value
 24911                                  ;***********************************************************************
 24912                                  
 24913                                  _$P_0099:
 24914 00001983 3C30                    	cmp	al,"0"                  ;AN000;
 24915                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24916                                  	; 12/12/2022
 24917 00001985 72FB                    	jb	short _$P_0099Err2  ; cf=1
 24918                                  
 24919 00001987 3C39                    	cmp	al,"9"                  ;AN000;
 24920 00001989 77F6                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 24921                                  
 24922 0000198B 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 24923                                  	; 12/12/2022
 24924                                  	; cf=0	
 24925                                  	;clc				;AN000; indicate no error
 24926 0000198D C3                      	retn				;AN000;
 24927                                  
 24928                                  	; 14/08/2023
 24929                                  ;_$P_0099Err:				;AN000;
 24930                                  ;	stc				;AN000; indicate error
 24931                                  ;_$P_0099Err2: ; 12/12/2022	
 24932                                  ;	retn				;AN000;
 24933                                  
 24934                                  ;***********************************************************************
 24935                                  ; _$P_Simple_String
 24936                                  ;
 24937                                  ; Function:  See value list for the simple string
 24938                                  ;	     and make result buffer.
 24939                                  ;
 24940                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24941                                  ;	     ES:BX -> CONTROL block
 24942                                  ;
 24943                                  ; Output:    None
 24944                                  ;
 24945                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 24946                                  ;
 24947                                  ; Vars: _$P_RC(W)
 24948                                  ;***********************************************************************
 24949                                  
 24950                                  _$P_Simple_String:
 24951 0000198E 50                      	push	ax			;AN000;
 24952 0000198F 53                      	push	bx			;AN000;
 24953 00001990 52                      	push	dx			;AN000;
 24954 00001991 57                      	push	di			;AN000;
 24955 00001992 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 24956 00001996 268A05                  	mov	al,[es:di]		;AN000; get nval
 24957 00001999 08C0                    	or	al,al			;AN000; no value list ?
 24958 0000199B 7504                    	jnz	short _$P_Sim00		;AN000; then
 24959                                  
 24960 0000199D B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24961 0000199F EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 24962                                  
 24963                                  _$P_Sim00:				;AN000;
 24964                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 24965 000019A1 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 24966 000019A3 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 24967                                  
 24968 000019A5 47                      	inc	di			;AN000;
 24969 000019A6 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 24970 000019A9 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 24971 000019AB F6E4                    	mul	ah			;AN000; Skip nrng field
 24972 000019AD 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 24973 000019AE 01C7                    	add	di,ax			;AN000; di points to nnval
 24974 000019B0 268A05                  	mov	al,[es:di]		;AN000; get nnval
 24975 000019B3 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 24976 000019B5 F6E4                    	mul	ah			;AN000; Skip nnval field
 24977 000019B7 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 24978 000019B8 01C7                    	add	di,ax			;AN000; di points to nstrval
 24979 000019BA 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 24980 000019BD 47                      	inc	di			;AC035; add '2' to
 24981 000019BE 47                      	inc	di			;AC035;  DI reg
 24982                                  					;AN000; di points to 1st string in list
 24983                                  _$P_Sim_Loop:				;AN000;
 24984 000019BF 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 24985 000019C2 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 24986 000019C5 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 24987                                  
 24988 000019C7 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 24989 000019CA FEC8                    	dec	al			;AN000; loop nstval times in AL
 24990 000019CC 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 24991                                  					;AN000; / Not found
 24992 000019CE 2EC706[0114]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 24993 000019D5 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 24994 000019D7 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 24995                                  
 24996                                  _$P_Sim_Found:				;AN000;
 24997 000019D9 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 24998 000019DD B002                    	mov	al,_$P_List_Idx		;AN000;
 24999 000019DF 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 25000 000019E2 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 25001                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 25002                                  _$P_Sim01:				;AN000;
 25003 000019E4 2EC706[0114]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 25004 000019EB B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 25005                                  _$P_Sim_Exit:				;AN000;
 25006 000019ED B003                    	mov	al,_$P_String		;AN000; Set type
 25007                                  _$P_Sim_Exit0:				;AN000;
 25008 000019EF E8C5FC                  	call	_$P_Fill_Result		;AN000;
 25009 000019F2 5F                      	pop	di			;AN000;
 25010 000019F3 5A                      	pop	dx			;AN000;
 25011 000019F4 5B                      	pop	bx			;AN000;
 25012 000019F5 58                      	pop	ax			;AN000;
 25013 000019F6 C3                      	retn				;AN000;
 25014                                  
 25015                                  ;***********************************************************************
 25016                                  ; _$P_String_Comp:
 25017                                  ;
 25018                                  ; Function:  Compare two string
 25019                                  ;
 25020                                  ; Input:     cs:SI -> 1st string
 25021                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 25022                                  ;	     ES:BX -> CONTROL block
 25023                                  ;
 25024                                  ; Output:    CY = 1 if not match
 25025                                  ;
 25026                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 25027                                  ;
 25028                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 25029                                  ;***********************************************************************
 25030                                  
 25031                                  _$P_String_Comp:
 25032 000019F7 50                      	push	ax			;AN000;
 25033 000019F8 55                      	push	bp			;AN000;
 25034 000019F9 52                      	push	dx			;AN000;
 25035 000019FA 56                      	push	si			;AN000;
 25036 000019FB B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 25037                                  _$P_SCOM_Loop:				;AN000;
 25038 000019FD 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 25039 00001A00 E81502                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 25040 00001A03 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 25041                                  
 25042 00001A05 E821FE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 25043                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 25044 00001A08 2EF606[0D14]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 25045 00001A0E 740D                    	jz	short _$P_SCOM04	;AN000;
 25046                                  
 25047 00001A10 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 25048 00001A12 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 25049                                  
 25050 00001A14 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 25051 00001A19 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 25052                                  
 25053 00001A1B EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 25054                                  
 25055                                  _$P_SCOM04:				;AN000;
 25056 00001A1D 2EF606[0D14]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 25057 00001A23 740E                    	jz	short _$P_SCOM03	;AN000;
 25058                                  
 25059 00001A25 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 25060 00001A27 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 25061                                  
 25062                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25063                                  	;cmp	byte [es:bp+0],_$P_NULL
 25064                                  	; 11/12/2022
 25065 00001A29 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 25066 00001A2E 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 25067                                  
 25068                                  _$P_SCOM05:				;AN000;   found a match
 25069 00001A30 46                      	inc	si			;AN000; si points to just after "=" or ":"
 25070 00001A31 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 25071                                  
 25072                                  _$P_SCOM03:				;AN000;
 25073                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 25074                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25075                                  	;cmp	al,[es:bp+0]
 25076                                  	; 11/12/2022
 25077 00001A33 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 25078 00001A37 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 25079                                  
 25080 00001A39 08C0                    	or	al,al			;AN000; end of line
 25081 00001A3B 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 25082                                  
 25083                                  	; 12/12/2022
 25084                                  	;inc	si			;AN000; update operand pointer
 25085                                  	;inc	bp			;AN000;    and synonym pointer
 25086                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25087 00001A3D EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 25088                                  
 25089                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 25090                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25091                                  	;cmp	al,[es:bp+0]
 25092                                  	; 11/12/2022
 25093 00001A3F 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 25094 00001A43 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 25095                                  
 25096 00001A45 46                      	inc	si			;AN000; else, load next byte
 25097 00001A46 2E8A04                  	mov	al,[cs:si]		;AN000; and
 25098 00001A49 45                      	inc	bp			;AN000;
 25099                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25100                                  	;cmp	al,[es:bp+0]
 25101                                  	; 11/12/2022
 25102 00001A4A 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 25103 00001A4E 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 25104                                  
 25105                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25106                                  	; 12/12/2022
 25107                                  _$P_SCOM01:
 25108 00001A50 46                      	inc	si			;AN000; else update operand pointer
 25109 00001A51 45                      	inc	bp			;AN000; 		and synonym pointer
 25110                                  ;_$P_SCOM01:				;AN000;
 25111 00001A52 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 25112                                  
 25113                                  _$P_SCOM_Differ0:			;AN000;
 25114                                  ;IF SwSW				;AN000;(tm10)
 25115 00001A54 2EF606[0D14]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 25116 00001A5A 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 25117                                  
 25118                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25119                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 25120                                  	; 12/12/2022
 25121 00001A5C 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 25122 00001A61 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 25123                                  
 25124                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25125                                  	;cmp	byte [es:bp+0],_$P_NULL
 25126                                  	; 11/12/2022
 25127 00001A63 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 25128                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 25129 00001A68 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 25130                                  
 25131                                  _$P_not_applicable:			;AN000;(tm10)
 25132                                  ;ENDIF					;AN000;(tm10)
 25133                                  
 25134                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 25135                                  					;AN000; ignore colon option specified ?
 25136                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 25137                                  	; 12/12/2022
 25138 00001A6A 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 25139                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25140                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 25141 00001A6E 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 25142                                  
 25143 00001A70 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 25144 00001A72 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 25145                                  
 25146                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25147                                  	;cmp	byte [es:bp+0],_$P_NULL
 25148                                  	; 11/12/2022
 25149 00001A74 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 25150 00001A79 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 25151                                  
 25152 00001A7B EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 25153                                  
 25154                                  _$P_SCOM02:				;AN000;
 25155 00001A7D 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 25156 00001A7F 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 25157                                  
 25158                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25159                                  	;cmp	byte [es:bp+0],_$P_Colon
 25160                                  	; 11/12/2022
 25161 00001A81 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 25162 00001A86 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 25163                                  
 25164                                  _$P_SCOM_Differ: 			;AN000;
 25165 00001A88 F9                      	stc				;AN000; indicate not found
 25166 00001A89 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 25167                                  
 25168                                  _$P_SCOM_Same:				;AN000;
 25169                                  	; 12/12/2022
 25170                                  	; cf=0
 25171 00001A8B 2E8936[1014]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 25172                                  	; 12/12/2022
 25173                                  	;clc				;AN000; indicate found
 25174                                  _$P_SCOM_Exit:				;AN000;
 25175 00001A90 5E                      	pop	si			;AN000;
 25176 00001A91 5A                      	pop	dx			;AN000;
 25177 00001A92 5D                      	pop	bp			;AN000;
 25178 00001A93 58                      	pop	ax			;AN000;
 25179 00001A94 C3                      	retn
 25180                                  
 25181                                  ; 30/03/2019
 25182                                  
 25183                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 25184                                  
 25185                                  ;***********************************************************************
 25186                                  ; _$P_File_Format;
 25187                                  ;
 25188                                  ; Function:  Check if the input string is valid file spec format.
 25189                                  ;	     And set the result buffer.
 25190                                  ;
 25191                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25192                                  ;	     ES:BX -> CONTROL block
 25193                                  ;
 25194                                  ; Output:    None
 25195                                  ;
 25196                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 25197                                  ;
 25198                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 25199                                  ;	_$P_SaveSI_Cmpx(R)
 25200                                  ;***********************************************************************
 25201                                  
 25202                                  _$P_File_Format:
 25203 00001A95 50                      	push	ax			;AN000;
 25204 00001A96 57                      	push	di			;AN000;
 25205 00001A97 56                      	push	si			;AN000;
 25206 00001A98 2E8B3E[0E14]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 25207                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 25208 00001A9D 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 25209 00001AA0 08C0                    	or	al,al			;AN000; end of line ?
 25210 00001AA2 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 25211                                  
 25212 00001AA4 E85D00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 25213 00001AA7 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 25214                                  
 25215 00001AA9 2EC606[A414]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 25216                                  					;AN033;AC034;; set error flag- bad char.
 25217 00001AAF 5E                      	pop	si			;AN033;
 25218 00001AB0 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 25219 00001AB4 5F                      	pop	di			;AN033;
 25220 00001AB5 EB3E                    	jmp	short _$P_FileF02	;AN033;
 25221                                  
 25222                                  _$P_FileF_Err:				;AN000;
 25223 00001AB7 5E                      	pop	si			;AN000;
 25224 00001AB8 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 25225 00001ABC 5F                      	pop	di			;AN000;
 25226                                  
 25227                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 25228                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 25229                                  	; 12/12/2022
 25230 00001ABD 26F60701                	test	byte [es:bx],_$P_Optional
 25231                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25232                                  	;test	word [es:bx],_$P_Optional
 25233 00001AC1 7532                    	jnz	short _$P_FileF02	;AN000;
 25234                                  
 25235 00001AC3 2EC706[0114]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 25236 00001ACA EB29                    	jmp	short _$P_FileF02	;AN000;
 25237                                  
 25238                                  _$P_FileF03:				;AN000;
 25239 00001ACC 58                      	pop	ax			;AN000; discard save si
 25240 00001ACD 56                      	push	si			;AN000; save new si
 25241                                  _$P_FileF_Loop1: 			;AN000;
 25242 00001ACE 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 25243 00001AD1 08C0                    	or	al,al			;AN000; end of line ?
 25244 00001AD3 741E                    	jz	short _$P_FileF_RLT	;AN000;
 25245                                  
 25246 00001AD5 E82C00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 25247 00001AD8 740B                    	je	short _$P_FileF00	;AN000;
 25248                                  
 25249 00001ADA E83B01                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 25250 00001ADD 7302                    	jnc	short _$P_FileF01	;AN000;
 25251 00001ADF 47                      	inc	di			;AN000; if yes, skip next byte
 25252 00001AE0 46                      	inc	si			;AN000;
 25253                                  _$P_FileF01:				;AN000;
 25254 00001AE1 47                      	inc	di			;AN000;
 25255 00001AE2 46                      	inc	si			;AN000;
 25256 00001AE3 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 25257                                  ;
 25258                                  _$P_FileF00:				;AN000;
 25259 00001AE5 2EA2[0714]              	mov	[cs:_$P_Terminator],al	;AC034;
 25260 00001AE9 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 25261 00001AED 47                      	inc	di			;AN000;
 25262 00001AEE 2E893E[0314]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 25263                                  _$P_FileF_RLT:				;AN000;
 25264 00001AF3 5E                      	pop	si			;AN000;
 25265 00001AF4 5F                      	pop	di			;AN000;
 25266                                  _$P_FileF02:				;AN000;
 25267 00001AF5 58                      	pop	ax			;AN000; (tm14)
 25268                                  	;test	ax,_$P_File_Spc	; 200h	;AN000; (tm14)
 25269                                  	; 14/08/2023
 25270 00001AF6 F6C402                  	test	ah,(_$P_File_Spc>>8) ; 2
 25271 00001AF9 7408                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 25272                                  
 25273 00001AFB 50                      	push	ax			;AN000;  (tm14)
 25274                                  	;mov	ah,_$P_No_Tag		;AN000; set
 25275                                  	;mov	al,_$P_File_Spec 	;AN000; result
 25276                                  	; 14/08/2023
 25277 00001AFC B805FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_File_Spec ; 0FF05h
 25278                                  					      ; set result
 25279 00001AFF E8B5FB                  	call	_$P_Fill_Result		;AN000; buffer to file spec
 25280 00001B02 58                      	pop	ax			;AN000;
 25281                                  
 25282                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 25283 00001B03 C3                      	retn				;AN000;
 25284                                  
 25285                                  ;***********************************************************************
 25286                                  ; _$P_FileSp_Chk
 25287                                  ;
 25288                                  ; Function:  Check if the input byte is one of file special characters
 25289                                  ;
 25290                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25291                                  ;	     AL = character code to be examineed
 25292                                  ;
 25293                                  ; Output:    ZF = 1 , AL is one of special characters
 25294                                  ;***********************************************************************
 25295                                  
 25296                                  _$P_FileSp_Chk:
 25297 00001B04 53                      	push	bx			;AN000;
 25298 00001B05 51                      	push	cx			;AN000;
 25299                                  	;;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 25300                                  	;lea	bx,[_$P_FileSp_Char] 	; "[]|<>+=;\"" at
 25301                                  					; MSDOS 6.21 IO.SYS - SYSINIT:1838h
 25302                                  	; 07/09/2023
 25303 00001B06 BB[9B14]                	mov	bx,_$P_FileSp_Char
 25304 00001B09 B90900                  	mov	cx,_$P_FileSp_Len ; 9	;AN000; load length of it
 25305                                  _$P_FileSp_Loop: 			;AN000;
 25306 00001B0C 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 25307 00001B0F 7404                    	je	short _$P_FileSp_Exit	;AN000;
 25308                                  
 25309 00001B11 43                      	inc	bx			;AN000;
 25310 00001B12 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 25311                                  
 25312 00001B14 41                      	inc	cx			;AN000; reset ZF
 25313                                  _$P_FileSp_Exit: 			;AN000;
 25314 00001B15 59                      	pop	cx			;AN000;
 25315 00001B16 5B                      	pop	bx			;AN000;
 25316 00001B17 C3                      	retn
 25317                                  
 25318                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 25319                                  
 25320                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 25321                                  
 25322                                  ;***********************************************************************
 25323                                  ; _$P_Drive_Format;
 25324                                  ;
 25325                                  ; Function:  Check if the input string is valid drive only format.
 25326                                  ;	     And set the result buffer.
 25327                                  ;
 25328                                  ; Input:     cs:SI -> _$P_STRING_BUF
 25329                                  ;	     ES:BX -> CONTROL block
 25330                                  ;
 25331                                  ; Output:    None
 25332                                  ;
 25333                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 25334                                  ;
 25335                                  ; Vars: _$P_RC(W)
 25336                                  ;***********************************************************************
 25337                                  
 25338                                  _$P_Drive_Format:
 25339 00001B18 50                      	push	ax			;AN000;
 25340 00001B19 52                      	push	dx			;AN000;
 25341 00001B1A 2E8A04                  	mov	al,[cs:si]		;AN000;
 25342 00001B1D 08C0                    	or	al,al			;AN000; if null string
 25343 00001B1F 7436                    	je	short _$P_Drv_Exit	;AN000; do nothing
 25344                                  
 25345 00001B21 E8F400                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 25346 00001B24 722A                    	jc	short _$P_Drv_Err	;AN000;
 25347                                  
 25348 00001B26 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 25349 00001B2B 740D                    	je	short _$P_DrvF00	;AN000;
 25350                                  
 25351                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 25352                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 25353                                  	; 12/12/2022
 25354 00001B2D 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 25355                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 25356                                  	;test	word [es:bx],_$P_Ig_Colon
 25357 00001B31 741D                    	jz	short _$P_Drv_Err	;AN000;
 25358                                  
 25359 00001B33 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 25360 00001B38 7516                    	jne	short _$P_Drv_Err	;AN000;
 25361                                  
 25362                                  _$P_DrvF00:				;AN000;
 25363 00001B3A 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 25364 00001B3C 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 25365 00001B3E 7210                    	jb	short _$P_Drv_Err	;AN000; in range of
 25366                                  
 25367 00001B40 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 25368 00001B42 770C                    	ja	short _$P_Drv_Err	;AN000; if no, error
 25369                                  
 25370 00001B44 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 25371 00001B46 88C2                    	mov	dl,al			;AN000; set
 25372                                  	;mov	ah,_$P_No_Tag		;AN000; result
 25373                                  	;mov	al,_$P_Drive		;AN000; buffer
 25374                                  	; 08/07/2023
 25375 00001B48 B806FF                  	mov	ax,(_$P_No_Tag<<8)|_$P_Drive ; 0FF06h
 25376                                  					      ; set result buffer
 25377 00001B4B E869FB                  	call	_$P_Fill_Result		;AN000; to drive
 25378 00001B4E EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 25379                                  
 25380                                  _$P_Drv_Err:				;AN000;
 25381 00001B50 2EC706[0114]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 25382                                  _$P_Drv_Exit:				;AN000;
 25383 00001B57 5A                      	pop	dx			;AN000;
 25384 00001B58 58                      	pop	ax			;AN000;
 25385 00001B59 C3                      	retn				;AN000;
 25386                                  
 25387                                  ;ENDIF					;AN000;(of DrvSW)
 25388                                  
 25389                                  ;***********************************************************************
 25390                                  ; _$P_Skip_Delim;
 25391                                  ;
 25392                                  ; Function: Skip delimiters specified in the PARMS list, white space
 25393                                  ;	    and comma.
 25394                                  ;
 25395                                  ; Input:    DS:SI -> Command String
 25396                                  ;	    ES:DI -> Parameter List
 25397                                  ;
 25398                                  ; Output:   CY = 1 if the end of line encounterd
 25399                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 25400                                  ;	    AL = Last examineed character
 25401                                  ;
 25402                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 25403                                  ;
 25404                                  ; Vars:     _$P_Flags(R)
 25405                                  ;***********************************************************************
 25406                                  
 25407                                  _$P_Skip_Delim:
 25408                                  _$P_Skip_Delim_Loop:			;AN000;
 25409 00001B5A AC                      	lodsb				;AN000;
 25410 00001B5B E81E00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 25411 00001B5E 7416                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 25412                                  
 25413 00001B60 E84E00                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 25414 00001B63 7514                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 25415                                  
 25416 00001B65 2EF606[0D14]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 25417 00001B6B 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 25418                                  
 25419 00001B6D 2EF606[0D14]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 25420                                  	;jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 25421                                  	; 14/08/2023
 25422                                  	; cf=0
 25423 00001B73 7505                    	jnz	short _$P_Skip_Delim_Exit
 25424 00001B75 C3                      	retn
 25425                                  
 25426                                  	;dec	si			;AN000; backup si for next call (tm08)
 25427                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 25428                                  	; 12/12/2022
 25429                                  	; cf=0
 25430                                  	; 14/08/2023
 25431                                  	;jmp	short _$P_Skip_Delim_Exit
 25432                                  
 25433                                  _$P_Skip_Delim_CY:			;AN000;
 25434 00001B76 F9                      	stc				;AN000; indicate EOL
 25435 00001B77 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 25436                                  
 25437                                  _$P_Skip_Delim_NCY:			;AN000;
 25438 00001B79 F8                      	clc				;AN000; indicate non delim
 25439                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 25440 00001B7A 4E                      	dec	si			;AN000;  backup index pointer
 25441                                  	; 14/08/2023
 25442                                  	; 12/12/2022
 25443                                  ;_$P_Exit_At_Extra:	 ; cf=0
 25444 00001B7B C3                      	retn				;AN000;
 25445                                  
 25446                                  	; 12/12/2022
 25447                                  ;_$P_Exit_At_Extra:			;AN000;
 25448                                  	;clc				;AN000; indicate extra delim
 25449                                  	;retn				;AN000;
 25450                                  
 25451                                  ;***********************************************************************
 25452                                  ; _$P_Chk_EOL;
 25453                                  ;
 25454                                  ; Function: Check if AL is one of End of Line characters.
 25455                                  ;
 25456                                  ; Input:    AL = character code
 25457                                  ;	    ES:DI -> Parameter List
 25458                                  ;
 25459                                  ; Output:   ZF = 1 if one of End of Line characters
 25460                                  ;**********************************************************************
 25461                                  
 25462                                  _$P_Chk_EOL:
 25463 00001B7C 53                      	push	bx			;AN000;
 25464 00001B7D 51                      	push	cx			;AN000;
 25465 00001B7E 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 25466 00001B80 742C                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25467                                  
 25468 00001B82 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 25469 00001B84 7428                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25470                                  
 25471                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 25472 00001B86 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 25473 00001B88 7424                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25474                                  ;ENDIF					;AN028;
 25475                                  
 25476 00001B8A 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 25477                                  					;AN000; EOL character specified ?
 25478 00001B8F 721D                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 25479                                  
 25480 00001B91 31DB                    	xor	bx,bx			;AN000;
 25481 00001B93 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 25482                                  					;AN000; get length of delimiter list
 25483 00001B97 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 25484                                  	; 14/08/2023
 25485 00001B9A 31C9                    	xor	cx,cx ; *
 25486 00001B9C 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 25487 00001BA0 740B                    	je	short _$P_Chk_EOL_NZ	;AN000;
 25488                                  	; 14/08/2023
 25489                                  	;;xor	cx,cx			;AN000; Get number of extra character
 25490                                  	;xor	ch,ch ; *
 25491 00001BA2 268A09                  	mov	cl,[es:bx+di]		;AN000; 
 25492                                  _$P_Chk_EOL_Loop:			;AN000;
 25493 00001BA5 43                      	inc	bx			;AN000;
 25494 00001BA6 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 25495 00001BA9 7403                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 25496 00001BAB E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 25497                                  	; 14/08/2023
 25498                                  	; cx=0
 25499                                  _$P_Chk_EOL_NZ:				;AN000;
 25500                                  	;cmp	al,_$P_CR		;AN000; reset ZF
 25501                                  	; 14/08/2023
 25502 00001BAD 41                      	inc	cx  ; zf=0 (cx=1) ; *
 25503                                  _$P_Chk_EOL_Exit:			;AN000;
 25504 00001BAE 59                      	pop	cx			;AN000;
 25505 00001BAF 5B                      	pop	bx			;AN000;
 25506 00001BB0 C3                      	retn
 25507                                  
 25508                                  ;***********************************************************************
 25509                                  ; _$P_Chk_Delim;
 25510                                  ;
 25511                                  ; Function: Check if AL is one of delimiter characters.
 25512                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 25513                                  ;	    blanks.
 25514                                  ;
 25515                                  ; Input:    AL = character code
 25516                                  ;	    DS:SI -> Next Character
 25517                                  ;	    ES:DI -> Parameter List
 25518                                  ;
 25519                                  ; Output:   ZF = 1 if one of delimiter characters
 25520                                  ;	    SI points to the next character
 25521                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 25522                                  ;***********************************************************************
 25523                                  
 25524                                  _$P_Chk_Delim:
 25525 00001BB1 53                      	push	bx			;AN000;
 25526 00001BB2 51                      	push	cx			;AN000;
 25527 00001BB3 2EC606[0714]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 25528                                  					;AC034; Assume terminated by space
 25529                                  	;and	byte [cs:_$P_Flags20,0DFh
 25530 00001BB9 2E8026[0D14]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 25531 00001BBF 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 25532 00001BC1 7423                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25533                                  
 25534 00001BC3 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 25535 00001BC5 741F                    	je	short _$P_Chk_Delim_Exit ;AN000;
 25536                                  
 25537 00001BC7 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 25538 00001BC9 741E                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25539                                  
 25540                                  ; Note: _$P_Chk_Delim00 part of code is nonsense here
 25541                                  ;        because _$P_Space = _$P_DBSP1 = 20h
 25542                                  ;        Erdogan Tan - 14/08/2023
 25543                                  ;_$P_Chk_Delim00:
 25544                                  %if 0
 25545                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25546                                  _$P_Chk_Delim00: 			;AN000;
 25547                                  	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 25548                                  	jne	short _$P_Chk_Delim01	;AN000;
 25549                                  
 25550                                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 25551                                  	jne	short _$P_Chk_Delim01	;AN000;
 25552                                  
 25553                                  	mov	al,_$P_Space		;AN000;
 25554                                  	inc	si			;AN000; make si point to next character
 25555                                  	cmp	al,al			;AN000; Set ZF
 25556                                  	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25557                                  %endif
 25558                                  
 25559                                  _$P_Chk_Delim01: 			;AN000;
 25560 00001BCB 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 25561                                  					;AN000; delimiter character specified ?
 25562 00001BD0 7214                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 25563                                  
 25564                                  	;xor	cx,cx			;AN000;
 25565 00001BD2 30ED                    	xor	ch,ch
 25566                                  	;mov	cl,[es:di+3]
 25567 00001BD4 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 25568                                  					;AN000; get length of delimiter list
 25569                                  	;or	cx,cx			;AN000; No extra Delim character ?
 25570                                  	;jz	short _$P_Chk_Delim_NZ 	;AN000;
 25571                                  	; 14/08/2023
 25572 00001BD8 E30B                    	jcxz	_$P_Chk_Delim_NZ
 25573                                  
 25574 00001BDA BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 25575                                  _$P_Chk_Delim_Loop:			;AN000;
 25576 00001BDD 43                      	inc	bx			;AN000;
 25577 00001BDE 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 25578 00001BE1 7406                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 25579                                  
 25580 00001BE3 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 25581                                  
 25582                                  _$P_Chk_Delim_NZ:			;AN000;
 25583                                  	;cmp	al,_$P_Space		;AN000; reset ZF
 25584                                  	; 14/08/2023
 25585                                  	; cx=0 here
 25586 00001BE5 41                      	inc	cx ; cx=1, zf=0
 25587                                  _$P_Chk_Delim_Exit:			;AN000;
 25588                                  _$P_ChkDfin:				;AN000;
 25589 00001BE6 59                      	pop	cx			;AN000;
 25590 00001BE7 5B                      	pop	bx			;AN000;
 25591 00001BE8 C3                      	retn				;AN000;
 25592                                  
 25593                                  _$P_Chk_Delim_Exit0:			;AN000;
 25594 00001BE9 2EA2[0714]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 25595 00001BED 2EF606[0D14]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 25596 00001BF3 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 25597                                  
 25598 00001BF5 2E800E[0D14]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 25599                                  					;AC034; flag terminated extra delimiter or comma
 25600                                  _$P_No_Set_Extra:			;AN027;
 25601 00001BFB 38C0                    	cmp	al,al			;AN000; set ZF
 25602 00001BFD EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 25603                                  
 25604                                  
 25605                                  ;***********************************************************************
 25606                                  ; _$P_Chk_Switch;
 25607                                  ;
 25608                                  ; Function: Check if AL is the switch character not in first position of
 25609                                  ;	    _$P_STRING_BUF
 25610                                  ;
 25611                                  ; Input:    AL = character code
 25612                                  ;	    BX = current pointer within _$P_String_Buf
 25613                                  ;	    SI =>next char on command line (following the one in AL)
 25614                                  ;
 25615                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 25616                                  ;		 position, and has no chance of being part of a date string,
 25617                                  ;		 i.e. should be treated as a delimiter.
 25618                                  
 25619                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 25620                                  ;		 position, or is a slash but may be part of a date string, i.e.
 25621                                  ;		 should not be treated as a delimiter.
 25622                                  ;
 25623                                  ; Vars:  _$P_Terminator(W)
 25624                                  
 25625                                  ; Use:	 _$P_0099
 25626                                  ;***********************************************************************
 25627                                  
 25628                                  _$P_Chk_Switch:
 25629                                  	;;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 25630                                  	;lea	bp,[_$P_STRING_BUF]	;BP=OFFSET of _$P_String_Buf even in group addressing
 25631                                  	; 14/08/2023
 25632 00001BFF BD[1614]                	mov	bp,_$P_STRING_BUF
 25633                                  
 25634                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 25635 00001C02 39EB                    	cmp	bx,bp			;AN000;
 25636 00001C04 7406                    	je	short _$P_STRUC_L2	;AN000;
 25637                                  
 25638                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 25639 00001C06 3C2F                    	cmp	al,_$P_Switch		;AN000;
 25640 00001C08 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 25641                                  
 25642 00001C0A F9                      	stc				;AN020;not in first position and is slash
 25643                                  	;jmp     short _$P_STRUC_L1	;AN000;
 25644                                  	; 12/12/2022
 25645 00001C0B C3                      	retn
 25646                                  
 25647                                  ; 12/12/2022
 25648                                  ;_$P_STRUC_L5:				;AN000;
 25649                                  ;	CLC				;AN020;not a slash
 25650                                  ;;	    .ENDIF			;AN020;
 25651                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 25652                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 25653                                  
 25654                                  _$P_STRUC_L2:				;AN000;
 25655                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 25656 00001C0C 3C2F                    	cmp     al,_$P_Switch		;AN000;
 25657 00001C0E 7506                    	jne	short _$P_STRUC_L12	;AN000;
 25658                                  
 25659 00001C10 2E800E[0D14]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 25660                                  ;	    .ENDIF			;AN020;
 25661                                  
 25662                                  	; 12/12/2022
 25663                                  	; cf=0
 25664                                  	;retn
 25665                                  
 25666                                  _$P_STRUC_L5:
 25667                                  	; 12/12/2022
 25668                                  _$P_STRUC_L12:				;AN000;
 25669 00001C16 F8                      	clc				;AN020;CF=0 indicating first char
 25670                                  ;	.ENDIF				;AN020;
 25671                                  _$P_STRUC_L1:				;AN000;
 25672 00001C17 C3                      	retn				;AN000;
 25673                                  
 25674                                  ;**************************************************************************
 25675                                  ; _$P_Chk_DBCS:
 25676                                  ;
 25677                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 25678                                  ;
 25679                                  ;  Input:
 25680                                  ;	  AL	= Code to be examineed
 25681                                  ;
 25682                                  ;  Output:
 25683                                  ;	  If CF is on then a lead byte of DBCS
 25684                                  ;
 25685                                  ; Use: INT 21h w/AH=63
 25686                                  ;
 25687                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 25688                                  ;***************************************************************************
 25689                                  
 25690                                  _$P_Chk_DBCS:
 25691 00001C18 1E                      	push	ds			;AN000;
 25692 00001C19 56                      	push	si			;AN000;
 25693 00001C1A 53                      	push	bx			;AN000; (tm11)
 25694                                  	;cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 25695                                  	;jne	short _$P_DBCS00	;AN000;
 25696                                  	; 14/08/2023
 25697 00001C1B 2E8B36[0A14]            	mov	si,[cs:_$P_DBCSEV_SEG]
 25698 00001C20 21F6                    	and	si,si ; 0 ?
 25699 00001C22 7525                    	jnz	short _$P_DBCS00 ; already set
 25700 00001C24 50                      	push	ax			;AN000;
 25701 00001C25 1E                      	push	ds			;AN000; (tm11)
 25702 00001C26 51                      	push	cx			;AN000;
 25703 00001C27 52                      	push	dx			;AN000;
 25704 00001C28 57                      	push	di			;AN000;
 25705 00001C29 55                      	push	bp			;AN000;
 25706 00001C2A 06                      	push	es			;AN000;
 25707                                  	; si = 0 ; 14/08/2023
 25708                                  	;xor	si,si			;AN000;
 25709 00001C2B 8EDE                    	mov	ds,si ; 0		;AN000;
 25710 00001C2D B80063                  	mov	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 25711 00001C30 CD21                    	int	21h			;AN000;
 25712                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 25713 00001C32 8CDB                    	mov	bx,ds			;AN000; (tm11)
 25714 00001C34 09DB                    	or	bx,bx			;AN000; (tm11)
 25715 00001C36 07                      	pop	es			;AN000;
 25716 00001C37 5D                      	pop	bp			;AN000;
 25717 00001C38 5F                      	pop	di			;AN000;
 25718 00001C39 5A                      	pop	dx			;AN000;
 25719 00001C3A 59                      	pop	cx			;AN000;
 25720 00001C3B 1F                      	pop	ds			;AN000; (tm11)
 25721 00001C3C 58                      	pop	ax			;AN000;
 25722 00001C3D 7424                    	jz	short _$P_NON_DBCS	;AN000;
 25723                                  _$P_DBCS02:				;AN000;
 25724 00001C3F 2E8936[0814]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 25725 00001C44 2E891E[0A14]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 25726                                  _$P_DBCS00:				;AN000;
 25727                                  	;mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 25728                                  	;mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 25729                                  	; 14/08/2023
 25730 00001C49 2EC536[0814]            	lds	si,[cs:_$P_DBCSEV_OFF]
 25731                                  _$P_DBCS_LOOP:				;AN000;
 25732 00001C4E 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 25733 00001C51 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 25734 00001C53 3A04                    	cmp	al,[si] 		;AN000;
 25735 00001C55 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 25736 00001C57 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 25737 00001C5A 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 25738 00001C5C F9                      	stc				;AN000; if yes, indicate DBCS and exit
 25739 00001C5D EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 25740                                  _$P_DBCS01:				;AN000;
 25741 00001C5F 46                      	inc	si			;AC035; add '2' to
 25742 00001C60 46                      	inc	si			;AC035;  SI reg
 25743                                  					;AN000; get next vector
 25744 00001C61 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 25745                                  _$P_NON_DBCS:				;AN000;
 25746                                  	; 12/12/2022
 25747                                  	; cf=0
 25748                                  	;clc				;AN000; indicate SBCS
 25749                                  _$P_DBCS_EXIT:				;AN000;
 25750 00001C63 5B                      	pop	bx			;AN000; (tm11)
 25751 00001C64 5E                      	pop	si			;AN000;
 25752 00001C65 1F                      	pop	ds			;AN000;
 25753 00001C66 C3                      	retn				;AN000;
 25754                                  
 25755                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 25756                                  ; ======================================================================
 25757                                  ; 27/03/2019 - Retro DOS v4.0
 25758                                  
 25759                                  ;control block definitions for parser.
 25760                                  ;-----------------------------------------------------------------------
 25761                                  ; buffer = [n | n,m] {/e}
 25762                                  
 25763                                  ; 30/03/2019
 25764                                  
 25765                                  struc p_parms
 25766 00000000 ????                    	resw	1	; dw ?
 25767 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 25768 00000003 ??                      	resb	1	; db 1	; length is 1
 25769 00000004 ??                      	resb 	1	; db ';' ; delimiter
 25770                                  .size:
 25771                                  endstruc
 25772                                  
 25773                                  struc p_pos
 25774 00000000 ????                    	resw	1	; dw ?	; numeric value??
 25775 00000002 ????                    	resw	1	; dw ?	; function
 25776 00000004 ????                    	resw	1	; dw ?	; result value buffer
 25777                                  
 25778                                  ; note: by defining result_val before this structure, we could remove
 25779                                  ;  the "result_val" from every structure invocation
 25780                                  
 25781 00000006 ????                    	resw	1	; dw ?	; value list
 25782 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 25783                                  .size:
 25784                                  endstruc
 25785                                  
 25786                                  struc	p_range
 25787 00000000 ??                      	resb	1	; db 1	; range definition
 25788 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 25789 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 25790 00000003 ????????                	resd	1	; dd ?	; numeric min
 25791 00000007 ????????                	resd	1	; dd ?	; numeric max
 25792                                  .size:
 25793                                  endstruc
 25794                                  
 25795                                  ;-----------------------------------------------------------------------
 25796                                  
 25797                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25798                                  	; (SYSINIT:1F48h)
 25799                                  
 25800                                  ; buffer = [n | n,m] {/e}
 25801                                  
 25802                                  ;buf_parms p_parms <buf_parmsx>
 25803                                  buf_parms: 
 25804 00001C67 [6C1C]                  	dw	buf_parmsx
 25805 00001C69 01                      	db	1	; an extra delimiter list
 25806 00001C6A 01                      	db	1	; length is 1
 25807 00001C6B 3B                      	db	';'	; delimiter
 25808                                  
 25809                                  buf_parmsx:
 25810 00001C6C 0102[761C][8A1C]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 25811 00001C72 01                      	db	1			; one switch
 25812 00001C73 [9E1C]                  	dw	sw_x_ctrl
 25813 00001C75 00                      	db	0			; no keywords
 25814                                  
 25815                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 25816                                  buf_pos1:
 25817 00001C76 0080                    	dw	8000h	; numeric value??
 25818 00001C78 0000                    	dw	0	; function
 25819 00001C7A [B01C]                  	dw	result_val ; result value buffer	
 25820 00001C7C [7F1C]                  	dw	buf_range_1 ; value list
 25821 00001C7E 00                      	db	0  	; no switches/keywords
 25822                                  
 25823                                  ;buf_range_1 p_range <,,,1,99>		; M050
 25824                                  buf_range_1:
 25825 00001C7F 01                      	db	1	; range definition
 25826 00001C80 01                      	db	1	; 1 definition of range
 25827 00001C81 01                      	db	1	; item tag for this range
 25828 00001C82 01000000                	dd	1	; numeric min
 25829 00001C86 63000000                	dd	99	; numeric max
 25830                                  
 25831                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 25832                                  buf_pos2:
 25833 00001C8A 0180                    	dw	8001h
 25834 00001C8C 0000                    	dw	0
 25835 00001C8E [B01C]                  	dw	result_val	
 25836 00001C90 [931C]                  	dw	buf_range_2
 25837 00001C92 00                      	db	0
 25838                                  
 25839                                  ;buf_range_2 p_range <,,,0,8>
 25840                                  buf_range_2:
 25841 00001C93 01                      	db	1
 25842 00001C94 01                      	db	1
 25843 00001C95 01                      	db	1
 25844 00001C96 00000000                	dd	0
 25845 00001C9A 08000000                	dd	8
 25846                                  
 25847                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 25848                                  sw_x_ctrl:
 25849 00001C9E 0000                    	dw	0
 25850 00001CA0 0000                    	dw	0
 25851 00001CA2 [B01C]                  	dw	result_val	
 25852 00001CA4 [AF1C]                  	dw	noval
 25853 00001CA6 01                      	db	1	; 1 switch
 25854                                  	
 25855                                  switch_x:
 25856 00001CA7 2F5800                  	db	'/X',0		; M016
 25857                                  
 25858                                  p_buffers:
 25859 00001CAA 0000                    	dw	0	; local variables
 25860                                  p_h_buffers:
 25861 00001CAC 0000                    	dw	0
 25862                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25863                                  p_buffer_slash_x:
 25864 00001CAE 00                      	db	0 ; 31/03/2019
 25865                                  
 25866                                  ;-- common definitions -------------------------------------------------
 25867                                  
 25868 00001CAF 00                      noval:	db	0
 25869                                  
 25870                                  result_val: 	;label	byte
 25871 00001CB0 00                      	db	0		; type returned
 25872                                  result_val_itag:
 25873 00001CB1 00                      	db	0		; item tag returned
 25874                                  result_val_swoff:
 25875 00001CB2 0000                    	dw	0		; es:offset of the switch defined
 25876                                  rv_byte:	;label	byte
 25877 00001CB4 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 25878                                  
 25879                                  ;-----------------------------------------------------------------------
 25880                                  
 25881                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25882                                  	; (SYSINIT:1F99h)
 25883                                  
 25884                                  ; break = [ on | off ]
 25885                                  
 25886                                  ;brk_parms p_parms  <brk_parmsx>
 25887                                  brk_parms:
 25888 00001CB8 [BD1C]                  	dw	brk_parmsx
 25889 00001CBA 01                      	db	1	; an extra delimiter list
 25890 00001CBB 01                      	db	1	; length is 1
 25891 00001CBC 3B                      	db	';'	; delimiter
 25892                                  
 25893                                  brk_parmsx:
 25894 00001CBD 0101[C31C]              	dw	101h,brk_pos	; min,max = 1 positional
 25895 00001CC1 00                      	db	0		; no switches
 25896 00001CC2 00                      	db	0		; no keywords
 25897                                  
 25898                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 25899                                  brk_pos:
 25900 00001CC3 0020                    	dw	2000h
 25901 00001CC5 0000                    	dw	0
 25902 00001CC7 [B01C]                  	dw	result_val	
 25903 00001CC9 [CC1C]                  	dw	on_off_string
 25904 00001CCB 00                      	db	0
 25905                                  
 25906                                  on_off_string:	;label	byte
 25907 00001CCC 03                      	db	3		; signals that there is a string choice
 25908 00001CCD 00                      	db	0		; no range definition
 25909 00001CCE 00                      	db	0		; no numeric values choice
 25910 00001CCF 02                      	db	2		; 2 strings for choice
 25911 00001CD0 01                      	db	1		; the 1st string tag
 25912 00001CD1 [D61C]                  	dw	on_string
 25913 00001CD3 02                      	db	2		; the 2nd string tag
 25914 00001CD4 [D91C]                  	dw	off_string
 25915                                  
 25916                                  on_string:
 25917 00001CD6 4F4E00                  	db	"ON",0
 25918                                  off_string:
 25919 00001CD9 4F464600                	db	"OFF",0
 25920                                  
 25921                                  p_ctrl_break:
 25922 00001CDD 00                      	db	0	; local variable
 25923                                  
 25924                                  ;-----------------------------------------------------------------------
 25925                                  
 25926                                  	; 27/10/2022
 25927                                  
 25928                                  ; country = n {m {path}}
 25929                                  ; or
 25930                                  ; country = n,,path
 25931                                  
 25932                                  ;cntry_parms p_parms <cntry_parmsx>
 25933                                  cntry_parms:
 25934 00001CDE [E31C]                  	dw	cntry_parmsx
 25935 00001CE0 01                      	db	1
 25936 00001CE1 01                      	db	1
 25937 00001CE2 3B                      	db	';'
 25938                                  	
 25939                                  cntry_parmsx:
 25940 00001CE3 0103[ED1C][011D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 25940 00001CE9 [0A1D]             
 25941 00001CEB 00                      	db	0		; no switches
 25942 00001CEC 00                      	db	0		; no keywords
 25943                                  
 25944                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 25945                                  cntry_pos1:
 25946 00001CED 0080                    	dw	8000h
 25947 00001CEF 0000                    	dw	0
 25948 00001CF1 [B01C]                  	dw	result_val	
 25949 00001CF3 [F61C]                  	dw	cc_range
 25950 00001CF5 00                      	db	0
 25951                                  
 25952                                  ;cc_range p_range <,,,1,999>
 25953                                  cc_range:
 25954 00001CF6 01                      	db	1
 25955 00001CF7 01                      	db	1
 25956 00001CF8 01                      	db	1
 25957 00001CF9 01000000                	dd	1
 25958 00001CFD E7030000                	dd	999
 25959                                  
 25960                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 25961                                  cntry_pos2:
 25962 00001D01 0180                    	dw	8001h
 25963 00001D03 0000                    	dw	0
 25964 00001D05 [B01C]                  	dw	result_val	
 25965 00001D07 [F61C]                  	dw	cc_range
 25966 00001D09 00                      	db	0
 25967                                  
 25968                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 25969                                  cntry_pos3:
 25970 00001D0A 0102                    	dw	201h
 25971 00001D0C 0000                    	dw	0
 25972 00001D0E [B01C]                  	dw	result_val	
 25973 00001D10 [AF1C]                  	dw	noval
 25974 00001D12 00                      	db	0	
 25975                                  
 25976                                  p_cntry_code:
 25977 00001D13 0000                    	dw	0	; local variable
 25978                                  p_code_page:
 25979 00001D15 0000                    	dw	0	; local variable
 25980                                  
 25981                                  ;-----------------------------------------------------------------------
 25982                                  
 25983                                  	; 27/10/2022
 25984                                  
 25985                                  ; files = n
 25986                                  
 25987                                  ;files_parms p_parms <files_parmsx>
 25988                                  files_parms:
 25989 00001D17 [1C1D]                  	dw	files_parmsx
 25990 00001D19 01                      	db	1
 25991 00001D1A 01                      	db	1
 25992 00001D1B 3B                      	db	';'
 25993                                  
 25994                                  files_parmsx:
 25995 00001D1C 0101[221D]              	dw	101h,files_pos	; min,max 1 positional
 25996 00001D20 00                      	db	0		; no switches
 25997 00001D21 00                      	db	0		; no keywords
 25998                                  
 25999                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 26000                                  files_pos:
 26001 00001D22 0080                    	dw	8000h
 26002 00001D24 0000                    	dw	0
 26003 00001D26 [B01C]                  	dw	result_val	
 26004 00001D28 [2B1D]                  	dw	files_range
 26005 00001D2A 00                      	db	0
 26006                                  
 26007                                  ;files_range p_range <,,,8,255>
 26008                                  files_range:
 26009 00001D2B 01                      	db	1
 26010 00001D2C 01                      	db	1
 26011 00001D2D 01                      	db	1
 26012 00001D2E 08000000                	dd	8
 26013 00001D32 FF000000                	dd	255
 26014                                  
 26015                                  p_files:
 26016 00001D36 00                      	db	0		; local variable
 26017                                  
 26018                                  ;-----------------------------------------------------------------------
 26019                                  
 26020                                  	; 27/10/2022
 26021                                  
 26022                                  ; fcbs = n,m
 26023                                  
 26024                                  ;fcbs_parms p_parms <fcbs_parmsx>
 26025                                  fcbs_parms:
 26026 00001D37 [3C1D]                  	dw	fcbs_parmsx
 26027 00001D39 01                      	db	1
 26028 00001D3A 01                      	db	1
 26029 00001D3B 3B                      	db	';'
 26030                                  
 26031                                  fcbs_parmsx:
 26032 00001D3C 0102[441D][581D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 26033 00001D42 00                      	db	0		; no switches
 26034 00001D43 00                      	db	0		; no keywords
 26035                                  
 26036                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 26037                                  fcbs_pos_1:
 26038 00001D44 0080                    	dw	8000h
 26039 00001D46 0000                    	dw	0
 26040 00001D48 [B01C]                  	dw	result_val	
 26041 00001D4A [4D1D]                  	dw	fcbs_range
 26042 00001D4C 00                      	db	0
 26043                                  
 26044                                  ;fcbs_range p_range <,,,1,255>
 26045                                  fcbs_range:
 26046 00001D4D 01                      	db	1
 26047 00001D4E 01                      	db	1
 26048 00001D4F 01                      	db	1
 26049 00001D50 01000000                	dd	1
 26050 00001D54 FF000000                	dd	255
 26051                                  
 26052                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 26053                                  fcbs_pos_2:
 26054 00001D58 0080                    	dw	8000h
 26055 00001D5A 0000                    	dw	0
 26056 00001D5C [B01C]                  	dw	result_val	
 26057 00001D5E [611D]                  	dw	fcbs_keep_range
 26058 00001D60 00                      	db	0
 26059                                  
 26060                                  ;fcbs_keep_range p_range <,,,0,255>
 26061                                  fcbs_keep_range:
 26062 00001D61 01                      	db	1
 26063 00001D62 01                      	db	1
 26064 00001D63 01                      	db	1
 26065 00001D64 00000000                	dd	0
 26066 00001D68 FF000000                	dd	255
 26067                                  
 26068 00001D6C 00                      p_fcbs:	db	0		; local variable
 26069 00001D6D 00                      p_keep:	db	0		; local variable
 26070                                  
 26071                                  ;-----------------------------------------------------------------------
 26072                                  
 26073                                  	; 27/10/2022
 26074                                  
 26075                                  ; lastdrive = x
 26076                                  
 26077                                  ;ldrv_parms p_parms <ldrv_parmsx>
 26078                                  ldrv_parms:
 26079 00001D6E [731D]                  	dw	ldrv_parmsx
 26080 00001D70 01                      	db	1
 26081 00001D71 01                      	db	1
 26082 00001D72 3B                      	db	';'
 26083                                  
 26084                                  ldrv_parmsx:
 26085 00001D73 0101[791D]              	dw	101h,ldrv_pos	; min,max = 1 positional
 26086 00001D77 00                      	db	0		; no switches
 26087 00001D78 00                      	db	0		; no keywords
 26088                                  
 26089                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 26090                                  ldrv_pos:				    ; remove colon at end
 26091 00001D79 1001                    	dw	110h
 26092 00001D7B 1000                    	dw	10h
 26093 00001D7D [B01C]                  	dw	result_val	
 26094 00001D7F [AF1C]                  	dw	noval
 26095 00001D81 00                      	db	0
 26096                                  	
 26097 00001D82 00                      p_ldrv:	db	0		; local variable
 26098                                  
 26099                                  ;-----------------------------------------------------------------------
 26100                                  
 26101                                  	; 27/10/2022
 26102                                  
 26103                                  ; stacks = n,m
 26104                                  
 26105                                  ;stks_parms p_parms <stks_parmsx>
 26106                                  stks_parms:
 26107 00001D83 [881D]                  	dw	stks_parmsx
 26108 00001D85 01                      	db	1
 26109 00001D86 01                      	db	1
 26110 00001D87 3B                      	db	';'
 26111                                  
 26112                                  stks_parmsx:
 26113 00001D88 0202[901D][A41D]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 26114 00001D8E 00                      	db	0		; no switches
 26115 00001D8F 00                      	db	0		; no keywords
 26116                                  
 26117                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 26118                                  stks_pos_1:
 26119 00001D90 0080                    	dw	8000h
 26120 00001D92 0000                    	dw	0
 26121 00001D94 [B01C]                  	dw	result_val	
 26122 00001D96 [991D]                  	dw	stks_range
 26123 00001D98 00                      	db	0
 26124                                  
 26125                                  ;stks_range p_range <,,,0,64>
 26126                                  stks_range:
 26127 00001D99 01                      	db	1
 26128 00001D9A 01                      	db	1
 26129 00001D9B 01                      	db	1
 26130 00001D9C 00000000                	dd	0
 26131 00001DA0 40000000                	dd	64
 26132                                  
 26133                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 26134                                  stks_pos_2:
 26135 00001DA4 0080                    	dw	8000h
 26136 00001DA6 0000                    	dw	0
 26137 00001DA8 [B01C]                  	dw	result_val	
 26138 00001DAA [AD1D]                  	dw	stk_size_range
 26139 00001DAC 00                      	db	0
 26140                                  
 26141                                  ;stk_size_range p_range <,,,0,512>
 26142                                  stk_size_range:
 26143 00001DAD 01                      	db	1
 26144 00001DAE 01                      	db	1
 26145 00001DAF 01                      	db	1
 26146 00001DB0 00000000                	dd	0
 26147 00001DB4 00020000                	dd	512	
 26148                                  
 26149                                  p_stack_count:
 26150 00001DB8 0000                    	dw	0	; local variable
 26151                                  p_stack_size:
 26152 00001DBA 0000                    	dw	0	; local variable
 26153                                  
 26154                                  ;-----------------------------------------------------------------------
 26155                                  
 26156                                  	; 27/10/2022
 26157                                  
 26158                                  ; multitrack = [ on | off ]
 26159                                  
 26160                                  ;mtrk_parms p_parms <mtrk_parmsx>
 26161                                  mtrk_parms:
 26162 00001DBC [C11D]                  	dw	mtrk_parmsx
 26163 00001DBE 01                      	db	1
 26164 00001DBF 01                      	db	1
 26165 00001DC0 3B                      	db	';'
 26166                                  
 26167                                  mtrk_parmsx:
 26168 00001DC1 0101[C71D]              	dw	101h,mtrk_pos	; min,max = 1 positional
 26169 00001DC5 00                      	db	0		; no switches
 26170 00001DC6 00                      	db	0		; no keywords
 26171                                  
 26172                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 26173                                  mtrk_pos:
 26174 00001DC7 0020                    	dw	2000h
 26175 00001DC9 0000                    	dw	0
 26176 00001DCB [B01C]                  	dw	result_val	
 26177 00001DCD [CC1C]                  	dw	on_off_string
 26178 00001DCF 00                      	db	0
 26179                                  
 26180 00001DD0 00                      p_mtrk:	db	0		; local variable
 26181                                  
 26182                                  ;-----------------------------------------------------------------------
 26183                                  
 26184                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26185                                  	; (SYSINIT:20B2h)
 26186                                  
 26187                                  ; switches=/k
 26188                                  
 26189                                  ;swit_parms p_parms <swit_parmsx>
 26190                                  swit_parms:
 26191 00001DD1 [D61D]                  	dw	swit_parmsx
 26192 00001DD3 01                      	db	1
 26193 00001DD4 01                      	db	1
 26194 00001DD5 3B                      	db	';'
 26195                                  
 26196                                  swit_parmsx:
 26197 00001DD6 0000                    	dw	0		; no positionals
 26198                                  	;db	5               ; # of switches
 26199                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26200 00001DD8 03                      	db	3
 26201 00001DD9 [E01D]                  	dw	swit_k_ctrl	; /k control
 26202                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 26203                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 26204 00001DDB [EC1D]                  	dw	swit_t_ctrl     ; /t control
 26205 00001DDD [F81D]                  	dw	swit_w_ctrl     ; /w control
 26206 00001DDF 00                      	db	0		; no keywords
 26207                                  
 26208                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 26209                                  swit_k_ctrl:
 26210 00001DE0 00000000[B01C]-         	dw	0,0,result_val,noval
 26210 00001DE6 [AF1C]             
 26211 00001DE8 01                      	db	1
 26212 00001DE9 2F4B00                  swit_k:	db	'/K',0
 26213                                  
 26214                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 26215                                  ;
 26216                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 26217                                  ;swit_n_ctrl:
 26218                                  ;	dw	0,0,result_val,noval
 26219                                  ;	db	1
 26220                                  ;swit_n: db	'/N',0
 26221                                  ;
 26222                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 26223                                  ;swit_f_ctrl:
 26224                                  ;	dw	0,0,result_val,noval
 26225                                  ;	db	1
 26226                                  ;swit_f: db 	'/F',0
 26227                                  
 26228                                  	; 27/10/2022
 26229                                  
 26230                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 26231                                  swit_t_ctrl:
 26232 00001DEC 00000000[B01C]-         	dw	0,0,result_val,noval
 26232 00001DF2 [AF1C]             
 26233 00001DF4 01                      	db	1
 26234 00001DF5 2F5400                  swit_t:	db	'/T',0			   ;				M059
 26235                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 26236                                  swit_w_ctrl:
 26237 00001DF8 00000000[B01C]-         	dw	0,0,result_val,noval
 26237 00001DFE [AF1C]             
 26238 00001E00 01                      	db	1
 26239 00001E01 2F5700                  swit_w:	db	'/W',0			   ;				M063
 26240                                  
 26241                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 26242                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 26243                                  ;   in the above table to prevent the parsing code from complaining about them
 26244                                  
 26245 00001E04 00                      p_swit_k:	db     0	; local variable
 26246 00001E05 00                      p_swit_t:	db     0	; local variable			M059
 26247 00001E06 00                      p_swit_w:	db     0	; local variable			M063
 26248                                  
 26249                                  ;-----------------------------------------------------------------------
 26250                                  
 26251                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26252                                  	; (SYSINIT:20E8h)
 26253                                  
 26254                                  ; DOS = [ high | low ]
 26255                                  
 26256                                  ;dos_parms p_parms  <dos_parmsx>
 26257                                  dos_parms:
 26258 00001E07 [0C1E]                  	dw	dos_parmsx
 26259 00001E09 01                      	db	1
 26260 00001E0A 01                      	db	1
 26261 00001E0B 3B                      	db	';'
 26262                                  dos_parmsx:
 26263 00001E0C 01                      	db	1		; min parameters
 26264 00001E0D 02                      	db	2		; max parameters
 26265 00001E0E [141E]                  	dw	dos_pos		; 
 26266 00001E10 [141E]                  	dw	dos_pos		; 
 26267 00001E12 00                      	db	0		; no switches
 26268 00001E13 00                      	db	0		; no keywords
 26269                                  
 26270                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 26271                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 26272                                  dos_pos:
 26273 00001E14 00200000[B01C]-         	dw	2000h,0,result_val,dos_strings
 26273 00001E1A [261E]             
 26274 00001E1C 00                      	db	0
 26275 00001E1D 00200000[B01C]-         	dw	2000h,0,result_val,dos_strings
 26275 00001E23 [261E]             
 26276 00001E25 00                      	db	0	
 26277                                  
 26278                                  dos_strings:	;label	byte
 26279 00001E26 03                      	db	3		; signals that there is a string choice
 26280 00001E27 00                      	db	0		; no range definition
 26281 00001E28 00                      	db	0		; no numeric values choice
 26282 00001E29 04                      	db	4		; 4 strings for choice
 26283 00001E2A 01                      	db	1		; the 1st string tag
 26284 00001E2B [361E]                  	dw	hi_string
 26285 00001E2D 02                      	db	2		; the 2nd string tag
 26286 00001E2E [3B1E]                  	dw	lo_string
 26287 00001E30 03                      	db	3
 26288 00001E31 [3F1E]                  	dw	umb_string
 26289 00001E33 04                      	db	4
 26290 00001E34 [431E]                  	dw	noumb_string
 26291                                  
 26292 00001E36 4849474800              hi_string:	db	"HIGH",0
 26293 00001E3B 4C4F5700                lo_string:	db	"LOW",0
 26294 00001E3F 554D4200                umb_string:	db	"UMB",0
 26295 00001E43 4E4F554D4200            noumb_string:	db	"NOUMB",0
 26296                                  
 26297 00001E49 00                      p_dos_hi:	db	0	; local variable
 26298                                  				; BUGBUG : I dont know whether PARSER uses
 26299                                  				;          this variable or not
 26300                                  
 26301                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26302                                  
 26303                                  %if 0
 26304                                  
 26305                                  ;****************************************************************** RICHID ****
 26306                                  
 26307                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 26308                                  
 26309                                  ; 30/03/2019 - Retro DOS v4.0
 26310                                  ;------------------------------------------------------------------------------
 26311                                  
 26312                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 26313                                  ;
 26314                                  ;   Date:     May 14, 1992
 26315                                  ;
 26316                                  ;******************************************************************************
 26317                                  ;
 26318                                  ;   Modification log:
 26319                                  ;
 26320                                  ;     DATE    WHO      DESCRIPTION
 26321                                  ;   --------  -------  --------------------------------------------------------
 26322                                  ;   05/14/92  t-richj  Original
 26323                                  ;   06/21/92  t-richj  Final revisions before check-in
 26324                                  ;
 26325                                  ;******************************************************************************
 26326                                  ;
 26327                                  ; There are two primary definitions which need to be made, selectively, before
 26328                                  ; this include file should be used.  These are:
 26329                                  ;    HV_Extern - If this has been defined, variables for this module will be
 26330                                  ;                declared as external.  Otherwise, variables will be declared
 26331                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 26332                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 26333                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 26334                                  ;                (as only one module, sysconf.asm, includes this file).
 26335                                  ;    HV_LoadHigh - This should be defined when this module is going into
 26336                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 26337                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 26338                                  ;
 26339                                  ;******************************************************************************
 26340                                  
 26341                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 26342                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 26343                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 26344                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 26345                                  ; space problem (it's just such a nice round number, eh?).
 26346                                  
 26347                                  MAXUMB	equ	16
 26348                                  
 26349                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 26350                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 26351                                  
 26352                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 26353                                  SystemPSPOwner	equ	8
 26354                                  ;JapanPSPOwner	equ	9
 26355                                  
 26356                                  ; for LoadHigh and DeviceHigh:
 26357                                  ;
 26358                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 26359                                  ;	          UnHideUMBs().
 26360                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 26361                                  ;	           line.
 26362                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 26363                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 26364                                  ;	          given a command-line like "/L:3,500;4"
 26365                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 26366                                  ;	          matching its index number was specified on the command-line;
 26367                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 26368                                  ;	          will be set to 1.  All others will be set to 0.
 26369                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 26370                                  ;	          specified by the user for a UMB (in the above example, all
 26371                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 26372                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 26373                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 26374                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 26375                                  ;	           for details).
 26376                                  
 26377                                  fInHigh:  db	0
 26378                                  fUmbTiny: db	0
 26379                                  SegLoad:  dw	0
 26380                                  UmbLoad:  db	0
 26381                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 26382                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 26383                                  fm_umb:   db	0
 26384                                  fm_strat: db	0
 26385                                  fm_argc:  db	0	
 26386                                  
 26387                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 26388                                  ; UmbLoad is set to the UMB number given.
 26389                                  
 26390                                  UNSPECIFIED	equ	-1
 26391                                  
 26392                                  %endif
 26393                                  
 26394                                  ;****************************************************************** RICHID ****
 26395                                  
 26396                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 26397                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 26398                                  
 26399                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26400                                  ; (SYSINIT:212Bh)	
 26401                                  
 26402                                  		;public	DevEntry
 26403                                  
 26404 00001E4A 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 26405 00001E4C 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 26406 00001E4E 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 26407 00001E50 00000000                DevEntry:	dd	0	; Entry point to the device driver
 26408 00001E54 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 26409                                  ; 27/10/2022 
 26410                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 26411                                  ;
 26412 00001E58 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 26413 00001E59 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 26414 00001E5B 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 26415 00001E5D 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 26416                                  ;
 26417 00001E5F 00000000                DevXMSAddr:	dd	0
 26418                                  ;
 26419 00001E63 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 26420 00001E65 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 26421                                  ;
 26422 00001E67 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 26423                                  				;  is being loaded into UMB
 26424 00001E68 0000                    DevSizeOption:	dw	0	; SIZE= option
 26425                                  ;
 26426 00001E6A 00                      Int12Lied:	db	0	; did we trap int 12 ?
 26427 00001E6B 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 26428 00001E6D 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 26429                                  ;
 26430 00001E75 00                      FirstUMBLinked:	db	0
 26431 00001E76 0000                    DevDOSData:	dw	0	; segment of DOS Data
 26432 00001E78 00000000                DevCmdLine:	dd	0	; Current Command line
 26433 00001E7C 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 26434                                  				; to use the file name in the command line
 26435                                  ;
 26436                                  ;	ifdef	dblspace_hooks
 26437                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 26438                                  ;	endif
 26439                                  
 26440                                  ; ===========================================================================
 26441                                  
 26442                                  ; 31/03/2019 - Retro DOS v4.0
 26443                                  
 26444                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26445                                  ; (SYSINIT:215Eh)
 26446                                  
 26447                                  ;----------------------------------------------------------------------------
 26448                                  ;
 26449                                  ; procedure : doconf
 26450                                  ;
 26451                                  ;             Config file is parsed initially with this routine. For the
 26452                                  ;             Subsequent passes 'multi_pass' entry is used .
 26453                                  ;
 26454                                  ;----------------------------------------------------------------------------
 26455                                  
 26456                                  	; 27/10/2022
 26457                                  doconf:
 26458 00001E7D 0E                      	push	cs
 26459 00001E7E 1F                      	pop	ds
 26460                                  
 26461 00001E7F B80037                  	mov	ax,3700h
 26462                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 26463 00001E82 CD21                    	int	21h
 26464 00001E84 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 26465                                  
 26466                                  ; 27/10/2022
 26467                                  ;;ifdef	MULTI_CONFIG
 26468                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 26469                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 26470                                  ;;endif	;MULTI_CONFIG
 26471                                  
 26472 00001E88 BA[F232]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 26473 00001E8B B8003D                  	mov	ax,3D00h
 26474                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 26475 00001E8E F9                      	stc				;in case of int 24
 26476 00001E8F CD21                    	int	21h			;function request
 26477 00001E91 7306                    	jnc	short noprob		; brif opened okay
 26478                                  
 26479                                  ; 27/10/2022
 26480                                  ;;ifdef	MULTI_CONFIG
 26481                                  ;      	call	kbd_read		; we still want to give the guy
 26482                                  ;					; a chance to select clean boot!
 26483                                  ;;endif					; (ie, no autoexec.bat processing)
 26484 00001E93 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 26485 00001E98 C3                      	retn
 26486                                  noprob: 				;get file size (note < 64k!!)
 26487 00001E99 89C3                    	mov	bx,ax  ; File handle
 26488 00001E9B 31C9                    	xor	cx,cx
 26489 00001E9D 31D2                    	xor	dx,dx
 26490                                  	;mov	ax,4202h
 26491 00001E9F B80242                  	mov	ax,(LSEEK<<8)|2
 26492 00001EA2 CD21                    	int	21h
 26493 00001EA4 A3[D203]                	mov	[count],ax
 26494                                  
 26495 00001EA7 31D2                    	xor	dx,dx
 26496                                  	;mov	ax,4200h
 26497 00001EA9 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 26498 00001EAC CD21                    	int	21h
 26499                                  
 26500                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 26501                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26502 00001EAE 8B16[A102]              	mov	dx,[top_of_cdss] 
 26503                                  
 26504 00001EB2 A1[D203]                	mov	ax,[count]
 26505 00001EB5 A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 26506 00001EB8 E8D6F1                  	call	ParaRound
 26507 00001EBB 29C2                    	sub	dx,ax
 26508                                  
 26509                                  ; 27/10/2022
 26510                                  ;;ifdef	MULTI_CONFIG
 26511                                  ;;
 26512                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 26513                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 26514                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 26515                                  ;;  we (may) add a variable to the environment that does not explicity appear
 26516                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 26517                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 26518                                  ;;  of extra space, so here we account for it (the worst case of course is
 26519                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 26520                                  ;;
 26521                                  ;       dec     dx                      ;reserve 1 additional paragraph
 26522                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 26523                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 26524                                  ;;endif	;MULTI_CONFIG
 26525                                  
 26526 00001EBD 83EA11                  	sub	dx,11h			;room for header
 26527                                  	
 26528                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 26529                                  	;mov	[CONFBOT],dx
 26530                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26531 00001EC0 8916[A102]              	mov	[top_of_cdss],dx
 26532 00001EC4 E8F1EC                  	call    TempCDS 
 26533                                  	; 11/12/2022
 26534                                  	; ds <> cs 
 26535 00001EC7 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 26536                                   
 26537 00001ECC 8EDA                    	mov	ds,dx
 26538 00001ECE 8EC2                    	mov	es,dx
 26539                                  
 26540 00001ED0 31D2                    	xor	dx,dx
 26541 00001ED2 2E8B0E[D203]            	mov	cx,[cs:count]
 26542 00001ED7 B43F                    	mov	ah,3Fh
 26543                                  	;mov	ah,READ  ; 3Fh
 26544 00001ED9 F9                      	stc				;in case of int 24
 26545 00001EDA CD21                    	int	21h			;function request
 26546 00001EDC 9C                      	pushf
 26547                                  
 26548                                  ; find the eof mark in the file. if present,then trim length.
 26549                                  
 26550 00001EDD 50                      	push	ax
 26551 00001EDE 57                      	push	di
 26552 00001EDF 51                      	push	cx
 26553 00001EE0 B01A                    	mov	al,1Ah			; eof mark
 26554 00001EE2 89D7                    	mov	di,dx			; point to buffer
 26555 00001EE4 E305                    	jcxz	puteol			; no chars
 26556 00001EE6 F2AE                    	repnz	scasb			; find end
 26557 00001EE8 7501                    	jnz	short puteol		; none found and count exhausted
 26558                                  
 26559                                  ; we found a 1a. back up
 26560                                  
 26561 00001EEA 4F                      	dec	di			; backup past 1Ah
 26562                                  
 26563                                  ;  just for the halibut, stick in an extra eol
 26564                                  
 26565                                  puteol:
 26566 00001EEB B00D                    	mov	al,cr ; 0Dh
 26567 00001EED AA                      	stosb
 26568 00001EEE B00A                    	mov	al,lf  ;0Ah
 26569 00001EF0 AA                      	stosb
 26570 00001EF1 29D7                    	sub	di,dx			; difference moved
 26571                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26572                                  	;mov	[cs:count],di		; new count
 26573                                  
 26574                                  	; 11/12/2022	
 26575                                  	; 31/03/2019 - Retro DOS v4.0
 26576 00001EF3 0E                      	push	cs
 26577 00001EF4 1F                      	pop	ds
 26578                                  
 26579 00001EF5 893E[D203]              	mov	[count],di		; new count
 26580                                  
 26581 00001EF9 59                      	pop	cx
 26582 00001EFA 5F                      	pop	di
 26583 00001EFB 58                      	pop	ax
 26584                                  
 26585                                  	; 11/12/2022
 26586                                  	; 27/10/2022
 26587                                  	;push	cs
 26588                                  	;pop	ds
 26589                                  
 26590 00001EFC 50                      	push	ax
 26591                                  	;mov	ah,CLOSE
 26592 00001EFD B43E                    	mov	ah,3Eh
 26593 00001EFF CD21                    	int	21h
 26594 00001F01 58                      	pop	ax
 26595 00001F02 9D                      	popf
 26596 00001F03 7204                    	jc	short conferr 		;if not we've got a problem
 26597 00001F05 39C1                    	cmp	cx,ax
 26598 00001F07 742C                    	jz	short getcom		;couldn't read the file
 26599                                  conferr:
 26600 00001F09 BA[F232]                	mov	dx,config		;want to print config error
 26601 00001F0C E83A13                  	call	badfil
 26602                                  endconv:
 26603 00001F0F C3                      	retn
 26604                                  
 26605                                  ;----------------------------------------------------------------------------
 26606                                  ;
 26607                                  ; entry : multi_pass
 26608                                  ;
 26609                                  ;             called to execute device=,install= commands
 26610                                  ;
 26611                                  ;----------------------------------------------------------------------------
 26612                                  
 26613                                  	; 27/10/2022
 26614                                  multi_pass:
 26615 00001F10 0E                      	push	cs
 26616 00001F11 1F                      	pop	ds
 26617                                  
 26618 00001F12 803E[4903]0A            	cmp	byte [multi_pass_id],10
 26619                                  ;jae_endconv:
 26620 00001F17 73F6                    	jae	short endconv 		; do nothing. just return.
 26621                                  
 26622                                  	;push	word [CONFBOT]
 26623                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26624 00001F19 FF36[A102]              	push	word [top_of_cdss]
 26625 00001F1D 07                      	pop	es			; es -> confbot
 26626                                  
 26627 00001F1E 8B36[D403]              	mov	si,[org_count]
 26628 00001F22 8936[D203]              	mov	[count],si		; set count
 26629 00001F26 31F6                    	xor	si,si ; 0
 26630 00001F28 8936[D603]                      mov     [chrptr],si		; reset chrptr
 26631 00001F2C 8936[2B03]                      mov     [linecount],si		; reset linecount
 26632                                  
 26633 00001F30 E89A10                  	call	getchr
 26634 00001F33 EB06                    	jmp	short conflp
 26635                                  
 26636                                  getcom:
 26637 00001F35 E87E0E                          call    organize                ; organize the file
 26638 00001F38 E89210                  	call	getchr
 26639                                  conflp: 
 26640 00001F3B 72D2                    	jc	short endconv
 26641                                  
 26642 00001F3D FF06[2B03]                      inc     word [linecount]	; increase linecount
 26643                                  
 26644 00001F41 C606[F713]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 26645 00001F46 C606[FA13]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 26646 00001F4B 3C0A                    	cmp	al,lf			; linefeed?
 26647 00001F4D 7416                    	je	short blank_line	;  then ignore this line.
 26648                                  
 26649                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26650                                  %if 0
 26651                                  
 26652                                  ;ifdef	MULTI_CONFIG
 26653                                  
 26654                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 26655                                  ;   number immediately following it....
 26656                                  
 26657                                          mov     [config_cmd],al         ; save original command code
 26658                                  	;and	al,NOT CONFIG_OPTION_QUERY
 26659                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 26660                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 26661                                          je      short not_final		; no, line number is not embedded
 26662                                  
 26663                                          push    ax                      ;
 26664                                          call    getchr                  ; ignore end-of-image errors,
 26665                                          mov     ah,al                   ; because if there's an error
 26666                                          call    getchr                  ; fetching the line number that's
 26667                                          xchg    al,ah                   ; supposed to be there, the next
 26668                                          mov     [linecount],ax          ; getchr call will get the same error
 26669                                          pop     ax
 26670                                  ;
 26671                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 26672                                  ;   which to obtain its original program name, it grovels through all of
 26673                                  ;   memory to find the filename that was used to exec it; it wants to find
 26674                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 26675                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 26676                                  ;   immediately before the filename, but since we are now storing line # info
 26677                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 26678                                  ;   spot.
 26679                                  ;
 26680                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 26681                                  ;   over the line number info, since we no longer need that info anyway. This
 26682                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 26683                                  ;   retrieved.
 26684                                  ;
 26685                                          cmp	byte [multi_pass_id],2	; final pass?
 26686                                          jb	short not_final		; no
 26687                                          ;test	word [install_flag],have_install_cmd
 26688                                  	test	byte [install_flag],have_install_cmd ; 1
 26689                                          jz	short final		; no install cmds, so yes it is
 26690                                          cmp	byte [multi_pass_id],3	; final pass?
 26691                                          jb	short not_final		; no
 26692                                  final:                                  ;
 26693                                  	mov	[es:si],al		; save backward-compatible command code
 26694                                  not_final:                              ;
 26695                                  ;endif
 26696                                  
 26697                                  %endif
 26698 00001F4F 88C4                    	mov	ah,al
 26699 00001F51 E87910                  	call	getchr
 26700 00001F54 7314                    	jnc	short tryi
 26701                                  
 26702 00001F56 803E[4903]02            	cmp	byte [multi_pass_id],2
 26703                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 26704                                  	; 27/10/2022
 26705 00001F5B 73B2                    	jnb	short endconv	
 26706 00001F5D E90107                  	jmp	badop
 26707                                  	
 26708                                  coff:	
 26709                                  	; 11/12/2022
 26710                                  	; ds = cs
 26711                                  	;push	cs
 26712                                  	;pop	ds
 26713 00001F60 E86110                  	call	newline
 26714 00001F63 EBD6                    	jmp	short conflp	; 13/05/2019
 26715                                  
 26716                                  blank_line:
 26717 00001F65 E86510                  	call	getchr
 26718 00001F68 EBD1                    	jmp	short conflp
 26719                                  
 26720                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26721                                  ; 11/12/2022
 26722                                  ; (there is not a jump or call to here from anywhere!)
 26723                                  ;coff_p:
 26724                                  	;push	cs
 26725                                  	;pop	ds
 26726                                  
 26727                                  ;to handle install= commands,we are going to use multi-pass.
 26728                                  ;the first pass handles the other commands and only set install_flag when
 26729                                  ;it finds any install command. the second pass will only handle the
 26730                                  ;install= command.
 26731                                  
 26732                                  ;------------------------------------------------------------------------------
 26733                                  ;install command
 26734                                  ;------------------------------------------------------------------------------
 26735                                  
 26736                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26737                                  	; (SYSINIT:2250h)
 26738                                  tryi:
 26739 00001F6A 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 26740 00001F6F 7503                    	jne	short not_init_pass
 26741 00001F71 E92301                  	jmp	multi_try_doshi
 26742                                  not_init_pass:
 26743 00001F74 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 26744                                          ; 11/12/2022
 26745                                  	;je	short multi_pass_coff2	; now it is NOPs
 26746 00001F79 74E5                    	je	short coff
 26747                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26748                                  	;je	short multi_pass_coff	
 26749                                  					; This pass can be made use of if
 26750                                  					; we want do some config.sys process
 26751                                  					; after device drivers are loaded
 26752                                  					; and before install= commands
 26753                                  					; are processed
 26754                                  
 26755 00001F7B 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 26756 00001F80 7411                    	je	short multi_try_i
 26757 00001F82 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 26758                                  	; 11/12/2022
 26759                                  	;je	short multi_pass_coff2
 26760 00001F85 74D9                    	je	short coff
 26761                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26762                                  	;je	short multi_pass_coff	
 26763                                  
 26764                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 26765                                  ;       but don't process them now.        
 26766                                          
 26767 00001F87 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 26768                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 26769                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26770 00001F8A 752A                    	jne	short tryb	
 26771                                  	
 26772                                  	;or	word [install_flag],have_install_cmd ; set the flag
 26773 00001F8C 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 26774                                  multi_pass_coff2:
 26775 00001F91 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 26776                                  
 26777                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26778                                  ;precheck_installhigh:
 26779                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 26780                                  ;       jne     short tryb		; carry on with normal processing
 26781                                  ;	;or	word [install_flag],have_install_cmd
 26782                                  ;	or	byte [install_flag],have_install_cmd ; 1
 26783                                  ;       jmp	short coff
 26784                                  
 26785                                  multi_try_i:
 26786 00001F93 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 26787                                  	;jne	short multi_try_n	; no, check for installhigh
 26788                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26789 00001F96 7505                    	jne	short multi_pass_filter
 26790                                  
 26791                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26792                                  ;;ifdef	MULTI_CONFIG
 26793                                  ;       call    query_user              ; query the user if config_cmd
 26794                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26795                                  ;;endif
 26796                                  
 26797 00001F98 E878F0                  	call	do_install_exec 	;install it.
 26798 00001F9B EBC3                    	jmp	short coff		;to handle next install= command.
 26799                                  
 26800                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26801                                  %if 0
 26802                                  
 26803                                  multi_try_n:
 26804                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 26805                                          jne	short multi_pass_filter	; no. ignore this.
 26806                                  ;ifdef	MULTI_CONFIG
 26807                                          call    query_user              ; query the user if config_cmd
 26808                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 26809                                  ;endif
 26810                                  
 26811                                  ;       The memory environment is in its normal DOS state, so do
 26812                                  ;       the standard calls to set the alloc strategy for loading high
 26813                                  
 26814                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 26815                                  	int	21h			;get alloc strategy
 26816                                  	mov	bx,ax
 26817                                          push    bx                      ; save for the return
 26818                                  
 26819                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 26820                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 26821                                  	int	21h			;set alloc strategy
 26822                                  
 26823                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 26824                                          int     21h                     ; get link state
 26825                                          xor     ah,ah                   ; clear top byte
 26826                                          push    ax                      ; save for return
 26827                                  
 26828                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 26829                                  	mov	bx,1
 26830                                  	int	21h			;link in UMBs
 26831                                  
 26832                                  	call	do_install_exec 	;install it.
 26833                                  
 26834                                          mov     ax,(ALLOCOPER<<8)|3
 26835                                          pop     bx                      ; recover original link state
 26836                                          int     21h
 26837                                          pop     bx                      ; recover original alloc strategy
 26838                                          mov     ax,(ALLOCOPER<<8)|1
 26839                                          int     21h
 26840                                  
 26841                                  	jmp	coff			;to handle next install= command.
 26842                                  
 26843                                  %endif
 26844                                  
 26845                                  multi_pass_filter:
 26846 00001F9D 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 26847 00001FA0 740A                    	je	short multi_pass_adjust
 26848 00001FA2 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 26849 00001FA5 7405                    	je	short multi_pass_adjust
 26850 00001FA7 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 26851 00001FAA 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 26852                                  
 26853                                  multi_pass_adjust:			; these commands need to
 26854 00001FAC FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 26855 00001FB0 FF06[D203]              	inc	word [count]		;  for newline proc.
 26856                                  
 26857                                  multi_pass_coff:
 26858                                  	; 11/12/2022
 26859 00001FB4 EBAA                    	jmp	short coff		; to handle next install= commands.
 26860                                  
 26861                                  ;------------------------------------------------------------------------------
 26862                                  ; buffer command
 26863                                  ;------------------------------------------------------------------------------
 26864                                  
 26865                                  ;******************************************************************************
 26866                                  ;									      *
 26867                                  ; function: parse the parameters of buffers= command.			      *
 26868                                  ;									      *
 26869                                  ; input :								      *
 26870                                  ;	es:si -> parameters in command line.				      *
 26871                                  ; output:								      *
 26872                                  ;	buffers set							      *
 26873                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 26874                                  ;	h_buffers set if secondary buffer cache specified.		      *
 26875                                  ;									      *
 26876                                  ; subroutines to be called:						      *
 26877                                  ;	sysinit_parse							      *
 26878                                  ; logic:								      *
 26879                                  ; {									      *
 26880                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 26881                                  ;	set dx,cx to 0; 						      *
 26882                                  ;	reset buffer_slash_x;						      *
 26883                                  ;	while (end of command line)					      *
 26884                                  ;	{ sysinit_parse;						      *
 26885                                  ;	  if (no error) then						      *
 26886                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 26887                                  ;		    buffer_slash_x = 1					      *
 26888                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 26889                                  ;			  buffers = result_val._$P_picked_val;		      *
 26890                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 26891                                  ;	  else	{show error message;error exit} 			      *
 26892                                  ;	};								      *
 26893                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 26894                                  ; };									      *
 26895                                  ;									      *
 26896                                  ;******************************************************************************
 26897                                  
 26898                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26899                                  	; (SYSINIT:229Ch)
 26900                                  tryb:
 26901 00001FB6 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 26902 00001FB9 7557                    	jne	short tryc
 26903                                  
 26904                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26905                                  ;;ifdef	MULTI_CONFIG
 26906                                  ;       call    query_user              ; query the user if config_cmd
 26907                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 26908                                  ;;endif
 26909                                  
 26910                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26911                                  	; 18/12/2022
 26912 00001FBB 31C9                    	xor	cx,cx
 26913                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 26914 00001FBD 880E[AE1C]              	mov	[p_buffer_slash_x],cl ; 0
 26915                                  
 26916 00001FC1 BF[671C]                	mov	di,buf_parms
 26917                                  	;xor	cx,cx	; 18/12/2022
 26918                                  	; 04/01/2023
 26919                                  	;mov	dx,cx
 26920                                  do7:
 26921 00001FC4 E87B06                  	call	sysinit_parse
 26922 00001FC7 7303                    	jnc	short if7		; parse error,
 26923                                  	; 04/01/2023
 26924                                  	;call	badparm_p		;  and show messages and end the search loop.
 26925                                  	;;jmp	short sr7
 26926                                  	; 31/12/2022
 26927                                  ;sr7:
 26928                                  	;jmp	coff
 26929                                  	; 04/01/2023
 26930 00001FC9 E9F405                  	jmp	badparm_p_coff
 26931                                  if7:
 26932 00001FCC 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26933 00001FCF 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 26934                                  	;cmp	word [result_val_swoff],switch_x
 26935 00001FD1 813E[B21C][A71C]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 26936                                  	;jne	short if11
 26937                                  	; 31/12/2022
 26938 00001FD7 74EB                    	je	short do7 ;je short en11
 26939                                  
 26940                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 26941                                  	;jmp	short en11 ; 31/12/2022
 26942                                  if11:
 26943                                  	;mov	ax,[rv_dword]
 26944 00001FD9 A1[B41C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26945 00001FDC 83F901                  	cmp	cx,1
 26946 00001FDF 7505                    	jne	short if13
 26947                                  
 26948 00001FE1 A3[AA1C]                	mov	[p_buffers],ax
 26949                                  	;jmp	short en11
 26950                                  	; 31/12/2022
 26951 00001FE4 EBDE                    	jmp	short do7
 26952                                  if13:
 26953 00001FE6 A3[AC1C]                	mov	[p_h_buffers],ax
 26954                                  en11:
 26955 00001FE9 EBD9                    	jmp	short do7
 26956                                  en7:
 26957 00001FEB 833E[AA1C]63            	cmp	word [p_buffers],99
 26958 00001FF0 760B                    	jbe	short if18
 26959                                  
 26960                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 26961                                  ;	jne	short if18
 26962                                  
 26963 00001FF2 E87806                  	call	badparm_p
 26964 00001FF5 C706[AC1C]0000          	mov	word [p_h_buffers],0
 26965 00001FFB EB12                    	jmp	short sr7
 26966                                  if18:
 26967 00001FFD A1[AA1C]                	mov	ax,[p_buffers]	; we don't have any problem.
 26968 00002000 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 26969                                  
 26970 00002003 A1[AC1C]                	mov	ax,[p_h_buffers]
 26971 00002006 A3[9902]                	mov	[h_buffers],ax
 26972                                  
 26973                                  ;	mov	al,[p_buffer_slash_x]	; M016
 26974                                  ;	mov	[buffer_slash_x],al
 26975                                  
 26976 00002009 A1[2B03]                	mov	ax,[linecount]
 26977 0000200C A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 26978                                  	; 31/12/2022
 26979                                  	;jmp	short sr7
 26980                                  	; 04/01/2023
 26981                                  sr7:
 26982 0000200F E94EFF                  	jmp	coff
 26983                                  
 26984                                  ;------------------------------------------------------------------------------
 26985                                  ; break command
 26986                                  ;------------------------------------------------------------------------------
 26987                                  
 26988                                  ;****************************************************************************
 26989                                  ;									    *
 26990                                  ; function: parse the parameters of break = command.			    *
 26991                                  ;									    *
 26992                                  ; input :								    *
 26993                                  ;	es:si -> parameters in command line.				    *
 26994                                  ; output:								    *
 26995                                  ;	turn the control-c check on or off.				    *
 26996                                  ;									    *
 26997                                  ; subroutines to be called:						    *
 26998                                  ;	sysinit_parse							    *
 26999                                  ; logic:								    *
 27000                                  ; {									    *
 27001                                  ;	set di to brk_parms;						    *
 27002                                  ;	set dx,cx to 0; 						    *
 27003                                  ;	while (end of command line)					    *
 27004                                  ;	{ sysinit_parse;						    *
 27005                                  ;	  if (no error) then						    *
 27006                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 27007                                  ;		   set p_ctrl_break,on;					    *
 27008                                  ;	       else					  /*off 	 */ *
 27009                                  ;		   set p_ctrl_break,off;				    *
 27010                                  ;	  else {show message;error_exit};				    *
 27011                                  ;	};								    *
 27012                                  ;	if (no error) then						    *
 27013                                  ;	   dos function call to set ctrl_break check according to	    *
 27014                                  ; };									    *
 27015                                  ;									    *
 27016                                  ;****************************************************************************
 27017                                  
 27018                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27019                                  	; (SYSINIT:22FFh)
 27020                                  tryc:
 27021 00002012 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 27022 00002015 7534                    	jne	short trym
 27023                                  
 27024                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27025                                  ;;ifdef MULTI_CONFIG
 27026                                  ;       call    query_user              ; query the user if config_cmd
 27027                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 27028                                  ;;endif
 27029 00002017 BF[B81C]                	mov	di,brk_parms
 27030 0000201A 31C9                    	xor	cx,cx
 27031                                  	; 04/01/2023
 27032                                  	;mov	dx,cx
 27033                                  do22:
 27034 0000201C E82306                  	call	sysinit_parse
 27035 0000201F 7303                    	jnc	short if22		; parse error
 27036                                  	;call	badparm_p		;  show message and end the search loop.
 27037                                  	;;jmp	short sr22
 27038                                  	; 31/12/2022
 27039                                  ;sr22:
 27040                                  	;jmp	coff
 27041                                  	; 04/01/2023
 27042 00002021 E99C05                  	jmp	badparm_p_coff
 27043                                  if22:
 27044 00002024 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27045 00002027 7415                    	je	short en22		; then end the $endloop
 27046                                  
 27047                                  	;cmp	byte [result_val_itag],1
 27048 00002029 803E[B11C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 27049 0000202E 7507                    	jne	short if26
 27050                                  
 27051 00002030 C606[DD1C]01            	mov	byte [p_ctrl_break],1	; turn it on
 27052                                  	;jmp	short en26
 27053                                  	; 31/12/2022
 27054 00002035 EBE5                    	jmp	short do22
 27055                                  if26:
 27056 00002037 C606[DD1C]00            	mov	byte [p_ctrl_break],0	; turn it off
 27057                                  en26:
 27058 0000203C EBDE                    	jmp	short do22		; we actually set the ctrl break
 27059                                  en22:
 27060 0000203E B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 27061 00002040 B001                    	mov	al,1
 27062 00002042 8A16[DD1C]              	mov	dl,[p_ctrl_break]
 27063 00002046 CD21                    	int	21h
 27064                                  	; 31/12/2022
 27065                                  	;jmp	short sr22
 27066                                  	; 04/01/2023
 27067                                  sr22:
 27068 00002048 E915FF                  	jmp	coff
 27069                                  
 27070                                  ;------------------------------------------------------------------------------
 27071                                  ; multitrack command
 27072                                  ;------------------------------------------------------------------------------
 27073                                  
 27074                                  ;******************************************************************************
 27075                                  ;									      *
 27076                                  ; function: parse the parameters of multitrack= command.		      *
 27077                                  ;									      *
 27078                                  ; input :								      *
 27079                                  ;	es:si -> parameters in command line.				      *
 27080                                  ; output:								      *
 27081                                  ;	turn multrk_flag on or off.					      *
 27082                                  ;									      *
 27083                                  ; subroutines to be called:						      *
 27084                                  ;	sysinit_parse							      *
 27085                                  ; logic:								      *
 27086                                  ; {									      *
 27087                                  ;	set di to brk_parms;						      *
 27088                                  ;	set dx,cx to 0; 						      *
 27089                                  ;	while (end of command line)					      *
 27090                                  ;	{ sysinit_parse;						      *
 27091                                  ;	  if (no error) then						      *
 27092                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 27093                                  ;		   set p_mtrk,on;					      *
 27094                                  ;	       else					  /*off 	 */   *
 27095                                  ;		   set p_mtrk,off;					      *
 27096                                  ;	  else {show message;error_exit};				      *
 27097                                  ;	};								      *
 27098                                  ;	if (no error) then						      *
 27099                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 27100                                  ;									      *
 27101                                  ; };									      *
 27102                                  ;									      *
 27103                                  ;******************************************************************************
 27104                                  
 27105                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27106                                  trym:
 27107 0000204B 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 27108 0000204E 7569                    	jne	short tryu
 27109                                  
 27110                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27111                                  ;;ifdef	MULTI_CONFIG
 27112                                  ;       call    query_user      ; query the user if config_cmd
 27113                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 27114                                  ;;endif
 27115 00002050 BF[BC1D]                	mov	di,mtrk_parms
 27116 00002053 31C9                    	xor	cx,cx
 27117                                  	; 04/01/2023
 27118                                  	;mov	dx,cx
 27119                                  do31:
 27120 00002055 E8EA05                  	call	sysinit_parse
 27121 00002058 7303                    	jnc	short if31	; parse error
 27122                                  	;call	badparm_p	;  show message and end the search loop.
 27123                                  	;;jmp	short sr31
 27124                                  	; 31/12/2022
 27125                                  ;sr31:
 27126                                  	;jmp	coff
 27127                                  	; 04/01/2023
 27128 0000205A E96305                  	jmp	badparm_p_coff
 27129                                  if31:
 27130 0000205D 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27131 00002060 7415                    	je	short en31	; then end the $endloop
 27132                                  
 27133                                  	;cmp	byte [result_val_itag],1
 27134 00002062 803E[B11C]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 27135 00002067 7507                    	jne	short if35
 27136                                  
 27137 00002069 C606[D01D]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 27138                                  	;jmp	short en35
 27139                                  	; 31/12/2022
 27140 0000206E EBE5                    	jmp	short do31
 27141                                  if35:
 27142 00002070 C606[D01D]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 27143                                  en35:
 27144 00002075 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 27145                                  en31:
 27146 00002077 1E                      	push	ds
 27147                                  	;;mov	ax,Bios_Data ; 70h
 27148                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 27149                                  	; 21/10/2022
 27150 00002078 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27151 0000207B 8ED8                    	mov	ds,ax
 27152                                  
 27153 0000207D 2E803E[D01D]00          	cmp	byte [cs:p_mtrk],0
 27154 00002083 7508                    	jne	short if39
 27155                                  
 27156 00002085 C706[2605]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 27157 0000208B EB06                    	jmp	short en39
 27158                                  if39:
 27159 0000208D C706[2605]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 27160                                  en39:
 27161 00002093 1F                      	pop	ds
 27162                                  	; 31/12/2022
 27163                                  	;jmp	short sr31
 27164                                  	; 04/01/2023
 27165                                  sr31:
 27166 00002094 E9C9FE                  	jmp	coff
 27167                                  
 27168                                  ;----------------------------------------------------------------------------
 27169                                  ; DOS=HIGH/LOW command
 27170                                  ;----------------------------------------------------------------------------
 27171                                  
 27172                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27173                                  multi_try_doshi:
 27174 00002097 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 27175 0000209A 7403                    	je	short it_is_h
 27176                                  skip_it:
 27177 0000209C E9FEFE                  	jmp	multi_pass_filter
 27178                                  it_is_h:				; M003 - removed initing DevUMB
 27179                                  					;	 & runhigh
 27180                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27181                                  ;;ifdef	MULTI_CONFIG
 27182                                  ;       call    query_user              ; query the user if config_cmd
 27183                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 27184                                  ;;endif
 27185 0000209F BF[071E]                	mov	di,dos_parms
 27186 000020A2 31C9                    	xor	cx,cx
 27187                                  	; 04/01/2023
 27188                                  	;mov	dx,cx
 27189                                  h_do_parse:
 27190 000020A4 E89B05                  	call	sysinit_parse
 27191 000020A7 7303                    	jnc	short h_parse_ok	; parse error
 27192                                  h_badparm:
 27193                                  	; 04/01/2023
 27194                                  	;call	badparm_p		; show message and end the search loop.
 27195                                  	;;jmp	short h_end
 27196                                  	; 11/12/2022
 27197                                  ;h_end:
 27198                                  	;jmp	coff
 27199                                  	; 04/01/2023
 27200 000020A9 E91405                  	jmp	badparm_p_coff	
 27201                                  h_parse_ok:
 27202 000020AC 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27203 000020AF 7405                    	je	short h_end		; then end the $endloop
 27204 000020B1 E81006                  	call	ProcDOS
 27205 000020B4 EBEE                    	jmp	short h_do_parse
 27206                                  	; 11/12/2022
 27207                                  	; 04/01/2023
 27208                                  h_end:
 27209 000020B6 E9A7FE                  	jmp	coff
 27210                                  
 27211                                  ;-----------------------------------------------------------------------------
 27212                                  ; devicehigh command
 27213                                  ;-----------------------------------------------------------------------------
 27214                                  
 27215                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27216                                  tryu:
 27217 000020B9 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 27218 000020BC 7539                    	jne	short tryd
 27219                                  
 27220                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27221                                  ;;ifdef	MULTI_CONFIG
 27222                                  ;       call    query_user              ; query the user if config_cmd
 27223                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 27224                                  ;;endif
 27225                                  
 27226                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27227                                  ;	call	InitVar
 27228                                  ;	call	ParseSize		; process the size= option
 27229                                  ;	;jnc	short tryu_0
 27230                                  	
 27231                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 27232                                  
 27233                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27234                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 27235                                  	;mov	[cs:badparm_seg], es
 27236                                  	; 11/12/2022
 27237                                  	; ds = cs
 27238 000020BE 8936[FB13]              	mov	[badparm_off], si
 27239 000020C2 8C06[FD13]              	mov	[badparm_seg], es
 27240                                  	;
 27241 000020C6 E86408                  	call	ParseSize
 27242 000020C9 7303                    	jnc	short tryu_2	; 28/10/2022
 27243                                  
 27244                                  	;call	badparm_p
 27245                                  	;jmp	coff
 27246                                  	; 04/01/2023
 27247 000020CB E9F204                  	jmp	badparm_p_coff
 27248                                  
 27249                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27250                                  ;tryu_0:
 27251                                  ;	mov	ax,[cs:DevSizeOption]
 27252                                  ;	or	ax,ax
 27253                                  ;	jnz	short tryu_2
 27254                                  ;
 27255                                  ;	call	ParseVar
 27256                                  ;	jnc	short tryu_2
 27257                                  ;tryu_1:
 27258                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 27259                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 27260                                  ;	call	badparm_p		; so all we have to do is choke and
 27261                                  ;	jmp	coff			; die, rather verbosely.
 27262                                  
 27263                                  tryu_2:	
 27264 000020CE 56                      	push	si
 27265 000020CF 06                      	push	es
 27266                                  tryu_3:
 27267 000020D0 268A04                  	mov	al,[es:si]
 27268 000020D3 3C0D                    	cmp	al,cr
 27269 000020D5 740C                    	je	short tryu_4
 27270 000020D7 3C0A                    	cmp	al,lf
 27271 000020D9 7408                    	je	short tryu_4
 27272 000020DB E8CA0E                  	call	delim
 27273 000020DE 7403                    	jz	short tryu_4
 27274 000020E0 46                      	inc	si
 27275 000020E1 EBED                    	jmp	short tryu_3
 27276                                  tryu_4:	
 27277                                  	; 11/12/2022
 27278                                  	; ds = cs
 27279 000020E3 A2[7C1E]                	mov	[DevSavedDelim],al
 27280                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 27281                                  					;  it with null
 27282                                  	; 18/12/2022
 27283 000020E6 29DB                    	sub	bx,bx
 27284 000020E8 26881C                  	mov	[es:si],bl ; 0
 27285                                   	;mov	byte [es:si],0
 27286                                  
 27287 000020EB 07                      	pop	es
 27288 000020EC 5E                      	pop	si
 27289                                  
 27290                                  ;------------------------------------------------------------------------------
 27291                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 27292                                  ;------------------------------------------------------------------------------
 27293                                  
 27294                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27295                                  ;
 27296                                  ;	call	UmbTest			; See if UMBs are around...
 27297                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 27298                                  ;
 27299                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 27300                                  ;	jmp	short LoadDevice
 27301                                  
 27302                                  ;------------------------------------------------------------------------------
 27303                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 27304                                  ;------------------------------------------------------------------------------
 27305                                  
 27306                                  NrmTst:
 27307                                  	; 11/12/2022
 27308                                  	; ds = cs
 27309                                  	;;mov	byte [cs:DeviceHi],0
 27310                                  	;mov	byte [DeviceHi],0
 27311                                  	; 18/12/2022
 27312                                  	; bx = 0
 27313 000020ED 381E[581E]              	cmp	[DevUMB],bl ; 0
 27314                                  	;cmp	byte [DevUMB],0
 27315                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 27316 000020F1 7417                    	je	short LoadDevice	; no, we don't
 27317                                  	;mov	byte [cs:DeviceHi],1
 27318                                  	; 11/12/2022
 27319                                  	;mov	byte [DeviceHi],1
 27320                                  	; 18/12/2022
 27321 000020F3 FEC3                    	inc	bl ; mov bl,1 ; (*)
 27322                                  	; 11/12/2022
 27323                                  	;jmp	short LoadDevice2	; 11/12/2022
 27324 000020F5 EB13                    	jmp	short LoadDevice
 27325                                  
 27326                                  ;------------------------------------------------------------------------------
 27327                                  ; device command
 27328                                  ;------------------------------------------------------------------------------
 27329                                  
 27330                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27331                                  	; (SYSINIT:2401h)
 27332                                  tryd:
 27333                                  	; 11/12/2022
 27334 000020F7 31DB                    	xor 	bx, bx
 27335                                  	;
 27336 000020F9 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 27337 000020FC 7403                    	je	short gotd
 27338                                  skip_it2:
 27339 000020FE E93302                  	jmp	tryq
 27340                                  gotd:
 27341                                  
 27342                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27343                                  ;;ifdef	MULTI_CONFIG
 27344                                  ;       call    query_user              ; query the user if config_cmd
 27345                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 27346                                  ;;endif
 27347                                  	; 11/12/2022
 27348                                  	; ds = cs
 27349                                  	;mov	byte [DeviceHi],0
 27350                                  	;mov	word [DevSizeOption],0
 27351 00002101 891E[681E]              	mov	[DevSizeOption],bx ; 0
 27352 00002105 C606[7C1E]20            	mov	byte [DevSavedDelim],' '
 27353                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 27354                                  	;mov	word [cs:DevSizeOption],0
 27355                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 27356                                  					;  be replaced with a ' '
 27357                                  LoadDevice:                             ; device= or devicehigh= command.
 27358                                  	; 11/12/2022
 27359                                  	;mov	byte [DeviceHi],0
 27360 0000210A 881E[671E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 27361                                  LoadDevice2:
 27362                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 27363                                  	;
 27364                                  	;push    cs
 27365                                          ;pop     ds
 27366                                  	;
 27367                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 27368                                  	;mov	[bpb_addr+2],es
 27369                                  	;
 27370                                  	;mov	[DevCmdLine],si		; save it for ourself
 27371                                  	;mov	[DevCmdLine+2],es
 27372                                  	;
 27373                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 27374                                  
 27375                                  	; 11/12/2022
 27376                                  	; ds = cs
 27377                                  	;mov	bx,cs
 27378                                  	;mov	ds,bx
 27379                                  
 27380                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 27381 0000210E 8936[F803]              	mov	[bpb_addr],si
 27382                                  	;mov	[cs:bpb_addr+2],es
 27383 00002112 8C06[FA03]              	mov	[bpb_addr+2],es
 27384                                  
 27385                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 27386 00002116 8936[781E]              	mov	[DevCmdLine],si
 27387                                  	;mov	[cs:DevCmdLine+2],es	
 27388 0000211A 8C06[7A1E]              	mov	[DevCmdLine+2],es	
 27389                                  
 27390 0000211E E8DE0E                  	call	round
 27391                                  	
 27392 00002121 E81907                  	call	SizeDevice
 27393 00002124 7215                    	jc	short BadFile
 27394                                  
 27395                                  	; 11/12/2022
 27396                                  	; ds = cs
 27397                                  
 27398                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 27399                                  
 27400                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27401                                  ;
 27402                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 27403                                  ;
 27404                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 27405                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 27406                                  ;	jz	short DevConvLoad	; the actual load.
 27407                                  ;
 27408                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 27409                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 27410                                  ;
 27411                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 27412                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 27413                                  ;
 27414                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 27415                                  ;
 27416                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 27417                                  ;	or	ax,ax
 27418                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 27419                                  ;
 27420                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 27421                                  ;	jge	short DevConvLoad
 27422                                  ;
 27423                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 27424                                  ;	call	StoLoadSize		; minsize for load UMB.
 27425                                  
 27426                                  ; - End DeviceHigh primary logic changes --------------------------------------
 27427                                  
 27428                                  DevConvLoad:
 27429                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27430 00002126 E83006                  	call	InitDevLoad
 27431                                  
 27432                                  	; 11/12/2022
 27433                                  	; ds = cs
 27434 00002129 A1[4C1E]                	mov	ax,[DevLoadAddr]
 27435 0000212C 0306[4A1E]              	add	ax,[DevSize]
 27436 00002130 7206                    	jc	short NoMem
 27437 00002132 3906[4E1E]              	cmp	[DevLoadEnd],ax
 27438 00002136 7312                    	jae	short LoadDev
 27439                                  	
 27440                                  	; 11/12/2022
 27441                                  	;mov	ax,[cs:DevLoadAddr]
 27442                                  	;add	ax,[cs:DevSize]
 27443                                  	;jc	short NoMem
 27444                                  	;cmp	[cs:DevLoadEnd],ax
 27445                                  	;jae	short LoadDev
 27446                                  NoMem:
 27447                                  	; 11/12/2022
 27448                                  	; ds = cs
 27449                                  	;jmp	mem_err
 27450 00002138 E9030F                  	jmp	mem_err2
 27451                                  
 27452                                  BadFile:
 27453                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27454                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 27455                                  	;cmp    byte [es:si],' '
 27456                                          ;jae	short tryd_2
 27457 0000213B 26803C0D                	cmp	byte [es:si],0Dh	; cr
 27458 0000213F 7503                            jne	short tryd_2
 27459 00002141 E91D05                  	jmp	badop
 27460                                  tryd_2:
 27461 00002144 E80611                  	call	badload
 27462 00002147 E916FE                  	jmp	coff
 27463                                  
 27464                                  LoadDev:
 27465 0000214A 06                      	push	es
 27466 0000214B 1F                      	pop	ds
 27467                                  
 27468 0000214C 89F2                    	mov	dx,si			;ds:dx points to file name
 27469 0000214E E83D07                  	call	ExecDev			; load device driver using exec call
 27470                                  badldreset:
 27471 00002151 1E                      	push	ds
 27472 00002152 07                      	pop	es			;es:si back to config.sys
 27473 00002153 0E                      	push	cs
 27474 00002154 1F                      	pop	ds			;ds back to sysinit
 27475 00002155 72E4                    	jc	short BadFile
 27476                                  goodld:
 27477                                  	; 11/12/2022
 27478                                  	; ds = cs
 27479                                  
 27480 00002157 06                      	push	es
 27481 00002158 56                      	push	si
 27482 00002159 E84F07                  	call	RemoveNull
 27483 0000215C 06                      	push	es
 27484 0000215D 56                      	push	si
 27485                                  
 27486 0000215E 0E                      	push	cs
 27487 0000215F 07                      	pop	es
 27488                                  
 27489 00002160 1E                      	push	ds
 27490 00002161 56                      	push	si
 27491                                  
 27492                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 27493                                  	; 31/12/2022
 27494                                  	; ds = cs
 27495 00002162 C536[501E]              	lds	si,[DevEntry]
 27496                                  	
 27497                                  	;test	word [si+4],8000h
 27498                                  	; 11/12/2022
 27499 00002166 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 27500                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 27501 0000216A 7511                    	jnz	short got_device_com_cont   ; no.
 27502                                  
 27503 0000216C 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 27504                                  	;cmp	byte [si+32],26
 27505 00002171 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 27506 00002175 7206                    	jb	short got_device_com_cont
 27507                                  
 27508 00002177 5E                      	pop	si
 27509 00002178 1F                      	pop	ds
 27510                                  
 27511 00002179 5E                      	pop	si			; clear the stack
 27512 0000217A 07                      	pop	es
 27513                                  
 27514                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27515                                  	;call	RetFromUM		; Do this before we leave
 27516                                  
 27517 0000217B EB55                    	jmp	short badnumblock
 27518                                  
 27519                                  got_device_com_cont:
 27520 0000217D 5E                      	pop	si
 27521 0000217E 1F                      	pop	ds
 27522                                  
 27523                                  	; 11/12/2022
 27524                                  	; ds = cs
 27525                                  
 27526 0000217F E86505                  	call	LieInt12Mem
 27527 00002182 E8C205                  	call	UpdatePDB		; update the PSP:2 value M020
 27528                                  
 27529                                  	; 11/12/2022
 27530                                  	; ds = cs
 27531                                  	; 08/09/2023
 27532 00002185 31C0                    	xor	ax, ax ; 0
 27533 00002187 3806[F713]              	cmp	byte [multdeviceflag],al ; 0
 27534                                  	;cmp	byte [multdeviceflag],0
 27535                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 27536                                  					;  driver in the file ; M027
 27537 0000218B 750B                    	jne	short skip_pass_limit	;		      ; M027
 27538                                  
 27539                                  	; 11/12/2022
 27540                                  	; ds = cs
 27541                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 27542                                  	;mov	bx,[cs:DevLoadEnd]
 27543                                  	;mov	[cs:break_addr+2],bx
 27544                                  
 27545                                  	;mov	word [break_addr],0
 27546                                  	; 08/09/2023
 27547 0000218D A3[F403]                	mov	[break_addr],ax ; 0
 27548 00002190 8B1E[4E1E]              	mov	bx,[DevLoadEnd]
 27549 00002194 891E[F603]              	mov	[break_addr+2],bx
 27550                                  
 27551                                  skip_pass_limit:
 27552                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 27553                                  ;	number of installed devices (including DblSpace drives) where
 27554                                  ;	"drivenumber" is the number that the next block device will
 27555                                  ;	be assigned to. Because some naughty device drivers (like
 27556                                  ;	interlnk) look at the internal DOS variable instead of the
 27557                                  ;	value we pass it, we'll temporarily stick our value into
 27558                                  ;	DOS DATA while we're initializing the device drivers.
 27559                                  ;
 27560                                  ;	Note that this will make it impossible for this device
 27561                                  ;	driver to access the DblSpace drive letters, whether
 27562                                  ;	they are swapped-hosts or unswapped compressed drives,
 27563                                  ;	during its initialization phase.
 27564                                  
 27565                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27566                                  	;push	ds
 27567                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27568                                  	;
 27569                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 27570                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 27571                                  	;mov	ah,al
 27572                                  	;
 27573                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 27574                                  	;pop	ds
 27575                                  	;
 27576                                  	;push	ax			; save real sysi_numio/ncds in ax
 27577                                  
 27578                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27579                                  	; (SYSINIT:24B9h)
 27580                                  
 27581 00002198 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 27582 0000219B E8A90E                  	call	calldev 		; calldev (sdevstrat);
 27583 0000219E BB0800                  	mov	bx,SYSDEV.INT ; 8
 27584 000021A1 E8A30E                  	call	calldev 		; calldev (sdevint);
 27585                                  
 27586                                  	; 11/12/2022
 27587                                  	; ds <> cs
 27588                                  
 27589                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27590                                  	;pop	ax			; get real sysi_numio value
 27591                                  	;push	ds
 27592                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 27593                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 27594                                  	;pop	ds
 27595                                  
 27596                                  	; 11/12/2022
 27597 000021A4 0E                      	push	cs
 27598 000021A5 1F                      	pop	ds
 27599                                  
 27600 000021A6 E86C05                  	call	TrueInt12Mem
 27601                                  
 27602                                  	; 11/12/2022
 27603                                  	; ds = cs
 27604                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 27605                                  	;mov	[cs:DevBrkAddr],ax
 27606                                  	;mov	ax,[cs:break_addr+2]
 27607                                  	;mov	[cs:DevBrkAddr+2],ax
 27608 000021A9 A1[F403]                	mov	ax,[break_addr]	
 27609 000021AC A3[541E]                	mov	[DevBrkAddr],ax
 27610 000021AF A1[F603]                	mov	ax,[break_addr+2]
 27611 000021B2 A3[561E]                	mov	[DevBrkAddr+2],ax
 27612                                  
 27613                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27614                                  	;call	RetFromUM		; There we go... all done.
 27615                                  
 27616                                  	; 11/12/2022
 27617 000021B5 803E[581E]00            	cmp	byte [DevUMB],0	
 27618                                  	;cmp	byte [cs:DevUMB],0
 27619 000021BA 7403                    	je	short tryd_3
 27620 000021BC E8D008                  	call	AllocUMB
 27621                                  	; 31/12/2022
 27622                                  	; ds= cs
 27623                                  tryd_3:
 27624                                  
 27625                                  ;ifndef ROMDOS
 27626                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 27627                                  
 27628                                  	; 11/12/2022
 27629                                  	; ds = cs
 27630                                  	
 27631                                  	;cmp	byte [cs:runhigh],0FFh
 27632 000021BF 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 27633 000021C4 7503                    	jne	short tryd_4
 27634                                  	
 27635                                  	; 11/12/2022
 27636                                  	; ds = cs
 27637 000021C6 E8FCE6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 27638                                  tryd_4:
 27639                                  ;endif ; ROMDOS
 27640                                  
 27641 000021C9 5E                      	pop	si
 27642 000021CA 1F                      	pop	ds
 27643 000021CB C60400                  	mov	byte [si],0		; *p = 0;
 27644                                  
 27645 000021CE 0E                      	push	cs
 27646 000021CF 1F                      	pop	ds
 27647                                  
 27648 000021D0 EB1F                    	jmp	short was_device_com
 27649                                  
 27650                                  ;----------------------------------------------------------------------------
 27651                                  
 27652                                  ;02/04/2019 - Retro DOS v4.0
 27653                                  
 27654                                  badnumblock:
 27655 000021D2 0E                      	push	cs
 27656 000021D3 1F                      	pop	ds
 27657 000021D4 BA[4637]                	mov	dx,badblock
 27658 000021D7 E89B10                  	call	print
 27659                                  
 27660                                  ;------ fall thru -----------------------------------------------------------
 27661                                  
 27662                                  erase_dev_do:				; modified to show message "error in config.sys..."
 27663                                  	
 27664                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 27665                                  	
 27666 000021DA 5E                      	pop	si
 27667 000021DB 07                      	pop	es
 27668                                  
 27669 000021DC 0E                      	push	cs
 27670 000021DD 1F                      	pop	ds
 27671                                  
 27672                                  skip1_resetmemhi:
 27673                                  	; 11/12/2022
 27674                                  	; ds = cs
 27675 000021DE 833E[FD03]00            	cmp	word [configmsgflag],0
 27676                                  	;cmp	word [cs:configmsgflag],0
 27677 000021E3 7409                    	je	short no_error_line_msg
 27678                                  
 27679 000021E5 E8AD04                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 27680                                  	; 11/12/2022
 27681                                  	; ds = cs
 27682                                  	;mov	word [cs:configmsgflag],0
 27683 000021E8 C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 27684                                  
 27685                                  no_error_line_msg:
 27686 000021EE E96FFD                  	jmp	coff
 27687                                  
 27688                                  ;----------------------------------------------------------------------------
 27689                                  
 27690                                  was_device_com:
 27691                                  	; 14/12/2022
 27692                                  	; ds = cs
 27693 000021F1 A1[561E]                	mov	ax,[DevBrkAddr+2]
 27694                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 27695 000021F4 3B06[4E1E]              	cmp	ax,[DevLoadEnd]
 27696                                  	;cmp	ax,[cs:DevLoadEnd]
 27697 000021F8 7605                    	jbe	short breakok
 27698                                  
 27699 000021FA 5E                      	pop	si
 27700 000021FB 07                      	pop	es
 27701 000021FC E93CFF                  	jmp	BadFile
 27702                                  
 27703                                  breakok:
 27704                                  	; 14/12/2022
 27705                                  	; ds = cs
 27706 000021FF C43E[6B02]              	les	di,[DOSINFO] 
 27707 00002203 C516[501E]              	lds	dx,[DevEntry]
 27708                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 27709 00002207 89D6                    	mov	si,dx
 27710                                  
 27711                                  	; 14/11/2022
 27712                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 27713                                  
 27714                                  	; 14/12/2022
 27715                                  	; ds <> cs
 27716                                  	
 27717                                  	;mov	ax,[si+4]
 27718 00002209 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 27719                                  	; 12/12/2022
 27720 0000220C F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 27721                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 27722 0000220F 7426                    	jz	short isblock
 27723                                  
 27724                                  ;------ lets deal with character devices
 27725                                  
 27726 00002211 2E800E[FA13]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27727 00002217 E8C406                  	call	DevSetBreak		;go ahead and alloc mem for device
 27728                                  jc_edd:
 27729 0000221A 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 27730                                  
 27731                                  	; 12/12/2022
 27732 0000221C A801                    	test	al,ISCIN
 27733                                  	;test	ax,ISCIN ; 1		;is it a console in?
 27734 0000221E 7408                    	jz	short tryclk
 27735                                  
 27736 00002220 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 27737 00002224 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 27738                                  tryclk: 
 27739                                  	; 12/12/2022
 27740 00002228 A808                    	test	al,ISCLOCK
 27741                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 27742 0000222A 7408                    	jz	short golink
 27743                                  
 27744 0000222C 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 27745 00002230 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 27746                                  golink: 
 27747 00002234 E9B000                  	jmp	linkit
 27748                                  
 27749                                  ;------ deal with block device drivers
 27750                                  
 27751                                  isblock:
 27752 00002237 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 27753 0000223B 08C0                    	or	al,al
 27754 0000223D 749B                    	jz	short erase_dev_do
 27755                                  	;mov	[si+10],al
 27756 0000223F 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 27757                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27758                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 27759                                  perdrv:
 27760 00002242 98                      	cbw				; warning no device > 127 units
 27761 00002243 89C1                    	mov	cx,ax
 27762 00002245 88E6                    	mov	dh,ah
 27763                                  	;mov	dl,[es:di+32]
 27764 00002247 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 27765 0000224B 88D4                    	mov	ah,dl
 27766 0000224D 00C4                    	add	ah,al			; check for too many devices
 27767 0000224F 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 27768 00002252 7603                    	jbe	short ok_block
 27769 00002254 E97BFF                  	jmp	badnumblock
 27770                                  
 27771                                  ok_block:
 27772 00002257 2E800E[FA13]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 27773 0000225D E87E06                  	call	DevSetBreak		; alloc the device
 27774 00002260 72B8                    	jc	short jc_edd
 27775 00002262 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 27776                                  
 27777 00002266 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 27778 0000226B 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 27779                                  perunit:
 27780 00002270 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 27781                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 27782                                  	; 11/12/2022
 27783 00002275 26C46E00                	les	bp,[es:bp]
 27784                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27785                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 27786                                  scandpb:
 27787                                  	;cmp	word [es:bp+25],-1
 27788 00002279 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 27789 0000227E 7406                    	je	short foundpb
 27790                                  	;les	bp,[es:bp+25]
 27791 00002280 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 27792 00002284 EBF3                    	jmp	short scandpb
 27793                                  foundpb:
 27794 00002286 2EA1[541E]              	mov	ax,[cs:DevBrkAddr]
 27795 0000228A 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 27796 0000228E 2EA1[561E]              	mov	ax,[cs:DevBrkAddr+2]
 27797 00002292 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 27798                                  
 27799 00002296 2EC42E[541E]            	les	bp,[cs:DevBrkAddr]
 27800 0000229B 2E8306[541E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 27801                                  
 27802 000022A1 E81906                  	call	RoundBreakAddr
 27803                                  
 27804 000022A4 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 27805 000022AA 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 27806                                  
 27807 000022AF 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 27808 000022B1 43                      	inc	bx
 27809 000022B2 43                      	inc	bx			;point to next guy
 27810                                  	;mov	[es:bp+DPB.DRIVE],dx
 27811                                  	; 11/12/2022
 27812 000022B3 26895600                	mov	[es:bp],dx ; 13/05/2019
 27813                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27814                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 27815                                  	
 27816 000022B7 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 27817 000022B9 CD21                    	int	21h
 27818                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 27819                                  			; DS:SI -> BPB (BIOS Parameter Block)
 27820                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 27821                                  
 27822                                  	;mov	ax,[es:bp+2]
 27823 000022BB 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 27824 000022BF 06                      	push	es
 27825 000022C0 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 27826                                  	;cmp	ax,[es:di+10h]
 27827 000022C5 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 27828 000022C9 07                      	pop	es
 27829                                  	;jna	short iblk_1
 27830                                  	;jmp	short bad_bpb_size_sector
 27831                                  	; 29/10/2022
 27832 000022CA 775A                    	ja	short bad_bpb_size_sector
 27833                                  iblk_1:
 27834 000022CC 1E                      	push	ds
 27835 000022CD 52                      	push	dx
 27836                                  
 27837 000022CE 2EC516[501E]            	lds	dx,[cs:DevEntry]
 27838                                  	;mov	[es:bp+13h],dx
 27839 000022D3 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 27840                                  	;mov	[es:bp+15h],ds
 27841 000022D7 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 27842                                  
 27843 000022DB 5A                      	pop	dx
 27844 000022DC 1F                      	pop	ds
 27845                                  
 27846 000022DD 42                      	inc	dx
 27847 000022DE FEC6                    	inc	dh
 27848 000022E0 E28E                    	loop	perunit
 27849                                  
 27850 000022E2 0E                      	push	cs
 27851 000022E3 1F                      	pop	ds
 27852                                  
 27853 000022E4 E8D1E8                  	call	TempCDS 		; set cds for new drives
 27854                                  linkit:
 27855 000022E7 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 27856 000022EC 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 27857 000022F0 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 27858                                  
 27859 000022F4 2EC536[501E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 27860 000022F9 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 27861 000022FD 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 27862 00002301 8B04                    	mov	ax,[si]			;get pointer to next device
 27863 00002303 2EA3[501E]              	mov	[cs:DevEntry],ax	;and save it
 27864                                  
 27865 00002307 890C                    	mov	[si],cx			;link in the driver
 27866 00002309 895402                  	mov	[si+2],dx
 27867                                  enddev:
 27868 0000230C 5E                      	pop	si
 27869 0000230D 07                      	pop	es
 27870 0000230E 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 27871 0000230F 740B                    	jz	short coffj3
 27872                                  
 27873 00002311 2EFE06[F713]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 27874 00002316 E8E705                  	call	DevBreak		; M009
 27875                                  	; 11/12/2022
 27876                                  	; ds = cs (DevBreak)
 27877                                  
 27878                                  	; 03/04/2019 - Retro DOS v4.0
 27879                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 27880 00002319 E93BFE                  	jmp	goodld			; otherwise pretend we loaded it in
 27881                                  coffj3: 
 27882                                  	; 18/12/2022
 27883                                  	; ax = 0
 27884 0000231C 2EA2[F713]              	mov	[cs:multdeviceflag],al ; 0
 27885                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 27886 00002320 E8DD05                  	call	DevBreak
 27887                                  	; 11/12/2022
 27888                                  	; ds = cs (DevBreak)
 27889                                  	
 27890                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 27891                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 27892                                  ;					;  created a bogus arena to try
 27893                                  ;					;  to protect some of its resident-
 27894                                  ;					;  init code.
 27895                                  	;call	CheckDoubleSpace
 27896 00002323 E93AFC                  	jmp	coff
 27897                                  
 27898                                  ;----------------------------------------------------------------------------
 27899                                  
 27900                                  ;CheckDoubleSpace:
 27901                                  ;;;;	ifdef	dblspace_hooks
 27902                                  ;
 27903                                  ;;	Now check for two special MagicDrv cases:
 27904                                  ;;
 27905                                  ;;       a) the last driver load was MagicDrv final placement:
 27906                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 27907                                  ;;
 27908                                  ;;       b) MagicDrv is currently in temporary home:
 27909                                  ;;          -> call it to give it a chance to mount and shuffle drives
 27910                                  ;
 27911                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 27912                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 27913                                  ;
 27914                                  ;;	Now inquire of driver whether it is present, and final located
 27915                                  ;
 27916                                  ;	mov	ax,multMagicdrv ; 4A11h
 27917                                  ;	mov	bx,MD_VERSION ; 0
 27918                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 27919                                  ;	or	ax,ax			; is it there?
 27920                                  ;	jnz	short no_more_magic_calls ; done if not
 27921                                  ;
 27922                                  ;	test	dx,8000h		; is it final placed?
 27923                                  ;	jnz	short magic_not_yet_home ;  skip if not
 27924                                  ;
 27925                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 27926                                  ;;	don't keep checking it, and add its number of drive letters
 27927                                  ;;	to drivenumber.
 27928                                  ;
 27929                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 27930                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 27931                                  ;;					;  the drive number we'll pass to the
 27932                                  ;;					;  next loadable block device.
 27933                                  ;
 27934                                  ;	jmp	short no_more_magic_calls ; and finished.
 27935                                  ;
 27936                                  ;magic_not_yet_home:
 27937                                  ;	push	es
 27938                                  ;	push	si
 27939                                  ;
 27940                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 27941                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 27942                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 27943                                  ;
 27944                                  ;	mov	bx,2
 27945                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 27946                                  ;;					;   by this many units
 27947                                  ;
 27948                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 27949                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 27950                                  ;;					;  sees this, to prevent bad things
 27951                                  ;;					;  from happening if people run the
 27952                                  ;;					;  new driver with an old BIOS
 27953                                  ;	call	far [cs:MagicBackdoor]
 27954                                  ;
 27955                                  ;	pop	si
 27956                                  ;	pop	es
 27957                                  ;
 27958                                  ;no_more_magic_calls:
 27959                                  ;
 27960                                  ;;;;	endif
 27961                                  ;	retn
 27962                                  
 27963                                  ; 03/04/2019 - Retro DOS v4.0
 27964                                  
 27965                                  bad_bpb_size_sector:
 27966 00002326 5E                      	pop	si
 27967 00002327 07                      	pop	es
 27968 00002328 BA[6836]                	mov	dx,badsiz_pre
 27969 0000232B BB[4636]                	mov	bx,crlfm
 27970 0000232E E8220F                  	call	prnerr
 27971                                  
 27972 00002331 E92CFC                  	jmp	coff
 27973                                  
 27974                                  ;------------------------------------------------------------------------------
 27975                                  ; country command
 27976                                  ;      the syntax is:
 27977                                  ;	country=country id {,codepage {,path}}
 27978                                  ;	country=country id {,,path}	:default codepage id in dos
 27979                                  ;------------------------------------------------------------------------------
 27980                                  
 27981                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27982                                  	; (SYSINIT:2663h)
 27983                                  tryq:
 27984 00002334 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 27985 00002337 7403                    	je	short tryq_cont
 27986                                  skip_it3:
 27987 00002339 E90801                  	jmp	tryf
 27988                                  tryq_cont:
 27989                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27990                                  ;;ifdef	MULTI_CONFIG
 27991                                  ;       call    query_user		; query the user if config_cmd
 27992                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 27993                                  ;;endif
 27994                                  	; 14/12/2022
 27995                                  	; ds = cs
 27996                                  	; bx = 0
 27997                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 27998                                  	;mov	word [cs:p_code_page],0
 27999 0000233C 881E[FE32]              	mov	[cntry_drv],bl ; 0
 28000 00002340 891E[151D]              	mov	[p_code_page],bx ; 0
 28001                                  	
 28002 00002344 BF[DE1C]                	mov	di,cntry_parms
 28003 00002347 31C9                    	xor	cx,cx
 28004                                  	; 04/01/2023
 28005                                  	;mov	dx,cx
 28006                                  do52:
 28007 00002349 E8F602                  	call	sysinit_parse
 28008 0000234C 730B                    	jnc	short if52		; parse error,check error code and
 28009                                  
 28010 0000234E E8E000                  	call	cntry_error		; show message and end the search loop.
 28011                                  	; 14/12/2022
 28012                                  	; ds = cs
 28013 00002351 C706[131D]FFFF          	mov	word [p_cntry_code],-1
 28014                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 28015 00002357 EB34                    	jmp	short sr52
 28016                                  if52:
 28017 00002359 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 28018 0000235C 742F                    	jz	short sr52		; then end the search loop
 28019                                  
 28020                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 28021                                  	; 14/12/2022
 28022                                  	; ds = cs
 28023 0000235E 803E[B01C]01            	cmp	byte [result_val],_$P_Number	
 28024                                  	;cmp	byte [cs:result_val],_$P_Number
 28025 00002363 7512                    	jnz	short if56
 28026                                  
 28027                                  	;;mov	ax,[cs:rw_dword]
 28028                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28029                                  	; 14/12/2022
 28030 00002365 A1[B41C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 28031 00002368 83F901                  	cmp	cx,1
 28032 0000236B 7505                    	jne	short if57
 28033                                  
 28034                                  	;mov	[cs:p_cntry_code],ax
 28035                                  	; 14/12/2022
 28036 0000236D A3[131D]                	mov	[p_cntry_code],ax
 28037                                  
 28038                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28039                                  	;jmp	short en57
 28040                                  	; 12/12/2022
 28041                                  	;jmp	short en56
 28042 00002370 EBD7                    	jmp	short do52
 28043                                  
 28044                                  if57:
 28045                                  	;mov	[cs:p_code_page],ax
 28046                                  	; 14/12/2022
 28047                                  	; ds = cs
 28048 00002372 A3[151D]                	mov	[p_code_page],ax
 28049                                  en57:
 28050                                  	;jmp	short en56		; path entered
 28051                                  	; 12/12/2022
 28052 00002375 EBD2                    	jmp	short do52
 28053                                  
 28054                                  if56:
 28055 00002377 1E                      	push	ds
 28056 00002378 06                      	push	es
 28057 00002379 56                      	push	si
 28058 0000237A 57                      	push	di
 28059                                  
 28060 0000237B 0E                      	push	cs
 28061 0000237C 07                      	pop	es
 28062                                  
 28063                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 28064                                  	; 14/12/2022
 28065 0000237D C536[B41C]              	lds	si,[rv_dword]
 28066 00002381 BF[FE32]                	mov	di,cntry_drv
 28067 00002384 E8BB0E                  	call	move_asciiz
 28068                                  
 28069 00002387 5F                      	pop	di
 28070 00002388 5E                      	pop	si
 28071 00002389 07                      	pop	es
 28072 0000238A 1F                      	pop	ds
 28073                                  
 28074                                  en56:
 28075 0000238B EBBC                    	jmp	short do52
 28076                                  
 28077                                  sr52:
 28078                                  	; 14/12/2022
 28079                                  	; ds = cs
 28080 0000238D 833E[131D]FF            	cmp	word [p_cntry_code],-1
 28081                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 28082 00002392 7509                    	jne	short tryq_open
 28083 00002394 E9C9FB                  	jmp	coff
 28084                                  
 28085                                  tryqbad:				;"invalid country code or code page"
 28086 00002397 F9                      	stc
 28087 00002398 BA[AF36]                	mov     dx,badcountry
 28088 0000239B EB79                    	jmp     tryqchkerr
 28089                                  
 28090                                  tryq_open:
 28091                                  	; 14/12/2022
 28092                                  	; ds = cs
 28093 0000239D 803E[FE32]00            	cmp	byte [cntry_drv],0
 28094                                  	;cmp	byte [cs:cntry_drv],0
 28095 000023A2 7405                    	je	short tryq_def
 28096 000023A4 BA[FE32]                	mov	dx,cntry_drv
 28097 000023A7 EB03                    	jmp	short tryq_openit
 28098                                  
 28099                                  tryq_def:
 28100 000023A9 BA[0033]                	mov	dx,cntry_root
 28101                                  tryq_openit:
 28102 000023AC B8003D                  	mov	ax,3D00h		;open a file
 28103 000023AF F9                      	stc
 28104 000023B0 CD21                    	int	21h
 28105 000023B2 7242                    	jc	short tryqfilebad	;open failure
 28106                                  
 28107                                  	; 14/12/2022
 28108                                  	; ds = cs
 28109 000023B4 A3[D803]                	mov	[cntryfilehandle],ax
 28110                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 28111 000023B7 89C3                    	mov	bx,ax
 28112 000023B9 A1[131D]                	mov	ax,[p_cntry_code]
 28113 000023BC 8B16[151D]              	mov	dx,[p_code_page]
 28114                                  	;mov	ax,[cs:p_cntry_code]
 28115                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 28116                                  	;mov	cx,[cs:memhi]
 28117 000023C0 8B0E[E003]              	mov	cx,[memhi]
 28118 000023C4 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 28119                                  					; M023
 28120                                  	; 14/12/2022
 28121                                  	; ds = cs
 28122 000023C8 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 28123                                  	;cmp	cx,[cs:ALLOCLIM]
 28124 000023CC 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 28125                                  
 28126 000023CE BE[FE32]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 28127 000023D1 803C00                  	cmp	byte [si],0 		;default path?
 28128 000023D4 7502                    	jne	short tryq_set_for_dos
 28129                                  
 28130 000023D6 46                      	inc	si
 28131 000023D7 46                      	inc	si			;ds:si -> cntry_root
 28132                                  
 28133                                  tryq_set_for_dos:
 28134                                  	; 14/12/2022
 28135                                  	; ds = cs
 28136 000023D8 C43E[7702]              	les	di,[sysi_country]
 28137                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 28138 000023DC 57                      	push	di			;save di
 28139                                  	;add	di,8
 28140 000023DD 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 28141 000023E0 E85F0E                  	call	move_asciiz		;set the path to country.sys in dos.
 28142 000023E3 5F                      	pop	di			;es:di -> country info tab again.
 28143                                  
 28144                                  	; 14/12/2022	
 28145 000023E4 8B0E[E003]              	mov	cx,[memhi]
 28146                                  	;mov	cx,[cs:memhi]
 28147 000023E8 8ED9                    	mov	ds,cx
 28148 000023EA 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 28149 000023EC E8DB0C                  	call	setdoscountryinfo	;now do the job!!!
 28150                                  	; ds <> cs ; 14/12/2022
 28151 000023EF 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 28152                                  
 28153 000023F1 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 28154 000023F4 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 28155                                  
 28156                                  tryqfilebad:
 28157 000023F6 0E                      	push	cs
 28158 000023F7 07                      	pop	es
 28159 000023F8 2E803E[FE32]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 28160 000023FE 7405                    	je	short tryqdefbad
 28161                                  
 28162 00002400 BE[FE32]                	mov	si,cntry_drv
 28163 00002403 EB03                    	jmp	short tryqbadload
 28164                                  
 28165                                  tryqdefbad:				;default file has been used.
 28166 00002405 BE[0033]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 28167                                  tryqbadload:
 28168 00002408 E8420E                  	call	badload 		;ds will be restored to sysinit_seg
 28169                                  	;mov	cx,[cs:CONFBOT]
 28170                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28171                                  	;mov	cx,[cs:top_of_cdss]
 28172                                  	; 11/12/2022
 28173                                  	; ds = cs
 28174 0000240B 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 28175 0000240F 8EC1                    	mov	es,cx			;restore es -> confbot.
 28176 00002411 EB13                    	jmp	short coffj4
 28177                                  
 28178                                  tryqmemory:
 28179 00002413 BA[F236]                	mov	dx,insufmemory
 28180                                  tryqchkerr:
 28181                                  	;mov	cx,[cs:CONFBOT]
 28182                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28183                                  	;mov	cx,[cs:top_of_cdss]
 28184                                  	; 12/12/2022
 28185 00002416 0E                      	push	cs
 28186 00002417 1F                      	pop	ds
 28187 00002418 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 28188 0000241C 8EC1                    	mov	es,cx			;restore es -> confbot seg
 28189                                  	;push	cs
 28190                                  	;pop	ds			;restore ds to sysinit_seg
 28191 0000241E 7306                    	jnc	short coffj4		;if no error,then exit
 28192                                  
 28193 00002420 E8520E                  	call	print			;else show error message
 28194 00002423 E86F02                  	call	error_line
 28195                                  coffj4:
 28196                                  	;mov	bx,[cs:cntryfilehandle]
 28197                                  	; 11/12/2022
 28198                                  	; ds = cs
 28199 00002426 8B1E[D803]              	mov	bx,[cntryfilehandle]
 28200 0000242A B43E                    	mov	ah,3Eh
 28201 0000242C CD21                    	int	21h			;close a file. don't care even if it fails.
 28202 0000242E E92FFB                  	jmp	coff
 28203                                  
 28204                                  ;--------------------------------------------
 28205                                  
 28206                                  cntry_error:
 28207                                  
 28208                                  ;function: show "invalid country code or code page" messages,or
 28209                                  ;		"error in country command" depending on the error code
 28210                                  ;		in ax returned by sysparse;
 28211                                  ;in:	ax - error code
 28212                                  ;	ds - sysinitseg
 28213                                  ;	es - confbot
 28214                                  ;out:	show message.  dx destroyed.
 28215                                  
 28216 00002431 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 28217 00002434 7505                    	jne	short if64
 28218 00002436 BA[AF36]                	mov	dx,badcountry		;"invalid country code or code page"
 28219 00002439 EB03                    	jmp	short en64
 28220                                  if64:
 28221 0000243B BA[D536]                	mov	dx,badcountrycom	;"error in contry command"
 28222                                  en64:
 28223 0000243E E8340E                  	call	print
 28224                                  	;call	error_line
 28225                                  	;retn
 28226                                  	; 11/12/2022
 28227 00002441 E95102                  	jmp	error_line
 28228                                  
 28229                                  ;------------------------------------------------------------------------------
 28230                                  ; files command
 28231                                  ;------------------------------------------------------------------------------
 28232                                  
 28233                                  ;******************************************************************************
 28234                                  ; function: parse the parameters of files= command.			      *
 28235                                  ;									      *
 28236                                  ; input :								      *
 28237                                  ;	es:si -> parameters in command line.				      *
 28238                                  ; output:								      *
 28239                                  ;	variable files set.						      *
 28240                                  ;									      *
 28241                                  ; subroutines to be called:						      *
 28242                                  ;	sysinit_parse							      *
 28243                                  ; logic:								      *
 28244                                  ; {									      *
 28245                                  ;	set di points to files_parms;					      *
 28246                                  ;	set dx,cx to 0; 						      *
 28247                                  ;	while (end of command line)					      *
 28248                                  ;	{ sysinit_parse;						      *
 28249                                  ;	  if (no error) then						      *
 28250                                  ;	     files = result_val._$P_picked_val				      *
 28251                                  ;	  else								      *
 28252                                  ;	     error exit;						      *
 28253                                  ;	};								      *
 28254                                  ; };									      *
 28255                                  ;									      *
 28256                                  ;******************************************************************************
 28257                                  
 28258                                  tryf:
 28259 00002444 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 28260 00002447 7523                    	jne	short tryl
 28261                                  
 28262                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28263                                  ;;ifdef	MULTI_CONFIG
 28264                                  ;       call    query_user              ; query the user if config_cmd
 28265                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 28266                                  ;;endif
 28267                                  
 28268                                  	; 14/12/2022
 28269                                  	; ds = cs
 28270                                  
 28271 00002449 BF[171D]                	mov	di,files_parms
 28272 0000244C 31C9                    	xor	cx,cx
 28273                                  	; 04/01/2023
 28274                                  	;mov	dx,cx
 28275                                  do67:
 28276 0000244E E8F101                  	call	sysinit_parse
 28277 00002451 7303                    	jnc	short if67		; parse error
 28278                                  	;call	badparm_p		;  and show messages and end the search loop.
 28279                                  	;jmp	short sr67
 28280                                  	; 04/01/2023
 28281 00002453 E96A01                  	jmp	badparm_p_coff
 28282                                  if67:
 28283 00002456 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28284 00002459 7408                    	je	short en67		; then end the $endloop
 28285                                  
 28286                                  	; 14/12/2022
 28287                                  	; ds = cs
 28288                                  	;;mov	al,[cs:rv_dword]
 28289                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28290                                  	;mov	[cs:p_files],al		; save it temporarily
 28291                                  	;mov	al,[rv_dword]
 28292 0000245B A0[B41C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28293 0000245E A2[361D]                	mov	[p_files],al
 28294                                  
 28295 00002461 EBEB                    	jmp	short do67
 28296                                  en67:
 28297                                  	; 14/12/2022
 28298                                  	; ds = cs
 28299 00002463 A0[361D]                	mov	al,[p_files]
 28300 00002466 A2[9D02]                	mov	[FILES],al	
 28301                                  	;mov	al,[cs:p_files]
 28302                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 28303                                  sr67:
 28304 00002469 E9F4FA                  	jmp	coff
 28305                                  
 28306                                  ; 04/04/2019 - Retro DOS v4.0
 28307                                  
 28308                                  ;------------------------------------------------------------------------------
 28309                                  ; lastdrive command
 28310                                  ;------------------------------------------------------------------------------
 28311                                  
 28312                                  ;******************************************************************************
 28313                                  ; function: parse the parameters of lastdrive= command. 		      *
 28314                                  ;									      *
 28315                                  ; input :								      *
 28316                                  ;	es:si -> parameters in command line.				      *
 28317                                  ; output:								      *
 28318                                  ;	set the variable num_cds.					      *
 28319                                  ;									      *
 28320                                  ; subroutines to be called:						      *
 28321                                  ;	sysinit_parse							      *
 28322                                  ; logic:								      *
 28323                                  ; {									      *
 28324                                  ;	set di points to ldrv_parms;					      *
 28325                                  ;	set dx,cx to 0; 						      *
 28326                                  ;	while (end of command line)					      *
 28327                                  ;	{ sysinit_parse;						      *
 28328                                  ;	  if (no error) then						      *
 28329                                  ;	     set num_cds to the returned value; 			      *
 28330                                  ;	  else	/*error exit*/						      *
 28331                                  ;	     error exit;						      *
 28332                                  ;	};								      *
 28333                                  ; };									      *
 28334                                  ;									      *
 28335                                  ;******************************************************************************
 28336                                  
 28337                                  tryl:
 28338 0000246C 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 28339 0000246F 7523                    	jne	short tryp
 28340                                  
 28341                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28342                                  ;;ifdef	MULTI_CONFIG
 28343                                  ;       call    query_user      ; query the user if config_cmd
 28344                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 28345                                  ;;endif
 28346                                  	; 14/12/2022
 28347                                  	; ds = cs
 28348                                  
 28349 00002471 BF[6E1D]                	mov	di,ldrv_parms
 28350 00002474 31C9                    	xor	cx,cx
 28351                                  	; 04/01/2023
 28352                                  	;mov	dx,cx
 28353                                  do73:
 28354 00002476 E8C901                  	call	sysinit_parse
 28355 00002479 7303                    	jnc	short if73	; parse error
 28356                                  	;call	badparm_p	;  and show messages and end the search loop.
 28357                                  	;jmp	short sr73
 28358                                  	; 04/01/2023
 28359 0000247B E94201                  	jmp	badparm_p_coff
 28360                                  if73:
 28361 0000247E 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28362 00002481 7408                    	je	short en73	; then end the $endloop
 28363                                  
 28364                                  	; 14/12/2022
 28365                                  	; ds = cs
 28366                                  	;;mov	al,[cs:rv_dword]
 28367                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 28368                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 28369                                  
 28370                                  	;mov	al,[rv_dword]
 28371 00002483 A0[B41C]                	mov	al,[rv_byte]
 28372 00002486 A2[821D]                	mov	[p_ldrv],al
 28373                                  
 28374 00002489 EBEB                    	jmp	short do73
 28375                                  en73:
 28376                                  	; 14/12/2022
 28377                                  	; ds = cs
 28378 0000248B A0[821D]                	mov	al,[p_ldrv]
 28379 0000248E A2[A002]                	mov	[NUM_CDS],al
 28380                                  	;mov	al,[cs:p_ldrv]
 28381                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 28382                                  sr73:
 28383 00002491 E9CCFA                  	jmp	coff
 28384                                  
 28385                                  ;--------------------------------------------------------------------------
 28386                                  ; setting drive parameters
 28387                                  ;--------------------------------------------------------------------------
 28388                                  
 28389                                  tryp:
 28390 00002494 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 28391 00002497 7511                    	jne	short tryk
 28392                                  
 28393                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28394                                  ;;ifdef	MULTI_CONFIG
 28395                                  ;       call    query_user      ; query the user if config_cmd
 28396                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 28397                                  ;;endif
 28398                                  
 28399 00002499 E83308                  	call	parseline
 28400 0000249C 7209                    	jc	short trypbad
 28401 0000249E E85A07                  	call	setparms
 28402 000024A1 E88E07                  	call	diddleback
 28403                                  
 28404                                  ; No error check here, because setparms and diddleback have no error 
 28405                                  ; returns, and setparms as coded now can return with carry set. 
 28406                                  ;       jc	short trypbad
 28407                                  
 28408                                  	; 12/12/2022
 28409                                  	; cf = 0
 28410                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28411                                  	;jc	short trypbad
 28412                                  	
 28413 000024A4 E9B9FA                  	jmp	coff
 28414                                  trypbad:
 28415 000024A7 E9B701                  	jmp	badop
 28416                                  
 28417                                  ;--------------------------------------------------------------------------
 28418                                  ; setting internal stack parameters
 28419                                  ; stacks=m,n where
 28420                                  ;	m is the number of stacks (range 8 to 64,default 9)
 28421                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 28422                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 28423                                  ;	any combinations that are not within the specified limits will
 28424                                  ;	result in "unrecognized command" error.
 28425                                  ;--------------------------------------------------------------------------
 28426                                  
 28427                                  ;**************************************************************************
 28428                                  ;									  *
 28429                                  ; function: parse the parameters of stacks= command.			  *
 28430                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 28431                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 28432                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 28433                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 28434                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 28435                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 28436                                  ;	    (or if "0,0" pair has been entered.)			  *
 28437                                  ; input :								  *
 28438                                  ;	es:si -> parameters in command line.				  *
 28439                                  ; output:								  *
 28440                                  ;	set the variables stack_count,stack_size.			  *
 28441                                  ;									  *
 28442                                  ; subroutines to be called:						  *
 28443                                  ;	sysinit_parse							  *
 28444                                  ; logic:								  *
 28445                                  ; {									  *
 28446                                  ;	set di points to stks_parms;					  *
 28447                                  ;	set dx,cx to 0; 						  *
 28448                                  ;	while (end of command line)					  *
 28449                                  ;	{ sysinit_parse;						  *
 28450                                  ;	  if (no error) then						  *
 28451                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 28452                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 28453                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 28454                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 28455                                  ;	     }								  *
 28456                                  ;	  else	/*error exit*/						  *
 28457                                  ;	     error exit;						  *
 28458                                  ;	};								  *
 28459                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 28460                                  ;	if o.k.,then set stack_count,stack_size;			  *
 28461                                  ;	 else error_exit;						  *
 28462                                  ; };									  *
 28463                                  ;**************************************************************************
 28464                                  
 28465                                  tryk:
 28466                                          ;if      stacksw
 28467                                  
 28468 000024AA 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 28469 000024AD 7402                    	je	short do_tryk
 28470                                  skip_it4:
 28471 000024AF EB74                    	jmp	short trys	; 15/12/2022
 28472                                  do_tryk:
 28473                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28474                                  ;;ifdef	MULTI_CONFIG
 28475                                  ;       call    query_user              ; query the user if config_cmd
 28476                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 28477                                  ;;endif
 28478                                  	; 14/12/2022
 28479                                  	; ds = cs
 28480                                  
 28481 000024B1 BF[831D]                	mov	di,stks_parms
 28482 000024B4 31C9                    	xor	cx,cx
 28483                                  	; 04/01/2023
 28484                                  	;mov	dx,cx
 28485                                  do79:
 28486 000024B6 E88901                  	call	sysinit_parse
 28487 000024B9 730B                    	jnc	short if79		; parse error
 28488                                  
 28489 000024BB BA[6137]                	mov	dx,badstack		; "invalid stack parameter"
 28490 000024BE E8B40D                  	call	print			;  and show messages and end the search loop.
 28491 000024C1 E8D101                  	call	error_line
 28492                                  	;jmp	sr79
 28493                                  	; 11/12/2022
 28494 000024C4 EB39                    	jmp	short sr79
 28495                                  if79:
 28496 000024C6 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 28497 000024C9 7412                    	je	short en79		; then end the $endloop
 28498                                  
 28499                                  	; 14/12/2022
 28500                                  	; ds = cs
 28501                                  
 28502                                  	;;mov	ax,[cs:rv_dword]
 28503                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28504                                  	;mov	ax,[rv_dword]
 28505 000024CB A1[B41C]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 28506                                  
 28507 000024CE 83F901                  	cmp	cx,1
 28508 000024D1 7505                    	jne	short if83
 28509                                  
 28510                                  	; 14/12/2022
 28511                                  	;mov	[cs:p_stack_count],ax
 28512                                  	;jmp	short en83
 28513 000024D3 A3[B81D]                	mov	[p_stack_count],ax
 28514 000024D6 EBDE                    	jmp	short do79
 28515                                  if83:
 28516                                  	; 14/12/2022
 28517                                  	;mov	[cs:p_stack_size],ax
 28518 000024D8 A3[BA1D]                	mov	[p_stack_size],ax
 28519                                  en83:
 28520 000024DB EBD9                    	jmp	short do79
 28521                                  en79:
 28522                                  	; 14/12/2022
 28523                                  	; ds = cs
 28524 000024DD A1[B81D]                	mov	ax,[p_stack_count]
 28525 000024E0 09C0                    	or	ax,ax
 28526 000024E2 741E                    	jz	short if87		
 28527                                  
 28528                                  	; 14/12/2022
 28529                                  	;cmp	word [p_stack_count],0
 28530                                  	;;cmp	word [cs:p_stack_count],0
 28531                                  	;je	short if87
 28532                                  
 28533                                  	; 14/12/2022
 28534 000024E4 83F808                  	cmp	ax, mincount ; 8
 28535                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 28536                                  	; 15/12/2022
 28537 000024E7 721F                    	jb	short en87
 28538 000024E9 833E[BA1D]20            	cmp	word [p_stack_size],minsize ; 32
 28539                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 28540                                  	; 15/12/2022
 28541 000024EE 7218                    	jb	short en87
 28542                                  if94:
 28543                                  	; 14/12/2022
 28544                                  	; ds = cs
 28545                                  	; ax = [p_stack_count]
 28546                                  	;mov	ax,[p_stack_count]
 28547                                  	;;mov	ax,[cs:p_stack_count]
 28548 000024F0 A3[8A02]                	mov	[stack_count],ax
 28549                                  	;mov	[cs:stack_count],ax
 28550                                  	;mov	ax,[cs:p_stack_size]
 28551 000024F3 A1[BA1D]                	mov	ax,[p_stack_size]
 28552                                  	;mov	[cs:stack_size],ax
 28553 000024F6 A3[8C02]                	mov	[stack_size],ax
 28554                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28555 000024F9 C706[8E02]FFFF          	mov	word [stack_addr],-1
 28556                                  sr79:
 28557 000024FF E95EFA                  	jmp	coff
 28558                                  
 28559                                  if87:
 28560                                  	; 14/12/2022
 28561 00002502 3906[BA1D]              	cmp	[p_stack_size],ax ; 0
 28562 00002506 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 28563                                  	;cmp	word [cs:p_stack_size],0
 28564                                  	;je	short if94
 28565                                  en87:
 28566                                  	; 15/12/2022
 28567                                  	; ([p_stack_count] is invalid, use default values)
 28568                                  	; 14/12/2022
 28569                                  	; ds = cs
 28570 00002508 C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 28571 0000250E C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 28572 00002514 C706[8E02]0000          	mov	word [stack_addr],0
 28573                                  	;mov	word [cs:stack_count],defaultcount ; 9
 28574                                  	;				; reset to default value.
 28575                                  	;mov	word [cs:stack_size],defaultsize ; 128
 28576                                  	;mov	word [cs:stack_addr],0
 28577                                  
 28578 0000251A BA[6137]                	mov	dx,badstack
 28579 0000251D E8550D                  	call	print
 28580 00002520 E87201                  	call	error_line
 28581 00002523 EBDA                    	jmp	short sr79
 28582                                  
 28583                                  ; 15/12/2022
 28584                                  %if 0
 28585                                  	mov	di,stks_parms
 28586                                  	xor	cx,cx
 28587                                  	; 04/01/2023
 28588                                  	;mov	dx,cx
 28589                                  do79:
 28590                                  	call	sysinit_parse
 28591                                  	jnc	short if79		; parse error
 28592                                  
 28593                                  	mov	dx,badstack		; "invalid stack parameter"
 28594                                  	call	print			;  and show messages and end the search loop.
 28595                                  	call	error_line
 28596                                  	;jmp	sr79
 28597                                  	; 11/12/2022
 28598                                  	jmp	short sr79
 28599                                  if79:
 28600                                  	cmp	ax,_$P_RC_EOL		; end of line?
 28601                                  	je	short en79		; then end the $endloop
 28602                                  
 28603                                  	;mov	ax,[cs:rv_dword]
 28604                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28605                                  	cmp	cx,1
 28606                                  	jne	short if83
 28607                                  
 28608                                  	mov	[cs:p_stack_count],ax
 28609                                  	jmp	short en83
 28610                                  if83:
 28611                                  	mov	[cs:p_stack_size],ax
 28612                                  en83:
 28613                                  	jmp	short do79
 28614                                  en79:
 28615                                  	cmp	word [cs:p_stack_count],0
 28616                                  	je	short if87
 28617                                  
 28618                                  	cmp	word [cs:p_stack_count],mincount ; 8
 28619                                  	jb	short ll88
 28620                                  	cmp	word [cs:p_stack_size],minsize ; 32
 28621                                  	jnb	short if88
 28622                                  ll88:
 28623                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28624                                  if88:
 28625                                  	jmp	short en87
 28626                                  
 28627                                  	; 11/12/2022
 28628                                  if94:
 28629                                  	mov	ax,[cs:p_stack_count]
 28630                                  	mov	[cs:stack_count],ax
 28631                                  	mov	ax,[cs:p_stack_size]
 28632                                  	mov	[cs:stack_size],ax
 28633                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28634                                  sr79:
 28635                                  	jmp	coff
 28636                                  
 28637                                  if87:
 28638                                  	cmp	word [cs:p_stack_size],0
 28639                                  	je	short en87
 28640                                  	mov	word [cs:p_stack_count],-1 ; invalid
 28641                                  en87:
 28642                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 28643                                  	jne	short if94
 28644                                  
 28645                                  	mov	word [cs:stack_count],defaultcount ; 9
 28646                                  					; reset to default value.
 28647                                  	mov	word [cs:stack_size],defaultsize ; 128
 28648                                  	mov	word [cs:stack_addr],0
 28649                                  
 28650                                  	mov	dx,badstack
 28651                                  	call	print
 28652                                  	call	error_line
 28653                                  	jmp	short sr79
 28654                                  
 28655                                  %endif
 28656                                  
 28657                                  ; 11/12/2022
 28658                                  %if 0 
 28659                                  
 28660                                  if94:
 28661                                  	mov	ax,[cs:p_stack_count]
 28662                                  	mov	[cs:stack_count],ax
 28663                                  	mov	ax,[cs:p_stack_size]
 28664                                  	mov	[cs:stack_size],ax
 28665                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 28666                                  sr79:
 28667                                  	jmp	coff
 28668                                  
 28669                                  %endif
 28670                                  
 28671                                  	;endif
 28672                                  
 28673                                  ;------------------------------------------------------------------------
 28674                                  ; shell command
 28675                                  ;------------------------------------------------------------------------
 28676                                  
 28677                                  trys:
 28678 00002525 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 28679 00002528 753C                    	jne	short tryx
 28680                                  
 28681                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28682                                  ;;ifdef	MULTI_CONFIG
 28683                                  ;       call    query_user              ; query the user if config_cmd
 28684                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 28685                                  ;       mov	byte [cs:newcmd],1
 28686                                  ;;endif
 28687                                  
 28688                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 28689                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28690                                  	;mov	byte [cs:command_line+1],0
 28691                                  	; 15/12/2022
 28692                                  	; ds = cs
 28693 0000252A C606[AA02]00            	mov	byte [command_line+1],0
 28694                                  
 28695 0000252F BF[4C33]                        mov     di,commnd+1		; we already have the first char
 28696 00002532 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 28697                                  storeshell:
 28698 00002535 E8950A                  	call	getchr
 28699 00002538 08C0                            or      al,al                   ; this is the normal case: "organize"
 28700 0000253A 7419                            jz	short getshparms	; put a ZERO right after the filename
 28701                                  
 28702 0000253C 3C20                            cmp     al," "                  ; this may happen if there are no args
 28703 0000253E 7205                            jb	short endofshell	; I suppose...
 28704 00002540 8805                    	mov	[di],al
 28705 00002542 47                      	inc	di
 28706                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 28707                                          ;jb	short storeshell	; commnd (the filename)
 28708                                          ;jmp	short endofshell
 28709                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28710 00002543 EBF0                    	jmp	short storeshell
 28711                                  
 28712                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28713                                  ;getshparms:
 28714                                  ;	mov     byte [di],0		; zero-terminate the filename
 28715                                  ;	mov     di,command_line+1	; prepare to process the command-line
 28716                                  ;
 28717                                  ;parmloop:
 28718                                  ;	call	getchr
 28719                                  ;	cmp	al," "
 28720                                  ;	jb	short endofparms
 28721                                  ;	mov	[di],al
 28722                                  ;	inc	di
 28723                                  ;	cmp     di,command_line+126
 28724                                  ;	jb	short parmloop
 28725                                  ;endofparms:
 28726                                  ;	mov     cx,di
 28727                                  ;	sub     cx,command_line+1
 28728                                  ;	mov     [cs:command_line],cl
 28729                                  ;
 28730                                  ;endofshell:
 28731                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 28732                                  ;					; the command-line as the case may be)
 28733                                  ;skipline:
 28734                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28735                                  ;       je	short endofline		; the line: watch for ever-present LF
 28736                                  ;call	getchr
 28737                                  ;       jnc	short skipline		; keep it up as long as there are chars
 28738                                  ;
 28739                                  ;endofline:
 28740                                  ;       jmp     conflp
 28741                                  
 28742                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28743                                  endofshell:
 28744 00002545 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 28745                                  					; the command-line as the case may be)
 28746 00002548 E8820A                  	call	getchr
 28747                                  skipline:
 28748 0000254B 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 28749 0000254D 7403                    	je	short endofline		; the line: watch for ever-present LF
 28750 0000254F E87B0A                  	call	getchr
 28751                                  endofline:
 28752 00002552 E9E6F9                  	jmp     conflp
 28753                                  
 28754                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28755                                  getshparms:
 28756                                  	; 18/12/2022
 28757                                  	; al = 0
 28758 00002555 8805                    	mov	[di],al ; 0
 28759                                  	;mov	byte [di],0		; zero-terminate the filename
 28760 00002557 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 28761                                  parmloop:
 28762 0000255A E8700A                  	call	getchr
 28763 0000255D 3C20                    	cmp	al," " ; 20h
 28764 0000255F 72E4                    	jb	short endofshell
 28765 00002561 8805                    	mov	[di],al
 28766 00002563 47                      	inc	di
 28767 00002564 EBF4                    	jmp	short parmloop
 28768                                  
 28769                                  ;------------------------------------------------------------------------
 28770                                  ; fcbs command
 28771                                  ;------------------------------------------------------------------------
 28772                                  
 28773                                  ;************************************************************************
 28774                                  ; function: parse the parameters of fcbs= command.			*
 28775                                  ;									*
 28776                                  ; input :								*
 28777                                  ;	es:si -> parameters in command line.				*
 28778                                  ; output:								*
 28779                                  ;	set the variables fcbs,keep.					*
 28780                                  ;									*
 28781                                  ; subroutines to be called:						*
 28782                                  ;	sysinit_parse							*
 28783                                  ; logic:								*
 28784                                  ; {									*
 28785                                  ;	set di points to fcbs_parms;					*
 28786                                  ;	set dx,cx to 0; 						*
 28787                                  ;	while (end of command line)					*
 28788                                  ;	{ sysparse;							*
 28789                                  ;	  if (no error) then						*
 28790                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 28791                                  ;		   fcbs = result_val._$P_picked_val;			*
 28792                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 28793                                  ;		   keep = result_val._$P_picked_val;			*
 28794                                  ;	     }								*
 28795                                  ;	  else	/*error exit*/						*
 28796                                  ;	     error exit;						*
 28797                                  ;	};								*
 28798                                  ; };									*
 28799                                  ;************************************************************************
 28800                                  
 28801                                  tryx:
 28802 00002566 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 28803                                          ;jne	short try1
 28804                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28805 00002569 752F                    	jne	short tryy	; comment command
 28806                                  
 28807                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28808                                  ;;ifdef	MULTI_CONFIG
 28809                                  ;       call    query_user      ; query the user if config_cmd
 28810                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 28811                                  ;;endif
 28812                                  
 28813 0000256B BF[371D]                	mov	di,fcbs_parms
 28814 0000256E 31C9                    	xor	cx,cx
 28815                                  	; 04/01/2023
 28816                                  	;mov	dx,cx
 28817                                  do98:
 28818 00002570 E8CF00                  	call	sysinit_parse
 28819                                          ; 04/01/2023
 28820                                  	;jnc	short if98	; parse error
 28821                                          ;call	badparm_p	;  and show messages and end the search loop.
 28822                                  	;jmp	short sr98
 28823                                  	;------------------------
 28824                                  	; 04/01/2023
 28825 00002573 724B                    	jc	short badparm_p_coff
 28826                                  if98:
 28827 00002575 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28828 00002578 7412                    	je	short en98	; then end the $endloop
 28829                                  
 28830                                  	;;mov	al,[cs:rv_dword]
 28831                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 28832                                  	; 15/12/2022
 28833                                  	; ds = cs
 28834 0000257A A0[B41C]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 28835 0000257D 83F901                  	cmp	cx,1		; the first positional?
 28836 00002580 7505                    	jne	short if102
 28837                                  	;mov	[cs:p_fcbs],al
 28838                                  	; 15/12/2022
 28839 00002582 A2[6C1D]                	mov	[p_fcbs],al
 28840                                  	;jmp	short en102
 28841 00002585 EBE9                    	jmp	short do98
 28842                                  if102:
 28843                                  	;mov	[cs:p_keep],al
 28844                                  	; 15/12/2022
 28845 00002587 A2[6D1D]                	mov	[p_keep],al
 28846                                  en102:
 28847 0000258A EBE4                    	jmp	short do98
 28848                                  en98:
 28849                                  	; 15/12/2022
 28850                                  	; ds = cs
 28851 0000258C A0[6C1D]                	mov	al,[p_fcbs]
 28852 0000258F A2[9E02]                	mov	[FCBS],al
 28853 00002592 C606[9F02]00            	mov	byte [KEEP],0
 28854                                  	;mov	al,[cs:p_fcbs]	 ; M017
 28855                                  	;mov	[cs:FCBS],al	 ; M017
 28856                                  	;mov	byte [cs:KEEP],0 ; M017
 28857                                  sr98:
 28858 00002597 E9C6F9                  	jmp	coff
 28859                                  
 28860                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28861                                  ;-------------------------------------------------------------------------
 28862                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 28863                                  ;		line number
 28864                                  ;-------------------------------------------------------------------------
 28865                                  
 28866                                  tryy:
 28867 0000259A 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 28868 0000259D 750B                    	jne	short try0
 28869                                  
 28870                                  donothing:
 28871                                  	; 15/12/2022
 28872                                  	; ds = cs
 28873 0000259F FF0E[D603]              	dec	word [chrptr]
 28874 000025A3 FF06[D203]              	inc	word [count]
 28875                                  	; 02/11/2022
 28876                                  	;dec	word [cs:chrptr]
 28877                                  	;inc	word [cs:count]
 28878                                  
 28879 000025A7 E9B6F9                  	jmp	coff
 28880                                  
 28881                                  ;------------------------------------------------------------------------
 28882                                  ; rem command
 28883                                  ;------------------------------------------------------------------------
 28884                                  
 28885                                  try0:				; do nothing with this line.
 28886 000025AA 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 28887 000025AD 74F0                    	je	short donothing
 28888                                  
 28889                                  ; 07/04/2019 - Retro DOS v4.0
 28890                                  
 28891                                  ;-----------------------------------------------------------------------
 28892                                  ; switches command
 28893                                  ;-----------------------------------------------------------------------
 28894                                  
 28895                                  ;***********************************************************************
 28896                                  ;								       *
 28897                                  ; function: parse the option switches specified.		       *
 28898                                  ; note - this command is intended for the future use also.	       *
 28899                                  ; when we need to set system data flag,use this command.	       *
 28900                                  ;								       *
 28901                                  ; input :							       *
 28902                                  ;	es:si -> parameters in command line.			       *
 28903                                  ; output:							       *
 28904                                  ;	p_swit_k set if /k option chosen.			       *
 28905                                  ;								       *
 28906                                  ; subroutines to be called:					       *
 28907                                  ;	sysinit_parse						       *
 28908                                  ; logic:							       *
 28909                                  ; {								       *
 28910                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 28911                                  ;	set dx,cx to 0; 					       *
 28912                                  ;	while (end of command line)				       *
 28913                                  ;	{ sysinit_parse;					       *
 28914                                  ;	  if (no error) then					       *
 28915                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 28916                                  ;		    p_swit_k = 1				       *
 28917                                  ;	       endif						       *
 28918                                  ;	  else {show error message;error exit}			       *
 28919                                  ;	};							       *
 28920                                  ; };								       *
 28921                                  ;								       *
 28922                                  ;***********************************************************************
 28923                                  
 28924                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 28925                                  
 28926                                  try1:
 28927 000025AF 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 28928 000025B2 7402                    	je	short do_try1	; switches= command entered?
 28929                                  skip_it5:
 28930                                  	;jmp	tryv
 28931                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28932 000025B4 EB7A                    	jmp	tryz
 28933                                  
 28934                                  do_try1:
 28935                                  
 28936                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28937                                  ;;ifdef	MULTI_CONFIG
 28938                                  ;       call    query_user      ; query the user if config_cmd
 28939                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 28940                                  ;;endif
 28941                                  
 28942 000025B6 BF[D11D]                	mov	di,swit_parms
 28943 000025B9 31C9                    	xor	cx,cx
 28944                                  	; 04/01/2023
 28945                                  	;mov	dx,cx
 28946                                  do110:
 28947 000025BB E88400                  	call	sysinit_parse
 28948 000025BE 7306                    	jnc	short if110	; parse error
 28949                                  	;call	badparm_p	;  and show messages and end the search loop.
 28950                                  	;jmp	short sr110
 28951                                  	; -----------------------
 28952                                  	; 04/01/2023
 28953                                  badparm_p_coff:
 28954 000025C0 E8AA00                  	call	badparm_p
 28955 000025C3 E99AF9                  	jmp	coff
 28956                                  	;------------------------
 28957                                  if110:
 28958 000025C6 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 28959 000025C9 742D                    	je	short en110	; then jmp to $endloop for semantic check
 28960                                  
 28961                                  	; 15/12/2022
 28962                                  	; ds = cs
 28963                                  	;;cmp	word [cs:result_val_swoff],swit_k
 28964                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28965 000025CB 813E[B21C][E91D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 28966 000025D1 7507                    	jne	short if115	;				;M059
 28967                                  	; 15/12/2022
 28968 000025D3 C606[041E]01            	mov	byte [p_swit_k],1
 28969                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 28970 000025D8 EBE1                    	jmp	short do110
 28971                                  if115:	
 28972                                  	; 15/12/2022							;M059
 28973                                  	;;cmp	word [cs:result_val_swoff],swit_t
 28974                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 28975 000025DA 813E[B21C][F51D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 28976 000025E0 7507                    	jne	short if116					;M059 M063
 28977                                  	; 15/12/2022
 28978 000025E2 C606[051E]01            	mov	byte [p_swit_t],1
 28979                                  	;mov	byte [cs:p_swit_t],1				;M059
 28980 000025E7 EBD2                    	jmp	short do110					;M059
 28981                                  if116:
 28982                                  	; 15/12/2022
 28983                                  	;;cmp	word [cs:result_val_swoff],swit_w
 28984                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 28985 000025E9 813E[B21C][011E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 28986 000025EF 75CA                    	jne	short do110					;M063
 28987                                  	; 15/12/2022
 28988 000025F1 C606[061E]01            	mov	byte [p_swit_w],1
 28989                                  	;mov	byte [cs:p_swit_w],1				;M063
 28990 000025F6 EBC3                    	jmp	short do110					;M063
 28991                                  en110:
 28992                                  	; 15/12/2022
 28993                                  	; ds = cs
 28994 000025F8 803E[041E]01            	cmp	byte [p_swit_k],1
 28995                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 28996 000025FD 1E                      	push	ds
 28997                                  	;;mov	ax,Bios_Data
 28998                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 28999                                  	; 21/10/2022
 29000 000025FE B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 29001 00002601 8ED8                    	mov	ds,ax
 29002 00002603 750A                    	jne	short if117
 29003 00002605 C606[DE04]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 29004 0000260A C606[DF04]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 29005                                  if117:
 29006                                  	; 15/12/2022
 29007                                  	; ds <> cs
 29008 0000260F 2EA0[051E]              	mov	al,[cs:p_swit_t]				;M059
 29009 00002613 A2[EB04]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 29010                                  
 29011 00002616 2E803E[061E]00          	cmp	byte [cs:p_swit_w],0				;M063
 29012 0000261C 740E                    	je	short skip_dos_flag				;M063
 29013 0000261E 06                      	push	es
 29014 0000261F 53                      	push	bx
 29015 00002620 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 29016 00002622 CD21                    	int	21h						;M063
 29017                                  			; DOS - 2+ internal - GET LIST OF LISTS
 29018                                  			; Return: ES:BX -> DOS list of lists
 29019                                  	;or	bytes [es:86h],2
 29020 00002624 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 29021 0000262A 5B                      	pop	bx
 29022 0000262B 07                      	pop	es
 29023                                  skip_dos_flag:							;M063
 29024 0000262C 1F                      	pop	ds
 29025                                  sr110:
 29026 0000262D E930F9                  	jmp	coff
 29027                                  
 29028                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29029                                  ;
 29030                                  ;tryv:
 29031                                  ;
 29032                                  ;;ifdef	MULTI_CONFIG
 29033                                  ;;------------------------------------------------------------------------
 29034                                  ;; set command (as in "set var=value<cr/lf>")
 29035                                  ;;------------------------------------------------------------------------
 29036                                  ;
 29037                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 29038                                  ;       jne	short tryn
 29039                                  ;       call    query_user      ; query the user if config_cmd
 29040                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 29041                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 29042                                  ;       jnc	short sr110	; no error
 29043                                  ;err:    
 29044                                  ;	call    error_line      ; whoops, display error in line XXX
 29045                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 29046                                  ;
 29047                                  ;;------------------------------------------------------------------------
 29048                                  ;; numlock command (as in "numlock=on|off")
 29049                                  ;;------------------------------------------------------------------------
 29050                                  ;tryn:
 29051                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 29052                                  ;       jne	short tryy
 29053                                  ;       call    query_user      ; query thye user if config_cmd
 29054                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 29055                                  ;       call    set_numlock
 29056                                  ;       jc	short err
 29057                                  ;       jmp	short sr110	; all done
 29058                                  ;
 29059                                  ;;endif	;MULTI_CONFIG
 29060                                  
 29061                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29062                                  ;;-------------------------------------------------------------------------
 29063                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 29064                                  ;;		line number
 29065                                  ;;-------------------------------------------------------------------------
 29066                                  ;
 29067                                  ;tryy:
 29068                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 29069                                  ;	jne	short try0
 29070                                  ;donothing:
 29071                                  ;	dec	word [chrptr]
 29072                                  ;	inc	word [count]
 29073                                  ;	jmp	coff
 29074                                  ;
 29075                                  ;;------------------------------------------------------------------------
 29076                                  ;; rem command
 29077                                  ;;------------------------------------------------------------------------
 29078                                  ;
 29079                                  ;try0:				;do nothing with this line.
 29080                                  ;	cmp     ah,CONFIG_REM ; '0'
 29081                                  ;	je	short donothing
 29082                                  
 29083                                  ; 30/10/2022
 29084                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 29085                                  
 29086                                  ;------------------------------------------------------------------------
 29087                                  ; bogus command
 29088                                  ;------------------------------------------------------------------------
 29089                                  
 29090                                  tryz:
 29091 00002630 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 29092                                  	;je	short donothing
 29093                                  	; 02/11/2022
 29094 00002633 740A                    	je	short tryz_donothing
 29095                                  
 29096 00002635 FF0E[D603]              	dec	word [chrptr]
 29097 00002639 FF06[D203]              	inc	word [count]
 29098 0000263D EB22                    	jmp	short badop
 29099                                  
 29100                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 29101                                  tryz_donothing:
 29102 0000263F E95DFF                  	jmp	donothing
 29103                                  
 29104                                  ; 07/04/2019 - Retro DOS v4.0
 29105                                  
 29106                                  ;------------------------------------------------------------------------------
 29107                                  
 29108                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29109                                  ;
 29110                                  ;
 29111                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 29112                                  ;;
 29113                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 29114                                  ;
 29115                                  ;CheckProtmanArena:
 29116                                  ;	push	es
 29117                                  ;	mov	ax,[cs:area]	; get our arena header
 29118                                  ;	dec	ax
 29119                                  ;	mov	es,ax
 29120                                  ;	add	ax,[es:3]	; find end of arena
 29121                                  ;	inc	ax
 29122                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 29123                                  ;	ja	short CheckProtmanDone
 29124                                  ;
 29125                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 29126                                  ;CheckProtmanDone:
 29127                                  ;	pop	es
 29128                                  ;	retn
 29129                                  
 29130                                  ;------------------------------------------------------------------------------
 29131                                  
 29132                                  sysinit_parse:
 29133                                  
 29134                                  ;------------------------------------------------------------------------------
 29135                                  ;set up registers for sysparse
 29136                                  ;in)	es:si -> command line in confbot
 29137                                  ;	di -> offset of the parse control definition.
 29138                                  ;
 29139                                  ;out)	calls sysparse.
 29140                                  ;	carry will set if parse error.
 29141                                  ;	*** the caller should check the eol condition by looking at ax
 29142                                  ;	*** after each call.
 29143                                  ;	*** if no parameters are found,then ax will contain a error code.
 29144                                  ;	*** if the caller needs to look at the synomym@ of the result,
 29145                                  ;	***  the caller should use cs:@ instead of es:@.
 29146                                  ;	cx register should be set to 0 at the first time the caller calls this
 29147                                  ;	 procedure.
 29148                                  ;	ax - exit code
 29149                                  ;	bl - terminated delimeter code
 29150                                  ;	cx - new positional ordinal
 29151                                  ;	si - set to pase scanned operand
 29152                                  ;	dx - selected result buffer
 29153                                  ;------------------------------------------------------------------------------
 29154                                  
 29155                                  	; 24/10/2022
 29156 00002642 06                      	push	es			;save es,ds
 29157 00002643 1E                      	push	ds
 29158                                  
 29159                                  	; 09/09/2023
 29160                                  	; ds = cs
 29161 00002644 8C06[FD13]              	mov	[badparm_seg],es	;save the pointer to the parm
 29162 00002648 8936[FB13]              	mov	[badparm_off],si	;we are about to parse for badparm msg.
 29163                                  
 29164 0000264C 06                      	push	es
 29165 0000264D 1F                      	pop	ds			;now ds:si -> command line
 29166                                  
 29167 0000264E 0E                      	push	cs
 29168 0000264F 07                      	pop	es			;now es:di -> control definition
 29169                                  
 29170                                  	; 09/09/2023
 29171                                  	;mov	[cs:badparm_seg],ds	;save the pointer to the parm
 29172                                  	;mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 29173                                  
 29174                                  	;mov	dx,0
 29175                                  	; 04/01/2023
 29176 00002650 29D2                    	sub	dx,dx ; 0
 29177 00002652 E850EE                  	call	SysParse
 29178                                  	;cmp	ax,_$P_No_Error	; 0	;no error
 29179                                  	; 06/09/2023
 29180 00002655 21C0                    	and	ax,ax
 29181                                  
 29182                                  ;**cas note: when zero true after cmp, carry clear
 29183                                  
 29184                                  	;je	short ll4
 29185                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 29186                                  	; 12/12/2022
 29187 00002657 7405                    	je	short en4 ; cf=0
 29188 00002659 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 29189                                  	;jne	short if4
 29190                                  	; 12/12/2022
 29191 0000265C 7400                    	je	short en4 ; cf=0
 29192                                  	; 06/09/2023
 29193                                  	; cf=1
 29194                                  
 29195                                  ; 12/12/2022
 29196                                  ;ll4:
 29197                                  ;	; 12/12/2022
 29198                                  ;	; cf=0
 29199                                  ;	;clc
 29200                                  ;	jmp	short en4
 29201                                  
 29202                                  if4:
 29203                                  	; 24/10/2022
 29204                                  	; 06/09/2023 (cf=1)
 29205                                  	;stc
 29206                                  en4:
 29207 0000265E 1F                      	pop	ds
 29208 0000265F 07                      	pop	es
 29209 00002660 C3                      	retn
 29210                                  
 29211                                  ; 11/12/2022
 29212                                  %if 0
 29213                                  
 29214                                  ;----------------------------------------------------------------------------
 29215                                  ;
 29216                                  ; procedure : badop_p
 29217                                  ;
 29218                                  ;             same thing as badop,but will make sure to set ds register back
 29219                                  ;             to sysinitseg and return back to the caller.
 29220                                  ;
 29221                                  ;----------------------------------------------------------------------------
 29222                                  
 29223                                  badop_p:
 29224                                  	push	cs
 29225                                  	pop	ds		;set ds to configsys seg.
 29226                                  	mov	dx,badopm
 29227                                  	call	print
 29228                                          ;call	error_line
 29229                                  	;retn
 29230                                  	; 11/12/2022
 29231                                  	jmp	error_line
 29232                                  
 29233                                  %endif
 29234                                  
 29235                                  ;----------------------------------------------------------------------------
 29236                                  ;
 29237                                  ; label : badop
 29238                                  ;
 29239                                  ;----------------------------------------------------------------------------
 29240                                  
 29241                                  badop:	
 29242 00002661 BA[2236]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 29243 00002664 E80E0C                  	call	print
 29244 00002667 E82B00                  	call	error_line	;show "error in config.sys ..." .
 29245 0000266A E9F3F8                  	jmp	coff
 29246                                  
 29247                                  ;----------------------------------------------------------------------------
 29248                                  ;
 29249                                  ; procedure : badparm_p
 29250                                  ;
 29251                                  ;             show "bad command or parameters - xxxxxx"
 29252                                  ;             in badparm_seg,badparm_off -> xxxxx
 29253                                  ;
 29254                                  ;----------------------------------------------------------------------------
 29255                                  
 29256                                  	; 24/10/2022
 29257                                  badparm_p:
 29258                                  	; 11/12/2022
 29259                                  	; ds = cs
 29260                                  	; 11/12/2022
 29261                                  	;push	ds ; *
 29262 0000266D 52                      	push	dx
 29263 0000266E 56                      	push	si
 29264                                  
 29265                                  	; 11/12/2022
 29266                                  	; ds = cs
 29267                                  	;push	cs
 29268                                  	;pop	ds
 29269                                  
 29270 0000266F BA[4936]                	mov	dx,badparm
 29271 00002672 E8000C                  	call	print			; "bad command or parameters - "
 29272 00002675 C536[FB13]              	lds	si,[badparm_ptr]
 29273                                  
 29274                                  ;	print "xxxx" until cr.
 29275                                  
 29276                                  do1:
 29277 00002679 8A14                    	mov	dl,[si]			; get next character
 29278 0000267B 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 29279 0000267E 7407                    	je	short en1		; exit loop if so
 29280                                  
 29281 00002680 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 29282 00002682 CD21                    	int	21h			; display character
 29283 00002684 46                      	inc	si			; next character
 29284 00002685 EBF2                    	jmp	short do1
 29285                                  en1:
 29286 00002687 0E                      	push	cs
 29287 00002688 1F                      	pop	ds
 29288                                  
 29289 00002689 BA[4636]                	mov	dx,crlfm
 29290 0000268C E8E60B                  	call	print
 29291 0000268F E80300                  	call	error_line
 29292                                  
 29293 00002692 5E                      	pop	si
 29294 00002693 5A                      	pop	dx
 29295                                  	; 11/12/2022
 29296                                  	;pop	ds ; *
 29297                                  badparmp_ret:
 29298 00002694 C3                      	retn
 29299                                  
 29300                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 29301                                  %if 0
 29302                                  
 29303                                  ;----------------------------------------------------------------------------
 29304                                  ;
 29305                                  ; procedure : getchr
 29306                                  ;
 29307                                  ;----------------------------------------------------------------------------
 29308                                  
 29309                                  	; 24/10/2022
 29310                                  getchr:
 29311                                  	; 12/12/2022
 29312                                  	;push	cx
 29313                                  	;mov	cx,[count]
 29314                                  	;jcxz	nochar
 29315                                  	; 12/12/2022
 29316                                  	cmp	word [count],1 
 29317                                  	jb	short nochar ; cf=1 ([count] = 0)
 29318                                  	
 29319                                  	mov	si,[chrptr]
 29320                                  	mov	al,[es:si]
 29321                                  	dec	word [count]
 29322                                  	inc	word [chrptr]
 29323                                  	; 12/12/202
 29324                                  	; cf=0
 29325                                  	;clc
 29326                                  ;get_ret:
 29327                                  	;pop	cx
 29328                                  	;retn
 29329                                  nochar: 
 29330                                  	; 12/12/2022
 29331                                  	; cf=1
 29332                                  	;stc
 29333                                  	;jmp	short get_ret
 29334                                  	
 29335                                  	retn
 29336                                  %endif
 29337                                  
 29338                                  ; 11/12/2022
 29339                                  %if 0
 29340                                  
 29341                                  ;----------------------------------------------------------------------------
 29342                                  ;
 29343                                  ; procedure : incorrect_order
 29344                                  ;
 29345                                  ;             show "incorrect order in config.sys ..." message.
 29346                                  ;
 29347                                  ;----------------------------------------------------------------------------
 29348                                  
 29349                                  incorrect_order:
 29350                                  	mov	dx,badorder
 29351                                  	call	print
 29352                                  	call	showlinenum
 29353                                  	retn
 29354                                  
 29355                                  %endif
 29356                                  
 29357                                  ;----------------------------------------------------------------------------
 29358                                  ;
 29359                                  ; procedure : error_line
 29360                                  ;
 29361                                  ;             show "error in config.sys ..." message.
 29362                                  ;
 29363                                  ;----------------------------------------------------------------------------
 29364                                  
 29365                                  	; 11/12/2022
 29366                                  	; 24/10/2022
 29367                                  error_line:
 29368                                  	; 11/12/2022
 29369                                  	; ds = cs
 29370                                  	;push	cs
 29371                                  	;pop	ds
 29372                                  
 29373 00002695 BA[7E37]                	mov	dx,errorcmd
 29374 00002698 E8DA0B                  	call	print
 29375                                  	;call	showlinenum
 29376                                  	;retn
 29377                                  	; 11/12/2022
 29378                                  	;jmp	short shortlinemum
 29379                                  
 29380                                  ;----------------------------------------------------------------------------
 29381                                  ;
 29382                                  ; procedure : showlinenum
 29383                                  ;
 29384                                  ; convert the binary linecount to decimal ascii string in showcount
 29385                                  ; and display showcount at the current curser position.
 29386                                  ; in.) linecount
 29387                                  ;
 29388                                  ; out) the number is printed.
 29389                                  ;
 29390                                  ;----------------------------------------------------------------------------
 29391                                  
 29392                                  	; 11/12/2022
 29393                                  	; ds = cs
 29394                                  	; 24/10/2022
 29395                                  showlinenum:
 29396 0000269B 06                      	push	es
 29397                                  	; 11/12/2022
 29398                                  	;push	ds
 29399 0000269C 57                      	push	di
 29400                                  
 29401 0000269D 0E                      	push	cs
 29402 0000269E 07                      	pop	es		; es=cs
 29403                                  
 29404                                  	; 11/12/2022
 29405                                  	;push	cs
 29406                                  	;pop	ds
 29407                                  
 29408 0000269F BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 29409 000026A2 B90A00                  	mov	cx,10		; decimal divide factor
 29410                                  	;mov	ax,[cs:linecount]
 29411                                  	; 11/12/2022
 29412 000026A5 A1[2B03]                	mov	ax,[linecount]
 29413                                  sln_loop:
 29414                                  	; 11/12/2022
 29415 000026A8 39C8                    	cmp	ax,cx ; < 10 ?
 29416                                  	;cmp	ax,10		; < 10?
 29417 000026AA 720C                    	jb	short sln_last
 29418                                  
 29419 000026AC 31D2                    	xor	dx,dx
 29420 000026AE F7F1                    	div	cx	; cx = 10
 29421 000026B0 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 29422 000026B3 8815                    	mov	[di],dl
 29423 000026B5 4F                      	dec	di
 29424 000026B6 EBF0                    	jmp	short sln_loop
 29425                                  
 29426                                  sln_last:
 29427 000026B8 0C30                    	or	al,30h	; "0"
 29428 000026BA 8805                    	mov	[di],al
 29429 000026BC 89FA                    	mov	dx,di
 29430 000026BE E8B40B                  	call	print		; show it.
 29431 000026C1 5F                      	pop	di
 29432                                  	; 11/12/2022
 29433                                  	;pop	ds
 29434 000026C2 07                      	pop	es
 29435 000026C3 C3                      	retn
 29436                                  
 29437                                  ; 07/04/2019 - Retro DOS v4.0
 29438                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 29439                                  
 29440                                  ;----------------------------------------------------------------------------
 29441                                  ;
 29442                                  ; procedure : ProcDOS
 29443                                  ;
 29444                                  ;	Process the result of DOS= parsing
 29445                                  ;
 29446                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 29447                                  ;				= 2 for DOS=LOW
 29448                                  ;				= 3 for DOS=UMB
 29449                                  ;				= 4 for DOS=NOUMB
 29450                                  ;----------------------------------------------------------------------------
 29451                                  
 29452                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 29453                                  	; (SYTSINIT:2AB5h)
 29454                                  ProcDOS:
 29455                                  	; 01/01/2023
 29456                                  	; ds = cs
 29457 000026C4 30E4                    	xor	ah,ah
 29458                                  	;;mov	al,[cs:result_val_itag]
 29459                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 29460                                  	; 04/01/2023
 29461 000026C6 A0[B11C]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 29462 000026C9 48                      	dec	ax
 29463 000026CA 7415                    	jz	short pd_hi
 29464 000026CC 48                      	dec	ax
 29465 000026CD 740E                    	jz	short pd_lo
 29466 000026CF 48                      	dec	ax
 29467 000026D0 7405                    	jz	short pd_umb
 29468                                  	;;mov	byte [cs:DevUMB],0
 29469                                  	; 18/12/2022
 29470                                  	;mov	byte [cs:DevUMB],ah ; 0
 29471                                  	; 01/01/2023
 29472 000026D2 8826[581E]              	mov	byte [DevUMB],ah ; 0
 29473 000026D6 C3                      	retn
 29474                                  pd_umb:
 29475                                  	; 04/01/2023
 29476 000026D7 C606[581E]FF            	mov	byte [DevUMB],0FFh
 29477                                  	;mov	byte [cs:DevUMB],0FFh
 29478 000026DC C3                      	retn
 29479                                  pd_lo:
 29480                                  	; 04/01/2023
 29481 000026DD A2[6A02]                	mov	[runhigh],al ; 0
 29482                                  	; 18/12/2022
 29483                                  	;mov	[cs:runhigh],al ; 0
 29484                                  	;;mov	byte [cs:runhigh],0
 29485 000026E0 C3                      	retn
 29486                                  pd_hi:
 29487                                  	; 04/01/2023
 29488 000026E1 C606[6A02]FF            	mov	byte [runhigh],0FFh
 29489                                  	;mov	byte [cs:runhigh],0FFh
 29490                                  limx:	; 11/12/2022
 29491 000026E6 C3                      	retn
 29492                                  
 29493                                  ;----------------------------------------------------------------------------
 29494                                  ;
 29495                                  ; procedure : LieInt12Mem
 29496                                  ;
 29497                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 29498                                  ;		alloclim set to the limit of low memory.
 29499                                  ;
 29500                                  ;	Output : none
 29501                                  ;
 29502                                  ;	Changes the ROM BIOS variable which stores the total low memory
 29503                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 29504                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 29505                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 29506                                  ;	converted into Ks and stored in 40:13h
 29507                                  ;
 29508                                  ;----------------------------------------------------------------------------
 29509                                  
 29510                                  LieInt12Mem:
 29511                                  	; 11/12/2022
 29512                                  	; ds = cs
 29513 000026E7 A1[A302]                	mov	ax,[ALLOCLIM]
 29514                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 29515                                  					; assuming that it is 3Com
 29516 000026EA E84200                  	call	IsIt3Com		; Is it 3Com driver?
 29517 000026ED 740A                    	jz	short lim_set		; yes, lie to him differently
 29518                                  	; 13/05/2019
 29519                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 29520                                  	;je	short limx		; no, don't lie
 29521                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 29522                                  	; 11/12/2022
 29523                                  	; ds = cs
 29524 000026EF 803E[671E]00            	cmp	byte [DeviceHi],0
 29525 000026F4 74F0                    	je	short limx
 29526 000026F6 A1[4E1E]                	mov	ax,[DevLoadEnd]
 29527                                  lim_set:
 29528                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29529                                  	; 11/12/2022
 29530                                  	;call	SetInt12Mem
 29531                                  ;limx:
 29532                                  	;retn
 29533                                  	
 29534                                  	;jmp	short SetInt12Mem 
 29535                                  
 29536                                  ;----------------------------------------------------------------------------
 29537                                  ;
 29538                                  ; procedure : SetInt12Mem
 29539                                  ;
 29540                                  ;	Input : AX = Memory size to be set (in paras)
 29541                                  ;	Output : none
 29542                                  ;
 29543                                  ;	Sets the variable 40:13 to the memory size passed in AX
 29544                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 29545                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 29546                                  ;	restoring the value of 40:13
 29547                                  ;
 29548                                  ;----------------------------------------------------------------------------
 29549                                  
 29550                                  	; 01/11/2022
 29551                                  SetInt12Mem:
 29552 000026F9 1E                      	push	ds
 29553 000026FA BB4000                  	mov	bx,40h
 29554 000026FD 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 29555 000026FF 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 29556                                  	;mov	[cs:OldInt12Mem],bx	; save it
 29557 00002703 B106                    	mov	cl,6
 29558 00002705 D3E8                    	shr	ax,cl			; convert paras into Ks
 29559 00002707 A31300                  	mov	[13h],ax		; Lie
 29560                                  	;mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 29561 0000270A 1F                      	pop	ds
 29562                                  	; 14/04/2024
 29563                                  	; ds = cs
 29564 0000270B 891E[6B1E]              	mov	[OldInt12Mem],bx
 29565 0000270F C606[6A1E]FF            	mov	byte [Int12Lied],0FFh
 29566                                  ;limx:
 29567 00002714 C3                      	retn
 29568                                  
 29569                                  ;----------------------------------------------------------------------------
 29570                                  ;
 29571                                  ; procedure : TrueInt12Mem
 29572                                  ;
 29573                                  ;	Input : Int12Lied = 0 if we are not lying currently
 29574                                  ;			  = 0ffh if we are lying
 29575                                  ;		OldInt12Mem = Saved value of 40:13h
 29576                                  ;
 29577                                  ;	Output : none
 29578                                  ;
 29579                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 29580                                  ;	and resets the flag which indicates that we were lying
 29581                                  ;
 29582                                  ;----------------------------------------------------------------------------
 29583                                  
 29584                                  TrueInt12Mem:
 29585                                  	; 11/12/2022
 29586                                  	; ds = cs
 29587 00002715 803E[6A1E]00            	cmp	byte [Int12Lied],0
 29588                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 29589                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 29590                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 29591 0000271A 7412                    	je	short timx		; no, we weren't
 29592                                  	; 18/12/2022
 29593 0000271C B84000                  	mov	ax,40h
 29594 0000271F 8826[6A1E]              	mov	[Int12Lied],ah ; 0
 29595                                  	;mov	byte [Int12Lied],0
 29596                                  	;mov	byte [cs:Int12Lied],0
 29597 00002723 1E                      	push	ds
 29598                                  	;mov	ax,40h
 29599 00002724 8ED8                    	mov	ds,ax
 29600 00002726 2EA1[6B1E]              	mov	ax,[cs:OldInt12Mem]
 29601 0000272A A31300                  	mov	[13h],ax		; restore INT 12 memory
 29602 0000272D 1F                      	pop	ds
 29603                                  timx:
 29604 0000272E C3                      	retn
 29605                                  
 29606                                  ;----------------------------------------------------------------------------
 29607                                  ;
 29608                                  ; procedure : IsIt3Com?
 29609                                  ;
 29610                                  ;	Input : DevEntry = Seg:0 of device driver
 29611                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 29612                                  ;		 else Zero flag is reset
 29613                                  ;
 29614                                  ;----------------------------------------------------------------------------
 29615                                  
 29616                                  IsIt3Com:
 29617                                  	; 11/12/2022
 29618                                  	; ds = cs
 29619 0000272F 1E                      	push	ds
 29620 00002730 06                      	push	es
 29621 00002731 56                      	push	si
 29622                                  	; 11/12/2022
 29623 00002732 C536[501E]              	lds	si,[DevEntry]
 29624                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 29625 00002736 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 29626 00002739 0E                      	push	cs
 29627 0000273A 07                      	pop	es
 29628 0000273B BF[6D1E]                	mov	di,ThreeComName
 29629 0000273E B90800                  	mov	cx,8			; name length
 29630 00002741 F3A6                    	rep	cmpsb
 29631 00002743 5E                      	pop	si
 29632 00002744 07                      	pop	es
 29633 00002745 1F                      	pop	ds
 29634 00002746 C3                      	retn
 29635                                  
 29636                                  ;M020 : BEGIN
 29637                                  ;----------------------------------------------------------------------------
 29638                                  
 29639                                  UpdatePDB:
 29640 00002747 1E                      	push	ds
 29641 00002748 B462                    	mov	ah,62h
 29642 0000274A CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 29643 0000274C 8EDB                    	mov	ds,bx
 29644 0000274E 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 29645                                  	;mov	[2],bx
 29646 00002753 891E0200                	mov	[PDB.BLOCK_LEN],bx
 29647 00002757 1F                      	pop	ds
 29648 00002758 C3                      	retn
 29649                                  
 29650                                  ; M020 : END
 29651                                  
 29652                                  ;----------------------------------------------------------------------------
 29653                                  
 29654                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 29655                                  
 29656                                  %if 0
 29657                                  
 29658                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 29659                                  ;include highexit.inc	; umb's, etc
 29660                                  
 29661                                  ; ----------------------------------------------------------------------
 29662                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 29663                                  ; ----------------------------------------------------------------------
 29664                                  ; 07/04/2019 - Retro DOS v4.0
 29665                                  
 29666                                  ;******************************************************************************
 29667                                  ;
 29668                                  ; This file contains routines needed to parse and implement user-given
 29669                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 29670                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 29671                                  ; the variables in highvar.inc, for use by the rest of the routines.
 29672                                  ;
 29673                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 29674                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 29675                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 29676                                  ;    DH/LH module opts
 29677                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 29678                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 29679                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 29680                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 29681                                  ; available during the load.
 29682                                  ;
 29683                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 29684                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 29685                                  ; upper-memory block which was not specified by the user... in addition, if
 29686                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 29687                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 29688                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 29689                                  ; free any UMBs so allocated.
 29690                                  ;
 29691                                  ; When a device driver loads, there is the additional problem of allocating its
 29692                                  ; initial load site; this should be restricted to the first UMB specified on
 29693                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 29694                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 29695                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 29696                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 29697                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 29698                                  ;
 29699                                  ;******************************************************************************
 29700                                  
 29701                                  SWTCH	equ	'/'		; Switch character
 29702                                  
 29703                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 29704                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 29705                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 29706                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 29707                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 29708                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 29709                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 29710                                  
 29711                                  CR	equ	0Dh		; Carriage Return
 29712                                  LF	equ	0Ah		; Line Feed
 29713                                  TAB	equ	09h		; Tab character (^I)
 29714                                  
 29715                                  ; -----------------------------------------------------------------------------
 29716                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 29717                                  ; -----------------------------------------------------------------------------
 29718                                  ; ENTRY:       None
 29719                                  ; EXIT:        Variables listed in highvar.inc are initialized
 29720                                  ; ERROR EXIT:  None
 29721                                  ; USES:        Flags, variables in highvar.inc
 29722                                  ; -----------------------------------------------------------------------------
 29723                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 29724                                  ; are largely ignored, but it is initialized nonetheless.
 29725                                  ; -----------------------------------------------------------------------------
 29726                                  
 29727                                  InitVar:
 29728                                  	;pushreg <ax, cx, di, es>
 29729                                  	push	ax
 29730                                  	push	cx
 29731                                  	push	di
 29732                                  	push	es
 29733                                  
 29734                                  	;dataseg es			;Point ES into appropriate data segment
 29735                                  	push	cs
 29736                                  	pop	es
 29737                                  
 29738                                  	xor	ax,ax
 29739                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 29740                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 29741                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 29742                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 29743                                  					;Later is the # of the 1st spec'd UMB
 29744                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 29745                                  
 29746                                  	cld
 29747                                  
 29748                                  	mov	cx,MAXUMB ; 16		;For each entry
 29749                                  	mov	di,UmbUsed		;on the UmbUsed array,
 29750                                  	rep	stosb			;	Store 0
 29751                                  
 29752                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 29753                                  	mov	di,UmbSize		;on the UmbSize array,
 29754                                  	rep	stosw			;	Store 0
 29755                                  
 29756                                  	;normseg es			; Return ES
 29757                                  
 29758                                  	;popreg	<es, di, cx, ax>
 29759                                  	pop	es
 29760                                  	pop	di
 29761                                  	pop	cx
 29762                                  	pop	ax	 	
 29763                                  
 29764                                  	retn
 29765                                  
 29766                                  ; -----------------------------------------------------------------------------
 29767                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 29768                                  ; -----------------------------------------------------------------------------
 29769                                  ; ENTRY   : None
 29770                                  ; EXIT    : None
 29771                                  ; ERROR   : None
 29772                                  ; USES    : Flags, fm_umb, fm_strat
 29773                                  ; -----------------------------------------------------------------------------
 29774                                  
 29775                                  FixMem:
 29776                                  	push	ax
 29777                                  	push	bx
 29778                                  	push	cx
 29779                                  	push	dx
 29780                                  	push	es
 29781                                  
 29782                                  	call	fm_link		; Link in UMBs
 29783                                  
 29784                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 29785                                  	jc	short fmX	; (if couldn't get it, leave now).
 29786                                  
 29787                                  	mov	es,ax		; It returns in AX, so move it to ES.
 29788                                  
 29789                                  ; - Walk MCB Chain ------------------------------------------------------------
 29790                                  
 29791                                  	xor	dx,dx		; We're keeping the address of the last MCB
 29792                                  	mov 	cx,dx		; in CX... and the last owner
 29793                                  	inc	dx		; in dx as we go through the loop:
 29794                                  
 29795                                  ; ------------------------------------------
 29796                                  ; FM10--DX  = last MCB's owner's PSP address
 29797                                  ;       CX  = last MCB's address (segment)
 29798                                  ; ------------------------------------------
 29799                                  
 29800                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 29801                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 29802                                  	or	bx,dx			; dx was owner of previous MCB
 29803                                  	jnz	short fm30		; If not both zero, don't cat.
 29804                                  
 29805                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 29806                                  
 29807                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 29808                                  	mov	es,cx			; Go back to prev MCB's address
 29809                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 29810                                  
 29811                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 29812                                  	;add	bx,1			; And add one for the header
 29813                                  	; 14/08/2023
 29814                                  	inc	bx
 29815                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 29816                                  
 29817                                  	; ---------------------------------------------------------------------
 29818                                  
 29819                                  fm30:	mov	cx,es			; Put this address on the stack
 29820                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 29821                                  
 29822                                  	mov	bx,es			; Move to the next MCB
 29823                                  	add	bx,[es:ARENA.SIZE]
 29824                                  	inc	bx
 29825                                  	mov	es,bx
 29826                                  
 29827                                  	;cmp	al,'Z'
 29828                                  	cmp	al,arena_signature_end
 29829                                  	jne	short fm10		; If signature != 'Z', there are more.
 29830                                  fmX:	
 29831                                  	call	fm_unlink		; Unlink UMBs
 29832                                  
 29833                                  	pop	es
 29834                                  	pop	dx
 29835                                  	pop	cx
 29836                                  	pop	bx
 29837                                  	pop	ax
 29838                                  
 29839                                  	retn
 29840                                  
 29841                                  ; -----------------------------------------------------------------------------
 29842                                  ;*** fm_link - links UMBs not already linked in
 29843                                  ; -----------------------------------------------------------------------------
 29844                                  ; ENTRY:    None
 29845                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 29846                                  ; ERROR:    None
 29847                                  ; USES:     AX, BX, fm_umb
 29848                                  ; -----------------------------------------------------------------------------
 29849                                  
 29850                                  fm_link:
 29851                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 29852                                  	int	21h			; Current link-state is now in al
 29853                                  
 29854                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 29855                                  	;
 29856                                  	;push	es
 29857                                  	;push	cs
 29858                                  	;pop	es
 29859                                  	;mov	[es:fm_umb],al
 29860                                  	;pop	es
 29861                                  	
 29862                                  	mov	[cs:fm_umb],al
 29863                                  
 29864                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29865                                  	mov	bx,1
 29866                                  	int	21h
 29867                                  	retn
 29868                                  
 29869                                  ; -----------------------------------------------------------------------------
 29870                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 29871                                  ; -----------------------------------------------------------------------------
 29872                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 29873                                  ; EXIT:     None
 29874                                  ; ERROR:    None
 29875                                  ; USES:     AX, BX
 29876                                  ; -----------------------------------------------------------------------------
 29877                                  
 29878                                  fm_unlink:
 29879                                  	xor	bx,bx
 29880                                  	
 29881                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 29882                                  	;
 29883                                  	;push	ds
 29884                                  	;push	cs
 29885                                  	;pop	ds
 29886                                  	;mov	bl,[fm_umb]	
 29887                                  	;pop	ds
 29888                                  	
 29889                                  	mov	bl,[cs:fm_umb]
 29890                                  
 29891                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 29892                                  	int	21h			; so just use that, and call int 21h
 29893                                  	retn
 29894                                  
 29895                                  ; 08/04/2019 - Retro DOS v4.0
 29896                                  
 29897                                  ; -----------------------------------------------------------------------------
 29898                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 29899                                  ; laid out in highvar.inc
 29900                                  ; -----------------------------------------------------------------------------
 29901                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 29902                                  ; EXIT:     ES:SI points to first character in child program name
 29903                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 29904                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 29905                                  ; -----------------------------------------------------------------------------
 29906                                  ; Error codes (in AX if carry set on return):
 29907                                  ;
 29908                                  PV_InvArg	equ	1	; Invalid argument passed
 29909                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 29910                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 29911                                  ;
 29912                                  ; This routine exects ES:SI to point to a string much like the following:
 29913                                  ;    "/S/L:1,200;2 module options"
 29914                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 29915                                  ; required, though that's what this routine is supposed to parse.
 29916                                  ;
 29917                                  optS		equ	'S'	; /S
 29918                                  optL		equ	'L'	; /L:...
 29919                                  ;
 29920                                  ; -----------------------------------------------------------------------------
 29921                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 29922                                  ; a command-line for spawning a child process. For a typical LH command, say,
 29923                                  ;     lh /l:1,1000;2 print/d:lpt2
 29924                                  ; the arguments would look like (one per line):
 29925                                  ;     lh
 29926                                  ;     /l
 29927                                  ;     1
 29928                                  ;     1000
 29929                                  ;     2
 29930                                  ;     print
 29931                                  ;     /d
 29932                                  ;     :lpt2
 29933                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 29934                                  ; arg was the filename. So, inside this routine, we keep a running counter
 29935                                  ; of the number of arguments LH will need to skip in order to get to the
 29936                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 29937                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 29938                                  ; for:
 29939                                  ;    Each /L
 29940                                  ;    Each /S (there should be only one)
 29941                                  ;    Each UMB number (they follow ":" or ";")
 29942                                  ;    Each UMB size   (they follow ",")
 29943                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 29944                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 29945                                  ; -----------------------------------------------------------------------------
 29946                                  
 29947                                  ParseVar:
 29948                                  	;pushreg <di, ds, es>
 29949                                  	push	di
 29950                                  	push	ds
 29951                                  	push	es
 29952                                  
 29953                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 29954                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 29955                                  	cld
 29956                                  
 29957                                  ; ------------------------------------------------
 29958                                  ; PV10--ES:SI = any whitespace on the command-line
 29959                                  ; ------------------------------------------------
 29960                                  
 29961                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 29962                                  	call	isWhite
 29963                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 29964                                  	;cmp	al,'/'
 29965                                  	cmp	al,SWTCH
 29966                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 29967                                  
 29968                                  	dec	si		; Backup--it's now "odule options", and we need
 29969                                  	clc			; that "m" we just read (or whatever it is).
 29970                                  	jmp	short pvX	; Then return with carry clear == we're done.
 29971                                  
 29972                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 29973                                  	;toUpper al		; So we make it upper-case, and...
 29974                                  	and	al,0DFh
 29975                                  	;cmp	al,'S'
 29976                                  	cmp	al,optS		; just read 'S'?
 29977                                  	jne	short pv30
 29978                                  
 29979                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 29980                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 29981                                  
 29982                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 29983                                  	;
 29984                                  	;push	es
 29985                                  	;push	cs
 29986                                  	;pop	es
 29987                                  	;mov	[es:fUmbTiny],1	
 29988                                  	;pop	es
 29989                                  
 29990                                  	mov	byte [cs:fUmbTiny],1
 29991                                  
 29992                                  	jmp	short pv10	; possibly even "/L...".
 29993                                  
 29994                                  pv30:	;cmp	al,'L'
 29995                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 29996                                  	jne	short pvE1		; switch!
 29997                                  
 29998                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 29999                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 30000                                  
 30001                                  	call	parseL
 30002                                  	jnc	short pv10	; If no carry, go back and look for more
 30003                                  
 30004                                  	dec	si		; Else, back up and exit.
 30005                                  	jmp	short pvErr	; AX has already been set by parseL
 30006                                  
 30007                                  pvE1:	;mov	ax,3
 30008                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 30009                                  pvErr:	dec	si
 30010                                  	dec	si
 30011                                  	stc
 30012                                  pvX:	;popreg	<es, ds, di>
 30013                                  	pop	es
 30014                                  	pop	ds
 30015                                  	pop	di
 30016                                  	retn
 30017                                  
 30018                                  ; -----------------------------------------------------------------------------
 30019                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 30020                                  ; -----------------------------------------------------------------------------
 30021                                  ; ENTRY:    ES:SI points to colon
 30022                                  ; EXIT:     ES:SI points to first character not parsed
 30023                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 30024                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 30025                                  ; -----------------------------------------------------------------------------
 30026                                  ; If the string here is terminated with anything other than whitespace or a
 30027                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 30028                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 30029                                  ; makes sure the app /L: is reported as being the culprit.
 30030                                  ; -----------------------------------------------------------------------------
 30031                                  
 30032                                  parseL:
 30033                                  	lodsb
 30034                                  	cmp	al,':'		; Make sure they did /L:
 30035                                  	jne	short plE1	; If they didn't, return with carry set.
 30036                                  
 30037                                  ; ------------------------------------------
 30038                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 30039                                  ; ------------------------------------------
 30040                                  
 30041                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 30042                                  	jc	short plE2	; And error if it's a bad number.
 30043                                  	call	convUMB		; Convert any address to a UMB number
 30044                                  
 30045                                  	mov	cl,al		; Remember the UMB number
 30046                                  	call	stowUMB		; Mark this UMB # as used;
 30047                                  	jc	short plE2	; If it was already marked, it'll error
 30048                                  
 30049                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 30050                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 30051                                  
 30052                                  	lodsb
 30053                                  	cmp	al,';'		; Did "umb;" ?
 30054                                  	je	short pl10	; Yep: go back and get another UMB.
 30055                                  
 30056                                  	call	isWhite		; Did "umb " ?
 30057                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 30058                                  
 30059                                  	call	isEOL		; Did "umb" ?
 30060                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 30061                                  
 30062                                  	;cmp	al,'/'
 30063                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 30064                                  	je	short plSwX	; If so, back up ES:SI one character and return
 30065                                  
 30066                                  	cmp	al,','		; Did "umb," ?
 30067                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 30068                                  
 30069                                  ; --- Read a size -------------------------------------------------------------
 30070                                  
 30071                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 30072                                  	jc	short plE1	; And error if it's a bad size.
 30073                                  
 30074                                  	call	toPara		; Convert from bytes to paragraphs
 30075                                  
 30076                                  	call	stowSiz		; CL still has the UMB number for this routine
 30077                                  
 30078                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 30079                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 30080                                  
 30081                                  	lodsb
 30082                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 30083                                  	je	short pl10	;
 30084                                  
 30085                                  	call	isWhite		; Did it end with whitespace?
 30086                                  	jz	short plX	; If so, we're done here--go back.
 30087                                  
 30088                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 30089                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 30090                                  
 30091                                  	;cmp	al,'/'
 30092                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 30093                                  	je	short plSwX	; If so, again, we're done here.
 30094                                  plE1:	
 30095                                  	;mov	ax,1
 30096                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 30097                                  	dec	si
 30098                                  	stc
 30099                                  	retn
 30100                                  
 30101                                  plE2:	;mov	ax,2
 30102                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 30103                                  	; 12/12/2022
 30104                                  	; cf=1
 30105                                  	;stc
 30106                                  	retn
 30107                                  plSwX:	
 30108                                  	dec	si		; If we hit a '/' character, back up one char
 30109                                  				; so the whitespace checker will see it too.
 30110                                  plX:	; 12/12/2022
 30111                                  	; cf=0
 30112                                  	;clc			; Then just return with carry clear, so
 30113                                  	retn			; ParseVar will go about its business.
 30114                                  
 30115                                  ; -----------------------------------------------------------------------------
 30116                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 30117                                  ; -----------------------------------------------------------------------------
 30118                                  ; ENTRY:    None
 30119                                  ; EXIT:     None
 30120                                  ; ERROR:    None
 30121                                  ; USES:     fm_argc, flags
 30122                                  ; -----------------------------------------------------------------------------
 30123                                  
 30124                                  ;incArgc:
 30125                                  	;push	ax
 30126                                  
 30127                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 30128                                  
 30129                                  	;mov	al,[cs:fm_argc]
 30130                                  
 30131                                  	;inc	al		; Increment it,
 30132                                  
 30133                                  	;;putdata fm_argc, al	; And store it right back.
 30134                                  
 30135                                  	;mov	[cs:fm_argc],al
 30136                                  
 30137                                  	;pop	ax
 30138                                  	;retn
 30139                                  
 30140                                  ; -----------------------------------------------------------------------------
 30141                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 30142                                  ; -----------------------------------------------------------------------------
 30143                                  ; ENTRY:    AL contains character to test
 30144                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 30145                                  ; ERROR:    None
 30146                                  ; USES:     ZF
 30147                                  ; -----------------------------------------------------------------------------
 30148                                  
 30149                                  isEOL:
 30150                                  	cmp	al,0		; Null-terminator
 30151                                  	je	short ieX
 30152                                  	cmp	al,CR ; 0Dh	; Carriage Return
 30153                                  	je	short ieX
 30154                                  	cmp	al,LF ; 0Ah	; LineFeed
 30155                                  ieX:	
 30156                                  	retn
 30157                                  
 30158                                  ; -----------------------------------------------------------------------------
 30159                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 30160                                  ; -----------------------------------------------------------------------------
 30161                                  ; ENTRY:    AL contains character to test
 30162                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 30163                                  ; ERROR:    None
 30164                                  ; USES:     ZF
 30165                                  ; -----------------------------------------------------------------------------
 30166                                  
 30167                                  isWhite:
 30168                                  	cmp	al,' '		; Space
 30169                                  	je	short iwX
 30170                                  	cmp	al,'='		; Equals (treat as whitespace)
 30171                                  	je	short iwX
 30172                                  	cmp	al,tab ; 9	; Tab
 30173                                  iwX:	
 30174                                  	retn
 30175                                  
 30176                                  ; -----------------------------------------------------------------------------
 30177                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 30178                                  ; -----------------------------------------------------------------------------
 30179                                  ; ENTRY:    AL contains UMB number
 30180                                  ; EXIT:     None
 30181                                  ; ERROR:    None
 30182                                  ; USES:     Flags, variables in highvar.inc
 30183                                  ; -----------------------------------------------------------------------------
 30184                                  
 30185                                  unMarkUMB:
 30186                                  	push	ax
 30187                                  	push	bx
 30188                                  	push	di
 30189                                  	push	es
 30190                                  
 30191                                  	push	cs
 30192                                  	pop	es
 30193                                  
 30194                                  	xor	ah,ah
 30195                                  	mov	bx,ax
 30196                                  
 30197                                  	; 19/04/2019
 30198                                  	
 30199                                  	;mov	byte [es:bx+UmbUsed],0
 30200                                  	mov	[es:bx+UmbUsed],ah ; 0
 30201                                  
 30202                                  	cmp	[es:UmbLoad],al
 30203                                  	jne	short umu10
 30204                                  
 30205                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 30206                                  	mov	[es:UmbLoad],ah ; 0
 30207                                  umu10:	
 30208                                  	pop	es
 30209                                  	pop	di
 30210                                  	pop	bx
 30211                                  	pop	ax
 30212                                  	retn
 30213                                  
 30214                                  ; -----------------------------------------------------------------------------
 30215                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 30216                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 30217                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 30218                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 30219                                  ; -----------------------------------------------------------------------------
 30220                                  ; ENTRY:    AL contains UMB number, as specified by the user
 30221                                  ; EXIT:     None
 30222                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 30223                                  ; USES:     AX, Flags, variables in highvar.inc
 30224                                  ; -----------------------------------------------------------------------------
 30225                                  
 30226                                  stowUMB:
 30227                                  	cmp	al,MAXUMB ; 16
 30228                                  	jb	short su10
 30229                                  	stc
 30230                                  	retn			; Ooops-- UMB>=MAXUMB
 30231                                  su10:	
 30232                                  	push	bx
 30233                                  	push	di
 30234                                  	push	si
 30235                                  	push	ds
 30236                                  	push	es
 30237                                  	push	cs
 30238                                  	pop	es
 30239                                  	push	cs
 30240                                  	pop	ds
 30241                                  	
 30242                                  	;cmp	byte [UmbLoad],0FFh
 30243                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 30244                                  	jne	short su20
 30245                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 30246                                  su20:	
 30247                                  	or	al,al		; If they gave UMB 0, there's really nothing
 30248                                  	jz	short su30	; that we should do here.
 30249                                  
 30250                                  	mov	bl,al
 30251                                  	xor	bh,bh
 30252                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 30253                                  
 30254                                  	xchg	[es:bx+UmbUsed],al
 30255                                  
 30256                                  	or	al,al		; If it was already 1, then al==1... and that
 30257                                  	jz	short su30	; means an error.
 30258                                  
 30259                                  	stc			; OOOPS!  This one's been used before.  :(
 30260                                  su30:	
 30261                                  	pop	es
 30262                                  	pop	ds
 30263                                  	pop	si
 30264                                  	pop	di
 30265                                  	pop	bx
 30266                                  	retn
 30267                                  
 30268                                  ; -----------------------------------------------------------------------------
 30269                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 30270                                  ; -----------------------------------------------------------------------------
 30271                                  ; ENTRY:    CL contains UMB number, AX contains size
 30272                                  ; EXIT:     None
 30273                                  ; ERROR:    None
 30274                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 30275                                  ; -----------------------------------------------------------------------------
 30276                                  
 30277                                  ; 13/05/2019
 30278                                  
 30279                                  stowSiz:
 30280                                  	push	bx
 30281                                  	;push	di ; ?
 30282                                  	push	es
 30283                                  
 30284                                  	push	cs
 30285                                  	pop	es	
 30286                                  
 30287                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 30288                                  	mov	bh,0			;     bx==UMB number, AX==size
 30289                                  	shl	bl,1			;     bx==offset into array, AX=size
 30290                                  	mov	[es:bx+UmbSize],ax	; Store the size
 30291                                  	
 30292                                  	pop	es
 30293                                  	;pop	di ; ?
 30294                                  	pop	bx
 30295                                  
 30296                                  	retn
 30297                                  
 30298                                  ; -----------------------------------------------------------------------------
 30299                                  ;*** toDigit - converts a character-digit to its binary counterpart
 30300                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 30301                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 30302                                  ; A-F are considered valid iff gnradix is 16.
 30303                                  ; -----------------------------------------------------------------------------
 30304                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 30305                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 30306                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 30307                                  ; USES:     CL, Flags
 30308                                  ; -----------------------------------------------------------------------------
 30309                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30310                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30311                                  ; will be 10 or 16.
 30312                                  ; -----------------------------------------------------------------------------
 30313                                  
 30314                                  gnradix:
 30315                                  	dw	0		; Must be a word--16x16 multiplication
 30316                                  
 30317                                  toDigit:
 30318                                  	cmp	word [cs:gnradix],16
 30319                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 30320                                  
 30321                                  toDigit_hex:
 30322                                  	cmp	cl,'a'	; 61h
 30323                                  	jb	short td10
 30324                                  	cmp	cl,'f'	; 66h
 30325                                  	ja	short tdE	; Nothing valid above 'z' at all...
 30326                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 30327                                  	;clc			; <- CLC is implicit from last SUB
 30328                                  	retn
 30329                                  td10:	
 30330                                  	cmp	cl,'A'  ; 41h
 30331                                  	jb	short td20	; Below 'A'?  Not a letter...
 30332                                  	cmp	cl,'F'	; 46h
 30333                                  	ja	short tdE	; Above 'F'?  Not a digit.
 30334                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 30335                                  	;clc			; <- CLC is implicit from last SUB
 30336                                  	retn
 30337                                  toDigit_dec:
 30338                                  td20:	
 30339                                  	cmp	cl,'0'		; If less than zero,
 30340                                  	;jb	short tdE	; Done.
 30341                                  	jb	short tdEr ; 08/04/2019
 30342                                  	cmp	cl,'9'		; Or, if greater than nine,
 30343                                  	ja	short tdE	; Done.
 30344                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 30345                                  	;clc			; <- CLC is implicit from last SUB
 30346                                  	retn
 30347                                  tdE:	
 30348                                  	stc
 30349                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 30350                                  	retn
 30351                                  
 30352                                  ; -----------------------------------------------------------------------------
 30353                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 30354                                  ; -----------------------------------------------------------------------------
 30355                                  ; ENTRY:    ES:SI points to an ascii string to scan
 30356                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 30357                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 30358                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 30359                                  ; -----------------------------------------------------------------------------
 30360                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 30361                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 30362                                  ; will be 10 or 16.
 30363                                  ; -----------------------------------------------------------------------------
 30364                                  
 30365                                  ; 08/04/2019 - Retro DOS v4.0
 30366                                  
 30367                                  GetXNum:
 30368                                  	;pushreg <bx, cx, ds>
 30369                                  	push	bx
 30370                                  	push	cx
 30371                                  	push	ds
 30372                                  
 30373                                  	cld
 30374                                  	xor	ax,ax
 30375                                  	xor	bx,bx
 30376                                  	xor	cx,cx
 30377                                  	xor	dx,dx			; Start with 0 (makes sense)
 30378                                  
 30379                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 30380                                  
 30381                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 30382                                  	;call	toDigit
 30383                                  	call	toDigit_dec
 30384                                  	jc	short gxnE		; If it's not a digit, leave now.
 30385                                  
 30386                                  	or	cl,cl
 30387                                  	jnz	short gxn20		; Doesn't have '0x'
 30388                                  	mov	cl,[es:si+1]
 30389                                  	cmp	cl,'x'			; Either 'x'...
 30390                                  	je	short gxn10
 30391                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 30392                                  	jne	short gxn20
 30393                                  
 30394                                  gxn10:	
 30395                                  	mov	word [cs:gnradix], 16
 30396                                  	inc	si			; Since we read "0x", march over it.
 30397                                  	inc	si
 30398                                  
 30399                                  ; ------------------------------------------------------
 30400                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 30401                                  ;        DX:AX = current total
 30402                                  ;        BX    = 0
 30403                                  ;        CH    = 0
 30404                                  ; ------------------------------------------------------
 30405                                  
 30406                                  gxn20:	
 30407                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 30408                                  	inc	si
 30409                                  
 30410                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 30411                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 30412                                  
 30413                                  	call	mul32		; Multiply DX:AX by gnradix
 30414                                  	jc	short gxnX	; (if it's too big, error out)
 30415                                  
 30416                                  	add	ax,cx		; Add the digit
 30417                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 30418                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 30419                                  	;jmp	short gxn20
 30420                                  	jnc	short gxn20
 30421                                  gxnE:	
 30422                                  	;stc			; In this case, we need to set the carry
 30423                                  	jmp	short gxnX	; and leave--there were no digits given.
 30424                                  gxnQ:	
 30425                                  	dec	si		; Don't read in the offensive character.
 30426                                  	clc			; And clear carry, so they know it's okay.
 30427                                  gxnX:	
 30428                                  	pop	ds
 30429                                  	pop	cx
 30430                                  	pop	bx
 30431                                  	retn
 30432                                  
 30433                                  ; -----------------------------------------------------------------------------
 30434                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 30435                                  ; -----------------------------------------------------------------------------
 30436                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 30437                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 30438                                  ; ERROR:   Carry set if number was too large
 30439                                  ; USES:    Flags, AX, DX
 30440                                  ; -----------------------------------------------------------------------------
 30441                                  
 30442                                  mul32:
 30443                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 30444                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 30445                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 30446                                  	jc	short m32E	; Too big?
 30447                                  
 30448                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 30449                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 30450                                  
 30451                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 30452                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 30453                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30454                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 30455                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 30456                                  	retn
 30457                                  m32E:	
 30458                                  	pop	ax
 30459                                  	retn
 30460                                  
 30461                                  ; -----------------------------------------------------------------------------
 30462                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 30463                                  ; -----------------------------------------------------------------------------
 30464                                  ; ENTRY:   DX:AX = the number to be divided
 30465                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 30466                                  ; ERROR:   None
 30467                                  ; USES:    Flags, AX, DX
 30468                                  ; -----------------------------------------------------------------------------
 30469                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 30470                                  ;       can't ensure a 386 host machine. Sorry.
 30471                                  ; -----------------------------------------------------------------------------
 30472                                  
 30473                                  toPara:
 30474                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 30475                                  
 30476                                  	mov	cl,4		;
 30477                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 30478                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 30479                                  	mov	cl,12
 30480                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 30481                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 30482                                  
 30483                                  	pop	cx
 30484                                  	retn
 30485                                  
 30486                                  ; -----------------------------------------------------------------------------
 30487                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 30488                                  ; -----------------------------------------------------------------------------
 30489                                  ; ENTRY:  Nothing
 30490                                  ; EXIT:   AX contains 0x9FFF for most systems
 30491                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30492                                  ; USES:   Flags, AX
 30493                                  ; -----------------------------------------------------------------------------
 30494                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 30495                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 30496                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 30497                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 30498                                  ; -----------------------------------------------------------------------------
 30499                                  
 30500                                  UmbHead:
 30501                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 30502                                  
 30503                                  	;push	si ; ?
 30504                                  	;push	ds ; ? 
 30505                                  	;push	es
 30506                                  	;push	bx ; *	
 30507                                  
 30508                                  	; 09/04/2019
 30509                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30510                                  
 30511                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30512                                  	int	21h
 30513                                  
 30514                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 30515                                  	cmp	ax,0FFFFh
 30516                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 30517                                  
 30518                                  	clc				; Else, it isn't (CLC done by prev cmp)
 30519                                  	;jmp	short uhX
 30520                                  	; 12/12/2022
 30521                                  	retn
 30522                                  uhE:	
 30523                                  	stc
 30524                                  uhX:	
 30525                                  	;pop	bx ; *
 30526                                  	;pop	es
 30527                                  	;pop	ds ; ?
 30528                                  	;pop	si ; ?
 30529                                  	retn
 30530                                  
 30531                                  ; -----------------------------------------------------------------------------
 30532                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 30533                                  ; -----------------------------------------------------------------------------
 30534                                  ; ENTRY:  ES:0 should point to a valid MCB
 30535                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 30536                                  ; USES:   Flags
 30537                                  ; -----------------------------------------------------------------------------
 30538                                  
 30539                                  isSysMCB:
 30540                                  	;push	ax
 30541                                  
 30542                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30543                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30544                                  	;je	short ism10
 30545                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 30546                                  	;;je	short ism10
 30547                                  	;;jmp	short ismX		; Anything else isn't.
 30548                                  	;jne	short ismX
 30549                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 30550                                  	jne	short ismX 
 30551                                  ism10:	
 30552                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 30553                                  	;cmp	ax,'SC' ; 4353h
 30554                                  	cmp	word [es:ARENA.NAME],'SC'
 30555                                  ismX:	
 30556                                  	;pop	ax
 30557                                  	retn
 30558                                  
 30559                                  ; 09/04/2019 - Retro DOS v4.0
 30560                                  
 30561                                  ; -----------------------------------------------------------------------------
 30562                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 30563                                  ; -----------------------------------------------------------------------------
 30564                                  ; ENTRY:  AX contains a segment address
 30565                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 30566                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 30567                                  ; USES:   Flags, AX
 30568                                  ; -----------------------------------------------------------------------------
 30569                                  ; An address in the following areas is treated as:
 30570                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 30571                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 30572                                  ;      ...
 30573                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 30574                                  ; -----------------------------------------------------------------------------
 30575                                  
 30576                                  AddrToUmb:
 30577                                  	push	cx
 30578                                  	push	dx
 30579                                  	push	es
 30580                                  
 30581                                  	mov	dx,ax		; DX = address to search for
 30582                                  
 30583                                  	call	UmbHead		; AX = first segment
 30584                                  	jc	short atuE	; If it couldn't get it, error out.
 30585                                  
 30586                                  	; 14/08/2023
 30587                                  	;mov	es,ax ; *	; ES = first UMB segment
 30588                                  	xor	cx,cx ; 0	; Pretend we're on UMB 0 for now... (cx = UMB#)
 30589                                  
 30590                                  	; 22/07/2023
 30591                                  atu10:
 30592                                  	mov	es,ax ; * ; ** ; 14/08/2023
 30593                                  ; ----------------------------------------
 30594                                  ; ATU10--ES - Current MCB address
 30595                                  ;        DX - Address given for conversion
 30596                                  ;        CX - Current UMB #
 30597                                  ; ----------------------------------------
 30598                                  
 30599                                  ;atu10:	
 30600                                  	;mov	ax,es ; * ; 14/08/2023
 30601                                          cmp	ax,dx		; Present segment >= given segment?
 30602                                  	jae	short atuX	; Yep--done.
 30603                                  
 30604                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 30605                                  	jnz	short atu20
 30606                                  
 30607                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 30608                                  atu20:	
 30609                                  	;mov	al,[es:ARENA.SIGNATURE]
 30610                                  	;cmp	al,arena_signature_end  ; 'Z'
 30611                                  	; 14/08/2023
 30612                                  	; ax = es
 30613                                  	;mov	ax,es ; **
 30614                                  	add	ax,[es:ARENA.SIZE]
 30615                                  	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end
 30616                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 30617                                  
 30618                                  	;NextMCB es,ax
 30619                                  
 30620                                  	;mov	ax,es ; **
 30621                                  	;;add	ax,[es:3]
 30622                                  	;add	ax,[es:ARENA.SIZE]
 30623                                  	inc	ax
 30624                                  	; 14/08/2023
 30625                                  	;mov	es,ax ; *
 30626                                  	jmp	short atu10
 30627                                  
 30628                                  ; -----------------------------------------------------------------------------
 30629                                  ; if we get to atu30, they specified a number that was past the last MCB.
 30630                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 30631                                  ; -----------------------------------------------------------------------------
 30632                                  
 30633                                  atu30:	
 30634                                  	; 14/08/2023
 30635                                  	; ax = es + [es:ARENA.SIZE] 
 30636                                  	;mov	ax,es ; **
 30637                                  	;add	ax,[es:ARENA.SIZE] ; **
 30638                                  	cmp	ax,dx		; Present >= given?
 30639                                  	jae	short atuX	; Yep! It _was_ inside.
 30640                                  atuE:	
 30641                                  	xor	cx,cx ; 0	; Else, fall through with UMB # == -1
 30642                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 30643                                  atuX:	
 30644                                  	mov	ax,cx		; Return the UMB number in AX
 30645                                  	
 30646                                  	pop	es	
 30647                                  	pop	dx
 30648                                  	pop	cx
 30649                                  	retn
 30650                                  
 30651                                  ; -----------------------------------------------------------------------------
 30652                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 30653                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 30654                                  ; address rather than a UMB number... and use that address to look up a UMB.
 30655                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 30656                                  ; -----------------------------------------------------------------------------
 30657                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 30658                                  ; EXIT:   AX will contain a UMB number
 30659                                  ; ERROR:  None
 30660                                  ; USES:   Flags, AX
 30661                                  ; -----------------------------------------------------------------------------
 30662                                  
 30663                                  convUMB:
 30664                                  	cmp	word [cs:gnradix],16
 30665                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 30666                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 30667                                  ;cmp	ax,0FFFFh
 30668                                  	;jne	short cu10
 30669                                  	;inc	ax		; If too high, ignore it (make it conventional)
 30670                                  	; 14/08/2023
 30671                                  	inc	ax
 30672                                  	jz	short cu10	; If too high, ignore it (make it conventional)
 30673                                  	dec	ax
 30674                                  cu10:	
 30675                                  	retn
 30676                                  
 30677                                  ; -----------------------------------------------------------------------------
 30678                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 30679                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 30680                                  ; of the usual HIGH_FIRST.  See the code.
 30681                                  ; -----------------------------------------------------------------------------
 30682                                  ; ENTRY:  None
 30683                                  ; EXIT:   None
 30684                                  ; ERROR:  None
 30685                                  ; USES:   Flags, fm_umb, fm_strat
 30686                                  ; -----------------------------------------------------------------------------
 30687                                  
 30688                                  setUMBs:
 30689                                  	push	ax
 30690                                  	push	bx
 30691                                  	call	fm_link
 30692                                  	pop	bx
 30693                                  	pop	ax
 30694                                  	retn
 30695                                  
 30696                                  ; -----------------------------------------------------------------------------
 30697                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 30698                                  ; -----------------------------------------------------------------------------
 30699                                  ; ENTRY:  None
 30700                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 30701                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 30702                                  ; ERROR:  None
 30703                                  ; USES:   Flags, fm_strat, fm_umb
 30704                                  ; -----------------------------------------------------------------------------
 30705                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 30706                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 30707                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 30708                                  ; such that the load UMB is too small, and shouldn't be used.
 30709                                  ; -----------------------------------------------------------------------------
 30710                                  
 30711                                  loadLow:
 30712                                  	;push	ds
 30713                                  	;push	cs		; Point DS into appropriate data segment
 30714                                  	;pop	ds	
 30715                                  
 30716                                  	;mov	al,[UmbLoad]
 30717                                  	mov	al,[cs:UmbLoad]
 30718                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 30719                                  	jne	short ll10
 30720                                  
 30721                                  	stc
 30722                                  ll15:
 30723                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 30724                                  	;stc
 30725                                  	;jmp	short llX
 30726                                  	retn
 30727                                  ll10:	
 30728                                  	or	al,al		; AL=the load UMB: Is it == 0?
 30729                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 30730                                  
 30731                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 30732                                  	retn
 30733                                  
 30734                                  	;mov	al,1
 30735                                  	;clc
 30736                                  ;llX:
 30737                                  	;pop	ds		; Return DS to where it was
 30738                                  	;retn
 30739                                  
 30740                                  ; -----------------------------------------------------------------------------
 30741                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 30742                                  ; -----------------------------------------------------------------------------
 30743                                  ; ENTRY:  None
 30744                                  ; EXIT:   None
 30745                                  ; ERROR:  None
 30746                                  ; USES:   Flags, fm_strat, fm_umb
 30747                                  ; -----------------------------------------------------------------------------
 30748                                  
 30749                                  HideUMBs:
 30750                                  	push	ax
 30751                                  	push	cx
 30752                                  	push	ds
 30753                                  	push	es
 30754                                  
 30755                                  	call	UmbTest		; See if we REALLY linked in anything...
 30756                                  	jc	short husX	; ...if not, there's nothing for us to do.
 30757                                  
 30758                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 30759                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 30760                                  
 30761                                  	;putdata fInHigh,1	; Remember that we're now running high
 30762                                  	mov	byte [cs:fInHigh],1
 30763                                  
 30764                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 30765                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 30766                                  
 30767                                  	cmp	al,UNSPECIFIED	; If they didn't,
 30768                                  	je	short husX	; then we shouldn't do this loop:
 30769                                  
 30770                                  	xor	cx,cx
 30771                                  
 30772                                  ; -----------------------------------------------
 30773                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 30774                                  ; -----------------------------------------------
 30775                                  
 30776                                  hus10:	inc	cx		; For each UMB:
 30777                                  	cmp	cx,MAXUMB ; 16
 30778                                  	jae	short hus20
 30779                                  
 30780                                  	mov	al,cl		; (stopping as soon as we're outside of the
 30781                                  	push	es
 30782                                  	call	findUMB		; valid range of UMBs)
 30783                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 30784                                  	jc	short hus20
 30785                                  
 30786                                  	call	_hideUMB_	; hide what we need to hide.
 30787                                  
 30788                                  	jmp	short hus10
 30789                                  hus20:	
 30790                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 30791                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 30792                                  
 30793                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 30794                                  	jnz	short husX	; If not, we're done.
 30795                                  
 30796                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 30797                                  husX:	
 30798                                  	pop	es
 30799                                  	pop	ds
 30800                                  	pop	cx
 30801                                  	pop	ax
 30802                                  	retn
 30803                                  
 30804                                  ; -----------------------------------------------------------------------------
 30805                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 30806                                  ; -----------------------------------------------------------------------------
 30807                                  ; ENTRY:  None
 30808                                  ; EXIT:   AL == load UMB
 30809                                  ; ERROR:  None
 30810                                  ; USES:   Flags, AX
 30811                                  ; -----------------------------------------------------------------------------
 30812                                  
 30813                                  ;GetLoadUMB:
 30814                                  ;	;getdata al, UmbLoad
 30815                                  ;	push	ds
 30816                                  ;	push	cs
 30817                                  ;	pop	ds
 30818                                  ;	mov	al,[UmLoad]
 30819                                  ;	pop	ds
 30820                                  ;	retn
 30821                                  
 30822                                  ; -----------------------------------------------------------------------------
 30823                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 30824                                  ; -----------------------------------------------------------------------------
 30825                                  ; ENTRY:  None
 30826                                  ; EXIT:   AX == load UMB minimum size
 30827                                  ; ERROR:  None
 30828                                  ; USES:   Flags, AX
 30829                                  ; -----------------------------------------------------------------------------
 30830                                  
 30831                                  GetLoadSize:
 30832                                  	; 09/04/2019 - Retro DOS v4.0
 30833                                  	mov	al,[cs:UmbLoad]
 30834                                  	jmp	short GetSize
 30835                                  
 30836                                  	;push	bx
 30837                                  	;;push	si
 30838                                  	;push	ds
 30839                                  	;push	cs
 30840                                  	;pop	ds
 30841                                  
 30842                                  	;mov	al,[UmbLoad]
 30843                                  
 30844                                  	;xor	ah,ah			;    ax==UMB
 30845                                  	;mov	bx,UmbSize		;    bx==array
 30846                                  	;shl	al,1	                ;    ax==offset
 30847                                  	;;add	ax,bx			;    ax==element index
 30848                                  	;;mov	si,ax			; ds:si==element index
 30849                                  
 30850                                  	;;lodsw				;    ax==size
 30851                                  
 30852                                  	;add	bx,ax
 30853                                  	;mov	ax,[bx]
 30854                                  
 30855                                  	;pop	ds
 30856                                  	;;pop	si
 30857                                  	;pop	bx
 30858                                  	;retn
 30859                                  
 30860                                  ; -----------------------------------------------------------------------------
 30861                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 30862                                  ; -----------------------------------------------------------------------------
 30863                                  ; ENTRY:  AL == a UMB number
 30864                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 30865                                  ; ERROR:  None
 30866                                  ; USES:   Flags, AX
 30867                                  ; -----------------------------------------------------------------------------
 30868                                  
 30869                                  GetSize:
 30870                                  	; 09/04/2019 - Retro DOS v4.0
 30871                                  
 30872                                  	push	bx
 30873                                  	;push	si
 30874                                  	;push	ds
 30875                                  	;push	cs
 30876                                  	;pop	ds
 30877                                  
 30878                                  	xor	ah,ah			;    ax==UMB
 30879                                  	mov	bx,UmbSize		;    bx==array
 30880                                  	shl	al,1	                ;    ax==offset
 30881                                  	;add	ax,bx			;    ax==element index
 30882                                  	;mov	si,ax			; ds:si==element index
 30883                                  
 30884                                  	;lodsw				;    ax==size
 30885                                  
 30886                                  	add	bx,ax
 30887                                  	;mov	ax,[bx]
 30888                                  	mov	ax,[cs:bx]
 30889                                  
 30890                                  	;pop	ds
 30891                                  	;pop	si
 30892                                  	pop	bx
 30893                                  	retn
 30894                                  
 30895                                  ; -----------------------------------------------------------------------------
 30896                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 30897                                  ; -----------------------------------------------------------------------------
 30898                                  ; ENTRY:   AL == new load UMB
 30899                                  ; EXIT:    None
 30900                                  ; ERROR:   None
 30901                                  ; USES:    Flags, AX
 30902                                  ; -----------------------------------------------------------------------------
 30903                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 30904                                  ;          time you would ever need this, so that's okay.
 30905                                  ; -----------------------------------------------------------------------------
 30906                                  
 30907                                  ;StoLoadUMB:
 30908                                  ;	;putdata UmbLoad, al
 30909                                  ;	push	es
 30910                                  ;	push	cs
 30911                                  ;	pop	es
 30912                                  ;	mov	[es:UmbLoad],al
 30913                                  ;	pop	es
 30914                                  ;	retn
 30915                                  
 30916                                  ; -----------------------------------------------------------------------------
 30917                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 30918                                  ; -----------------------------------------------------------------------------
 30919                                  ; ENTRY:  AL == new load size
 30920                                  ; EXIT:   None
 30921                                  ; ERROR:  None
 30922                                  ; USES:   Flags, AX
 30923                                  ; -----------------------------------------------------------------------------
 30924                                  
 30925                                  StoLoadSize:
 30926                                  	push	dx
 30927                                  
 30928                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 30929                                  	;
 30930                                  	;push	ds
 30931                                  	;push	cs
 30932                                  	;pop	ds
 30933                                  	;mov	dl,[UmbLoad]
 30934                                  	;pop	ds	
 30935                                  
 30936                                  	mov	dl,[cs:UmbLoad]
 30937                                  
 30938                                  	cmp	dl,UNSPECIFIED ; 0FFh
 30939                                  	je	short sls10
 30940                                  
 30941                                  	call	stowSiz			; We've got a function to do just this
 30942                                  sls10:	
 30943                                  	pop	dx
 30944                                  	retn
 30945                                  
 30946                                  ; -----------------------------------------------------------------------------
 30947                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 30948                                  ; -----------------------------------------------------------------------------
 30949                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 30950                                  ; EXIT:     None; free elements in UMB marked as hidden
 30951                                  ; ERROR:    None
 30952                                  ; USES:     Flags
 30953                                  ; -----------------------------------------------------------------------------
 30954                                  
 30955                                  hideUMB:
 30956                                  	push	ax
 30957                                  	push	es
 30958                                  
 30959                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 30960                                  	jc	short huX
 30961                                  
 30962                                  ; ------------------------------------------------
 30963                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 30964                                  ;            we're not in the same UMB, so exit.
 30965                                  ; ------------------------------------------------
 30966                                  
 30967                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30968                                  	jz	short huX	; If it is, we've finished the UMB.
 30969                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 30970                                  	or	word [es:ARENA.OWNER],0
 30971                                  	jnz	short hu20
 30972                                  
 30973                                  	call	hideMCB
 30974                                  hu20:	
 30975                                  	mov	al,[es:ARENA.SIGNATURE]
 30976                                  	cmp	al,arena_signature_end  ;'Z'
 30977                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 30978                                  
 30979                                  	;NextMCB es, ax		; Go on forward.
 30980                                  	mov     ax,es
 30981                                  	;add	ax,[es:3]
 30982                                  	add     ax,[es:ARENA.SIZE]
 30983                                  	inc     ax
 30984                                  	mov     es,ax
 30985                                  
 30986                                  	jmp	short hu10
 30987                                  huX:	
 30988                                  	pop	es
 30989                                  	pop	ax
 30990                                  	retn
 30991                                  
 30992                                  ; -----------------------------------------------------------------------------
 30993                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 30994                                  ; -----------------------------------------------------------------------------
 30995                                  ; ENTRY:    None
 30996                                  ; EXIT:     ZF set if user DIDN'T specify /S
 30997                                  ; ERROR:    None
 30998                                  ; USES:     Flags
 30999                                  ; -----------------------------------------------------------------------------
 31000                                  
 31001                                  isTiny:
 31002                                  	push	ax
 31003                                  
 31004                                  	;getdata al, fUmbTiny
 31005                                  	;
 31006                                  	;push	ds
 31007                                  	;push	cs
 31008                                  	;pop	ds
 31009                                  	;mov	al,[fUmbTiny]
 31010                                  	;pop	ds
 31011                                  
 31012                                  	mov	al,[cs:fUmbTiny]		
 31013                                  
 31014                                  	or	al,al
 31015                                  	pop	ax
 31016                                  	retn
 31017                                  
 31018                                  ; -----------------------------------------------------------------------------
 31019                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 31020                                  ; -----------------------------------------------------------------------------
 31021                                  ; ENTRY:    ES:0 should point to an MCB
 31022                                  ; EXIT:     ZF set if MCB is free, else !ZF
 31023                                  ; ERROR:    None
 31024                                  ; USES:     Flags
 31025                                  ; -----------------------------------------------------------------------------
 31026                                  
 31027                                  ;isFreeMCB:
 31028                                  ;	or	word [es:ARENA.OWNER],0
 31029                                  ;	retn
 31030                                  
 31031                                  ; -----------------------------------------------------------------------------
 31032                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 31033                                  ; -----------------------------------------------------------------------------
 31034                                  ; ENTRY:    ES:0 should point to an MCB
 31035                                  ; EXIT:     None; MCB marked as HIDDEN
 31036                                  ; ERROR:    None
 31037                                  ; USES:     None
 31038                                  ; -----------------------------------------------------------------------------
 31039                                  
 31040                                  hideMCB:
 31041                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 31042                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 31043                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 31044                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 31045                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 31046                                  	retn
 31047                                  
 31048                                  ; -----------------------------------------------------------------------------
 31049                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 31050                                  ; -----------------------------------------------------------------------------
 31051                                  ; ENTRY:    ES:0 should point to an MCB
 31052                                  ; EXIT:     None; MCB marked as FREE
 31053                                  ; ERROR:    None
 31054                                  ; USES:     None
 31055                                  ; -----------------------------------------------------------------------------
 31056                                  
 31057                                  unHideMCB:
 31058                                  	push	ax
 31059                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 31060                                  	mov	ax,'  ' ; 2020h
 31061                                  	mov	[es:ARENA.NAME+0],ax
 31062                                  	mov	[es:ARENA.NAME+2],ax
 31063                                  	mov	[es:ARENA.NAME+4],ax
 31064                                  	mov	[es:ARENA.NAME+6],ax
 31065                                  	pop	ax
 31066                                  	retn
 31067                                  
 31068                                  ; -----------------------------------------------------------------------------
 31069                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 31070                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 31071                                  ; -----------------------------------------------------------------------------
 31072                                  ; ENTRY:    AL should be to a valid UMB number
 31073                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 31074                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 31075                                  ; USES:     Flags, ES
 31076                                  ; -----------------------------------------------------------------------------
 31077                                  
 31078                                  findUMB:
 31079                                  	push	ax
 31080                                  	push	cx
 31081                                  	push	dx
 31082                                  
 31083                                  	xor	ah,ah		; Zap ah, so al==ax
 31084                                  
 31085                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 31086                                  
 31087                                  	call	UmbHead		; Returns first UMB segment in AX
 31088                                  	mov	es,ax
 31089                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31090                                  
 31091                                  ; ---------------------------------------------
 31092                                  ; FU10--CX - This UMB number; 0 == conventional
 31093                                  ;       DX - The UMB number they're looking for
 31094                                  ;       ES - The current MCB address
 31095                                  ; ---------------------------------------------
 31096                                  
 31097                                  fu10:	
 31098                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 31099                                  	je	short fuX	; searching for--so exit.
 31100                                  
 31101                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31102                                  	jnz	short fu20
 31103                                  
 31104                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31105                                  fu20:	
 31106                                  	mov	al,[es:ARENA.SIGNATURE]
 31107                                  	cmp	al,arena_signature_end ; 'Z'
 31108                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 31109                                  
 31110                                  	;NextMCB es, ax		; Go on forward.
 31111                                  	mov     ax,es
 31112                                  	;add	ax,[es:3]
 31113                                  	add     ax,[es:ARENA.SIZE]
 31114                                  	inc     ax
 31115                                  	mov     es,ax
 31116                                  
 31117                                  	jmp	short fu10
 31118                                  fuE:	
 31119                                  	stc
 31120                                  fuX:
 31121                                  	pop	dx
 31122                                  	pop	cx
 31123                                  	pop	ax		; The address is already in ES.
 31124                                  	retn
 31125                                  
 31126                                  ; -----------------------------------------------------------------------------
 31127                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 31128                                  ; -----------------------------------------------------------------------------
 31129                                  ; ENTRY:    AL should be to a valid UMB number
 31130                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 31131                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 31132                                  ; USES:     Flags, ES
 31133                                  ; -----------------------------------------------------------------------------
 31134                                  
 31135                                  BigFree:
 31136                                  	push	bx
 31137                                  	push	cx
 31138                                  
 31139                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 31140                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 31141                                  
 31142                                  	xor	bx,bx			; Segment address of largest free MCB
 31143                                  	xor	cx,cx			; Size of largest free MCB
 31144                                  
 31145                                  ; ---------------------------------------------
 31146                                  ; BF10--ES - Current MCB address
 31147                                  ;       BX - Address of largest free MCB so far
 31148                                  ;       CX - Size of largest free MCB so far
 31149                                  ; ---------------------------------------------
 31150                                  
 31151                                  bf10:	
 31152                                  	call	isSysMCB		; If we've left the MCB, we're done.
 31153                                  	jz	short bf30
 31154                                  
 31155                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 31156                                  	or	word [es:ARENA.OWNER],0
 31157                                  	jnz	short bf20
 31158                                  
 31159                                  	mov	ax,[es:ARENA.SIZE]
 31160                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 31161                                  	cmp	cx,ax
 31162                                  	jg	short bf20		; Unless we're bigger,
 31163                                  
 31164                                  	mov	bx,es			; Store this new element's address,
 31165                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 31166                                  	mov	cx,ax
 31167                                  
 31168                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 31169                                  	cmp	al,arena_signature_end	; 'Z'
 31170                                  	jz	short bf30		; 'Z' means this was the last MCB.
 31171                                  
 31172                                  	;NextMCB es,ax		; Go on forward.
 31173                                  	mov     ax,es
 31174                                  	;add	ax,[es:3]
 31175                                  	add     ax,[es:ARENA.SIZE]
 31176                                  	inc     ax
 31177                                  	mov     es,ax
 31178                                  
 31179                                  	jmp	short bf10
 31180                                  
 31181                                  bf30:	mov	es,bx			; Return the address
 31182                                  	mov	ax,cx			; Return the size
 31183                                  	or	bx,bx
 31184                                  	jnz	short bfX		; (if size==0, there's nothing free)
 31185                                  bfE:	
 31186                                  	stc
 31187                                  bfX:
 31188                                  	pop	cx
 31189                                  	pop	bx
 31190                                  	retn
 31191                                  
 31192                                  ; -----------------------------------------------------------------------------
 31193                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 31194                                  ; -----------------------------------------------------------------------------
 31195                                  ; ENTRY:    AL should be to a valid UMB number
 31196                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 31197                                  ; ERROR:    None
 31198                                  ; USES:     Flags
 31199                                  ; -----------------------------------------------------------------------------
 31200                                  
 31201                                  isSpecified:
 31202                                  	push	ax
 31203                                  
 31204                                  	xor	bh,bh
 31205                                  	mov	bl,al
 31206                                  
 31207                                  	;getdata al, DS:UmbUsed[bx]
 31208                                  	;
 31209                                  	;push	ds
 31210                                  	;push	cs
 31211                                  	;pop	ds
 31212                                  	;mov	al,[bx+UmbUsed]
 31213                                  	;pop	ds
 31214                                  	
 31215                                  	mov	al,[cs:bx+UmbUsed]
 31216                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 31217                                  
 31218                                  	pop	ax
 31219                                  	retn
 31220                                  
 31221                                  ; -----------------------------------------------------------------------------
 31222                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 31223                                  ; -----------------------------------------------------------------------------
 31224                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 31225                                  ; EXIT:     None; MCB broken if carry clear
 31226                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 31227                                  ; USES:     Flags
 31228                                  ; -----------------------------------------------------------------------------
 31229                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 31230                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 31231                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 31232                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 31233                                  ; minimum for performing a split.
 31234                                  ; -----------------------------------------------------------------------------
 31235                                  
 31236                                  MIN_SPLIT_SIZE	equ	20h
 31237                                  
 31238                                  shrinkMCB:
 31239                                  	;pushreg <bx, cx, es>
 31240                                  	push	bx
 31241                                  	push	cx
 31242                                  	push	es
 31243                                  
 31244                                  	mov	bx,ax			; Move things around... and
 31245                                  	mov	ax,es			; save this one for later.
 31246                                  
 31247                                  	mov	cx,[es:ARENA.SIZE]
 31248                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 31249                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 31250                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 31251                                  	; 18/12/2022
 31252                                  	cmp	cx,bx
 31253                                  	jb	short smE ; (*)
 31254                                  
 31255                                  	mov	dl,[es:ARENA.SIGNATURE]
 31256                                  	mov	cx,[es:ARENA.SIZE]
 31257                                  
 31258                                  	mov	[es:ARENA.SIZE],bx
 31259                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 31260                                  
 31261                                  	add	ax,bx
 31262                                  	inc	ax
 31263                                  	mov	es,ax			; Move to new arena area
 31264                                  
 31265                                  	mov	ax,cx
 31266                                  	sub	ax,bx
 31267                                  	; 12/12/2022
 31268                                  	; ax > 0
 31269                                  	dec	ax			; And prepare the new size
 31270                                  
 31271                                  	; 18/12/2022
 31272                                  	mov	[es:ARENA.SIGNATURE],dl
 31273                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 31274                                  	mov	[es:ARENA.SIZE],ax
 31275                                  	;mov	ax,'  ' ; 2020h
 31276                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 31277                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 31278                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 31279                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 31280                                  
 31281                                  	; 18/12/2022
 31282                                  	call	freeMCB	; (**)
 31283                                  
 31284                                  	; 12/12/2022
 31285                                  	; cf=0
 31286                                  	;clc
 31287                                  	; 18/12/2022
 31288                                  	;jmp	short smX
 31289                                  smE:	
 31290                                  	; 18/12/2022
 31291                                  	; cf=1 (*)
 31292                                  	;stc
 31293                                  smX:	
 31294                                  	;popreg	<es, cx, bx>
 31295                                  	pop	es
 31296                                  	pop	cx
 31297                                  	pop	bx
 31298                                  	retn
 31299                                  
 31300                                  ; -----------------------------------------------------------------------------
 31301                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 31302                                  ; -----------------------------------------------------------------------------
 31303                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 31304                                  ; EXIT:     None; UMB is hidden as necessary
 31305                                  ; ERROR:    None
 31306                                  ; USES:     Flags, AX, CX
 31307                                  ; -----------------------------------------------------------------------------
 31308                                  ; PRIMARY LOGIC:
 31309                                  ;
 31310                                  ; If the UMB is specified in the DH/LH statement, then:
 31311                                  ;    If the largest free segment is too small (check specified size), then:
 31312                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 31313                                  ;    Else, if largest free segment is LARGER than specified size, then:
 31314                                  ;       If /S was given on the command-line, then:
 31315                                  ;          Break that element into two pieces
 31316                                  ;          Set a flag that we're shrinking
 31317                                  ;       Endif
 31318                                  ;    Endif
 31319                                  ; Endif
 31320                                  ; If the UMB is NOT specified (or was removed by the above):
 31321                                  ;    Hide all free elements in the UMB
 31322                                  ;    If the flag that we're shrinking was set, then:
 31323                                  ;       UN-hide the lower portion of the shrunken UMB
 31324                                  ;    ENDIF
 31325                                  ; ENDIF
 31326                                  ; -----------------------------------------------------------------------------
 31327                                  
 31328                                  _hideUMB_:
 31329                                  	push	bx
 31330                                  	push	dx
 31331                                  	push	es
 31332                                  
 31333                                  	mov	al,cl
 31334                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 31335                                  	jz	short hu_20
 31336                                  
 31337                                  	mov	al,cl		; Retrieve the size of the largest
 31338                                  	call	BigFree		; free element in AX; put its address in ES
 31339                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 31340                                  
 31341                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 31342                                  	mov	al,cl		; Retrieve the user's specified
 31343                                  	call	GetSize		; minimum size for this umb (into AX)
 31344                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 31345                                  
 31346                                  	or	ax,ax		; If they didn't specify one,
 31347                                  	jz	short hu_20	; Skip over all this.
 31348                                  
 31349                                  	cmp	ax,bx		; Ah... if (specified > max free)
 31350                                  	jbe	short hu_10
 31351                                  
 31352                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 31353                                  	call	unMarkUMB
 31354                                  	jmp	short hu_20
 31355                                  hu_10:	
 31356                                  	call	isTiny		; Returns ZF clear if user specified /S
 31357                                  	jz	short hu_20
 31358                                  
 31359                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 31360                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 31361                                  
 31362                                  	mov	dx,es
 31363                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 31364                                  
 31365                                  hu_20:	mov	ax,cx
 31366                                  	call	isSpecified	; If they specified this UMB, we're done...
 31367                                  	jnz	short hu_X	; so leave.
 31368                                  
 31369                                  	xor	dx,dx
 31370                                  hu_30:	
 31371                                  	mov	al,cl
 31372                                  
 31373                                  	call	hideUMB		; Hides everything in UMB #al
 31374                                  
 31375                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 31376                                  	jz	short hu_X	; So we should leave.
 31377                                  
 31378                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 31379                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 31380                                  hu_X:	
 31381                                  	pop	es
 31382                                  	pop	dx
 31383                                  	pop	bx
 31384                                  	retn
 31385                                  
 31386                                  ; -----------------------------------------------------------------------------
 31387                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 31388                                  ; -----------------------------------------------------------------------------
 31389                                  ; Entry:  None
 31390                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 31391                                  ; Error:  None
 31392                                  ; Uses:   Flags
 31393                                  ; -----------------------------------------------------------------------------
 31394                                  
 31395                                  UnFreeze:
 31396                                  	push	ax
 31397                                  	push	es
 31398                                  
 31399                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 31400                                  	jc	short ufX
 31401                                  
 31402                                  	mov	es,ax
 31403                                  
 31404                                  ; ------------------------------
 31405                                  ; UF10--ES - Current MCB address
 31406                                  ; ------------------------------
 31407                                  
 31408                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 31409                                  	jnz	short uf20
 31410                                  	call	unHideMCB
 31411                                  uf20:	
 31412                                  	mov	al,[es:ARENA.SIGNATURE]
 31413                                  
 31414                                  	cmp	al,arena_signature_end ; 'Z'
 31415                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 31416                                  
 31417                                  	;NextMCB es, ax		; Go on forward.
 31418                                  	mov     ax,es
 31419                                  	;add	ax,[es:3]
 31420                                  	add     ax,[es:ARENA.SIZE]
 31421                                  	inc     ax
 31422                                  	mov     es,ax
 31423                                  
 31424                                  	jmp	short uf10
 31425                                  ufX:	
 31426                                  	pop	es
 31427                                  	pop	ax
 31428                                  	retn
 31429                                  
 31430                                  ; -----------------------------------------------------------------------------
 31431                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 31432                                  ; -----------------------------------------------------------------------------
 31433                                  ; ENTRY:    ES:0 should point to an MCB
 31434                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 31435                                  ; ERROR:    None
 31436                                  ; USES:     Flags
 31437                                  ; -----------------------------------------------------------------------------
 31438                                  
 31439                                  isFrozMCB:
 31440                                  	;push	ax
 31441                                  
 31442                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 31443                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 31444                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 31445                                  	jne	short ifmX
 31446                                  
 31447                                  	;mov	ax,[es:ARENA.NAME+0]
 31448                                  	;cmp	ax,'FR' ; 5246h
 31449                                  	cmp	word [es:ARENA.NAME+0],'FR'
 31450                                  	jne	short ifmX
 31451                                  	;mov	ax,[es:ARENA.NAME+2]
 31452                                  	;cmp	ax,'OZ' ; 5A4Fh
 31453                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 31454                                  	jne	short ifmX
 31455                                  	;mov	ax,[es:ARENA.NAME+4]
 31456                                  	;cmp	ax,'EN' ; 4E45h
 31457                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31458                                  	jne	short ifmX
 31459                                  	;mov	ax,[es:ARENA.NAME+6]
 31460                                  	;cmp	ax,'  ' ; 2020h
 31461                                  	cmp	word [es:ARENA.NAME+6],'  '
 31462                                  ifmX:	
 31463                                  	;pop	ax
 31464                                  	retn
 31465                                  
 31466                                  ; -----------------------------------------------------------------------------
 31467                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 31468                                  ; -----------------------------------------------------------------------------
 31469                                  ; ENTRY:    ES:0 should point to an MCB
 31470                                  ; EXIT:     None; MCB frozen
 31471                                  ; ERROR:    None
 31472                                  ; USES:     None
 31473                                  ; -----------------------------------------------------------------------------
 31474                                  
 31475                                  frezMCB:
 31476                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 31477                                  	mov	word [es:ARENA.NAME+0],'FR'
 31478                                  	mov	word [es:ARENA.NAME+2],'OZ'
 31479                                  	mov	word [es:ARENA.NAME+4],'EN'
 31480                                  	mov	word [es:ARENA.NAME+6],'  '
 31481                                  	retn
 31482                                  
 31483                                  ; -----------------------------------------------------------------------------
 31484                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 31485                                  ; -----------------------------------------------------------------------------
 31486                                  ; Entry:  None
 31487                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 31488                                  ; Error:  None
 31489                                  ; Uses:   Flags
 31490                                  ; -----------------------------------------------------------------------------
 31491                                  
 31492                                  FreezeUM:
 31493                                  	push	ax
 31494                                  	push	cx
 31495                                  	push	dx
 31496                                  	push	es
 31497                                  
 31498                                  	;call	GetLoadUMB
 31499                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 31500                                  
 31501                                  	xor	ah,ah		; Zap ah, so al==ax
 31502                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 31503                                  
 31504                                  	call	UmbHead		; Returns first UMB segment in AX
 31505                                  	mov	es,ax
 31506                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 31507                                  
 31508                                  ; -----------------------------------------
 31509                                  ; FUM10--ES - Current MCB address
 31510                                  ;        CX - Current UMB number
 31511                                  ;        DX - UMB number to skip (load UMB)
 31512                                  ; -----------------------------------------
 31513                                  
 31514                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 31515                                  	jnz	short fum20
 31516                                  
 31517                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 31518                                  fum20:	
 31519                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 31520                                  	je	short fum30	; freeze anything... so skip that section.
 31521                                  
 31522                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 31523                                  	or	word [es:ARENA.OWNER],0
 31524                                  	jnz	short fum30	; either.
 31525                                  
 31526                                  	call	frezMCB
 31527                                  fum30:	
 31528                                  	mov	al,[es:ARENA.SIGNATURE]
 31529                                  	cmp	al,arena_signature_end ; 'Z'
 31530                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 31531                                  
 31532                                  	;NextMCB es, ax		; Go on forward.
 31533                                  	mov     ax,es
 31534                                  	;add	ax,[es:3]
 31535                                  	add     ax,[es:ARENA.SIZE]
 31536                                  	inc     ax
 31537                                  	mov     es,ax
 31538                                  	
 31539                                  	jmp	short fum10
 31540                                  
 31541                                  fumX:	pop	es
 31542                                  	pop	dx
 31543                                  	pop	cx
 31544                                  	pop	ax
 31545                                  	retn
 31546                                  
 31547                                  ; -----------------------------------------------------------------------------
 31548                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 31549                                  ; -----------------------------------------------------------------------------
 31550                                  ; ENTRY:    None
 31551                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 31552                                  ; ERROR:    None
 31553                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 31554                                  ; -----------------------------------------------------------------------------
 31555                                  
 31556                                  UmbTest:
 31557                                  	push	ax
 31558                                  	push	bx
 31559                                  	push	ds
 31560                                  	push	es
 31561                                  
 31562                                  	call	fm_link			; Link in UMBs (if not already linked)
 31563                                  	call	WalkMem			; Check to see if they're really linked
 31564                                  	pushf				; And remember what we found out
 31565                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 31566                                  	popf				; And restore what we found out.
 31567                                  
 31568                                  	pop	es
 31569                                  	pop	ds
 31570                                  	pop	bx
 31571                                  	pop	ax
 31572                                  	retn
 31573                                  
 31574                                  ; -----------------------------------------------------------------------------
 31575                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 31576                                  ; -----------------------------------------------------------------------------
 31577                                  ; ENTRY:    None
 31578                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 31579                                  ; ERROR:    None
 31580                                  ; USES:     Flags
 31581                                  ; -----------------------------------------------------------------------------
 31582                                  
 31583                                  WalkMem:
 31584                                  	push	ax ; ?
 31585                                  	push	bx ; ?
 31586                                  	push	es ; ? no need to save contents of these registers ?
 31587                                  		   	
 31588                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31589                                  	int	21h
 31590                                  
 31591                                  	mov	ax,[es:bx-2]
 31592                                  	mov	es,ax
 31593                                  
 31594                                  ; ------------------------------
 31595                                  ; UM10: ES = Current MCB pointer
 31596                                  ; ------------------------------
 31597                                  
 31598                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 31599                                  	cmp	al,arena_signature_end ;  'Z'
 31600                                  	je	short um20		; If signature == 'Z', hay no more.
 31601                                  
 31602                                  	;NextMCB es, bx			; Move to the next MCB
 31603                                  
 31604                                  	mov     bx,es
 31605                                  	;add	bx,[es:3]
 31606                                  	add     bx,[es:ARENA.SIZE]
 31607                                  	inc     bx
 31608                                  	mov     es,bx
 31609                                  		
 31610                                  	jmp	short um10		; And restart the loop.
 31611                                  um20:	
 31612                                  	mov	ax,es
 31613                                  
 31614                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 31615                                  
 31616                                  	pop	es ; ?
 31617                                  	pop	bx ; ?
 31618                                  	pop	ax ; ?
 31619                                  	retn
 31620                                  
 31621                                  ; -----------------------------------------------------------------------------
 31622                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 31623                                  ; -----------------------------------------------------------------------------
 31624                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31625                                  ; EXIT:     None
 31626                                  ; ERROR:    None
 31627                                  ; USES:     AX, BX
 31628                                  ; -----------------------------------------------------------------------------
 31629                                  
 31630                                  hl_unlink:
 31631                                  	xor	bh,bh
 31632                                  
 31633                                  	;getdata bl,fm_umb		; Restore original link-state
 31634                                  	;
 31635                                  	;push	ds
 31636                                  	;push	cs
 31637                                  	;pop	ds
 31638                                  	;mov	bl,[fm_umb]
 31639                                  	;pop	ds
 31640                                  
 31641                                  	mov	bl,[cs:fm_umb]
 31642                                  
 31643                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31644                                  	int	21h
 31645                                  	retn
 31646                                  
 31647                                  ; ----------------------------------------------------------------------
 31648                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 31649                                  ; ----------------------------------------------------------------------
 31650                                  ; 09/04/2019 - Retro DOS v4.0
 31651                                  
 31652                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 31653                                  ;   Date:     May 14, 1992
 31654                                  
 31655                                  ;   Modification log:
 31656                                  ;
 31657                                  ;     DATE    WHO      DESCRIPTION
 31658                                  ;   --------  -------  --------------------------------------------------------
 31659                                  ;   05/14/92  t-richj  Original
 31660                                  ;   06/21/92  t-richj  Final revisions before check-in
 31661                                  
 31662                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 31663                                  
 31664                                  ; -----------------------------------------------------------------------------
 31665                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 31666                                  ; -----------------------------------------------------------------------------
 31667                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 31668                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 31669                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 31670                                  ; ERROR:  None
 31671                                  ; USES:   fInHigh (from highvar.inc), carry flag
 31672                                  ; -----------------------------------------------------------------------------
 31673                                  
 31674                                  UnHideUMBs:
 31675                                  	push	ax		; Save ax for what we're about to do
 31676                                  
 31677                                  ; -----------------------------------------------------------------------------
 31678                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 31679                                  ;    length of time. Those six constitute a check of whether or not we should
 31680                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 31681                                  ;    will destroy the current link-state and memory-allocation strategy after
 31682                                  ;    every command execution.
 31683                                  ; -----------------------------------------------------------------------------
 31684                                  
 31685                                  	;getdata al,fInHigh	; Get InHigh from data segment
 31686                                  	;
 31687                                  	;push	ds
 31688                                  	;push	cs
 31689                                  	;pop	ds
 31690                                  	;mov	al,[fInHigh]
 31691                                  	;pop	ds	
 31692                                  
 31693                                  	mov	al,[cs:fInHigh]
 31694                                  
 31695                                  	or	al,al
 31696                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 31697                                  
 31698                                  	pop	ax		; then there's nothing to do here... so
 31699                                  	stc			; restore everything and return. Just like
 31700                                  	retn			; that.
 31701                                  uhu10:	
 31702                                  	call	linkumb		; Make sure UMBs are linked in.
 31703                                  	call	FreeUMBs
 31704                                  
 31705                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 31706                                  	;
 31707                                  	;push	es
 31708                                  	;push	cs
 31709                                  	;pop	es
 31710                                  	;mov	byte [es:fInHigh],0
 31711                                  	;pop	ds	
 31712                                  
 31713                                  	mov	byte [cs:fInHigh],0	
 31714                                  
 31715                                  	call	he_unlink	; Unlink UMBs
 31716                                  
 31717                                  	pop	ax
 31718                                  	; 12/12/2022
 31719                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 31720                                  	retn
 31721                                  
 31722                                  ; -----------------------------------------------------------------------------
 31723                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 31724                                  ; -----------------------------------------------------------------------------
 31725                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 31726                                  ; EXIT:     None
 31727                                  ; ERROR:    None
 31728                                  ; USES:     AX, BX
 31729                                  ; -----------------------------------------------------------------------------
 31730                                  
 31731                                  he_unlink:
 31732                                  	xor	bh, bh
 31733                                  
 31734                                  	;getdata bl, fm_umb	; Restore original link-state
 31735                                  	mov	bl,[cs:fm_umb]	
 31736                                  
 31737                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31738                                  	int	21h
 31739                                  	retn
 31740                                  
 31741                                  ; -----------------------------------------------------------------------------
 31742                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 31743                                  ; -----------------------------------------------------------------------------
 31744                                  ; ENTRY:    None
 31745                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 31746                                  ; ERROR:    None (ignore CF)
 31747                                  ; USES:     Flags
 31748                                  ; -----------------------------------------------------------------------------
 31749                                  
 31750                                  FreeUMBs:
 31751                                  	push	ax
 31752                                  	push	es
 31753                                  
 31754                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 31755                                  	jc	short fusX
 31756                                  
 31757                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 31758                                  fus10:	
 31759                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 31760                                  	jnz	short fus20
 31761                                  	call	freeMCB
 31762                                  fus20:	   
 31763                                  	mov	al,[es:ARENA.SIGNATURE]
 31764                                  	cmp	al,arena_signature_end ; 'Z'
 31765                                  	jz	short fusX	; That means this was the last MCB--that's it.
 31766                                  
 31767                                  	mov	ax,es
 31768                                  	add	ax,[es:ARENA.SIZE]
 31769                                  	inc	ax
 31770                                  	mov	es,ax		; Go on forward.
 31771                                  
 31772                                  	jmp	short fus10
 31773                                  fusX:	
 31774                                  	pop	es
 31775                                  	pop	ax
 31776                                  	retn
 31777                                  
 31778                                  ; -----------------------------------------------------------------------------
 31779                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 31780                                  ; -----------------------------------------------------------------------------
 31781                                  ; ENTRY:    ES:0 should point to an MCB
 31782                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 31783                                  ; ERROR:    None
 31784                                  ; USES:     Flags
 31785                                  ; -----------------------------------------------------------------------------
 31786                                  
 31787                                  isHideMCB:
 31788                                  	;push	ax
 31789                                  
 31790                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 31791                                  	jne	short ihm_x				; then check for HIDDEN
 31792                                  
 31793                                  	;mov	ax,[es:ARENA.NAME]
 31794                                  	;cmp	ax,'HI' ; 4948h
 31795                                  	cmp	word [es:ARENA.NAME+0],'HI'
 31796                                  	jne	short ihm_x
 31797                                  	;mov	ax,[es:ARENA.NAME+2]
 31798                                  	;cmp	ax,'DD' ; 4444h
 31799                                  	cmp	word [es:ARENA.NAME+2],'DD'
 31800                                  	jne	short ihm_x
 31801                                  	;mov	ax,[es:ARENA.NAME+4]
 31802                                  	;cmp	ax,'EN' ; 4E45h
 31803                                  	cmp	word [es:ARENA.NAME+4],'EN'
 31804                                  	jne	short ihm_x
 31805                                  	;mov	ax,[es:ARENA.NAME+6]
 31806                                  	;cmp	ax,'  ' ; 2020h
 31807                                  	cmp	word [es:ARENA.NAME+6],'  '
 31808                                  ihm_x:	
 31809                                  	;pop	ax
 31810                                  	retn
 31811                                  
 31812                                  ; -----------------------------------------------------------------------------
 31813                                  ;*** freeMCB - marks as free the MCB at ES:0
 31814                                  ; -----------------------------------------------------------------------------
 31815                                  ; ENTRY:    ES:0 should point to an MCB
 31816                                  ; EXIT:     None; MCB free'd
 31817                                  ; ERROR:    None
 31818                                  ; USES:     AX
 31819                                  ; -----------------------------------------------------------------------------
 31820                                  
 31821                                  freeMCB:
 31822                                  	mov	word [es:ARENA.OWNER],0
 31823                                  	mov	ax,'  '
 31824                                  	mov	[es:ARENA.NAME+0],ax
 31825                                  	mov	[es:ARENA.NAME+2],ax
 31826                                  	mov	[es:ARENA.NAME+4],ax
 31827                                  	mov	[es:ARENA.NAME+6],ax
 31828                                  	retn
 31829                                  
 31830                                  ; -----------------------------------------------------------------------------
 31831                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 31832                                  ; -----------------------------------------------------------------------------
 31833                                  ; ENTRY:  Nothing
 31834                                  ; EXIT:   AX contains 0x9FFF for most systems
 31835                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 31836                                  ; USES:   Flags, AX
 31837                                  ; -----------------------------------------------------------------------------
 31838                                  
 31839                                  HeadUmb:
 31840                                  	; 13/05/2019
 31841                                  
 31842                                  	;push	si ; ?
 31843                                  	;push	ds ; ?
 31844                                  	;push	es
 31845                                  	;push	bx ; *
 31846                                  
 31847                                  	; 09/04/2019
 31848                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 31849                                  
 31850                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 31851                                  	int	21h
 31852                                  			; DOS - 2+ internal - GET LIST OF LISTS
 31853                                  			; Return: ES:BX -> DOS list of lists
 31854                                  	;mov	ax,[es:8Ch]
 31855                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 31856                                  	cmp	ax,0FFFFh
 31857                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 31858                                  
 31859                                  	;clc				; Else, it isn't.
 31860                                  	;jmp	short xhu_x
 31861                                  xhu_e:	
 31862                                  	;stc
 31863                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 31864                                  xhu_x:	
 31865                                  	;pop	bx ; *
 31866                                  	;pop	es	
 31867                                  	;pop	ds ; ?
 31868                                  	;pop	si ; ?
 31869                                  	retn
 31870                                  
 31871                                  ; -----------------------------------------------------------------------------
 31872                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 31873                                  ; -----------------------------------------------------------------------------
 31874                                  ; ENTRY:    None
 31875                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 31876                                  ; ERROR:    None
 31877                                  ; USES:     AX, BX, fm_umb
 31878                                  ; -----------------------------------------------------------------------------
 31879                                  
 31880                                  linkumb:
 31881                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 31882                                  	int	21h			; Current link-state is now in al
 31883                                  
 31884                                  	or	al,al			; BUGBUG: proper check?
 31885                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 31886                                  
 31887                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 31888                                  	mov	bx,1
 31889                                  	int	21h
 31890                                  lumbX:
 31891                                  	retn
 31892                                  
 31893                                  %endif
 31894                                  
 31895                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31896                                  ; (SYSINIT:2B5Fh)
 31897                                  
 31898                                  ; ----------------------------------------------------------------------
 31899                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 31900                                  ; ----------------------------------------------------------------------
 31901                                  ; 09/04/2019 - Retro DOS v4.0
 31902                                  
 31903                                  ;----------------------------------------------------------------------------
 31904                                  ;
 31905                                  ; procedure : InitDevLoad
 31906                                  ;
 31907                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 31908                                  ;			 = 1 indicates load in UMB:
 31909                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 31910                                  ;		                    = 1 indicates a DOS 5-style load
 31911                                  ;		DevSize  = Size of the device driver file in paras
 31912                                  ;
 31913                                  ;	Output : none
 31914                                  ;
 31915                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 31916                                  ;	Also sets up a header for the Device driver entry for mem utility
 31917                                  ;
 31918                                  ;----------------------------------------------------------------------------
 31919                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 31920                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 31921                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 31922                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 31923                                  ;----------------------------------------------------------------------------
 31924                                  
 31925                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31926                                  InitDevLoad:
 31927                                  	; 11/12/2022
 31928                                  	; ds = cs
 31929 00002759 803E[671E]00            	cmp	byte [DeviceHi],0
 31930                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 31931                                  	;je	short InitForLo		; no, init for lo mem
 31932 0000275E 741F                    	je	short initforlo_x ; 09/04/2019
 31933                                  
 31934                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31935                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 31936                                  ;	je	short InitForConv
 31937                                  ;
 31938                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 31939                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 31940                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 31941                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 31942                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 31943                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 31944                                  ;
 31945                                  ;	call	ShrinkUMB		; Stop using the old device arena
 31946                                  ;
 31947                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 31948                                  ;	call	FreezeUM		; Hide everything BUT the load area
 31949                                  ;	call	GetUMBForDev		; And grab that load area as needed
 31950                                  ;	pushf
 31951                                  ;	call	UnFreeze		; Then unhide everything frozen
 31952                                  ;	popf
 31953                                  ;
 31954                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 31955                                  ;
 31956                                  ;	jmp	short InitForHi
 31957                                  
 31958                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31959                                  	; (SYSINIT:2B67h)
 31960                                  InitForConv:
 31961                                  	; 11/12/2022
 31962                                  	; ds = cs
 31963 00002760 E83700                  	call	SpaceInUMB		; Do we have space left in the
 31964                                  					;  current UMB ?
 31965 00002763 7308                    	jnc	short InitForHi		; yes, we have
 31966 00002765 E83D04                  	call	ShrinkUMB		; shrink the current UMB in use
 31967 00002768 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 31968 0000276B 720D                    	jc	short InitForLo		; we didn't succeed, so load
 31969                                  					;  in low memory
 31970                                  InitForHi:
 31971                                  	; 11/12/2022
 31972                                  	; ds = cs
 31973                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 31974                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 31975                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 31976 0000276D A1[5D1E]                	mov	ax,[DevUMBFree]
 31977 00002770 8B16[591E]              	mov	dx,[DevUMBAddr]
 31978 00002774 0316[5B1E]              	add	dx,[DevUMBSize]
 31979 00002778 EB0C                    	jmp	short idl1
 31980                                  
 31981                                  InitForLo:
 31982                                  	; 11/12/2022
 31983                                  	; ds = cs
 31984                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 31985 0000277A C606[671E]00            	mov	byte [DeviceHi],0
 31986                                  initforlo_x:
 31987                                  	; 11/12/2022
 31988                                  	; ds = cs
 31989                                  					;  into UMB indicate that
 31990                                  					;  we are loading low
 31991                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 31992                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 31993 0000277F A1[E003]                	mov	ax,[memhi]
 31994 00002782 8B16[A302]              	mov	dx,[ALLOCLIM]
 31995                                  idl1:
 31996 00002786 E86600                  	call	DevSetMark		; setup a sub-arena for DD
 31997                                  	; 11/12/2022
 31998                                  	; ds = cs
 31999                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 32000                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 32001                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 32002                                  	;mov	[cs:DevEntry+2],ax
 32003 00002789 A3[4C1E]                	mov	[DevLoadAddr],ax
 32004 0000278C 8916[4E1E]              	mov	[DevLoadEnd],dx
 32005 00002790 C706[501E]0000          	mov	word [DevEntry],0
 32006 00002796 A3[521E]                	mov	[DevEntry+2],ax
 32007 00002799 C3                      	retn
 32008                                  
 32009                                  ;----------------------------------------------------------------------------
 32010                                  ;
 32011                                  ; procedure : SpaceInUMB?
 32012                                  ;
 32013                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 32014                                  ;	Output : Carry set if no space in UMB
 32015                                  ;		 Carry clear if Space is available for the device in
 32016                                  ;		   current UMB
 32017                                  ;
 32018                                  ;----------------------------------------------------------------------------
 32019                                  
 32020                                  SpaceInUMB:
 32021                                  	; 11/12/2022
 32022                                  	; ds = cs
 32023                                  	;mov	ax,[cs:DevUMBSize]
 32024                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 32025                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 32026 0000279A A1[5B1E]                	mov	ax,[DevUMBSize]
 32027 0000279D 0306[591E]              	add	ax,[DevUMBAddr]		; End of UMB
 32028 000027A1 2B06[5D1E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 32029                                  	; 11/12/2022
 32030                                  	;or	ax,ax			; Nospace ?
 32031                                  	;jnz	short spcinumb1
 32032                                  	;stc
 32033                                  	;retn
 32034                                  	; 11/12/2022
 32035 000027A5 83F801                  	cmp	ax,1
 32036 000027A8 7205                    	jb	short spcinumb2	; cf=1
 32037                                  spcinumb1:
 32038 000027AA 48                      	dec	ax			; space for sub-arena
 32039                                  	; 11/12/2022
 32040                                  	; ds = cs
 32041 000027AB 3B06[4A1E]              	cmp	ax,[DevSize]
 32042                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 32043                                  spcinumb2:
 32044 000027AF C3                      	retn
 32045                                  
 32046                                  ;----------------------------------------------------------------------------
 32047                                  ;
 32048                                  ; procedure : PrepareMark
 32049                                  ;
 32050                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 32051                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 32052                                  ;
 32053                                  ;----------------------------------------------------------------------------
 32054                                  
 32055                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32056                                  ;
 32057                                  ;PrepareMark:
 32058                                  ;	push	ds
 32059                                  ;	mov	ds,ax
 32060                                  ;	mov	word [ARENA.OWNER],8
 32061                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 32062                                  ;	pop	ds
 32063                                  ;
 32064                                  ;	inc	ax
 32065                                  ;	mov	[cs:DevUMBAddr],ax
 32066                                  ;	mov	[cs:DevUMBFree],ax
 32067                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32068                                  ;	retn
 32069                                  
 32070                                  ;----------------------------------------------------------------------------
 32071                                  ;
 32072                                  ; procedure : GetUMBForDev
 32073                                  ;
 32074                                  ;	Input : DevSize
 32075                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 32076                                  ;		 the device.
 32077                                  ;		 If success carry clear
 32078                                  ;
 32079                                  ;	Allocates the biggest UMB for loading devices and updates
 32080                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 32081                                  ;	UMB.
 32082                                  ;
 32083                                  ;	This routine relies on the fact that all of the low memory
 32084                                  ;	is allocated, and any DOS alloc calls should return memory
 32085                                  ;	from the UMB pool.
 32086                                  ;
 32087                                  ;----------------------------------------------------------------------------
 32088                                  
 32089                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32090                                  	; (SYSINIT:2BC6h)
 32091                                  
 32092                                  GetUMBForDev:
 32093                                  	; 11/12/2022
 32094                                  	; ds = cs
 32095 000027B0 BBFFFF                  	mov	bx,0FFFFh
 32096 000027B3 B80048                  	mov	ax,4800h
 32097 000027B6 CD21                    	int	21h
 32098                                  		; DOS - 2+ - ALLOCATE MEMORY
 32099                                  		; BX = number of 16-byte paragraphs desired
 32100                                  
 32101 000027B8 09DB                    	or	bx,bx
 32102                                  	;jz	short gufd_err
 32103                                  	; 09/09/2023
 32104 000027BA 742E                    	jz	short gufd_error ; bx = 0
 32105                                  
 32106 000027BC 4B                      	dec	bx
 32107                                  	; 11/12/2022
 32108                                  	; ds = cs
 32109 000027BD 391E[4A1E]              	cmp	[DevSize],bx
 32110                                  	;cmp	[cs:DevSize],bx
 32111 000027C1 7725                    	ja	short gufd_err
 32112                                  
 32113 000027C3 43                      	inc	bx
 32114                                  
 32115 000027C4 B80048                  	mov	ax,4800h
 32116 000027C7 CD21                    	int	21h
 32117 000027C9 721D                    	jc	short gufd_err
 32118                                  
 32119                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32120                                  	;dec	ax
 32121                                  	;call	PrepareMark
 32122                                  	;
 32123                                  PrepareMark:
 32124 000027CB 1E                      	push	ds
 32125 000027CC 48                      	dec	ax
 32126 000027CD 8ED8                    	mov	ds,ax
 32127 000027CF C70601000800            	mov	word [ARENA.OWNER],8
 32128 000027D5 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 32129 000027DB 40                      	inc	ax
 32130 000027DC 1F                      	pop	ds
 32131                                  	; 11/12/2022
 32132                                  	; ds = cs
 32133                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 32134                                  	;mov	[cs:DevUMBAddr],ax
 32135                                  	;mov	[cs:DevUMBFree],ax
 32136                                  gufd_x:		; 09/09/2023
 32137 000027DD 891E[5B1E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 32138 000027E1 A3[591E]                	mov	[DevUMBAddr],ax
 32139 000027E4 A3[5D1E]                	mov	[DevUMBFree],ax
 32140                                  	;
 32141                                  	; 11/12/2022
 32142                                  	; cf=0
 32143                                  	;clc				; mark no error
 32144 000027E7 C3                      	retn
 32145                                  
 32146                                  	; 09/09/2023
 32147                                  %if 1
 32148                                  gufd_err:
 32149 000027E8 31DB                    	xor	bx,bx ; 0
 32150                                  gufd_error:
 32151 000027EA 31C0                    	xor	ax,ax ; 0
 32152 000027EC F9                      	stc	; cf=1
 32153 000027ED EBEE                    	jmp	short gufd_x	
 32154                                  %endif
 32155                                  
 32156                                  ; 09/09/2023
 32157                                  %if 0
 32158                                  gufd_err:
 32159                                  	xor	ax,ax ; 0
 32160                                  	; 11/12/2022
 32161                                  	; ds = cs
 32162                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 32163                                  	;mov	[cs:DevUMBAddr],ax
 32164                                  	;mov	[cs:DevUMBFree],ax
 32165                                  	mov	[DevUMBSize],ax		; erase the previous values
 32166                                  	mov	[DevUMBAddr],ax
 32167                                  	mov	[DevUMBFree],ax
 32168                                  	stc
 32169                                  	retn
 32170                                  %endif
 32171                                  
 32172                                  ;----------------------------------------------------------------------------
 32173                                  ;
 32174                                  ; procedure : DevSetMark
 32175                                  ;
 32176                                  ;	Input : AX - Free segment were device is going to be loaded
 32177                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 32178                                  ;
 32179                                  ;	Creates a sub-arena for the device driver
 32180                                  ;	puts 'D' marker in the sub-arena
 32181                                  ;	Put the owner of the sub-arena as (AX+1)
 32182                                  ;	Copies the file name into sub-arena name field
 32183                                  ;
 32184                                  ;	Size field of the sub-arena will be set only at succesful
 32185                                  ;	completion of Device load.
 32186                                  ;
 32187                                  ;----------------------------------------------------------------------------
 32188                                  
 32189                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32190                                  	; (SYSINIT:2C13h)
 32191                                  
 32192                                  DevSetMark:
 32193 000027EF 06                      	push	es
 32194 000027F0 57                      	push	di
 32195 000027F1 1E                      	push	ds
 32196 000027F2 56                      	push	si
 32197 000027F3 8EC0                    	mov	es,ax
 32198 000027F5 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 32199 000027FB 40                      	inc	ax
 32200 000027FC 26A30100                	mov	[es:devmark.seg],ax
 32201                                  
 32202                                  ;-------------- Copy file name
 32203                                  
 32204 00002800 50                      	push	ax			; save load addr
 32205                                  
 32206                                  	; 09/09/2023
 32207                                  	; ds = cs
 32208                                  	;lds	si,[cs:bpb_addr]	; command line is still there
 32209 00002801 C536[F803]              	lds	si,[bpb_addr]
 32210                                  
 32211 00002805 89F7                    	mov	di,si
 32212 00002807 FC                      	cld
 32213                                  dsm_again:
 32214 00002808 AC                      	lodsb
 32215 00002809 3C3A                    	cmp	al,':'
 32216 0000280B 7504                    	jne	short isit_slash
 32217 0000280D 89F7                    	mov	di,si
 32218 0000280F EBF7                    	jmp	short dsm_again
 32219                                  isit_slash:
 32220 00002811 3C5C                    	cmp	al, '\'
 32221 00002813 7504                    	jne	short isit_null
 32222 00002815 89F7                    	mov	di,si
 32223 00002817 EBEF                    	jmp	short dsm_again
 32224                                  isit_null:
 32225 00002819 08C0                    	or	al,al
 32226 0000281B 75EB                    	jnz	short dsm_again
 32227 0000281D 89FE                    	mov	si,di
 32228                                  
 32229 0000281F BF0800                  	mov	di,devmark.filename ; 8
 32230 00002822 B90800                  	mov	cx,8			; maximum 8 characters
 32231                                  dsm_next_char:
 32232 00002825 AC                      	lodsb
 32233 00002826 08C0                    	or	al, al
 32234 00002828 7407                    	jz	short blankout
 32235 0000282A 3C2E                    	cmp	al, '.'
 32236 0000282C 7403                    	je	short blankout
 32237 0000282E AA                      	stosb
 32238 0000282F E2F4                    	loop	dsm_next_char
 32239                                  blankout:
 32240 00002831 E304                    	jcxz	dsm_exit
 32241 00002833 B020                    	mov	al, ' '
 32242 00002835 F3AA                    	rep	stosb			; blank out the rest
 32243                                  dsm_exit:
 32244 00002837 58                      	pop	ax			; restore load addr
 32245 00002838 5E                      	pop	si
 32246 00002839 1F                      	pop	ds
 32247 0000283A 5F                      	pop	di
 32248 0000283B 07                      	pop	es
 32249 0000283C C3                      	retn
 32250                                  
 32251                                  ;----------------------------------------------------------------------------
 32252                                  ;
 32253                                  ; procedure : SizeDevice
 32254                                  ;
 32255                                  ;	Input : ES:SI - points to device file to be sized
 32256                                  ;
 32257                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 32258                                  ;
 32259                                  ;	Calculates the size of the device file in paras and stores it
 32260                                  ;	in DevSize
 32261                                  ;
 32262                                  ;----------------------------------------------------------------------------
 32263                                  
 32264                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32265                                  SizeDevice:
 32266                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32267                                  	; 11/12/2022 ; *
 32268 0000283D 1E                      	push	ds ; *
 32269 0000283E 06                      	push	es
 32270 0000283F 1F                      	pop	ds
 32271 00002840 89F2                    	mov	dx,si			; ds:dx -> file name
 32272 00002842 B8003D                  	mov	ax,3D00h		; open
 32273 00002845 CD21                    	int	21h
 32274 00002847 7243                    	jc	short sd_err		; open failed
 32275                                  
 32276 00002849 89C3                    	mov	bx,ax			; BX - file handle
 32277 0000284B B80242                  	mov	ax,4202h		; seek
 32278 0000284E 31C9                    	xor	cx,cx
 32279 00002850 89CA                    	mov	dx,cx			; to end of file
 32280 00002852 CD21                    	int	21h
 32281 00002854 722F                    	jc	short sd_close		; did seek fail (impossible)
 32282 00002856 83C00F                  	add	ax,15			; para convert
 32283 00002859 83D200                  	adc	dx,0
 32284 0000285C F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 32285 00002860 7409                    	jz	short szdev1		; no
 32286 00002862 2EC706[4A1E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 32287                                  					; assuming that we fail later
 32288 00002869 EB1A                    	jmp	short sd_close
 32289                                  szdev1:
 32290 0000286B B104                    	mov	cl,4			; convert it to paras
 32291 0000286D D3E8                    	shr	ax,cl
 32292 0000286F B10C                    	mov	cl,12
 32293 00002871 D3E2                    	shl	dx,cl
 32294 00002873 09D0                    	or	ax,dx
 32295                                  	;
 32296                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32297 00002875 2E3B06[681E]            	cmp     ax,[cs:DevSizeOption]
 32298                                  	;ja	short szdev2
 32299                                  	; 14/08/2023
 32300 0000287A 7305                    	jnb	short szdev2
 32301                                  
 32302 0000287C 2EA1[681E]              	mov     ax,[cs:DevSizeOption]
 32303                                  	; 12/12/2022
 32304 00002880 F8                      	clc
 32305                                  szdev2:
 32306 00002881 2EA3[4A1E]              	mov	[cs:DevSize],ax		; save file size
 32307                                  
 32308                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32309                                  	; 12/12/2022
 32310                                  	; cf=0
 32311                                  	;clc
 32312                                  sd_close:
 32313 00002885 9C                      	pushf				; let close not spoil our
 32314                                  					;  carry flag
 32315 00002886 B8003E                  	mov	ax,3E00h		; close
 32316 00002889 CD21                    	int	21h			; we are not checking for err
 32317 0000288B 9D                      	popf
 32318                                  sd_err:
 32319                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32320                                  	; 11/12/2022 ; *
 32321 0000288C 1F                      	pop     ds ; *
 32322 0000288D C3                      	retn
 32323                                  
 32324                                  ;----------------------------------------------------------------------------
 32325                                  ;
 32326                                  ; procedure : ExecDev
 32327                                  ;
 32328                                  ;	Input : ds:dx -> device to be executed
 32329                                  ;		DevLoadAddr - contains where device has to be loaded
 32330                                  ;
 32331                                  ;	Output : Carry if error
 32332                                  ;		 Carry clear if no error
 32333                                  ;
 32334                                  ;	Loads a device driver using the 4b03h function call
 32335                                  ;
 32336                                  ;----------------------------------------------------------------------------
 32337                                  
 32338                                  	; 01/11/2022
 32339                                  ExecDev:
 32340 0000288E 2E8B1E[4C1E]            	mov	bx,[cs:DevLoadAddr]
 32341 00002893 2E891E[631E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 32342                                  					;  block for exec with
 32343                                  					;  Load address
 32344 00002898 2E891E[651E]            	mov	[cs:DevExecReloc],bx
 32345 0000289D 8CCB                    	mov	bx,cs
 32346 0000289F 8EC3                    	mov	es,bx
 32347 000028A1 BB[631E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 32348 000028A4 B003                    	mov	al,3	; (load program only)
 32349 000028A6 B44B                    	mov	ah,EXEC ; 4Bh
 32350 000028A8 CD21                    	int	21h			;load in the device driver
 32351                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 32352                                  		; DS:DX -> ASCIZ filename
 32353                                  		; ES:BX -> parameter block
 32354                                  		; AL = subfunction 
 32355 000028AA C3                      	retn
 32356                                  
 32357                                  ;----------------------------------------------------------------------------
 32358                                  ;
 32359                                  ; procedure : RetFromUM
 32360                                  ;
 32361                                  ;	Input : None
 32362                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 32363                                  ;		 ConvLoad clear if did.
 32364                                  ;
 32365                                  ;	Prepares memory for more devices after returning from loading one
 32366                                  ;	using the DOS 6 options (/L:... etc).
 32367                                  ;
 32368                                  ;----------------------------------------------------------------------------
 32369                                  
 32370                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32371                                  ;RetFromUM:
 32372                                  ;	pushf
 32373                                  ;	mov	byte [cs:ConvLoad],1
 32374                                  ;	call	UnHideUMBs
 32375                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 32376                                  ;	mov	byte [cs:ConvLoad],0
 32377                                  ;rfUM1:	
 32378                                  ;	popf
 32379                                  ;	retn
 32380                                  
 32381                                  ;----------------------------------------------------------------------------
 32382                                  ;
 32383                                  ; procedure : RemoveNull
 32384                                  ;
 32385                                  ;	Input : ES:SI points to a null terminated string
 32386                                  ;
 32387                                  ;	Output : none
 32388                                  ;
 32389                                  ;	Replaces the null at the end of a string with blank
 32390                                  ;
 32391                                  ;----------------------------------------------------------------------------
 32392                                  
 32393                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32394                                  	; (SYSINIT:2CCEh)
 32395                                  RemoveNull:
 32396                                  	; 11/12/2022
 32397                                  	; ds = cs
 32398                                  rn_next:
 32399 000028AB 268A1C                  	mov	bl,[es:si]
 32400 000028AE 08DB                    	or	bl,bl			; null ?
 32401 000028B0 7403                    	jz	short rn_gotnull
 32402 000028B2 46                      	inc	si			; advance the pointer
 32403 000028B3 EBF6                    	jmp	short rn_next
 32404                                  rn_gotnull:
 32405                                  	; 11/12/2022
 32406 000028B5 8A1E[7C1E]              	mov	bl,[DevSavedDelim]
 32407                                  	;mov	bl,[cs:DevSavedDelim]
 32408 000028B9 26881C                  	mov	[es:si],bl		; replace null with blank
 32409                                  	; 02/11/2022
 32410                                  ; 11/12/2022
 32411                                  rba_ok:		; 10/04/2019
 32412 000028BC C3                      	retn
 32413                                  
 32414                                  ;----------------------------------------------------------------------------
 32415                                  ;
 32416                                  ; procedure : RoundBreakAddr
 32417                                  ;
 32418                                  ;	Input : DevBrkAddr
 32419                                  ;	Output : DevBrkAddr
 32420                                  ;
 32421                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 32422                                  ;
 32423                                  ;----------------------------------------------------------------------------
 32424                                  
 32425                                  RoundBreakAddr:
 32426 000028BD 2EA1[541E]              	mov	ax,[cs:DevBrkAddr]
 32427 000028C1 E8CDE7                  	call	ParaRound
 32428 000028C4 2E0106[561E]            	add	[cs:DevBrkAddr+2],ax
 32429 000028C9 2EC706[541E]0000        	mov	word [cs:DevBrkAddr],0
 32430 000028D0 2EA1[4E1E]              	mov	ax,[cs:DevLoadEnd]
 32431 000028D4 2E3906[561E]            	cmp	[cs:DevBrkAddr+2],ax
 32432 000028D9 76E1                    	jbe	short rba_ok
 32433 000028DB E95E07                  	jmp	mem_err
 32434                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32435                                  	; 11/12/2022
 32436                                  ;rba_ok:
 32437                                  ;	retn
 32438                                  
 32439                                  ;----------------------------------------------------------------------------
 32440                                  ;
 32441                                  ; procedure : DevSetBreak
 32442                                  ;
 32443                                  ;	Input : DevBrkAddr
 32444                                  ;	Output : Carry set if Device returned Init failed
 32445                                  ;		 Else carry clear
 32446                                  ;
 32447                                  ;----------------------------------------------------------------------------
 32448                                  
 32449                                  DevSetBreak:
 32450 000028DE 50                      	push	ax
 32451                                  
 32452 000028DF 2EA1[561E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 32453 000028E3 2E803E[F713]00          	cmp	byte [cs:multdeviceflag],0
 32454 000028E9 750F                    	jne	short set_break_continue ;do not check it.
 32455 000028EB 2E3B06[4C1E]            	cmp	ax,[cs:DevLoadAddr]
 32456 000028F0 7508                    	jne	short set_break_continue ;if not same, then o.k.
 32457                                  
 32458                                  	;cmp	word [cs:DevBrkAddr],0
 32459                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 32460                                  	; 12/12/2022
 32461 000028F2 2E833E[541E]01          	cmp	word [cs:DevBrkAddr],1
 32462 000028F8 7204                    	jb	short break_failed
 32463                                  
 32464                                  set_break_continue:
 32465 000028FA E8C0FF                  	call	RoundBreakAddr
 32466                                  	; 12/12/2022
 32467 000028FD F8                      	clc
 32468                                  break_failed:
 32469 000028FE 58                      	pop	ax
 32470                                  	;clc
 32471 000028FF C3                      	retn
 32472                                  
 32473                                  	; 12/12/2022
 32474                                  ;break_failed:
 32475                                  	;pop	ax
 32476                                  	;stc
 32477                                  	;retn
 32478                                  
 32479                                  ;----------------------------------------------------------------------------
 32480                                  ;
 32481                                  ; procedure : DevBreak
 32482                                  ;
 32483                                  ;	Input : DevLoadAddr & DevBrkAddr
 32484                                  ;	Output : none
 32485                                  ;
 32486                                  ;	Marks a succesful install of a device driver
 32487                                  ;	Sets device size field in sub-arena &
 32488                                  ;	Updates Free ptr in UMB or adjusts memhi
 32489                                  ;
 32490                                  ;----------------------------------------------------------------------------
 32491                                  
 32492                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32493                                  DevBreak:
 32494                                  	;push	ds ; 11/12/2022
 32495                                  
 32496                                  	; 11/12/2022
 32497 00002900 0E                      	push	cs
 32498 00002901 1F                      	pop	ds
 32499                                  	;mov	ax,[cs:DevLoadAddr]
 32500                                  	;mov	bx,[cs:DevBrkAddr+2]
 32501 00002902 A1[4C1E]                	mov	ax,[DevLoadAddr]
 32502 00002905 8B1E[561E]              	mov	bx,[DevBrkAddr+2]
 32503                                  	; 11/12/2022
 32504 00002909 1E                      	push	ds
 32505                                  
 32506 0000290A 48                      	dec	ax			; seg of sub-arena
 32507 0000290B 8ED8                    	mov	ds,ax
 32508 0000290D 40                      	inc	ax			; Back to Device segment
 32509 0000290E 29D8                    	sub	ax,bx
 32510 00002910 F7D8                    	neg	ax			; size of device in paras
 32511 00002912 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 32512                                  	
 32513                                  	; 11/12/2022
 32514 00002915 1F                      	pop	ds
 32515                                  	; ds = cs
 32516                                   	
 32517 00002916 803E[671E]00            	cmp	byte [DeviceHi],0
 32518                                  	;cmp	byte [cs:DeviceHi],0
 32519 0000291B 7405                    	je	short db_lo
 32520                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 32521                                  	;jmp	short db_exit
 32522                                  	; 11/12/2022
 32523 0000291D 891E[5D1E]              	mov	[DevUMBFree],bx
 32524 00002921 C3                      	retn	
 32525                                  db_lo:
 32526                                  	; 11/12/2022
 32527                                  	; ds = cs
 32528                                  	;mov	[cs:memhi],bx
 32529                                  	;mov	word [cs:memlo],0
 32530 00002922 891E[E003]              	mov	[memhi],bx
 32531 00002926 C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 32532                                  db_exit:
 32533                                  	;pop	ds ; 11/12/2022
 32534                                  	; 17/09/2023
 32535                                  ;sd_ret:	; 09/09/2023
 32536 0000292C C3                      	retn
 32537                                  
 32538                                  ; 10/04/2019 - Retro DOS v4.0
 32539                                  
 32540                                  ;----------------------------------------------------------------------------
 32541                                  ;
 32542                                  ; procedure : ParseSize
 32543                                  ;
 32544                                  ;	Parses the command line for SIZE= command
 32545                                  ;
 32546                                  ;	ES:SI = command line to parsed
 32547                                  ;
 32548                                  ;	returns ptr to command line after SIZE= option in ES:SI
 32549                                  ;	updates the DevSizeOption variable with value supplied
 32550                                  ;	in SIZE=option
 32551                                  ;	Returns carry if the SIZE option was invalid
 32552                                  ;
 32553                                  ;----------------------------------------------------------------------------
 32554                                  
 32555                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32556                                  	; (SYSINIT:2D5Ah)
 32557                                  
 32558                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization & BugFix)
 32559                                  	; (MSDOS 6.21 IO.SYS - SYSINIT:3871h) - Retro DOS v4.2 -
 32560                                  	; (PCDOS 7.1 IO.SYS - SYSINIT:3D6Eh)  - Retro DOS v5.0 -
 32561                                  ParseSize:
 32562                                  	;push	bx
 32563                                  	;mov	bx,si
 32564                                  
 32565                                  	; 09/09/2023
 32566 0000292D 56                      	push	si ; * ; mov bx,si
 32567                                  
 32568                                  	; 11/12/2022
 32569                                  	; ds = cs
 32570                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 32571                                  	;mov	[cs:DevCmdLine],si
 32572                                  	;mov	[cs:DevCmdLine+2],es
 32573 0000292E C706[681E]0000          	mov	word [DevSizeOption],0 ; init the value
 32574 00002934 8936[781E]              	mov	[DevCmdLine],si
 32575 00002938 8C06[7A1E]              	mov	[DevCmdLine+2],es	
 32576 0000293C E82400                  	call	SkipDelim
 32577 0000293F 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 32578 00002944 7528                    	jne	short ps_no_size
 32579 00002946 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 32580 0000294C 7520                    	jne	short ps_no_size
 32581 0000294E 268A4404                	mov	al,[es:si+4]
 32582 00002952 E85306                  	call	delim
 32583                                  	;jne	short ps_no_size
 32584                                  	; 22/07/2023 - 09/09/2023 (cf=0)
 32585 00002955 7518                    	jne	short ps_no_size_2 ; cf=0 here
 32586 00002957 83C605                  	add	si,5
 32587 0000295A E81400                  	call	GetHexNum
 32588 0000295D 7210                    	jc	short ps_err
 32589                                  	; 11/12/2022
 32590                                  	; ds = cs
 32591                                  	;mov	[cs:DevSizeOption],ax
 32592 0000295F A3[681E]                	mov	[DevSizeOption],ax
 32593                                  	
 32594                                  	; 09/09/2023
 32595 00002962 58                      	pop	ax  ; * (discard previous si value on top of stack)
 32596                                  
 32597                                  ;	call	SkipDelim ; **
 32598                                  ;	
 32599                                  ;	; 22/07/2023
 32600                                  ;;ps_no_size_2:
 32601                                  ;	; cf = 0
 32602                                  ;	retn
 32603                                  
 32604                                  	; 09/09/2023
 32605                                  	;jmp	short SkipDelim
 32606                                  
 32607                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 32608                                  %if 1
 32609                                  	; 01/11/2022
 32610                                  SkipDelim:
 32611                                  sd_next_char:
 32612 00002963 268A04                  	mov	al,[es:si]
 32613 00002966 E83F06                  	call	delim
 32614 00002969 7505                    	jnz	short sd_ret ; cf=0 ; 09/09/2023
 32615 0000296B 46                      	inc	si
 32616 0000296C EBF5                    	jmp	short sd_next_char ; 01/11/2022
 32617                                  	; 11/12/2022
 32618                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32619                                  ;sd_ret:
 32620                                  	;retn
 32621                                  %endif
 32622                                  
 32623                                  	;;;call	SkipDelim ; **
 32624                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32625                                  	;mov	bx,si
 32626                                  ps_no_size:
 32627                                  	;mov	si,bx
 32628                                  	;pop	bx
 32629 0000296E F8                      	clc	; cf=0
 32630                                  	;retn
 32631                                  	; 11/12/2022
 32632                                  ps_err:		; cf=1
 32633                                  ps_no_size_2:	; 09/09/2023 (cf=0)
 32634                                  	; 09/09/2023
 32635 0000296F 5E                      	pop	si ; * ; mov si,bx
 32636                                  	; 17/09/2023
 32637                                  sd_ret:	; cf=?
 32638 00002970 C3                      	retn
 32639                                  
 32640                                  ;ps_err:
 32641                                  	; 02/11/2022
 32642                                  	;pop	bx
 32643                                  	;stc
 32644                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32645                                  	; 11/12/2022
 32646                                  	; cf=1
 32647                                  	;stc
 32648                                  	; 11/12/2022
 32649                                  ;sd_ret: 
 32650                                  	; 22/07/2023
 32651                                  	; 12/04/2019
 32652                                  	;retn
 32653                                  
 32654                                  ; 12/04/2019 - Retro DOS v4.0
 32655                                  
 32656                                  ;----------------------------------------------------------------------------
 32657                                  ;
 32658                                  ; procedure : SkipDelim
 32659                                  ;
 32660                                  ;	Skips delimiters in the string pointed to by ES:SI
 32661                                  ;	Returns ptr to first non-delimiter character in ES:SI
 32662                                  ;
 32663                                  ;----------------------------------------------------------------------------
 32664                                  
 32665                                  ; 09/09/2023 - Retro DOS v4.2 IO.SYS (Optimization)
 32666                                  %if 0
 32667                                  	; 01/11/2022
 32668                                  SkipDelim:
 32669                                  sd_next_char:
 32670                                  	mov	al,[es:si]
 32671                                  	call	delim
 32672                                  	jnz	short sd_ret
 32673                                  	inc	si
 32674                                  	jmp	short sd_next_char ; 01/11/2022
 32675                                  	; 11/12/2022
 32676                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32677                                  ;sd_ret:
 32678                                  	;retn
 32679                                  %endif
 32680                                  
 32681                                  ;----------------------------------------------------------------------------
 32682                                  ;
 32683                                  ; procedure : GetHexNum
 32684                                  ;
 32685                                  ;	Converts an ascii string terminated by a delimiter into binary.
 32686                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 32687                                  ;
 32688                                  ;	Returns in AX the number number of paras equivalent to the
 32689                                  ;	hex number of bytes specified by the hexadecimal string.
 32690                                  ;
 32691                                  ;	Returns carry in case it encountered a non-hex character or
 32692                                  ;	if it encountered crlf
 32693                                  ;
 32694                                  ;----------------------------------------------------------------------------
 32695                                  
 32696                                  ; 13/05/2019
 32697                                  
 32698                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32699                                  	; (SYSINIT:2DA5h)
 32700                                  GetHexNum:
 32701 00002971 31C0                    	xor	ax,ax
 32702 00002973 31D2                    	xor	dx,dx
 32703                                  ghn_next:
 32704 00002975 268A1C                  	mov	bl,[es:si]
 32705 00002978 80FB0D                  	cmp	bl,cr  ; 0Dh
 32706 0000297B 7436                    	je	short ghn_err
 32707 0000297D 80FB0A                  	cmp	bl,lf  ; 0Ah
 32708 00002980 7431                    	je	short ghn_err
 32709 00002982 50                      	push	ax
 32710 00002983 88D8                    	mov	al,bl
 32711 00002985 E82006                  	call	delim
 32712 00002988 58                      	pop	ax
 32713                                  	; 04/01/2023
 32714 00002989 B90400                  	mov	cx,4
 32715 0000298C 7410                    	jz	short ghn_into_paras
 32716 0000298E E82400                  	call	GetNibble
 32717                                  	;jc	short ghn_err
 32718                                  	; 11/12/2022
 32719 00002991 7221                    	jc	short ghn_ret ; cf=1
 32720                                  	; 04/01/2023
 32721                                  	;mov	cx,4
 32722                                  ghn_shift1:
 32723 00002993 D1E0                    	shl	ax,1
 32724 00002995 D1D2                    	rcl	dx,1
 32725 00002997 E2FA                    	loop	ghn_shift1
 32726 00002999 08D8                    	or	al,bl
 32727 0000299B 46                      	inc	si
 32728 0000299C EBD7                    	jmp	short ghn_next
 32729                                  ghn_into_paras:
 32730 0000299E 83C00F                  	add	ax,15
 32731 000029A1 83D200                  	adc	dx,0
 32732 000029A4 F7C2F0FF                	test	dx,0FFF0h
 32733 000029A8 7509                    	jnz	short ghn_err
 32734                                  	; 04/01/2023
 32735                                  	;mov	cx,4
 32736                                  ghn_shift2:
 32737 000029AA F8                      	clc
 32738 000029AB D1DA                    	rcr	dx,1
 32739 000029AD D1D8                    	rcr	ax,1
 32740 000029AF E2F9                    	loop	ghn_shift2
 32741 000029B1 F8                      	clc
 32742 000029B2 C3                      	retn
 32743                                  	; 11/12/2022
 32744                                  ghn_err:
 32745                                  gnib_err:
 32746 000029B3 F9                      	stc
 32747                                  ghn_ret:
 32748                                  gnib_ret:
 32749 000029B4 C3                      	retn
 32750                                  
 32751                                  ;----------------------------------------------------------------------------
 32752                                  ;
 32753                                  ; procedure : GetNibble
 32754                                  ;
 32755                                  ;	Convert one nibble (hex digit) in BL into binary
 32756                                  ;
 32757                                  ;	Retruns binary value in BL
 32758                                  ;
 32759                                  ;	Returns carry if BL contains non-hex digit
 32760                                  ;
 32761                                  ;----------------------------------------------------------------------------
 32762                                  
 32763                                  GetNibble:
 32764 000029B5 80FB30                  	cmp	bl,'0'
 32765                                  	;jb	short gnib_err
 32766                                  	; 11/12/2022
 32767 000029B8 72FA                    	jb	short gnib_ret ; cf=1
 32768 000029BA 80FB39                  	cmp	bl,'9'
 32769 000029BD 7704                    	ja	short is_it_hex
 32770 000029BF 80EB30                  	sub	bl,'0'		; clc
 32771 000029C2 C3                      	retn
 32772                                  is_it_hex:
 32773 000029C3 80FB41                  	cmp	bl,'A'
 32774                                  	;jb	short gnib_err
 32775                                  	; 11/12/2022
 32776 000029C6 72EC                    	jb	short gnib_ret ; cf=1
 32777 000029C8 80FB46                  	cmp	bl,'F'
 32778 000029CB 77E6                    	ja	short gnib_err ; 11/12/2022
 32779 000029CD 80EB37                  	sub	bl,'A'- 10	; clc
 32780 000029D0 C3                      	retn
 32781                                  
 32782                                  	; 11/12/2022
 32783                                  ;gnib_err:
 32784                                  ;	stc
 32785                                  ;gnib_ret:
 32786                                  ;	retn
 32787                                  
 32788                                  ;============================================================================
 32789                                  
 32790                                  ; 12/04/2019 - Retro DOS v4.0
 32791                                  
 32792                                  ; umb.inc (MSDOS 6.0, 1991)
 32793                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 32794                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 32795                                  
 32796                                  XMM_REQUEST_UMB	equ 10h
 32797                                  XMM_RELEASE_UMB	equ 11h
 32798                                  
 32799                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32800                                  
 32801                                  ;---------------------------------------------------------------------------
 32802                                  ;
 32803                                  ; Procedure Name	: umb_insert
 32804                                  ;
 32805                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 32806                                  ;			: BX = seg address of UMB to be linked in
 32807                                  ;			: DX = size of UMB to be linked in paras
 32808                                  ;			; DS = data
 32809                                  ;
 32810                                  ; Outputs		: links the UMB into the arena chain
 32811                                  ;
 32812                                  ; Uses			: AX, CX, ES, DX, BX
 32813                                  ;
 32814                                  ;---------------------------------------------------------------------------
 32815                                  
 32816                                  umb_insert:
 32817 000029D1 1E                      	push	ds
 32818                                  
 32819                                  	; 31/12/2022
 32820                                  	; ds = cs
 32821                                  
 32822                                  	;mov	ds,[cs:DevDOSData]
 32823 000029D2 8E1E[761E]              	mov	ds,[DevDOSData] ; 31/12/2022 
 32824                                  	;mov	ds,[8Ch]
 32825 000029D6 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 32826 000029DA 8CD8                    	mov	ax,ds
 32827 000029DC 8EC0                    	mov	es,ax
 32828                                  ui_next:
 32829 000029DE 39D8                    	cmp	ax,bx			; Q: is current block above
 32830                                  					;    new block
 32831 000029E0 770F                    	ja	short ui_insert		; Y: insert it
 32832                                  					; Q: is current block the
 32833                                  					;    last
 32834 000029E2 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 32835 000029E8 745C                    	je	short ui_append		; Y: append new block to chain
 32836                                  					; N: get next block
 32837 000029EA 8ED8                    	mov	ds,ax			; M005
 32838                                  	;call	get_next		; ax = es = next block
 32839 000029EC E83B01                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 32840 000029EF EBED                    	jmp	short ui_next
 32841                                  
 32842                                  ui_insert:
 32843 000029F1 8CD9                    	mov	cx,ds			; ds = previous arena
 32844 000029F3 41                      	inc	cx			; top of previous block
 32845                                  
 32846 000029F4 29D9                    	sub	cx,bx
 32847 000029F6 F7D9                    	neg	cx			; cx = size of used block
 32848                                  	;mov	byte [0],'M'
 32849 000029F8 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32850                                  	;mov	word [1],8
 32851 000029FD C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 32852                                  	;mov	[3],cx
 32853 00002A03 890E0300                	mov	[ARENA.SIZE],cx	
 32854                                  	;mov	word [8],4353h ; 'SC'
 32855 00002A07 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 32856                                  
 32857                                  ; prepare the arena at start of new block
 32858                                  
 32859 00002A0D 8EC3                    	mov	es,bx
 32860 00002A0F 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 32861 00002A15 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 32862                                  					; mark as free
 32863 00002A1C 83EA02                  	sub	dx,2			; make room for arena at
 32864                                  					; start & end of new block
 32865 00002A1F 2689160300              	mov	[es:ARENA.SIZE],dx
 32866                                  
 32867                                  ; prepare arena at end of new block
 32868                                  	
 32869 00002A24 01D3                    	add	bx,dx
 32870 00002A26 43                      	inc	bx
 32871 00002A27 8EC3                    	mov	es,bx			; es=arena at top of new block
 32872 00002A29 43                      	inc	bx			; bx=top of new block
 32873                                  
 32874                                  					; ax contains arena just above
 32875                                  					; this block
 32876 00002A2A 29D8                    	sub	ax,bx			; ax = size of used block
 32877                                  	
 32878 00002A2C 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32879 00002A32 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32880 00002A39 26A30300                	mov	[es:ARENA.SIZE],ax	
 32881 00002A3D 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 32882                                  
 32883 00002A44 EB47                    	jmp	short ui_done
 32884                                  
 32885                                  ui_append:
 32886                                  					; es = arena of last block	
 32887 00002A46 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 32888 00002A4B 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 32889                                  					; going to rsrv on top of this 
 32890                                  					; block for the next arena.
 32891                                  	; 13/05/2019
 32892 00002A51 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32893                                  
 32894 00002A57 89C1                    	mov	cx,ax			; cx=top of prev block-1
 32895 00002A59 40                      	inc	ax
 32896 00002A5A 29D8                    	sub	ax,bx			; ax=top of prev block - 
 32897                                  					;    seg. address of new block
 32898 00002A5C F7D8                    	neg	ax
 32899                                  
 32900 00002A5E 8EC1                    	mov	es,cx			; ds = arena of unused block
 32901                                  
 32902 00002A60 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 32903 00002A66 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 32904 00002A6D 26A30300                	mov	[es:ARENA.SIZE],ax	
 32905 00002A71 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 32906                                  
 32907                                  ; prepare the arena at start of new block
 32908 00002A78 8EC3                    	mov	es,bx
 32909 00002A7A 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 32910 00002A80 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 32911                                  					; mark as free
 32912 00002A87 4A                      	dec	dx			; make room for arena
 32913 00002A88 2689160300              	mov	[es:ARENA.SIZE],dx	
 32914                                  ui_done:
 32915                                  uc_done: ; 31/12/2022 ; *!
 32916 00002A8D 1F                      	pop	ds
 32917                                  	; ds = cs ; 31/12/2022
 32918                                  ;uc_done:	; 18/12/2022
 32919                                  au_exit:	; 09/09/2023
 32920 00002A8E C3                      	retn
 32921                                  
 32922                                  ;----------------------------------------------------------------------------
 32923                                  ;
 32924                                  ; procedure : AllocUMB
 32925                                  ;
 32926                                  ;	Allocate all UMBs and link it to DOS arena chain
 32927                                  ;
 32928                                  ;----------------------------------------------------------------------------
 32929                                  
 32930                                  AllocUMB:
 32931                                  	; 31/12/2022
 32932                                  	; ds = cs
 32933 00002A8F E84700                  	call	InitAllocUMB		; link in the first UMB
 32934 00002A92 72FA                    	jc	short au_exit		; quit on error
 32935                                  au_next:
 32936 00002A94 E87000                  	call	umb_allocate		; allocate
 32937 00002A97 7205                    	jc	short au_coalesce
 32938 00002A99 E835FF                  	call	umb_insert		; & insert till no UMBs
 32939 00002A9C EBF6                    	jmp	short au_next
 32940                                  au_coalesce:
 32941                                  	; 09/09/2023
 32942                                  ;	call	umb_coalesce		; coalesce all UMBs
 32943                                  ;au_exit:
 32944                                  ;	; 31/12/2022
 32945                                  ;	; ds = cs
 32946                                  ;	retn
 32947                                  
 32948                                  	; 09/09/2023
 32949                                  	;jmp	short umb_coalesce
 32950                                  
 32951                                  ; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 32952                                  
 32953                                  ;----------------------------------------------------------------------------
 32954                                  ;
 32955                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 32956                                  ;
 32957                                  ;	Coalesce adds the block following the argument to the argument block,
 32958                                  ;	iff it's free. Coalesce is usually used to join free blocks, but
 32959                                  ;	some callers (such as $setblock) use it to join a free block to it's
 32960                                  ;	preceeding allocated block.
 32961                                  ;
 32962                                  ;	EXIT	'C' clear if OK
 32963                                  ;		  (ds) unchanged, this block updated
 32964                                  ;		  (ax) = address of next block, IFF not at end
 32965                                  ;		'C' set if arena trashed
 32966                                  ;	USES	cx, di, ds, es
 32967                                  ;
 32968                                  ;----------------------------------------------------------------------------
 32969                                  
 32970                                  umb_coalesce:
 32971                                  	; 31/12/2022
 32972                                  	; ds = cs
 32973 00002A9E 1E                      	push	ds ; *!
 32974                                  
 32975 00002A9F 31FF                    	xor	di, di
 32976                                  
 32977                                  	;mov	es,[cs:DevDOSData]
 32978                                  	; 31/12/2022
 32979 00002AA1 8E06[761E]              	mov	es,[DevDOSData]
 32980 00002AA5 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 32981                                  uc_nextfree:
 32982 00002AAA 8CC0                    	mov	ax,es
 32983 00002AAC 8ED8                    	mov	ds,ax
 32984                                  	;cmp	[es:1],di
 32985 00002AAE 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 32986 00002AB3 7407                    	je	short uc_again		; Y: try to coalesce with next block
 32987                                  					; N: get next arena
 32988 00002AB5 E86B00                  	call	get_next		; es, ax = next arena
 32989 00002AB8 72D3                    	jc	short uc_done	; *!
 32990 00002ABA EBEE                    	jmp	short uc_nextfree
 32991                                  uc_again:
 32992 00002ABC E86400                  	call	get_next		; ES, AX <- next block
 32993 00002ABF 72CC                    	jc	short uc_done	; *!
 32994                                  uc_check:
 32995 00002AC1 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 32996 00002AC6 75E2                    	jne	short uc_nextfree	; N: get next free arena
 32997                                  					; Y: coalesce
 32998 00002AC8 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 32999 00002ACD 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 33000                                  	;add	[3],cx
 33001 00002ACE 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 33002 00002AD2 268A0D                  	mov     cl,[es:di]              ; move up signature
 33003 00002AD5 880D                    	mov     [di],cl
 33004 00002AD7 EBE3                    	jmp     short uc_again		; try again
 33005                                  
 33006                                  	; 18/12/2022
 33007                                  ;uc_done:
 33008                                  	;retn
 33009                                  
 33010                                  ;----------------------------------------------------------------------------
 33011                                  ;
 33012                                  ; procedure : InitAllocUMB
 33013                                  ;
 33014                                  ;----------------------------------------------------------------------------
 33015                                  
 33016                                  InitAllocUMB:
 33017                                  	; 31/12/2022
 33018                                  	; ds = cs
 33019 00002AD9 E82ADF                  	call	IsXMSLoaded
 33020 00002ADC 7527                    	jnz	short iau_err		; quit on no XMS driver
 33021 00002ADE B452                    	mov	ah,52h
 33022 00002AE0 CD21                    	int	21h			; get DOS DATA seg
 33023                                  	; 31/12/2022
 33024                                  	; ds = cs
 33025                                  	;mov	[cs:DevDOSData],es	; & save it for later
 33026 00002AE2 8C06[761E]              	mov	[DevDOSData],es		; & save it for later
 33027 00002AE6 B81043                  	mov	ax,4310h
 33028 00002AE9 CD2F                    	int	2Fh
 33029                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 33030                                  	;mov	[cs:DevXMSAddr+2],es
 33031 00002AEB 891E[5F1E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 33032 00002AEF 8C06[611E]              	mov	[DevXMSAddr+2],es	
 33033                                  	; 31/12/2022
 33034 00002AF3 803E[751E]00            	cmp	byte [FirstUMBLinked],0 
 33035                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 33036                                  	;jne	short ia_1		; quit if we already did it
 33037                                  	; 12/12/2022
 33038 00002AF8 770A                    	ja	short ia_1 ; cf=0
 33039 00002AFA E83900                  	call	LinkFirstUMB		; else link the first UMB
 33040                                  	;jc	short iau_err
 33041                                  	; 12/12/2022
 33042 00002AFD 7207                    	jc	short iau_err2  ; cf=1
 33043                                  	; 31/12/2022
 33044                                  	; ds = cs
 33045 00002AFF C606[751E]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 33046                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 33047                                  ia_1:
 33048                                  	; 12/12/2022
 33049                                  	; cf=0
 33050                                  	;clc
 33051 00002B04 C3                      	retn
 33052                                  iau_err:
 33053 00002B05 F9                      	stc
 33054                                  iau_err2:
 33055 00002B06 C3                      	retn
 33056                                  
 33057                                  ;-------------------------------------------------------------------------
 33058                                  ;
 33059                                  ; Procedure Name	: umb_allocate
 33060                                  ;
 33061                                  ; Inputs		: DS = data
 33062                                  ;
 33063                                  ; Outputs		: if UMB available
 33064                                  ;				Allocates the largest available UMB and 
 33065                                  ;			  	BX = segment of allocated block
 33066                                  ;				DX = size of allocated block
 33067                                  ;				NC
 33068                                  ;			  else 
 33069                                  ;				CY
 33070                                  ;
 33071                                  ; Uses			: BX, DX
 33072                                  ;
 33073                                  ;-------------------------------------------------------------------------
 33074                                  
 33075                                  umb_allocate:
 33076                                  	; 31/12/2022
 33077                                  	; ds = cs
 33078 00002B07 50                      	push	ax
 33079 00002B08 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 33080 00002B0A BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 33081                                  					;   possible
 33082                                  	; 31/12/2022
 33083 00002B0D FF1E[5F1E]              	call	far [DevXMSAddr]
 33084                                  	;call	far [cs:DevXMSAddr]
 33085                                  					; dx now contains the size of
 33086                                  					; the largest UMB
 33087 00002B11 09D2                    	or	dx,dx
 33088 00002B13 740B                    	jz	short ua_err
 33089                                  	
 33090 00002B15 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 33091                                  
 33092                                  	; 31/12/2022
 33093 00002B17 FF1E[5F1E]              	call	far [DevXMSAddr]
 33094                                  	;call	far [cs:DevXMSAddr]
 33095                                  
 33096 00002B1B 83F801                  	cmp	ax,1			; Q: was the reqst successful
 33097                                  	;jne	short ua_err		; N: error
 33098                                  	; 14/08/2023
 33099 00002B1E 7601                    	jna	short ua_done ; if ax=1 then cf=0, else cf=1 (ax=0)
 33100                                  ua_err:
 33101 00002B20 F9                      	stc	
 33102                                  
 33103                                  	;clc
 33104                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33105                                  	; 12/12/2022
 33106                                  	; cf=0
 33107                                  	;clc 
 33108                                  ua_done:
 33109 00002B21 58                      	pop	ax
 33110 00002B22 C3                      	retn
 33111                                  	; 14/08/2023
 33112                                  ;ua_err:
 33113                                  	;stc
 33114                                  	;jmp	short ua_done
 33115                                  
 33116                                  ; 13/04/2019 - Retro DOS v4.0
 33117                                  
 33118                                  ;----------------------------------------------------------------------------
 33119                                  ;
 33120                                  ;**	get_next - Find Next item in Arena
 33121                                  ;
 33122                                  ;	ENTRY	dS - pointer to block head
 33123                                  ;	EXIT	AX,ES - pointers to next head
 33124                                  ;		'C' set if arena damaged
 33125                                  ;
 33126                                  ;----------------------------------------------------------------------------
 33127                                  
 33128                                  	; 01/11/2022
 33129                                  get_next:
 33130 00002B23 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 33131 00002B28 740A                    	je	short gn_err
 33132                                  _get_next_:
 33133 00002B2A 8CD8                    	mov     ax,ds                   ; ax=current block
 33134 00002B2C 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 33135 00002B30 40                      	inc     ax                      ; remember that header!
 33136 00002B31 8EC0                    	mov	es,ax
 33137                                  	;clc
 33138                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33139                                  	; 11/12/2022
 33140                                  	; cf=0
 33141                                  	;clc
 33142 00002B33 C3                      	retn
 33143                                  gn_err:
 33144 00002B34 F9                      	stc
 33145                                  	; 11/12/2022	
 33146                                  lfu_err:	 ; cf=1
 33147 00002B35 C3                      	retn
 33148                                  
 33149                                  ;----------------------------------------------------------------------------
 33150                                  ;
 33151                                  ; procedure : LinkFirstUMB
 33152                                  ;
 33153                                  ;----------------------------------------------------------------------------
 33154                                  
 33155                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33156                                  	; (SYSINIT:2F81h)
 33157                                  LinkFirstUMB:
 33158                                  	; 31/12/2022
 33159                                  	; ds = cs
 33160 00002B36 E8CEFF                  	call	umb_allocate
 33161 00002B39 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 33162                                  
 33163                                  ; bx = segment of allocated UMB
 33164                                  ; dx = size of UMB
 33165                                  
 33166                                  	; 31/12/2022
 33167                                  	; ds = cs
 33168                                  
 33169 00002B3B CD12                    	int	12h			; ax = size of memory
 33170 00002B3D B106                    	mov	cl,6
 33171 00002B3F D3E0                    	shl	ax,cl			; ax = size in paragraphs
 33172                                  
 33173 00002B41 89C1                    	mov	cx,ax			; cx = size in paras
 33174 00002B43 29D8                    	sub	ax,bx			; ax = - size of unused block
 33175                                  
 33176 00002B45 F7D8                    	neg	ax
 33177                                  
 33178                                  	;sub	cx,1			; cx = first umb_arena
 33179                                  	; 09/09/2023
 33180 00002B47 49                      	dec	cx
 33181 00002B48 8EC1                    	mov	es,cx			; es = first umb_arena
 33182                                  	
 33183 00002B4A 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33184 00002B50 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 33185                                  					
 33186 00002B57 26A30300                	mov	[es:ARENA.SIZE],ax	
 33187 00002B5B 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 33188                                  
 33189                                  ; put in the arena for the first UMB
 33190                                  
 33191 00002B62 8EC3                    	mov	es,bx			; es has first free umb seg
 33192 00002B64 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33193 00002B6A 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 33194                                  					; mark as free 
 33195 00002B71 4A                      	dec	dx			; make room for arena
 33196 00002B72 2689160300              	mov	[es:ARENA.SIZE],dx	
 33197                                  
 33198                                  	;mov	es,[cs:DevDOSData]
 33199                                  	; 31/12/2022
 33200 00002B77 8E06[761E]              	mov	es,[DevDOSData] ; ds = cs
 33201                                  	; 18/09/2023
 33202 00002B7B 26890E8C00              	mov	[es:UMB_ARENA],cx
 33203                                  	;mov	di,UMB_ARENA ; 8Ch
 33204                                  	;mov	[es:di],cx		; initialize umb_head in DOS
 33205                                  					;  data segment with the arena
 33206                                  					;  just below Top of Mem
 33207                                  
 33208                                  ; we must now scan the arena chain and update the size of the last arena
 33209                                  
 33210                                  	;mov	di,DOS_ARENA ; 24h
 33211                                  	;mov	es,[es:di]		; es = start arena
 33212                                  	; 18/09/2023
 33213 00002B80 268E062400              	mov	es,[es:DOS_ARENA]
 33214 00002B85 31FF                    	xor	di,di
 33215                                  ;scan_next
 33216                                  ; 09/12/2022
 33217                                  scannext:
 33218 00002B87 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 33219 00002B8B 740C                    	je	short got_last
 33220                                  	
 33221 00002B8D 8CC0                    	mov	ax,es
 33222 00002B8F 2603060300              	add	ax,[es:ARENA.SIZE]
 33223 00002B94 40                      	inc	ax
 33224 00002B95 8EC0                    	mov	es,ax
 33225                                  	;jmp	short scan_next
 33226                                  	; 09/12/2022
 33227 00002B97 EBEE                    	jmp	short scannext
 33228                                  got_last:
 33229                                  	;sub	word [es:ARENA.SIZE],1
 33230                                  	; 09/09/2023
 33231 00002B99 26FF0E0300              	dec	word [es:ARENA.SIZE]
 33232                                  
 33233 00002B9E 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 33234                                  	;clc
 33235                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33236                                  	; 11/12/2022
 33237                                  	; cf=0
 33238                                  	;clc
 33239 00002BA4 C3                      	retn
 33240                                  
 33241                                  ; 11/12/2022
 33242                                  ;;lfu_err:
 33243                                  ;	;stc
 33244                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33245                                  ;	; 11/12/2022
 33246                                  ;	; cf=1
 33247                                  ;	;stc
 33248                                  ;	retn
 33249                                  
 33250                                  ;----------------------------------------------------------------------------
 33251                                  ;
 33252                                  ; procedure : ShrinkUMB
 33253                                  ;
 33254                                  ;	Shrinks the current UMB in use, so that the unused portions
 33255                                  ;	of the UMB is given back to the DOS free mem pool
 33256                                  ;
 33257                                  ;----------------------------------------------------------------------------
 33258                                  
 33259                                  ShrinkUMB:
 33260                                  	; 12/12/2022
 33261                                  	; ds = cs
 33262 00002BA5 833E[591E]00            	cmp	word [DevUMBAddr],0
 33263                                  	;cmp	word [cs:DevUMBAddr],0
 33264 00002BAA 7421                    	je	short su_exit
 33265 00002BAC 06                      	push	es
 33266 00002BAD 53                      	push	bx
 33267                                  	; 12/12/2022
 33268                                  	;mov	bx,[cs:DevUMBFree]
 33269                                  	;sub	bx,[cs:DevUMBAddr]
 33270                                  	;mov	es,[cs:DevUMBAddr]
 33271 00002BAE 8B1E[5D1E]              	mov	bx,[DevUMBFree]
 33272 00002BB2 2B1E[591E]              	sub	bx,[DevUMBAddr]
 33273 00002BB6 8E06[591E]              	mov	es,[DevUMBAddr]
 33274                                  	
 33275 00002BBA B8004A                  	mov	ax,4A00h
 33276 00002BBD CD21                    	int	21h
 33277                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 33278                                  		; ES = segment address of block to change
 33279                                  		; BX = new size in paragraphs
 33280 00002BBF 8CC0                    	mov	ax,es
 33281 00002BC1 48                      	dec	ax
 33282 00002BC2 8EC0                    	mov	es,ax
 33283 00002BC4 26C70601000800          	mov	word [es:ARENA.OWNER],8
 33284 00002BCB 5B                      	pop	bx
 33285 00002BCC 07                      	pop	es
 33286                                  su_exit:
 33287 00002BCD C3                      	retn
 33288                                  
 33289                                  ;----------------------------------------------------------------------------
 33290                                  ;
 33291                                  ; procedure : UnlinkUMB
 33292                                  ;
 33293                                  ;	Unlinks the UMBs from the DOS arena chain
 33294                                  ;
 33295                                  ;----------------------------------------------------------------------------
 33296                                  
 33297                                  UnlinkUMB:
 33298                                  	; 12/12/2022
 33299                                  	; ds = cs
 33300 00002BCE 1E                      	push	ds
 33301 00002BCF 06                      	push	es
 33302                                  	; 12/12/2022
 33303 00002BD0 803E[751E]00            	cmp	byte [FirstUMBLinked],0
 33304                                  	;cmp	byte [cs:FirstUMBLinked],0
 33305 00002BD5 7420                    	je	short ulu_x		; nothing to unlink
 33306                                  	; 12/12/2022
 33307 00002BD7 8E06[761E]              	mov	es,[DevDOSData]
 33308                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 33309 00002BDB 268E1E2400              	mov	ds,[es:DOS_ARENA]
 33310 00002BE0 268B3E8C00              	mov	di,[es:UMB_ARENA]
 33311                                  ulu_next:
 33312 00002BE5 E83BFF                  	call	get_next
 33313 00002BE8 720D                    	jc	short ulu_x
 33314 00002BEA 39C7                    	cmp	di,ax			; is the next one UMB ?
 33315 00002BEC 7404                    	je	short ulu_found
 33316 00002BEE 8ED8                    	mov	ds,ax
 33317 00002BF0 EBF3                    	jmp	short ulu_next
 33318                                  ulu_found:
 33319                                  	;mov	byte [0],'Z'
 33320 00002BF2 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 33321                                  ulu_x:
 33322 00002BF7 07                      	pop	es
 33323 00002BF8 1F                      	pop	ds
 33324 00002BF9 C3                      	retn
 33325                                  
 33326                                  ; ----------------------------------------------------------------------
 33327                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 33328                                  ; ----------------------------------------------------------------------
 33329                                  ; 14/04/2019 - Retro DOS v4.0
 33330                                  
 33331                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 33332                                  ;
 33333                                  ; Summary:
 33334                                  ;
 33335                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 33336                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 33337                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 33338                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 33339                                  ;   and/or config.inc for the full list.
 33340                                  ;
 33341                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 33342                                  ;   configuration support. blockname is either MENU, which contains one
 33343                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 33344                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 33345                                  ;   INCLUDE allows the current block to name another block for inclusion
 33346                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 33347                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 33348                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 33349                                  ;
 33350                                  ; Example:
 33351                                  ;
 33352                                  ;   [menu]
 33353                                  ;   menuitem=misc,Miscellaneous
 33354                                  ;   menuitem=network,Network Configuration
 33355                                  ;   menudefault=network,15
 33356                                  ;
 33357                                  ;   [network]
 33358                                  ;   include misc
 33359                                  ;   device=foo
 33360                                  ;
 33361                                  ;   [misc]
 33362                                  ;   device=bar
 33363                                  ;   include alternate
 33364                                  ;
 33365                                  ;   [alternate]
 33366                                  ;   device=tar
 33367                                  ;
 33368                                  ;
 33369                                  ;   When the menu is displayed
 33370                                  ;
 33371                                  ;    1. Miscellaneous
 33372                                  ;    2. Network Configuration
 33373                                  ;
 33374                                  ;   #2 is highlighted as the default option, and will be automatically
 33375                                  ;   selected after 15 seconds. It will invoke the following lines in the
 33376                                  ;   following order:
 33377                                  ;
 33378                                  ;       DEVICE=BAR
 33379                                  ;       DEVICE=TAR
 33380                                  ;       DEVICE=FOO
 33381                                  ;
 33382                                  
 33383                                  ;MULTI_CONFIG equ 1
 33384                                  
 33385                                  ; the following depend on the positions of the various letters in switchlist
 33386                                  
 33387                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 33388                                  
 33389                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 33390                                  flagdrive	equ 00001000b ; 8 
 33391                                  flagcyln	equ 00010000b ; 16
 33392                                  flagseclim	equ 00100000b ; 32
 33393                                  flagheads	equ 01000000b ; 64
 33394                                  flagff		equ 10000000b ; 128
 33395                                  
 33396                                  ;----------------------------------------------------------------------------
 33397                                  ; 19/04/2019 - Retro DOS v4.0
 33398                                  
 33399                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 33400                                  
 33401                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33402                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 33403                                  
 33404 00002BFA 00                      insert_blank:	db 	0
 33405                                  
 33406                                  ;----------------------------------------------------------------------------
 33407                                  ;
 33408                                  ; procedure : setparms
 33409                                  ;
 33410                                  ; the following set of routines is used to parse the drivparm = command in
 33411                                  ; the config.sys file to change the default drive parameters.
 33412                                  ;
 33413                                  ;----------------------------------------------------------------------------
 33414                                  
 33415                                  setparms:
 33416 00002BFB 1E                      	push	ds
 33417 00002BFC 50                      	push	ax
 33418 00002BFD 53                      	push	bx
 33419 00002BFE 51                      	push	cx
 33420 00002BFF 52                      	push	dx
 33421                                  
 33422 00002C00 0E                      	push	cs
 33423 00002C01 1F                      	pop	ds
 33424                                  
 33425 00002C02 31DB                    	xor	bx,bx
 33426 00002C04 8A1E[8435]              	mov	bl,[drive]
 33427                                  	; 18/12/2022
 33428 00002C08 43                      	inc	bx
 33429                                  	;inc	bl			; get it correct for ioctl call
 33430                                  					; (1=a,2=b...)
 33431 00002C09 BA[5C34]                	mov	dx,deviceparameters
 33432                                  	;mov	ah,IOCTL ; 44h
 33433                                  	;mov	al,GENERIC_IOCTL ; 0Dh
 33434                                  	; 14/08/2023
 33435 00002C0C B80D44                  	mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 33436                                  	;mov	ch,RAWIO ; 8
 33437                                  	;mov	cl,SET_DEVICE_PARAMETERS ; 40h
 33438                                  	; 14/08/2023
 33439 00002C0F B94008                  	mov	cx,(RAWIO<<8)|SET_DEVICE_PARAMETERS 
 33440 00002C12 CD21                    	int	21h
 33441                                  
 33442                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33443                                  ;
 33444                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 33445                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 33446                                  ;	; 21/10/2022
 33447                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 33448                                  ;	mov	ds,ax			; set Bios_Data segment
 33449                                  ;
 33450                                  ;	test	word [cs:switches],flagec35 ; 4
 33451                                  ;	jz	short not_ec35
 33452                                  
 33453                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33454                                  	;test	word [switches],flagec35 ; 4
 33455                                  	; 12/12/2022
 33456 00002C14 F606[8535]04            	test	byte [switches],flagec35 ; 4
 33457 00002C19 7411                    	jz	short eot_ok
 33458                                  
 33459                                  	;mov	cl,[cs:drive]		; which drive was this for?
 33460                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33461 00002C1B 8A0E[8435]              	mov	cl,[drive]
 33462 00002C1F B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 33463 00002C22 8ED8                    	mov	ds,ax	
 33464                                  
 33465 00002C24 B001                    	mov	al,1			; assume drive 0
 33466 00002C26 D2E0                    	shl	al,cl			; set proper bit depending on drive
 33467                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 33468 00002C28 0806[2805]              	or	[ec35_flag],al		; set the bit in the permanent flags
 33469                                  
 33470                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33471                                  ;
 33472                                  ;not_ec35:
 33473                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 33474                                  ;;	sectors per track than any old ones.
 33475                                  ;
 33476                                  ;	;mov	al,[cs:deviceparameters+20]
 33477                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 33478                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 33479                                  ;	cmp	al,[EOT]
 33480                                  ;	jbe	short eot_ok
 33481                                  ;	mov	[EOT],al
 33482                                  
 33483                                  eot_ok:
 33484 00002C2C 5A                      	pop	dx			; fix up all the registers
 33485 00002C2D 59                      	pop	cx
 33486 00002C2E 5B                      	pop	bx
 33487 00002C2F 58                      	pop	ax
 33488 00002C30 1F                      	pop	ds ; 13/05/2019
 33489 00002C31 C3                      	retn
 33490                                  
 33491                                  ;----------------------------------------------------------------------------
 33492                                  ;
 33493                                  ; procedure : diddleback
 33494                                  ;
 33495                                  ; replace default values for further drivparm commands
 33496                                  ;
 33497                                  ;----------------------------------------------------------------------------
 33498                                  
 33499                                  diddleback:
 33500 00002C32 1E                      	push	ds
 33501 00002C33 0E                      	push	cs
 33502 00002C34 1F                      	pop	ds
 33503                                  	;mov	word [deviceparameters+4],80
 33504 00002C35 C706[6034]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33505                                  	;mov	byte [deviceparameters+1],2
 33506 00002C3B C606[5D34]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 33507                                  	;mov	word [deviceparameters+2],0
 33508 00002C40 C706[5E34]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 33509 00002C46 C706[8535]0000          	mov	word [switches],0	    ; zero all switches
 33510 00002C4C 1F                      	pop	ds
 33511 00002C4D C3                      	retn
 33512                                  
 33513                                  ; 04/01/2023
 33514                                  %if 0
 33515                                  
 33516                                  ; 15/04/2019 - Retro DOS v4.0
 33517                                  
 33518                                  ;----------------------------------------------------------------------------
 33519                                  ;
 33520                                  ; procedure : parseline
 33521                                  ;
 33522                                  ; entry point is parseline. al contains the first character in command line.
 33523                                  ;
 33524                                  ;----------------------------------------------------------------------------
 33525                                  
 33526                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33527                                  	; (SYSINIT:30ACh)
 33528                                  
 33529                                  parseline:
 33530                                  	push	ds
 33531                                  
 33532                                  	push	cs
 33533                                  	pop	ds
 33534                                  
 33535                                  nextswtch:
 33536                                  	cmp	al,cr			; carriage return?
 33537                                  	je	short done_line
 33538                                  	cmp	al,lf			; linefeed?
 33539                                  	je	short put_back		; put it back and done
 33540                                  
 33541                                  ; anything less or equal to a space is ignored.
 33542                                  
 33543                                  	cmp	al,' '                  ; space?
 33544                                  	jbe	short getnext		; skip over space
 33545                                  	cmp	al,'/'
 33546                                  	je	short getparm
 33547                                  	stc				; mark error invalid-character-in-input
 33548                                  	jmp	short exitpl
 33549                                  
 33550                                  getparm:
 33551                                  	call	check_switch
 33552                                  	mov	[switches],bx		; save switches read so far
 33553                                  	jc	short swterr
 33554                                  getnext:
 33555                                  	call	getchr
 33556                                  	jc	short done_line
 33557                                  	jmp	short nextswtch
 33558                                  swterr:
 33559                                  	jmp	short exitpl		; exit if error
 33560                                  
 33561                                  done_line:
 33562                                  	; 12/12/2022
 33563                                  	test	byte [switches],flagdrive ; 8
 33564                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33565                                  	jnz	short okay
 33566                                  	stc				; mark error no-drive-specified
 33567                                  	jmp	short exitpl
 33568                                  
 33569                                  okay:
 33570                                  	mov	ax,[switches]
 33571                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33572                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33573                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33574                                  	;clc			    ; everything is fine
 33575                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33576                                  	; 12/12/2022
 33577                                  	; cf=0
 33578                                  	;clc
 33579                                  	call	setdeviceparameters
 33580                                  exitpl:
 33581                                  	pop	ds
 33582                                  	retn
 33583                                  put_back:
 33584                                  	inc	word [count]		; one more char to scan
 33585                                  	dec	word [chrptr]		; back up over linefeed
 33586                                  	jmp	short done_line
 33587                                  
 33588                                  %endif
 33589                                  
 33590                                  ;----------------------------------------------------------------------------
 33591                                  ;
 33592                                  ; procedure : check_switch
 33593                                  ;
 33594                                  ; processes a switch in the input. it ensures that the switch is valid, and
 33595                                  ; gets the number, if any required, following the switch. the switch and the
 33596                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 33597                                  ; error.
 33598                                  ;
 33599                                  ;----------------------------------------------------------------------------
 33600                                  
 33601                                  ; 09/09/2023
 33602                                  
 33603                                  err_swtch:
 33604 00002C4E 31CB                    	xor	bx,cx			; remove this switch from the records
 33605                                  err_check:
 33606 00002C50 F9                      	stc
 33607                                  err_chk:
 33608                                  done_swtch:	; 09/09/2023 (cf=0)
 33609 00002C51 C3                      	retn
 33610                                  
 33611                                  	; 09/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 33612                                  
 33613                                  check_switch:
 33614 00002C52 E87803                  	call	getchr
 33615                                  	;jc	short err_check
 33616 00002C55 72FA                    	jc	short err_chk
 33617 00002C57 24DF                            and     al,0DFh                 ; convert it to upper case
 33618 00002C59 3C41                    	cmp	al,'A'
 33619                                  	;jb	short err_check
 33620 00002C5B 72F4                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 33621 00002C5D 3C5A                    	cmp	al,'Z'
 33622 00002C5F 77EF                    	ja	short err_check
 33623                                  
 33624 00002C61 06                      	push	es
 33625                                  
 33626 00002C62 0E                      	push	cs
 33627 00002C63 07                      	pop	es
 33628                                  
 33629                                  	;mov	cl,[switchlist]		; get number of valid switches
 33630                                  	;mov	ch,0
 33631                                  	;mov	di,1+switchlist		; point to string of valid switches
 33632                                  	; 09/09/2023
 33633 00002C64 BF[1836]                	mov	di,switchlist
 33634 00002C67 8A0D                    	mov	cl,[di]
 33635 00002C69 B500                    	mov	ch,0
 33636 00002C6B 47                      	inc	di	; 1+switchlist
 33637                                  
 33638 00002C6C F2AE                    	repne	scasb
 33639                                  
 33640 00002C6E 07                      	pop	es
 33641 00002C6F 75DF                    	jnz	short err_check
 33642                                  
 33643 00002C71 B80100                  	mov	ax,1
 33644 00002C74 D3E0                    	shl	ax,cl			; set bit to indicate switch
 33645 00002C76 8B1E[8535]              	mov	bx,[switches]		; get switches so far
 33646 00002C7A 09C3                    	or	bx,ax			; save this with other switches
 33647 00002C7C 89C1                    	mov	cx,ax
 33648                                  	; 12/12/2022
 33649 00002C7E A8F8                    	test	al,switchnum ; 0F8h
 33650                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 33651 00002C80 74CF                    	jz	short done_swtch
 33652                                  
 33653 00002C82 E84803                  	call	getchr
 33654 00002C85 72C7                    	jc	short err_swtch
 33655                                  
 33656 00002C87 3C3A                    	cmp	al,':'
 33657 00002C89 75C3                    	jne	short err_swtch
 33658                                  
 33659 00002C8B E83F03                  	call	getchr
 33660 00002C8E 53                      	push	bx			; preserve switches
 33661                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33662                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 33663                                  	; 12/12/2022
 33664                                  	; ds = cs
 33665 00002C8F C606[2A03]20            	mov	byte [sepchr],' '
 33666 00002C94 E8DB03                  	call	getnum
 33667                                  	;mov	byte [cs:sepchr],0
 33668                                  	; 12/12/2022
 33669 00002C97 C606[2A03]00            	mov	byte [sepchr],0
 33670 00002C9C 5B                      	pop	bx			; restore switches
 33671                                  
 33672                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 33673                                  ; not check for carry set here. if there is an error, it will be detected
 33674                                  ; further on (hopefully).
 33675                                  
 33676                                  	; 09/09/2023
 33677                                  	;call	process_num
 33678                                  	;jmp	short process_num
 33679                                  
 33680                                  ;done_swtch:
 33681                                  ;	;clc
 33682                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33683                                  ;	; 12/12/2022
 33684                                  ;	; cf=0
 33685                                  ;	;clc
 33686                                  ;	retn
 33687                                  
 33688                                  ;----------------------------------------------------------------------------
 33689                                  ;
 33690                                  ; procedure : process_num
 33691                                  ;
 33692                                  ; this routine takes the switch just input, and the number following (if any),
 33693                                  ; and sets the value in the appropriate variable. if the number input is zero
 33694                                  ; then it does nothing - it assumes the default value that is present in the
 33695                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 33696                                  ;
 33697                                  ;----------------------------------------------------------------------------
 33698                                  
 33699                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33700                                  	; (SYSINIT:3156h)
 33701                                  process_num:
 33702 00002C9D 850E[8535]              	test	[switches],cx		; if this switch has been done before,
 33703 00002CA1 752B                    	jnz	short done_ret		; ignore this one.
 33704                                  	; 12/12/2022
 33705 00002CA3 F6C108                  	test	cl,flagdrive ; 8
 33706                                  	;test	cx,flagdrive ; 8
 33707 00002CA6 7404                    	jz	short try_f
 33708 00002CA8 A2[8435]                	mov	byte [drive],al
 33709                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33710                                  	;jmp	short done_ret
 33711                                  	; 12/12/2022
 33712                                  	; cf=0
 33713 00002CAB C3                      	retn	; 13/05/2019
 33714                                  try_f:
 33715                                  	; 12/12/2022
 33716 00002CAC F6C180                  	test	cl,flagff ; 80h
 33717                                  	;test	cx,flagff ; 80h
 33718 00002CAF 7404                    	jz	short try_t
 33719                                  
 33720                                  ; ensure that we do not get bogus form factors that are not supported
 33721                                  
 33722                                  	;mov	[deviceparameters+1],al
 33723 00002CB1 A2[5D34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 33724                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33725                                  	;jmp	short done_ret
 33726                                  	; 12/12/2022
 33727                                  	; cf=0
 33728 00002CB4 C3                      	retn	; 13/05/2019
 33729                                  try_t:
 33730 00002CB5 09C0                    	or	ax,ax
 33731 00002CB7 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 33732                                  	; 12/12/2022
 33733 00002CB9 F6C110                  	test	cl,flagcyln ; 10h
 33734                                  	;test	cx,flagcyln ; 10h
 33735 00002CBC 7404                    	jz	short try_s
 33736                                  
 33737                                  	;mov	[deviceparameters+4],ax
 33738 00002CBE A3[6034]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 33739                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33740                                  	;jmp	short done_ret
 33741                                  	; 12/12/2022
 33742                                  	; cf=0
 33743 00002CC1 C3                      	retn	; 13/05/2019
 33744                                  try_s:
 33745                                  	; 12/12/2022
 33746 00002CC2 F6C120                  	test	cl,flagseclim ; 20h
 33747                                  	;test	cx,flagseclim ; 20h
 33748 00002CC5 7404                    	jz	short try_h
 33749 00002CC7 A3[8235]                	mov	[slim],ax
 33750                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33751                                  	;jmp	short done_ret
 33752                                  	; 12/12/2022
 33753                                  	; cf=0
 33754 00002CCA C3                      	retn	; 13/05/2019
 33755                                  
 33756                                  ; must be for number of heads
 33757                                  
 33758                                  try_h:
 33759 00002CCB A3[8035]                	mov	[hlim],ax
 33760                                  done_ret:
 33761                                  	;clc
 33762                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33763                                  	; 12/12/2022
 33764                                  	; cf=0 (test instruction resets cf)
 33765                                  	;clc
 33766 00002CCE C3                      	retn
 33767                                  
 33768                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33769                                  %if 1
 33770                                  
 33771                                  ; 15/04/2019 - Retro DOS v4.0
 33772                                  
 33773                                  ;----------------------------------------------------------------------------
 33774                                  ;
 33775                                  ; procedure : parseline
 33776                                  ;
 33777                                  ; entry point is parseline. al contains the first character in command line.
 33778                                  ;
 33779                                  ;----------------------------------------------------------------------------
 33780                                  
 33781                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33782                                  	; (SYSINIT:30ACh)
 33783                                  parseline:
 33784                                  	; 04/01/2023
 33785                                  	; ds = cs ; *
 33786                                  
 33787                                  	;push	ds ; *
 33788                                  
 33789                                  	;push	cs ; *
 33790                                  	;pop	ds ; *
 33791                                  
 33792                                  nextswtch:
 33793 00002CCF 3C0D                    	cmp	al,cr			; carriage return?
 33794 00002CD1 741C                    	je	short done_line
 33795 00002CD3 3C0A                    	cmp	al,lf			; linefeed?
 33796 00002CD5 7421                    	je	short put_back		; put it back and done
 33797                                  
 33798                                  ; anything less or equal to a space is ignored.
 33799                                  
 33800 00002CD7 3C20                    	cmp	al,' '                  ; space?
 33801 00002CD9 760F                    	jbe	short getnext		; skip over space
 33802 00002CDB 3C2F                    	cmp	al,'/'
 33803 00002CDD 7402                    	je	short getparm
 33804 00002CDF F9                      	stc				; mark error invalid-character-in-input
 33805                                  	;jmp	short exitpl
 33806                                  	; 04/01/2023
 33807                                  swterr:
 33808 00002CE0 C3                      	retn
 33809                                  
 33810                                  getparm:
 33811 00002CE1 E86EFF                  	call	check_switch
 33812 00002CE4 891E[8535]              	mov	[switches],bx		; save switches read so far
 33813 00002CE8 72F6                    	jc	short swterr
 33814                                  getnext:
 33815 00002CEA E8E002                  	call	getchr
 33816                                  	;jc	short done_line
 33817                                  	;jmp	short nextswtch
 33818                                  	; 04/01/2023
 33819 00002CED 73E0                    	jnc	short nextswtch
 33820                                  ;swterr:
 33821                                  	;jmp	short exitpl		; exit if error
 33822                                  
 33823                                  done_line:
 33824                                  	; 12/12/2022
 33825 00002CEF F606[8535]08            	test	byte [switches],flagdrive ; 8
 33826                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 33827 00002CF4 750C                    	jnz	short okay
 33828 00002CF6 F9                      	stc				; mark error no-drive-specified
 33829                                  	;jmp	short exitpl
 33830                                  	; 04/01/2023
 33831 00002CF7 C3                      	retn
 33832                                  
 33833                                  ;exitpl:
 33834                                  	; 04/01/2023
 33835                                  	; ds = cs
 33836                                  	;;pop	ds ; *
 33837                                  	;retn
 33838                                  
 33839                                  put_back:
 33840 00002CF8 FF06[D203]              	inc	word [count]		; one more char to scan
 33841 00002CFC FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 33842 00002D00 EBED                    	jmp	short done_line
 33843                                  
 33844                                  okay:
 33845 00002D02 A1[8535]                	mov	ax,[switches]
 33846 00002D05 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 33847 00002D08 A3[5E34]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 33848 00002D0B C706[8234]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 33849                                  	;clc			    ; everything is fine
 33850                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33851                                  	; 12/12/2022
 33852                                  	; cf=0
 33853                                  	;clc
 33854                                  	;call	setdeviceparameters
 33855                                  	; 04/01/2023
 33856                                  	;jmp	short setdeviceparameters
 33857                                  
 33858                                  %endif
 33859                                  
 33860                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 33861                                  
 33862                                  ;----------------------------------------------------------------------------
 33863                                  ;
 33864                                  ; procedure : setdeviceparameters
 33865                                  ;
 33866                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 33867                                  ; system based on the form factor. it is assumed that the bpbs for the
 33868                                  ; various form factors are present in the bpbtable. for hard files,
 33869                                  ; the recommended bpb is the same as the bpb on the drive.
 33870                                  ; no attempt is made to preserve registers since we are going to jump to
 33871                                  ; sysinit straight after this routine.
 33872                                  ;
 33873                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 33874                                  ;	  we always return no carry
 33875                                  ;
 33876                                  ;	note:  there is a routine by the same name in msdioctl.asm
 33877                                  ;
 33878                                  ;----------------------------------------------------------------------------
 33879                                  
 33880                                  ; 15/04/2019 - Retro DOS v4.0
 33881                                  
 33882                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 33883                                  setdeviceparameters:
 33884                                  	; 04/01/2023
 33885                                  	; ds = cs
 33886                                  	
 33887 00002D11 06                      	push	es
 33888                                  
 33889 00002D12 0E                      	push	cs
 33890 00002D13 07                      	pop	es
 33891                                  
 33892 00002D14 31DB                    	xor	bx,bx
 33893 00002D16 8A1E[5D34]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 33894 00002D1A 80FB00                  	cmp	bl,DEV_5INCH ; 0
 33895 00002D1D 7506                    	jne	short got_80
 33896                                  
 33897 00002D1F C706[6034]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33898                                  							; 48 tpi=40 cyl
 33899                                  got_80:
 33900 00002D25 D1E3                    	shl	bx,1			; get index into bpb table
 33901 00002D27 8BB7[0436]              	mov	si,[bpbtable+bx]	; get address of bpb
 33902                                  
 33903                                  	;mov	di,deviceparameters+7	
 33904                                  	; 02/11/2022
 33905 00002D2B BF[6334]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 33906 00002D2E B91F00                  	mov	cx,A_BPB.size ; 31
 33907 00002D31 FC                      	cld
 33908                                  	;repe	movsb
 33909                                  	; 02/11/2022
 33910 00002D32 F3A4                    	rep	movsb
 33911                                  
 33912 00002D34 07                      	pop	es
 33913                                  
 33914                                  	; 12/12/2022
 33915 00002D35 F606[8535]20            	test	byte [switches],flagseclim ; 20h
 33916                                  	;test	word [switches],flagseclim ; 20h
 33917 00002D3A 7406                    	jz	short see_heads
 33918                                  
 33919 00002D3C A1[8235]                	mov	ax,[slim]
 33920                                  	;mov	[deviceparameters+20],ax
 33921 00002D3F A3[7034]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 33922                                  
 33923                                  see_heads:
 33924                                  	; 12/12/2022
 33925 00002D42 F606[8535]40            	test	byte [switches],flagheads ; 40h
 33926                                  	;test	word [switches],flagheads ; 40h
 33927 00002D47 7406                    	jz	short heads_not_altered
 33928                                  
 33929 00002D49 A1[8035]                	mov	ax,[hlim]
 33930                                  	;mov	[deviceparameters+22],ax	
 33931 00002D4C A3[7234]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 33932                                  
 33933                                  heads_not_altered:
 33934                                  
 33935                                  ; set up correct media descriptor byte and sectors/cluster
 33936                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 33937                                  
 33938                                  	;mov	byte [deviceparameters+9],2
 33939                                  	; 02/11/2022
 33940                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 33941                                  	; 04/01/2023
 33942 00002D4F B80200                  	mov	ax,2	
 33943 00002D52 A2[6534]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 33944                                  
 33945 00002D55 B3F0                    	mov	bl,0F0h			; get default mediabyte
 33946                                  
 33947                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 33948                                  
 33949                                  	;mov	bh,[deviceparameters+17]
 33950                                  	; 02/11/2022
 33951 00002D57 8A3E[6D34]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 33952                                  
 33953                                  	; 04/01/2023
 33954                                  	; ax = 2
 33955 00002D5B 3906[7234]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 33956                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 33957 00002D5F 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 33958                                  
 33959 00002D61 7524                    	jne	short only_one_head	; one head, do one head stuff
 33960                                  
 33961                                  ;	two head drives will use the mediadescriptor from the bpb
 33962                                  
 33963 00002D63 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 33964                                  
 33965                                  ;	two sided drives have two special cases to look for. One is
 33966                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 33967                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 33968                                  ;	   one sector/cluster.
 33969                                  
 33970                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 33971                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 33972                                  ;	   type of 2 headed drive is all set.
 33973                                  
 33974 00002D65 833E[7034]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 33975 00002D6A 7509                    	jne	short not_144m
 33976 00002D6C 833E[6034]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 33977 00002D71 7502                    	jne	short not_144m
 33978                                  
 33979                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 33980                                  
 33981 00002D73 EB24                    	jmp	short got_one_secperclus_drive
 33982                                  
 33983                                  ;	check for 320K
 33984                                  
 33985                                  not_144m:
 33986 00002D75 833E[6034]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 33987 00002D7A 7521                    	jne	short got_correct_mediad
 33988 00002D7C 833E[7034]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 33989 00002D81 751A                    	jne	short got_correct_mediad
 33990                                  
 33991 00002D83 B3FC                    	mov	bl,0FCh
 33992 00002D85 EB16                    	jmp	short got_correct_mediad
 33993                                  
 33994                                  only_one_head:
 33995                                  
 33996                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 33997                                  
 33998 00002D87 803E[5D34]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 33999 00002D8C 740B                    	je	short got_one_secperclus_drive
 34000                                  
 34001                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 34002                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 34003                                  ;	  besides 8 will be considered 0fch
 34004                                  
 34005 00002D8E B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 34006 00002D90 833E[7034]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 34007                                  	; 12/12/2022
 34008 00002D95 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 34009                                  
 34010 00002D97 B3FE                    	mov	bl,0FEh			; 160K mediaid
 34011                                  
 34012                                  ;	we've either got a one sided drive, or a 1.44M drive
 34013                                  ;	  either case we'll use 1 sector per cluster instead of 2
 34014                                  
 34015                                  got_one_secperclus_drive:
 34016                                  	; 04/01/2023
 34017                                  	; ax = 2
 34018 00002D99 48                      	dec	ax  ; ax = 1
 34019 00002D9A A2[6534]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 34020                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 34021                                  
 34022                                  got_correct_mediad:
 34023 00002D9D 881E[6D34]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 34024                                  
 34025                                  ;	 Calculate the correct number of Total Sectors on medium
 34026                                  
 34027 00002DA1 A1[6034]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 34028 00002DA4 F726[7234]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 34029 00002DA8 F726[7034]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 34030 00002DAC A3[6B34]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 34031 00002DAF F8                      	clc				; we currently return no errors
 34032                                  
 34033 00002DB0 C3                      	retn
 34034                                  
 34035                                  ;	M047 -- end rewritten routine
 34036                                  
 34037                                  ;----------------------------------------------------------------------------
 34038                                  ;
 34039                                  ; procedure : organize
 34040                                  ;
 34041                                  ;----------------------------------------------------------------------------
 34042                                  
 34043                                  ; 09/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 34044                                  %if 1
 34045                                  end_commd_line:
 34046 00002DB1 AA                      	stosb				; store line feed char in buffer for the linecount.
 34047                                  	;mov	byte [cs:com_level],0	; reset the command level.
 34048                                  	; 03/01/2023
 34049                                  	; ds = cs
 34050                                  	;mov	byte [com_level],0
 34051                                  	;jmp	short org1
 34052                                  	; 09/09/2023
 34053 00002DB2 EB11                    	jmp	short org0
 34054                                  nochar1:
 34055 00002DB4 F9                      	stc
 34056 00002DB5 C3                      	retn
 34057                                  %endif
 34058                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34059                                  	; (SYSINIT:3234h)
 34060                                  
 34061                                  organize:
 34062                                  	; 04/01/2023
 34063                                  	; ds = cs
 34064 00002DB6 8B0E[D203]              	mov	cx,[count]
 34065                                  	;mov	cx,[cs:count]
 34066 00002DBA E3F8                    	jcxz	nochar1
 34067                                  
 34068                                  ;ifndef	MULTI_CONFIG
 34069                                  ;
 34070                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 34071                                  ;;   because we the case of values in SET commands preserved
 34072                                  ;
 34073                                  ;	call	mapcase
 34074                                  ;endif
 34075                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34076 00002DBC E82502                  	call	mapcase
 34077                                  
 34078 00002DBF 31F6                    	xor	si,si
 34079 00002DC1 89F7                    	mov	di,si
 34080 00002DC3 31C0                    	xor	ax,ax
 34081                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 34082                                  	;;mov	byte [cs:com_level],0
 34083                                  	; 12/12/2022
 34084                                  	;mov	[cs:com_level],al ; 0
 34085                                  	; 04/01/2023
 34086                                  	; ds = cs
 34087                                  	; 09/09/2023
 34088                                  	;mov	[com_level],al ; 0
 34089                                  org0:
 34090 00002DC5 C606[CC03]00            	mov	byte [com_level],0 ; 09/09/2023
 34091                                  org1:
 34092 00002DCA E8A501                  	call	skip_comment
 34093 00002DCD 74E2                    	jz	short end_commd_line	; found a comment string and skipped.
 34094 00002DCF E88A01                  	call	get2			; not a comment string. then get a char.
 34095 00002DD2 3C0A                    	cmp	al,lf ; 0Ah
 34096 00002DD4 74DB                    	je	short end_commd_line	; starts with a blank line.
 34097 00002DD6 3C20                    	cmp	al,' ' ; 20h
 34098 00002DD8 76F0                    	jbe	short org1		; skip leading control characters
 34099                                  	; 09/09/2023
 34100                                  	;jmp	short findit
 34101                                  
 34102                                  ; 09/09/2023
 34103                                  %if 0
 34104                                  end_commd_line:
 34105                                  	stosb				; store line feed char in buffer for the linecount.
 34106                                  	;mov	byte [cs:com_level],0	; reset the command level.
 34107                                  	; 03/01/2023
 34108                                  	; ds = cs
 34109                                  	mov	byte [com_level],0
 34110                                  	jmp	short org1
 34111                                  
 34112                                  nochar1:
 34113                                  	stc
 34114                                  	retn
 34115                                  %endif
 34116                                  
 34117                                  findit:
 34118 00002DDA 51                      	push	cx
 34119 00002DDB 56                      	push	si
 34120 00002DDC 57                      	push	di
 34121 00002DDD 89F5                    	mov	bp,si
 34122 00002DDF 4D                      	dec	bp
 34123 00002DE0 BE[CB33]                        mov     si,comtab		; prepare to search command table
 34124 00002DE3 B500                    	mov	ch,0
 34125                                  findcom:
 34126 00002DE5 89EF                    	mov	di,bp
 34127 00002DE7 8A0C                    	mov	cl,[si]
 34128 00002DE9 46                      	inc	si
 34129 00002DEA E324                    	jcxz	nocom
 34130                                  
 34131                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34132                                  
 34133                                  ;ifdef	MULTI_CONFIG
 34134                                  ;
 34135                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 34136                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 34137                                  ;;   anything in particular)
 34138                                  ;
 34139                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 34140                                  ;       je	short semicolon
 34141                                  ;loopcom:
 34142                                  ;       mov     al,[es:di]
 34143                                  ;       inc     di
 34144                                  ;       and     al,~20h ; 0DFh		; force upper case
 34145                                  ;       inc     si                      ; compare to byte @es:di
 34146                                  ;       cmp     al,[si-1]
 34147                                  ;       loope   loopcom
 34148                                  ;;else
 34149                                  ;;	repe	cmpsb
 34150                                  ;endif
 34151                                  	; 02/11/2022
 34152 00002DEC F3A6                    	repe	cmpsb
 34153                                  
 34154 00002DEE 9F                      	lahf
 34155 00002DEF 01CE                            add     si,cx                   ; bump to next position without affecting flags
 34156 00002DF1 9E                      	sahf
 34157 00002DF2 AC                              lodsb                           ; get indicator letter
 34158 00002DF3 75F0                    	jnz	short findcom
 34159 00002DF5 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 34160 00002DF9 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 34161 00002DFB 26803D0A                	cmp	byte [es:di],lf
 34162 00002DFF 740A                    	je	short gotcom0
 34163                                  
 34164                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34165                                  ;
 34166                                  ;;ifdef	MULTI_CONFIG
 34167                                  ;
 34168                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 34169                                  ;
 34170                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 34171                                  ;       je	short gotcom0
 34172                                  ;;endif
 34173                                  ;	push	ax
 34174                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 34175                                  ;
 34176                                  ;;ifdef	MULTI_CONFIG
 34177                                  ;
 34178                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 34179                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 34180                                  ;;   stored in the CONFIG.SYS memory image.
 34181                                  ;
 34182                                  ;       cmp     al,'?'                  ; explicit interactive command?
 34183                                  ;       jne	short no_query		; no
 34184                                  ;       pop     ax                      ; yes, so retrieve the original code
 34185                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 34186                                  ;       jmp     short gotcom0           ;
 34187                                  ;semicolon:
 34188                                  ;       mov     al,CONFIG_REM
 34189                                  ;       jmp     short gotcom0
 34190                                  ;no_query:
 34191                                  ;;endif  ;MULTI_CONFIG
 34192                                  
 34193                                  	; 02/11/2022
 34194 00002E01 50                      	push	ax
 34195 00002E02 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 34196                                  
 34197 00002E05 E8A001                  	call	delim
 34198                                  no_delim:
 34199 00002E08 58                      	pop	ax
 34200 00002E09 75DA                    	jnz	short findcom
 34201                                  gotcom0:
 34202 00002E0B 5F                      	pop	di
 34203 00002E0C 5E                      	pop	si
 34204 00002E0D 59                      	pop	cx
 34205 00002E0E EB0F                    	jmp	short gotcom
 34206                                  nocom:
 34207 00002E10 5F                      	pop	di
 34208 00002E11 5E                      	pop	si
 34209 00002E12 59                      	pop	cx
 34210 00002E13 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 34211 00002E15 AA                      	stosb				; save indicator char.
 34212                                  _skipline:
 34213 00002E16 E84301                  	call	get2
 34214 00002E19 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 34215 00002E1B 75F9                            jne     short _skipline
 34216 00002E1D EB92                    	jmp	short end_commd_line	; handle next command line
 34217                                  gotcom:
 34218 00002E1F AA                              stosb                           ; save indicator char in buffer
 34219                                  
 34220                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34221                                  ;;ifdef	MULTI_CONFIG
 34222                                  ;
 34223                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 34224                                  ;;   it screws up the direct comparisons below.
 34225                                  ;
 34226                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34227                                  ;;endif
 34228                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 34229                                  ;
 34230                                  ;;ifdef	MULTI_CONFIG
 34231                                  ;
 34232                                  ;;   There is no whitespace/delimiter between the "begin block" character
 34233                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 34234                                  ;;   skipping code
 34235                                  ;
 34236                                  ;       cmp     al,CONFIG_BEGIN
 34237                                  ;       je	short org31
 34238                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 34239                                  ;       je      short no_mapcase
 34240                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 34241                                  ;       je      short no_mapcase
 34242                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 34243                                  ;       je      short no_mapcase
 34244                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 34245                                  ;       je      short no_mapcase
 34246                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 34247                                  ;no_mapcase:
 34248                                  ;;endif
 34249                                  
 34250                                  	; 02/11/2022
 34251                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 34252                                  	; 04/01/2023
 34253                                  	; ds = cs
 34254 00002E20 A2[D003]                	mov	[cmd_indicator],al
 34255                                  org2:	
 34256 00002E23 E83601                  	call    get2                    ; skip the command name until delimiter
 34257 00002E26 3C0A                            cmp     al,lf
 34258 00002E28 740B                    	je	short org21
 34259 00002E2A 3C0D                    	cmp	al,cr
 34260 00002E2C 7407                    	je	short org21
 34261                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34262                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 34263                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 34264                                  
 34265 00002E2E E87701                  	call	delim
 34266 00002E31 75F0                            jnz	short org2
 34267 00002E33 EB02                    	jmp	short org3
 34268                                  org21:					;if cr or lf then
 34269 00002E35 4E                      	dec	si			; undo si, cx register
 34270 00002E36 41                      	inc	cx			;  and continue
 34271                                  org3:	
 34272                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 34273                                  	;je	short get_cmt_token
 34274                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34275                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34276                                  	;;je	short org_file
 34277                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 34278                                  	;je	short org_file
 34279                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34280                                          ;;je	short org_file
 34281                                  	;; 02/11/2022
 34282                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 34283                                  	;je	short org_file
 34284                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 34285                                  	;je	short org_file
 34286                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 34287                                  	;je	short org_switch
 34288                                  
 34289                                  	; 04/01/2023
 34290                                  	; ds = cs
 34291                                  
 34292 00002E37 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 34293 00002E3C 7456                    	je	short get_cmt_token
 34294                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34295                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34296                                  	;je	short org_file
 34297 00002E3E 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 34298 00002E43 7429                    	je	short org_file
 34299                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 34300                                          ;je	short org_file
 34301                                  	; 02/11/2022
 34302 00002E45 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 34303 00002E4A 7422                    	je	short org_file
 34304 00002E4C 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 34305 00002E51 741B                    	je	short org_file
 34306 00002E53 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 34307 00002E58 7403                    	je	short org_switch
 34308                                  	
 34309                                  org31:
 34310 00002E5A E99500                  	jmp	org4
 34311                                  
 34312                                  org_switch:
 34313 00002E5D E81201                  	call	skip_comment
 34314 00002E60 7472                    	jz	short end_commd_line_brdg
 34315                                  
 34316 00002E62 E8F700                  	call	get2
 34317 00002E65 E84801                  	call	org_delim
 34318 00002E68 74F3                    	jz	short org_switch
 34319                                  
 34320 00002E6A AA                      	stosb
 34321 00002E6B E99300                  	jmp	org5
 34322                                  
 34323                                  org_file:			; get the filename and put 0 at end
 34324 00002E6E E80101                  	call	skip_comment
 34325 00002E71 7464                    	jz	short org_put_zero
 34326                                  
 34327 00002E73 E8E600                  	call	get2		; not a comment
 34328 00002E76 E82F01                  	call	delim
 34329 00002E79 74F3                    	jz	short org_file	; skip the possible delimiters
 34330                                  
 34331 00002E7B AA                      	stosb			; copy the first non delim char found in buffer
 34332                                  
 34333                                  org_copy_file:
 34334 00002E7C E8F300                  	call	skip_comment	; comment char in the filename?
 34335 00002E7F 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 34336                                  
 34337 00002E81 E8D800                  	call	get2
 34338 00002E84 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 34339 00002E86 7457                    	je	short end_file_slash ; this will be the special case.
 34340                                  
 34341 00002E88 AA                      	stosb			; save the char. in buffer
 34342 00002E89 E81C01                  	call	delim
 34343 00002E8C 7459                    	jz	short end_copy_file
 34344                                  
 34345 00002E8E 3C20                    	cmp	al, ' '
 34346 00002E90 77EA                    	ja	short org_copy_file ; keep copying
 34347 00002E92 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 34348                                  
 34349                                  get_cmt_token:			; get the token. just max. 2 char.
 34350 00002E94 E8C500                  	call	get2
 34351 00002E97 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 34352 00002E99 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 34353 00002E9B 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 34354 00002E9D 74F5                    	je	short get_cmt_token ;  character.)
 34355 00002E9F 3C3D                    	cmp	al,'='		; = is special in this case.
 34356 00002EA1 74F1                    	je	short get_cmt_token
 34357 00002EA3 3C0D                    	cmp	al,cr
 34358 00002EA5 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 34359 00002EA7 3C0A                    	cmp	al,lf
 34360 00002EA9 7422                    	je	short get_cmt_end
 34361                                  
 34362                                  	; 04/01/2023
 34363                                  	; ds = cs
 34364                                  	;mov	[cs:cmmt1],al	; store it
 34365                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 34366 00002EAB A2[CE03]                	mov	[cmmt1],al	; store it
 34367 00002EAE C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 34368 00002EB3 E8A600                  	call	get2
 34369 00002EB6 3C20                    	cmp	al,' ' ; 20h
 34370 00002EB8 7413                    	je	short get_cmt_end
 34371 00002EBA 3C09                    	cmp	al,tab ; 9
 34372 00002EBC 740F                    	je	short get_cmt_end
 34373 00002EBE 3C0D                    	cmp	al,cr  ; 0Dh
 34374 00002EC0 740B                    	je	short get_cmt_end
 34375 00002EC2 3C0A                    	cmp	al,lf  ; 0Ah
 34376 00002EC4 740E                    	je	short end_commd_line_brdg
 34377                                  
 34378                                  	;mov	[cs:cmmt2],al
 34379                                  	;inc	byte [cs:cmmt]
 34380                                  	; 04/01/2023
 34381 00002EC6 A2[CF03]                	mov	[cmmt2],al
 34382 00002EC9 FE06[CD03]              	inc	byte [cmmt]
 34383                                  
 34384                                  get_cmt_end:
 34385 00002ECD E88C00                  	call	get2
 34386 00002ED0 3C0A                    	cmp	al,lf
 34387 00002ED2 75F9                    	jne	short get_cmt_end	; skip it.
 34388                                  end_commd_line_brdg: 
 34389 00002ED4 E9DAFE                  	jmp	end_commd_line		; else jmp to end_commd_line
 34390                                  
 34391                                  org_put_zero:				; make the filename in front of
 34392 00002ED7 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 34393 00002EDB 47                      	inc	di
 34394 00002EDC E9D2FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 34395                                  
 34396                                  end_file_slash: 			; al = "/" option char.
 34397 00002EDF 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 34398 00002EE3 47                      	inc	di			; and
 34399 00002EE4 AA                      	stosb				; store "/" after that.
 34400 00002EE5 EB1A                    	jmp	short org5		; continue with the rest of the line
 34401                                  
 34402                                  end_copy_file:
 34403 00002EE7 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 34404 00002EEC 3C0A                    	cmp	al,lf
 34405 00002EEE 74E4                    	je	short end_commd_line_brdg
 34406 00002EF0 EB0F                    	jmp	short org5
 34407                                  
 34408                                  org4:					; org4 skips all delimiters after the command name except for '/'
 34409 00002EF2 E87D00                  	call	skip_comment
 34410 00002EF5 74DD                    	jz	short end_commd_line_brdg
 34411                                  
 34412 00002EF7 E86200                  	call	get2
 34413 00002EFA E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 34414 00002EFD 74F3                    	jz	short org4
 34415 00002EFF EB08                    	jmp	short org51
 34416                                  
 34417                                  org5:					; rest of the line
 34418 00002F01 E86E00                  	call	skip_comment		; comment?
 34419 00002F04 74CE                    	jz	short end_commd_line_brdg
 34420 00002F06 E85300                  	call	get2			; not a comment.
 34421                                  
 34422                                  org51:
 34423 00002F09 AA                      	stosb				; copy the character
 34424 00002F0A 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 34425 00002F0C 743A                    	je	short at_quote
 34426 00002F0E 3C20                    	cmp	al,' '  ; 20h
 34427 00002F10 77EF                    	ja	short org5
 34428                                  					; M051 - Start
 34429                                  	; 04/01/2023
 34430                                  	; ds = cs
 34431 00002F12 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 34432                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 34433 00002F17 7514                    	jne	short not_dh		; N: 
 34434 00002F19 3C0A                    	cmp	al,lf			; Q: is this line feed
 34435 00002F1B 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 34436 00002F1D 3C0D                    	cmp	al,cr			; Q: is this a cr
 34437 00002F1F 75E0                    	jne	short org5		; N: 
 34438 00002F21 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 34439 00002F26 AA                      	stosb				; put cr after blank
 34440 00002F27 FE06[FA2B]              	inc	byte [insert_blank]
 34441                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 34442                                  					; inserted
 34443 00002F2B EBD4                    	jmp	short org5
 34444                                  not_dh:					; M051 - End
 34445                                  
 34446 00002F2D 3C0A                    	cmp	al,lf			; line feed?
 34447 00002F2F 740F                    	je	short org1_brdg		; handles the next command line.
 34448 00002F31 EBCE                    	jmp	short org5		; handles next char in this line.
 34449                                  
 34450                                  org_dhlf:				; M051 - Start
 34451                                  	; 04/01/2023
 34452                                  	; ds = cs
 34453 00002F33 803E[FA2B]01            	cmp	byte [insert_blank],1
 34454                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 34455 00002F38 7406                    	je	short org1_brdg		; Y:
 34456 00002F3A 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 34457 00002F3F AA                      	stosb				; put lf after blank
 34458                                  					; M051 - End
 34459                                  org1_brdg:
 34460 00002F40 C606[FA2B]00            	mov	byte [insert_blank],0 
 34461                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 34462                                  					; M051: devicehigh
 34463 00002F45 E982FE                  	jmp	org1
 34464                                  
 34465                                  at_quote:
 34466 00002F48 803E[CC03]00            	cmp	byte [com_level],0
 34467                                  	;cmp	byte [cs:com_level],0
 34468 00002F4D 7407                    	je	short up_level
 34469                                  	;mov	byte [cs:com_level],0	; reset it.
 34470 00002F4F C606[CC03]00            	mov	byte [com_level],0
 34471 00002F54 EBAB                    	jmp	short org5
 34472                                  
 34473                                  up_level:
 34474                                  	;inc	byte [cs:com_level]	; set it.
 34475 00002F56 FE06[CC03]              	inc	byte [com_level]
 34476 00002F5A EBA5                    	jmp	short org5
 34477                                  
 34478                                  ;----------------------------------------------------------------------------
 34479                                  ;
 34480                                  ; procedure : get2
 34481                                  ;
 34482                                  ;----------------------------------------------------------------------------
 34483                                  
 34484                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 34485                                  	; (SYSINIT:33FAh)
 34486                                  	; 04/01/2023
 34487                                  get2:
 34488 00002F5C E304                    	jcxz	noget
 34489                                  	;
 34490                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34491                                  	;;lods	byte ptr es:[si]
 34492                                  	; 12/12/2022
 34493 00002F5E 26                      	es	
 34494 00002F5F AC                      	lodsb
 34495                                  	;mov	al, [es:si]
 34496                                  	;inc	si
 34497                                  	;
 34498 00002F60 49                      	dec	cx
 34499 00002F61 C3                      	retn
 34500                                  noget:
 34501 00002F62 59                      	pop	cx
 34502                                  	; 04/01/2023
 34503                                  	; ds = cs
 34504                                  	;mov	[cs:count],di ; 13/05/2019
 34505                                  	;mov	[cs:org_count],di
 34506 00002F63 893E[D203]              	mov	[count],di
 34507 00002F67 893E[D403]              	mov	[org_count],di
 34508 00002F6B 31F6                    	xor	si,si
 34509                                  	;mov	[cs:chrptr],si
 34510 00002F6D 8936[D603]              	mov	[chrptr],si
 34511                                  
 34512                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34513                                  ;;ifndef MULTI_CONFIG
 34514                                  ;;	retn
 34515                                  ;;else
 34516                                  ;
 34517                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 34518                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 34519                                  ;;   and the new boot menu stuff...
 34520                                  ;
 34521                                  ;	mov     cx,di
 34522                                  ;	jmp     menu_check
 34523                                  ;;endif
 34524                                  
 34525                                  	; 02/11/2022
 34526 00002F71 C3                      	retn
 34527                                  
 34528                                  ;----------------------------------------------------------------------------
 34529                                  ;
 34530                                  ; procedure : skip_comment
 34531                                  ;
 34532                                  ;skip the commented string until lf, if current es:si-> a comment string.
 34533                                  ;in) es:si-> string
 34534                                  ;	 cx -> length.
 34535                                  ;out) zero flag not set if not found a comment string.
 34536                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 34537                                  ;	  the line feed character at this moment when return.
 34538                                  ;	  ax register destroyed.
 34539                                  ;	  if found, si, cx register adjusted accordingly.
 34540                                  ;
 34541                                  ;----------------------------------------------------------------------------
 34542                                  
 34543                                  	; 04/01/2023 - Retro DOS v4.0
 34544                                  
 34545                                  skip_comment:
 34546 00002F72 E3EE                    	jcxz	noget		; get out of the organize routine.
 34547                                  
 34548                                  	; 04/01/2023
 34549                                  	; ds = cs	
 34550                                  
 34551 00002F74 803E[CC03]00            	cmp	byte [com_level],0
 34552                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 34553 00002F79 752C                    	jne	short no_commt	 ; (not inside quotations)
 34554                                  
 34555 00002F7B 803E[CD03]01            	cmp	byte [cmmt],1
 34556                                  	;cmp	byte [cs:cmmt],1
 34557 00002F80 7225                    	jb	short no_commt
 34558                                  
 34559 00002F82 268A04                  	mov	al,[es:si]
 34560                                  	
 34561 00002F85 3806[CE03]              	cmp	[cmmt1],al
 34562                                  	;cmp	[cs:cmmt1],al
 34563 00002F89 751C                    	jne	short no_commt
 34564                                  
 34565 00002F8B 803E[CD03]02            	cmp	byte [cmmt],2
 34566                                  	;cmp	byte [cs:cmmt],2
 34567 00002F90 750A                    	jne	short skip_cmmt
 34568                                  
 34569 00002F92 268A4401                	mov	al,[es:si+1]
 34570                                  	
 34571 00002F96 3806[CF03]              	cmp	[cmmt2],al
 34572                                  	;cmp	[cs:cmmt2],al
 34573 00002F9A 750B                    	jne	short no_commt
 34574                                  skip_cmmt:
 34575 00002F9C E3C4                    	jcxz	noget		; get out of organize routine.
 34576 00002F9E 268A04                  	mov	al,[es:si]
 34577 00002FA1 46                      	inc	si
 34578 00002FA2 49                      	dec	cx
 34579 00002FA3 3C0A                    	cmp	al,lf		; line feed?
 34580 00002FA5 75F5                    	jne	short skip_cmmt
 34581                                  no_commt:
 34582 00002FA7 C3                      	retn
 34583                                  
 34584                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 34585                                  %if 0
 34586                                  
 34587                                  ;ifdef	MULTI_CONFIG
 34588                                  
 34589                                  ;----------------------------------------------------------------------------
 34590                                  ;
 34591                                  ;   kbd_read: wait for keystroke
 34592                                  ;
 34593                                  ;   INPUT
 34594                                  ;       DS == CS == sysinitseg
 34595                                  ;
 34596                                  ;   OUTPUT
 34597                                  ;       Carry SET to clean boot, CLEAR otherwise
 34598                                  ;
 34599                                  ;   OTHER REGS USED
 34600                                  ;       All
 34601                                  ;
 34602                                  ;   HISTORY
 34603                                  ;       Created 16-Nov-1992 by JeffPar
 34604                                  ;
 34605                                  ;----------------------------------------------------------------------------
 34606                                  
 34607                                  kbd_read:
 34608                                          test    byte [bDisableUI],2
 34609                                          jnz     short kbd_nodelay
 34610                                  
 34611                                          push    ds              ; the bios timer tick count is incremented
 34612                                          sub     ax,ax           ; 18.2 times per second;
 34613                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 34614                                  	;mov	dx,[046Ch]	; get initial value
 34615                                  kbd_loop:
 34616                                          mov     ah,1            ;
 34617                                          int     16h             ; peek the keyboard
 34618                                          jnz	short kbd_loopdone ; something's there, get out
 34619                                          mov     ah,2            ; peek the shift states
 34620                                          int     16h             ;
 34621                                          test    al,03h          ; either right or left shift key bits set?
 34622                                          jnz	short kbd_loopdone ; yes
 34623                                          mov     ax,[046Ch]	;
 34624                                  	;sub	ax,dx           ; get difference
 34625                                  	; 15/04/2019 - Retro DOS v4.0
 34626                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 34627                                  
 34628                                  	cmp     al,37           ; reached limit?
 34629                                          jb	short kbd_loop	; not yet
 34630                                  kbd_loopdone:
 34631                                          pop     ds              ; delay complete!
 34632                                  kbd_nodelay:
 34633                                          sub     bx,bx           ; assume clean boot
 34634                                          mov     ah,2            ; peek the shift states
 34635                                          int     16h             ;
 34636                                          test    al,03h          ; either right or left shift key bits set?
 34637                                          jz      short kbd_notshift ; no
 34638                                          inc     bx              ; yes
 34639                                          inc     bx
 34640                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 34641                                  	or	byte [bQueryOpt],4
 34642                                  kbd_notshift:                   ;
 34643                                          mov     ah,1            ; peek the keyboard
 34644                                          int     16h             ;
 34645                                          jz	short kbd_test	; no key present
 34646                                          or      al,al           ; is it a function key?
 34647                                          jnz	short kbd_test	; no
 34648                                  
 34649                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 34650                                          cmp     ah,62h          ; CTRL F5
 34651                                          je	short kbd_cfg_bypass
 34652                                  	
 34653                                          cmp     ah,3Fh          ; F5 function key?
 34654                                          jne	short kbd_notf5	; no
 34655                                  kbd_cfg_bypass:
 34656                                          mov     dx,_$CleanMsg
 34657                                          call    print
 34658                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 34659                                  	or	byte [bQueryOpt],4           ;
 34660                                          jmp     short kbd_eat   ; yes, clean boot selected
 34661                                  kbd_notf5:
 34662                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 34663                                          cmp     ah,65h          ; CTRL F8
 34664                                          je	short kbd_cfg_confirm
 34665                                  
 34666                                          cmp     ah,42h          ; F8 function key?
 34667                                          jne	short kbd_exit	; no
 34668                                  kbd_cfg_confirm:
 34669                                          mov     dx,_$InterMsg
 34670                                          call    print           ;
 34671                                          mov     bl,1            ; yes, interactive-boot option enabled
 34672                                          mov     [bQueryOpt],bl  ; change default setting
 34673                                  kbd_eat:                        ;
 34674                                          mov     ah,0            ;
 34675                                          int     16h             ; eat the key we assumed was a signal
 34676                                          mov	byte [secElapsed],-1
 34677                                          or      bx,bx           ;
 34678                                          jz	short kbd_clean	;
 34679                                  kbd_test:                       ;
 34680                                          cmp     bl,2            ;
 34681                                          jb	short kbd_exit	;
 34682                                  kbd_clean:                      ;
 34683                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 34684                                          stc                     ; set carry to indicate abort
 34685                                          retn			;
 34686                                  kbd_exit:                       ;
 34687                                          clc                     ; clear carry to indicate success
 34688                                          retn			;
 34689                                  
 34690                                  ;----------------------------------------------------------------------------
 34691                                  ;
 34692                                  ;   set_numlock: set numlock LED
 34693                                  ;
 34694                                  ;   INPUT
 34695                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 34696                                  ;
 34697                                  ;   OUTPUT
 34698                                  ;       None
 34699                                  ;
 34700                                  ;   OTHER REGS USED
 34701                                  ;       None
 34702                                  ;
 34703                                  ;   HISTORY
 34704                                  ;       Created 16-Nov-1992 by JeffPar
 34705                                  ;
 34706                                  ;----------------------------------------------------------------------------
 34707                                  
 34708                                  set_numlock:
 34709                                          push    ax
 34710                                          push    ds
 34711                                          sub     ax,ax
 34712                                          mov     ds,ax
 34713                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 34714                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 34715                                          jne	short not_off	; no
 34716                                          and     byte [0417h],~20h ; 0DFh
 34717                                          jmp     short set_done
 34718                                  not_off:
 34719                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 34720                                          stc
 34721                                          jne	short set_done	; no
 34722                                          or      byte [0417h],20h
 34723                                  set_done:
 34724                                          pop     ds
 34725                                          pop     ax
 34726                                          retn
 34727                                  
 34728                                  ; 16/04/2019 - Retro DOS v4.0
 34729                                  
 34730                                  ;----------------------------------------------------------------------------
 34731                                  ;
 34732                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 34733                                  ;
 34734                                  ;   INPUT
 34735                                  ;       CX == "organized" config.sys memory image length
 34736                                  ;    ES:SI -> "organized" config.sys memory image
 34737                                  ;       DS == CS == sysinitseg
 34738                                  ;
 34739                                  ;   OUTPUT
 34740                                  ;       Same as above;  the idea is that menu_check simply transforms
 34741                                  ;       a block-structured config.sys image into a conventional image,
 34742                                  ;       based on the user's block selection and any other boot-time options
 34743                                  ;       the user may have employed...
 34744                                  ;
 34745                                  ;   OTHER REGS USED
 34746                                  ;       All
 34747                                  ;
 34748                                  ;   NOTES
 34749                                  ;       [count] and [org_count] are set to the new config.sys image length
 34750                                  ;
 34751                                  ;   HISTORY
 34752                                  ;       Created 16-Mar-1992 by JeffPar
 34753                                  ;
 34754                                  ;----------------------------------------------------------------------------
 34755                                  
 34756                                  menu_check:
 34757                                  
 34758                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 34759                                  ;   disable clean/interactive boot options
 34760                                  
 34761                                          push    cx              ;
 34762                                          push    si              ;
 34763                                          sub     bx,bx           ; remains ZERO until first block
 34764                                  swchk_loop:                     ;
 34765                                          call    get_char        ; get first char of current line
 34766                                          jc	short swchk_end	; hit eof
 34767                                          cmp     al,CONFIG_BEGIN ;
 34768                                          jne	short swchk_next1 ;
 34769                                          inc     bx              ; remember that we've seen a block
 34770                                          jmp     short swchk_nextline
 34771                                  swchk_next1:                    ;
 34772                                          cmp     al,CONFIG_NUMLOCK
 34773                                          jne	short swchk_next2 ;
 34774                                          or      bx,bx           ; only do NUMLOCK commands that exist
 34775                                          jnz	short swchk_nextline ; before the first block
 34776                                          call    set_numlock     ; REM it out so we don't act on it later, too
 34777                                          mov     byte [es:si-1],CONFIG_REM
 34778                                          jmp     short swchk_nextline
 34779                                  swchk_next2:                    ;
 34780                                          cmp     al,CONFIG_SWITCHES
 34781                                          jne	short swchk_nextline ; this line ain't it
 34782                                  swchk_scan:                     ;
 34783                                          call    get_char        ; look for /N or /F
 34784                                  swchk_scan1:                    ;
 34785                                          cmp     al,LF           ; end of line?
 34786                                          je	short swchk_nextline ; yes
 34787                                          cmp     al,'/'          ; switch-char?
 34788                                          jne	short swchk_scan ; no
 34789                                          call    get_char        ;
 34790                                          and     al,~20h ; 0DFh	; convert to upper case
 34791                                          cmp     al,[swit_n+1]
 34792                                          jne	short swchk_scan2 ; no
 34793                                          or      byte [bDisableUI],1
 34794                                          jmp	short swchk_scan ; continue looking for switches of interest
 34795                                  swchk_scan2:                    ;
 34796                                          cmp     al,[swit_f+1]
 34797                                          jne	short swchk_scan1 ; no
 34798                                          or      byte [bDisableUI],2
 34799                                          jmp     short swchk_scan ; continue looking for switches of interest
 34800                                  swchk_nextline:                 ;
 34801                                          call    skip_opt_line   ;
 34802                                          jmp     short swchk_loop ;
 34803                                  swchk_end:                      ;
 34804                                          pop     si              ;
 34805                                          pop     cx              ;
 34806                                  
 34807                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 34808                                  ;   the DisableUI flag is still clear
 34809                                  
 34810                                          test    byte [bDisableUI],1
 34811                                          jnz	short menu_search
 34812                                  ;
 34813                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 34814                                  ;   there is anything at all in the keyboard buffer
 34815                                  ;
 34816                                          call    kbd_read
 34817                                          jnc	short menu_search
 34818                                          jmp	menu_abort
 34819                                  
 34820                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 34821                                  
 34822                                  menu_search:
 34823                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 34824                                          mov     di,szMenu	;
 34825                                          call    find_block      ; find the MENU block
 34826                                          jnc	short menu_found ;
 34827                                          mov     byte [szBoot],0
 34828                                          jmp	no_selection ; not found
 34829                                  
 34830                                  ;   Process the requested menu color(s)
 34831                                  
 34832                                  menu_color:
 34833                                          push    cx              ;
 34834                                          push    dx              ;
 34835                                          mov     dx,0007h        ; default color setting
 34836                                          call    get_number	; get first number
 34837                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 34838                                          mov     ch,bl           ; save it in CH
 34839                                          and     dl,0F0h         ;
 34840                                          or      dl,bl           ;
 34841                                          call    delim           ; did we hit a delimiter
 34842                                          jne	short check_color ; no, all done
 34843                                          call    get_number	; get next number
 34844                                          and     bl,0Fh		; second # is background color (for high nibble)
 34845                                          mov     dh,bl           ; save it in DH
 34846                                          and     dl,0Fh		;
 34847                                          mov     cl,4            ;
 34848                                          shl     bl,cl           ;
 34849                                          or      dl,bl           ;
 34850                                  check_color:                    ;
 34851                                          cmp     ch,dh           ; are foreground/background the same?
 34852                                          jne	short set_color	; no
 34853                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 34854                                  set_color:
 34855                                          mov     [bMenuColor],dl ;
 34856                                          pop     dx              ;
 34857                                          pop     cx              ;
 34858                                          jmp	menu_nextitem
 34859                                  
 34860                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 34861                                  ;   above is there simply to alleviate short jump problems)
 34862                                  
 34863                                  menu_found:
 34864                                          mov     byte [bDefBlock],1
 34865                                          mov     word [offDefBlock],0
 34866                                          mov     byte [secTimeOut],-1
 34867                                          and     byte [bQueryOpt],~2 ; 0FDh
 34868                                  
 34869                                          call    skip_opt_line   ; skip to next line
 34870                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 34871                                  
 34872                                  ;   Process the menu block now
 34873                                  
 34874                                  menu_process:
 34875                                          call    get_char        ; get first char of current line
 34876                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 34877                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34878                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 34879                                          je	short to_menu_getdefault
 34880                                          cmp     al,CONFIG_SUBMENU
 34881                                          je	short menu_item	; go process sub-menu
 34882                                          cmp     al,CONFIG_MENUITEM
 34883                                          je	short menu_item	; go process menu item
 34884                                          cmp     al,CONFIG_MENUDEFAULT
 34885                                          je	short menu_default ; go process menu default
 34886                                          cmp     al,CONFIG_MENUCOLOR
 34887                                          je	short menu_color ; go process menu color
 34888                                          cmp     al,CONFIG_NUMLOCK
 34889                                          je	short menu_numlock ;
 34890                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 34891                                          je	short menu_nextitem ;
 34892                                          call    any_delim       ; allow blank lines and such
 34893                                          je	short menu_nextitem ;
 34894                                          stc                     ;
 34895                                          call    print_error     ; non-MENU command!
 34896                                          jmp     short menu_nextitem
 34897                                  menu_numlock:
 34898                                          call    set_numlock
 34899                                          jmp     short menu_nextitem
 34900                                  to_menu_getdefault:
 34901                                          jmp     short menu_getdefault
 34902                                  
 34903                                  ;   Save the offset of the default block name, we'll need it later
 34904                                  
 34905                                  menu_default:
 34906                                          mov     [offDefBlock],si; save address of default block name
 34907                                          cmp     byte [secElapsed],0
 34908                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 34909                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 34910                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 34911                                          call    skip_delim      ; something is typed
 34912                                          jc	short menu_nextitem ;
 34913                                          mov     si,bx           ;
 34914                                          call    get_number      ; get number (of seconds for timeout)
 34915                                          cmp     bl,90           ; limit it to a reasonable number
 34916                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 34917                                          mov     bl,90           ;  display function can handle)
 34918                                  timeout_ok:                     ;
 34919                                          mov     [secTimeOut],bl ;
 34920                                  timeout_skip:
 34921                                          jmp     short menu_nextitem
 34922                                  
 34923                                  ;   Verify that this is a valid menu item by searching for the named block
 34924                                  
 34925                                  menu_item:
 34926                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 34927                                          jae	short menu_nextitem ;
 34928                                          mov     di,si           ; DS:DI -> block name to search for
 34929                                          call    srch_block      ;
 34930                                          je	short menu_itemfound ;
 34931                                          stc                     ;
 34932                                          call    print_error     ; print error and pause
 34933                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 34934                                  
 34935                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 34936                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 34937                                  ;   and CX are unmodified
 34938                                  
 34939                                  menu_itemfound:
 34940                                          inc     dx              ; otherwise, increment total block count
 34941                                          mov     bx,dx           ; and use it to index the arrays of offsets
 34942                                          mov	[abBlockType+bx],al
 34943                                          add     bx,bx           ; of recorded block names and descriptions
 34944                                  
 34945                                  ;   There should be a description immediately following the block name on
 34946                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 34947                                  ;   description...
 34948                                  
 34949                                          mov     [aoffBlockName+bx],si
 34950                                          mov     [aoffBlockDesc+bx],si
 34951                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 34952                                          call    skip_token      ;
 34953                                          jc	short menu_nextitem ; hit eol/eof
 34954                                          call    skip_delim      ;
 34955                                          jc	short menu_nextitem ; hit eol/eof
 34956                                          xchg    bx,di           ;
 34957                                          mov     [aoffBlockDesc+bx],di
 34958                                  
 34959                                  menu_nextitem:
 34960                                          call    skip_opt_line   ;
 34961                                          jmp     menu_process    ; go back for more lines
 34962                                  
 34963                                  ;   Display menu items now, after determining which one is default
 34964                                  
 34965                                  menu_getdefault:
 34966                                          or      dl,dl           ; where there any valid blocks at all?
 34967                                          jnz	short menu_valid ; yes
 34968                                          sub     bx,bx           ; no, so force autoselect of 0
 34969                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 34970                                  menu_valid:
 34971                                          sub     bx,bx           ;
 34972                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 34973                                          mov     di,[offDefBlock];
 34974                                          or      di,di           ; does a default block exist?
 34975                                          jz	short menu_nodefault ; no
 34976                                          inc     bx              ; yes, walk name table, looking for default
 34977                                  menu_chkdefault:
 34978                                          push    bx              ;
 34979                                          add     bx,bx           ;
 34980                                          mov     si,[aoffBlockName+bx]
 34981                                          mov     cx,128          ; arbitrary maximum length of a name
 34982                                          push    ds              ;
 34983                                          push    es              ;
 34984                                          pop     ds              ;
 34985                                          call    comp_names      ; is this block the same as the default?
 34986                                          pop     ds              ;
 34987                                          pop     bx              ;
 34988                                          je	short menu_setdefault ; yes
 34989                                          inc     bx              ;
 34990                                          cmp     bl,[bMaxBlock]  ; all done searching?
 34991                                          jbe	short menu_chkdefault ; not yet
 34992                                  menu_nodefault:
 34993                                          mov     bl,1            ; if no default, force default to #1
 34994                                  menu_setdefault:
 34995                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 34996                                  
 34997                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 34998                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 34999                                  ;   supposed to skip menu display and run with the specified default block;
 35000                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 35001                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 35002                                  ;   with no timeout)
 35003                                  
 35004                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 35005                                          jne	short menu_display ; no
 35006                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 35007                                          jnz	short menu_display ; yes, so *don't* assume default after all
 35008                                          jmp     not_topmenu	;
 35009                                  
 35010                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 35011                                  
 35012                                  menu_display:
 35013                                          mov     ah,0Fh          ; get current video mode
 35014                                          int     10h             ;
 35015                                          mov     ah,00h          ; just re-select that mode
 35016                                          int     10h             ;
 35017                                          push    es              ;
 35018                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 35019                                          mov     es,ax           ; and save the current (default) video page
 35020                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 35021                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 35022                                          mov     al,[es:0062h]   ;
 35023                                          mov     [bCRTPage],al   ;
 35024                                          mov     ax,[bMenuPage]	; select new page for menu
 35025                                          int     10h             ;
 35026                                          mov     ax,0600h        ; clear entire screen
 35027                                          mov     bh,[bMenuColor] ; using this color
 35028                                          sub     cx,cx           ; upper left row/col
 35029                                          ;mov	dl,[es:CRT_Cols] 
 35030                                          mov	dl,[es:4Ah]
 35031                                  	dec     dl              ;
 35032                                          ;mov	dh,[es:CRT_Rows];
 35033                                          mov	dh,[es:84h]
 35034                                  	or      dh,dh           ; # of rows valid?
 35035                                          jnz	short menu_clear ; hopefully
 35036                                          mov     dh,[bLastRow]   ; no, use a default
 35037                                  menu_clear:
 35038                                          int     10h             ; clear the screen using the req. attribute
 35039                                          pop     es              ;
 35040                                          mov     [bLastRow],dh   ; save DH
 35041                                          mov     dx,_$MenuHeader
 35042                                          call    print           ; cursor now on row 3 (numbered from 0)
 35043                                  
 35044                                          test    byte [bDisableUI],1
 35045                                          jnz     short menu_nostatus
 35046                                          mov     bh,[bMenuPage]  ;
 35047                                          mov     dh,[bLastRow]   ; restore DH
 35048                                          mov     dl,0            ; print the status line on row DH, col 0,
 35049                                          mov     ah,02h          ; now that we can trash the cursor position
 35050                                          int     10h             ;
 35051                                          mov     dx,_$StatusLine
 35052                                          call    print           ;
 35053                                          mov     ah,3            ; get cursor position
 35054                                          int     10h             ;
 35055                                          sub     dl,2            ;
 35056                                          mov     [bLastCol],dl   ; save column where status char will go
 35057                                  
 35058                                  menu_nostatus:
 35059                                          mov     bx,1            ; now prepare to display all the menu items
 35060                                  menu_disploop:
 35061                                          call    print_item	; print item #BL
 35062                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 35063                                          cmp     bl,[bMaxBlock]  ; all done?
 35064                                          jbe	short menu_disploop ; not yet
 35065                                  
 35066                                  ;   Set cursor position to just below the menu items
 35067                                  
 35068                                          mov     dl,0            ; select column
 35069                                          mov     dh,bl           ;
 35070                                          add     dh,4            ; select row below menu
 35071                                          mov     bh,[bMenuPage]  ;
 35072                                          mov     ah,02h          ; set cursor position beneath the block list
 35073                                          int     10h             ;
 35074                                  
 35075                                          mov     dx,_$MenuPrmpt
 35076                                          call    print           ;
 35077                                          call    select_item     ; make a selection, return # in BX
 35078                                          mov     dx,crlfm	
 35079                                          call    print           ;
 35080                                          push    word [bDisableUI]
 35081                                          or      byte [bDisableUI],1
 35082                                          call    show_status     ; clear the status line now
 35083                                          pop     word [bDisableUI]
 35084                                  
 35085                                  ;   Now begins the "re-organization" process...
 35086                                  
 35087                                  menu_autoselect:
 35088                                          cmp     bx,-1           ; clean boot requested?
 35089                                          jne	short normal_boot ; no
 35090                                          call    disable_autoexec; basically, add a /D to the command.com line
 35091                                  menu_abort:
 35092                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 35093                                          jmp	menu_exit	;
 35094                                  
 35095                                  normal_boot:
 35096                                          cmp     bx,-2           ; back to top-level menu?
 35097                                          jne	short not_topmenu ; no
 35098                                          mov     cx,[count]      ; yes, start all over
 35099                                          sub     si,si           ;
 35100                                          jmp     menu_search
 35101                                  
 35102                                  not_topmenu:
 35103                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 35104                                          jne	short not_submenu
 35105                                          add     bx,bx           ;
 35106                                          mov     di,[aoffBlockName+bx]
 35107                                          call    srch_block      ; THIS CANNOT FAIL!
 35108                                          mov     si,di           ;
 35109                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 35110                                          jmp     menu_found
 35111                                  
 35112                                  not_submenu:
 35113                                          add     bx,bx           ; get BX -> name of selected block
 35114                                          mov     bx,[aoffBlockName+bx]
 35115                                  
 35116                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 35117                                  ;   the offset relative to ES of the block name to be processed (along with
 35118                                  ;   all the "common" lines of course)
 35119                                  
 35120                                  no_selection:
 35121                                          mov     [offDefBlock],bx; save selection
 35122                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 35123                                          sub     si,si           ;
 35124                                          push    ds              ;
 35125                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 35126                                          sub     di,di           ;
 35127                                  
 35128                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 35129                                  ;
 35130                                  ;   Work our way through the config.sys image again, this time copying
 35131                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 35132                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 35133                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 35134                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 35135                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 35136                                  ;
 35137                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 35138                                  ;   stack we're running on, then we should check it inside copy_block
 35139                                  
 35140                                  copyblock_loop:
 35141                                          push    bx              ; save selected block name
 35142                                          call    copy_block      ; process (named or common) block
 35143                                          pop     bx              ;
 35144                                          jc	short move_config ; hit eof
 35145                                  
 35146                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 35147                                  
 35148                                  copyblock_begin:
 35149                                          push    ax              ;
 35150                                          push    cx              ;
 35151                                          push    si              ;
 35152                                          push    di              ; always do "common" blocks
 35153                                          mov     di,szCommon
 35154                                          push    ds              ;
 35155                                          push    cs              ;
 35156                                          pop     ds              ;
 35157                                          call    comp_names      ;
 35158                                          pop     ds              ;
 35159                                          pop     di              ;
 35160                                          pop     si              ;
 35161                                          pop     cx              ;
 35162                                          pop     ax              ;
 35163                                          je	short copyblock_check
 35164                                          or      bx,bx           ; is there a block name to check?
 35165                                          jz	short copyblock_skip ; no
 35166                                          push    di              ;
 35167                                          mov     di,bx           ; check block against given block name
 35168                                          push    ds              ;
 35169                                          push    es              ;
 35170                                          pop     ds              ;
 35171                                          call    comp_names      ; is this the block we really want to do?
 35172                                          pop     ds              ;
 35173                                          pop     di              ;
 35174                                  copyblock_check:
 35175                                          jc	short move_config ; hit eof
 35176                                          jne	short copyblock_skip  ;
 35177                                          call    skip_opt_line   ;
 35178                                          jmp	short copyblock_loop 
 35179                                  
 35180                                  copyblock_skip:                 ;
 35181                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 35182                                          call    get_char        ;
 35183                                          jc	short move_config ; hit eof
 35184                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35185                                          cmp     al,CONFIG_BEGIN ;
 35186                                          je	short copyblock_begin
 35187                                          jmp     short copyblock_skip ; anything else is just skipped
 35188                                  ;
 35189                                  ;   To create as little risk to the rest of SysInit as little as possible,
 35190                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 35191                                  ;   copy the new config.sys image to "confbot"
 35192                                  ;
 35193                                  move_config:
 35194                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 35195                                          push    cx              ;
 35196                                  ;
 35197                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 35198                                  ;   since the configuration name only currently exists in the "confbot" area
 35199                                  ;
 35200                                   	;mov	cx,7
 35201                                  	mov     cx,szMenu-szBoot-1
 35202                                          mov     si,szBoot	; first copy the CONFIG= part
 35203                                          inc     di              ; skip a byte, in case absolutely nothing
 35204                                                                  ; was copied to the workspace, because we always
 35205                                                                  ; zero the first byte of the workspace (below)
 35206                                  copy_boot: 
 35207                                  	;lods    byte ptr cs:[si];
 35208                                          cs
 35209                                  	lodsb
 35210                                  	mov     [di],al         ;
 35211                                          inc     di              ;
 35212                                          loop    copy_boot       ;
 35213                                  
 35214                                          push    es              ; then copy the configuration name
 35215                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 35216                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 35217                                          or      si,si           ; valid?
 35218                                          jnz	short l1	; yes
 35219                                          push    cs              ;
 35220                                          pop     es              ;
 35221                                          mov     si,szCommon
 35222                                  l1:     mov     al,[es:si]      ;
 35223                                          call    any_delim       ;
 35224                                          je	short l2	;
 35225                                          mov     [di],al         ;
 35226                                          inc     si              ;
 35227                                          inc     di              ;
 35228                                          loop    l1              ;
 35229                                  l2:     mov     byte [di],lf	; terminate the configuration string
 35230                                          pop     es              ;
 35231                                  
 35232                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 35233                                  
 35234                                          sub     di,di           ;
 35235                                          mov     [cs:config_envlen],di
 35236                                          sub     si,si           ;
 35237                                          pop     cx              ; recover the size of "config_wrkseg"
 35238                                  
 35239                                          push    cx              ;
 35240                                          rep     movsb           ; moved!
 35241                                          pop     cx              ;
 35242                                          mov     ax,ds           ;
 35243                                          pop     ds              ;
 35244                                  
 35245                                  ;   Now that the config_wrkseg is available once again, we shall
 35246                                  ;   use it to create an environment. The first thing to go in will be
 35247                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 35248                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 35249                                  ;   is empty.
 35250                                  
 35251                                          push    es              ;
 35252                                          mov     es,ax           ;
 35253                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 35254                                          mov     byte [es:0],0	;empty the environment block
 35255                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 35256                                          pop     es
 35257                                  
 35258                                  ;   Before returning, restore the default video page setting but do NOT
 35259                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 35260                                  ;   displayed on a different page, then it's because we don't want to see
 35261                                  ;   all the device driver/TSR goop (which goes to the default page)
 35262                                  
 35263                                  menu_done:
 35264                                          cmp     byte [bMenuPage],0
 35265                                          je	short menu_exit	;
 35266                                          push    es              ;
 35267                                          mov     ax,40h          ;
 35268                                          mov     es,ax           ;
 35269                                          mov     ax,[wCRTStart]  ;
 35270                                          mov     [es:004Eh],ax   ;
 35271                                          mov     al,[bCRTPage]   ;
 35272                                          mov     [es:0062h],al   ;
 35273                                          pop     es              ;
 35274                                  menu_exit:
 35275                                          mov     [count],cx      ; set new counts
 35276                                          mov     [org_count],cx  ;
 35277                                          sub     si,si           ; always return ES:SI pointing to config.sys
 35278                                          retn
 35279                                  
 35280                                  ;----------------------------------------------------------------------------
 35281                                  ;
 35282                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 35283                                  ;
 35284                                  ;   INPUT
 35285                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 35286                                  ;
 35287                                  ;   OUTPUT
 35288                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 35289                                  ;       carry set if error (eg, missing =); clear otherwise
 35290                                  ;
 35291                                  ;   OTHER REGS USED
 35292                                  ;       None
 35293                                  ;
 35294                                  ;   NOTES
 35295                                  ;       None
 35296                                  ;
 35297                                  ;   HISTORY
 35298                                  ;       Created 29-Mar-1992 by JeffPar
 35299                                  ;
 35300                                  ;----------------------------------------------------------------------------
 35301                                  
 35302                                  copy_envvar:
 35303                                          push    cx              ;
 35304                                          push    si              ;
 35305                                          push    ds              ;
 35306                                          push    es              ;
 35307                                          push    es              ;
 35308                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 35309                                          pop     ds                 ; DS:SI to point to envvar
 35310                                  
 35311                                  ;   Have to calculate the length of the variable name (and if we hit
 35312                                  ;   the end of the line before we hit '=', then it's curtains for this
 35313                                  ;   config.sys line)
 35314                                  ;
 35315                                  ;   The check for NULL is important because copy_envvar is also used to copy
 35316                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 35317                                  ;   menu block existed (in order to prevent the creation of an environment)
 35318                                  
 35319                                          sub     cx,cx           ;
 35320                                  copy_varlen:                    ;
 35321                                          lodsb                   ;
 35322                                          or      al,al           ; NULL?
 35323                                          stc                     ;
 35324                                          jz	short copy_envexit ; yes, abort
 35325                                          cmp     al,cr          ;
 35326                                          stc                     ;
 35327                                          je	short copy_envexit
 35328                                          cmp     al,lf          ;
 35329                                          stc                     ;
 35330                                          je	short copy_envexit
 35331                                          inc     cx              ;
 35332                                          cmp     al,'='          ;
 35333                                          jne	short copy_varlen
 35334                                          mov     al,0            ;
 35335                                          mov     ah,[si]         ; save char after '='
 35336                                          sub     si,cx           ; back up to given varname
 35337                                          dec     cx              ; CX == # of bytes in varname
 35338                                          sub     di,di           ; start looking for DS:SI at ES:0
 35339                                  copy_varsrch:
 35340                                          cmp     byte [es:di],al
 35341                                          je	short copy_envprep ; search failed, just copy var
 35342                                          mov     bx,di           ; ES:BX -> start of this varname
 35343                                          push    cx              ;
 35344                                          push    si              ;
 35345                                          repe    cmpsb           ;
 35346                                          pop     si              ;
 35347                                          pop     cx              ;
 35348                                          jne	short copy_varnext ; no match, skip to next varname
 35349                                          cmp     byte [es:di],'='
 35350                                          jne     short copy_varnext ; no match, there's more characters
 35351                                  
 35352                                  ;   Previous occurrence of variable has been found; determine the
 35353                                  ;   entire length and then destroy it
 35354                                  
 35355                                          mov     cx,-1           ;
 35356                                          repne   scasb           ; guaranteed to get null (since we put it there)
 35357                                          push    si              ;
 35358                                          mov     si,di           ;
 35359                                          mov     di,bx           ;
 35360                                          mov     cx,[cs:config_envlen]
 35361                                          sub     cx,si           ; destroy variable now
 35362                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 35363                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO.SYS - SYSINIT:4724h
 35364                                  
 35365                                  	rep	; 0F3h
 35366                                  	es	; 26h
 35367                                  	movsb	; 0A4h
 35368                                  
 35369                                  	pop     si
 35370                                  copy_envprep:
 35371                                          cmp     ah,cr          ; if there is nothing after the '='
 35372                                          je	short copy_envdel ; then just exit with variable deleted
 35373                                          cmp     ah,lf           ;
 35374                                          je	short copy_envdel
 35375                                          jmp     short copy_envloop
 35376                                  
 35377                                  copy_varnext:                   ;
 35378                                          push    cx              ;
 35379                                          mov     cx,-1           ;
 35380                                          repne   scasb           ;
 35381                                          pop     cx              ;
 35382                                          jmp	short copy_varsrch
 35383                                  
 35384                                  copy_envloop:                   ;
 35385                                          lodsb                   ;
 35386                                          cmp     al,cr           ;
 35387                                          je	short copy_envdone
 35388                                          cmp     al,lf           ;
 35389                                          je	short copy_envdone
 35390                                          stosb                   ;
 35391                                          jmp     short copy_envloop
 35392                                  
 35393                                  copy_envdone:                   ;
 35394                                          sub     al,al           ; do SUB to clear carry as well
 35395                                          stosb                   ; always null-terminate these puppies
 35396                                  copy_envdel:                    ;
 35397                                          mov     [es:di],al      ; and stick another null to terminate the env.
 35398                                          mov     [cs:config_envlen],di
 35399                                  
 35400                                  copy_envexit:                   ;
 35401                                          pop     es              ;
 35402                                          pop     ds              ;
 35403                                          pop     si              ;
 35404                                          pop     cx              ;
 35405                                  
 35406                                  copy_done:	; 18/12/2022
 35407                                          retn
 35408                                  
 35409                                  ;----------------------------------------------------------------------------
 35410                                  ;
 35411                                  ;   copy_block:  copy the current block to the new config.sys workspace
 35412                                  ;
 35413                                  ;   INPUT
 35414                                  ;       CX == remaining bytes in "organized" config.sys memory image
 35415                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 35416                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 35417                                  ;             config.sys image) where the current block is to be copied
 35418                                  ;
 35419                                  ;   OUTPUT
 35420                                  ;       Same as above
 35421                                  ;       AL also equals the last character read from the organized image
 35422                                  ;
 35423                                  ;   OTHER REGS USED
 35424                                  ;       All
 35425                                  ;
 35426                                  ;   NOTES
 35427                                  ;       None
 35428                                  ;
 35429                                  ;   HISTORY
 35430                                  ;       Created 16-Mar-1992 by JeffPar
 35431                                  ;
 35432                                  ;----------------------------------------------------------------------------
 35433                                  
 35434                                  copy_block:
 35435                                          call    get_char        ; check for include
 35436                                          jc	short copy_done	;
 35437                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 35438                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 35439                                          je	short copy_done ;
 35440                                  
 35441                                          cmp     al,CONFIG_INCLUDE ; 'J'
 35442                                          mov     al,ah           ; AL == the original line code
 35443                                          jne	short copy_line	; not an "include" line
 35444                                  
 35445                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 35446                                  ;   never try to include the block again (no infinite include loops please),
 35447                                  ;   then search for the named block and call copy_block again.
 35448                                  
 35449                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 35450                                          push    di              ;
 35451                                  
 35452                                          mov     di,szMenu
 35453                                          call    comp_names_safe ; don't allow INCLUDE MENU
 35454                                          je	short copy_skip	;
 35455                                  
 35456                                          mov     di,szCommon
 35457                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 35458                                          je	short copy_skip	;
 35459                                  
 35460                                          mov     di,si           ; try to find the block
 35461                                          call    srch_block      ;
 35462                                          mov     dx,di           ;
 35463                                          pop     di              ;
 35464                                          jne	short copy_error ; no such block
 35465                                          push    cx              ;
 35466                                          mov     cx,bx           ;
 35467                                          push    si              ;
 35468                                          dec     dx              ;
 35469                                          mov     si,dx           ;
 35470                                          call    skip_line       ; skip the rest of the "block name" line
 35471                                          call    copy_block      ; and copy in the rest of that block
 35472                                          pop     si              ;
 35473                                          pop     cx              ;
 35474                                          sub     al,al           ; force skip_opt_line to skip...
 35475                                          jmp     short copy_nextline
 35476                                  
 35477                                  copy_skip:
 35478                                          pop     di
 35479                                  copy_error:
 35480                                          clc                     ;
 35481                                          call    print_error     ; note that carry is clear, no pause
 35482                                          jmp     short copy_nextline
 35483                                  
 35484                                  ;   Copy the line at ES:SI to the current location at DS:DI
 35485                                  
 35486                                  copy_line:
 35487                                          mov     [di],al         ;
 35488                                          inc     di              ;
 35489                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 35490                                          jb	short copy_nextline ; no
 35491                                          cmp     byte [cs:config_multi],0
 35492                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 35493                                          call    get_linenum	; BX == line # of line @ES:SI
 35494                                          mov     [di],bx         ; stash it immediately following the line code
 35495                                          inc     di              ;
 35496                                          inc     di              ;
 35497                                          jmp     short copy_next ;
 35498                                  copy_loop:                      ;
 35499                                          call    get_char        ;
 35500                                          jc	short copy_done ; end of file
 35501                                          mov     [di],al         ;
 35502                                          inc     di              ;
 35503                                  copy_next:
 35504                                          cmp     al,lf ; 0Ah	; done with line?
 35505                                          jne	short copy_loop	; nope
 35506                                  
 35507                                  copy_nextline:
 35508                                          call    skip_opt_line   ;
 35509                                          jmp     short copy_block
 35510                                  
 35511                                  	; 18/12/2022
 35512                                  ;copy_done:
 35513                                          ;retn
 35514                                  
 35515                                  ;----------------------------------------------------------------------------
 35516                                  ;
 35517                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 35518                                  ;
 35519                                  ;   INPUT
 35520                                  ;    ES:SI -> some line in the config.sys memory image
 35521                                  ;
 35522                                  ;   OUTPUT
 35523                                  ;       BX == line # (relative to 1)
 35524                                  ;
 35525                                  ;   OTHER REGS USED
 35526                                  ;       DX
 35527                                  ;
 35528                                  ;   NOTES
 35529                                  ;       None
 35530                                  ;
 35531                                  ;   HISTORY
 35532                                  ;       Created 16-Mar-1992 by JeffPar
 35533                                  ;
 35534                                  ;----------------------------------------------------------------------------
 35535                                  
 35536                                  get_linenum:
 35537                                          push    ax              ;
 35538                                          sub     bx,bx           ; BX == line # (to be returned)
 35539                                          push    cx              ;
 35540                                          mov     dx,si           ; DX == the offset we're looking for
 35541                                          push    si              ;
 35542                                          mov     cx,[cs:count]   ;
 35543                                          sub     si,si           ; prepare to scan entire file
 35544                                  get_linenum_loop:               ;
 35545                                          call    skip_line       ;
 35546                                          jc	short get_linenum_done
 35547                                          inc     bx              ;
 35548                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 35549                                          jb	short get_linenum_loop ; no
 35550                                  get_linenum_done:               ;
 35551                                          pop     si              ;
 35552                                          pop     cx              ;
 35553                                          pop     ax              ;
 35554                                          retn
 35555                                  
 35556                                  ;----------------------------------------------------------------------------
 35557                                  ;
 35558                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 35559                                  ;
 35560                                  ;   INPUT
 35561                                  ;       ES -> config.sys image
 35562                                  ;    ES:DI -> block name to find
 35563                                  ;
 35564                                  ;   OUTPUT
 35565                                  ;       ZF flag set, if found
 35566                                  ;    ES:DI -> just past the name in the block heading, if found
 35567                                  ;       BX == # bytes remaining from that point, if found
 35568                                  ;
 35569                                  ;   OTHER REGS USED
 35570                                  ;       None
 35571                                  ;
 35572                                  ;   NOTES
 35573                                  ;       This differs from "find_block" in that it searches the ENTIRE
 35574                                  ;       config.sys image, not merely the remaining portion, and that it
 35575                                  ;       takes a pointer to block name that is *elsewhere* in the image
 35576                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 35577                                  ;
 35578                                  ;   HISTORY
 35579                                  ;       Created 16-Mar-1992 by JeffPar
 35580                                  ;
 35581                                  ;----------------------------------------------------------------------------
 35582                                  
 35583                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 35584                                          push    ax              ;
 35585                                          push    cx              ;
 35586                                          mov     cx,[cs:count]   ;
 35587                                          push    si              ;
 35588                                          sub     si,si           ;
 35589                                          push    ds              ;
 35590                                          push    es              ;
 35591                                          pop     ds              ;
 35592                                          call    find_block      ;
 35593                                          mov     di,si           ;
 35594                                          mov     bx,cx           ;
 35595                                          pop     ds              ;
 35596                                          pop     si              ;
 35597                                          pop     cx              ;
 35598                                          pop     ax              ;
 35599                                  find_exit: ; 16/04/2019
 35600                                          retn			;
 35601                                  
 35602                                  ;----------------------------------------------------------------------------
 35603                                  ;
 35604                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 35605                                  ;
 35606                                  ;   INPUT
 35607                                  ;    DS:DI -> block name to find
 35608                                  ;    ES:SI -> remainder of config.sys image
 35609                                  ;       CX == remaining size of config.sys image
 35610                                  ;
 35611                                  ;   OUTPUT
 35612                                  ;       ZF flag set, if found (also, CF set if EOF)
 35613                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 35614                                  ;       CX == # bytes remaining from that point
 35615                                  ;
 35616                                  ;   OTHER REGS USED
 35617                                  ;       AX
 35618                                  ;
 35619                                  ;   NOTES
 35620                                  ;       This differs from "srch_block" in that it searches only the
 35621                                  ;       remaining portion of the config.sys image and leaves SI and CX
 35622                                  ;       pointing to where the search left off, and that it takes a pointer
 35623                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 35624                                  ;
 35625                                  ;   HISTORY
 35626                                  ;       Created 16-Mar-1992 by JeffPar
 35627                                  ;
 35628                                  ;----------------------------------------------------------------------------
 35629                                  
 35630                                  find_block:
 35631                                          call    get_char        ; get line code
 35632                                          jc	short find_exit	; end of file
 35633                                          and     al,~CONFIG_OPTION_QUERY
 35634                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 35635                                          je	short check_line ; no
 35636                                          cmp     al,CONFIG_INCLUDE
 35637                                          jne	short next_line	;
 35638                                          or	byte [cs:config_multi],1
 35639                                          jmp     short next_line ;
 35640                                  check_line:
 35641                                          or      byte [cs:config_multi],1
 35642                                          call    comp_names      ; compare block names
 35643                                          jbe	short find_exit	; end of file, or names matched
 35644                                  next_line:
 35645                                          call    skip_opt_line   ; no, so skip to next line
 35646                                          jmp	short find_block  ;
 35647                                  ;find_exit:
 35648                                  ;	retn
 35649                                  
 35650                                  ;----------------------------------------------------------------------------
 35651                                  ;
 35652                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 35653                                  ;
 35654                                  ;   INPUT
 35655                                  ;    DS:DI -> keyword to compare
 35656                                  ;    ES:SI -> position in config.sys
 35657                                  ;       CX == remaining bytes in config.sys
 35658                                  ;
 35659                                  ;   OUTPUT
 35660                                  ;       ZF flag set, if match (also, CF set if EOF)
 35661                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 35662                                  ;       CX == # bytes remaining from that point
 35663                                  ;
 35664                                  ;   OTHER REGS USED
 35665                                  ;       AX
 35666                                  ;
 35667                                  ;   NOTES
 35668                                  ;       None
 35669                                  ;
 35670                                  ;   HISTORY
 35671                                  ;       Created 16-Mar-1992 by JeffPar
 35672                                  ;
 35673                                  ;----------------------------------------------------------------------------
 35674                                  
 35675                                  comp_names:
 35676                                          push    di              ;
 35677                                  comp_loop:                      ;
 35678                                          call    get_char        ;
 35679                                          jc	short comp_exit	;
 35680                                          call    any_delim       ; is next character a delimiter?
 35681                                          mov     ah,[di]         ; (get next character we're supposed to match)
 35682                                          je	short comp_almost ; yes, it *could* be a match
 35683                                          inc     di              ;
 35684                                          and     ax,~2020h ; 0DFDFh 
 35685                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 35686                                          cmp     al,ah           ; match?
 35687                                          je	short comp_loop ; yes, keep looking at the characters
 35688                                          clc                     ; prevent erroneous eof indication: clear carry
 35689                                  comp_exit:                      ;
 35690                                          pop     di              ;
 35691                                          retn			;
 35692                                  comp_almost:                    ;
 35693                                          xchg    al,ah           ; we don't know for sure if it's a match
 35694                                          call    any_delim       ; until we verify that the second string has
 35695                                          xchg    al,ah           ; been exhausted also...
 35696                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 35697                                  
 35698                                  ;----------------------------------------------------------------------------
 35699                                  
 35700                                  comp_names_safe:
 35701                                          push    ax
 35702                                          push    cx
 35703                                          push	si
 35704                                          push    ds
 35705                                          push    cs
 35706                                          pop     ds
 35707                                          call    comp_names
 35708                                          pop     ds
 35709                                  	pop	si
 35710                                          pop     cx
 35711                                          pop     ax
 35712                                          retn
 35713                                  
 35714                                  ;----------------------------------------------------------------------------
 35715                                  ;
 35716                                  ;   print_item:  display menu item #BL
 35717                                  ;
 35718                                  ;   INPUT
 35719                                  ;       BL == menu item # to display
 35720                                  ;
 35721                                  ;   OUTPUT
 35722                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 35723                                  ;
 35724                                  ;   OTHER REGS USED
 35725                                  ;       None
 35726                                  ;
 35727                                  ;   NOTES
 35728                                  ;       This function saves/restores the current cursor position, so you
 35729                                  ;       needn't worry about it.
 35730                                  ;
 35731                                  ;   HISTORY
 35732                                  ;       Created 16-Mar-1992 by JeffPar
 35733                                  ;
 35734                                  ;----------------------------------------------------------------------------
 35735                                  
 35736                                  print_item:		; prints menu item #BL (1 to N)
 35737                                          push    ax              ;
 35738                                          push    bx              ;
 35739                                          push    cx              ;
 35740                                          push    dx              ;
 35741                                          push    si              ;
 35742                                          mov     ah,03h          ; get cursor position
 35743                                          mov     bh,[bMenuPage]  ; always page zero
 35744                                          int     10h             ; DH/DL = row/column
 35745                                          push    dx              ; save it
 35746                                          mov     ah,02h          ; set cursor position
 35747                                          mov     dh,bl           ;
 35748                                          add     dh,3            ;
 35749                                          mov     dl,5            ;
 35750                                          int     10h             ; set cursor position for correct row/col
 35751                                          mov     al,bl           ;
 35752                                          add     al,'0'          ; convert menu item # to ASCII digit
 35753                                          mov     ah,[bMenuColor] ; normal attribute
 35754                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 35755                                          jne	short print_other ; no
 35756                                          or      ah,70h          ; yes, set bgnd color to white
 35757                                          mov     ch,ah           ;
 35758                                          mov     cl,4            ;
 35759                                          rol     ch,cl           ;
 35760                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 35761                                          jne	short print_other ; no
 35762                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 35763                                  print_other:                    ;
 35764                                          mov     bh,0            ;
 35765                                          add     bx,bx           ;
 35766                                          mov     di,[aoffBlockDesc+bx]
 35767                                          mov     bl,ah           ; put the attribute in the correct register now
 35768                                          mov     bh,[bMenuPage]  ; get correct video page #
 35769                                          mov     ah,09h          ; write char/attr
 35770                                          mov     cx,1            ;
 35771                                          int     10h             ;
 35772                                          inc     dl              ; increment column
 35773                                          mov     ah,02h          ;
 35774                                          int     10h             ;
 35775                                          ;mov	ax,0900h+'.'    ;
 35776                                          mov	ax,092Eh
 35777                                  	int     10h             ; display '.'
 35778                                          inc     dl              ; increment column
 35779                                          mov     ah,02h          ;
 35780                                          int     10h             ;
 35781                                          ;mov	ax,0900h+' '    ;
 35782                                          mov	ax,0920h
 35783                                  	int     10h             ; display ' '
 35784                                          inc     dl              ; increment column
 35785                                          mov     ah,02h          ;
 35786                                          int     10h             ;
 35787                                          push    es              ;
 35788                                  print_loop:                     ;
 35789                                          mov     al,[es:di]	; get a character of the description
 35790                                          inc     di              ;
 35791                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 35792                                          jne	short print_nontab ;
 35793                                          mov     al,' '          ;
 35794                                  print_nontab:                   ;
 35795                                          cmp     al,' '          ;
 35796                                          jb	short print_done ; stop at the 1st character < space
 35797                                          cmp     al,'$'          ;
 35798                                          je	short print_done ; also stop on $
 35799                                          mov     ah,09h          ; display function #
 35800                                          int     10h             ;
 35801                                          inc     dl              ; increment column
 35802                                          cmp     dl,78           ; far enough?
 35803                                          jae	short print_done ; yes
 35804                                          mov     ah,02h          ;
 35805                                          int     10h             ;
 35806                                          jmp     print_loop      ;
 35807                                  print_done:                     ;
 35808                                          pop     es              ;
 35809                                          pop     dx              ;
 35810                                          mov     ah,02h          ;
 35811                                          int     10h             ; restore previous row/col
 35812                                          pop     si              ;
 35813                                          pop     dx              ;
 35814                                          pop     cx              ;
 35815                                          pop     bx              ;
 35816                                          pop     ax              ;
 35817                                          retn			;
 35818                                  
 35819                                  ;----------------------------------------------------------------------------
 35820                                  ;
 35821                                  ;   select_item:  wait for user to select menu item, with time-out
 35822                                  ;
 35823                                  ;   INPUT
 35824                                  ;       None
 35825                                  ;
 35826                                  ;   OUTPUT
 35827                                  ;       BX == menu item # (1-N), or -1 for clean boot
 35828                                  ;       Selected menu item highlighted
 35829                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 35830                                  ;
 35831                                  ;   OTHER REGS USED
 35832                                  ;       None
 35833                                  ;
 35834                                  ;   NOTES
 35835                                  ;       None
 35836                                  ;
 35837                                  ;   HISTORY
 35838                                  ;       Created 16-Mar-1992 by JeffPar
 35839                                  ;
 35840                                  ;----------------------------------------------------------------------------
 35841                                  
 35842                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 35843                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 35844                                          mov     al,bl           ;
 35845                                          call    disp_num        ;
 35846                                          call    show_status     ; display current interactive status
 35847                                          cmp     byte [secTimeOut],-1
 35848                                          je	short input_key	; no time-out, just go to input
 35849                                          mov     ah,GET_TIME ; 2Ch
 35850                                          int     21h             ;
 35851                                          mov     bh,dh           ; BH = initial # of seconds
 35852                                  check_time:
 35853                                          mov     al,[secTimeOut] ;
 35854                                          sub     al,[secElapsed] ;
 35855                                          jae	short show_time	;
 35856                                          or      byte [bQueryOpt],2  ; disable all further prompting
 35857                                          mov     byte [secElapsed],0
 35858                                          jmp	select_done	; time's up!
 35859                                  show_time:
 35860                                          push    bx              ;
 35861                                          mov     bl,al           ; save # in BL
 35862                                          mov     bh,[bMenuPage]  ;
 35863                                          mov     ah,03h          ; get cursor position
 35864                                          int     10h             ;
 35865                                          push    dx              ;
 35866                                  	add	dl,8		; move cursor to the right
 35867                                          mov     ah,02h          ; set cursor position
 35868                                          int     10h             ;
 35869                                          mov     dx,_$TimeOut
 35870                                          call    print           ; print the "Time remaining: " prompt
 35871                                          mov     al,bl           ; recover # from BL
 35872                                          cbw                     ; this works because AL is always <= 90
 35873                                          mov     cl,10           ;
 35874                                          div     cl              ; AL = tens digit, AH = ones digit
 35875                                          mov     cl,ah           ;
 35876                                          add     al,'0'          ;
 35877                                          mov     ah,0Eh          ;
 35878                                          int     10h             ; write TTY tens digit
 35879                                          mov     al,cl           ;
 35880                                          add     al,'0'          ;
 35881                                          mov     ah,0Eh          ;
 35882                                          int     10h             ; write TTY ones digit
 35883                                          pop     dx
 35884                                          mov     ah,02h          ; set cursor position back to where it was
 35885                                          int     10h             ;
 35886                                          pop     bx              ;
 35887                                  input_key:
 35888                                          mov     ah,RAW_CON_IO ; 6
 35889                                          mov     dl,0FFh         ; input request
 35890                                          int     21h             ;
 35891                                          jnz	short got_key	;
 35892                                          cmp     byte [secTimeOut],-1; is there a time-out?
 35893                                          je	short input_key	; no, just go back to input
 35894                                          mov     ah,GET_TIME     ;
 35895                                          int     21h             ; DH = seconds
 35896                                          mov     ah,dh           ;
 35897                                          sub     dh,bh           ; should generally be zero or one
 35898                                          mov     bh,ah           ;
 35899                                          jnc	short got_time	;
 35900                                          mov     dh,1            ; it wrapped back to zero, so assume one
 35901                                  got_time:
 35902                                          or      dh,dh           ; any change?
 35903                                          jz	short input_key	; no
 35904                                          add     [secElapsed],dh ;
 35905                                          jmp	short check_time ;
 35906                                  got_key:
 35907                                          push    ax              ;
 35908                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 35909                                          xchg    [secTimeOut],ax
 35910                                          cmp     al,-1           ; was time-out already disabled?
 35911                                          je	short timeout_disabled ; yes
 35912                                          push    bx              ; let's disable # seconds display
 35913                                          mov     ax,0A20h        ; write multiple spaces
 35914                                          mov     bx,[bMenuColor]
 35915                                          mov     cx,80           ; 80 of them, to be safe
 35916                                          int     10h             ; to completely obliterate # seconds display
 35917                                          pop     bx   		;
 35918                                  
 35919                                  timeout_disabled:
 35920                                          pop     ax              ;
 35921                                          or      al,al           ; extended key pressed?
 35922                                          jnz	short normal_key ; no
 35923                                          int     21h             ; get the next part of the key then
 35924                                          jz	short input_key	; hmmm, what happened to the second part?
 35925                                  
 35926                                          cmp     al,48h          ; up arrow?
 35927                                          jne	short not_up	; no
 35928                                          cmp     bl,1            ; are we as up as up can get?
 35929                                          jbe	short input_key	; yes, ignore it
 35930                                          dec     byte [bDefBlock] ;
 35931                                          call    print_item      ; re-print the current item
 35932                                          dec     bl              ; and then print the new current item
 35933                                          jmp     short print1
 35934                                  not_up:
 35935                                          cmp     al,50h          ; down arrow?
 35936                                          jne	short not_down	; no
 35937                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 35938                                          jae	short to_input_key ; yes, ignore it
 35939                                          inc     byte [bDefBlock] ;
 35940                                          call    print_item      ; re-print the current item
 35941                                          inc     bx              ; and then print the new current item
 35942                                  print1: 
 35943                                  	mov     al,bl           ;
 35944                                  print2: 
 35945                                  	call    print_item      ;
 35946                                          call    disp_num        ;
 35947                                  to_input_key:
 35948                                          jmp     input_key       ;
 35949                                  not_down:
 35950                                          test    byte [bDisableUI],1
 35951                                          jnz	short to_input_key ; don't allow F8 or F5
 35952                                          cmp     al,42h          ; F8 function key?
 35953                                          jne	short not_f8	; no
 35954                                          xor     byte [bQueryOpt],1
 35955                                          call    show_status     ;
 35956                                          jmp     input_key	;
 35957                                  not_f8:
 35958                                          cmp     al,3Fh          ; F5 function key?
 35959                                          jne	short to_input_key ; no
 35960                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 35961                                          mov     al,' '          ; don't want to display anything really;
 35962                                          jmp     short disp_input; just want to display the cr/lf sequence...
 35963                                  
 35964                                  normal_key:
 35965                                          cmp     al,0Dh          ; Enter?
 35966                                          je	short select_done ; yes
 35967                                          cmp     al,08h          ; backspace?
 35968                                          jne	short not_backspace ; no
 35969                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 35970                                          retn			;
 35971                                  not_backspace:
 35972                                          sub     al,'0'          ; is greater than '0'?
 35973                                          jbe	short to_input_key ; no
 35974                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 35975                                          ja	short to_input_key ; no
 35976                                          mov	[bDefBlock],al  ;
 35977                                          call    print_item      ; redisplay the current selection
 35978                                          mov     bl,al           ; set new selection
 35979                                          jmp	short print2
 35980                                  
 35981                                  select_done:
 35982                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 35983                                          mov     al,bl           ;
 35984                                          add     al,'0'          ; convert it into a digit, then display it
 35985                                  
 35986                                  	; fall into disp_input
 35987                                  
 35988                                  ; 16/04/2019 - Retro DOS v4.0
 35989                                  
 35990                                  ;----------------------------------------------------------------------------
 35991                                  ;
 35992                                  ;   disp_input:  display a single character + cr/lf
 35993                                  ;
 35994                                  ;   INPUT
 35995                                  ;       AL == character to display
 35996                                  ;
 35997                                  ;   OUTPUT
 35998                                  ;       None
 35999                                  ;
 36000                                  ;   OTHER REGS USED
 36001                                  ;       None
 36002                                  ;
 36003                                  ;   NOTES
 36004                                  ;       This function is used not only for the menu input selection but
 36005                                  ;       also for the interactive line prompting (the y/n/a thing).
 36006                                  ;
 36007                                  ;   HISTORY
 36008                                  ;       Created 16-Mar-1992 by JeffPar
 36009                                  ;
 36010                                  ;----------------------------------------------------------------------------
 36011                                  
 36012                                  disp_input:
 36013                                          push    ax
 36014                                          cmp     al,' '
 36015                                          jae	short disp_ok
 36016                                          mov     al,' '
 36017                                  disp_ok:
 36018                                          mov     dl,al
 36019                                          mov     ah,STD_CON_OUTPUT ; 2
 36020                                          int     21h
 36021                                          mov     dx,crlfm
 36022                                          call    print
 36023                                          pop     ax
 36024                                          retn
 36025                                  
 36026                                  ;----------------------------------------------------------------------------
 36027                                  
 36028                                  disp_num:
 36029                                          push    bx
 36030                                          add     al,'0'
 36031                                          mov     ah,0Ah
 36032                                          mov     bx,[bMenuColor]
 36033                                          mov     cx,1
 36034                                          int     10h
 36035                                          pop     bx
 36036                                          retn
 36037                                  
 36038                                  ;----------------------------------------------------------------------------
 36039                                  ;
 36040                                  ;   show_status:  display current interactive mode setting (on/off/none)
 36041                                  ;
 36042                                  ;   INPUT
 36043                                  ;       None
 36044                                  ;
 36045                                  ;   OUTPUT
 36046                                  ;       None
 36047                                  ;
 36048                                  ;   OTHER REGS USED
 36049                                  ;       None
 36050                                  ;
 36051                                  ;   NOTES
 36052                                  ;       None
 36053                                  ;
 36054                                  ;   HISTORY
 36055                                  ;       Created 16-Mar-1992 by JeffPar
 36056                                  ;
 36057                                  ;----------------------------------------------------------------------------
 36058                                  
 36059                                  show_status:
 36060                                          push    bx              ; BL = video page #
 36061                                          mov     bx,[bMenuColor]
 36062                                          mov     ah,03h          ; get cursor position
 36063                                          int     10h             ;
 36064                                          push    dx              ; save it
 36065                                          mov     ah,02h          ; set cursor position
 36066                                          mov     dx,[bLastCol]   ; set correct row/col
 36067                                          test    byte [bDisableUI],1
 36068                                          jz	short show_onoff ; just show on/off
 36069                                          mov     dl,0            ;
 36070                                          int     10h             ;
 36071                                          mov     ax,0A20h        ; write multiple spaces
 36072                                          mov     cx,80           ; 80 of them, to be exact
 36073                                          int     10h             ; to obliterate the status line
 36074                                          jmp     short show_done ;
 36075                                  show_onoff: 
 36076                                          int     10h
 36077                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 36078                                  		; AL = character, BH = display page - alpha mode
 36079                                  		; BL = color of character (graphics mode, PCjr only)
 36080                                  		; CX = number of times to write character
 36081                                  
 36082                                          mov     al,[_$NO]	; assume OFF
 36083                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 36084                                          jne	short show_noton ; no
 36085                                          mov     al,[_$YES]	; yes
 36086                                  show_noton:                     ;
 36087                                          mov     ah,0Eh          ; write TTY
 36088                                          int     10h             ;
 36089                                  show_done:                      ;
 36090                                          pop     dx              ;
 36091                                          mov     ah,02h          ;
 36092                                          int     10h             ; restore original cursor position
 36093                                          pop     bx              ;
 36094                                          retn			;
 36095                                  
 36096                                  ; 16/04/2019 - Retro DOS v4.0
 36097                                  
 36098                                  ;----------------------------------------------------------------------------
 36099                                  ;
 36100                                  ;   skip_token: advances ES:SI/CX past the current token
 36101                                  ;
 36102                                  ;   INPUT
 36103                                  ;    ES:SI -> position in config.sys
 36104                                  ;       CX == remaining bytes in config.sys
 36105                                  ;
 36106                                  ;   OUTPUT
 36107                                  ;       CF set if EOL/EOF hit
 36108                                  ;       AL == 1st char of delimiter
 36109                                  ;    ES:SI -> just past the delimiter
 36110                                  ;       CX == # bytes remaining from that point
 36111                                  ;
 36112                                  ;   OTHER REGS USED
 36113                                  ;       AX
 36114                                  ;
 36115                                  ;   NOTES
 36116                                  ;       None
 36117                                  ;
 36118                                  ;   HISTORY
 36119                                  ;       Created 16-Mar-1992 by JeffPar
 36120                                  ;
 36121                                  ;----------------------------------------------------------------------------
 36122                                  
 36123                                  skip_token:
 36124                                          call    get_char
 36125                                          jc	short skip_token_done
 36126                                          call    any_delim
 36127                                          jne	short skip_token
 36128                                  skip_check_eol:
 36129                                          cmp     al,cr ; 0Dh
 36130                                          je	short skip_token_eol
 36131                                          cmp     al,lf ; 0Ah
 36132                                          je	short skip_token_eol
 36133                                          clc
 36134                                          ;jmp	short skip_token_done
 36135                                  	retn
 36136                                  skip_token_eol:
 36137                                          stc
 36138                                  skip_token_done:
 36139                                          retn
 36140                                  
 36141                                  ;----------------------------------------------------------------------------
 36142                                  ;
 36143                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 36144                                  ;
 36145                                  ;   INPUT
 36146                                  ;    ES:SI -> position in config.sys
 36147                                  ;       CX == remaining bytes in config.sys
 36148                                  ;
 36149                                  ;   OUTPUT
 36150                                  ;       CF set if EOF hit
 36151                                  ;       AL == 1st char of token
 36152                                  ;    ES:SI -> just past the token
 36153                                  ;       CX == # bytes remaining from that point
 36154                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 36155                                  ;
 36156                                  ;   OTHER REGS USED
 36157                                  ;       AX
 36158                                  ;
 36159                                  ;   NOTES
 36160                                  ;       None
 36161                                  ;
 36162                                  ;   HISTORY
 36163                                  ;       Created 16-Mar-1992 by JeffPar
 36164                                  ;
 36165                                  ;----------------------------------------------------------------------------
 36166                                  
 36167                                  skip_delim:       ; returns carry set if eol/eof
 36168                                          call    get_char        ;
 36169                                          lea     bx,[si-1]       ; also returns BX -> next token
 36170                                          jc	short skip_token_done ;
 36171                                          call    delim           ;
 36172                                          je	short skip_delim ;
 36173                                          jmp	short skip_check_eol  ; 13/05/2019
 36174                                  
 36175                                  ;----------------------------------------------------------------------------
 36176                                  ;
 36177                                  ;   skip_opt_line: same as skip_line provided AL != LF
 36178                                  ;
 36179                                  ;   INPUT
 36180                                  ;       AL == last character read
 36181                                  ;    ES:SI -> position in config.sys
 36182                                  ;       CX == remaining bytes in config.sys
 36183                                  ;
 36184                                  ;   OUTPUT
 36185                                  ;       CF set if EOF hit
 36186                                  ;       AL == 1st char of new line
 36187                                  ;    ES:SI -> just past 1st char of new line
 36188                                  ;       CX == # bytes remaining from that point
 36189                                  ;
 36190                                  ;   OTHER REGS USED
 36191                                  ;       AX
 36192                                  ;
 36193                                  ;   NOTES
 36194                                  ;       In other words, the purpose here is to skip to the next line,
 36195                                  ;       unless ES:SI is already sitting at the front of the next line (which
 36196                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 36197                                  ;
 36198                                  ;   HISTORY
 36199                                  ;       Created 16-Mar-1992 by JeffPar
 36200                                  ;
 36201                                  ;----------------------------------------------------------------------------
 36202                                  
 36203                                  skip_opt_line:
 36204                                          cmp     al,lf ; 0Ah
 36205                                          je	short skip_line_done
 36206                                       
 36207                                  	; fall into skip_line
 36208                                  
 36209                                  ;----------------------------------------------------------------------------
 36210                                  ;
 36211                                  ;   skip_line: skip to the next line
 36212                                  ;
 36213                                  ;   INPUT
 36214                                  ;    ES:SI -> position in config.sys
 36215                                  ;       CX == remaining bytes in config.sys
 36216                                  ;
 36217                                  ;   OUTPUT
 36218                                  ;       CF set if EOF hit
 36219                                  ;    ES:SI -> just past 1st char of new line
 36220                                  ;       CX == # bytes remaining from that point
 36221                                  ;
 36222                                  ;   OTHER REGS USED
 36223                                  ;       AX
 36224                                  ;
 36225                                  ;   NOTES
 36226                                  ;       None
 36227                                  ;
 36228                                  ;   HISTORY
 36229                                  ;       Created 16-Mar-1992 by JeffPar
 36230                                  ;
 36231                                  ;----------------------------------------------------------------------------
 36232                                  
 36233                                  skip_line:
 36234                                          call    get_char
 36235                                          jc	short skip_line_done
 36236                                          cmp     al,lf ; 0Ah
 36237                                          jne	short skip_line
 36238                                  skip_line_done:
 36239                                  num_done:	; 18/12/2022
 36240                                          retn
 36241                                  
 36242                                  ;----------------------------------------------------------------------------
 36243                                  ;
 36244                                  ;   get_number: return binary equivalent of numeric string
 36245                                  ;
 36246                                  ;   INPUT
 36247                                  ;    ES:SI -> position in config.sys
 36248                                  ;       CX == remaining bytes in config.sys
 36249                                  ;
 36250                                  ;   OUTPUT
 36251                                  ;       AL == non-digit encountered
 36252                                  ;       BX == binary #
 36253                                  ;    ES:SI -> just past 1st non-digit
 36254                                  ;       CX == # bytes remaining from that point
 36255                                  ;
 36256                                  ;   OTHER REGS USED
 36257                                  ;       AX
 36258                                  ;
 36259                                  ;   NOTES
 36260                                  ;       None
 36261                                  ;
 36262                                  ;   HISTORY
 36263                                  ;       Created 16-Mar-1992 by JeffPar
 36264                                  ;
 36265                                  ;----------------------------------------------------------------------------
 36266                                  
 36267                                  ; 13/05/2019
 36268                                  
 36269                                  get_number:
 36270                                          sub     bx,bx           ; BX = result
 36271                                  num_loop:
 36272                                          call    get_char        ;
 36273                                          jc	short num_done	;
 36274                                          cmp     al,'0'          ; convert to value
 36275                                          jb	short num_done	; no more number
 36276                                          cmp     al,'9'          ;
 36277                                          ja	short num_done	;
 36278                                          push    ax              ;
 36279                                          mov     ax,10           ;
 36280                                          push    dx              ;
 36281                                          mul     bx              ;
 36282                                          pop     dx              ;
 36283                                          mov     bx,ax           ;
 36284                                          pop     ax              ;
 36285                                          sub     al,'0'          ;
 36286                                          cbw                     ;
 36287                                          add     bx,ax           ;
 36288                                          jmp	short num_loop	;
 36289                                  
 36290                                  	; 18/12/2022
 36291                                  ;num_done:
 36292                                          ;retn
 36293                                  
 36294                                  ;----------------------------------------------------------------------------
 36295                                  ;
 36296                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 36297                                  ;
 36298                                  ;   INPUT
 36299                                  ;    ES:SI -> position in config.sys
 36300                                  ;       CX == remaining bytes in config.sys
 36301                                  ;
 36302                                  ;   OUTPUT
 36303                                  ;       AL == next character
 36304                                  ;    ES:SI -> just past next character
 36305                                  ;       CX == # bytes remaining from that point
 36306                                  ;
 36307                                  ;   OTHER REGS USED
 36308                                  ;       AX
 36309                                  ;
 36310                                  ;   NOTES
 36311                                  ;       None
 36312                                  ;
 36313                                  ;   HISTORY
 36314                                  ;       Created 16-Mar-1992 by JeffPar
 36315                                  ;
 36316                                  ;----------------------------------------------------------------------------
 36317                                  
 36318                                  get_char:
 36319                                          sub     cx,1            ; use SUB to set carry,zero
 36320                                          jb	short get_fail	; out of data
 36321                                          ;lods	byte ptr es:[si] ;
 36322                                  	es	
 36323                                  	lodsb
 36324                                          mov     ah,al           ;
 36325                                          retn			;
 36326                                  get_fail:                       ; restore CX to zero
 36327                                          mov     cx,0            ; leave carry set, zero not set
 36328                                  nearby_ret:
 36329                                          retn
 36330                                  
 36331                                  ;----------------------------------------------------------------------------
 36332                                  ;
 36333                                  ;   query_user: ask user whether to execute current config.sys command
 36334                                  ;
 36335                                  ;   INPUT
 36336                                  ;       AL == current command code
 36337                                  ;    ES:SI -> current command line in config.sys
 36338                                  ;    config_cmd == current command code, but with QUERY bit intact
 36339                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 36340                                  ;
 36341                                  ;   OUTPUT
 36342                                  ;       CF set if command should be ignored (it is also REM'ed out)
 36343                                  ;
 36344                                  ;   OTHER REGS USED
 36345                                  ;       BX, CX, DX, DI
 36346                                  ;
 36347                                  ;   NOTES
 36348                                  ;       None
 36349                                  ;
 36350                                  ;   HISTORY
 36351                                  ;       Created 16-Mar-1992 by JeffPar
 36352                                  ;
 36353                                  ;----------------------------------------------------------------------------
 36354                                  
 36355                                  	; 12/12/2022
 36356                                  query_user:
 36357                                          test    byte [bQueryOpt],4	; answer no to everything?
 36358                                          ;jz	short qu_1		;
 36359                                          ; 12/12/2022
 36360                                  	;jmp	short skip_all		;
 36361                                  	jnz	short skip_all
 36362                                  qu_1:
 36363                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 36364                                          jnz	short nearby_ret	; yes (and return carry clear!)
 36365                                          push    ax                      ;
 36366                                          mov     al,[config_cmd]         ;
 36367                                          test    byte [bQueryOpt],1	; query every command?
 36368                                          jnz	short query_all		; yes
 36369                                          test    al,CONFIG_OPTION_QUERY  ;
 36370                                          ;jnz	short query_all		;
 36371                                          ; 12/12/2022
 36372                                  	;jmp	short do_cmd		;
 36373                                  	jz	short do_cmd ; cf=0
 36374                                  query_all:
 36375                                  
 36376                                  ;   Search for the command code (AL) in "comtab", and then print
 36377                                  ;   out the corresponding keyword, followed by the rest of the actual
 36378                                  ;   line pointed to by ES:SI
 36379                                  
 36380                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 36381                                          mov     dx,_$AutoPrmpt    	;
 36382                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 36383                                          jz	short generic_prompt	; config_cmd must have been 0
 36384                                  
 36385                                          mov     dh,al                   ; save config_cmd in DH
 36386                                          sub     bx,bx                   ;
 36387                                          mov     di,comtab		;
 36388                                  find_match:                             ;
 36389                                          mov     bl,[di]                 ; get size of current keyword
 36390                                          or      bl,bl                   ;
 36391                                          jz	short line_print	; end of table
 36392                                          inc     di                      ;
 36393                                          cmp     al,[di+bx]              ; match?
 36394                                          je	short cmd_match		; yes
 36395                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 36396                                  	; 13/05/2019	
 36397                                          jmp	short find_match	; loop
 36398                                  cmd_match:                              ;
 36399                                          mov     cl,[di-1]               ;
 36400                                          mov     ch,0                    ;
 36401                                          mov     ah,STD_CON_OUTPUT ; 2
 36402                                  cmd_print:                              ;
 36403                                          mov     al,[di]                 ;
 36404                                          inc     di                      ;
 36405                                          mov     dl,al                   ;
 36406                                          int     21h                     ;
 36407                                          loop    cmd_print               ;
 36408                                          mov     dl,'='                  ;
 36409                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 36410                                          jne	short cmd_notset	;
 36411                                          mov     dl,' '                  ;
 36412                                  cmd_notset:
 36413                                          int     21h                     ; '=' looks funny on SET commands
 36414                                  line_print:                             ;
 36415                                  	;lods	byte ptr es:[si]        ;
 36416                                          es
 36417                                  	lodsb
 36418                                  	or      al,al                   ;
 36419                                          jnz	short non_null		;
 36420                                          mov     al,' '                  ;
 36421                                  non_null:                               ;
 36422                                          cmp     al,' '                  ; control code?
 36423                                          jb	short prompt_user	; yes, assume end of line
 36424                                          jne	short non_space		;
 36425                                          cmp     byte [es:si],' '	;
 36426                                          jb	short prompt_user	;
 36427                                  non_space:                              ;
 36428                                          mov     dl,al                   ;
 36429                                          mov     ah,STD_CON_OUTPUT ; 2	;
 36430                                          int     21h                     ;
 36431                                          jmp	short line_print	;
 36432                                  prompt_user:                            ;
 36433                                          mov     dx,_$InterPrmpt		;
 36434                                  
 36435                                  generic_prompt:
 36436                                          call    print                   ;
 36437                                  input_loop:                             ;
 36438                                          mov     ah,0                    ; read a key
 36439                                          int     16h                     ;
 36440                                          or      al,al                   ; is it a function key?
 36441                                          jnz	short not_func		; no
 36442                                          cmp     ah,3Fh                  ; F5 function key?
 36443                                          jne	short input_loop	; no
 36444                                          mov     al,[_$NO]                  ;
 36445                                          or      byte [bQueryOpt],4	; no more queries
 36446                                          jmp     short legal_char        ;
 36447                                  not_func:
 36448                                          and     al,~20h ; 0DFh		; converting to upper case
 36449                                          cmp     al,[_$NO]		; verify character is legal
 36450                                          je	short legal_char	;
 36451                                          cmp     al,[_$YES]		;
 36452                                          je	short legal_char	;
 36453                                          cmp     byte [config_cmd],0	;
 36454                                          je	short input_loop	; don't allow Esc on this query
 36455                                          cmp     al,1Bh                  ; Esc?
 36456                                          jne	short input_loop	;
 36457                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 36458                                          mov     al,[_$YES]
 36459                                  legal_char:                             ;
 36460                                          call    disp_input              ;
 36461                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 36462                                  
 36463                                          cmp     al,[_$NO]		; process line?
 36464                                          je	short skip_cmd		; no
 36465                                  	; 12/12/2022
 36466                                  	clc
 36467                                  do_cmd:
 36468                                  	pop     ax			;
 36469                                  	; 12/12/2022
 36470                                  	; cf=0
 36471                                  	;clc				; just do the command
 36472                                  	retn
 36473                                  
 36474                                  skip_cmd:
 36475                                  	pop     ax			;
 36476                                  skip_all:
 36477                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 36478                                  	stc
 36479                                  	retn
 36480                                  
 36481                                  ;----------------------------------------------------------------------------
 36482                                  ;
 36483                                  ;   print_error: displays multi-config error conditions
 36484                                  ;
 36485                                  ;   INPUT
 36486                                  ;    Carry set to pause, clear to not
 36487                                  ;    ES:SI -> current command line in config.sys
 36488                                  ;
 36489                                  ;   OUTPUT
 36490                                  ;       None
 36491                                  ;
 36492                                  ;   OTHER REGS USED
 36493                                  ;       None
 36494                                  ;
 36495                                  ;   NOTES
 36496                                  ;       None
 36497                                  ;
 36498                                  ;   HISTORY
 36499                                  ;       Created 16-Mar-1992 by JeffPar
 36500                                  ;
 36501                                  ;----------------------------------------------------------------------------
 36502                                  
 36503                                  print_error:
 36504                                          push    ax
 36505                                          push    bx
 36506                                          push    cx
 36507                                          push    dx
 36508                                          push    ds
 36509                                          push    cs
 36510                                          pop     ds
 36511                                          pushf
 36512                                          call    get_linenum
 36513                                          mov     [linecount],bx
 36514                                          call    error_line
 36515                                          popf
 36516                                          jnc	short pe_ret
 36517                                          mov     dx,_$PauseMsg
 36518                                          call    print
 36519                                          mov     ax,0C07h		; flush input buffer, then wait for key
 36520                                          int     21h			; wait for a key
 36521                                          or      al,al			; extended key?
 36522                                          jnz	short pe_1		; no
 36523                                          mov     ah,07h			; yes
 36524                                          int     21h			; eat it too
 36525                                  pe_1:     
 36526                                  	mov     dx,crlfm
 36527                                          call    print
 36528                                  pe_ret: 
 36529                                  	pop     ds
 36530                                          pop     dx
 36531                                          pop     cx
 36532                                          pop     bx
 36533                                          pop     ax
 36534                                  	retn
 36535                                  
 36536                                  ;----------------------------------------------------------------------------
 36537                                  
 36538                                  ;   This function is very simple:  it merely prepends a "/D" to the
 36539                                  ;   command-line for the shell;  this (undocumented) switch disables
 36540                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 36541                                  ;   displayed when there's no AUTOEXEC.BAT.
 36542                                  
 36543                                  disable_autoexec:
 36544                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 36545                                  	; 17/04/2019 - Retro DOS v4.0
 36546                                  
 36547                                  	test	byte [bQueryOpt],4
 36548                                  	jz	short disable_exit
 36549                                  	test	byte [dae_flag],1
 36550                                  	jnz	short disable_exit
 36551                                  	or	byte [dae_flag],1
 36552                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 36553                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 36554                                  	mov     dx,'D ' ; 2044h
 36555                                  dae_1:
 36556                                          ;mov	al,[def_swchr]
 36557                                  	mov     al,[command_line-1]     ; get default switchchar
 36558                                          or      al,al                   ; anything there?
 36559                                          jz	short disable_exit	; no, disable_autoexec already called
 36560                                          mov     bl,[command_line]       ;
 36561                                          mov     bh,0                    ; BX == command-line length
 36562                                          mov     cx,bx                   ;
 36563                                          add     bl,3                    ;
 36564                                          cmp     bl,126                  ;
 36565                                          ja	short disable_exit	;
 36566                                          mov     [command_line],bl       ; update length
 36567                                          add     bx,command_line+1	; make sure we move the NULL too
 36568                                          inc     cx                      ; (just for consistency sake)
 36569                                  disable_loop:                           ;
 36570                                          mov     ah,[bx-3]               ;
 36571                                          mov     [bx],ah                 ;
 36572                                          dec     bx                      ;
 36573                                          loop    disable_loop            ;
 36574                                          mov     [bx-2],al               ;
 36575                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 36576                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 36577                                          ;mov	byte [command_line-1],0 ;
 36578                                  disable_exit:                           ;
 36579                                          retn
 36580                                  
 36581                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 36582                                  	cmp     byte [bQueryOpt],1
 36583                                  	jnz     short disable_exit
 36584                                  	test	byte [dae_flag],2
 36585                                  	jnz     short disable_exit
 36586                                  	or      byte [dae_flag],2
 36587                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 36588                                  	jmp     short dae_1
 36589                                  
 36590                                  ;endif  ;MULTI_CONFIG
 36591                                  
 36592                                  %endif	; 02/11/2022
 36593                                  
 36594                                  
 36595                                  ; 19/04/2019 - Retro DOS v4.0
 36596                                  
 36597                                  ;----------------------------------------------------------------------------
 36598                                  ;
 36599                                  ; procedure : delim
 36600                                  ;
 36601                                  ;----------------------------------------------------------------------------
 36602                                  
 36603                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36604                                  ;
 36605                                  ;;ifdef	MULTI_CONFIG
 36606                                  ;
 36607                                  ;any_delim:
 36608                                  ;       cmp     al,cr
 36609                                  ;       je	short delim_ret
 36610                                  ;       cmp     al,lf
 36611                                  ;       je	short delim_ret
 36612                                  ;       cmp     al,'['
 36613                                  ;       je	short delim_ret
 36614                                  ;       cmp     al,']'
 36615                                  ;       je	short delim_ret
 36616                                  ;
 36617                                  ;;endif  ;MULTI_CONFIG
 36618                                  
 36619                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36620                                  	; (SYSINIT:3450h)	
 36621                                  delim:
 36622 00002FA8 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 36623 00002FAA 7417                    	je	short delim_ret
 36624                                  
 36625 00002FAC 3C00                    	cmp	al,0		; special case for sysinit!!!
 36626 00002FAE 7413                    	je	short delim_ret
 36627                                  
 36628                                  org_delim:			; used by organize routine except for getting
 36629 00002FB0 3C20                    	cmp	al,' '          ; the filename.
 36630 00002FB2 740F                    	je	short delim_ret
 36631 00002FB4 3C09                            cmp     al,tab ; 9
 36632 00002FB6 740B                    	je	short delim_ret
 36633 00002FB8 3C3D                    	cmp	al,'='
 36634 00002FBA 7407                    	je	short delim_ret
 36635 00002FBC 3C2C                    	cmp	al,','
 36636 00002FBE 7403                    	je	short delim_ret
 36637 00002FC0 3C3B                    	cmp	al,';'
 36638                                  
 36639                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36640                                  ;ifdef	MULTI_CONFIG
 36641                                  ;   Make sure there's no chance of a false EOF indication
 36642 00002FC2 F8                      	clc	; 09/09/2023 ('SkipDelim' must not be return with cf=1)
 36643                                  ;endif
 36644                                  	; 02/11/2022
 36645                                  delim_ret:
 36646                                  nl_ret:	; 10/09/2023
 36647 00002FC3 C3                      	retn
 36648                                  
 36649                                  ;----------------------------------------------------------------------------
 36650                                  ;
 36651                                  ; procedure : newline
 36652                                  ;
 36653                                  ;  newline returns with first character of next line
 36654                                  ;
 36655                                  ;----------------------------------------------------------------------------
 36656                                  
 36657                                  newline:
 36658 00002FC4 E80600                  	call	getchr			;skip non-control characters
 36659 00002FC7 72FA                    	jc	short nl_ret
 36660 00002FC9 3C0A                    	cmp	al,lf			;look for line feed
 36661 00002FCB 75F7                    	jne	short newline
 36662                                  
 36663                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36664                                  	;call	getchr
 36665                                  ;nl_ret:
 36666                                  	;retn
 36667                                  	; 10/09/2023
 36668                                  	;jmp	short getchr
 36669                                  
 36670                                  ; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36671                                  %if 1
 36672                                  
 36673                                  ;----------------------------------------------------------------------------
 36674                                  ;
 36675                                  ; procedure : getchr
 36676                                  ;
 36677                                  ;----------------------------------------------------------------------------
 36678                                  
 36679                                  	; 24/10/2022
 36680                                  getchr:
 36681                                  	; 12/12/2022
 36682                                  	;push	cx
 36683                                  	;mov	cx,[count]
 36684                                  	;jcxz	nochar
 36685                                  	; 12/12/2022
 36686 00002FCD 833E[D203]01            	cmp	word [count],1 
 36687 00002FD2 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 36688                                  	
 36689 00002FD4 8B36[D603]              	mov	si,[chrptr]
 36690 00002FD8 268A04                  	mov	al,[es:si]
 36691 00002FDB FF0E[D203]              	dec	word [count]
 36692 00002FDF FF06[D603]              	inc	word [chrptr]
 36693                                  	; 12/12/202
 36694                                  	; cf=0
 36695                                  	;clc
 36696                                  ;get_ret:
 36697                                  	;pop	cx
 36698                                  	;retn
 36699                                  nochar: 
 36700                                  	; 12/12/2022
 36701                                  	; cf=1
 36702                                  	;stc
 36703                                  	;jmp	short get_ret
 36704                                  	
 36705 00002FE3 C3                      	retn
 36706                                  %endif
 36707                                  
 36708                                  ;----------------------------------------------------------------------------
 36709                                  ; 
 36710                                  ; procedure : mapcase
 36711                                  ;
 36712                                  ;----------------------------------------------------------------------------
 36713                                  
 36714                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 36715                                  mapcase:
 36716 00002FE4 51                      	push	cx
 36717 00002FE5 56                      	push	si
 36718 00002FE6 1E                      	push	ds
 36719                                  
 36720 00002FE7 06                      	push	es
 36721 00002FE8 1F                      	pop	ds
 36722                                  
 36723                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36724                                  ;;ifdef	MULTI_CONFIG
 36725                                  ;
 36726                                  ;	mov	bl,al                   ; same cmd code this line
 36727                                  ;;else
 36728                                  ;;	xor	si,si
 36729                                  ;;endif
 36730                                  	; 02/11/2022
 36731 00002FE9 31F6                    	xor	si, si
 36732                                  
 36733                                  convloop:
 36734 00002FEB AC                      	lodsb
 36735 00002FEC 3C61                    	cmp	al,'a'
 36736 00002FEE 7209                    	jb	short noconv
 36737 00002FF0 3C7A                    	cmp	al,'z'
 36738 00002FF2 7705                    	ja	short noconv
 36739 00002FF4 2C20                    	sub	al,20h
 36740 00002FF6 8844FF                  	mov	[si-1],al
 36741                                  noconv:
 36742                                  
 36743                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36744                                  ;;ifdef	MULTI_CONFIG
 36745                                  ;;
 36746                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 36747                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 36748                                  ;;   the line is a SET command or not (since we don't want to upper-case
 36749                                  ;;   anything after the "=" in a SET)
 36750                                  ;;
 36751                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 36752                                  ;       jne	short check_eol		; no, just check for end-of-line
 36753                                  ;       cmp     al,'='                  ; separator between SET var and value?
 36754                                  ;       je	short convdone		; yes
 36755                                  ;check_eol:
 36756                                  ;       cmp     al,cr
 36757                                  ;       je	short convdone
 36758                                  ;       cmp     al,lf
 36759                                  ;       je	short convdone
 36760                                  ;;endif
 36761                                  	
 36762                                  	; 02/11/2022
 36763 00002FF9 E2F0                    	loop	convloop
 36764                                  convdone:
 36765 00002FFB 1F                      	pop	ds
 36766 00002FFC 5E                      	pop	si
 36767 00002FFD 59                      	pop	cx
 36768 00002FFE C3                      	retn
 36769                                  
 36770                                  ;----------------------------------------------------------------------------
 36771                                  ;
 36772                                  ; procedure : round
 36773                                  ;
 36774                                  ; round the values in memlo and memhi to paragraph boundary.
 36775                                  ; perform bounds check.
 36776                                  ;
 36777                                  ;----------------------------------------------------------------------------
 36778                                  
 36779                                  round:
 36780                                  	; 10/09/2023 - Retro DOS v4.1 & v4.2 IO.SYS (Optimization)
 36781 00002FFF 1E                      	push	ds
 36782 00003000 0E                      	push	cs
 36783 00003001 1F                      	pop	ds
 36784                                  
 36785 00003002 50                      	push	ax
 36786                                  	;mov	ax,[cs:memlo]
 36787 00003003 A1[DE03]                	mov	ax,[memlo]
 36788                                  
 36789 00003006 E888E0                  	call	ParaRound		; para round up
 36790                                  
 36791                                  	;add	[cs:memhi],ax
 36792 00003009 0106[E003]              	add	[memhi],ax
 36793                                  	;mov	word [cs:memlo],0
 36794 0000300D C706[DE03]0000          	mov	word [memlo],0
 36795                                  	;mov	ax,[cs:memhi]		; ax = new memhi
 36796 00003013 A1[E003]                	mov	ax,[memhi]
 36797                                  	;cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 36798 00003016 3B06[A302]              	cmp	ax,[ALLOCLIM]
 36799                                  	;jae	short mem_err
 36800                                  	; 17/09/2023
 36801 0000301A 7322                    	jae	short mem_err2 ; ds = cs
 36802                                  	;test	byte [cs:setdevmarkflag],for_devmark ; 2
 36803 0000301C F606[FA13]02            	test	byte [setdevmarkflag],for_devmark ; 2
 36804 00003021 7416                    	jz	short skip_set_devmarksize
 36805 00003023 06                      	push	es
 36806 00003024 56                      	push	si
 36807                                  	;mov	si,[cs:devmark_addr]
 36808 00003025 8B36[F813]              	mov	si,[devmark_addr]
 36809 00003029 8EC6                    	mov	es,si
 36810 0000302B 29F0                    	sub	ax,si
 36811 0000302D 48                      	dec	ax
 36812                                  	;mov	[es:3],ax
 36813 0000302E 26A30300                	mov	[es:devmark.size],ax	; paragraph
 36814                                  	;and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 36815 00003032 8026[FA13]FD            	and	byte [setdevmarkflag],not_for_devmark ; 0FDh
 36816 00003037 5E                      	pop	si
 36817 00003038 07                      	pop	es
 36818                                  skip_set_devmarksize:
 36819 00003039 58                      	pop	ax
 36820                                  
 36821                                  	; 10/09/2023
 36822 0000303A 1F                      	pop	ds
 36823                                  
 36824                                  	; 11/12/2022
 36825                                  	; cf = 0
 36826                                  	; 02/11/2022
 36827                                  	;clc	; ? (not needed here)	; clear carry
 36828 0000303B C3                      	retn
 36829                                  
 36830                                  ;----------------------------------------------------------------------------
 36831                                  
 36832                                  mem_err:
 36833                                  	; 11/12/2022
 36834 0000303C 0E                      	push	cs
 36835 0000303D 1F                      	pop	ds
 36836                                  mem_err2:
 36837 0000303E BA[1F37]                	mov	dx,badmem
 36838                                  	;push	cs
 36839                                  	;pop	ds
 36840 00003041 E83102                  	call	print
 36841 00003044 E9F5D7                  	jmp	stall
 36842                                  
 36843                                  ;----------------------------------------------------------------------------
 36844                                  ;
 36845                                  ; procedure : calldev
 36846                                  ;
 36847                                  ;----------------------------------------------------------------------------
 36848                                  
 36849                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 36850                                  	; (SYSINIT:34E0h)
 36851                                  calldev:
 36852 00003047 2E8E1E[521E]            	mov	ds,[cs:DevEntry+2]
 36853 0000304C 2E031E[501E]            	add	bx,[cs:DevEntry]	; do a little relocation
 36854 00003051 8B07                    	mov	ax,[bx]
 36855                                  
 36856 00003053 2EFF36[501E]            	push	word [cs:DevEntry]
 36857 00003058 2EA3[501E]              	mov	[cs:DevEntry],ax
 36858 0000305C BB[E603]                	mov	bx,packet
 36859 0000305F 2EFF1E[501E]            	call	far [cs:DevEntry]
 36860 00003064 2E8F06[501E]            	pop	word [cs:DevEntry]
 36861 00003069 C3                      	retn
 36862                                  
 36863                                  ;----------------------------------------------------------------------------
 36864                                  ;
 36865                                  ; procedure : todigit
 36866                                  ;
 36867                                  ;----------------------------------------------------------------------------
 36868                                  
 36869                                  todigit:
 36870 0000306A 2C30                    	sub	al,'0'
 36871                                  	;jb	short notdig  ; 02/11/2022
 36872                                  	; 12/12/2022
 36873 0000306C 7203                    	jb	short notdig2
 36874                                  	;cmp	al,9
 36875                                  	;ja	short notdig
 36876                                  	;clc
 36877                                  	;retn
 36878                                  	; 12/12/2022
 36879 0000306E 3C0A                    	cmp	al,10
 36880 00003070 F5                      	cmc
 36881                                  notdig:
 36882                                  	;stc
 36883                                  notdig2:
 36884 00003071 C3                      	retn
 36885                                  
 36886                                  ;----------------------------------------------------------------------------
 36887                                  ;
 36888                                  ; procedure : getnum
 36889                                  ;
 36890                                  ; getnum parses a decimal number.
 36891                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 36892                                  ; error), if number is bad carry is set, zero is set, ax=0.
 36893                                  ;
 36894                                  ;----------------------------------------------------------------------------
 36895                                  
 36896                                  getnum:
 36897 00003072 53                      	push	bx
 36898 00003073 31DB                    	xor	bx,bx			; running count is zero
 36899                                  b2:
 36900 00003075 E8F2FF                  	call	todigit 		; do we have a digit ?
 36901 00003078 7247                    	jc	short badnum		; no, bomb
 36902                                  
 36903 0000307A 93                      	xchg	ax,bx			; put total in ax
 36904 0000307B 53                      	push	bx			; save digit (0 to 9)
 36905                                  	;mov	bx,10			; base of arithmetic
 36906                                  	; 12/12/2022
 36907 0000307C B30A                    	mov	bl,10
 36908 0000307E F7E3                    	mul	bx			; shift by one decimal digit
 36909 00003080 5B                      	pop	bx			; get back digit (0 to 9)
 36910 00003081 00D8                    	add	al,bl			; get total
 36911 00003083 80D400                  	adc	ah,0			; make that 16 bits
 36912 00003086 7239                    	jc	short badnum		; too big a number
 36913                                  
 36914 00003088 93                      	xchg	ax,bx			; stash total
 36915                                  
 36916 00003089 E841FF                  	call	getchr			;get next digit
 36917 0000308C 722D                    	jc	short b1		; no more characters
 36918 0000308E 3C20                    	cmp	al,' ' 			; space?
 36919 00003090 741F                    	je	short b15		; then end of digits
 36920 00003092 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 36921 00003094 741B                    	je	short b15		; then end of digits.
 36922 00003096 3C09                    	cmp	al, tab ; 9		; tab
 36923 00003098 7417                    	je	short b15
 36924 0000309A 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 36925 0000309F 7410                    	je	short b15
 36926 000030A1 3C2F                    	cmp	al,'/'			; see if another switch follows
 36927                                  	;nop				; cas - remnant of old bad code
 36928                                  	;nop
 36929                                  	; 12/12/2022
 36930                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36931                                  	;nop
 36932                                  	;nop
 36933 000030A3 740C                    	je	short b15
 36934 000030A5 3C0A                    	cmp	al,lf			; line-feed?
 36935 000030A7 7408                    	je	short b15
 36936 000030A9 3C0D                    	cmp	al,cr			; carriage return?
 36937 000030AB 7404                    	je	short b15
 36938 000030AD 08C0                    	or	al,al			; end of line separator?
 36939 000030AF 75C4                    	jnz	short b2		; no, try as a valid char...
 36940                                  b15:
 36941 000030B1 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 36942 000030B6 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 36943                                  b1:
 36944 000030BB 89D8                    	mov	ax,bx			; get proper count
 36945 000030BD 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 36946 000030BF 5B                      	pop	bx
 36947 000030C0 C3                      	retn
 36948                                  badnum:
 36949                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36950                                  	;mov	byte [cs:sepchr],0
 36951 000030C1 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 36952                                  	; 12 /12/2022
 36953 000030C3 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 36954 000030C7 5B                      	pop	bx
 36955 000030C8 F9                      	stc				; and carry set
 36956 000030C9 C3                      	retn
 36957                                  
 36958                                  ;****************************************************************************
 36959                                  
 36960                                  setdoscountryinfo:
 36961                                  
 36962                                  ;----------------------------------------------------------------------------
 36963                                  ;input: es:di -> pointer to dos_country_cdpg_info
 36964                                  ;	ds:0  -> buffer.
 36965                                  ;	si = 0
 36966                                  ;	ax = country id
 36967                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 36968                                  ;	bx = file handle
 36969                                  ;	this routine can handle maximum 438 country_data entries.
 36970                                  ;
 36971                                  ;output: dos_country_cdpg_info set.
 36972                                  ;	 carry set if any file read failure or wrong information in the file.
 36973                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 36974                                  ;	 codepage_id in the file.
 36975                                  ;----------------------------------------------------------------------------
 36976                                  
 36977                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 36978                                  
 36979 000030CA 57                      	push	di
 36980 000030CB 50                      	push	ax
 36981 000030CC 52                      	push	dx
 36982                                  
 36983 000030CD 31C9                    	xor	cx,cx
 36984 000030CF 31D2                    	xor	dx,dx
 36985 000030D1 B80002                  	mov	ax,512			;read 512 bytes
 36986 000030D4 E84301                  	call	readincontrolbuffer	;read the file header
 36987 000030D7 724A                    	jc	short setdosdata_fail
 36988                                  
 36989 000030D9 06                      	push	es
 36990 000030DA 56                      	push	si
 36991                                  
 36992 000030DB 0E                      	push	cs
 36993 000030DC 07                      	pop	es
 36994                                  
 36995 000030DD BF[4133]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 36996 000030E0 B90800                  	mov	cx,8			;length of the signature
 36997 000030E3 F3A6                    	repz	cmpsb
 36998                                  
 36999 000030E5 5E                      	pop	si
 37000 000030E6 07                      	pop	es
 37001 000030E7 753A                    	jnz	short setdosdata_fail 	;signature mismatch
 37002                                  
 37003 000030E9 83C612                  	add	si,18			;si -> county info type
 37004 000030EC 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 37005 000030EF 7532                    	jne	short setdosdata_fail 	;cannot proceed. error return
 37006                                  
 37007 000030F1 46                      	inc	si			;si -> file offset
 37008 000030F2 8B14                    	mov	dx,[si]			;get the info file offset.
 37009 000030F4 8B4C02                  	mov	cx,[si+2]
 37010 000030F7 B80018                  	mov	ax,6144			;read 6144 bytes.
 37011 000030FA E81D01                  	call	readincontrolbuffer	;read info
 37012 000030FD 7224                    	jc	short setdosdata_fail
 37013                                  
 37014 000030FF 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 37015 00003101 81F9B601                	cmp	cx,438			;cannot handle more than 438 entries.
 37016 00003105 771C                    	ja	short setdosdata_fail
 37017                                  
 37018 00003107 46                      	inc	si
 37019 00003108 46                      	inc	si			;si -> entry information packet
 37020 00003109 5A                      	pop	dx			;restore code page id
 37021 0000310A 58                      	pop	ax			;restore country id
 37022 0000310B 5F                      	pop	di
 37023                                  
 37024                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 37025 0000310C 3B4402                  	cmp	ax,[si+2]		;compare country_id
 37026 0000310F 7509                    	jne	short setdoscntry_next
 37027                                  
 37028                                  	;cmp	dx,0			;no user specified code page ?
 37029                                  	;je	short setdoscntry_any_codepage ;then no need to match code page id.
 37030                                  	; 10/09/2023
 37031 00003111 09D2                    	or	dx,dx ; cmp dx,0
 37032 00003113 7413                    	jz	short setdoscntry_any_codepage
 37033 00003115 3B5404                  	cmp	dx,[si+4]		;compare code page id
 37034 00003118 7411                    	je	short setdoscntry_got_it
 37035                                  
 37036                                  setdoscntry_next:
 37037 0000311A 0334                    	add	si,[si]			;next entry
 37038 0000311C 46                      	inc	si
 37039 0000311D 46                      	inc	si			;take a word for size of entry itself
 37040 0000311E E2EC                    	loop	setdoscntry_find
 37041                                  
 37042                                  	;mov	cx,-1			;signals that bad country id entered.
 37043                                  	; 10/09/2023
 37044 00003120 49                      	dec	cx ; 0 -> -1
 37045                                  setdoscntry_fail:
 37046 00003121 F9                      	stc
 37047 00003122 C3                      	retn
 37048                                  
 37049                                  setdosdata_fail:
 37050 00003123 5E                      	pop	si
 37051 00003124 59                      	pop	cx
 37052 00003125 5F                      	pop	di
 37053 00003126 EBF9                    	jmp	short setdoscntry_fail
 37054                                  
 37055                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 37056 00003128 8B5404                  	mov	dx,[si+4]
 37057                                  
 37058                                  setdoscntry_got_it:			;found the matching entry
 37059 0000312B 2E8916[4933]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 37060 00003130 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 37061 00003133 8B4C0C                  	mov	cx,[si+12]
 37062 00003136 B80002                  	mov	ax,512 			;read 512 bytes
 37063 00003139 E8DE00                  	call	readincontrolbuffer
 37064 0000313C 72E3                    	jc	short setdoscntry_fail
 37065                                  
 37066 0000313E 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 37067 00003140 46                      	inc	si
 37068 00003141 46                      	inc	si			;si -> first entry
 37069                                  
 37070                                  setdoscntry_data:
 37071 00003142 57                      	push	di			;es:di -> dos_country_cdpg_info
 37072 00003143 51                      	push	cx			;save # of entry left
 37073 00003144 56                      	push	si			;si -> current entry in control buffer
 37074                                  
 37075 00003145 8A4402                  	mov	al,[si+2]		;get data entry id
 37076 00003148 E8A400                  	call	getcountrydestination	;get the address of destination in es:di
 37077 0000314B 727C                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 37078                                  
 37079 0000314D 8B5404                  	mov	dx,[si+4]		;get offset of data
 37080 00003150 8B4C06                  	mov	cx,[si+6]
 37081 00003153 B80042                  	mov	ax,4200h
 37082 00003156 F9                      	stc
 37083 00003157 CD21                    	int	21h			;move pointer
 37084 00003159 72C8                    	jc	short setdosdata_fail
 37085                                  
 37086 0000315B BA0002                  	mov	dx,512			;start of data buffer
 37087 0000315E B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 37088 00003161 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 37089 00003163 F9                      	stc
 37090 00003164 CD21                    	int	21h			;read the country.sys data
 37091 00003166 72BB                    	jc	short setdosdata_fail 	;read failure
 37092                                  
 37093 00003168 39C8                    	cmp	ax,cx
 37094 0000316A 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 37095                                  
 37096 0000316C 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 37097 0000316F 8B4C06                  	mov	cx,[si+6]
 37098 00003172 B80042                  	mov	ax,4200h
 37099 00003175 F9                      	stc
 37100 00003176 CD21                    	int	21h			;move pointer back again
 37101 00003178 72A9                    	jc	short setdosdata_fail
 37102                                  
 37103 0000317A 56                      	push	si
 37104 0000317B BE0802                  	mov	si,(512+8)		;get length of the data from the file
 37105 0000317E 8B0C                    	mov	cx,[si]
 37106 00003180 5E                      	pop	si
 37107 00003181 BA0002                  	mov	dx,512			;start of data buffer
 37108 00003184 83C10A                  	add	cx,10			;signature + a word for the length itself
 37109 00003187 B43F                    	mov	ah,3Fh			;read the data from the file.
 37110 00003189 F9                      	stc
 37111 0000318A CD21                    	int	21h
 37112 0000318C 7295                    	jc	short setdosdata_fail
 37113                                  
 37114 0000318E 39C8                    	cmp	ax,cx
 37115 00003190 7591                    	jne	short setdosdata_fail
 37116                                  
 37117 00003192 8A4402                  	mov	al,[si+2]		;save data id for future use.
 37118 00003195 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 37119 00003198 8B0C                    	mov	cx,[si]			;get the length of the file
 37120 0000319A 41                      	inc	cx			;take care of a word for lenght of tab
 37121 0000319B 41                      	inc	cx			;itself.
 37122 0000319C 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 37123 000031A0 7781                    	ja	short setdosdata_fail
 37124                                  
 37125                                  	;if	bugfix
 37126 000031A2 E83100                  	call	setdbcs_before_copy
 37127                                  	;endif
 37128                                  
 37129 000031A5 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 37130 000031A7 7511                    	jne	short setdoscntry_mov 	;no, don't worry
 37131                                  
 37132 000031A9 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 37133                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 37134 000031AD 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 37135                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 37136                                  	
 37137 000031B1 57                      	push	di			;save di
 37138                                  
 37139                                  	;push	ax
 37140                                  	;mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 37141                                  	;mov	[si+4],ax		;use the saved one for this !!!!
 37142                                  	;pop	ax
 37143                                  	; 10/09/2023
 37144 000031B2 2EFF36[4933]            	push	word [cs:cntrycodepage_id]
 37145 000031B7 8F4404                  	pop	word [si+4]
 37146                                  
 37147                                  setdoscntry_mov:
 37148 000031BA F3A4                    	rep	movsb			;copy the table into dos
 37149 000031BC 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 37150 000031BE 7509                    	jne	short setdoscntry_data_next
 37151                                  
 37152 000031C0 5F                      	pop	di			;restore di
 37153 000031C1 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 37154                                  	;pop	word [es:di+26]		;restore
 37155 000031C5 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 37156                                  	;pop	word [es:di+24]
 37157                                  
 37158                                  setdoscntry_data_next:
 37159 000031C9 5E                      	pop	si			;restore control buffer pointer
 37160 000031CA 59                      	pop	cx			;restore # of entries left
 37161 000031CB 5F                      	pop	di			;restore pointer to dso_country_cdpg
 37162 000031CC 0334                    	add	si,[si]			;try to get the next entry
 37163 000031CE 46                      	inc	si
 37164 000031CF 46                      	inc	si			;take a word of entry length itself
 37165 000031D0 49                      	dec	cx
 37166                                  	; 10/09/2023
 37167 000031D1 741B                    	jz	short setdoscntry_ok 
 37168                                  	;cmp	cx,0
 37169                                  	;je	short setdoscntry_ok
 37170 000031D3 E96CFF                  	jmp	setdoscntry_data
 37171                                  
 37172                                  	; 18/12/2022
 37173                                  ;setdoscntry_ok:
 37174                                  	;retn
 37175                                  
 37176                                  ;----------------------------------------------------------------------------
 37177                                  
 37178                                  	;if	bugfix
 37179                                  
 37180                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 37181                                  
 37182                                  setdbcs_before_copy:
 37183 000031D6 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 37184 000031D8 7514                    	jne	short sdbcsbc		; jump if not
 37185                                  	
 37186                                  	; 10/09/2023
 37187 000031DA 50                      	push	ax
 37188 000031DB 31C0                    	xor	ax,ax
 37189 000031DD 263905                  	cmp	[es:di],ax ; 0
 37190 000031E0 740B                    	je	short sdbcsbc_pop
 37191                                  	
 37192                                  	;cmp	word [es:di],0		; zero byte data block?
 37193                                  	;je	short sdbcsbc		; jump if so
 37194                                  
 37195 000031E2 57                      	push	di
 37196                                  	; 10/09/2023
 37197                                  	;push	ax
 37198 000031E3 51                      	push	cx
 37199 000031E4 268B0D                  	mov	cx,[es:di]		; load block length
 37200                                  	;add	di,2			; points actual data
 37201 000031E7 47                      	inc	di
 37202 000031E8 47                      	inc	di
 37203                                  	;xor	al,al			; fill bytes
 37204 000031E9 F3AA                    	rep	stosb			; clear data block
 37205 000031EB 59                      	pop	cx
 37206                                  	;pop	ax
 37207 000031EC 5F                      	pop	di
 37208                                  
 37209                                  sdbcsbc_pop:	; 10/09/2023
 37210 000031ED 58                      	pop	ax
 37211                                  sdbcsbc:
 37212                                  setdoscntry_ok:	; 18/12/2022
 37213 000031EE C3                      	retn
 37214                                  
 37215                                  	;endif
 37216                                  
 37217                                  ;----------------------------------------------------------------------------
 37218                                  
 37219                                  getcountrydestination:
 37220                                  
 37221                                  ;----------------------------------------------------------------------------
 37222                                  ;get the destination address in the dos country info table.
 37223                                  ;
 37224                                  ;input: al - data id
 37225                                  ;	es:di -> dos_country_cdpg_info
 37226                                  ;on return:
 37227                                  ;	es:di -> destination address of the matching data id
 37228                                  ;	carry set if no matching data id found in dos.
 37229                                  ;----------------------------------------------------------------------------
 37230                                  
 37231                                  	; 10/09/2023 - Retrodos v4.1 & v4.2 IO.SYS (Optimization)
 37232                                  
 37233 000031EF 51                      	push	cx
 37234                                  	;add	di,74
 37235 000031F0 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 37236                                  					;skip the reserved area, syscodepage etc.
 37237 000031F3 268B0D                  	mov	cx,[es:di]		;get the number of entries
 37238 000031F6 47                      	inc	di
 37239 000031F7 47                      	inc	di			;si -> the first start entry id
 37240                                  
 37241                                  getcntrydest:
 37242 000031F8 263805                  	cmp	byte [es:di],al
 37243 000031FB 7413                    	je	short getcntrydest_ok
 37244                                  
 37245 000031FD 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 37246 00003201 7405                    	je	short getcntrydest_1
 37247                                  
 37248 00003203 83C705                  	add	di,5			;next data id
 37249 00003206 EB03                    	jmp	short getcntrydest_loop
 37250                                  
 37251                                  getcntrydest_1:
 37252                                  	;add	di,41
 37253 00003208 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 37254                                  getcntrydest_loop:
 37255 0000320B E2EB                    	loop	getcntrydest
 37256 0000320D F9                      	stc
 37257                                  	;jmp	short getcntrydest_exit
 37258                                  getcntrydest_exit:
 37259                                  	; 10/09/2023
 37260 0000320E 59                      	pop	cx
 37261 0000320F C3                      	retn
 37262                                  
 37263                                  getcntrydest_ok:
 37264                                  	; 10/09/2023
 37265 00003210 47                      	inc	di
 37266                                  
 37267                                  ;	cmp	al,SetCountryInfo ; 1	;select country info?
 37268                                  ;	jne	short getcntrydest_ok1
 37269                                  ;
 37270                                  ;	;inc	di			;now di -> cccountryinfolen
 37271                                  ;	jmp	short getcntrydest_exit
 37272                                  
 37273                                  	; 10/09/2023
 37274 00003211 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 37275 00003213 74F9                    	je	short getcntrydest_exit
 37276                                  
 37277                                  getcntrydest_ok1:
 37278                                  	;les	di,[es:di+1]		;get the destination in es:di
 37279                                  	; 10/09/2023
 37280 00003215 26C43D                  	les	di,[es:di]
 37281                                  ;getcntrydest_exit:
 37282 00003218 59                      	pop	cx
 37283 00003219 C3                      	retn
 37284                                  
 37285                                  ;----------------------------------------------------------------------------
 37286                                  
 37287                                  readincontrolbuffer:
 37288                                  
 37289                                  ;----------------------------------------------------------------------------
 37290                                  ;move file pointer to cx:dx
 37291                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 37292                                  ;si will be set to 0 hence ds:si points to the control buffer.
 37293                                  ;
 37294                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 37295                                  ;	 be moved.
 37296                                  ;	 ax - # of bytes to read
 37297                                  ;	 bx - file handle
 37298                                  ;	 ds - buffer seg.
 37299                                  ;return: the control data information is read into ds:0 - ds:0200.
 37300                                  ;	 cx,dx value destroyed.
 37301                                  ;	 carry set if error in reading file.
 37302                                  ;----------------------------------------------------------------------------
 37303                                  
 37304 0000321A 50                      	push	ax			;# of bytes to read
 37305 0000321B B80042                  	mov	ax,4200h
 37306 0000321E F9                      	stc
 37307 0000321F CD21                    	int	21h			;move pointer
 37308 00003221 59                      	pop	cx			;# of bytes to read
 37309 00003222 7209                    	jc	short ricb_exit
 37310                                  
 37311 00003224 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 37312 00003226 31F6                    	xor	si,si
 37313 00003228 B43F                    	mov	ah,3Fh			;read into the buffer
 37314 0000322A F9                      	stc
 37315 0000322B CD21                    	int	21h			;should be less than 1024 bytes.
 37316                                  ricb_exit:
 37317 0000322D C3                      	retn
 37318                                  
 37319                                  ;----------------------------------------------------------------------------
 37320                                  
 37321                                  ;! set_country_path procedure is not called from anywhere !
 37322                                  ; Erdogan Tan - 04/08/2023 (Retro DOS v4.2)
 37323                                  %if 0
 37324                                  
 37325                                  set_country_path:
 37326                                  
 37327                                  ;----------------------------------------------------------------------------
 37328                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 37329                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 37330                                  ;     assumes current directory is the root directory.
 37331                                  ;out: ds:di -> full path (cntry_drv).
 37332                                  ;     set the cntry_drv string from the country=,,path command.
 37333                                  ;     ds, es, si value saved.
 37334                                  ;----------------------------------------------------------------------------
 37335                                  
 37336                                  	; 04/01/2023 - Retrodos v4.2 (Modified MSDOS 6.21 IO.SYS)
 37337                                  	; (SYSINIT:4EF4h)
 37338                                  
 37339                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37340                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:36DDh)
 37341                                  
 37342                                  	push	si
 37343                                  
 37344                                  	push	ds			;switch ds, es
 37345                                  	push	es
 37346                                  	pop	ds
 37347                                  	pop	es			;now ds -> confbot, es -> sysinitseg
 37348                                  
 37349                                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 37350                                  	jc	short scp_default_drv 	;no, use current default drive.
 37351                                  
 37352                                  	mov	al,[si]
 37353                                  	inc	si
 37354                                  	inc	si			;si -> next char after ":"
 37355                                  	jmp	short scp_setdrv
 37356                                  
 37357                                  scp_default_drv:
 37358                                  	mov	ah,19h
 37359                                  	int	21h
 37360                                  	add	al,"A"			;convert it to a character.
 37361                                  
 37362                                  scp_setdrv:
 37363                                  	mov	[cs:cntry_drv],al	;set the drive letter.
 37364                                  	mov	di,cntry_path
 37365                                  	mov	al,[si]
 37366                                  	cmp	al, "\"
 37367                                  	je	short scp_root_dir
 37368                                  
 37369                                  	cmp	al,"/"			;let's accept "/" as an directory delim
 37370                                  	;je	short scp_root_dir
 37371                                  	;jmp	short scp_path
 37372                                  	; 04/01/2023
 37373                                  	jne	short scp_path
 37374                                  
 37375                                  scp_root_dir:
 37376                                  	dec	di			;di -> cntry_root
 37377                                  scp_path:
 37378                                  	call	move_asciiz		;copy it
 37379                                  
 37380                                  	mov	di,cntry_drv
 37381                                  scpath_exit:
 37382                                  
 37383                                  	push	ds			;switch ds, es
 37384                                  	push	es
 37385                                  	pop	ds
 37386                                  	pop	es			;ds, es value restored
 37387                                  
 37388                                  	pop	si
 37389                                  	retn
 37390                                  
 37391                                  %endif
 37392                                  
 37393                                  ;----------------------------------------------------------------------------
 37394                                  
 37395                                  chk_drive_letter:
 37396                                  
 37397                                  ;check if ds:[si] is a drive letter followed by ":".
 37398                                  ;assume that every alpha character is already converted to upper case.
 37399                                  ;carry set if not.
 37400                                  
 37401                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37402                                  
 37403 0000322E 50                      	push	ax
 37404 0000322F 803C41                  	cmp	byte [si],"A"
 37405                                  	;jb	short cdletter_no
 37406 00003232 720C                    	jb	short cdletter_exit
 37407 00003234 803C5A                  	cmp	byte [si],"Z"
 37408 00003237 7706                    	ja	short cdletter_no
 37409 00003239 807C013A                	cmp	byte [si+1],":"
 37410                                  	;jne	short cdletter_no
 37411                                  	;jmp	short cdletter_exit
 37412                                  	; 10/09/2023
 37413 0000323D 7401                    	je	short cdletter_exit
 37414                                  
 37415                                  cdletter_no:
 37416 0000323F F9                      	stc
 37417                                  cdletter_exit:
 37418 00003240 58                      	pop	ax
 37419 00003241 C3                      	retn
 37420                                  
 37421                                  ;----------------------------------------------------------------------------
 37422                                  
 37423                                  move_asciiz:
 37424                                  
 37425                                  ;in: ds:si -> source es:di -> target
 37426                                  ;out: copy the string until 0.
 37427                                  ;assumes there exists a 0.
 37428                                  
 37429                                  	; 10/09/2023 - Retrodos v4.1 IO.SYS (Optimization)
 37430                                  
 37431                                  masciiz_loop:
 37432                                  	; 10/09/2023
 37433 00003242 F604FF                  	test	byte [si],0FFh
 37434 00003245 A4                      	movsb
 37435                                  	;cmp	byte [si-1],0	; was it 0?
 37436                                  	;jne	short masciiz_loop
 37437 00003246 75FA                    	jnz	short masciiz_loop ; 10/09/2023
 37438 00003248 C3                      	retn
 37439                                  
 37440                                  
 37441                                  ;----------------------------------------------------------------------------
 37442                                  
 37443                                  ;	ds:dx points to string to output (asciz)
 37444                                  ;
 37445                                  ;	prints <badld_pre> <string> <badld_post>
 37446                                  
 37447                                  badfil:
 37448 00003249 0E                      	push	cs
 37449 0000324A 07                      	pop	es
 37450                                  
 37451 0000324B 89D6                    	mov	si,dx
 37452                                  badload:
 37453 0000324D BA[8936]                	mov	dx,badld_pre	; want to print config error
 37454 00003250 BB[4636]                	mov	bx,crlfm
 37455                                  prnerr:
 37456 00003253 0E                      	push	cs
 37457 00003254 1F                      	pop	ds ; *
 37458 00003255 E81D00                  	call	print
 37459                                  prn1:
 37460 00003258 268A14                  	mov	dl,[es:si]
 37461 0000325B 08D2                    	or	dl,dl
 37462 0000325D 7407                    	jz	short prn2
 37463 0000325F B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 37464 00003261 CD21                    	int	21h
 37465 00003263 46                      	inc	si
 37466 00003264 EBF2                    	jmp	short prn1
 37467                                  prn2:
 37468 00003266 89DA                    	mov	dx,bx
 37469 00003268 E80A00                  	call	print
 37470                                  	; 11/12/2022
 37471                                  	; ds = cs ; *
 37472 0000326B 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 37473                                  	;cmp	byte [cs:donotshownum],1 
 37474 00003270 7407                    	je	short prnexit
 37475                                  	
 37476                                  	; 18/12/2022
 37477                                  	;call	error_line
 37478 00003272 E920F4                  	jmp	error_line
 37479                                  ;prnexit:
 37480                                  	;retn
 37481                                  
 37482                                  ;----------------------------------------------------------------------------
 37483                                  
 37484                                  print:
 37485 00003275 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 37486 00003277 CD21                    	int	21h
 37487                                  prnexit:	; 18/12/2022
 37488 00003279 C3                      	retn
 37489                                  
 37490                                  ;----------------------------------------------------------------------------
 37491                                  
 37492                                  ;  open device pointed to by dx, al has access code
 37493                                  ;   if unable to open do a device open null device instead
 37494                                  
 37495                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 37496                                  	; (SYSINIT:3764h)
 37497                                  open_dev:
 37498 0000327A E80500                  	call	open_file
 37499 0000327D 7309                    	jnc	short open_dev3
 37500                                  
 37501                                  open_dev1:
 37502 0000327F BA[E232]                	mov	dx,nuldev
 37503                                  	; 18/12/2022
 37504                                  	;call	open_file
 37505                                  ;of_retn:
 37506                                  	;retn
 37507                                  	; 18/12/2022
 37508                                  	;jmp	short open_file
 37509                                  open_file:
 37510 00003282 B43D                    	mov	ah,OPEN	; 3Dh
 37511 00003284 F9                      	stc
 37512 00003285 CD21                    	int	21h
 37513                                  of_retn:	; 18/12/2022
 37514 00003287 C3                      	retn
 37515                                  
 37516                                  open_dev3:
 37517 00003288 89C3                    	mov	bx,ax			; handle from open to bx
 37518                                  	;;xor	ax,ax			; get device info
 37519                                  	;;mov	ah,IOCTL ; 44h
 37520                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 37521                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37522                                  	;xor	ax,ax
 37523                                  	;mov	ah,44h	; IOCTL
 37524                                  	; 11/12/2022
 37525 0000328A B80044                  	mov	ax,4400h ; IOCTL<<8 
 37526                                  
 37527 0000328D CD21                    	int	21h
 37528                                  
 37529 0000328F F6C280                  	test	dl,10000000b ; 80h
 37530 00003292 75F3                    	jnz	short of_retn
 37531                                  
 37532 00003294 B43E                    	mov	ah,CLOSE ; 3Eh
 37533 00003296 CD21                    	int	21h
 37534 00003298 EBE5                    	jmp	short open_dev1
 37535                                  
 37536                                  ;----------------------------------------------------------------------------
 37537                                  
 37538                                  ; 18/12/2022
 37539                                  %if 0
 37540                                  open_file:
 37541                                  	mov	ah,OPEN	; 3Dh
 37542                                  	stc
 37543                                  	int	21h
 37544                                  	retn
 37545                                  %endif
 37546                                  
 37547                                  ;----------------------------------------------------------------------------
 37548                                  
 37549                                  ; test int24. return back to dos with the fake user response of "fail"
 37550                                  
 37551                                  int24:
 37552 0000329A B003                    	mov	al,3			; fail the system call
 37553 0000329C CF                      	iret				; return back to dos.
 37554                                  
 37555                                  ; 19/04/2019 - Retro DOS v4.0
 37556                                  
 37557                                  ;----------------------------------------------------------------------------
 37558                                  ; DATA
 37559                                  ;----------------------------------------------------------------------------
 37560                                  
 37561                                  ;include copyrigh.inc			; copyright statement
 37562                                  
 37563                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 37564                                  
 37565                                  ;MsDosVersion6Copyr:
 37566                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 37567                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 37568                                  
 37569                                  ; 22/10/2022
 37570                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 37571                                  
 37572                                  ; 28/12/2022
 37573                                  %if 0
 37574                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37575                                  MsDosVersion5Copyr:
 37576                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 37577                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 37578                                  %endif
 37579                                  
 37580                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37581                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37582                                  ; 20/04/2019 - Retro DOS v4.0
 37583                                  ;BOOTMES:
 37584                                  ;	db      13
 37585                                  ;	db      10
 37586                                  ;	db      "MS-DOS version "
 37587                                  ;	db      MAJOR_VERSION + "0"
 37588                                  ;	db      "."
 37589                                  ;	db      (MINOR_VERSION / 10) + "0"
 37590                                  ;	db      (MINOR_VERSION % 10) + "0"
 37591                                  ;	db      13,10
 37592                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 37593                                  ;	; 22/10/2022
 37594                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 37595                                  ;	;
 37596                                  ;	db	0
 37597                                  
 37598                                  	; 12/12/2022
 37599 0000329D 00                      	db	0
 37600                                  ; 12/12/2022
 37601                                  BOOTMES:
 37602 0000329E 0D0A                    	db	13,10
 37603                                  	;db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 37604                                  	; 28/12/2022
 37605 000032A0 526574726F20444F53-     	db 	"Retro DOS v4.1 (Modified MSDOS 5.0) "
 37605 000032A9 2076342E3120284D6F-
 37605 000032B2 646966696564204D53-
 37605 000032BB 444F5320352E302920 
 37606 000032C4 0D0A                    	db	13,10
 37607                                  	;;db	"by Erdogan Tan [2022] "
 37608                                  	;db	"by Erdogan Tan [2023] " ; 04/01/2023
 37609 000032C6 6279204572646F6761-     	db	"by Erdogan Tan [2024] " ; 05/01/2024
 37609 000032CF 6E2054616E205B3230-
 37609 000032D8 32345D20           
 37610 000032DC 0D0A                    	db	13,10
 37611 000032DE 0D0A2400                	db	13,10,"$",0
 37612                                  
 37613 000032E2 4E554C00                nuldev:	db	"NUL",0
 37614 000032E6 434F4E00                condev:	db	"CON",0
 37615 000032EA 41555800                auxdev:	db	"AUX",0
 37616 000032EE 50524E00                prndev:	db	"PRN",0
 37617                                  
 37618                                  ;IFDEF	CONFIGPROC
 37619 000032F2 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 37619 000032FB 595300             
 37620                                  
 37621 000032FE 413A                    cntry_drv:  db	"A:"
 37622 00003300 5C                      cntry_root: db	"\"
 37623 00003301 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 37623 0000330A 595300             
 37624                                  	    ;db	52 dup (0)
 37625 0000330D 00<rep 34h>             	    times 52 db 0	
 37626                                  
 37627                                  country_file_signature:
 37628 00003341 FF434F554E545259        	db	0FFh,'COUNTRY'
 37629                                  
 37630                                  cntrycodepage_id: 
 37631 00003349 0000                    	dw	0 	
 37632                                  
 37633                                  ;ENDIF ; CONFIGPROC
 37634                                  
 37635                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37636                                  ;;ifdef	MULTI_CONFIG
 37637                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 37638                                  ;tmplate: db	64                      ; must precede commnd
 37639                                  ;;endif
 37640                                  	; 02/11/2022
 37641                                  	;db	12                      ; size of commnd line (excl. null)
 37642                                  
 37643 0000334B 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 37643 00003354 434F4D00           
 37644                                  	;db	51 dup (0)
 37645 00003358 00<rep 33h>             	times	51 db 0
 37646                                  ;endif
 37647                                  
 37648                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37649                                  ;;ifdef	MULTI_CONFIG
 37650                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 37651                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 37652                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 37653                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 37654                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 37655                                  ;	 db	9,"A:\DOS /P",0		;
 37656                                  ;def_swchr:	
 37657                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 37658                                  ;;endif
 37659                                  
 37660                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37661                                  ;command_line:
 37662                                  ;	db	2,"/P"			; default command.com args
 37663                                  ;	;db	125 dup (0)
 37664                                  ;	times	125 db 0
 37665                                  
 37666                                  pathstring:
 37667                                  	;db	64 dup (0)
 37668 0000338B 00<rep 40h>             	times	64 db 0
 37669                                  
 37670                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37671                                  %if 0
 37672                                  
 37673                                  dae_flag:
 37674                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 37675                                  
 37676                                  ;ifdef	MULTI_CONFIG
 37677                                  
 37678                                  MAX_MULTI_CONFIG equ 10
 37679                                  
 37680                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 37681                                  
 37682                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 37683                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 37684                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 37685                                  bLastCol:	db      0               ; ending column on status line
 37686                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 37687                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 37688                                                                          ; 2=disable default 2-second delay
 37689                                  bCRTPage:	db      0               ; value saved from BIOS data area
 37690                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 37691                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 37692                                  bDefBlock:	db      1               ; default block #
 37693                                  bMaxBlock:	db      0               ; maxmimum block #
 37694                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 37695                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 37696                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 37697                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 37698                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 37699                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 37700                                  
 37701                                  szBoot:		db      "CONFIG=",0
 37702                                  szMenu:		db      "MENU",0
 37703                                  szCommon:	db      "COMMON",0
 37704                                  
 37705                                  ;endif	;MULTI_CONFIG
 37706                                  
 37707                                  comtab:	 ; label byte
 37708                                  
 37709                                  ;            cmd len    command         cmd code
 37710                                  ;            -------    -------         --------
 37711                                  
 37712                                  ;ifdef MULTI_CONFIG
 37713                                          db      1,      "[",            CONFIG_BEGIN
 37714                                  ;endif
 37715                                          db      5,      "BREAK",        CONFIG_BREAK
 37716                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 37717                                          db      7,      "COMMENT",      CONFIG_COMMENT
 37718                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 37719                                          db      6,      "DEVICE",       CONFIG_DEVICE
 37720                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37721                                          db      3,      "DOS",          CONFIG_DOS
 37722                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37723                                          db      4,      "FCBS",         CONFIG_FCBS
 37724                                          db      5,      "FILES",        CONFIG_FILES
 37725                                  ;ifdef MULTI_CONFIG
 37726                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 37727                                  ;endif
 37728                                          db      7,      "INSTALL",      CONFIG_INSTALL
 37729                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 37730                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37731                                  ;ifdef MULTI_CONFIG
 37732                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 37733                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 37734                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 37735                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 37736                                  ;endif
 37737                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37738                                  ;ifdef MULTI_CONFIG
 37739                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 37740                                  ;endif
 37741                                          db      3,      "REM",          CONFIG_REM
 37742                                  ;ifdef MULTI_CONFIG
 37743                                          db      3,      "SET",          CONFIG_SET
 37744                                  ;endif
 37745                                          db      5,      "SHELL",        CONFIG_SHELL
 37746                                  ;if    STACKSW
 37747                                          db      6,      "STACKS",       CONFIG_STACKS
 37748                                  ;endif
 37749                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 37750                                  	db	0
 37751                                  %endif
 37752                                  
 37753                                  comtab:
 37754                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37755                                  	; (SYSINIT:38EDh)
 37756 000033CB 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 37757 000033D4 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 37758 000033DB 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 37759 000033E3 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 37759 000033EC 474855             
 37760 000033EF 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 37761 000033F6 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 37762 000033FC 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 37762 00003405 454C               
 37763 00003407 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 37763 00003410 434B4D             
 37764 00003413 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 37764 0000341C 50                 
 37765 0000341D 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 37766 00003425 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 37767 0000342E 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 37768 00003435 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 37769 0000343E 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 37770 00003447 0352454D30              	db      3,      "REM",          CONFIG_REM
 37771 0000344C 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 37771 00003455 31                 
 37772 00003456 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 37773 0000345B 00                      	db	0
 37774                                  
 37775                                  deviceparameters:	
 37776                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 37777                                  devp.specialfunc:	; deviceparameters +
 37778 0000345C 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 37779                                  devp.devtype:
 37780 0000345D 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 37781                                  devp.devattr:
 37782 0000345E 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 37783                                  devp.cylinders:
 37784 00003460 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 37785                                  
 37786 00003462 00<rep 11Eh>            	times	286	db 0
 37787                                  	
 37788 00003580 0200                    hlim:	dw	2
 37789 00003582 0900                    slim:	dw	9
 37790                                  
 37791 00003584 00                      drive:	db	0
 37792                                  
 37793                                  switches:
 37794 00003585 0000                    	dw	0
 37795                                  
 37796                                  ; the following are the recommended bpbs for the media that
 37797                                  ; we know of so far.
 37798                                  
 37799                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37800                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 37801                                  
 37802                                  ; 48 tpi diskettes
 37803                                  
 37804 00003587 0002                    bpb48t	dw	512
 37805 00003589 02                      	db	2
 37806 0000358A 0100                    	dw	1
 37807 0000358C 02                      	db	2
 37808 0000358D 7000                    	dw	112
 37809 0000358F D002                    	dw	2*9*40 ; 720
 37810 00003591 FD                      	db	0FDh
 37811 00003592 0200                    	dw	2
 37812 00003594 0900                    	dw	9
 37813 00003596 0200                    	dw	2
 37814 00003598 00000000                	dd	0
 37815 0000359C 00000000                        dd      0
 37816                                  
 37817                                  ; 96tpi diskettes
 37818                                  
 37819 000035A0 0002                    bpb96t:	dw	512
 37820 000035A2 01                      	db	1
 37821 000035A3 0100                    	dw	1
 37822 000035A5 02                      	db	2
 37823 000035A6 E000                    	dw	224
 37824 000035A8 6009                    	dw	2*15*80 ; 2400
 37825 000035AA F9                      	db	0F9h
 37826 000035AB 0700                    	dw	7
 37827 000035AD 0F00                    	dw	15
 37828 000035AF 0200                    	dw	2
 37829 000035B1 00000000                	dd	0
 37830 000035B5 00000000                        dd      0
 37831                                  
 37832                                  ; 3 1/2 inch diskette bpb
 37833                                  
 37834 000035B9 0002                    bpb35:	dw	512
 37835 000035BB 02                      	db	2
 37836 000035BC 0100                    	dw	1
 37837 000035BE 02                      	db	2
 37838 000035BF 7000                    	dw	112
 37839 000035C1 A005                    	dw	2*9*80 ; 1440
 37840 000035C3 F9                      	db	0F9h
 37841 000035C4 0300                    	dw	3
 37842 000035C6 0900                    	dw	9
 37843 000035C8 0200                    	dw	2
 37844 000035CA 00000000                	dd	0
 37845 000035CE 00000000                        dd      0
 37846                                        
 37847 000035D2 0002                    bpb35h:	dw	512
 37848 000035D4 01                      	db	1
 37849 000035D5 0100                    	dw	1
 37850 000035D7 02                      	db	2
 37851 000035D8 E000                    	dw	224
 37852 000035DA 400B                    	dw	2*18*80 ; 2880
 37853 000035DC F0                      	db	0F0h
 37854 000035DD 0900                    	dw	9
 37855 000035DF 1200                    	dw	18
 37856 000035E1 0200                    	dw	2
 37857 000035E3 00000000                	dd	0
 37858 000035E7 00000000                        dd      0
 37859                                  
 37860                                  ; m037 - BEGIN
 37861                                  
 37862 000035EB 0002                    bpb288:	dw	512
 37863 000035ED 02                      	db	2
 37864 000035EE 0100                    	dw	1
 37865 000035F0 02                      	db	2
 37866 000035F1 F000                    	dw	240
 37867 000035F3 8016                    	dw	2*36*80 ; 5760
 37868 000035F5 F0                      	db	0F0h
 37869 000035F6 0900                    	dw	9
 37870 000035F8 2400                    	dw	36
 37871 000035FA 0200                    	dw	2
 37872 000035FC 00000000                	dd	0
 37873 00003600 00000000                        dd      0
 37874                                  
 37875                                  ; m037 - END
 37876                                  
 37877                                  ; 12/05/2019
 37878                                  
 37879                                  align 2
 37880                                  
 37881                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37882                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 37883                                  
 37884 00003604 [8735]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 37885 00003606 [A035]                  	    dw	    bpb96t		; 96tpi drives
 37886 00003608 [B935]                  	    dw	    bpb35		; 3.5" drives
 37887                                  ; the following are not supported, so default to 3.5" media layout
 37888 0000360A [B935]                  	    dw	    bpb35		; not used - 8" drives
 37889 0000360C [B935]                  	    dw	    bpb35		; not used - 8" drives
 37890 0000360E [B935]                  	    dw	    bpb35		; not used - hard files
 37891 00003610 [B935]                  	    dw	    bpb35		; not used - tape drives
 37892 00003612 [D235]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 37893 00003614 [B935]                  	    dw	    bpb35		; ERIMO				m037
 37894 00003616 [EB35]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 37895                                  
 37896                                  switchlist: 
 37897 00003618 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 37898                                  
 37899                                  ;----------------------------------------------------------------------------
 37900                                  ; Messages
 37901                                  ;----------------------------------------------------------------------------
 37902                                  
 37903                                  ; 19/04/2019 - Retro DOS v4.0
 37904                                  
 37905                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 37906                                  
 37907 00003621 00                      	db 	0
 37908                                  
 37909                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37910                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 37911                                  
 37912                                  badopm:
 37913 00003622 0D0A                    	db	0Dh,0Ah 
 37914 00003624 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 37914 0000362D 7A656420636F6D6D61-
 37914 00003636 6E6420696E20434F4E-
 37914 0000363F 4649472E535953     
 37915                                  crlfm:
 37916 00003646 0D0A24                  	db	0Dh,0Ah,'$'
 37917                                  badparm:
 37918 00003649 0D0A                    	db	0Dh,0Ah
 37919 0000364B 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 37919 00003654 6E64206F7220706172-
 37919 0000365D 616D6574657273202D-
 37919 00003666 2024               
 37920                                  badsiz_pre:
 37921 00003668 0D0A                    	db	0Dh,0Ah
 37922 0000366A 536563746F72207369-     	db	'Sector size too large in file $'
 37922 00003673 7A6520746F6F206C61-
 37922 0000367C 72676520696E206669-
 37922 00003685 6C652024           
 37923                                  badld_pre:
 37924 00003689 0D0A                    	db	0Dh,0Ah
 37925 0000368B 426164206F72206D69-     	db	'Bad or missing $'
 37925 00003694 7373696E672024     
 37926                                  badcom:
 37927 0000369B 436F6D6D616E642049-     	db	'Command Interpreter',0
 37927 000036A4 6E7465727072657465-
 37927 000036AD 7200               
 37928                                  badcountry:
 37929 000036AF 0D0A                    	db	0Dh,0Ah
 37930 000036B1 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 37930 000036BA 6F756E74727920636F-
 37930 000036C3 6465206F7220636F64-
 37930 000036CC 6520706167650D0A24 
 37931                                  badcountrycom:
 37932 000036D5 0D0A                    	db	0Dh,0Ah
 37933 000036D7 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 37933 000036E0 434F554E5452592063-
 37933 000036E9 6F6D6D616E640D0A24 
 37934                                  insufmemory:
 37935 000036F2 0D0A                    	db	0Dh,0Ah
 37936 000036F4 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 37936 000036FD 656E74206D656D6F72-
 37936 00003706 7920666F7220434F55-
 37936 0000370F 4E5452592E53595320-
 37936 00003718 66696C650D0A24     
 37937                                  badmem:
 37938 0000371F 0D0A                    	db	0Dh,0Ah
 37939 00003721 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 37939 0000372A 74696F6E20746F6F20-
 37939 00003733 6C6172676520666F72-
 37939 0000373C 206D656D6F72790D0A-
 37939 00003745 24                 
 37940                                  badblock:
 37941 00003746 0D0A                    	db	0Dh,0Ah
 37942 00003748 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 37942 00003751 626C6F636B20646576-
 37942 0000375A 696365730D0A24     
 37943                                  badstack:
 37944 00003761 0D0A                    	db	0Dh,0Ah
 37945 00003763 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 37945 0000376C 5441434B2070617261-
 37945 00003775 6D65746572730D0A24 
 37946                                  	; 18/12/2022
 37947                                  ;badorder:
 37948                                  	;db	0Dh,0Ah
 37949                                  	;db	'Incorrect order in CONFIG.SYS line $'
 37950                                  errorcmd:
 37951 0000377E 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 37951 00003787 434F4E4649472E5359-
 37951 00003790 53206C696E652024   
 37952                                  
 37953                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 37954                                  %if 0
 37955                                  
 37956                                  OnOff:	db	'ON'
 37957                                  OnOff2:	db	'OFF'
 37958                                  
 37959                                  StartMsg:
 37960                                  	db	'Starting MS-DOS...',0Dh,0Ah
 37961                                  	db	0Ah,0
 37962                                  _$PauseMsg:
 37963                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 37964                                  _$CleanMsg:
 37965                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 37966                                  _$InterMsg:
 37967                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 37968                                  _$MenuHeader:
 37969                                  	db	0Dh,0Ah
 37970                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 37971                                  	db	'  =======================',0Dh,0Ah,'$'
 37972                                  _$MenuPrmpt:
 37973                                  	db	'  Enter a choice: $'
 37974                                  _$StatusLine:
 37975                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 37976                                  	db	'and AUTOEXEC.BAT [ ]$'
 37977                                  _$InterPrmpt:
 37978                                  	db	' [Y,N]?$'
 37979                                  _$YES:	db	'YES$'
 37980                                  _$NO:	db	'NO $'
 37981                                  _$TimeOut:
 37982                                  	db	'Time remaining: $'
 37983                                  badcomprmpt:
 37984                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 37985                                  	db	0Dh,0Ah,'$'
 37986                                  _$AutoPrmpt:
 37987                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 37988                                  
 37989                                  %endif
 37990                                  
 37991                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 37992                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 37993                                  
 37994                                  TooManyDrivesMsg:
 37995 00003798 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 37995 000037A1 4C6F676963616C2064-
 37995 000037AA 726976657320706173-
 37995 000037B3 74205A3A2065786973-
 37995 000037BC 7420616E642077696C-
 37995 000037C5 6C2062652069676E6F-
 37995 000037CE 7265640D0A24       
 37996                                  
 37997                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 37998                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 37999                                  	;db	7 dup(0)
 38000                                  
 38001                                  	;times	7 db 0
 38002                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 38003                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 38004                                  	; 09/12/2022
 38005                                  	;times 4 db 0
 38006                                  
 38007                                  ;----------------------------------------------------------------------------
 38008                                  		; 09/12/2022
 38009                                  		;db 0
 38010                                  
 38011                                  number3div	equ ($-SYSINIT$)
 38012                                  number3mod	equ (number3div % 16)
 38013                                  
 38014                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 38015 000037D4 00<rep Ch>              		times (16-number3mod) db 0
 38016                                  %endif
 38017                                  
 38018                                  ;----------------------------------------------------------------------------
 38019                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 38020                                  ;----------------------------------------------------------------------------
 38021                                  
 38022                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 38023                                  
 38024                                  ;----------------------------------------------------------------------------
 38025                                  ; 20/04/2019 - Retro DOS v4.0
 38026                                  
 38027                                  ; 09/12/2022
 38028                                  ;
 38029                                  ;bss_start:
 38030                                  ;
 38031                                  ;ABSOLUTE bss_start
 38032                                  ;
 38033                                  ;alignb 16
 38034                                  
 38035                                  SI_end:  ; SI_end equ $
 38036                                  
 38037                                  ;----------------------------------------------------------------------------
 38038                                  
 38039                                  ;sysinitseg	ends
 38040                                  
 38041                                  ; ***************************************************************************
 38042                                  
 38043                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 38044                                  
 38045                                  SYSINITSIZE	equ SI_end - SYSINIT$
 38046                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 38047                                  
 38048                                  ;----------------------------------------------------------------------------
 38049                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 38050                                  ;----------------------------------------------------------------------------
 38051                                  
 38052                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 38053                                  ;----------------------------------------------------------------------------
 38054                                  ;----------------------------------------------------------------------------
 38055                                  
 38056                                  ; ----------------------------------------------------------------------------
 38057                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 38058                                  ; ----------------------------------------------------------------------------
 38059                                  ; 18/03/2019 - Retro DOS v4.0 
 38060                                  ; 11/06/2018 - Retro DOS v3.0 
 38061                                  
 38062                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 38063                                  		;; 28/06/2019 ('msdos6.s') 
 38064                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 38065                                  		
 38066                                  		; 09/07/2024 (BugFix)
 38067                                  		; 07/07/2024
 38068                                  		; 12/04/2024
 38069                                  		; 22/01/2024 (BugFix)
 38070                                  		; 21/01/2024
 38071                                  		; 16/01/2024 (BugFix)
 38072                                  		; 15/01/2024
 38073                                  		; 27/09/2023 (BugFix)
 38074                                  		; 25/09/2023
 38075                                  		; 29/12/2022
 38076 000037E0 <bin 8BEFh>             		incbin	'MSDOS51.BIN' ; Retro DOS 4.1 - MSDOS 5.0+ KERNEL
 38077                                  		
 38078                                  		;; 28/12/2022 (BugFix)
 38079                                  		;; 22/12/2022
 38080                                  		;; 21/12/2022 ('msdos5.s')
 38081                                  		;incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 38082                                  	
 38083                                  ; 28/09/2023	
 38084                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 38085                                  
 38086 0000C3CF 90                      align 2
 38087                                  
 38088                                  ; 21/12/2022
 38089                                  ;;END_OF_KERNEL:
 38090                                  ;END_OF_KERNEL equ $
 38091                                  
 38092                                  ; 28/09/2023
 38093                                  S3SIZE equ $-$$
 38094                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 38095                                  
 38096                                  ;=============================================================================
 38097                                  ;	END
 38098                                  ;=============================================================================
 38099                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 38100                                  ; ------------------------------
 38101                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
